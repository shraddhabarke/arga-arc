{
    "model": "gpt-4o-2024-05-13",
    "usage": {
        "completion_tokens": 17469,
        "prompt_tokens": 8418,
        "total_tokens": 25887,
        "prompt_tokens_details": {
            "cached_tokens": 0
        },
        "completion_tokens_details": {
            "reasoning_tokens": 0
        }
    },
    "request_time": 14.13738489151001,
    "n_requested": 100,
    "prompt_messages": [
        {
            "role": "system",
            "content": "You are an assistant chatbot with human-like perception, reasoning and learning capabilities.\nYou can solve tasks concisely, efficiently, and moreover, correctly.\nLet's engage in perception- and logic-based tasks.\nYou only output source code.\nNo explanations or any other text.\nOnly code."
        },
        {
            "role": "user",
            "content": "You are an efficient assistant for logical reasoning and code generation.\nYou will help me solve a visual perception and reasoning task.\nI will first provide you with the definition of a Domain Specific Language you will use for writing a solution for the task.\nI will then present you with the description of the task that you will be tested in.\nYou will then respond the queries I make regarding the solution of the task.\n\n\nThis is the definition of the DSL you will use to solve the task.\nIt is given as a context-free grammar in the EBNF format used by the Lark parser generator, with some informative comments about the semantics.\nYou will return a string that is parseable by the `program` non-terminal of the grammar.\n\n```\nlibrary: \"(\" program* \")\"\n\n// Rules are executed one after another, in the order they appear.\n// There could be no rules, in which case the program does nothing.\nprogram: \"(\" \"do\" rule* \")\"\n\n// First, it declares the variables that will be used in the filter and transform expressions.\n// Second, it defines a filter expression that an object must satisfy in order to be transformed.\n// Then, it defines a list of transforms that will be applied objects that satisfy the filter expression.\nrule: \"(\" \"rule\" decl filter xform_list \")\"\n\n// The `vars` declaration specifies the names of the variables that will be used in the filter and transform expressions.\n// The `this` variable is always declared, and it refers to the object that is being transformed.\n// There could also be an additional optional variable `other` that refers to another object in the grid,\n// which is not being transformed, but is used in the filter expression.\ndecl: \"(\" \"vars\" \"(\" VAR_THIS VAR_OTHER? \")\" \")\"\n\n// A filter is a predicate over the objects in the grid.\n// If no filter is given, then all the objects are selected.\nfilter: \"(\" \"filter\" filter_expr? \")\"\n\n// It can be a primitive filter operation, or a boolean expression using the `and`, `or`, and `not` connectives.\n// IMPORTANT: The `and` and `or` connectives are strictly binary, so to take the conjunction or disjunction \n// of more than two expressions, the binary connectives must be nested.\n// AGAIN, the `and` and `or` connectives are not variadic, so the following is not allowed:\n// (and true true false)\n// Instead, the following must be used:\n// (and true (and true false))\n// The `not` connective is unary as expected.\n// The objects that are transformed are the ones that satisfy the filter expression.\nfilter_expr: filter_prim\n           | \"(\" OP_AND filter_expr filter_expr \")\"   \n           | \"(\" OP_OR filter_expr filter_expr \")\"\n           | \"(\" OP_NOT filter_expr \")\"\n\nfilter_prim: \"(\" COLOR_EQ fcolor_expr fcolor_expr \")\"           \n           | \"(\" SIZE_EQ size_expr size_expr \")\"                \n           | \"(\" HEIGHT_EQ height_expr height_expr \")\"          \n           | \"(\" WIDTH_EQ width_expr width_expr \")\"             \n           | \"(\" DEGREE_EQ degree_expr degree_expr \")\"          \n           | \"(\" SHAPE_EQ shape_expr shape_expr \")\"             \n           | \"(\" COLUMN_EQ column_expr column_expr \")\"         \n           | \"(\" NEIGHBOR_OF VAR VAR \")\"      // true if the two objects are neighbors\n\n\n// Transforms are applied one after another, in the order they appear.\nxform_list: \"(\" \"apply\" xform+ \")\"\n\n// A single transform is applied to all the objects that are bound to the `this` variable. \n// The transform is applied to each such object independently and simultaneously.\nxform:     \"(\" TR_UPDATE_COLOR color_expr \")\"                          // change this object color to the given color \n         | \"(\" TR_MOVE_NODE direction_expr \")\"                         // move this object in the given direction\n         | \"(\" TR_EXTEND_NODE direction_expr OVERLAP \")\"               // extend (move while leaving a trail) this object in the given direction\n                                                                  // if overlap is false, then the object is extended until it hits another object,\n                                                                  // otherwise it is extended until the edge of the grid.\n         | \"(\" TR_MOVE_NODE_MAX direction_expr \")\"                     // move this object until it hits another object, in the given direction\n         | \"(\" TR_ROTATE_NODE ROT_ANGLE \")\"                       // rotate this object by the given angle\n         | \"(\" TR_ADD_BORDER color_expr \")\"                            // color this exterior pixels of the object with the given color\n         | \"(\" TR_FILL_RECTANGLE color_expr OVERLAP \")\"                // color this interior of a hollow rectangle with the given color\n         | \"(\" TR_HOLLOW_RECTANGLE color_expr \")\"                      // color this interior of a solid rectangle with the given color\n         | \"(\" TR_MIRROR mirror_expr \")\"\n         | \"(\" TR_FLIP SYMMETRY_AXIS \")\"                          // flip this object with respect to the given axis\n         | \"(\" TR_INSERT OBJECT_ID img_pts_expr RELATIVE_POSITION \")\" // insert a copy of this object at the position of the given object\n         | \"(\" TR_NOOP \")\"                                        // do nothing\n\nfcolor_expr: FCOLOR\n           | \"(\" COLOR_OF VAR \")\"\n\ncolor_expr: COLOR\n          | \"(\" COLOR_OF VAR \")\"\n\nsize_expr: SIZE\n         | \"(\" SIZE_OF VAR \")\"\n\nheight_expr: HEIGHT\n           | \"(\" HEIGHT_OF VAR \")\"\n\nwidth_expr: WIDTH\n          | \"(\" WIDTH_OF VAR \")\"\n\ndegree_expr: DEGREE\n           | \"(\" DEGREE_OF VAR \")\" \n\nshape_expr: SHAPE\n          | \"(\" SHAPE_OF VAR \")\"\n\ncolumn_expr: COLUMN\n           | \"(\" COLUMN_OF VAR \")\"\n\ndirection_expr: DIRECTION\n              | \"(\" DIRECTION_OF VAR \")\"\n\nimg_pts_expr: IMAGE_POINTS\n            | \"(\" IMAGE_POINTS_OF VAR \")\"\n\nmirror_expr: \"(\" MIRROR_AXIS_OF VAR \")\"\n\nOBJECT_ID: /[0-9]+/\nFCOLOR: \"O\" // black\n      | \"B\" // blue\n      | \"R\" // red\n      | \"G\" // green\n      | \"Y\" // yellow\n      | \"X\" // grey\n      | \"F\" // fuchsia\n      | \"A\" // orange\n      | \"C\" // cyan  \n      | \"W\" // brown\n\nSIZE: \"min\" | \"max\" | \"even\" | \"odd\" | /[0-9]+/  // size of objects\nDEGREE: \"min\" | \"max\" | \"even\" | \"odd\" | /[0-9]+/  // degree of objects\nHEIGHT: \"min\" | \"max\" | \"even\" | \"odd\" | /[0-9]+/  // height of objects\nWIDTH: \"min\" | \"max\" | \"even\" | \"odd\" | /[0-9]+/  // width of objects\nCOLUMN: \"center\" | \"even\" | \"odd\" | /[0-9]+/  // column of objects\nSHAPE: \"square\" | \"enclosed\"  // shape of objects\n\nDIRECTION: \"up\"\n         | \"down\"\n         | \"left\"\n         | \"right\"\n         | \"up_left\"\n         | \"up_right\"\n         | \"down_left\"\n         | \"down_right\"\n\nSYMMETRY_AXIS: \"vertical\" | \"horizontal\" | \"diagonal_left\" | \"diagonal_right\"\n\n// The angle of clockwise rotation, in degrees.\nROT_ANGLE: \"0\" \n         | \"90\" \n         | \"180\" \n         | \"270\"\n\nCOLOR: \"O\" // black\n      | \"B\" // blue\n      | \"R\" // red\n      | \"G\" // green\n      | \"Y\" // yellow\n      | \"X\" // grey\n      | \"F\" // fuchsia\n      | \"A\" // orange\n      | \"C\" // cyan  \n      | \"W\" // brown\n\nOVERLAP: BOOL\n\nBOOL: \"true\" | \"false\"\n\nIMAGE_POINTS: \"top\" | \"bottom\" | \"left\" | \"right\" | \"top_left\" | \"top_right\" | \"bottom_left\" | \"bottom_right\" \n\nRELATIVE_POSITION: \"source\"\n                 | \"target\"\n                 | \"middle\"\n\nVAR: VAR_THIS | VAR_OTHER\nVAR_THIS: \"this\"\nVAR_OTHER: \"other\"\n\nOP_AND: \"and\"\nOP_OR: \"or\"\nOP_NOT: \"not\"\n\nCOLOR_OF: \"color_of\"\nSIZE_OF: \"size_of\"\nHEIGHT_OF: \"height_of\"\nWIDTH_OF: \"width_of\"\nDEGREE_OF: \"degree_of\"\nSHAPE_OF: \"shape_of\"\nCOLUMN_OF: \"column_of\"\nDIRECTION_OF: \"direction_of\"\nIMAGE_POINTS_OF: \"img_pts_of\"\nMIRROR_AXIS_OF: \"mirror_axis_of\"\n\nCOLOR_EQ: \"color_equals\"\nSIZE_EQ: \"size_equals\"\nDEGREE_EQ: \"degree_equals\"\nHEIGHT_EQ: \"height_equals\"\nWIDTH_EQ: \"width_equals\"\nSHAPE_EQ: \"shape_equals\"\nCOLUMN_EQ: \"column_equals\"\nNEIGHBOR_OF: \"neighbor_of\"\n\nTR_UPDATE_COLOR: \"update_color\"\nTR_MOVE_NODE: \"move_node\"\nTR_EXTEND_NODE: \"extend_node\"\nTR_MOVE_NODE_MAX: \"move_node_max\"\nTR_ROTATE_NODE: \"rotate_node\"\nTR_ADD_BORDER: \"add_border\"\nTR_FILL_RECTANGLE: \"fill_rectangle\"\nTR_HOLLOW_RECTANGLE: \"hollow_rectangle\"\nTR_MIRROR: \"mirror\"\nTR_FLIP: \"flip\"\nTR_INSERT: \"insert\"\nTR_NOOP: \"noop\"\n\nCOMMENT: /\\s*/ \";;\" /[^\\n]/*\n\n%import common.WS\n%import common.LCASE_LETTER\n%import common.INT\n%ignore WS\n%ignore COMMENT\n```\n\n\nNow we continue with the visual perception and reasoning task.\nThe input for the task is a small number of pairs of grids of characters.\nThe value of each of the cells of the grids are the colors defined in the DSL, so we can think of grids as images.\nEach pair of images correspond to an input-output example for an unknown program P.\nFor each pair, the program P is evaluated on the image grid and operates on the objects that appear in it.\nThe output of the program is then the output image.\nThe objects in the images are easy and natural to identify for humans, so there is no need to define them explicitly.\nHowever you are able to abstract them correctly, and the DSL is interpreted with the same correct abstraction.\n\n\nNow I will show you some demonstration tasks along with the output you would be expected to produce for each of them.\n\n## DEMONSTRATION TASK 1\n\n### INPUT\nPAIR 1\nINPUT GRID:\nO O O O O O O O\nO O O O O R O O\nO R O O O R O R\nO R R O O R O O\nO O O O O O O O\nO R R O O O O O\nO R R O R R O O\nO O O O O O O O\nOUTPUT GRID:\nO O O O O O O O\nO O O O O Y O O\nO Y O O O Y O Y\nO Y Y O O Y O O\nO O O O O O O O\nO Y Y O O O O O\nO Y Y O Y Y O O\nO O O O O O O O\n\nPAIR 2\nINPUT GRID:\nO O O O O O O O O O\nO O O O R O O O O O\nO G O O R O O W O O\nO O G O O O W W O O\nO O G O O O O O O O\nO O O O X O O O O O\nO O O O O O F F F O\nO B O O O O O O O O\nO B B B B O O C C O\nO O O O O O O C O O\nOUTPUT GRID:\nO O O O O O O O O O\nO O O O Y O O O O O\nO Y O O Y O O Y O O\nO O Y O O O Y Y O O\nO O Y O O O O O O O\nO O O O Y O O O O O\nO O O O O O Y Y Y O\nO Y O O O O O O O O\nO Y Y Y Y O O Y Y O\nO O O O O O O Y O O\n\n### EXPECTED OUTPUT\n{\n    \"nl_description\": \"Recolor all objects to color Y\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color Y)\\n        )\\n    )\\n)\"\n}\n\n\n## DEMONSTRATION TASK 2\n\n### INPUT\nPAIR 1\nINPUT GRID:\nO O O O O O O O\nO F F O O O R O\nO F F O O O O O\nO O O O O O O O\nO O O O O O O O\nO O O O O O O O\nO O A O O X X O\nO O O O O O O O\nOUTPUT GRID:\nO O O O O O O O\nO F F R R R R O\nO F F O O O O O\nO O A O O O O O\nO O A O O O O O\nO O A O O O O O\nO O A O O X X O\nO O O O O O O O\n\nPAIR 2\nINPUT GRID:\nO O O O O O O O O O\nO O O Y O G G G G O\nO O F O O G G G G O\nO O O O O O O O O O\nO O O O O O O O O O\nO O O O O O O O O O\nO C C C O O O O O O\nO C C C O O O O A O\nO C C C O O O X O O\nO O O O O O O O O O\nOUTPUT GRID:\nO O O O O O O O O O\nO O O Y O G G G G O\nO O F Y O G G G G O\nO O F Y O O O O O O\nO O F Y O O O O O O\nO O F Y O O O O O O\nO C C C O O O O O O\nO C C C A A A A A O\nO C C C X X X X O O\nO O O O O O O O O O\n\n### EXPECTED OUTPUT\n{\n    \"nl_description\": \"Extend all the objects of size 1 toward the object of maximum size, without overlapping.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (size_equals (size_of this) 1)\\n                (and\\n                    (neighbor_of this other)\\n                    (size_equals (size_of other) max)\\n                )\\n            )\\n        )\\n        (apply\\n            (extend_node (direction_of other) false)\\n        )    \\n    )\\n)\"\n}\n\n\n## DEMONSTRATION TASK 3\n\n### INPUT\nPAIR 1\nINPUT GRID:\nO O O O O O O O O O\nO O O O O O O G O O\nO O G O O O O G O O\nO O G G O O O G G O\nO O O O O O O O O O\nO G G O O O O O O O\nO G G O O G G G O O\nO O O O O O O O O O\nO O G G O O O G O O\nO O O O O O O O O O\nOUTPUT GRID:\nO O O O O O O O O O\nO O B O O O O G O O\nO O B B O O O G O O\nO O O O O O O G G O\nO O O O O O O O O O\nO G G O O B B B O O\nO G G O O O O O O O\nO O O O O O O O O O\nO O G G O O O G O O\nO O O O O O O O O O\n\nPAIR 2\nINPUT GRID:\nO O O O O O O O O O O O O O O O\nO O O O O O O O O O O O O G O O\nO B B O O O O O O C C C O G G O\nO O O O O F O O O O O O O O O O\nO O O O O F O O O O R R O O O O\nO O O O O F O O O O R R O O O O\nO O O O O O O O W O O O O O O O\nO O O A O O O W W O O O X O O O\nO O O A A O O W W O O O X X X O\nO O O O O O O O O O O O O O O O\nO O O O O O O O O O Y Y O O O O\nO O O O B O O O O O O O O O O O\nO Y O O B O O O G O O O O F F O\nO Y O O O O O O G O O O O F F O\nO Y Y Y O O O O G O O O O O O O\nO O O O O O O O O O O O O O O O\nOUTPUT GRID:\nO O O O O O O O O O O O O B O O\nO O O O O O O O O B B B O B B O\nO B B O O B O O O O O O O O O O\nO O O O O B O O O O O O O O O O\nO O O O O B O O O O R R O O O O\nO O O O O O O O O O R R O O O O\nO O O B O O O O W O O O O O O O\nO O O B B O O W W O O O X O O O\nO O O O O O O W W O O O X X X O\nO O O O O O O O O O O O O O O O\nO O O O O O O O O O Y Y O O O O\nO O O O B O O O B O O O O O O O\nO Y O O B O O O B O O O O F F O\nO Y O O O O O O B O O O O F F O\nO Y Y Y O O O O O O O O O O O O\nO O O O O O O O O O O O O O O O\n\n### EXPECTED OUTPUT\n{\n    \"nl_description\": \"Move all objects of size 3 one step up, and then recolor them to color B.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (size_equals (size_of this) 3)\\n        )\\n        (apply\\n            (move_node up)\\n            (update_color B)\\n        )\\n    )\\n)\"\n}\n\n\n## DEMONSTRATION TASK 4\n\n### INPUT\nPAIR 1\nINPUT GRID:\nO O O O R O O O A O\nO B O O O O B O O O\nO O O O O O O O O O\nO O O O X X X O O O\nO O O O X X X O O F\nW O O O O O O O O O\nO O F O O O Y O O O\nO O O O O O O O O O\nO O O O G O O O W O\nO O O O O O O O O O\nOUTPUT GRID:\nO O O O O O O O A O\nO B O O O O O O O O\nO O O O R O B O O O\nO O O O X X X O O O\nO O O O X X X F O O\nW O O O G O Y O O O\nO O F O O O O O O O\nO O O O O O O O O O\nO O O O O O O O W O\nO O O O O O O O O O\n\nPAIR 2\nINPUT GRID:\nO O O F O O O R O O O O\nO O O O O O O O O Y O O\nO O O O O B O O O O O O\nO O R O O O O O G O O O\nB O O O O G O O O O O A\nO O O O O O R O O O W O\nO O O O O O O O C O O O\nG O X X O O O O O O O R\nO O X X O O O O O O Y O\nO O X X O O A O O O O O\nO F X X O O O O O O O O\nO O O O O Y O O O O O O\nOUTPUT GRID:\nO O O O O O O R O O O O\nO O O O O O O O O Y O O\nO O O O O B O O O O O O\nO O O O O O O O G O O O\nB O O O O G O O O O O A\nO O O O O O R O O O W O\nO O R F O O O O C O O O\nO G X X R O O O O O O O\nO O X X Y O O O O O O O\nO O X X A O O O O O O O\nO F X X O O O O O O O O\nO O O O O Y O O O O O O\n\nPAIR 3\nINPUT GRID:\nO G O O O O O O\nO O O A O O A O\nW O O O W O O O\nO O O O O O O B\nO R O X O F O O\nO O O O O O O O\nO G O O F O O G\nO O B O O A O O\nOUTPUT GRID:\nO G O O O O O O\nO O O O O O A O\nW O O O W O O O\nO O O A O O O B\nO O R X F O O O\nO O O O O O O O\nO G O O F O O G\nO O B O O A O O\n\n### EXPECTED OUTPUT\n{\n    \"nl_description\": \"Move all objects of color different than X, toward the object of color X, if they are neighbors of it.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (not (color_equals (color_of this) X))\\n                (and\\n                    (neighbor_of this other)\\n                    (color_equals (color_of other) X)\\n                )\\n            )\\n        )\\n        (apply\\n            (move_node_max (direction_of other))\\n        )\\n    )\\n)\"\n}\n\n\nNow follows task you will be evaluated on.\nOutput the solution as a JSON object, which should contain both a natural language description of the solution and the solution written in the DSL.\nThe code should be parseable by the DSL grammar.\nThe JSON must have the following structure:\n\n{\n    \"nl_description\": \"TO_BE_FILLED\",\n    \"code\": \"TO_BE_FILLED\"\n}\n\n## TEST TASK\n\nPAIR 1\nINPUT GRID:\nO O O O O O O O O O C O O O O O O O O O O O O\nO O O O O O O O O O C O O O O O C O O O O O O\nO O O O O O O O O O C O O O O O C O O O O O O\nO O O O O O C O O O C O O O O O C O O O O O O\nO O O C C C C C C C C C C O O O C O O O O O O\nO O O O O O C O O O C O O O O O C O O O C O O\nO O O O O O C O O O C O O O O O C O O O C O O\nO O O O O O C O O O C O O O O O C O O O C O O\nO O O C C C C C C C C C C C C C C C C C C C O\nO O O O O O C O O O C O O O O O C O O O C O O\nO O O O O O C O O O C O O O O O C O O O C O O\nO O O O O O C O O O O O O O O O C O O O C O O\nO O O O O O C O O O O O O O O O C O O O O O O\nO O O O O O C O O O O O O O O O C O O O O O O\nO O O O O O C O O O O O O O O O C O O O O O O\nC C C C C C C C C C C C C C C C C C O O O O O\nO O O O O O C O O O O O O C O O C O O O O O O\nO O O O O O C O O O O O O C O O C O O O O O O\nO O O O O O C O O O O O O C O O C O O O O O O\nO O O O O O C O O O O O C C C C C C C C C O O\nO O O O O O O O O O O O O C O O C O O O O O O\nO O O O O O O O O O O O O C O O C O O O O O O\nO O O O O O O O O O O O O O O O O O O O O O O\nOUTPUT GRID:\nG G G G G G G G G G C G G G G G G G G G G G G\nG G G G G G G G G G C G G G G G C G G G G G G\nG G G G G G G G G G C G G G G G C G G G G G G\nG G G G G G C G G G C G G G G G C G G G G G G\nG G G C C C C C C C C C C G G G C G G G G G G\nG G G G G G C R R R C G G G G G C G G G C G G\nG G G G G G C R R R C G G G G G C G G G C G G\nG G G G G G C R R R C G G G G G C G G G C G G\nG G G C C C C C C C C C C C C C C C C C C C G\nG G G G G G C R R R C R R R R R C G G G C G G\nG G G G G G C R R R C R R R R R C G G G C G G\nG G G G G G C R R R R R R R R R C G G G C G G\nG G G G G G C R R R R R R R R R C G G G G G G\nG G G G G G C R R R R R R R R R C G G G G G G\nG G G G G G C R R R R R R R R R C G G G G G G\nC C C C C C C C C C C C C C C C C C G G G G G\nG G G G G G C G G G G G G C R R C G G G G G G\nG G G G G G C G G G G G G C R R C G G G G G G\nG G G G G G C G G G G G G C R R C G G G G G G\nG G G G G G C G G G G G C C C C C C C C C G G\nG G G G G G G G G G G G G C G G C G G G G G G\nG G G G G G G G G G G G G C G G C G G G G G G\nG G G G G G G G G G G G G G G G G G G G G G G\n\nPAIR 2\nINPUT GRID:\nO O O O O O O O O O O O O O O O O O O O O O O O O\nO O O O B O O O O O O O O O O O B O O O O O O O O\nO O O O B O O O O O O O O O O O B O O O O O O O O\nB B B B B B B B B B B B B B B B B B B B B B B B B\nO O O O B O O O O O B O O O O O B O O O O O O O O\nO O O O B O O O O O B O O O O O B O O O O O O O O\nO O O O B O O O O O B O O O O O B O O O O O O O O\nO O O O B O O O B B B B B B B B B B B B O O O O O\nO O O O B O O O O O B O O O O O B O O O O O O O O\nO O O O B O O O O O B O O O O O B O O O O O O O O\nO O O O B O O O O O B O O O O O B O O O O O O O O\nO O O O B O O O O O B O O O O O B O O O O O O O O\nO B B B B B B B B B B B B O O O B O O O O O O O O\nO O O O B O O O O O B O O O O O B O O O O O O O O\nO O O O B O O O O O B O O O O O B O O O O O O O O\nO O O O B O O O O O B O O O O O B O O O O O O O O\nO O O O B O O O O O B O O O B B B B B B B O O O O\nO O O O B O O O O O B O O O O O B O O O O O O O O\nO O O O B O O O O O B O O O O O B O O O O O O O O\nO O O O O O O O O O B O O O O O B O O O O O O O O\nO O O O O O O O O O O O O O O O O O O O O O O O O\nO O O O O O O O O O O O O O O O O O O O O O O O O\nOUTPUT GRID:\nG G G G G G G G G G G G G G G G G G G G G G G G G\nG G G G B G G G G G G G G G G G B G G G G G G G G\nG G G G B G G G G G G G G G G G B G G G G G G G G\nB B B B B B B B B B B B B B B B B B B B B B B B B\nG G G G B R R R R R B R R R R R B G G G G G G G G\nG G G G B R R R R R B R R R R R B G G G G G G G G\nG G G G B R R R R R B R R R R R B G G G G G G G G\nG G G G B R R R B B B B B B B B B B B B G G G G G\nG G G G B R R R R R B G G G G G B G G G G G G G G\nG G G G B R R R R R B G G G G G B G G G G G G G G\nG G G G B R R R R R B G G G G G B G G G G G G G G\nG G G G B R R R R R B G G G G G B G G G G G G G G\nG B B B B B B B B B B B B G G G B G G G G G G G G\nG G G G B G G G G G B G G G G G B G G G G G G G G\nG G G G B G G G G G B G G G G G B G G G G G G G G\nG G G G B G G G G G B G G G G G B G G G G G G G G\nG G G G B G G G G G B G G G B B B B B B B G G G G\nG G G G B G G G G G B G G G G G B G G G G G G G G\nG G G G B G G G G G B G G G G G B G G G G G G G G\nG G G G G G G G G G B G G G G G B G G G G G G G G\nG G G G G G G G G G G G G G G G G G G G G G G G G\nG G G G G G G G G G G G G G G G G G G G G G G G G\n\nPAIR 3\nINPUT GRID:\nO O O O O O O O O O O O O O O O O O O O O\nO O O O Y O O O O O O O O O O O O O O O O\nO O O O Y O O O O O O O O Y O O O O O O O\nO O O O Y O O O O O O O O Y O O O O O O O\nO O O O Y O O O O O O O O Y O O O O O O O\nO Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y O O O O\nO O O O Y O O O O O O O O Y O O O O O O O\nO O O O Y O O O O O O O O Y O O O O O O O\nO O O O Y O O O O Y Y Y Y Y Y Y Y Y O O O\nO O O O Y O O O O O O O O Y O O O O O O O\nO O O O Y O O O O O O O O Y O O O O O O O\nO O O O Y O O O O O O O O Y O O O O O O O\nO O O O Y O O O O O O O O Y O O O O O O O\nO O O O Y O O Y O O O O O Y O O O O Y O O\nO O O O Y O O Y O O O O O Y O O O O Y O O\nO O Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y O O\nO O O O Y O O Y O O O O O Y O O O O Y O O\nO O O O Y O O Y O O O O O Y O O O O Y O O\nO O O O Y O O Y O O O O Y Y Y Y Y Y Y Y Y\nO Y Y Y Y Y Y Y Y Y O O O Y O O O O Y O O\nO O O O Y O O Y O O O O O Y O O O O Y O O\nO O O O Y O O Y O O O O O Y O O O O Y O O\nO O O O Y O O Y O O O O O Y O O O O O O O\nO O O O O O O O O O O O O O O O O O O O O\nOUTPUT GRID:\nG G G G G G G G G G G G G G G G G G G G G\nG G G G Y G G G G G G G G G G G G G G G G\nG G G G Y G G G G G G G G Y G G G G G G G\nG G G G Y G G G G G G G G Y G G G G G G G\nG G G G Y G G G G G G G G Y G G G G G G G\nG Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y G G G G\nG G G G Y R R R R R R R R Y G G G G G G G\nG G G G Y R R R R R R R R Y G G G G G G G\nG G G G Y R R R R Y Y Y Y Y Y Y Y Y G G G\nG G G G Y R R R R R R R R Y G G G G G G G\nG G G G Y R R R R R R R R Y G G G G G G G\nG G G G Y R R R R R R R R Y G G G G G G G\nG G G G Y R R R R R R R R Y G G G G G G G\nG G G G Y R R Y R R R R R Y G G G G Y G G\nG G G G Y R R Y R R R R R Y G G G G Y G G\nG G Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y G G\nG G G G Y R R Y G G G G G Y R R R R Y G G\nG G G G Y R R Y G G G G G Y R R R R Y G G\nG G G G Y R R Y G G G G Y Y Y Y Y Y Y Y Y\nG Y Y Y Y Y Y Y Y Y G G G Y G G G G Y G G\nG G G G Y G G Y G G G G G Y G G G G Y G G\nG G G G Y G G Y G G G G G Y G G G G Y G G\nG G G G Y G G Y G G G G G Y G G G G G G G\nG G G G G G G G G G G G G G G G G G G G G\n"
        }
    ],
    "n_valid_json": 100,
    "n_can_parse": 61,
    "completions": [
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color different than C towards the baseline object of color C, recolor them to G first and recolor the baseline object to R next.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) C))\n                (neighbor_of this other)\n                (color_equals (color_of other) C)\n            )\n        )\n        (apply\n            (update_color G)\n            (move_node_max (direction_of other))\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) C)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 8 col 17\n\n                (color_equals (color_of other) C)\n                ^\nExpected one of: \n\t* RPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 5,
                "other": 4,
                "filter": 2,
                "and": 1,
                "not": 1,
                "color_equals": 3,
                "color_of": 3,
                "C": 3,
                "neighbor_of": 1,
                "apply": 2,
                "update_color": 2,
                "G": 1,
                "move_node_max": 1,
                "direction_of": 1,
                "R": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all neighbors of the largest objects toward them and recolor them to color R.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and \n                (neighbor_of this other)\n                (size_equals (size_of other) max)\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n            (update_color R)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "other": 4,
                "filter": 1,
                "and": 1,
                "neighbor_of": 1,
                "size_equals": 1,
                "size_of": 1,
                "max": 1,
                "apply": 1,
                "move_node_max": 1,
                "direction_of": 1,
                "update_color": 1,
                "R": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all objects in the grids to color G, then change the color of objects in the vertical center to R.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter (column_equals (column_of this) center))\n        (apply\n            (update_color R)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 3,
                "filter": 2,
                "apply": 2,
                "update_color": 2,
                "G": 1,
                "column_equals": 1,
                "column_of": 1,
                "center": 1,
                "R": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color different than C, to align with the row of maximum object of color C, and then recolor them to color G. Recolor all objects of color R of size 3 to color R.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) C))\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) C)\n                )\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (size_equals (size_of this) 3)\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 6,
                "other": 4,
                "filter": 2,
                "and": 3,
                "not": 1,
                "color_equals": 3,
                "color_of": 3,
                "C": 2,
                "neighbor_of": 1,
                "apply": 2,
                "move_node": 1,
                "direction_of": 1,
                "update_color": 2,
                "G": 1,
                "R": 2,
                "size_equals": 1,
                "size_of": 1,
                "3": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move objects of size 1 towards objects of color different from O, recolor moved objects to R, then recolor all objects to G",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (not (color_equals (color_of other) O))\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color G)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 8 col 17\n\n                (neighbor_of this other)\n                ^\nExpected one of: \n\t* RPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 4,
                "other": 4,
                "filter": 2,
                "and": 1,
                "size_equals": 1,
                "size_of": 1,
                "1": 1,
                "not": 1,
                "color_equals": 1,
                "color_of": 1,
                "O": 1,
                "neighbor_of": 1,
                "apply": 2,
                "move_node_max": 1,
                "direction_of": 1,
                "update_color": 2,
                "R": 1,
                "G": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Change colour of all objects to 'G'. For objects of size greater than 10, extend them upwards. All extended objects, change their colour to 'R'",
            "code": "(do\n  (rule\n    (vars (this))\n    (filter )\n    (apply\n      (update_color G)\n      ) \n    )\n  (rule\n    (vars (this))\n    (filter\n      (size_equals (size_of this) (max)) )\n    (apply\n      (extend_node up true) \n      (update_color R) ) \n    )\n  (rule\n    (vars (this))\n    (filter\n      (and \n            (size_equals (size_of this) (7)) \n            (color_equals (color_of this) G ) ) )   \n    (apply\n      (update_color R) )))",
            "can_parse": false,
            "parse_error_message": "No terminal matches 'm' in the current parser context, at line 12 col 36\n\n      (size_equals (size_of this) (max)) )\n                                   ^\nExpected one of: \n\t* SIZE_OF\n",
            "token_counts": {
                "do": 1,
                "rule": 3,
                "vars": 3,
                "this": 6,
                "filter": 3,
                "apply": 3,
                "update_color": 3,
                "G": 2,
                "size_equals": 2,
                "size_of": 2,
                "max": 1,
                "extend_node": 1,
                "up": 1,
                "true": 1,
                "R": 2,
                "and": 1,
                "7": 1,
                "color_equals": 1,
                "color_of": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor the background to G and change the color of some selected objects to R.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) O))\n        (apply (update_color G))\n    )\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) C))\n        (apply (update_color R))\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 4,
                "filter": 2,
                "color_equals": 2,
                "color_of": 2,
                "O": 1,
                "apply": 2,
                "update_color": 2,
                "G": 1,
                "C": 1,
                "R": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all objects to color G and extend objects of color B and R towards each other, without overlapping.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) B)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (extend_node (direction_of other) false)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 4,
                "filter": 2,
                "apply": 2,
                "update_color": 1,
                "G": 1,
                "other": 3,
                "and": 1,
                "color_equals": 1,
                "color_of": 1,
                "B": 1,
                "neighbor_of": 1,
                "extend_node": 1,
                "direction_of": 1,
                "false": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move objects of color different from 'C' towards objects of color 'C' and recolor all objects to 'G'. Also, recolor objects that were moved over other objects to 'R'.",
            "code": "(do\n  (rule\n    (vars (this other))\n    (filter\n      (and\n        (not (color_equals (color_of this) C))\n        (neighbor_of this other)\n        (color_equals (color_of other) C)\n      )\n    )\n    (apply\n      (move_node (direction_of other))\n    )\n  )\n  (rule\n    (vars (this))\n    (filter)\n    (apply\n      (update_color G)\n    )\n  )\n  (rule\n    (vars (this other))\n    (filter\n      (and\n        (not (color_equals (color_of this) C))\n        (color_equals (color_of other) C)\n      )\n    )\n    (apply\n      (update_color R)\n    )\n  )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 8 col 9\n\n        (color_equals (color_of other) C)\n        ^\nExpected one of: \n\t* RPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 3,
                "vars": 3,
                "this": 6,
                "other": 6,
                "filter": 3,
                "and": 2,
                "not": 2,
                "color_equals": 4,
                "color_of": 4,
                "C": 4,
                "neighbor_of": 1,
                "apply": 3,
                "move_node": 1,
                "direction_of": 1,
                "update_color": 2,
                "G": 1,
                "R": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects except color C towards the object of color C if they are neighbors and recolor them to color G, then update neighbors of color C to color R.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) C))\n                (neighbor_of this other)\n                (color_equals (color_of other) C)\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) C)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 8 col 17\n\n                (color_equals (color_of other) C)\n                ^\nExpected one of: \n\t* RPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 6,
                "other": 6,
                "filter": 2,
                "and": 2,
                "not": 1,
                "color_equals": 3,
                "color_of": 3,
                "C": 3,
                "neighbor_of": 2,
                "apply": 2,
                "move_node_max": 1,
                "direction_of": 1,
                "update_color": 2,
                "G": 1,
                "R": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all objects to color G and replace those that are neighbors of cyan color objects with the cyan color to red.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) C)\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 3,
                "filter": 2,
                "apply": 2,
                "update_color": 2,
                "G": 1,
                "other": 3,
                "and": 1,
                "neighbor_of": 1,
                "color_equals": 1,
                "color_of": 1,
                "C": 1,
                "R": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move red objects that are neighbors of a yellow object to cover the yellow object.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) Y)\n                )\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 3,
                "other": 4,
                "filter": 1,
                "and": 2,
                "color_equals": 2,
                "color_of": 2,
                "R": 1,
                "neighbor_of": 1,
                "Y": 1,
                "apply": 1,
                "move_node": 1,
                "direction_of": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color different than C, toward the object of color C, if they are neighbors of it. Then, recolor all objects of size 1 to color G and all objects of size greater than 1 to color R.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) C))\n                (neighbor_of this other)\n                (color_equals (color_of other) C)\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n    (rule\n        (vars (this))\n        (filter (size_equals (size_of this) 1))\n        (apply (update_color G))\n    )\n    (rule\n        (vars (this other))\n        (filter \n            (and \n                (not (size_equals (size_of this) 1)) \n                (not (color_equals (color_of this) C))\n            )\n        )\n        (apply (update_color R))\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 8 col 17\n\n                (color_equals (color_of other) C)\n                ^\nExpected one of: \n\t* RPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 3,
                "vars": 3,
                "this": 8,
                "other": 5,
                "filter": 3,
                "and": 2,
                "not": 3,
                "color_equals": 3,
                "color_of": 3,
                "C": 3,
                "neighbor_of": 1,
                "apply": 3,
                "move_node_max": 1,
                "direction_of": 1,
                "size_equals": 2,
                "size_of": 2,
                "1": 2,
                "update_color": 2,
                "G": 1,
                "R": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of size 1 toward the object of maximum size, then recolor them to color R and recolor all other objects to color G.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (and\n                    (neighbor_of this other)\n                    (size_equals (size_of other) max)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color G)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 4,
                "other": 4,
                "filter": 2,
                "and": 2,
                "size_equals": 2,
                "size_of": 2,
                "1": 1,
                "neighbor_of": 1,
                "max": 1,
                "apply": 2,
                "move_node_max": 1,
                "direction_of": 1,
                "update_color": 2,
                "R": 1,
                "G": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color different than C, towards the object of color C if they are neighbors, and recolor the moved objects to G and C objects to R.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) C))\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) C)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) C)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 5,
                "other": 4,
                "filter": 2,
                "and": 2,
                "not": 1,
                "color_equals": 3,
                "color_of": 3,
                "C": 3,
                "neighbor_of": 1,
                "apply": 2,
                "move_node_max": 1,
                "direction_of": 1,
                "update_color": 2,
                "G": 1,
                "R": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color different than C, toward the object of color C, if they are neighbors of it.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) C))\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) C)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 3,
                "other": 4,
                "filter": 1,
                "and": 2,
                "not": 1,
                "color_equals": 2,
                "color_of": 2,
                "C": 2,
                "neighbor_of": 1,
                "apply": 1,
                "move_node_max": 1,
                "direction_of": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all objects of color O to color G, and objects of color R to the color R.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) O)\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 4,
                "filter": 2,
                "color_equals": 2,
                "color_of": 2,
                "O": 1,
                "apply": 2,
                "update_color": 2,
                "G": 1,
                "R": 2
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Color all objects to G, and then fill all hollow rectangles with color R, without overlapping.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (shape_equals (shape_of this) enclosed)\n        )\n        (apply\n            (fill_rectangle R false)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 3,
                "filter": 2,
                "apply": 2,
                "update_color": 1,
                "G": 1,
                "shape_equals": 1,
                "shape_of": 1,
                "enclosed": 1,
                "fill_rectangle": 1,
                "R": 1,
                "false": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all non-yellow and non-blue objects to color G, then extend all yellow objects that are orthogonal neighbors of blue objects toward the blue objects without overlapping.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (or\n                (not (color_equals (color_of this) Y))\n                (not (color_equals (color_of this) B))\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) Y)\n                (neighbor_of this other)\n                (color_equals (color_of other) B)\n            )\n        )\n        (apply\n            (extend_node (direction_of other) false)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 20 col 17\n\n                (color_equals (color_of other) B)\n                ^\nExpected one of: \n\t* RPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 6,
                "filter": 2,
                "or": 1,
                "not": 2,
                "color_equals": 4,
                "color_of": 4,
                "Y": 2,
                "B": 2,
                "apply": 2,
                "update_color": 1,
                "G": 1,
                "other": 4,
                "and": 1,
                "neighbor_of": 1,
                "extend_node": 1,
                "direction_of": 1,
                "false": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all objects to color G and extend all the objects of size 3 toward the object of maximum size, without overlapping.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 3)\n                (and\n                    (neighbor_of this other)\n                    (size_equals (size_of other) max)\n                )\n            )\n        )\n        (apply\n            (extend_node (direction_of other) false)\n        )    \n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 4,
                "filter": 2,
                "apply": 2,
                "update_color": 1,
                "G": 1,
                "other": 4,
                "and": 2,
                "size_equals": 2,
                "size_of": 2,
                "3": 1,
                "neighbor_of": 1,
                "max": 1,
                "extend_node": 1,
                "direction_of": 1,
                "false": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects one step in the direction of column center and then recolor them to color G.",
            "code": "(do (rule (vars (this)) (filter) (apply (move_node center) (update_color G))))",
            "can_parse": false,
            "parse_error_message": "No terminal matches 'c' in the current parser context, at line 1 col 52\n\nvars (this)) (filter) (apply (move_node center) (update_color G))))\n                                        ^\nExpected one of: \n\t* LPAR\n\t* DIRECTION\n",
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 1,
                "filter": 1,
                "apply": 1,
                "move_node": 1,
                "center": 1,
                "update_color": 1,
                "G": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move objects of size 3 towards objects of size 22 if they are neighbors, then recolor all objects to G and color objects of size 3 to R.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 3)\n                (neighbor_of this other)\n                (size_equals (size_of other) 22)\n            )\n        )\n        (apply\n            (extend_node (direction_of other) false)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 3)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 8 col 17\n\n                (size_equals (size_of other) 22)\n                ^\nExpected one of: \n\t* RPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 3,
                "vars": 3,
                "this": 6,
                "other": 4,
                "filter": 3,
                "and": 1,
                "size_equals": 3,
                "size_of": 3,
                "3": 2,
                "neighbor_of": 1,
                "22": 1,
                "apply": 3,
                "extend_node": 1,
                "direction_of": 1,
                "false": 1,
                "update_color": 2,
                "G": 1,
                "R": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color O one step in the direction of their neighbor object of color different than O and then recolor them to color G and recolor the objects of color different than O to color R.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of this) O)\n        )\n        (apply\n            (move_node (direction_of other))\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (not (color_equals (color_of this) O))\n        )\n        (apply\n            (update_color R)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 4,
                "other": 2,
                "filter": 2,
                "color_equals": 2,
                "color_of": 2,
                "O": 2,
                "apply": 2,
                "move_node": 1,
                "direction_of": 1,
                "update_color": 2,
                "G": 1,
                "not": 1,
                "R": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor the whole grid to G, then recolor the objects of color C to R, and lastly move all objects of color R towards C without overlapping.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) C)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (neighbor_of this other)\n                (color_equals (color_of other) C)\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 24 col 17\n\n                (color_equals (color_of other) C)\n                ^\nExpected one of: \n\t* RPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 3,
                "vars": 3,
                "this": 6,
                "filter": 3,
                "apply": 3,
                "update_color": 2,
                "G": 1,
                "color_equals": 3,
                "color_of": 3,
                "C": 2,
                "R": 2,
                "other": 4,
                "and": 1,
                "neighbor_of": 1,
                "move_node_max": 1,
                "direction_of": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all objects to color G, and then extend all the objects of height 3 towards the closest non-existent object, if the object of height 1 is their neighbor, without overlapping.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (height_equals (height_of this) 3)\n                (and\n                    (neighbor_of this other)\n                    (height_equals (height_of other) 1)\n                )\n            )\n        )\n        (apply\n            (extend_node top false)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches 't' in the current parser context, at line 21 col 26\n\n            (extend_node top false)\n                         ^\nExpected one of: \n\t* LPAR\n\t* DIRECTION\n",
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 4,
                "filter": 2,
                "apply": 2,
                "update_color": 1,
                "G": 1,
                "other": 3,
                "and": 2,
                "height_equals": 2,
                "height_of": 2,
                "3": 1,
                "neighbor_of": 1,
                "1": 1,
                "extend_node": 1,
                "top": 1,
                "false": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all the objects to color G and move objects adjacent to C one step in the direction of C, changing their color to R after the move.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (neighbor_of this other)\n        )\n        (apply\n            (move_node (direction_of other))\n            (update_color R)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 3,
                "filter": 2,
                "apply": 2,
                "update_color": 2,
                "G": 1,
                "other": 3,
                "neighbor_of": 1,
                "move_node": 1,
                "direction_of": 1,
                "R": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all non-C and non-X objects towards C objects if they are neighbors of C, then recolor them to R. Finally, recolor all remaining objects to color G.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) C))\n                (not (color_equals (color_of this) X))\n                (neighbor_of this other)\n                (color_equals (color_of other) C)\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (not (color_equals (color_of this) C))\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color G)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 8 col 17\n\n                (neighbor_of this other)\n                ^\nExpected one of: \n\t* RPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 3,
                "vars": 3,
                "this": 7,
                "other": 4,
                "filter": 3,
                "and": 1,
                "not": 3,
                "color_equals": 4,
                "color_of": 4,
                "C": 3,
                "X": 1,
                "neighbor_of": 1,
                "apply": 3,
                "move_node_max": 1,
                "direction_of": 1,
                "update_color": 2,
                "R": 1,
                "G": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color different than C, toward the object of color C, if they are neighbors of it, and then recolor the objects to color G.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) C))\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) C)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n            (update_color G)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 3,
                "other": 4,
                "filter": 1,
                "and": 2,
                "not": 1,
                "color_equals": 2,
                "color_of": 2,
                "C": 2,
                "neighbor_of": 1,
                "apply": 1,
                "move_node_max": 1,
                "direction_of": 1,
                "update_color": 1,
                "G": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor non-C objects to G and extend them towards the nearest C object maintaining the original size of each C, followed by moving the non-C objects against Cs and recoloring them to R.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter (not (color_equals (color_of this) C)))\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter \n            (and \n                (not (color_equals (color_of this) C))\n                (neighbor_of this other)\n                (color_equals (color_of other) C)\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n            (update_color R)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 15 col 17\n\n                (color_equals (color_of other) C)\n                ^\nExpected one of: \n\t* RPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 5,
                "other": 5,
                "filter": 2,
                "not": 2,
                "color_equals": 3,
                "color_of": 3,
                "C": 3,
                "apply": 2,
                "update_color": 2,
                "G": 1,
                "and": 1,
                "neighbor_of": 1,
                "move_node_max": 1,
                "direction_of": 1,
                "R": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor objects and extend objects with color R towards the center with overlap.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (extend_node center true)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches 'c' in the current parser context, at line 15 col 26\n\n            (extend_node center true)\n                         ^\nExpected one of: \n\t* LPAR\n\t* DIRECTION\n",
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 3,
                "filter": 2,
                "apply": 2,
                "update_color": 1,
                "G": 1,
                "color_equals": 1,
                "color_of": 1,
                "R": 1,
                "extend_node": 1,
                "center": 1,
                "true": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all objects to color G, except objects of color different than G will be moved to their neighboring object of color G and recolored to color R.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) G))\n                (neighbor_of this other)\n                (color_equals (color_of other) G)\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n            (update_color R)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 15 col 17\n\n                (color_equals (color_of other) G)\n                ^\nExpected one of: \n\t* RPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 4,
                "filter": 2,
                "apply": 2,
                "update_color": 2,
                "G": 3,
                "other": 4,
                "and": 1,
                "not": 1,
                "color_equals": 2,
                "color_of": 2,
                "neighbor_of": 1,
                "move_node_max": 1,
                "direction_of": 1,
                "R": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all objects to color G, and then extend objects of size 1 to red without overlapping.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (extend_node (direction_of other) false)\n            (update_color R)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 4,
                "filter": 2,
                "apply": 2,
                "update_color": 2,
                "G": 1,
                "other": 3,
                "and": 1,
                "size_equals": 1,
                "size_of": 1,
                "1": 1,
                "neighbor_of": 1,
                "extend_node": 1,
                "direction_of": 1,
                "false": 1,
                "R": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color different than C, toward the object of color C, and recolor them according to their original colors: O to G, R to R, Y to R, and G to G.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) C))\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) O)\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) Y)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) G)\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 4,
                "vars": 4,
                "this": 9,
                "other": 3,
                "filter": 4,
                "and": 1,
                "not": 1,
                "color_equals": 4,
                "color_of": 4,
                "C": 1,
                "neighbor_of": 1,
                "apply": 4,
                "move_node_max": 1,
                "direction_of": 1,
                "update_color": 4,
                "R": 2,
                "O": 1,
                "G": 3,
                "Y": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all objects to color G, then extend the objects of color C towards their neighbor of size maximum to size 1 using color R.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) C)\n                (and\n                    (neighbor_of this other)\n                    (size_equals (size_of other) max)\n                )\n            )\n        )\n        (apply\n            (extend_node (direction_of other) false)\n            (update_color R)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 4,
                "filter": 2,
                "apply": 2,
                "update_color": 2,
                "G": 1,
                "other": 4,
                "and": 2,
                "color_equals": 1,
                "color_of": 1,
                "C": 1,
                "neighbor_of": 1,
                "size_equals": 1,
                "size_of": 1,
                "max": 1,
                "extend_node": 1,
                "direction_of": 1,
                "false": 1,
                "R": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color different than O to R if they are neighbors of it, then transform their color to G.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) O))\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) R)\n                )\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n            (update_color G)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 3,
                "other": 4,
                "filter": 1,
                "and": 2,
                "not": 1,
                "color_equals": 2,
                "color_of": 2,
                "O": 1,
                "neighbor_of": 1,
                "R": 1,
                "apply": 1,
                "move_node": 1,
                "direction_of": 1,
                "update_color": 1,
                "G": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move any objects of size greater than 10 that are neighbors of a 'C' object towards the 'C' object, and recolor all objects to color G.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (and\n                    (shape_equals (size_of this) (more 10))\n                    (color_equals (color_of other) C)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color G)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches 's' in the current parser context, at line 8 col 36\n\n                    (shape_equals (size_of this) (more 10))\n                                   ^\nExpected one of: \n\t* SHAPE_OF\n",
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 4,
                "other": 4,
                "filter": 2,
                "and": 2,
                "neighbor_of": 1,
                "shape_equals": 1,
                "size_of": 1,
                "more": 1,
                "10": 1,
                "color_equals": 1,
                "color_of": 1,
                "C": 1,
                "apply": 2,
                "move_node_max": 1,
                "direction_of": 1,
                "update_color": 1,
                "G": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all the cells to G, transform objects of color O that are neighbors of C and Y to R, and remove cells overlapping with C and Y.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (or\n                (neighbor_of this other)\n                (color_equals (color_of other) C)\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) O)\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 3,
                "vars": 3,
                "this": 5,
                "filter": 3,
                "apply": 3,
                "update_color": 2,
                "G": 2,
                "other": 4,
                "or": 1,
                "neighbor_of": 1,
                "color_equals": 2,
                "color_of": 2,
                "C": 1,
                "move_node_max": 1,
                "direction_of": 1,
                "O": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of size 2 toward the nearest object of size greater than 2 and recolor them to R, then recolor all objects to G.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 2)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color G)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 4,
                "other": 3,
                "filter": 2,
                "and": 1,
                "size_equals": 1,
                "size_of": 1,
                "2": 1,
                "neighbor_of": 1,
                "apply": 2,
                "move_node_max": 1,
                "direction_of": 1,
                "update_color": 2,
                "R": 1,
                "G": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all objects to color G, then identify the Cs in the grid, and if there is a neighbor of it with a different color, change the neighbor's color to R.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) C)\n                (not (color_equals (color_of other) C))\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 15 col 17\n\n                (neighbor_of this other)\n                ^\nExpected one of: \n\t* RPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 4,
                "filter": 2,
                "apply": 2,
                "update_color": 2,
                "G": 1,
                "other": 3,
                "and": 1,
                "color_equals": 2,
                "color_of": 2,
                "C": 2,
                "not": 1,
                "neighbor_of": 1,
                "R": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color different from the majority color to the neighbors of the majority color and recolor them to green. Then recolor all objects surrounding hollow red squares.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) C))\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) C)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (neighbor_of this other)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 5,
                "other": 6,
                "filter": 2,
                "and": 2,
                "not": 1,
                "color_equals": 2,
                "color_of": 2,
                "C": 2,
                "neighbor_of": 2,
                "apply": 2,
                "move_node_max": 1,
                "direction_of": 1,
                "update_color": 2,
                "G": 1,
                "R": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all objects to color G and all center objects of size 1 to R",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (column_equals (column_of this) center)\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 4,
                "filter": 2,
                "apply": 2,
                "update_color": 2,
                "G": 1,
                "and": 1,
                "size_equals": 1,
                "size_of": 1,
                "1": 1,
                "column_equals": 1,
                "column_of": 1,
                "center": 1,
                "R": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color different than C, toward the object of color C, if they are neighbors of it; then recolor them to color R. Finally, recolor objects of color O to G.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) C))\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) C)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) O)\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 5,
                "other": 4,
                "filter": 2,
                "and": 2,
                "not": 1,
                "color_equals": 3,
                "color_of": 3,
                "C": 2,
                "neighbor_of": 1,
                "apply": 2,
                "move_node_max": 1,
                "direction_of": 1,
                "update_color": 2,
                "R": 1,
                "O": 1,
                "G": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color different than C and with a size of 1 towards the object of the size max, and then recolor them to color R, without overlapping.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) C))\n                (and\n                    (size_equals (size_of this) 1)\n                    (neighbor_of this other)\n                )\n            )\n        )\n        (apply\n            (extend_node (direction_of other) false)\n            (update_color R)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 4,
                "other": 3,
                "filter": 1,
                "and": 2,
                "not": 1,
                "color_equals": 1,
                "color_of": 1,
                "C": 1,
                "size_equals": 1,
                "size_of": 1,
                "1": 1,
                "neighbor_of": 1,
                "apply": 1,
                "extend_node": 1,
                "direction_of": 1,
                "false": 1,
                "update_color": 1,
                "R": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all rows and columns containing the object C to color G, and extend all instances of object B toward C without overlapping.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (or\n                (column_equals (column_of this) (column_of other))\n                (row_equals (row_of this) (row_of other))\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) B)\n                (neighbor_of this other)\n                (color_equals (color_of other) C)\n            )\n        )\n        (apply\n            (extend_node (direction_of other) false)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches 'r' in the current parser context, at line 7 col 18\n\n                (row_equals (row_of this) (row_of other))\n                 ^\nExpected one of: \n\t* SHAPE_EQ\n\t* OP_NOT\n\t* OP_AND\n\t* WIDTH_EQ\n\t* DEGREE_EQ\n\t* SIZE_EQ\n\t* COLUMN_EQ\n\t* COLOR_EQ\n\t* NEIGHBOR_OF\n\t* HEIGHT_EQ\n\t* OP_OR\n",
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 6,
                "filter": 2,
                "or": 1,
                "column_equals": 1,
                "column_of": 2,
                "other": 6,
                "row_equals": 1,
                "row_of": 2,
                "apply": 2,
                "update_color": 1,
                "G": 1,
                "and": 1,
                "color_equals": 2,
                "color_of": 2,
                "B": 1,
                "neighbor_of": 1,
                "C": 1,
                "extend_node": 1,
                "direction_of": 1,
                "false": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of size 3 toward the largest object, without overlapping, and recolor all objects to G.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 3)\n                (and\n                    (neighbor_of this other)\n                    (size_equals (size_of other) max)\n                )\n            )\n        )\n        (apply\n            (extend_node (direction_of other) false)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color G)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 4,
                "other": 4,
                "filter": 2,
                "and": 2,
                "size_equals": 2,
                "size_of": 2,
                "3": 1,
                "neighbor_of": 1,
                "max": 1,
                "apply": 2,
                "extend_node": 1,
                "direction_of": 1,
                "false": 1,
                "update_color": 1,
                "G": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color O toward the nearest object of color C, and then recolor them to color G; also, recolor the objects in the path to color R.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) O)\n                (neighbor_of this other)\n                (color_equals (color_of other) C)\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of this) G)\n        )\n        (apply\n            (add_border R)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 8 col 17\n\n                (color_equals (color_of other) C)\n                ^\nExpected one of: \n\t* RPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 5,
                "other": 5,
                "filter": 2,
                "and": 1,
                "color_equals": 3,
                "color_of": 3,
                "O": 1,
                "neighbor_of": 1,
                "C": 1,
                "apply": 2,
                "move_node_max": 1,
                "direction_of": 1,
                "update_color": 1,
                "G": 2,
                "add_border": 1,
                "R": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of size 1 toward the object of maximum size, without overlapping and then change their color to G. Also color all remaining objects with R.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (neighbor_of this other)\n                (size_equals (size_of other) max)\n            )\n        )\n        (apply\n            (extend_node (direction_of other) false)\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color R)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 8 col 17\n\n                (size_equals (size_of other) max)\n                ^\nExpected one of: \n\t* RPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 4,
                "other": 4,
                "filter": 2,
                "and": 1,
                "size_equals": 2,
                "size_of": 2,
                "1": 1,
                "neighbor_of": 1,
                "max": 1,
                "apply": 2,
                "extend_node": 1,
                "direction_of": 1,
                "false": 1,
                "update_color": 2,
                "G": 1,
                "R": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move objects colored differently than C towards the objects colored C, if they are neighbors, and recolor them to R.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) C))\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) C)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n            (update_color R)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 3,
                "other": 4,
                "filter": 1,
                "and": 2,
                "not": 1,
                "color_equals": 2,
                "color_of": 2,
                "C": 2,
                "neighbor_of": 1,
                "apply": 1,
                "move_node_max": 1,
                "direction_of": 1,
                "update_color": 1,
                "R": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of size 1 next to the object of size max, then recolor them to R.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (and\n                    (neighbor_of this other)\n                    (size_equals (size_of other) max)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n            (update_color R)\n        )    \n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 3,
                "other": 4,
                "filter": 1,
                "and": 2,
                "size_equals": 2,
                "size_of": 2,
                "1": 1,
                "neighbor_of": 1,
                "max": 1,
                "apply": 1,
                "move_node_max": 1,
                "direction_of": 1,
                "update_color": 1,
                "R": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects neighboring C to direction of C, recolor all objects to color G, all neighbored objects with previous action to color R.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) C)\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of this) G)\n                (color_equals (color_of other) R)\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 27 col 17\n\n                (color_equals (color_of other) R)\n                ^\nExpected one of: \n\t* RPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 3,
                "vars": 3,
                "this": 6,
                "other": 7,
                "filter": 3,
                "and": 2,
                "neighbor_of": 2,
                "color_equals": 3,
                "color_of": 3,
                "C": 1,
                "apply": 3,
                "move_node": 1,
                "direction_of": 1,
                "update_color": 2,
                "G": 2,
                "R": 2
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all objects to color G, then recolor objects of size 27 to color R.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 27)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 3,
                "filter": 2,
                "apply": 2,
                "update_color": 2,
                "G": 1,
                "size_equals": 1,
                "size_of": 1,
                "27": 1,
                "R": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all objects to G and extend R objects toward the nearest same-sized object without overlapping.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (neighbor_of this other)\n                (size_equals (size_of this) (size_of other))\n            )\n        )\n        (apply\n            (extend_node (direction_of other) false)\n        )    \n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 15 col 17\n\n                (size_equals (size_of this) (size_of oth\n                ^\nExpected one of: \n\t* RPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 5,
                "filter": 2,
                "apply": 2,
                "update_color": 1,
                "G": 1,
                "other": 4,
                "and": 1,
                "color_equals": 1,
                "color_of": 1,
                "R": 1,
                "neighbor_of": 1,
                "size_equals": 1,
                "size_of": 2,
                "extend_node": 1,
                "direction_of": 1,
                "false": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all objects of any color except C to color G, then extend all objects of color R toward the object of color C, without overlapping.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (not (color_equals (color_of this) C))\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (neighbor_of this other)\n                (color_equals (color_of other) C)\n            )\n        )\n        (apply\n            (extend_node (direction_of other) false)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 17 col 17\n\n                (color_equals (color_of other) C)\n                ^\nExpected one of: \n\t* RPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 5,
                "filter": 2,
                "not": 1,
                "color_equals": 3,
                "color_of": 3,
                "C": 2,
                "apply": 2,
                "update_color": 1,
                "G": 1,
                "other": 4,
                "and": 1,
                "R": 1,
                "neighbor_of": 1,
                "extend_node": 1,
                "direction_of": 1,
                "false": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all objects to color G, and within those objects, recolor cells at the border of size 3x3 or larger to color R.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) min)\n        )\n        (apply\n            (add_border R)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 3,
                "filter": 2,
                "apply": 2,
                "update_color": 1,
                "G": 1,
                "size_equals": 1,
                "size_of": 1,
                "min": 1,
                "add_border": 1,
                "R": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all objects to color G and then extend all the objects of size greater than 10 towards their neighboring objects without overlapping.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 10)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (extend_node (direction_of this) false)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 5,
                "filter": 2,
                "apply": 2,
                "update_color": 1,
                "G": 1,
                "other": 2,
                "and": 1,
                "size_equals": 1,
                "size_of": 1,
                "10": 1,
                "neighbor_of": 1,
                "extend_node": 1,
                "direction_of": 1,
                "false": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all objects in the grid to color G and extend all objects of size 1 towards the object of size 5 with an Overlap.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (and\n                    (neighbor_of this other)\n                    (size_equals (size_of other) 5)\n                )\n            )\n        )\n        (apply\n            (extend_node (direction_of other) true)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 4,
                "filter": 2,
                "apply": 2,
                "update_color": 1,
                "G": 1,
                "other": 4,
                "and": 2,
                "size_equals": 2,
                "size_of": 2,
                "1": 1,
                "neighbor_of": 1,
                "5": 1,
                "extend_node": 1,
                "direction_of": 1,
                "true": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color different than C, towards the object of color C if they are neighbors of it. Change the color of other parts to G. Recolor moved objects to R.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter (and (not (color_equals (color_of this) C)) (neighbor_of this other) (color_equals (color_of other) C)))\n        (apply\n            (move_node_max (direction_of other))\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color G)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 4 col 86\n\nr_of this) C)) (neighbor_of this other) (color_equals (color_of other) C)))\n                                        ^\nExpected one of: \n\t* RPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 4,
                "other": 4,
                "filter": 2,
                "and": 1,
                "not": 1,
                "color_equals": 2,
                "color_of": 2,
                "C": 2,
                "neighbor_of": 1,
                "apply": 2,
                "move_node_max": 1,
                "direction_of": 1,
                "update_color": 2,
                "R": 1,
                "G": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color different than C, toward the object of color C, if they are neighbors of it.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) C))\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) C)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 3,
                "other": 4,
                "filter": 1,
                "and": 2,
                "not": 1,
                "color_equals": 2,
                "color_of": 2,
                "C": 2,
                "neighbor_of": 1,
                "apply": 1,
                "move_node_max": 1,
                "direction_of": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move objects of size greater than 1 towards the center while changing their color to G.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (not (size_equals (size_of this) 1))\n        )\n        (apply\n            (move_node_max right)\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of this) G)\n            )\n        )\n        (apply\n            (move_node_max left)\n            (update_color G)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 5,
                "filter": 2,
                "not": 1,
                "size_equals": 1,
                "size_of": 1,
                "1": 1,
                "apply": 2,
                "move_node_max": 2,
                "right": 1,
                "update_color": 2,
                "G": 3,
                "other": 2,
                "and": 1,
                "neighbor_of": 1,
                "color_equals": 1,
                "color_of": 1,
                "left": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color different than C, toward the object of color C, if they are neighbors of it, and recolor objects to color G after moving, and to color R if their size is 3.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) C))\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) C)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 3)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 5,
                "other": 4,
                "filter": 2,
                "and": 2,
                "not": 1,
                "color_equals": 2,
                "color_of": 2,
                "C": 2,
                "neighbor_of": 1,
                "apply": 2,
                "move_node_max": 1,
                "direction_of": 1,
                "update_color": 2,
                "G": 1,
                "size_equals": 1,
                "size_of": 1,
                "3": 1,
                "R": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all non-grey objects to color G and recolor all inner objects to color R.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (not (color_equals (color_of this) X))\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) G)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) G)\n                )\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 5,
                "filter": 2,
                "not": 1,
                "color_equals": 3,
                "color_of": 3,
                "X": 1,
                "apply": 2,
                "update_color": 2,
                "G": 3,
                "other": 3,
                "and": 2,
                "neighbor_of": 1,
                "R": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor different objects to G and their neighboring objects of same shape to R.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (shape_equals (shape_of this) (shape_of other))\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 4,
                "filter": 2,
                "apply": 2,
                "update_color": 2,
                "G": 1,
                "other": 3,
                "and": 1,
                "shape_equals": 1,
                "shape_of": 2,
                "neighbor_of": 1,
                "R": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move the objects of size 15 towards the neighboring object and recolor them as B. Recolor other objects to color G.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 15)\n                (neighbor_of this other)\n            )        )\n        (apply\n            (move_node_max (direction_of other))\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color G)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 4,
                "other": 3,
                "filter": 2,
                "and": 1,
                "size_equals": 1,
                "size_of": 1,
                "15": 1,
                "neighbor_of": 1,
                "apply": 2,
                "move_node_max": 1,
                "direction_of": 1,
                "update_color": 2,
                "B": 1,
                "G": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects taking up more than one cell that are neighbors to the border towards the border.",
            "code": "(do (rule (vars (this other)) (filter (and (not (size_equals (size_of this) 1)) (or (neighbor_of this other) (color_equals (color_of this) G)) (or (neighbor_of this other) (color_equals (color_of other) C)))) (apply (move_node_max (direction_of other)))) (rule (vars (this)) (filter) (apply (update_color G))))",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 1 col 144\n\nther) (color_equals (color_of this) G)) (or (neighbor_of this other) (color_equa\n                                        ^\nExpected one of: \n\t* RPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 6,
                "other": 5,
                "filter": 2,
                "and": 1,
                "not": 1,
                "size_equals": 1,
                "size_of": 1,
                "1": 1,
                "or": 2,
                "neighbor_of": 2,
                "color_equals": 2,
                "color_of": 2,
                "G": 2,
                "C": 1,
                "apply": 2,
                "move_node_max": 1,
                "direction_of": 1,
                "update_color": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all the objects of color R into the object of color G if they are neighbors, and recolor the entire grid to color G",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color G)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 4,
                "other": 3,
                "filter": 2,
                "and": 1,
                "color_equals": 1,
                "color_of": 1,
                "R": 1,
                "neighbor_of": 1,
                "apply": 2,
                "move_node_max": 1,
                "direction_of": 1,
                "update_color": 1,
                "G": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all non-black objects to color G and the objects to the immediate right to color R, if they exist.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (not (color_equals (color_of this) O))\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) O))\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) G)\n                )\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 5,
                "other": 4,
                "filter": 2,
                "not": 2,
                "color_equals": 3,
                "color_of": 3,
                "O": 2,
                "apply": 2,
                "update_color": 2,
                "G": 2,
                "and": 2,
                "neighbor_of": 1,
                "R": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all objects to color G, and if an object is a neighbor of another object with color different than its own, extend it in that direction and recolor to color R.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) (color_of other)))\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (extend_node (direction_of other) false)\n            (update_color R)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 4,
                "filter": 2,
                "apply": 2,
                "update_color": 2,
                "G": 1,
                "other": 4,
                "and": 1,
                "not": 1,
                "color_equals": 1,
                "color_of": 2,
                "neighbor_of": 1,
                "extend_node": 1,
                "direction_of": 1,
                "false": 1,
                "R": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of size 1 toward the object of maximum size, recolor them to color G, then extend them three cells in height.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter (size_equals (size_of this) 1))\n        (apply\n            (extend_node down false)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 5,
                "other": 3,
                "filter": 2,
                "and": 1,
                "size_equals": 2,
                "size_of": 2,
                "1": 2,
                "neighbor_of": 1,
                "apply": 2,
                "move_node": 1,
                "direction_of": 1,
                "update_color": 1,
                "G": 1,
                "extend_node": 1,
                "down": 1,
                "false": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color different than G, toward the object of color X, if they are neighbors of it, and then recolor them to color B.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) G))\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) X)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n            (update_color B)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 3,
                "other": 4,
                "filter": 1,
                "and": 2,
                "not": 1,
                "color_equals": 2,
                "color_of": 2,
                "G": 1,
                "neighbor_of": 1,
                "X": 1,
                "apply": 1,
                "move_node_max": 1,
                "direction_of": 1,
                "update_color": 1,
                "B": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color different than C, toward the object of color C, if they are neighbors of it and then recolor all the objects to R.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) C))\n                (neighbor_of this other)\n                (color_equals (color_of other) C)\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color R)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 8 col 17\n\n                (color_equals (color_of other) C)\n                ^\nExpected one of: \n\t* RPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 4,
                "other": 4,
                "filter": 2,
                "and": 1,
                "not": 1,
                "color_equals": 2,
                "color_of": 2,
                "C": 2,
                "neighbor_of": 1,
                "apply": 2,
                "move_node_max": 1,
                "direction_of": 1,
                "update_color": 1,
                "R": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color different than C, B, and Y toward the nearest C, B, and Y respectively, if they are neighbors, and then recolor them to R if their initial color is O.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) Y))\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) Y)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) B))\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) B)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) C))\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) C)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) O)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 4,
                "vars": 4,
                "this": 11,
                "other": 12,
                "filter": 4,
                "and": 6,
                "not": 3,
                "color_equals": 7,
                "color_of": 7,
                "Y": 2,
                "neighbor_of": 3,
                "apply": 4,
                "move_node_max": 3,
                "direction_of": 3,
                "B": 2,
                "C": 2,
                "O": 1,
                "update_color": 1,
                "R": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor the entire grid to G except objects of color C. Then, in objects of color C, replace borders and non-border cells with colors R and G respectively.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (not (color_equals (color_of this) C)))\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) C))\n        (apply\n            (update_color G)\n            (add_border R)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 4,
                "filter": 2,
                "not": 1,
                "color_equals": 2,
                "color_of": 2,
                "C": 2,
                "apply": 2,
                "update_color": 2,
                "G": 2,
                "add_border": 1,
                "R": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Extend all objects of size 3 toward the object with color 'C' without overlapping, then recolor the object with color 'G'.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 3)\n                (neighbor_of this other)\n                (color_equals (color_of other) C)\n            )\n        )\n        (apply\n            (extend_node (direction_of other) false)\n            (update_color G)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 8 col 17\n\n                (color_equals (color_of other) C)\n                ^\nExpected one of: \n\t* RPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 3,
                "other": 4,
                "filter": 1,
                "and": 1,
                "size_equals": 1,
                "size_of": 1,
                "3": 1,
                "neighbor_of": 1,
                "color_equals": 1,
                "color_of": 1,
                "C": 1,
                "apply": 1,
                "extend_node": 1,
                "direction_of": 1,
                "false": 1,
                "update_color": 1,
                "G": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "For objects of color different than C, move those that are neighbors to C, then recolor them to color G. Next, if an object's color is different than G or C and its size is maximum, move it towards neighbors of color C and recolor it to R.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) C))\n                (neighbor_of this other)\n                (color_equals (color_of other) C)\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) G))\n                (not (color_equals (color_of this) C))\n                (size_equals (size_of this) max)\n                (neighbor_of this other)\n                (color_equals (color_of other) C)\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n            (update_color R)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 8 col 17\n\n                (color_equals (color_of other) C)\n                ^\nExpected one of: \n\t* RPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 8,
                "other": 8,
                "filter": 2,
                "and": 2,
                "not": 3,
                "color_equals": 5,
                "color_of": 5,
                "C": 4,
                "neighbor_of": 2,
                "apply": 2,
                "move_node": 2,
                "direction_of": 2,
                "update_color": 2,
                "G": 2,
                "size_equals": 1,
                "size_of": 1,
                "max": 1,
                "R": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor the objects colored 'O' to 'G' and objects colored 'O' adjacent to the object colored 'C' to 'R'.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) O)\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) O)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) C)\n                )\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 5,
                "filter": 2,
                "color_equals": 3,
                "color_of": 3,
                "O": 2,
                "apply": 2,
                "update_color": 2,
                "G": 1,
                "other": 3,
                "and": 2,
                "neighbor_of": 1,
                "C": 1,
                "R": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all objects to color G, then extend all objects of color Y, towards the object of color C, without overlapping, then recolor all extended objects to color R.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) Y)\n                (neighbor_of this other)\n                (color_equals (color_of other) C)\n            )\n        )\n        (apply\n            (extend_node (direction_of other) false)\n            (update_color R)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 15 col 17\n\n                (color_equals (color_of other) C)\n                ^\nExpected one of: \n\t* RPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 4,
                "filter": 2,
                "apply": 2,
                "update_color": 2,
                "G": 1,
                "other": 4,
                "and": 1,
                "color_equals": 2,
                "color_of": 2,
                "Y": 1,
                "neighbor_of": 1,
                "C": 1,
                "extend_node": 1,
                "direction_of": 1,
                "false": 1,
                "R": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Extend all objects of color B or R to the right, toward the edge of the grid, with overlap, and recolor all other objects to color G.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (or\n                (color_equals (color_of this) B)\n                (color_equals (color_of this) R)\n            )\n        )\n        (apply\n            (extend_node right true)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (not (color_equals (color_of this) B))\n                (not (color_equals (color_of this) R))\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 6,
                "filter": 2,
                "or": 1,
                "color_equals": 4,
                "color_of": 4,
                "B": 2,
                "R": 2,
                "apply": 2,
                "extend_node": 1,
                "right": 1,
                "true": 1,
                "and": 1,
                "not": 2,
                "update_color": 1,
                "G": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all objects to color G and then recolor all objects of size 11 to color R.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 11)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 3,
                "filter": 2,
                "apply": 2,
                "update_color": 2,
                "G": 1,
                "size_equals": 1,
                "size_of": 1,
                "11": 1,
                "R": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Change the color of all objects to G, and for objects of size 16 or 24, mark certain interior cells with color R.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (or\n                (size_equals (size_of this) 16)\n                (size_equals (size_of this) 24)\n            )\n        )\n        (apply\n            (fill_rectangle R false)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 4,
                "filter": 2,
                "apply": 2,
                "update_color": 1,
                "G": 1,
                "or": 1,
                "size_equals": 2,
                "size_of": 2,
                "16": 1,
                "24": 1,
                "fill_rectangle": 1,
                "R": 1,
                "false": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects towards the center object with color C if they are neighbors, then color them either R or G based on their initial position.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) C)\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (neighbor_of this this)\n                (size_equals (size_of this) 1)\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 3,
                "vars": 3,
                "this": 7,
                "other": 4,
                "filter": 3,
                "and": 2,
                "neighbor_of": 2,
                "color_equals": 1,
                "color_of": 1,
                "C": 1,
                "apply": 3,
                "move_node_max": 1,
                "direction_of": 1,
                "update_color": 2,
                "G": 1,
                "size_equals": 1,
                "size_of": 1,
                "1": 1,
                "R": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects in the grid towards the nearest object different in color, update their color to R, and then recolor the remaining cells to G",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (not (color_equals (color_of this) (color_of other)))\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n            (update_color R)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 4,
                "filter": 2,
                "apply": 2,
                "update_color": 2,
                "G": 1,
                "other": 4,
                "and": 1,
                "neighbor_of": 1,
                "not": 1,
                "color_equals": 1,
                "color_of": 2,
                "move_node_max": 1,
                "direction_of": 1,
                "R": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor the object of color C to color G and extend all the objects of size 1 toward the objects of size 15, without overlapping.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) C)\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (and\n                    (neighbor_of this other)\n                    (size_equals (size_of other) 15)\n                )\n            )\n        )\n        (apply\n            (extend_node (direction_of other) false)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 5,
                "filter": 2,
                "color_equals": 1,
                "color_of": 1,
                "C": 1,
                "apply": 2,
                "update_color": 1,
                "G": 1,
                "other": 4,
                "and": 2,
                "size_equals": 2,
                "size_of": 2,
                "1": 1,
                "neighbor_of": 1,
                "15": 1,
                "extend_node": 1,
                "direction_of": 1,
                "false": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all objects surrounded by other objects to color R and recolor all other objects to color G.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (neighbor_of this other)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color G)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 3,
                "other": 2,
                "filter": 2,
                "neighbor_of": 1,
                "apply": 2,
                "update_color": 2,
                "R": 1,
                "G": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color R towards their adjacent object of color other than R, without overlapping.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (and\n                    (neighbor_of this other)\n                    (not (color_equals (color_of other) R))\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color G)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 4,
                "other": 4,
                "filter": 2,
                "and": 2,
                "color_equals": 2,
                "color_of": 2,
                "R": 2,
                "neighbor_of": 1,
                "not": 1,
                "apply": 2,
                "move_node_max": 1,
                "direction_of": 1,
                "update_color": 1,
                "G": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color different than C, towards the objects of color C, if they are neighbors of it, then recolor them to color R, and recolor all objects to color G.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) C))\n                (neighbor_of this other)\n                (color_equals (color_of other) C)\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color G)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 8 col 17\n\n                (color_equals (color_of other) C)\n                ^\nExpected one of: \n\t* RPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 4,
                "other": 4,
                "filter": 2,
                "and": 1,
                "not": 1,
                "color_equals": 2,
                "color_of": 2,
                "C": 2,
                "neighbor_of": 1,
                "apply": 2,
                "move_node": 1,
                "direction_of": 1,
                "update_color": 2,
                "R": 1,
                "G": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of colors other than C one step closer to the border of the object of color C, if they are neighbors, and then recolor them to color G.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) C))\n                (neighbor_of this other)\n                (color_equals (color_of other) C)\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n            (update_color G)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 8 col 17\n\n                (color_equals (color_of other) C)\n                ^\nExpected one of: \n\t* RPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 3,
                "other": 4,
                "filter": 1,
                "and": 1,
                "not": 1,
                "color_equals": 2,
                "color_of": 2,
                "C": 2,
                "neighbor_of": 1,
                "apply": 1,
                "move_node_max": 1,
                "direction_of": 1,
                "update_color": 1,
                "G": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all objects except the one of color C to color G and all objects with a neighbor of color C to color R.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (not (color_equals (color_of this) C))\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of other) C)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 4,
                "filter": 2,
                "not": 1,
                "color_equals": 2,
                "color_of": 2,
                "C": 2,
                "apply": 2,
                "update_color": 2,
                "G": 1,
                "other": 3,
                "and": 1,
                "neighbor_of": 1,
                "R": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects to color G, except objects of color C. Then change the color to R of the interior objects",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (not (color_equals (color_of this) C)))\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (add_border R)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 3,
                "filter": 2,
                "not": 1,
                "color_equals": 1,
                "color_of": 1,
                "C": 1,
                "apply": 2,
                "update_color": 1,
                "G": 1,
                "add_border": 1,
                "R": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color different than C, toward C, if they are neighbors of C. Then, recolor all objects to color G, except objects of color C, which need to be recolored to color R.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) C))\n                (neighbor_of this other)\n                (color_equals (color_of other) C)\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) C)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 8 col 17\n\n                (color_equals (color_of other) C)\n                ^\nExpected one of: \n\t* RPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 3,
                "vars": 3,
                "this": 6,
                "other": 4,
                "filter": 3,
                "and": 1,
                "not": 1,
                "color_equals": 3,
                "color_of": 3,
                "C": 3,
                "neighbor_of": 1,
                "apply": 3,
                "move_node_max": 1,
                "direction_of": 1,
                "update_color": 2,
                "G": 1,
                "R": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of size 1 toward the object of maximum size, without overlapping, and change the colors of the objects to color G. Then, move the objects of size 3 one step right and recolor them to color R.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n            (update_color G)\n        )    \n    )\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 3)\n        )\n        (apply\n            (move_node right)\n            (update_color R)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 5,
                "other": 3,
                "filter": 2,
                "and": 1,
                "size_equals": 2,
                "size_of": 2,
                "1": 1,
                "neighbor_of": 1,
                "apply": 2,
                "move_node_max": 1,
                "direction_of": 1,
                "update_color": 2,
                "G": 1,
                "3": 1,
                "move_node": 1,
                "right": 1,
                "R": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all objects to color G, and then extend objects next to other objects of size 'max' towards those objects, without overlapping.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (size_equals (size_of other) max)\n            )\n        )\n        (apply\n            (extend_node (direction_of other) false)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 3,
                "filter": 2,
                "apply": 2,
                "update_color": 1,
                "G": 1,
                "other": 4,
                "and": 1,
                "neighbor_of": 1,
                "size_equals": 1,
                "size_of": 1,
                "max": 1,
                "extend_node": 1,
                "direction_of": 1,
                "false": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all objects to color G, and extend objects of color R to the neighboring objects of color G without overlapping.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (neighbor_of this other)\n                (color_equals (color_of other) G)\n            )\n        )\n        (apply\n            (extend_node (direction_of other) false)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 15 col 17\n\n                (color_equals (color_of other) G)\n                ^\nExpected one of: \n\t* RPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 4,
                "filter": 2,
                "apply": 2,
                "update_color": 1,
                "G": 2,
                "other": 4,
                "and": 1,
                "color_equals": 2,
                "color_of": 2,
                "R": 1,
                "neighbor_of": 1,
                "extend_node": 1,
                "direction_of": 1,
                "false": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Convert the border of the grid to color G. Then, recolor the objects adjacent to the border to color R.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (add_border G)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (border_color_equals (color_of other) G)\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches 'b' in the current parser context, at line 14 col 18\n\n                (border_color_equals (color_of other) G)\n                 ^\nExpected one of: \n\t* SHAPE_EQ\n\t* OP_NOT\n\t* OP_AND\n\t* WIDTH_EQ\n\t* DEGREE_EQ\n\t* SIZE_EQ\n\t* COLUMN_EQ\n\t* COLOR_EQ\n\t* NEIGHBOR_OF\n\t* HEIGHT_EQ\n\t* OP_OR\n",
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 3,
                "filter": 2,
                "apply": 2,
                "add_border": 1,
                "G": 2,
                "other": 3,
                "and": 1,
                "neighbor_of": 1,
                "border_color_equals": 1,
                "color_of": 1,
                "update_color": 1,
                "R": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects with even size one step left and recolor them to color R, then recolor all objects to color G.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (size_equals (size_of this) even)\n            )\n        )\n        (apply\n            (move_node left)\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color G)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches ')' in the current parser context, at line 7 col 13\n\n            )\n            ^\nExpected one of: \n\t* LPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 3,
                "filter": 2,
                "and": 1,
                "size_equals": 1,
                "size_of": 1,
                "even": 1,
                "apply": 2,
                "move_node": 1,
                "left": 1,
                "update_color": 2,
                "R": 1,
                "G": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects except 'C' towards 'C' when they are neighbors and then recolor them to 'G'.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) C))\n                (neighbor_of this other)\n                (color_equals (color_of other) C)\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n            (update_color G)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 8 col 17\n\n                (color_equals (color_of other) C)\n                ^\nExpected one of: \n\t* RPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 3,
                "other": 4,
                "filter": 1,
                "and": 1,
                "not": 1,
                "color_equals": 2,
                "color_of": 2,
                "C": 2,
                "neighbor_of": 1,
                "apply": 1,
                "move_node_max": 1,
                "direction_of": 1,
                "update_color": 1,
                "G": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all objects to color G and objects of size greater than 1 to color R if they are vertically lined up, i.e., in rows.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (size_equals (size_of this) (succ (size_of other)))\n                (column_equals (column_of this) (column_of other))\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches 's' in the current parser context, at line 13 col 46\n\n           (size_equals (size_of this) (succ (size_of other)))\n                                        ^\nExpected one of: \n\t* SIZE_OF\n",
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 4,
                "filter": 2,
                "apply": 2,
                "update_color": 2,
                "G": 1,
                "and": 1,
                "size_equals": 1,
                "size_of": 2,
                "succ": 1,
                "other": 2,
                "column_equals": 1,
                "column_of": 2,
                "R": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all objects that are not rectangles to color G and the rectangular objects to color R.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (not (shape_equals (shape_of this) enclosed)))\n        (apply (update_color G))\n    )\n    (rule\n        (vars (this))\n        (filter (shape_equals (shape_of this) enclosed))\n        (apply (update_color R))\n    ) \n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 4,
                "filter": 2,
                "not": 1,
                "shape_equals": 2,
                "shape_of": 2,
                "enclosed": 2,
                "apply": 2,
                "update_color": 2,
                "G": 1,
                "R": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all objects to color G and extend nodes of color B and R towards left and right respectively, replacing empty spaces until no space is left",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (extend_node left false)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (extend_node right false)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 3,
                "vars": 3,
                "this": 5,
                "filter": 3,
                "apply": 3,
                "update_color": 1,
                "G": 1,
                "color_equals": 2,
                "color_of": 2,
                "B": 1,
                "extend_node": 2,
                "left": 1,
                "false": 2,
                "R": 1,
                "right": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all objects to color G and convert the objects at the intersections of colored lines into R.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) G)\n                (color_equals (color_of other) G)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 15 col 17\n\n                (neighbor_of this other)\n                ^\nExpected one of: \n\t* RPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 4,
                "filter": 2,
                "apply": 2,
                "update_color": 2,
                "G": 3,
                "other": 3,
                "and": 1,
                "color_equals": 2,
                "color_of": 2,
                "neighbor_of": 1,
                "R": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move the objects of size 1 adjacent to other objects, towards the adjacent objects if not bordering the edge of the grid. Then change color of all objects to color G. If the moved objects were adjacent to objects of color O, change them to color R, otherwise change them to color G.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (not (column_equals (column_of this) 1))\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) G)\n                (color_equals (color_of other) O)\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 8 col 17\n\n                (neighbor_of this other)\n                ^\nExpected one of: \n\t* RPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 3,
                "vars": 3,
                "this": 7,
                "other": 5,
                "filter": 3,
                "and": 2,
                "size_equals": 1,
                "size_of": 1,
                "1": 2,
                "not": 1,
                "column_equals": 1,
                "column_of": 1,
                "neighbor_of": 1,
                "apply": 3,
                "move_node": 1,
                "direction_of": 1,
                "update_color": 2,
                "G": 2,
                "color_equals": 2,
                "color_of": 2,
                "O": 1,
                "R": 1
            }
        }
    ],
    "task_id": "7b6016b9"
}