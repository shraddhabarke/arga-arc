{
    "model": "gpt-4o-2024-05-13",
    "usage": {
        "completion_tokens": 29373,
        "prompt_tokens": 5774,
        "total_tokens": 35147,
        "prompt_tokens_details": {
            "cached_tokens": 0
        },
        "completion_tokens_details": {
            "reasoning_tokens": 0
        }
    },
    "request_time": 22.934645891189575,
    "n_requested": 100,
    "prompt_messages": [
        {
            "role": "system",
            "content": "You are an assistant chatbot with human-like perception, reasoning and learning capabilities.\nYou can solve tasks concisely, efficiently, and moreover, correctly.\nLet's engage in perception- and logic-based tasks.\nYou only output source code.\nNo explanations or any other text.\nOnly code."
        },
        {
            "role": "user",
            "content": "You are an efficient assistant for logical reasoning and code generation.\nYou will help me solve a visual perception and reasoning task.\nI will first provide you with the definition of a Domain Specific Language you will use for writing a solution for the task.\nI will then present you with the description of the task that you will be tested in.\nYou will then respond the queries I make regarding the solution of the task.\n\n\nThis is the definition of the DSL you will use to solve the task.\nIt is given as a context-free grammar in the EBNF format used by the Lark parser generator, with some informative comments about the semantics.\nYou will return a string that is parseable by the `program` non-terminal of the grammar.\n\n```\nlibrary: \"(\" program* \")\"\n\n// Rules are executed one after another, in the order they appear.\n// There could be no rules, in which case the program does nothing.\nprogram: \"(\" \"do\" rule* \")\"\n\n// First, it declares the variables that will be used in the filter and transform expressions.\n// Second, it defines a filter expression that an object must satisfy in order to be transformed.\n// Then, it defines a list of transforms that will be applied objects that satisfy the filter expression.\nrule: \"(\" \"rule\" decl filter xform_list \")\"\n\n// The `vars` declaration specifies the names of the variables that will be used in the filter and transform expressions.\n// The `this` variable is always declared, and it refers to the object that is being transformed.\n// There could also be an additional optional variable `other` that refers to another object in the grid,\n// which is not being transformed, but is used in the filter expression.\ndecl: \"(\" \"vars\" \"(\" VAR_THIS VAR_OTHER? \")\" \")\"\n\n// A filter is a predicate over the objects in the grid.\n// If no filter is given, then all the objects are selected.\nfilter: \"(\" \"filter\" filter_expr? \")\"\n\n// It can be a primitive filter operation, or a boolean expression using the `and`, `or`, and `not` connectives.\n// IMPORTANT: The `and` and `or` connectives are strictly binary, so to take the conjunction or disjunction \n// of more than two expressions, the binary connectives must be nested.\n// AGAIN, the `and` and `or` connectives are not variadic, so the following is not allowed:\n// (and true true false)\n// Instead, the following must be used:\n// (and true (and true false))\n// The `not` connective is unary as expected.\n// The objects that are transformed are the ones that satisfy the filter expression.\nfilter_expr: filter_prim\n           | \"(\" OP_AND filter_expr filter_expr \")\"   \n           | \"(\" OP_OR filter_expr filter_expr \")\"\n           | \"(\" OP_NOT filter_expr \")\"\n\nfilter_prim: \"(\" COLOR_EQ fcolor_expr fcolor_expr \")\"           \n           | \"(\" SIZE_EQ size_expr size_expr \")\"                \n           | \"(\" HEIGHT_EQ height_expr height_expr \")\"          \n           | \"(\" WIDTH_EQ width_expr width_expr \")\"             \n           | \"(\" DEGREE_EQ degree_expr degree_expr \")\"          \n           | \"(\" SHAPE_EQ shape_expr shape_expr \")\"             \n           | \"(\" COLUMN_EQ column_expr column_expr \")\"         \n           | \"(\" NEIGHBOR_OF VAR VAR \")\"      // true if the two objects are neighbors\n\n\n// Transforms are applied one after another, in the order they appear.\nxform_list: \"(\" \"apply\" xform+ \")\"\n\n// A single transform is applied to all the objects that are bound to the `this` variable. \n// The transform is applied to each such object independently and simultaneously.\nxform:     \"(\" TR_UPDATE_COLOR color_expr \")\"                          // change this object color to the given color \n         | \"(\" TR_MOVE_NODE direction_expr \")\"                         // move this object in the given direction\n         | \"(\" TR_EXTEND_NODE direction_expr OVERLAP \")\"               // extend (move while leaving a trail) this object in the given direction\n                                                                  // if overlap is false, then the object is extended until it hits another object,\n                                                                  // otherwise it is extended until the edge of the grid.\n         | \"(\" TR_MOVE_NODE_MAX direction_expr \")\"                     // move this object until it hits another object, in the given direction\n         | \"(\" TR_ROTATE_NODE ROT_ANGLE \")\"                       // rotate this object by the given angle\n         | \"(\" TR_ADD_BORDER color_expr \")\"                            // color this exterior pixels of the object with the given color\n         | \"(\" TR_FILL_RECTANGLE color_expr OVERLAP \")\"                // color this interior of a hollow rectangle with the given color\n         | \"(\" TR_HOLLOW_RECTANGLE color_expr \")\"                      // color this interior of a solid rectangle with the given color\n         | \"(\" TR_MIRROR mirror_expr \")\"\n         | \"(\" TR_FLIP SYMMETRY_AXIS \")\"                          // flip this object with respect to the given axis\n         | \"(\" TR_INSERT OBJECT_ID img_pts_expr RELATIVE_POSITION \")\" // insert a copy of this object at the position of the given object\n         | \"(\" TR_NOOP \")\"                                        // do nothing\n\nfcolor_expr: FCOLOR\n           | \"(\" COLOR_OF VAR \")\"\n\ncolor_expr: COLOR\n          | \"(\" COLOR_OF VAR \")\"\n\nsize_expr: SIZE\n         | \"(\" SIZE_OF VAR \")\"\n\nheight_expr: HEIGHT\n           | \"(\" HEIGHT_OF VAR \")\"\n\nwidth_expr: WIDTH\n          | \"(\" WIDTH_OF VAR \")\"\n\ndegree_expr: DEGREE\n           | \"(\" DEGREE_OF VAR \")\" \n\nshape_expr: SHAPE\n          | \"(\" SHAPE_OF VAR \")\"\n\ncolumn_expr: COLUMN\n           | \"(\" COLUMN_OF VAR \")\"\n\ndirection_expr: DIRECTION\n              | \"(\" DIRECTION_OF VAR \")\"\n\nimg_pts_expr: IMAGE_POINTS\n            | \"(\" IMAGE_POINTS_OF VAR \")\"\n\nmirror_expr: \"(\" MIRROR_AXIS_OF VAR \")\"\n\nOBJECT_ID: /[0-9]+/\nFCOLOR: \"O\" // black\n      | \"B\" // blue\n      | \"R\" // red\n      | \"G\" // green\n      | \"Y\" // yellow\n      | \"X\" // grey\n      | \"F\" // fuchsia\n      | \"A\" // orange\n      | \"C\" // cyan  \n      | \"W\" // brown\n\nSIZE: \"min\" | \"max\" | \"even\" | \"odd\" | /[0-9]+/  // size of objects\nDEGREE: \"min\" | \"max\" | \"even\" | \"odd\" | /[0-9]+/  // degree of objects\nHEIGHT: \"min\" | \"max\" | \"even\" | \"odd\" | /[0-9]+/  // height of objects\nWIDTH: \"min\" | \"max\" | \"even\" | \"odd\" | /[0-9]+/  // width of objects\nCOLUMN: \"center\" | \"even\" | \"odd\" | /[0-9]+/  // column of objects\nSHAPE: \"square\" | \"enclosed\"  // shape of objects\n\nDIRECTION: \"up\"\n         | \"down\"\n         | \"left\"\n         | \"right\"\n         | \"up_left\"\n         | \"up_right\"\n         | \"down_left\"\n         | \"down_right\"\n\nSYMMETRY_AXIS: \"vertical\" | \"horizontal\" | \"diagonal_left\" | \"diagonal_right\"\n\n// The angle of clockwise rotation, in degrees.\nROT_ANGLE: \"0\" \n         | \"90\" \n         | \"180\" \n         | \"270\"\n\nCOLOR: \"O\" // black\n      | \"B\" // blue\n      | \"R\" // red\n      | \"G\" // green\n      | \"Y\" // yellow\n      | \"X\" // grey\n      | \"F\" // fuchsia\n      | \"A\" // orange\n      | \"C\" // cyan  \n      | \"W\" // brown\n\nOVERLAP: BOOL\n\nBOOL: \"true\" | \"false\"\n\nIMAGE_POINTS: \"top\" | \"bottom\" | \"left\" | \"right\" | \"top_left\" | \"top_right\" | \"bottom_left\" | \"bottom_right\" \n\nRELATIVE_POSITION: \"source\"\n                 | \"target\"\n                 | \"middle\"\n\nVAR: VAR_THIS | VAR_OTHER\nVAR_THIS: \"this\"\nVAR_OTHER: \"other\"\n\nOP_AND: \"and\"\nOP_OR: \"or\"\nOP_NOT: \"not\"\n\nCOLOR_OF: \"color_of\"\nSIZE_OF: \"size_of\"\nHEIGHT_OF: \"height_of\"\nWIDTH_OF: \"width_of\"\nDEGREE_OF: \"degree_of\"\nSHAPE_OF: \"shape_of\"\nCOLUMN_OF: \"column_of\"\nDIRECTION_OF: \"direction_of\"\nIMAGE_POINTS_OF: \"img_pts_of\"\nMIRROR_AXIS_OF: \"mirror_axis_of\"\n\nCOLOR_EQ: \"color_equals\"\nSIZE_EQ: \"size_equals\"\nDEGREE_EQ: \"degree_equals\"\nHEIGHT_EQ: \"height_equals\"\nWIDTH_EQ: \"width_equals\"\nSHAPE_EQ: \"shape_equals\"\nCOLUMN_EQ: \"column_equals\"\nNEIGHBOR_OF: \"neighbor_of\"\n\nTR_UPDATE_COLOR: \"update_color\"\nTR_MOVE_NODE: \"move_node\"\nTR_EXTEND_NODE: \"extend_node\"\nTR_MOVE_NODE_MAX: \"move_node_max\"\nTR_ROTATE_NODE: \"rotate_node\"\nTR_ADD_BORDER: \"add_border\"\nTR_FILL_RECTANGLE: \"fill_rectangle\"\nTR_HOLLOW_RECTANGLE: \"hollow_rectangle\"\nTR_MIRROR: \"mirror\"\nTR_FLIP: \"flip\"\nTR_INSERT: \"insert\"\nTR_NOOP: \"noop\"\n\nCOMMENT: /\\s*/ \";;\" /[^\\n]/*\n\n%import common.WS\n%import common.LCASE_LETTER\n%import common.INT\n%ignore WS\n%ignore COMMENT\n```\n\n\nNow we continue with the visual perception and reasoning task.\nThe input for the task is a small number of pairs of grids of characters.\nThe value of each of the cells of the grids are the colors defined in the DSL, so we can think of grids as images.\nEach pair of images correspond to an input-output example for an unknown program P.\nFor each pair, the program P is evaluated on the image grid and operates on the objects that appear in it.\nThe output of the program is then the output image.\nThe objects in the images are easy and natural to identify for humans, so there is no need to define them explicitly.\nHowever you are able to abstract them correctly, and the DSL is interpreted with the same correct abstraction.\n\n\nNow I will show you some demonstration tasks along with the output you would be expected to produce for each of them.\n\n## DEMONSTRATION TASK 1\n\n### INPUT\nPAIR 1\nINPUT GRID:\nO O O O O O O O\nO O O O O R O O\nO R O O O R O R\nO R R O O R O O\nO O O O O O O O\nO R R O O O O O\nO R R O R R O O\nO O O O O O O O\nOUTPUT GRID:\nO O O O O O O O\nO O O O O Y O O\nO Y O O O Y O Y\nO Y Y O O Y O O\nO O O O O O O O\nO Y Y O O O O O\nO Y Y O Y Y O O\nO O O O O O O O\n\nPAIR 2\nINPUT GRID:\nO O O O O O O O O O\nO O O O R O O O O O\nO G O O R O O W O O\nO O G O O O W W O O\nO O G O O O O O O O\nO O O O X O O O O O\nO O O O O O F F F O\nO B O O O O O O O O\nO B B B B O O C C O\nO O O O O O O C O O\nOUTPUT GRID:\nO O O O O O O O O O\nO O O O Y O O O O O\nO Y O O Y O O Y O O\nO O Y O O O Y Y O O\nO O Y O O O O O O O\nO O O O Y O O O O O\nO O O O O O Y Y Y O\nO Y O O O O O O O O\nO Y Y Y Y O O Y Y O\nO O O O O O O Y O O\n\n### EXPECTED OUTPUT\n{\n    \"nl_description\": \"Recolor all objects to color Y\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color Y)\\n        )\\n    )\\n)\"\n}\n\n\n## DEMONSTRATION TASK 2\n\n### INPUT\nPAIR 1\nINPUT GRID:\nO O O O O O O O\nO F F O O O R O\nO F F O O O O O\nO O O O O O O O\nO O O O O O O O\nO O O O O O O O\nO O A O O X X O\nO O O O O O O O\nOUTPUT GRID:\nO O O O O O O O\nO F F R R R R O\nO F F O O O O O\nO O A O O O O O\nO O A O O O O O\nO O A O O O O O\nO O A O O X X O\nO O O O O O O O\n\nPAIR 2\nINPUT GRID:\nO O O O O O O O O O\nO O O Y O G G G G O\nO O F O O G G G G O\nO O O O O O O O O O\nO O O O O O O O O O\nO O O O O O O O O O\nO C C C O O O O O O\nO C C C O O O O A O\nO C C C O O O X O O\nO O O O O O O O O O\nOUTPUT GRID:\nO O O O O O O O O O\nO O O Y O G G G G O\nO O F Y O G G G G O\nO O F Y O O O O O O\nO O F Y O O O O O O\nO O F Y O O O O O O\nO C C C O O O O O O\nO C C C A A A A A O\nO C C C X X X X O O\nO O O O O O O O O O\n\n### EXPECTED OUTPUT\n{\n    \"nl_description\": \"Extend all the objects of size 1 toward the object of maximum size, without overlapping.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (size_equals (size_of this) 1)\\n                (and\\n                    (neighbor_of this other)\\n                    (size_equals (size_of other) max)\\n                )\\n            )\\n        )\\n        (apply\\n            (extend_node (direction_of other) false)\\n        )    \\n    )\\n)\"\n}\n\n\n## DEMONSTRATION TASK 3\n\n### INPUT\nPAIR 1\nINPUT GRID:\nO O O O O O O O O O\nO O O O O O O G O O\nO O G O O O O G O O\nO O G G O O O G G O\nO O O O O O O O O O\nO G G O O O O O O O\nO G G O O G G G O O\nO O O O O O O O O O\nO O G G O O O G O O\nO O O O O O O O O O\nOUTPUT GRID:\nO O O O O O O O O O\nO O B O O O O G O O\nO O B B O O O G O O\nO O O O O O O G G O\nO O O O O O O O O O\nO G G O O B B B O O\nO G G O O O O O O O\nO O O O O O O O O O\nO O G G O O O G O O\nO O O O O O O O O O\n\nPAIR 2\nINPUT GRID:\nO O O O O O O O O O O O O O O O\nO O O O O O O O O O O O O G O O\nO B B O O O O O O C C C O G G O\nO O O O O F O O O O O O O O O O\nO O O O O F O O O O R R O O O O\nO O O O O F O O O O R R O O O O\nO O O O O O O O W O O O O O O O\nO O O A O O O W W O O O X O O O\nO O O A A O O W W O O O X X X O\nO O O O O O O O O O O O O O O O\nO O O O O O O O O O Y Y O O O O\nO O O O B O O O O O O O O O O O\nO Y O O B O O O G O O O O F F O\nO Y O O O O O O G O O O O F F O\nO Y Y Y O O O O G O O O O O O O\nO O O O O O O O O O O O O O O O\nOUTPUT GRID:\nO O O O O O O O O O O O O B O O\nO O O O O O O O O B B B O B B O\nO B B O O B O O O O O O O O O O\nO O O O O B O O O O O O O O O O\nO O O O O B O O O O R R O O O O\nO O O O O O O O O O R R O O O O\nO O O B O O O O W O O O O O O O\nO O O B B O O W W O O O X O O O\nO O O O O O O W W O O O X X X O\nO O O O O O O O O O O O O O O O\nO O O O O O O O O O Y Y O O O O\nO O O O B O O O B O O O O O O O\nO Y O O B O O O B O O O O F F O\nO Y O O O O O O B O O O O F F O\nO Y Y Y O O O O O O O O O O O O\nO O O O O O O O O O O O O O O O\n\n### EXPECTED OUTPUT\n{\n    \"nl_description\": \"Move all objects of size 3 one step up, and then recolor them to color B.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (size_equals (size_of this) 3)\\n        )\\n        (apply\\n            (move_node up)\\n            (update_color B)\\n        )\\n    )\\n)\"\n}\n\n\n## DEMONSTRATION TASK 4\n\n### INPUT\nPAIR 1\nINPUT GRID:\nO O O O R O O O A O\nO B O O O O B O O O\nO O O O O O O O O O\nO O O O X X X O O O\nO O O O X X X O O F\nW O O O O O O O O O\nO O F O O O Y O O O\nO O O O O O O O O O\nO O O O G O O O W O\nO O O O O O O O O O\nOUTPUT GRID:\nO O O O O O O O A O\nO B O O O O O O O O\nO O O O R O B O O O\nO O O O X X X O O O\nO O O O X X X F O O\nW O O O G O Y O O O\nO O F O O O O O O O\nO O O O O O O O O O\nO O O O O O O O W O\nO O O O O O O O O O\n\nPAIR 2\nINPUT GRID:\nO O O F O O O R O O O O\nO O O O O O O O O Y O O\nO O O O O B O O O O O O\nO O R O O O O O G O O O\nB O O O O G O O O O O A\nO O O O O O R O O O W O\nO O O O O O O O C O O O\nG O X X O O O O O O O R\nO O X X O O O O O O Y O\nO O X X O O A O O O O O\nO F X X O O O O O O O O\nO O O O O Y O O O O O O\nOUTPUT GRID:\nO O O O O O O R O O O O\nO O O O O O O O O Y O O\nO O O O O B O O O O O O\nO O O O O O O O G O O O\nB O O O O G O O O O O A\nO O O O O O R O O O W O\nO O R F O O O O C O O O\nO G X X R O O O O O O O\nO O X X Y O O O O O O O\nO O X X A O O O O O O O\nO F X X O O O O O O O O\nO O O O O Y O O O O O O\n\nPAIR 3\nINPUT GRID:\nO G O O O O O O\nO O O A O O A O\nW O O O W O O O\nO O O O O O O B\nO R O X O F O O\nO O O O O O O O\nO G O O F O O G\nO O B O O A O O\nOUTPUT GRID:\nO G O O O O O O\nO O O O O O A O\nW O O O W O O O\nO O O A O O O B\nO O R X F O O O\nO O O O O O O O\nO G O O F O O G\nO O B O O A O O\n\n### EXPECTED OUTPUT\n{\n    \"nl_description\": \"Move all objects of color different than X, toward the object of color X, if they are neighbors of it.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (not (color_equals (color_of this) X))\\n                (and\\n                    (neighbor_of this other)\\n                    (color_equals (color_of other) X)\\n                )\\n            )\\n        )\\n        (apply\\n            (move_node_max (direction_of other))\\n        )\\n    )\\n)\"\n}\n\n\nNow follows task you will be evaluated on.\nOutput the solution as a JSON object, which should contain both a natural language description of the solution and the solution written in the DSL.\nThe code should be parseable by the DSL grammar.\nThe JSON must have the following structure:\n\n{\n    \"nl_description\": \"TO_BE_FILLED\",\n    \"code\": \"TO_BE_FILLED\"\n}\n\n## TEST TASK\n\nPAIR 1\nINPUT GRID:\nO O X O O O O X O O\nO O X O O O O X O O\nO O X O O O O X O O\nX X X X X X X X X X\nO O X O O O O X O O\nO O X O O O O X O O\nO O X O O O O X O O\nX X X X X X X X X X\nO O X O O O O X O O\nO O X O O O O X O O\nOUTPUT GRID:\nB B X O O O O X O O\nB B X O O O O X O O\nB B X O O O O X O O\nX X X X X X X X X X\nO O X R R R R X O O\nO O X R R R R X O O\nO O X R R R R X O O\nX X X X X X X X X X\nO O X O O O O X G G\nO O X O O O O X G G\n\nPAIR 2\nINPUT GRID:\nO O O X O O O O X O\nX X X X X X X X X X\nO O O X O O O O X O\nX X X X X X X X X X\nO O O X O O O O X O\nO O O X O O O O X O\nX X X X X X X X X X\nO O O X O O O O X O\nX X X X X X X X X X\nO O O X O O O O X O\nOUTPUT GRID:\nB B B X O O O O X O\nX X X X X X X X X X\nO O O X O O O O X O\nX X X X X X X X X X\nO O O X R R R R X O\nO O O X R R R R X O\nX X X X X X X X X X\nO O O X O O O O X O\nX X X X X X X X X X\nO O O X O O O O X G\n\nPAIR 3\nINPUT GRID:\nO X O O X O X O X O\nO X O O X O X O X O\nO X O O X O X O X O\nX X X X X X X X X X\nO X O O X O X O X O\nO X O O X O X O X O\nX X X X X X X X X X\nO X O O X O X O X O\nO X O O X O X O X O\nO X O O X O X O X O\nOUTPUT GRID:\nB X O O X O X O X O\nB X O O X O X O X O\nB X O O X O X O X O\nX X X X X X X X X X\nO X O O X R X O X O\nO X O O X R X O X O\nX X X X X X X X X X\nO X O O X O X O X G\nO X O O X O X O X G\nO X O O X O X O X G\n"
        }
    ],
    "n_valid_json": 100,
    "n_can_parse": 54,
    "completions": [
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Change the color of the top-left 3x3 block to B, the middle 3x3 block to R, and the bottom-right 3x3 block to G.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (and\n                    (color_equals (color_of this) O)\n                    (column_equals (column_of this) 0)\n                )\n                (and\n                    (column_equals (column_of this) (min))\n                    (height_equals (height_of this) (min))\n                )\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (and\n                    (color_equals (color_of this) O)\n                    (column_equals (column_of this) 4)\n                )\n                (and\n                    (column_equals (column_of this) 4)\n                    (height_equals (height_of this) 4)\n                )\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (and\n                    (color_equals (color_of this) O)\n                    (column_equals (column_of this) 8)\n                )\n                (and\n                    (column_equals (column_of this) 8)\n                    (height_equals (height_of this) 8)\n                )\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches 'm' in the current parser context, at line 11 col 54\n\n       (column_equals (column_of this) (min))\n                                        ^\nExpected one of: \n\t* COLUMN_OF\n",
            "token_counts": {
                "do": 1,
                "rule": 3,
                "vars": 3,
                "this": 15,
                "filter": 3,
                "and": 9,
                "color_equals": 3,
                "color_of": 3,
                "O": 3,
                "column_equals": 6,
                "column_of": 6,
                "0": 1,
                "min": 2,
                "height_equals": 3,
                "height_of": 3,
                "apply": 3,
                "update_color": 3,
                "B": 1,
                "4": 3,
                "R": 1,
                "8": 3,
                "G": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of size 3, except those with color X, to the top of the grid, then recolor middle rows to different colors.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (size_equals (size_of this) 3)\n                (not (color_equals (color_of this) X))\n            )\n        )\n        (apply\n            (move_node up)\n            (move_node up)\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 5)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 10)\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 3,
                "vars": 3,
                "this": 7,
                "filter": 3,
                "and": 1,
                "size_equals": 1,
                "size_of": 1,
                "3": 1,
                "not": 1,
                "color_equals": 1,
                "color_of": 1,
                "X": 1,
                "apply": 3,
                "move_node": 2,
                "up": 2,
                "update_color": 3,
                "B": 1,
                "column_equals": 2,
                "column_of": 2,
                "5": 1,
                "R": 1,
                "10": 1,
                "G": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor the first 3 rows' objects to B, rows 5-7 to R, and the last row's up to 2 objects to G, except for objects at column with neighbor of color X and beyond.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) X)\n            )\n        )\n        (apply\n            (noop)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (or\n                    (size_equals (size_of this) 3)\n                    (size_equals (size_of this) 3)\n                )\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (or\n                    (size_equals (size_of this) 3)\n                    (size_equals (size_of this) 3)\n                )\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (or\n                    (size_equals (size_of this) 3)\n                    (size_equals (size_of this) 3)\n                )\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches ')' in the current parser context, at line 22 col 13\n\n            )\n            ^\nExpected one of: \n\t* LPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 4,
                "vars": 4,
                "this": 11,
                "filter": 4,
                "and": 4,
                "neighbor_of": 1,
                "other": 2,
                "color_equals": 1,
                "color_of": 1,
                "X": 1,
                "apply": 4,
                "noop": 1,
                "or": 3,
                "size_equals": 6,
                "size_of": 6,
                "3": 6,
                "update_color": 3,
                "B": 1,
                "R": 1,
                "G": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color O that are in the same row as an object of color X to the leftmost column, then recolor them to either B, R, or G based on their rows respectively.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (neighbor_of this other)\n            (and\n                (color_equals (color_of other) X)\n                (color_equals (color_of this) O)\n            )\n        )\n        (apply\n            (move_node left)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter (and\n            (column_equals (column_of this) 0)\n            (or \n                (row_equals (row_of this) 1)\n                (row_equals (row_of this) 5)\n                (row_equals (row_of this) 9)\n            )\n        ))\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter (and\n            (column_equals (column_of this) 4)\n            (or \n                (row_equals (row_of this) 5)\n                (row_equals (row_of this) 8)\n            )\n        ))\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter (and\n            (column_equals (column_of this) 9)\n            (or \n                (row_equals (row_of this) 9)\n                (row_equals (row_of this) 10)\n                (row_equals (row_of this) 11)\n            )\n        ))\n        (apply\n            (update_color G)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 6 col 13\n\n            (and\n            ^\nExpected one of: \n\t* RPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 4,
                "vars": 4,
                "this": 17,
                "other": 3,
                "filter": 4,
                "neighbor_of": 1,
                "and": 4,
                "color_equals": 2,
                "color_of": 2,
                "X": 1,
                "O": 1,
                "apply": 4,
                "move_node": 1,
                "left": 1,
                "column_equals": 3,
                "column_of": 3,
                "0": 1,
                "or": 3,
                "row_equals": 8,
                "row_of": 8,
                "1": 1,
                "5": 2,
                "9": 3,
                "update_color": 3,
                "B": 1,
                "4": 1,
                "8": 1,
                "R": 1,
                "10": 1,
                "11": 1,
                "G": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of size 3 toward the object with color X, if they are neighbors of it, and then recolor the moved objects to specific colors.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 3)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) X)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) X)\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) X)\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n            (update_color G)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 3,
                "vars": 3,
                "this": 7,
                "other": 12,
                "filter": 3,
                "and": 4,
                "size_equals": 1,
                "size_of": 1,
                "3": 1,
                "neighbor_of": 3,
                "color_equals": 3,
                "color_of": 3,
                "X": 3,
                "apply": 3,
                "move_node_max": 3,
                "direction_of": 3,
                "update_color": 3,
                "B": 1,
                "R": 1,
                "G": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all the objects that are neighbors to an object of color X and share its columns.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (and\n                    (color_equals (color_of other) X)\n                    (column_equals (column_of this) (column_of other))\n                )\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (and\n                    (color_equals (color_of other) X)\n                    (column_equals (column_of this) (column_of other))\n                )\n                (color_equals (color_of this) B)\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (and\n                    (color_equals (color_of other) X)\n                    (column_equals (column_of this) (column_of other))\n                )\n                (color_equals (color_of this) B)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 26 col 17\n\n                (color_equals (color_of this) B)\n                ^\nExpected one of: \n\t* RPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 3,
                "vars": 3,
                "this": 12,
                "other": 13,
                "filter": 3,
                "and": 6,
                "neighbor_of": 4,
                "color_equals": 5,
                "color_of": 5,
                "X": 3,
                "column_equals": 3,
                "column_of": 6,
                "apply": 3,
                "update_color": 3,
                "B": 3,
                "G": 1,
                "R": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor the top-left neighbor of the X shapes to B, then color the cells to the right neighbors of the X shape in the middle to R, and finally color the bottom-right neighbors of the X shapes in the last row to G.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of other) X)\n                (neighbor_of this other)\n                (and\n                    (neighbor_of this other)\n                    (column_equals (column_of this) (column_of other))\n                )\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of other) X)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of other) X)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 8 col 17\n\n                (and\n                ^\nExpected one of: \n\t* RPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 3,
                "vars": 3,
                "this": 8,
                "other": 11,
                "filter": 3,
                "and": 4,
                "color_equals": 3,
                "color_of": 3,
                "X": 3,
                "neighbor_of": 4,
                "column_equals": 1,
                "column_of": 2,
                "apply": 3,
                "update_color": 3,
                "B": 1,
                "R": 1,
                "G": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor the three objects to the left of the object marked with X to B, the three objects below the object marked with X to R, and the three objects to the right of the object marked with X to G.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of other) X)\n                (and\n                    (neighbor_of this other)\n                    (degree_equals (degree_of other) 3)\n                )\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of other) X)\n                (and\n                    (neighbor_of this other)\n                    (degree_equals (degree_of this) 3)\n                )\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) X)\n                (degree_equals (degree_of other) 3)\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 3,
                "vars": 3,
                "this": 7,
                "other": 9,
                "filter": 3,
                "and": 5,
                "color_equals": 3,
                "color_of": 3,
                "X": 3,
                "neighbor_of": 2,
                "degree_equals": 3,
                "degree_of": 3,
                "3": 3,
                "apply": 3,
                "update_color": 3,
                "B": 1,
                "R": 1,
                "G": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor the first three cells of the leftmost column and the last three cells of the rightmost column to B, recolor the middle three cells of the leftmost column to R, and recolor the last three cells of the bottom row to G.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter color_equals (color_of this) X)\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter and (color_equals (color_of this) O) (size_equals (height_of this) 10))\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter and (color_equals (color_of this) O) (size_equals (height_of this) 7))\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter and (color_equals (color_of this) O) (row_equals (row_of this) 10))\n        (apply\n            (update_color G)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches 'c' in the current parser context, at line 4 col 17\n\n        (filter color_equals (color_of this) X)\n                ^\nExpected one of: \n\t* LPAR\n\t* RPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 4,
                "vars": 4,
                "this": 11,
                "filter": 4,
                "color_equals": 4,
                "color_of": 4,
                "X": 1,
                "apply": 4,
                "update_color": 4,
                "B": 2,
                "and": 3,
                "O": 3,
                "size_equals": 2,
                "height_of": 2,
                "10": 2,
                "7": 1,
                "R": 1,
                "row_equals": 1,
                "row_of": 1,
                "G": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor objects of width 3 in the first three rows to B, objects of width 4 in the middle three rows to R, and objects of width 2 in the last three rows to G.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (width_equals (width_of this) 3)\n                (and\n                    (column_equals (column_of this) even)\n                    (and\n                        (or\n                            (column_equals (column_of this) 0)\n                            (or\n                                (column_equals (column_of this) 2)\n                                (column_equals (column_of this) 4)\n                            )\n                        )\n                    )\n                )\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (width_equals (width_of this) 4)\n                (and\n                    (column_equals (column_of this) even)\n                    (and\n                        (or\n                            (column_equals (column_of this) 4)\n                            (or\n                                (column_equals (column_of this) 6)\n                                (column_equals (column_of this) 8)\n                            )\n                        )\n                    )\n                )\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (width_equals (width_of this) 2)\n                (and\n                    (column_equals (column_of this) even)\n                    (or\n                        (column_equals (column_of this) 6)\n                        (or\n                            (column_equals (column_of this) 8)\n                            (column_equals (column_of this) 10)\n                        )\n                    )\n                )\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches ')' in the current parser context, at line 17 col 21\n\n                    )\n                    ^\nExpected one of: \n\t* LPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 3,
                "vars": 3,
                "this": 18,
                "filter": 3,
                "and": 8,
                "width_equals": 3,
                "width_of": 3,
                "3": 1,
                "column_equals": 12,
                "column_of": 12,
                "even": 3,
                "or": 6,
                "0": 1,
                "2": 2,
                "4": 3,
                "apply": 3,
                "update_color": 3,
                "B": 1,
                "6": 2,
                "8": 2,
                "R": 1,
                "10": 1,
                "G": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects towards the center object of color X, and then recolor top objects to B, middle objects to R, and bottom objects to G.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (neighbor_of this other)\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (column_equals (column_of this) 1)\n                (not (color_equals (color_of this) X))\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (column_equals (column_of this) 5)\n                (not (color_equals (color_of this) X))\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (column_equals (column_of this) 9)\n                (not (color_equals (color_of this) X))\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 4,
                "vars": 4,
                "this": 11,
                "other": 3,
                "filter": 4,
                "neighbor_of": 1,
                "apply": 4,
                "move_node_max": 1,
                "direction_of": 1,
                "and": 3,
                "column_equals": 3,
                "column_of": 3,
                "1": 1,
                "not": 3,
                "color_equals": 3,
                "color_of": 3,
                "X": 3,
                "update_color": 3,
                "B": 1,
                "5": 1,
                "R": 1,
                "9": 1,
                "G": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor objects of color O to B in the top rows, to R in the middle rows, and to G in the bottom rows.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) O)\n                (or\n                    (row_equals (row_of this) 0)\n                    (or\n                        (row_equals (row_of this) 1)\n                        (row_equals (row_of this) 2)\n                    )\n                )\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) O)\n                (or\n                    (row_equals (row_of this) 4)\n                    (or\n                        (row_equals (row_of this) 5)\n                        (row_equals (row_of this) 6)\n                    )\n                )\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) O)\n                (or\n                    (row_equals (row_of this) 8)\n                    (or\n                        (row_equals (row_of this) 9)\n                    )\n                )\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches 'r' in the current parser context, at line 8 col 22\n\n                    (row_equals (row_of this) 0)\n                     ^\nExpected one of: \n\t* SHAPE_EQ\n\t* OP_NOT\n\t* OP_AND\n\t* WIDTH_EQ\n\t* DEGREE_EQ\n\t* SIZE_EQ\n\t* COLUMN_EQ\n\t* COLOR_EQ\n\t* NEIGHBOR_OF\n\t* HEIGHT_EQ\n\t* OP_OR\n",
            "token_counts": {
                "do": 1,
                "rule": 3,
                "vars": 3,
                "this": 14,
                "filter": 3,
                "and": 3,
                "color_equals": 3,
                "color_of": 3,
                "O": 3,
                "or": 6,
                "row_equals": 8,
                "row_of": 8,
                "0": 1,
                "1": 1,
                "2": 1,
                "apply": 3,
                "update_color": 3,
                "B": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "R": 1,
                "8": 1,
                "9": 1,
                "G": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of size 3 toward the object of color X, then recolor them in B, R, or G based on their relative vertical position.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 3)\n                (neighbor_of this other)\n                (color_equals (color_of other) X)\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 3)\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (row_equals (row_of this) 5)\n                (size_equals (size_of this) 3)\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (row_greater_than (row_of this) 6)\n                (size_equals (size_of this) 3)\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 8 col 17\n\n                (color_equals (color_of other) X)\n                ^\nExpected one of: \n\t* RPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 4,
                "vars": 4,
                "this": 11,
                "other": 4,
                "filter": 4,
                "and": 3,
                "size_equals": 4,
                "size_of": 4,
                "3": 4,
                "neighbor_of": 1,
                "color_equals": 1,
                "color_of": 1,
                "X": 1,
                "apply": 4,
                "move_node_max": 1,
                "direction_of": 1,
                "update_color": 3,
                "B": 1,
                "row_equals": 1,
                "row_of": 2,
                "5": 1,
                "R": 1,
                "row_greater_than": 1,
                "6": 1,
                "G": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor the first three and last three columns to color B, R, and G. The middle columns remain unchanged.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (or\n                (column_equals (column_of this) 0)\n                (or\n                    (column_equals (column_of this) 1)\n                    (column_equals (column_of this) 2)\n                )\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (or\n                (column_equals (column_of this) 4)\n                (or\n                    (column_equals (column_of this) 5)\n                    (column_equals (column_of this) 6)\n                )\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (or\n                (column_equals (column_of this) 8)\n                (or\n                    (column_equals (column_of this) 9)\n                    (and\n                        (column_equals (column_of this) 10)\n                        (or\n                            (column_equals (column_of this) 11)\n                            (column_equals (column_of this) 12)\n                        )\n                    )\n                )\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 3,
                "vars": 3,
                "this": 14,
                "filter": 3,
                "or": 7,
                "column_equals": 11,
                "column_of": 11,
                "0": 1,
                "1": 1,
                "2": 1,
                "apply": 3,
                "update_color": 3,
                "B": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "R": 1,
                "8": 1,
                "9": 1,
                "and": 1,
                "10": 1,
                "11": 1,
                "12": 1,
                "G": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of size 3 to positions adjacent to color X objects, and recolor them to B, R, and G, respectively.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 3)\n                (neighbor_of this other)\n                (color_equals (color_of other) X)\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (size_equals (size_of this) 3)\n                (column_equals (column_of this) 0)\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (size_equals (size_of this) 3)\n                (column_equals (column_of this) 4)\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (size_equals (size_of this) 3)\n                (column_equals (column_of this) 8)\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 8 col 17\n\n                (color_equals (color_of other) X)\n                ^\nExpected one of: \n\t* RPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 4,
                "vars": 4,
                "this": 12,
                "other": 4,
                "filter": 4,
                "and": 4,
                "size_equals": 4,
                "size_of": 4,
                "3": 4,
                "neighbor_of": 1,
                "color_equals": 1,
                "color_of": 1,
                "X": 1,
                "apply": 4,
                "move_node_max": 1,
                "direction_of": 1,
                "column_equals": 3,
                "column_of": 3,
                "0": 1,
                "update_color": 3,
                "B": 1,
                "4": 1,
                "R": 1,
                "8": 1,
                "G": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all objects of color O at the top 3 rows to B, the middle 3 rows to R, and the bottom 3 rows to G.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) O)\n                (or\n                    (column_equals (column_of this) 0)\n                    (or\n                        (column_equals (column_of this) 1)\n                        (column_equals (column_of this) 2)\n                    )\n                )\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) O)\n                (or\n                    (column_equals (column_of this) 3)\n                    (or\n                        (column_equals (column_of this) 4)\n                        (column_equals (column_of this) 5)\n                    )\n                )\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) O)\n                (or\n                    (column_equals (column_of this) 6)\n                    (or\n                        (column_equals (column_of this) 7)\n                        (column_equals (column_of this) 8)\n                    )\n                )\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 3,
                "vars": 3,
                "this": 15,
                "filter": 3,
                "and": 3,
                "color_equals": 3,
                "color_of": 3,
                "O": 3,
                "or": 6,
                "column_equals": 9,
                "column_of": 9,
                "0": 1,
                "1": 1,
                "2": 1,
                "apply": 3,
                "update_color": 3,
                "B": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "R": 1,
                "6": 1,
                "7": 1,
                "8": 1,
                "G": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor the cells left to objects X, in the top rows to color B, middle rows to color R, and bottom rows to color G.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) X))\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) X)\n                )\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (column_equals (column_of this) (decrement (column_of other) 1))\n                (row_equals (row_of this) (floor (/ (height_of this) 3)))\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (column_equals (column_of this) (decrement (column_of other) 1))\n                (row_equals (row_of this) (floor (/ (* 2 (height_of this)) 3)))\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches 'd' in the current parser context, at line 21 col 50\n\n       (column_equals (column_of this) (decrement (column_of other) 1))\n                                        ^\nExpected one of: \n\t* COLUMN_OF\n",
            "token_counts": {
                "do": 1,
                "rule": 3,
                "vars": 3,
                "this": 11,
                "other": 7,
                "filter": 3,
                "and": 4,
                "not": 1,
                "color_equals": 2,
                "color_of": 2,
                "X": 2,
                "neighbor_of": 1,
                "apply": 3,
                "update_color": 3,
                "B": 1,
                "column_equals": 2,
                "column_of": 4,
                "decrement": 2,
                "1": 2,
                "row_equals": 2,
                "row_of": 2,
                "floor": 2,
                "/": 2,
                "height_of": 2,
                "3": 2,
                "R": 1,
                "*": 1,
                "2": 1,
                "G": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all objects in the left third of the grid to B, the middle third to R, and the right third to G if the object is not X.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (not (color_equals (color_of this) X))\n                (column_equals (column_of this) 0)\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (not (color_equals (color_of this) X))\n                (column_equals (column_of this) 4)\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (not (color_equals (color_of this) X))\n                (column_equals (column_of this) 8)\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 3,
                "vars": 3,
                "this": 9,
                "filter": 3,
                "and": 3,
                "not": 3,
                "color_equals": 3,
                "color_of": 3,
                "X": 3,
                "column_equals": 3,
                "column_of": 3,
                "0": 1,
                "apply": 3,
                "update_color": 3,
                "B": 1,
                "4": 1,
                "R": 1,
                "8": 1,
                "G": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor the top left group of neighbors of the leftmost column of X objects to B, the middle group to R, and the bottom group to G.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of other) X)\n                (neighbor_of this other)\n                (column_equals (column_of other) min)\n                (column_equals (column_of this) even)\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of other) X)\n                (neighbor_of this other)\n                (column_equals (column_of other) min)\n                (column_equals (column_of this) even)\n                (not (color_equals (color_of this) O))\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of other) X)\n                (neighbor_of this other)\n                (column_equals (column_of other) min)\n                (column_equals (column_of this) even)\n                (not (color_equals (color_of this) O))\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 8 col 17\n\n                (column_equals (column_of other) min)\n                ^\nExpected one of: \n\t* RPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 3,
                "vars": 3,
                "this": 11,
                "other": 12,
                "filter": 3,
                "and": 3,
                "color_equals": 5,
                "color_of": 5,
                "X": 3,
                "neighbor_of": 3,
                "column_equals": 6,
                "column_of": 6,
                "min": 3,
                "even": 3,
                "apply": 3,
                "update_color": 3,
                "B": 1,
                "not": 2,
                "O": 2,
                "R": 1,
                "G": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all the rows that start with B, G, and R correctly, based on a specific pattern.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (and (color_equals (color_of this) O) (column_equals (column_of this) 0)))\n        (apply (update_color B)))\n    (rule\n        (vars (this))\n        (filter (and (color_equals (color_of this) O) (column_equals (column_of this) 4)))\n        (apply (update_color R)))\n    (rule\n        (vars (this))\n        (filter (and (color_equals (color_of this) O) (column_equals (column_of this) 9)))\n        (apply (update_color G)))\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 3,
                "vars": 3,
                "this": 9,
                "filter": 3,
                "and": 3,
                "color_equals": 3,
                "color_of": 3,
                "O": 3,
                "column_equals": 3,
                "column_of": 3,
                "0": 1,
                "apply": 3,
                "update_color": 3,
                "B": 1,
                "4": 1,
                "R": 1,
                "9": 1,
                "G": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor objects adjacent to vertical lines of X with specific colors based on their positions.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (neighbor_of this this)\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (neighbor_of this this)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (neighbor_of this this)\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 3,
                "vars": 3,
                "this": 9,
                "filter": 3,
                "neighbor_of": 3,
                "apply": 3,
                "update_color": 3,
                "B": 1,
                "R": 1,
                "G": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Color all objects in the first row blue, those in the fifth row red, and those in the ninth row green",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 1)\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 5)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 9)\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 3,
                "vars": 3,
                "this": 6,
                "filter": 3,
                "column_equals": 3,
                "column_of": 3,
                "1": 1,
                "apply": 3,
                "update_color": 3,
                "B": 1,
                "5": 1,
                "R": 1,
                "9": 1,
                "G": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all objects in the first column to color B, recolor all objects in the last column to color G, and recolor all objects in the middle rows to color R.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 0)\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 9)\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (column_equals (column_of this) 4)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 3,
                "vars": 3,
                "this": 7,
                "filter": 3,
                "column_equals": 3,
                "column_of": 3,
                "0": 1,
                "apply": 3,
                "update_color": 3,
                "B": 1,
                "9": 1,
                "G": 1,
                "and": 1,
                "4": 1,
                "neighbor_of": 1,
                "other": 1,
                "R": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all objects adjacent to object X on the left side in three steps: first to B, second to R, and third to G.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) X)\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) B)\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) R)\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 3,
                "vars": 3,
                "this": 6,
                "other": 9,
                "filter": 3,
                "and": 3,
                "neighbor_of": 3,
                "color_equals": 3,
                "color_of": 3,
                "X": 1,
                "apply": 3,
                "update_color": 3,
                "B": 2,
                "R": 2,
                "G": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Change the color of the objects of color O to B if they are at the top part of the grid, to R if they are at the middle part of the grid, and to G if they are at the bottom part of the grid.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (and (color_equals (color_of this) O) (or (column_equals (column_of this) 0) (or (column_equals (column_of this) 1) (column_equals (column_of this) 2)))))\n        (apply (update_color B))\n    )\n    (rule\n        (vars (this))\n        (filter (and (color_equals (color_of this) O) (or (column_equals (column_of this) 3) (or (column_equals (column_of this) 4) (column_equals (column_of this) 5)))))\n        (apply (update_color R))\n    )\n    (rule\n        (vars (this))\n        (filter (and (color_equals (color_of this) O) (or (column_equals (column_of this) 6) (or (column_equals (column_of this) 7) (column_equals (column_of this) 8)))))\n        (apply (update_color G))\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 3,
                "vars": 3,
                "this": 15,
                "filter": 3,
                "and": 3,
                "color_equals": 3,
                "color_of": 3,
                "O": 3,
                "or": 6,
                "column_equals": 9,
                "column_of": 9,
                "0": 1,
                "1": 1,
                "2": 1,
                "apply": 3,
                "update_color": 3,
                "B": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "R": 1,
                "6": 1,
                "7": 1,
                "8": 1,
                "G": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move objects of size 1 of color O one step up and recolor them to B. Then move objects of size 1 of color O which are in the bottom part of the grid to R and those in the right part to G.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (color_equals (color_of this) O)\n            )\n        )\n        (apply\n            (move_node up)\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (color_equals (color_of this) O)\n                (neighbor_of this other)\n                (and\n                    (direction_equals (direction_of this other) down)\n                    (color_equals (color_of other) X)\n                )\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (color_equals (color_of this) O)\n                (neighbor_of this other)\n                (and\n                    (direction_equals (direction_of this other) right)\n                    (color_equals (color_of other) X)\n                )\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 21 col 17\n\n                (neighbor_of this other)\n                ^\nExpected one of: \n\t* RPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 3,
                "vars": 3,
                "this": 13,
                "filter": 3,
                "and": 5,
                "size_equals": 3,
                "size_of": 3,
                "1": 3,
                "color_equals": 5,
                "color_of": 5,
                "O": 3,
                "apply": 3,
                "move_node": 1,
                "up": 1,
                "update_color": 3,
                "B": 1,
                "neighbor_of": 2,
                "other": 6,
                "direction_equals": 2,
                "direction_of": 2,
                "down": 1,
                "X": 2,
                "R": 1,
                "right": 1,
                "G": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color O to the top of their columns, then recolor the cells to B, R, or G based on the row (top, middle, bottom) where they end up.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) O)\n        )\n        (apply\n            (move_node up)\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) B)\n                (not (column_equals (column_of this) (column_of other)))\n            )\n        )\n        (apply\n            (move_node down)\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) B)\n                (column_equals (column_of this) (column_of other))\n            )\n        )\n        (apply\n            (move_node down)\n            (update_color G)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 3,
                "vars": 3,
                "this": 8,
                "filter": 3,
                "color_equals": 3,
                "color_of": 3,
                "O": 1,
                "apply": 3,
                "move_node": 3,
                "up": 1,
                "update_color": 3,
                "B": 3,
                "and": 2,
                "not": 1,
                "column_equals": 2,
                "column_of": 4,
                "other": 2,
                "down": 2,
                "R": 1,
                "G": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor the top left 3x3 sub-grid to B, the middle left 3x3 sub-grid to R, and the bottom right 3x3 sub-grid to G, for objects neighboring X.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) X)\n                (column_equals (column_of this) (column_of other))\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) X)\n                (or\n                    (and\n                        (height_equals (height_of this) 5)\n                        (height_equals (height_of other) 5)\n                    )\n                )\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) X)\n                (and\n                    (height_equals (height_of this) 10)\n                    (height_equals (height_of other) 10)\n                    (column_equals (column_of this) (column_of other))\n                )\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 8 col 17\n\n                (column_equals (column_of this) (column_\n                ^\nExpected one of: \n\t* RPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 3,
                "vars": 3,
                "this": 10,
                "other": 13,
                "filter": 3,
                "and": 5,
                "neighbor_of": 3,
                "color_equals": 3,
                "color_of": 3,
                "X": 3,
                "column_equals": 2,
                "column_of": 4,
                "apply": 3,
                "update_color": 3,
                "B": 1,
                "or": 1,
                "height_equals": 4,
                "height_of": 4,
                "5": 2,
                "R": 1,
                "10": 2,
                "G": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all objects of size 3 to color B, all objects of size 4 to color R, and all objects of size 2 to color G.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (size_equals (size_of this) 3))\n        (apply (update_color B))\n    )\n    (rule\n        (vars (this))\n        (filter (size_equals (size_of this) 4))\n        (apply (update_color R))\n    )\n    (rule\n        (vars (this))\n        (filter (size_equals (size_of this) 2))\n        (apply (update_color G))\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 3,
                "vars": 3,
                "this": 6,
                "filter": 3,
                "size_equals": 3,
                "size_of": 3,
                "3": 1,
                "apply": 3,
                "update_color": 3,
                "B": 1,
                "4": 1,
                "R": 1,
                "2": 1,
                "G": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor each column of isolated objects differently. Each set starts by recoloring the first set to B, the second set to R and the third set to G.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) X)\n                (neighbor_of this this)\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) X)\n                (neighbor_of this this)\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) X)\n                (neighbor_of this this)\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 3,
                "vars": 3,
                "this": 12,
                "filter": 3,
                "and": 3,
                "color_equals": 3,
                "color_of": 3,
                "X": 3,
                "neighbor_of": 3,
                "apply": 3,
                "update_color": 3,
                "B": 1,
                "R": 1,
                "G": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor the top left object to B, the middle object to R, and the bottom right object to G.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (size_equals (size_of this) 9)\n                (column_equals (column_of this) 0)\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (size_equals (size_of this) 9)\n                (column_equals (column_of this) 4)\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (size_equals (size_of this) 9)\n                (column_equals (column_of this) 8)\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 3,
                "vars": 3,
                "this": 9,
                "filter": 3,
                "and": 3,
                "size_equals": 3,
                "size_of": 3,
                "9": 3,
                "column_equals": 3,
                "column_of": 3,
                "0": 1,
                "apply": 3,
                "update_color": 3,
                "B": 1,
                "4": 1,
                "R": 1,
                "8": 1,
                "G": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor the first three rows of size 1 objects near black (X) to B in the first three rows, recolor similar objects to R in the middle three rows, and recolor them to G in the last three rows.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (neighbor_of this other)\n                (color_equals (color_of other) X)\n                (column_equals (column_of this) (column_of other))\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (neighbor_of this other)\n                (color_equals (color_of other) X)\n                (column_equals (column_of this) (column_of other))\n                (shape_equals (shape_of this) square)\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (neighbor_of this other)\n                (color_equals (color_of other) X)\n                (column_equals (column_of this) (column_of other))\n                (height_equals (height_of this) (height_of other))\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 8 col 17\n\n                (color_equals (color_of other) X)\n                ^\nExpected one of: \n\t* RPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 3,
                "vars": 3,
                "this": 14,
                "other": 13,
                "filter": 3,
                "and": 3,
                "size_equals": 3,
                "size_of": 3,
                "1": 3,
                "neighbor_of": 3,
                "color_equals": 3,
                "color_of": 3,
                "X": 3,
                "column_equals": 3,
                "column_of": 6,
                "apply": 3,
                "update_color": 3,
                "B": 1,
                "shape_equals": 1,
                "shape_of": 1,
                "square": 1,
                "R": 1,
                "height_equals": 1,
                "height_of": 2,
                "G": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all O objects in three different regions to colors B, R, and G respectively.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) O)\n                (or\n                    (neighbor_of this this)\n                    (neighbor_of this this)\n                )\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) O)\n                (or\n                    (neighbor_of this this)\n                    (neighbor_of this this)\n                )\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) O)\n                (or\n                    (neighbor_of this this)\n                    (neighbor_of this this)\n                )\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 3,
                "vars": 3,
                "this": 18,
                "filter": 3,
                "and": 3,
                "color_equals": 3,
                "color_of": 3,
                "O": 3,
                "or": 3,
                "neighbor_of": 6,
                "apply": 3,
                "update_color": 3,
                "B": 1,
                "R": 1,
                "G": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of size 3 steps left, and then recolor them to colors B, R, and G sequentially from top to bottom.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 3)\n        )\n        (apply\n            (move_node left)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 3)\n                (neighbor_of this other)\n                (or\n                    (and\n                        (color_equals (color_of other) X)\n                        (not (color_equals (color_of this) B))\n                        (not (color_equals (color_of this) R))\n                        (not (color_equals (color_of this) G))\n                    )\n                    (color_equals (color_of this) B)\n                    (color_equals (color_of this) R)\n                    (color_equals (color_of this) G)\n                )\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 3)\n                (neighbor_of this other)\n                (or\n                    (and\n                        (color_equals (color_of other) X)\n                        (not (color_equals (color_of this) B))\n                        (not (color_equals (color_of this) R))\n                        (not (color_equals (color_of this) G))\n                    )\n                    (color_equals (color_of this) B)\n                    (color_equals (color_of this) R)\n                    (color_equals (color_of this) G)\n                )\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 3)\n                (neighbor_of this other)\n                (or\n                    (and\n                        (color_equals (color_of other) X)\n                        (not (color_equals (color_of this) B))\n                        (not (color_equals (color_of this) R))\n                        (not (color_equals (color_of this) G))\n                    )\n                    (color_equals (color_of this) B)\n                    (color_equals (color_of this) R)\n                    (color_equals (color_of this) G)\n                )\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 17 col 17\n\n                (or\n                ^\nExpected one of: \n\t* RPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 4,
                "vars": 4,
                "this": 29,
                "filter": 4,
                "size_equals": 4,
                "size_of": 4,
                "3": 4,
                "apply": 4,
                "move_node": 1,
                "left": 1,
                "other": 9,
                "and": 6,
                "neighbor_of": 3,
                "or": 3,
                "color_equals": 21,
                "color_of": 21,
                "X": 3,
                "not": 9,
                "B": 7,
                "R": 7,
                "G": 7,
                "update_color": 3
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor the objects to B, R, G depending on their position: top, middle, bottom respectively.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (column_equals (column_of this) even)\n                (or\n                    (and (column_equals (column_of this) 0) (column_equals (column_of this) 1) (column_equals (column_of this) 2))\n                    (and (column_equals (column_of this) 4) (column_equals (column_of this) 5) (column_equals (column_of this) 6))\n                )\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (column_equals (column_of this) even)\n                (or\n                    (column_equals (column_of this) 4)\n                    (column_equals (column_of this) 5)\n                )\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (column_equals (column_of this) even)\n                (or\n                    (column_equals (column_of this) 8)\n                    (column_equals (column_of this) 9)\n                )\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 8 col 96\n\n) 0) (column_equals (column_of this) 1) (column_equals (column_of this) 2))\n                                        ^\nExpected one of: \n\t* RPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 3,
                "vars": 3,
                "this": 16,
                "filter": 3,
                "and": 5,
                "column_equals": 13,
                "column_of": 13,
                "even": 3,
                "or": 3,
                "0": 1,
                "1": 1,
                "2": 1,
                "4": 2,
                "5": 2,
                "6": 1,
                "apply": 3,
                "update_color": 3,
                "B": 1,
                "R": 1,
                "8": 1,
                "9": 1,
                "G": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all objects that are in the first row to color B, recolor all objects that are in the middle row to color R, and recolor all objects that are in the last row to color G.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) X)\n                (or\n                    (and\n                        (column_equals (column_of this) 0)\n                        (column_equals (column_of this) 1)\n                    )\n                    (column_equals (column_of this) (max - 1))\n                )\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) X)\n                (column_equals (column_of this) (/ max 2))\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) X)\n                (column_equals (column_of this) (max - 0))\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches 'm' in the current parser context, at line 12 col 54\n\n       (column_equals (column_of this) (max - 1))\n                                        ^\nExpected one of: \n\t* COLUMN_OF\n",
            "token_counts": {
                "do": 1,
                "rule": 3,
                "vars": 3,
                "this": 11,
                "filter": 3,
                "and": 4,
                "color_equals": 3,
                "color_of": 3,
                "X": 3,
                "or": 1,
                "column_equals": 5,
                "column_of": 5,
                "0": 2,
                "1": 2,
                "max": 3,
                "-": 2,
                "apply": 3,
                "update_color": 3,
                "B": 1,
                "/": 1,
                "2": 1,
                "R": 1,
                "G": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Change the color of objects in the first column to B, in the fifth column to R, and in the ninth column to G.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 0)\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 4)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 8)\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 3,
                "vars": 3,
                "this": 6,
                "filter": 3,
                "column_equals": 3,
                "column_of": 3,
                "0": 1,
                "apply": 3,
                "update_color": 3,
                "B": 1,
                "4": 1,
                "R": 1,
                "8": 1,
                "G": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor objects of size 3 to color B, objects of size 6 to color R, and objects of size 2 to color G.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 3)\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 6)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 2)\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 3,
                "vars": 3,
                "this": 6,
                "filter": 3,
                "size_equals": 3,
                "size_of": 3,
                "3": 1,
                "apply": 3,
                "update_color": 3,
                "B": 1,
                "6": 1,
                "R": 1,
                "2": 1,
                "G": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor groups of objects adjacent to the vertical line of X's (black) to B, R, and G.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) X)\n                (size_equals (size_of this) 3)\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) X)\n                (size_equals (size_of this) 4)\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) X)\n                (size_equals (size_of this) 2)\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 8 col 17\n\n                (size_equals (size_of this) 3)\n                ^\nExpected one of: \n\t* RPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 3,
                "vars": 3,
                "this": 9,
                "other": 9,
                "filter": 3,
                "and": 3,
                "neighbor_of": 3,
                "color_equals": 3,
                "color_of": 3,
                "X": 3,
                "size_equals": 3,
                "size_of": 3,
                "3": 1,
                "apply": 3,
                "update_color": 3,
                "B": 1,
                "4": 1,
                "R": 1,
                "2": 1,
                "G": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Extend all objects vertically until they hit another object, recolor top objects to B, middle objects to R, and bottom objects to G.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node_max down)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (neighbor_of this other)\n                (not (neighbor_of other this))\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (not (neighbor_of other this))\n                (neighbor_of other this)\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (not (neighbor_of other this))\n                (not (neighbor_of other this))\n                (not (neighbor_of this other))\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 27 col 17\n\n                (neighbor_of other this)\n                ^\nExpected one of: \n\t* RPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 4,
                "vars": 4,
                "this": 13,
                "filter": 4,
                "apply": 4,
                "move_node_max": 1,
                "down": 1,
                "and": 3,
                "neighbor_of": 9,
                "other": 11,
                "not": 5,
                "update_color": 3,
                "B": 1,
                "R": 1,
                "G": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move the first vertical column of objects to the top couple of rows and color them R for the central part and G for the bottom, to be achieved in three steps. In two intermediate steps, first move and recolor the central part, then move and recolor the bottom part.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) O)\n                (column_equals (column_of this) 0)\n            )\n        )\n        (apply\n            (move_node_max up)\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) O)\n                (column_equals (column_of this) 1)\n            )\n        )\n        (apply\n            (move_node_max up)\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) O)\n                (column_equals (column_of this) 2)\n            )\n        )\n        (apply\n            (move_node_max up)\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) G)\n                (column_equals (column_of this) center)\n            )\n        )\n        (apply\n            (extend_node (down) false)\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of this) G)\n        )\n        (apply\n            (move_node (down))\n            (update_color G)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches 'd' in the current parser context, at line 50 col 27\n\n            (extend_node (down) false)\n                          ^\nExpected one of: \n\t* DIRECTION_OF\n",
            "token_counts": {
                "do": 1,
                "rule": 5,
                "vars": 5,
                "this": 14,
                "other": 5,
                "filter": 5,
                "and": 4,
                "color_equals": 5,
                "color_of": 5,
                "O": 3,
                "column_equals": 4,
                "column_of": 4,
                "0": 1,
                "apply": 5,
                "move_node_max": 3,
                "up": 3,
                "update_color": 5,
                "B": 3,
                "1": 1,
                "2": 1,
                "G": 3,
                "center": 1,
                "extend_node": 1,
                "down": 2,
                "false": 1,
                "R": 1,
                "move_node": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor the objects of size 3 to color B, the objects of size 4 to color R, and add color G to the objects at bottom-right.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 3)\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 4)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color G)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 3,
                "vars": 3,
                "this": 5,
                "filter": 3,
                "size_equals": 2,
                "size_of": 2,
                "3": 1,
                "apply": 3,
                "update_color": 3,
                "B": 1,
                "4": 1,
                "R": 1,
                "G": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move objects of size 3 to the left of the grid, recolor the left 3x3 block to color B, the middle 3x3 block to color R, and the right 3x3 block to color G.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (size_equals 3 (size_of this)))\n        (apply\n            (move_node left)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter (and (not (color_equals (color_of this) X)) (and (column_equals (column_of this) 0) (column_equals (column_of this) 1) (column_equals (column_of this) 2))))\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter (and (not (color_equals (color_of this) X)) (and (column_equals (column_of this) 3) (column_equals (column_of this) 4) (column_equals (column_of this) 5))))\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter (and (not (color_equals (color_of this) X)) (and (column_equals (column_of this) 6) (column_equals (column_of this) 7) (column_equals (column_of this) 8))))\n        (apply\n            (update_color G)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 11 col 136\n\n) 0) (column_equals (column_of this) 1) (column_equals (column_of this) 2))))\n                                        ^\nExpected one of: \n\t* RPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 4,
                "vars": 4,
                "this": 17,
                "filter": 4,
                "size_equals": 1,
                "3": 2,
                "size_of": 1,
                "apply": 4,
                "move_node": 1,
                "left": 1,
                "and": 6,
                "not": 3,
                "color_equals": 3,
                "color_of": 3,
                "X": 3,
                "column_equals": 9,
                "column_of": 9,
                "0": 1,
                "1": 1,
                "2": 1,
                "update_color": 3,
                "B": 1,
                "4": 1,
                "5": 1,
                "R": 1,
                "6": 1,
                "7": 1,
                "8": 1,
                "G": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move the top rows 1-3 to B, the middle rows 5-7 to R, and the bottom rows 9-10 to G, while leaving the columns with color X unaffected.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) O)\n                (or\n                    (and\n                        (not (neighbor_of this this))\n                        (or\n                            (and (height_equals (height_of this) 1) (height_equals (height_of this) 2))\n                            (height_equals (height_of this) 3)\n                        )\n                    )\n                    (or\n                        (height_equals (height_of this) 5)\n                        (or\n                            (height_equals (height_of this) 6)\n                            (or\n                                (height_equals (height_of this) 7)\n                                (or\n                                    (height_equals (height_of this) 9)\n                                    (height_equals (height_of this) 10)\n                                )\n                            )\n                        )\n                    )\n                )\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) O)\n                (or\n                    (height_equals (height_of this) 5)\n                    (or\n                        (height_equals (height_of this) 6)\n                        (height_equals (height_of this) 7)\n                    )\n                )\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) O)\n                (or\n                    (height_equals (height_of this) 9)\n                    (height_equals (height_of this) 10)\n                )\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 3,
                "vars": 3,
                "this": 21,
                "filter": 3,
                "and": 5,
                "color_equals": 3,
                "color_of": 3,
                "O": 3,
                "or": 9,
                "not": 1,
                "neighbor_of": 1,
                "height_equals": 13,
                "height_of": 13,
                "1": 1,
                "2": 1,
                "3": 1,
                "5": 2,
                "6": 2,
                "7": 2,
                "9": 2,
                "10": 2,
                "apply": 3,
                "update_color": 3,
                "B": 1,
                "R": 1,
                "G": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of size 3 toward the X object they are neighbors of, and then recolor them to B if in the first row, R if in the middle row, and G if in the last row.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 3)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) X)\n                )\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 3)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) X)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 3)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) X)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n            (update_color G)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 3,
                "vars": 3,
                "this": 9,
                "other": 12,
                "filter": 3,
                "and": 6,
                "size_equals": 3,
                "size_of": 3,
                "3": 3,
                "neighbor_of": 3,
                "color_equals": 3,
                "color_of": 3,
                "X": 3,
                "apply": 3,
                "move_node": 1,
                "direction_of": 3,
                "update_color": 3,
                "B": 1,
                "move_node_max": 2,
                "R": 1,
                "G": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor the first vertical column of size 3 to color B, the second vertical column of size 3 to color R, and the third vertical column of size 3 to color G.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (size_equals (size_of this) 3)\n                (column_equals (column_of this) even)\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (size_equals (size_of this) 3)\n                (column_equals (column_of this) center)\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (size_equals (size_of this) 3)\n                (column_equals (column_of this) odd)\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 3,
                "vars": 3,
                "this": 9,
                "filter": 3,
                "and": 3,
                "size_equals": 3,
                "size_of": 3,
                "3": 3,
                "column_equals": 3,
                "column_of": 3,
                "even": 1,
                "apply": 3,
                "update_color": 3,
                "B": 1,
                "center": 1,
                "R": 1,
                "odd": 1,
                "G": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Change the color of all objects above and below the central horizontal black line and are neighbors with it. The objects above the line are changed to B while those below are changed to R, except in the last rows where they are changed to G.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) X)\n            )\n        )\n        (apply\n            (update_color (if (color_equals (column_of this) odd) B R))\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (and\n                    (color_equals (color_of other) X)\n                    (column_equals (column_of this) even)\n                )\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches 'i' in the current parser context, at line 11 col 28\n\n            (update_color (if (color_equals (column_of this) odd) B\n                           ^\nExpected one of: \n\t* COLOR_OF\n",
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 6,
                "other": 6,
                "filter": 2,
                "and": 3,
                "neighbor_of": 2,
                "color_equals": 3,
                "color_of": 2,
                "X": 2,
                "apply": 2,
                "update_color": 2,
                "if": 1,
                "column_of": 2,
                "odd": 1,
                "B": 1,
                "R": 1,
                "column_equals": 1,
                "even": 1,
                "G": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move objects of size 3 towards the object of the color X and then recolor them according to their position.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 3)\n                (neighbor_of this other)\n                (color_equals (color_of other) X)\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) O)\n                (color_equals (color_of other) X)\n                (neighbor_of this other)\n                (column_equals (column_of other) 4)\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) O)\n                (color_equals (color_of other) X)\n                (neighbor_of this other)\n                (column_equals (column_of other) 8)\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) O)\n                (color_equals (color_of other) X)\n                (neighbor_of this other)\n                (row_equals (row_of this) 1)\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 8 col 17\n\n                (color_equals (color_of other) X)\n                ^\nExpected one of: \n\t* RPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 4,
                "vars": 4,
                "this": 13,
                "other": 15,
                "filter": 4,
                "and": 4,
                "size_equals": 1,
                "size_of": 1,
                "3": 1,
                "neighbor_of": 4,
                "color_equals": 7,
                "color_of": 7,
                "X": 4,
                "apply": 4,
                "move_node_max": 1,
                "direction_of": 1,
                "O": 3,
                "column_equals": 2,
                "column_of": 2,
                "4": 1,
                "update_color": 3,
                "R": 1,
                "8": 1,
                "G": 1,
                "row_equals": 1,
                "row_of": 1,
                "1": 1,
                "B": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor the leftmost objects to B, the middle objects to R, and the rightmost objects to G, while maintaining their positions.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) O)\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this O))\n                (neighbor_of this other)\n                (column_equals (column_of other) 4)\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this O))\n                (neighbor_of this other)\n                (column_equals (column_of other) 9)\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches 'O' in the current parser context, at line 15 col 46\n\n           (color_equals (color_of this O))\n                                        ^\nExpected one of: \n\t* RPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 3,
                "vars": 3,
                "this": 8,
                "filter": 3,
                "color_equals": 3,
                "color_of": 3,
                "O": 3,
                "apply": 3,
                "update_color": 3,
                "B": 1,
                "other": 6,
                "and": 2,
                "neighbor_of": 2,
                "column_equals": 2,
                "column_of": 2,
                "4": 1,
                "R": 1,
                "9": 1,
                "G": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all objects that are left-aligned with the first object of color X, and closest to it, to different colors (B at top, R at center, G at bottom).",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (column_equals (column_of this) (column_of other))\n                (and\n                    (color_equals (color_of other) X)\n                    (neighbor_of this other)\n                )\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (column_equals (column_of this) 5)\n                (and\n                    (color_equals (color_of other) X)\n                    (neighbor_of this other)\n                )\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (column_equals (column_of this) 9)\n                (and\n                    (color_equals (color_of other) X)\n                    (neighbor_of this other)\n                )\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 3,
                "vars": 3,
                "this": 9,
                "other": 10,
                "filter": 3,
                "and": 6,
                "column_equals": 3,
                "column_of": 4,
                "color_equals": 3,
                "color_of": 3,
                "X": 3,
                "neighbor_of": 3,
                "apply": 3,
                "update_color": 3,
                "B": 1,
                "5": 1,
                "R": 1,
                "9": 1,
                "G": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor the first three rows to color B, the fourth, fifth and sixth rows to color R, and the last three rows to color G.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (and true (and true true)))\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and (color_equals (color_of this) O) (neighbor_of this other))\n        )\n        (apply\n            (move_node up)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter (and true (and true true)))\n        (apply\n            (update_color B)\n        )\n    )\n)\n",
            "can_parse": false,
            "parse_error_message": "No terminal matches 't' in the current parser context, at line 4 col 22\n\n        (filter (and true (and true true)))\n                     ^\nExpected one of: \n\t* LPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 3,
                "vars": 3,
                "this": 5,
                "filter": 3,
                "and": 5,
                "true": 6,
                "apply": 3,
                "update_color": 2,
                "B": 2,
                "other": 2,
                "color_equals": 1,
                "color_of": 1,
                "O": 1,
                "neighbor_of": 1,
                "move_node": 1,
                "up": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Change the color of the leftmost columns to B, recolor the middle columns to R, and change the rightmost columns to G.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 0)\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 1)\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 4)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 5)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 6)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 8)\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 9)\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 7,
                "vars": 7,
                "this": 14,
                "filter": 7,
                "column_equals": 7,
                "column_of": 7,
                "0": 1,
                "apply": 7,
                "update_color": 7,
                "B": 2,
                "1": 1,
                "4": 1,
                "R": 3,
                "5": 1,
                "6": 1,
                "8": 1,
                "G": 2,
                "9": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor the leftmost object of each row to color B, the middle object of each row to color R, and the rightmost object of each row to color G.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (and (column_equals (column_of this) 0) (not (color_equals (color_of this) X))))\n        (apply (update_color B))\n    )\n    (rule\n        (vars (this))\n        (filter (and (column_equals (column_of this) 4) (not (color_equals (color_of this) X))))\n        (apply (update_color R))\n    )\n    (rule\n        (vars (this))\n        (filter (and (column_equals (column_of this) 8) (not (color_equals (color_of this) X))))\n        (apply (update_color G))\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 3,
                "vars": 3,
                "this": 9,
                "filter": 3,
                "and": 3,
                "column_equals": 3,
                "column_of": 3,
                "0": 1,
                "not": 3,
                "color_equals": 3,
                "color_of": 3,
                "X": 3,
                "apply": 3,
                "update_color": 3,
                "B": 1,
                "4": 1,
                "R": 1,
                "8": 1,
                "G": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of size 3 upward and color them to B, then move all objects of size 4 to the right and color them to R, and finally move all objects of size 2 downward and color them to G.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 3)\n        )\n        (apply\n            (move_node up)\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 4)\n        )\n        (apply\n            (move_node right)\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 2)\n        )\n        (apply\n            (move_node down)\n            (update_color G)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 3,
                "vars": 3,
                "this": 6,
                "filter": 3,
                "size_equals": 3,
                "size_of": 3,
                "3": 1,
                "apply": 3,
                "move_node": 3,
                "up": 1,
                "update_color": 3,
                "B": 1,
                "4": 1,
                "right": 1,
                "R": 1,
                "2": 1,
                "down": 1,
                "G": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all the objects in the first column to B, recolor all the objects in the fifth row to R, and recolor all the objects in the last row to G.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 0)\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) max)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 9)\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 3,
                "vars": 3,
                "this": 6,
                "filter": 3,
                "column_equals": 2,
                "column_of": 2,
                "0": 1,
                "apply": 3,
                "update_color": 3,
                "B": 1,
                "size_equals": 1,
                "size_of": 1,
                "max": 1,
                "R": 1,
                "9": 1,
                "G": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all objects in the left column adjacent to a column of X, incrementally moving down the grid.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) X))\n                (column_equals (column_of this) (column_of other))\n                (color_equals (color_of other) X)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color R)\n            (move_node down_left)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color G)\n            (move_node down_left)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 8 col 17\n\n                (color_equals (color_of other) X)\n                ^\nExpected one of: \n\t* RPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 3,
                "vars": 3,
                "this": 6,
                "other": 4,
                "filter": 3,
                "and": 1,
                "not": 1,
                "color_equals": 2,
                "color_of": 2,
                "X": 2,
                "column_equals": 1,
                "column_of": 2,
                "neighbor_of": 1,
                "apply": 3,
                "update_color": 3,
                "B": 1,
                "R": 1,
                "move_node": 2,
                "down_left": 2,
                "G": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all objects to B, R, or G depending on their position relative to the rows they are in. First 3 rows to B, middle 3 rows to R, last 3 rows to G.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (or\n                (and\n                    (column_equals (column_of this) 2)\n                    (or\n                        (column_equals (column_of this) 0)\n                        (column_equals (column_of this) 1)\n                        (column_equals (column_of this) 2)\n                    )\n                )\n                (and\n                    (column_equals (column_of this) 4)\n                    (or\n                        (column_equals (column_of this) 3)\n                        (column_equals (column_of this) 4)\n                        (column_equals (column_of this) 5)\n                    )\n                )\n                (and\n                    (column_equals (column_of this) 6)\n                    (or\n                        (column_equals (column_of this) 8)\n                        (column_equals (column_of this) 9)\n                        (column_equals (column_of this) 10)\n                    )\n                )\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 11 col 25\n\n                        (column_equals (column_of this) 2)\n                        ^\nExpected one of: \n\t* RPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 13,
                "filter": 1,
                "or": 4,
                "and": 3,
                "column_equals": 12,
                "column_of": 12,
                "2": 2,
                "0": 1,
                "1": 1,
                "4": 2,
                "3": 1,
                "5": 1,
                "6": 1,
                "8": 1,
                "9": 1,
                "10": 1,
                "apply": 1,
                "update_color": 1,
                "B": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects adjacent to objects of color X to the leftmost neighboring X, and recolor them sequentially to B, R, G.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (neighbor_of this other)\n        )\n        (apply\n            (move_node_max left)\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of this) O)\n            )\n        )\n        (apply\n            (move_node_max left)\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of this) O)\n            )\n        )\n        (apply\n            (move_node_max left)\n            (update_color G)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 3,
                "vars": 3,
                "this": 8,
                "other": 6,
                "filter": 3,
                "neighbor_of": 3,
                "apply": 3,
                "move_node_max": 3,
                "left": 3,
                "update_color": 3,
                "B": 1,
                "and": 2,
                "color_equals": 2,
                "color_of": 2,
                "O": 2,
                "R": 1,
                "G": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all objects of size 3 to color B, objects of size 4 to color R, and objects of size 2 to color G.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 3)\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 4)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 2)\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 3,
                "vars": 3,
                "this": 6,
                "filter": 3,
                "size_equals": 3,
                "size_of": 3,
                "3": 1,
                "apply": 3,
                "update_color": 3,
                "B": 1,
                "4": 1,
                "R": 1,
                "2": 1,
                "G": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of size 3, left border color to B, center border color to R, and right border color to G.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter \n            (and \n                (size_equals (size_of this) 3)\n                (neighbor_of this other)\n            )\n        )\n        (apply \n            (move_node left)\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter \n            (and \n                (size_equals (size_of this) 4)\n                (neighbor_of this other)\n            )\n        )\n        (apply \n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter (size_equals (size_of this) 2))\n        (apply \n            (move_node right)\n            (update_color G)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 3,
                "vars": 3,
                "this": 8,
                "filter": 3,
                "and": 2,
                "size_equals": 3,
                "size_of": 3,
                "3": 1,
                "neighbor_of": 2,
                "other": 2,
                "apply": 3,
                "move_node": 2,
                "left": 1,
                "update_color": 3,
                "B": 1,
                "4": 1,
                "R": 1,
                "2": 1,
                "right": 1,
                "G": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor each common border object with a different color, for the first object top-left with B, middle with R, and bottom-right with G.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) O)\n                (neighbor_of this X)\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) O)\n                (neighbor_of this X)\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) O)\n                (neighbor_of this X)\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches 'X' in the current parser context, at line 7 col 35\n\n                (neighbor_of this X)\n                                  ^\nExpected one of: \n\t* VAR\n",
            "token_counts": {
                "do": 1,
                "rule": 3,
                "vars": 3,
                "this": 9,
                "filter": 3,
                "and": 3,
                "color_equals": 3,
                "color_of": 3,
                "O": 3,
                "neighbor_of": 3,
                "X": 3,
                "apply": 3,
                "update_color": 3,
                "B": 1,
                "R": 1,
                "G": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor the three objects located at the top-left corner to color B, the three objects in the middle to color R, and the three objects at the bottom-right corner to color G.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (and (color_equals (color_of this) O) (column_equals (column_of this) 0)))\n        (apply (update_color B))\n    )\n    (rule\n        (vars (this))\n        (filter (and (color_equals (color_of this) O) (column_equals (column_of this) 4)))\n        (apply (update_color R))\n    )\n    (rule\n        (vars (this))\n        (filter (and (color_equals (color_of this) O) (column_equals (column_of this) 8)))\n        (apply (update_color G))\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 3,
                "vars": 3,
                "this": 9,
                "filter": 3,
                "and": 3,
                "color_equals": 3,
                "color_of": 3,
                "O": 3,
                "column_equals": 3,
                "column_of": 3,
                "0": 1,
                "apply": 3,
                "update_color": 3,
                "B": 1,
                "4": 1,
                "R": 1,
                "8": 1,
                "G": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all objects to color B, R, or G based on their vertical position.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (not (color_equals (color_of this) X))\n                (column_equals (column_of this) 0)\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) X))\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) X)\n                )\n                (column_equals (column_of this) 4)\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) X))\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) X)\n                )\n                (column_equals (column_of this) 8)\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 23 col 17\n\n                (column_equals (column_of this) 4)\n                ^\nExpected one of: \n\t* RPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 3,
                "vars": 3,
                "this": 11,
                "filter": 3,
                "and": 5,
                "not": 3,
                "color_equals": 5,
                "color_of": 5,
                "X": 5,
                "column_equals": 3,
                "column_of": 3,
                "0": 1,
                "apply": 3,
                "update_color": 3,
                "B": 1,
                "other": 6,
                "neighbor_of": 2,
                "4": 1,
                "R": 1,
                "8": 1,
                "G": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color O toward the object of color X if they are neighbors of it, and recolor them based on their row position.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) O)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) X)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n            (update_color\n                (or\n                    (column_equals (column_of this) 0)\n                    (column_equals (column_of this) 2)\n                )\n            )\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches 'o' in the current parser context, at line 16 col 18\n\n                (or\n                 ^\nExpected one of: \n\t* COLOR_OF\n",
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 5,
                "other": 4,
                "filter": 1,
                "and": 2,
                "color_equals": 2,
                "color_of": 2,
                "O": 1,
                "neighbor_of": 1,
                "X": 1,
                "apply": 1,
                "move_node_max": 1,
                "direction_of": 1,
                "update_color": 1,
                "or": 1,
                "column_equals": 2,
                "column_of": 2,
                "0": 1,
                "2": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all objects that are left of an object of color X to B, middle ones to R, and right ones to G.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) X))\n                (neighbor_of this other)\n                (color_equals (color_of other) X)\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) X))\n                (neighbor_of this other)\n                (color_equals (color_of other) X)\n                (column_equals (column_of this) (column_of other))\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) X))\n                (neighbor_of this other)\n                (color_equals (color_of other) X)\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 8 col 17\n\n                (color_equals (color_of other) X)\n                ^\nExpected one of: \n\t* RPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 3,
                "vars": 3,
                "this": 10,
                "other": 10,
                "filter": 3,
                "and": 3,
                "not": 3,
                "color_equals": 6,
                "color_of": 6,
                "X": 6,
                "neighbor_of": 3,
                "apply": 3,
                "update_color": 3,
                "B": 1,
                "column_equals": 1,
                "column_of": 2,
                "R": 1,
                "G": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Extend blue objects towards bottom empty spaces, red objects towards right empty spaces and green objects towards bottom-right empty spaces.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (extend_node down false)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (extend_node right false)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) G)\n        )\n        (apply\n            (extend_node down_right false)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 3,
                "vars": 3,
                "this": 6,
                "filter": 3,
                "color_equals": 3,
                "color_of": 3,
                "B": 1,
                "apply": 3,
                "extend_node": 3,
                "down": 1,
                "false": 3,
                "R": 1,
                "right": 1,
                "G": 1,
                "down_right": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of size 3, one step up, and recolor to B. Move all objects of size 2, one step right, and recolor to R. Move all objects of size 1, one step down, and recolor to G.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 3)\n        )\n        (apply\n            (move_node up)\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 2)\n        )\n        (apply\n            (move_node right)\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 1)\n        )\n        (apply\n            (move_node down)\n            (update_color G)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 3,
                "vars": 3,
                "this": 6,
                "filter": 3,
                "size_equals": 3,
                "size_of": 3,
                "3": 1,
                "apply": 3,
                "move_node": 3,
                "up": 1,
                "update_color": 3,
                "B": 1,
                "2": 1,
                "right": 1,
                "R": 1,
                "1": 1,
                "down": 1,
                "G": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor the first row of objects except for X to B, the second row of objects except for X to R, and the last row of objects except for X to G.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter (and (color_equals (color_of this) O) (color_equals (color_of other) X) (neighbor_of this other)))\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter (and (color_equals (color_of this) O) (color_equals (color_of other) X) (neighbor_of this other) (size_equals (size_of other) 10)))\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter (and (color_equals (color_of this) O) (color_equals (color_of other) X) (neighbor_of this other) (color_equals (color_of (column_of this)) (color_of (size_of other)))))\n        (apply\n            (update_color G)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 4 col 89\n\ns) O) (color_equals (color_of other) X) (neighbor_of this other)))\n                                        ^\nExpected one of: \n\t* RPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 3,
                "vars": 3,
                "this": 10,
                "other": 11,
                "filter": 3,
                "and": 3,
                "color_equals": 7,
                "color_of": 8,
                "O": 3,
                "X": 3,
                "neighbor_of": 3,
                "apply": 3,
                "update_color": 3,
                "B": 1,
                "size_equals": 1,
                "size_of": 2,
                "10": 1,
                "R": 1,
                "column_of": 1,
                "G": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor the first and last rows of columns with X to color B, middle columns with X to color R, and last rows with X to color G.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) X)\n                (or\n                    (neighbor_of this other)\n                    (neighbor_of other this)\n                )\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) X)\n                (or\n                    (neighbor_of this other)\n                    (neighbor_of other this)\n                )\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) X)\n                (or\n                    (neighbor_of this other)\n                    (neighbor_of other this)\n                )\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 3,
                "vars": 3,
                "this": 12,
                "other": 9,
                "filter": 3,
                "and": 3,
                "color_equals": 3,
                "color_of": 3,
                "X": 3,
                "or": 3,
                "neighbor_of": 6,
                "apply": 3,
                "update_color": 3,
                "B": 1,
                "R": 1,
                "G": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all objects in the left third of the grid to B, objects in the middle third to R, and objects in the right third to G.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (or\n                    (column_equals (column_of this) 0)\n                    (or\n                        (column_equals (column_of this) 1)\n                        (column_equals (column_of this) 2)\n                    )\n                )\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (or\n                    (column_equals (column_of this) 3)\n                    (or\n                        (column_equals (column_of this) 4)\n                        (column_equals (column_of this) 5)\n                    )\n                )\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (or\n                    (column_equals (column_of this) 6)\n                    (or\n                        (column_equals (column_of this) 7)\n                        (column_equals (column_of this) 8)\n                    )\n                )\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches ')' in the current parser context, at line 13 col 13\n\n            )\n            ^\nExpected one of: \n\t* LPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 3,
                "vars": 3,
                "this": 12,
                "filter": 3,
                "and": 3,
                "or": 6,
                "column_equals": 9,
                "column_of": 9,
                "0": 1,
                "1": 1,
                "2": 1,
                "apply": 3,
                "update_color": 3,
                "B": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "R": 1,
                "6": 1,
                "7": 1,
                "8": 1,
                "G": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor the first three cells in the first column to B, the fifth row to the seventh row in the middle column to R, and the last three cells in the last column to G.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (column_equals (column_of this) 0)\n                (or\n                    (and\n                        (height_equals (height_of this) 1)\n                        (or\n                            (or\n                                (column_equals (column_of this) 0)\n                                (and\n                                    (height_equals (height_of this) 6)\n                                    (or\n                                        (column_equals (column_of this) 0)\n                                        (column_equals (column_of this) 9)\n                                    )\n                                )\n                            )\n                            (or\n                                (column_equals (column_of this 9))\n                            )\n                        )\n                    )\n                )\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (column_equals (column_of this) 4)\n                (height_equals (height_of this) 6)\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 9)\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '9' in the current parser context, at line 22 col 64\n\n         (column_equals (column_of this 9))\n                                        ^\nExpected one of: \n\t* RPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 3,
                "vars": 3,
                "this": 13,
                "filter": 3,
                "and": 4,
                "column_equals": 7,
                "column_of": 7,
                "0": 3,
                "or": 5,
                "height_equals": 3,
                "height_of": 3,
                "1": 1,
                "6": 2,
                "9": 3,
                "apply": 3,
                "update_color": 3,
                "B": 1,
                "4": 1,
                "R": 1,
                "G": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all objects located at the beginning of the columns, between columns of Xs, to different colors.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 1)\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (column_equals (column_of this) 5)\n                (not (color_equals (color_of this) X))\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (column_equals (column_of this) 10)\n                (not (color_equals (color_of this) X))\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 3,
                "vars": 3,
                "this": 8,
                "filter": 3,
                "column_equals": 3,
                "column_of": 3,
                "1": 1,
                "apply": 3,
                "update_color": 3,
                "B": 1,
                "and": 2,
                "5": 1,
                "not": 2,
                "color_equals": 2,
                "color_of": 2,
                "X": 2,
                "R": 1,
                "10": 1,
                "G": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects in the left column to the left-most empty cells and recolor the rows with the following colors: B for the first three rows, R for the middle three rows, and G for the last three rows.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (column_equals (column_of this) 0))\n        (apply (move_node left))\n    )\n    (rule\n        (vars (this))\n        (filter (size_equals (size_of this) 1))\n        (apply (update_color (color_of this)))\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 5,
                "filter": 2,
                "column_equals": 1,
                "column_of": 1,
                "0": 1,
                "apply": 2,
                "move_node": 1,
                "left": 1,
                "size_equals": 1,
                "size_of": 1,
                "1": 1,
                "update_color": 1,
                "color_of": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color O right next to objects of color X, and recolor them based on their row position.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) O)\n                (color_equals (color_of other) X)\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) O)\n                (column_equals (column_of this) 2)\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) O)\n                (column_equals (column_of this) 5)\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) O)\n                (column_equals (column_of this) 8)\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 4,
                "vars": 4,
                "this": 11,
                "other": 3,
                "filter": 4,
                "and": 4,
                "color_equals": 5,
                "color_of": 5,
                "O": 4,
                "X": 1,
                "apply": 4,
                "move_node_max": 1,
                "direction_of": 1,
                "column_equals": 3,
                "column_of": 3,
                "2": 1,
                "update_color": 3,
                "B": 1,
                "5": 1,
                "R": 1,
                "8": 1,
                "G": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor the objects in the left column as B, the objects in the central column as R, and the objects in the right column as G.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 1)\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 4)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 7)\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 3,
                "vars": 3,
                "this": 6,
                "filter": 3,
                "column_equals": 3,
                "column_of": 3,
                "1": 1,
                "apply": 3,
                "update_color": 3,
                "B": 1,
                "4": 1,
                "R": 1,
                "7": 1,
                "G": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Change the colors of the objects in the left side, then the colors of the objects in the right side, and finally, the colors of the objects in the bottom part.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) X)\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) X)\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) X)\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 3,
                "vars": 3,
                "this": 6,
                "filter": 3,
                "and": 3,
                "neighbor_of": 3,
                "other": 6,
                "color_equals": 3,
                "color_of": 3,
                "X": 3,
                "apply": 3,
                "update_color": 3,
                "B": 1,
                "R": 1,
                "G": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor objects located above and below the rows of X objects to B, Recolor objects located next to the rows of X objects to R or G",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (not (color_equals (color_of this) X))\n                (height_equals (height_of this) min)\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (and\n                    (not (color_equals (color_of this) X))\n                    (color_equals (color_of other) X)\n                )\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (and\n                    (not (color_equals (color_of this) X))\n                    (color_equals (color_of other) X)\n                )\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 3,
                "vars": 3,
                "this": 9,
                "filter": 3,
                "and": 5,
                "not": 3,
                "color_equals": 5,
                "color_of": 5,
                "X": 5,
                "height_equals": 1,
                "height_of": 1,
                "min": 1,
                "apply": 3,
                "update_color": 3,
                "B": 1,
                "other": 6,
                "neighbor_of": 2,
                "R": 1,
                "G": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor the leftmost neighbors of X in the top region and bottom region to B, and in the middle region to R and G.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) X)\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color G)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 3,
                "vars": 3,
                "this": 4,
                "other": 3,
                "filter": 3,
                "and": 1,
                "neighbor_of": 1,
                "color_equals": 1,
                "color_of": 1,
                "X": 1,
                "apply": 3,
                "update_color": 3,
                "B": 1,
                "R": 1,
                "G": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor the left neighbor of each vertical set of Xs to B, the middle neighbor to R, and the right neighbor to G.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) X)\n                (and\n                    (neighbor_of this other)\n                    (column_equals (column_of this) (- (column_of other) 1))\n                )\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) X)\n                (and\n                    (neighbor_of this other)\n                    (column_equals (column_of this) (column_of other))\n                )\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) X)\n                (and\n                    (neighbor_of this other)\n                    (column_equals (column_of this) (+ (column_of other) 1))\n                )\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 8 col 17\n\n                (and\n                ^\nExpected one of: \n\t* RPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 3,
                "vars": 3,
                "this": 12,
                "other": 15,
                "filter": 3,
                "and": 6,
                "neighbor_of": 6,
                "color_equals": 3,
                "color_of": 3,
                "X": 3,
                "column_equals": 3,
                "column_of": 6,
                "-": 1,
                "1": 2,
                "apply": 3,
                "update_color": 3,
                "B": 1,
                "R": 1,
                "+": 1,
                "G": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Change the top-left group of 3 objects near the diagonal of X's to color B, change the middle horizontal group to color R, and change the bottom-right group to color G.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (height_equals (height_of other) max)\n                (width_equals (width_of other) 1)\n                (neighbor_of this other)\n                (column_equals (column_of other) 2)\n                (not (color_equals (color_of other) X))\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (width_equals (width_of other) max)\n                (height_equals (height_of other) 1)\n                (neighbor_of this other)\n                (or\n                    (column_equals (column_of other) 4)\n                    (column_equals (column_of other) 6)\n                )\n                (not (color_equals (color_of other) X))\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (height_equals (height_of other) max)\n                (width_equals (width_of other) 1)\n                (neighbor_of this other)\n                (or\n                    (column_equals (column_of other) 8)\n                    (column_equals (column_of other) 9)\n                )\n                (not (color_equals (color_of other) X))\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 8 col 17\n\n                (neighbor_of this other)\n                ^\nExpected one of: \n\t* RPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 3,
                "vars": 3,
                "this": 6,
                "other": 20,
                "filter": 3,
                "and": 3,
                "height_equals": 3,
                "height_of": 3,
                "max": 3,
                "width_equals": 3,
                "width_of": 3,
                "1": 3,
                "neighbor_of": 3,
                "column_equals": 5,
                "column_of": 5,
                "2": 1,
                "not": 3,
                "color_equals": 3,
                "color_of": 3,
                "X": 3,
                "apply": 3,
                "update_color": 3,
                "B": 1,
                "or": 2,
                "4": 1,
                "6": 1,
                "R": 1,
                "8": 1,
                "9": 1,
                "G": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor objects of size 3 to B, objects of size 4 to R, and objects of size 2 to G.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 3)\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 4)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 2)\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 3,
                "vars": 3,
                "this": 6,
                "filter": 3,
                "size_equals": 3,
                "size_of": 3,
                "3": 1,
                "apply": 3,
                "update_color": 3,
                "B": 1,
                "4": 1,
                "R": 1,
                "2": 1,
                "G": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color different than X into the grid towards the center, recolor them to color B or R or G in steps nested between the X objects.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) X))\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) X)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) X))\n                (not (color_equals (color_of this) B))\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) B)\n                )\n            )\n        )\n        (apply\n            (move_node this)\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) X))\n                (not (color_equals (color_of this) B))\n                (not (color_equals (color_of this) R))\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) R)\n                )\n            )\n        )\n        (apply\n            (move_node this)\n            (update_color G)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 24 col 17\n\n                (and\n                ^\nExpected one of: \n\t* RPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 3,
                "vars": 3,
                "this": 14,
                "other": 10,
                "filter": 3,
                "and": 6,
                "not": 6,
                "color_equals": 9,
                "color_of": 9,
                "X": 4,
                "neighbor_of": 3,
                "apply": 3,
                "move_node_max": 1,
                "direction_of": 1,
                "update_color": 3,
                "B": 4,
                "move_node": 2,
                "R": 3,
                "G": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor the top three cells adjacent to X objects to B, then recolor the middle three cells adjacent to X objects to R, and finally recolor the bottom three cells adjacent to X objects to G.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) X)\n                )\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) X)\n                )\n                (and\n                    (color_equals (color_of (this, Y - 1)) B)\n                    (color_equals (color_of (this, Y - 2)) B)\n                )\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) X)\n                )\n                (and\n                    (color_equals (color_of (this, Y - 1)) R)\n                    (color_equals (color_of (this, Y - 2)) R)\n                )\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 26 col 17\n\n                (and\n                ^\nExpected one of: \n\t* RPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 3,
                "vars": 3,
                "this": 9,
                "other": 9,
                "filter": 3,
                "and": 8,
                "size_equals": 3,
                "size_of": 3,
                "1": 5,
                "neighbor_of": 3,
                "color_equals": 7,
                "color_of": 7,
                "X": 3,
                "apply": 3,
                "update_color": 3,
                "B": 3,
                "this,": 4,
                "Y": 4,
                "-": 4,
                "2": 2,
                "R": 3,
                "G": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor the first column to B, the middle column to R, and the last column to G, if these columns are adjacent to columns of color X.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (column_equals (column_of this) 0)\n                (column_equals (column_of other) 1)\n                (color_equals (color_of other) X)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (column_equals (column_of this) 4)\n                (column_equals (column_of other) 3)\n                (color_equals (color_of other) X)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (column_equals (column_of this) 9)\n                (column_equals (column_of other) 8)\n                (color_equals (color_of other) X)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 8 col 17\n\n                (color_equals (color_of other) X)\n                ^\nExpected one of: \n\t* RPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 3,
                "vars": 3,
                "this": 9,
                "other": 12,
                "filter": 3,
                "and": 3,
                "column_equals": 6,
                "column_of": 6,
                "0": 1,
                "1": 1,
                "color_equals": 3,
                "color_of": 3,
                "X": 3,
                "neighbor_of": 3,
                "apply": 3,
                "update_color": 3,
                "B": 1,
                "4": 1,
                "3": 1,
                "R": 1,
                "9": 1,
                "8": 1,
                "G": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of size 3 toward the group of X objects and recolor them based on their rows.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 3)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) X)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (size_equals (size_of this) 3)\n                (column_equals (column_of this) 0)\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (size_equals (size_of this) 3)\n                (column_equals (column_of this) 4)\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (size_equals (size_of this) 3)\n                (column_equals (column_of this) 8)\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 4,
                "vars": 4,
                "this": 12,
                "other": 4,
                "filter": 4,
                "and": 5,
                "size_equals": 4,
                "size_of": 4,
                "3": 4,
                "neighbor_of": 1,
                "color_equals": 1,
                "color_of": 1,
                "X": 1,
                "apply": 4,
                "move_node_max": 1,
                "direction_of": 1,
                "column_equals": 3,
                "column_of": 3,
                "0": 1,
                "update_color": 3,
                "B": 1,
                "4": 1,
                "R": 1,
                "8": 1,
                "G": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move objects of size 3 completely toward the right, recolor the neighbors to X of previous objects to color R, and recolor the last row neighbors to X with no neighbors ahead to G.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter (and (size_equals (size_of this) 3) (and (neighbor_of this other) (color_equals (color_of other) X))))\n        (apply (move_node right)))\n    (rule\n        (vars (this other))\n        (filter (and (neighbor_of this other) (color_equals (color_of other) X)))\n        (apply (update_color R)))\n    (rule\n        (vars (this other))\n        (filter (and (neighbor_of this other) (color_equals (color_of other) X))) \n        (apply (update_color G))))",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 3,
                "vars": 3,
                "this": 7,
                "other": 9,
                "filter": 3,
                "and": 4,
                "size_equals": 1,
                "size_of": 1,
                "3": 1,
                "neighbor_of": 3,
                "color_equals": 3,
                "color_of": 3,
                "X": 3,
                "apply": 3,
                "move_node": 1,
                "right": 1,
                "update_color": 2,
                "R": 1,
                "G": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all objects adjacent to the object of color X, each to a different color for objects in the three different rows (top, middle, bottom).",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of other) X)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of other) X)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of other) X)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 3,
                "vars": 3,
                "this": 6,
                "other": 9,
                "filter": 3,
                "and": 3,
                "color_equals": 3,
                "color_of": 3,
                "X": 3,
                "neighbor_of": 3,
                "apply": 3,
                "update_color": 3,
                "B": 1,
                "R": 1,
                "G": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all O objects toward X objects if they are neighbors of them, and recolor the moved objects to B when in the top, R when in the middle, and G when in the bottom.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) O)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) X)\n                )\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) O)\n                (column_equals (column_of this) even)\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) odd)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)\n}",
            "can_parse": false,
            "parse_error_message": "No terminal matches '}' in the current parser context, at line 48 col 1\n\n}\n^\n",
            "token_counts": {
                "do": 1,
                "rule": 4,
                "vars": 4,
                "this": 9,
                "other": 4,
                "filter": 4,
                "and": 3,
                "color_equals": 3,
                "color_of": 3,
                "O": 2,
                "neighbor_of": 1,
                "X": 1,
                "apply": 4,
                "move_node": 1,
                "direction_of": 1,
                "column_equals": 2,
                "column_of": 2,
                "even": 1,
                "update_color": 3,
                "B": 1,
                "odd": 1,
                "R": 1,
                "G": 1,
                "}": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Extend objects of color O and apply specific colors based on their positions on the grid.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) O)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (extend_node (direction_of other) false)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 0)\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 4)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 8)\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 4,
                "vars": 4,
                "this": 9,
                "other": 3,
                "filter": 4,
                "and": 1,
                "color_equals": 1,
                "color_of": 1,
                "O": 1,
                "neighbor_of": 1,
                "apply": 4,
                "extend_node": 1,
                "direction_of": 1,
                "false": 1,
                "column_equals": 3,
                "column_of": 3,
                "0": 1,
                "update_color": 3,
                "B": 1,
                "4": 1,
                "R": 1,
                "8": 1,
                "G": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Change the color of objects in each row based on their position: change the color to B in rows with index less than 3, to R in rows from 4 to 6, and to G in rows with index greater than 7.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (not (color_equals (color_of this) X))\n                (or\n                    (column_equals (column_of this) 1)\n                    (column_equals (column_of this) 2)\n                    (column_equals (column_of this) 3)\n                )\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (not (color_equals (color_of this) X))\n                (or\n                    (column_equals (column_of this) 4)\n                    (column_equals (column_of this) 5)\n                    (column_equals (column_of this) 6)\n                )\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (not (color_equals (color_of this) X))\n                (or\n                    (column_equals (column_of this) 7)\n                    (column_equals (column_of this) 8)\n                    (column_equals (column_of this) 9)\n                )\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 10 col 21\n\n                    (column_equals (column_of this) 3)\n                    ^\nExpected one of: \n\t* RPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 3,
                "vars": 3,
                "this": 15,
                "filter": 3,
                "and": 3,
                "not": 3,
                "color_equals": 3,
                "color_of": 3,
                "X": 3,
                "or": 3,
                "column_equals": 9,
                "column_of": 9,
                "1": 1,
                "2": 1,
                "3": 1,
                "apply": 3,
                "update_color": 3,
                "B": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "R": 1,
                "7": 1,
                "8": 1,
                "9": 1,
                "G": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor the first three rows to color B, the middle three rows to color R and the last three rows to color G, except for the objects with color X",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (not (color_equals (color_of this) X))\n                (or\n                    (height_equals (height_of this) 0)\n                    (height_equals (height_of this) 1)\n                    (height_equals (height_of this) 2)\n                )\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (not (color_equals (color_of this) X))\n                (or\n                    (height_equals (height_of this) 4)\n                    (height_equals (height_of this) 5)\n                    (height_equals (height_of this) 6)\n                )\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (not (color_equals (color_of this) X))\n                (or\n                    (height_equals (height_of this) 8)\n                    (height_equals (height_of this) 9)\n                    (height_equals (height_of this) 10)\n                )\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 10 col 21\n\n                    (height_equals (height_of this) 2)\n                    ^\nExpected one of: \n\t* RPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 3,
                "vars": 3,
                "this": 15,
                "filter": 3,
                "and": 3,
                "not": 3,
                "color_equals": 3,
                "color_of": 3,
                "X": 3,
                "or": 3,
                "height_equals": 9,
                "height_of": 9,
                "0": 1,
                "1": 1,
                "2": 1,
                "apply": 3,
                "update_color": 3,
                "B": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "R": 1,
                "8": 1,
                "9": 1,
                "10": 1,
                "G": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all objects lying between horizontal lines of X, following this order from top to bottom: first with B, then with R, and finally with G.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (size_equals (size_of this) even)\n                (column_equals (column_of this) even)\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (size_equals (size_of this) odd)\n                (column_equals (column_of this) odd)\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (size_equals (size_of this) max)\n                (column_equals (column_of this) odd)\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 3,
                "vars": 3,
                "this": 9,
                "filter": 3,
                "and": 3,
                "size_equals": 3,
                "size_of": 3,
                "even": 2,
                "column_equals": 3,
                "column_of": 3,
                "apply": 3,
                "update_color": 3,
                "B": 1,
                "odd": 3,
                "R": 1,
                "max": 1,
                "G": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Update color of objects adjacent to the vertical lines of color X",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and \n                (neighbor_of this other) \n                (color_equals (color_of other) X)\n            )\n        )\n        (apply\n            (update_color (color_of other))\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "other": 4,
                "filter": 1,
                "and": 1,
                "neighbor_of": 1,
                "color_equals": 1,
                "color_of": 2,
                "X": 1,
                "apply": 1,
                "update_color": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor objects of size 3 based on their vertical positions. Top ones blue, middle ones red, and bottom ones green.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (size_equals (size_of this) 3)\n                (column_equals (column_of this) 0)\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (size_equals (size_of this) 3)\n                (column_equals (column_of this) 4)\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (size_equals (size_of this) 3)\n                (column_equals (column_of this) 8)\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 3,
                "vars": 3,
                "this": 9,
                "filter": 3,
                "and": 3,
                "size_equals": 3,
                "size_of": 3,
                "3": 3,
                "column_equals": 3,
                "column_of": 3,
                "0": 1,
                "apply": 3,
                "update_color": 3,
                "B": 1,
                "4": 1,
                "R": 1,
                "8": 1,
                "G": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of size 3 one step up, and then recolor them to B, G, or R based on their position.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (neighbor_of this other)\n        )\n        (apply\n            (move_node up)\n            (update_color B)\n            (update_color R)\n            (update_color G)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "other": 2,
                "filter": 1,
                "neighbor_of": 1,
                "apply": 1,
                "move_node": 1,
                "up": 1,
                "update_color": 3,
                "B": 1,
                "R": 1,
                "G": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor one column of objects of size 3 to color B, one row of objects of size 3 to color R, and one column of objects of size 2 to color G.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (size_equals (size_of this) 3)\n                (column_equals (column_of this) center)\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (size_equals (size_of this) 3)\n                (neighbor_of this this)\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (size_equals (size_of this) 2)\n                (column_equals (column_of this) max)\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches 'm' in the current parser context, at line 31 col 49\n\n        (column_equals (column_of this) max)\n                                        ^\nExpected one of: \n\t* LPAR\n\t* COLUMN\n",
            "token_counts": {
                "do": 1,
                "rule": 3,
                "vars": 3,
                "this": 10,
                "filter": 3,
                "and": 3,
                "size_equals": 3,
                "size_of": 3,
                "3": 2,
                "column_equals": 2,
                "column_of": 2,
                "center": 1,
                "apply": 3,
                "update_color": 3,
                "B": 1,
                "neighbor_of": 1,
                "R": 1,
                "2": 1,
                "max": 1,
                "G": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects in the top third one step to the left and color B, move all objects in the middle third one step to the right and color R, and move all objects in the bottom third one step down and color G.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (height_equals (height_of this) 3)\n        )\n        (apply\n            (move_node left)\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (height_equals (height_of this) 3)\n                (not (height_equals (height_of this) 3))\n            )\n        )\n        (apply\n            (move_node right)\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (height_equals (height_of this) 3)\n            (height_equals (height_of this) 3)\n        )\n        (apply\n            (move_node down)\n            (update_color G)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 29 col 13\n\n            (height_equals (height_of this) 3)\n            ^\nExpected one of: \n\t* RPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 3,
                "vars": 3,
                "this": 8,
                "filter": 3,
                "height_equals": 5,
                "height_of": 5,
                "3": 5,
                "apply": 3,
                "move_node": 3,
                "left": 1,
                "update_color": 3,
                "B": 1,
                "and": 1,
                "not": 1,
                "right": 1,
                "R": 1,
                "down": 1,
                "G": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all objects of size 3 to color B, all objects of size 4 to color R, and all objects of size 2 to color G.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 3)\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 4)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 2)\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 3,
                "vars": 3,
                "this": 6,
                "filter": 3,
                "size_equals": 3,
                "size_of": 3,
                "3": 1,
                "apply": 3,
                "update_color": 3,
                "B": 1,
                "4": 1,
                "R": 1,
                "2": 1,
                "G": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color different than X, toward the object of color X, if they are in the same column, and then recolor them.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) X))\n                (and\n                    (column_equals (column_of this) (column_of other))\n                    (color_equals (color_of other) X)\n                )\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n            (update_color (color_of this))\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 4,
                "other": 4,
                "filter": 1,
                "and": 2,
                "not": 1,
                "color_equals": 2,
                "color_of": 3,
                "X": 2,
                "column_equals": 1,
                "column_of": 2,
                "apply": 1,
                "move_node": 1,
                "direction_of": 1,
                "update_color": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color O, which are neighbors of X, to the top, middle, and bottom areas respectively, then recolor them to B, R, and G.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) O)\n                (neighbor_of this other)\n                (color_equals (color_of other) X)\n            )\n        )\n        (apply\n            (move_node up)\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) O)\n                (neighbor_of this other)\n                (color_equals (color_of other) X)\n            )\n        )\n        (apply\n            (move_node left)\n            (move_node right)\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) O)\n                (neighbor_of this other)\n                (color_equals (color_of other) X)\n            )\n        )\n        (apply\n            (move_node down)\n            (update_color G)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 8 col 17\n\n                (color_equals (color_of other) X)\n                ^\nExpected one of: \n\t* RPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 3,
                "vars": 3,
                "this": 9,
                "other": 9,
                "filter": 3,
                "and": 3,
                "color_equals": 6,
                "color_of": 6,
                "O": 3,
                "neighbor_of": 3,
                "X": 3,
                "apply": 3,
                "move_node": 4,
                "up": 1,
                "update_color": 3,
                "B": 1,
                "left": 1,
                "right": 1,
                "R": 1,
                "down": 1,
                "G": 1
            }
        }
    ],
    "task_id": "941d9a10"
}