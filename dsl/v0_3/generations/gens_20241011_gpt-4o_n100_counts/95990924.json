{
    "model": "gpt-4o-2024-05-13",
    "usage": {
        "completion_tokens": 16607,
        "prompt_tokens": 6034,
        "total_tokens": 22641,
        "prompt_tokens_details": {
            "cached_tokens": 0
        },
        "completion_tokens_details": {
            "reasoning_tokens": 0
        }
    },
    "request_time": 12.765925645828247,
    "n_requested": 100,
    "prompt_messages": [
        {
            "role": "system",
            "content": "You are an assistant chatbot with human-like perception, reasoning and learning capabilities.\nYou can solve tasks concisely, efficiently, and moreover, correctly.\nLet's engage in perception- and logic-based tasks.\nYou only output source code.\nNo explanations or any other text.\nOnly code."
        },
        {
            "role": "user",
            "content": "You are an efficient assistant for logical reasoning and code generation.\nYou will help me solve a visual perception and reasoning task.\nI will first provide you with the definition of a Domain Specific Language you will use for writing a solution for the task.\nI will then present you with the description of the task that you will be tested in.\nYou will then respond the queries I make regarding the solution of the task.\n\n\nThis is the definition of the DSL you will use to solve the task.\nIt is given as a context-free grammar in the EBNF format used by the Lark parser generator, with some informative comments about the semantics.\nYou will return a string that is parseable by the `program` non-terminal of the grammar.\n\n```\nlibrary: \"(\" program* \")\"\n\n// Rules are executed one after another, in the order they appear.\n// There could be no rules, in which case the program does nothing.\nprogram: \"(\" \"do\" rule* \")\"\n\n// First, it declares the variables that will be used in the filter and transform expressions.\n// Second, it defines a filter expression that an object must satisfy in order to be transformed.\n// Then, it defines a list of transforms that will be applied objects that satisfy the filter expression.\nrule: \"(\" \"rule\" decl filter xform_list \")\"\n\n// The `vars` declaration specifies the names of the variables that will be used in the filter and transform expressions.\n// The `this` variable is always declared, and it refers to the object that is being transformed.\n// There could also be an additional optional variable `other` that refers to another object in the grid,\n// which is not being transformed, but is used in the filter expression.\ndecl: \"(\" \"vars\" \"(\" VAR_THIS VAR_OTHER? \")\" \")\"\n\n// A filter is a predicate over the objects in the grid.\n// If no filter is given, then all the objects are selected.\nfilter: \"(\" \"filter\" filter_expr? \")\"\n\n// It can be a primitive filter operation, or a boolean expression using the `and`, `or`, and `not` connectives.\n// IMPORTANT: The `and` and `or` connectives are strictly binary, so to take the conjunction or disjunction \n// of more than two expressions, the binary connectives must be nested.\n// AGAIN, the `and` and `or` connectives are not variadic, so the following is not allowed:\n// (and true true false)\n// Instead, the following must be used:\n// (and true (and true false))\n// The `not` connective is unary as expected.\n// The objects that are transformed are the ones that satisfy the filter expression.\nfilter_expr: filter_prim\n           | \"(\" OP_AND filter_expr filter_expr \")\"   \n           | \"(\" OP_OR filter_expr filter_expr \")\"\n           | \"(\" OP_NOT filter_expr \")\"\n\nfilter_prim: \"(\" COLOR_EQ fcolor_expr fcolor_expr \")\"           \n           | \"(\" SIZE_EQ size_expr size_expr \")\"                \n           | \"(\" HEIGHT_EQ height_expr height_expr \")\"          \n           | \"(\" WIDTH_EQ width_expr width_expr \")\"             \n           | \"(\" DEGREE_EQ degree_expr degree_expr \")\"          \n           | \"(\" SHAPE_EQ shape_expr shape_expr \")\"             \n           | \"(\" COLUMN_EQ column_expr column_expr \")\"         \n           | \"(\" NEIGHBOR_OF VAR VAR \")\"      // true if the two objects are neighbors\n\n\n// Transforms are applied one after another, in the order they appear.\nxform_list: \"(\" \"apply\" xform+ \")\"\n\n// A single transform is applied to all the objects that are bound to the `this` variable. \n// The transform is applied to each such object independently and simultaneously.\nxform:     \"(\" TR_UPDATE_COLOR color_expr \")\"                          // change this object color to the given color \n         | \"(\" TR_MOVE_NODE direction_expr \")\"                         // move this object in the given direction\n         | \"(\" TR_EXTEND_NODE direction_expr OVERLAP \")\"               // extend (move while leaving a trail) this object in the given direction\n                                                                  // if overlap is false, then the object is extended until it hits another object,\n                                                                  // otherwise it is extended until the edge of the grid.\n         | \"(\" TR_MOVE_NODE_MAX direction_expr \")\"                     // move this object until it hits another object, in the given direction\n         | \"(\" TR_ROTATE_NODE ROT_ANGLE \")\"                       // rotate this object by the given angle\n         | \"(\" TR_ADD_BORDER color_expr \")\"                            // color this exterior pixels of the object with the given color\n         | \"(\" TR_FILL_RECTANGLE color_expr OVERLAP \")\"                // color this interior of a hollow rectangle with the given color\n         | \"(\" TR_HOLLOW_RECTANGLE color_expr \")\"                      // color this interior of a solid rectangle with the given color\n         | \"(\" TR_MIRROR mirror_expr \")\"\n         | \"(\" TR_FLIP SYMMETRY_AXIS \")\"                          // flip this object with respect to the given axis\n         | \"(\" TR_INSERT OBJECT_ID img_pts_expr RELATIVE_POSITION \")\" // insert a copy of this object at the position of the given object\n         | \"(\" TR_NOOP \")\"                                        // do nothing\n\nfcolor_expr: FCOLOR\n           | \"(\" COLOR_OF VAR \")\"\n\ncolor_expr: COLOR\n          | \"(\" COLOR_OF VAR \")\"\n\nsize_expr: SIZE\n         | \"(\" SIZE_OF VAR \")\"\n\nheight_expr: HEIGHT\n           | \"(\" HEIGHT_OF VAR \")\"\n\nwidth_expr: WIDTH\n          | \"(\" WIDTH_OF VAR \")\"\n\ndegree_expr: DEGREE\n           | \"(\" DEGREE_OF VAR \")\" \n\nshape_expr: SHAPE\n          | \"(\" SHAPE_OF VAR \")\"\n\ncolumn_expr: COLUMN\n           | \"(\" COLUMN_OF VAR \")\"\n\ndirection_expr: DIRECTION\n              | \"(\" DIRECTION_OF VAR \")\"\n\nimg_pts_expr: IMAGE_POINTS\n            | \"(\" IMAGE_POINTS_OF VAR \")\"\n\nmirror_expr: \"(\" MIRROR_AXIS_OF VAR \")\"\n\nOBJECT_ID: /[0-9]+/\nFCOLOR: \"O\" // black\n      | \"B\" // blue\n      | \"R\" // red\n      | \"G\" // green\n      | \"Y\" // yellow\n      | \"X\" // grey\n      | \"F\" // fuchsia\n      | \"A\" // orange\n      | \"C\" // cyan  \n      | \"W\" // brown\n\nSIZE: \"min\" | \"max\" | \"even\" | \"odd\" | /[0-9]+/  // size of objects\nDEGREE: \"min\" | \"max\" | \"even\" | \"odd\" | /[0-9]+/  // degree of objects\nHEIGHT: \"min\" | \"max\" | \"even\" | \"odd\" | /[0-9]+/  // height of objects\nWIDTH: \"min\" | \"max\" | \"even\" | \"odd\" | /[0-9]+/  // width of objects\nCOLUMN: \"center\" | \"even\" | \"odd\" | /[0-9]+/  // column of objects\nSHAPE: \"square\" | \"enclosed\"  // shape of objects\n\nDIRECTION: \"up\"\n         | \"down\"\n         | \"left\"\n         | \"right\"\n         | \"up_left\"\n         | \"up_right\"\n         | \"down_left\"\n         | \"down_right\"\n\nSYMMETRY_AXIS: \"vertical\" | \"horizontal\" | \"diagonal_left\" | \"diagonal_right\"\n\n// The angle of clockwise rotation, in degrees.\nROT_ANGLE: \"0\" \n         | \"90\" \n         | \"180\" \n         | \"270\"\n\nCOLOR: \"O\" // black\n      | \"B\" // blue\n      | \"R\" // red\n      | \"G\" // green\n      | \"Y\" // yellow\n      | \"X\" // grey\n      | \"F\" // fuchsia\n      | \"A\" // orange\n      | \"C\" // cyan  \n      | \"W\" // brown\n\nOVERLAP: BOOL\n\nBOOL: \"true\" | \"false\"\n\nIMAGE_POINTS: \"top\" | \"bottom\" | \"left\" | \"right\" | \"top_left\" | \"top_right\" | \"bottom_left\" | \"bottom_right\" \n\nRELATIVE_POSITION: \"source\"\n                 | \"target\"\n                 | \"middle\"\n\nVAR: VAR_THIS | VAR_OTHER\nVAR_THIS: \"this\"\nVAR_OTHER: \"other\"\n\nOP_AND: \"and\"\nOP_OR: \"or\"\nOP_NOT: \"not\"\n\nCOLOR_OF: \"color_of\"\nSIZE_OF: \"size_of\"\nHEIGHT_OF: \"height_of\"\nWIDTH_OF: \"width_of\"\nDEGREE_OF: \"degree_of\"\nSHAPE_OF: \"shape_of\"\nCOLUMN_OF: \"column_of\"\nDIRECTION_OF: \"direction_of\"\nIMAGE_POINTS_OF: \"img_pts_of\"\nMIRROR_AXIS_OF: \"mirror_axis_of\"\n\nCOLOR_EQ: \"color_equals\"\nSIZE_EQ: \"size_equals\"\nDEGREE_EQ: \"degree_equals\"\nHEIGHT_EQ: \"height_equals\"\nWIDTH_EQ: \"width_equals\"\nSHAPE_EQ: \"shape_equals\"\nCOLUMN_EQ: \"column_equals\"\nNEIGHBOR_OF: \"neighbor_of\"\n\nTR_UPDATE_COLOR: \"update_color\"\nTR_MOVE_NODE: \"move_node\"\nTR_EXTEND_NODE: \"extend_node\"\nTR_MOVE_NODE_MAX: \"move_node_max\"\nTR_ROTATE_NODE: \"rotate_node\"\nTR_ADD_BORDER: \"add_border\"\nTR_FILL_RECTANGLE: \"fill_rectangle\"\nTR_HOLLOW_RECTANGLE: \"hollow_rectangle\"\nTR_MIRROR: \"mirror\"\nTR_FLIP: \"flip\"\nTR_INSERT: \"insert\"\nTR_NOOP: \"noop\"\n\nCOMMENT: /\\s*/ \";;\" /[^\\n]/*\n\n%import common.WS\n%import common.LCASE_LETTER\n%import common.INT\n%ignore WS\n%ignore COMMENT\n```\n\n\nNow we continue with the visual perception and reasoning task.\nThe input for the task is a small number of pairs of grids of characters.\nThe value of each of the cells of the grids are the colors defined in the DSL, so we can think of grids as images.\nEach pair of images correspond to an input-output example for an unknown program P.\nFor each pair, the program P is evaluated on the image grid and operates on the objects that appear in it.\nThe output of the program is then the output image.\nThe objects in the images are easy and natural to identify for humans, so there is no need to define them explicitly.\nHowever you are able to abstract them correctly, and the DSL is interpreted with the same correct abstraction.\n\n\nNow I will show you some demonstration tasks along with the output you would be expected to produce for each of them.\n\n## DEMONSTRATION TASK 1\n\n### INPUT\nPAIR 1\nINPUT GRID:\nO O O O O O O O\nO O O O O R O O\nO R O O O R O R\nO R R O O R O O\nO O O O O O O O\nO R R O O O O O\nO R R O R R O O\nO O O O O O O O\nOUTPUT GRID:\nO O O O O O O O\nO O O O O Y O O\nO Y O O O Y O Y\nO Y Y O O Y O O\nO O O O O O O O\nO Y Y O O O O O\nO Y Y O Y Y O O\nO O O O O O O O\n\nPAIR 2\nINPUT GRID:\nO O O O O O O O O O\nO O O O R O O O O O\nO G O O R O O W O O\nO O G O O O W W O O\nO O G O O O O O O O\nO O O O X O O O O O\nO O O O O O F F F O\nO B O O O O O O O O\nO B B B B O O C C O\nO O O O O O O C O O\nOUTPUT GRID:\nO O O O O O O O O O\nO O O O Y O O O O O\nO Y O O Y O O Y O O\nO O Y O O O Y Y O O\nO O Y O O O O O O O\nO O O O Y O O O O O\nO O O O O O Y Y Y O\nO Y O O O O O O O O\nO Y Y Y Y O O Y Y O\nO O O O O O O Y O O\n\n### EXPECTED OUTPUT\n{\n    \"nl_description\": \"Recolor all objects to color Y\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color Y)\\n        )\\n    )\\n)\"\n}\n\n\n## DEMONSTRATION TASK 2\n\n### INPUT\nPAIR 1\nINPUT GRID:\nO O O O O O O O\nO F F O O O R O\nO F F O O O O O\nO O O O O O O O\nO O O O O O O O\nO O O O O O O O\nO O A O O X X O\nO O O O O O O O\nOUTPUT GRID:\nO O O O O O O O\nO F F R R R R O\nO F F O O O O O\nO O A O O O O O\nO O A O O O O O\nO O A O O O O O\nO O A O O X X O\nO O O O O O O O\n\nPAIR 2\nINPUT GRID:\nO O O O O O O O O O\nO O O Y O G G G G O\nO O F O O G G G G O\nO O O O O O O O O O\nO O O O O O O O O O\nO O O O O O O O O O\nO C C C O O O O O O\nO C C C O O O O A O\nO C C C O O O X O O\nO O O O O O O O O O\nOUTPUT GRID:\nO O O O O O O O O O\nO O O Y O G G G G O\nO O F Y O G G G G O\nO O F Y O O O O O O\nO O F Y O O O O O O\nO O F Y O O O O O O\nO C C C O O O O O O\nO C C C A A A A A O\nO C C C X X X X O O\nO O O O O O O O O O\n\n### EXPECTED OUTPUT\n{\n    \"nl_description\": \"Extend all the objects of size 1 toward the object of maximum size, without overlapping.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (size_equals (size_of this) 1)\\n                (and\\n                    (neighbor_of this other)\\n                    (size_equals (size_of other) max)\\n                )\\n            )\\n        )\\n        (apply\\n            (extend_node (direction_of other) false)\\n        )    \\n    )\\n)\"\n}\n\n\n## DEMONSTRATION TASK 3\n\n### INPUT\nPAIR 1\nINPUT GRID:\nO O O O O O O O O O\nO O O O O O O G O O\nO O G O O O O G O O\nO O G G O O O G G O\nO O O O O O O O O O\nO G G O O O O O O O\nO G G O O G G G O O\nO O O O O O O O O O\nO O G G O O O G O O\nO O O O O O O O O O\nOUTPUT GRID:\nO O O O O O O O O O\nO O B O O O O G O O\nO O B B O O O G O O\nO O O O O O O G G O\nO O O O O O O O O O\nO G G O O B B B O O\nO G G O O O O O O O\nO O O O O O O O O O\nO O G G O O O G O O\nO O O O O O O O O O\n\nPAIR 2\nINPUT GRID:\nO O O O O O O O O O O O O O O O\nO O O O O O O O O O O O O G O O\nO B B O O O O O O C C C O G G O\nO O O O O F O O O O O O O O O O\nO O O O O F O O O O R R O O O O\nO O O O O F O O O O R R O O O O\nO O O O O O O O W O O O O O O O\nO O O A O O O W W O O O X O O O\nO O O A A O O W W O O O X X X O\nO O O O O O O O O O O O O O O O\nO O O O O O O O O O Y Y O O O O\nO O O O B O O O O O O O O O O O\nO Y O O B O O O G O O O O F F O\nO Y O O O O O O G O O O O F F O\nO Y Y Y O O O O G O O O O O O O\nO O O O O O O O O O O O O O O O\nOUTPUT GRID:\nO O O O O O O O O O O O O B O O\nO O O O O O O O O B B B O B B O\nO B B O O B O O O O O O O O O O\nO O O O O B O O O O O O O O O O\nO O O O O B O O O O R R O O O O\nO O O O O O O O O O R R O O O O\nO O O B O O O O W O O O O O O O\nO O O B B O O W W O O O X O O O\nO O O O O O O W W O O O X X X O\nO O O O O O O O O O O O O O O O\nO O O O O O O O O O Y Y O O O O\nO O O O B O O O B O O O O O O O\nO Y O O B O O O B O O O O F F O\nO Y O O O O O O B O O O O F F O\nO Y Y Y O O O O O O O O O O O O\nO O O O O O O O O O O O O O O O\n\n### EXPECTED OUTPUT\n{\n    \"nl_description\": \"Move all objects of size 3 one step up, and then recolor them to color B.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (size_equals (size_of this) 3)\\n        )\\n        (apply\\n            (move_node up)\\n            (update_color B)\\n        )\\n    )\\n)\"\n}\n\n\n## DEMONSTRATION TASK 4\n\n### INPUT\nPAIR 1\nINPUT GRID:\nO O O O R O O O A O\nO B O O O O B O O O\nO O O O O O O O O O\nO O O O X X X O O O\nO O O O X X X O O F\nW O O O O O O O O O\nO O F O O O Y O O O\nO O O O O O O O O O\nO O O O G O O O W O\nO O O O O O O O O O\nOUTPUT GRID:\nO O O O O O O O A O\nO B O O O O O O O O\nO O O O R O B O O O\nO O O O X X X O O O\nO O O O X X X F O O\nW O O O G O Y O O O\nO O F O O O O O O O\nO O O O O O O O O O\nO O O O O O O O W O\nO O O O O O O O O O\n\nPAIR 2\nINPUT GRID:\nO O O F O O O R O O O O\nO O O O O O O O O Y O O\nO O O O O B O O O O O O\nO O R O O O O O G O O O\nB O O O O G O O O O O A\nO O O O O O R O O O W O\nO O O O O O O O C O O O\nG O X X O O O O O O O R\nO O X X O O O O O O Y O\nO O X X O O A O O O O O\nO F X X O O O O O O O O\nO O O O O Y O O O O O O\nOUTPUT GRID:\nO O O O O O O R O O O O\nO O O O O O O O O Y O O\nO O O O O B O O O O O O\nO O O O O O O O G O O O\nB O O O O G O O O O O A\nO O O O O O R O O O W O\nO O R F O O O O C O O O\nO G X X R O O O O O O O\nO O X X Y O O O O O O O\nO O X X A O O O O O O O\nO F X X O O O O O O O O\nO O O O O Y O O O O O O\n\nPAIR 3\nINPUT GRID:\nO G O O O O O O\nO O O A O O A O\nW O O O W O O O\nO O O O O O O B\nO R O X O F O O\nO O O O O O O O\nO G O O F O O G\nO O B O O A O O\nOUTPUT GRID:\nO G O O O O O O\nO O O O O O A O\nW O O O W O O O\nO O O A O O O B\nO O R X F O O O\nO O O O O O O O\nO G O O F O O G\nO O B O O A O O\n\n### EXPECTED OUTPUT\n{\n    \"nl_description\": \"Move all objects of color different than X, toward the object of color X, if they are neighbors of it.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (not (color_equals (color_of this) X))\\n                (and\\n                    (neighbor_of this other)\\n                    (color_equals (color_of other) X)\\n                )\\n            )\\n        )\\n        (apply\\n            (move_node_max (direction_of other))\\n        )\\n    )\\n)\"\n}\n\n\nNow follows task you will be evaluated on.\nOutput the solution as a JSON object, which should contain both a natural language description of the solution and the solution written in the DSL.\nThe code should be parseable by the DSL grammar.\nThe JSON must have the following structure:\n\n{\n    \"nl_description\": \"TO_BE_FILLED\",\n    \"code\": \"TO_BE_FILLED\"\n}\n\n## TEST TASK\n\nPAIR 1\nINPUT GRID:\nO O O O O O O O O O\nO O O O O O O O O O\nO O O O O O O O O O\nO O O O X X O O O O\nO O O O X X O O O O\nO O O O O O O O O O\nO O O O O O O O O O\nO O O O O O O O O O\nO O O O O O O O O O\nO O O O O O O O O O\nOUTPUT GRID:\nO O O O O O O O O O\nO O O O O O O O O O\nO O O B O O R O O O\nO O O O X X O O O O\nO O O O X X O O O O\nO O O G O O Y O O O\nO O O O O O O O O O\nO O O O O O O O O O\nO O O O O O O O O O\nO O O O O O O O O O\n\nPAIR 2\nINPUT GRID:\nO O O O O O O O O O\nO O O O O O O O O O\nO O X X O O O O O O\nO O X X O O O O O O\nO O O O O O O O O O\nO O O O O O O O O O\nO O O O O O X X O O\nO O O O O O X X O O\nO O O O O O O O O O\nO O O O O O O O O O\nOUTPUT GRID:\nO O O O O O O O O O\nO B O O R O O O O O\nO O X X O O O O O O\nO O X X O O O O O O\nO G O O Y O O O O O\nO O O O O B O O R O\nO O O O O O X X O O\nO O O O O O X X O O\nO O O O O G O O Y O\nO O O O O O O O O O\n\nPAIR 3\nINPUT GRID:\nO O O O O O O O O O O O O O O\nO O O O O O O O O O O O O O O\nO O O X X O O O O O O O O O O\nO O O X X O O O O O O O O O O\nO O O O O O O O X X O O O O O\nO O O O O O O O X X O O O O O\nO O O O O O O O O O O O O O O\nO O O O O O O O O O O O O O O\nO O O O X X O O O O O O O O O\nO O O O X X O O O O O O O O O\nO O O O O O O O O O O O O O O\nO O O O O O O O O X X O O O O\nO O O O O O O O O X X O O O O\nO O O O O O O O O O O O O O O\nO O O O O O O O O O O O O O O\nOUTPUT GRID:\nO O O O O O O O O O O O O O O\nO O B O O R O O O O O O O O O\nO O O X X O O O O O O O O O O\nO O O X X O O B O O R O O O O\nO O G O O Y O O X X O O O O O\nO O O O O O O O X X O O O O O\nO O O O O O O G O O Y O O O O\nO O O B O O R O O O O O O O O\nO O O O X X O O O O O O O O O\nO O O O X X O O O O O O O O O\nO O O G O O Y O B O O R O O O\nO O O O O O O O O X X O O O O\nO O O O O O O O O X X O O O O\nO O O O O O O O G O O Y O O O\nO O O O O O O O O O O O O O O\n"
        }
    ],
    "n_valid_json": 100,
    "n_can_parse": 60,
    "completions": [
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move objects of color O that are neighbors of objects of color X toward the object of color X.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) O)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) X)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )    \n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 3,
                "other": 4,
                "filter": 1,
                "and": 2,
                "color_equals": 2,
                "color_of": 2,
                "O": 1,
                "neighbor_of": 1,
                "X": 1,
                "apply": 1,
                "move_node_max": 1,
                "direction_of": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color B, R, G, or Y toward the object of color X, if they are neighbors of it.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (or\n                    (color_equals (color_of this) B)\n                    (or\n                        (color_equals (color_of this) R)\n                        (or\n                            (color_equals (color_of this) G)\n                            (color_equals (color_of this) Y)))\n                )\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) X)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 6,
                "other": 4,
                "filter": 1,
                "and": 2,
                "or": 3,
                "color_equals": 5,
                "color_of": 5,
                "B": 1,
                "R": 1,
                "G": 1,
                "Y": 1,
                "neighbor_of": 1,
                "X": 1,
                "apply": 1,
                "move_node_max": 1,
                "direction_of": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of size 3 to the extreme positions and then change their colors to respective positions.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 3)\n        )\n        (apply\n            (move_node_max up)\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 3)\n        )\n        (apply\n            (move_node_max right)\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 3)\n        )\n        (apply\n            (move_node_max down)\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 3)\n        )\n        (apply\n            (move_node_max left)\n            (update_color Y)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 4,
                "vars": 4,
                "this": 8,
                "filter": 4,
                "size_equals": 4,
                "size_of": 4,
                "3": 4,
                "apply": 4,
                "move_node_max": 4,
                "up": 1,
                "update_color": 4,
                "B": 1,
                "right": 1,
                "R": 1,
                "down": 1,
                "G": 1,
                "left": 1,
                "Y": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of size 1 toward the object(s) of color X, without overlapping.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) X)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 3,
                "other": 4,
                "filter": 1,
                "and": 2,
                "size_equals": 1,
                "size_of": 1,
                "1": 1,
                "neighbor_of": 1,
                "color_equals": 1,
                "color_of": 1,
                "X": 1,
                "apply": 1,
                "move_node_max": 1,
                "direction_of": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Insert objects of size 1 around objects of color X, in the positions where they are the same as their previous relative position in the pairs.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (neighbor_of this other)\n                (color_equals (color_of other) X)\n            )\n        )\n        (apply\n            (insert this (img_pts_of this) source)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 8 col 17\n\n                (color_equals (color_of other) X)\n                ^\nExpected one of: \n\t* RPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 5,
                "other": 3,
                "filter": 1,
                "and": 1,
                "size_equals": 1,
                "size_of": 1,
                "1": 1,
                "neighbor_of": 1,
                "color_equals": 1,
                "color_of": 1,
                "X": 1,
                "apply": 1,
                "insert": 1,
                "img_pts_of": 1,
                "source": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of size 1 to the initial positions of objects of color other than X.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (not (color_equals (color_of other) X))\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n        )    \n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "other": 3,
                "filter": 1,
                "and": 1,
                "size_equals": 1,
                "size_of": 1,
                "1": 1,
                "not": 1,
                "color_equals": 1,
                "color_of": 1,
                "X": 1,
                "apply": 1,
                "move_node": 1,
                "direction_of": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Insert color objects B, R, G, and Y at vacant cells to form new objects adjacent to the existing X objects.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (insert 0 top)\n            (update_color B)\n            (insert 1 right)\n            (update_color R)\n            (insert 2 bottom)\n            (update_color G)\n            (insert 3 left)\n            (update_color Y)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches ')' in the current parser context, at line 8 col 26\n\n            (insert 0 top)\n                         ^\nExpected one of: \n\t* RELATIVE_POSITION\n",
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "filter": 1,
                "color_equals": 1,
                "color_of": 1,
                "X": 1,
                "apply": 1,
                "insert": 4,
                "0": 1,
                "top": 1,
                "update_color": 4,
                "B": 1,
                "1": 1,
                "right": 1,
                "R": 1,
                "2": 1,
                "bottom": 1,
                "G": 1,
                "3": 1,
                "left": 1,
                "Y": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects towards the object of color X, if they are neighbors, in the 1 step direction.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) X)\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n        )    \n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "other": 4,
                "filter": 1,
                "and": 1,
                "neighbor_of": 1,
                "color_equals": 1,
                "color_of": 1,
                "X": 1,
                "apply": 1,
                "move_node": 1,
                "direction_of": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of size 1 to the color X, then place them around X.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (neighbor_of this other)\n                (color_equals (color_of other) X)\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 8 col 17\n\n                (color_equals (color_of other) X)\n                ^\nExpected one of: \n\t* RPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 3,
                "other": 4,
                "filter": 1,
                "and": 1,
                "size_equals": 1,
                "size_of": 1,
                "1": 1,
                "neighbor_of": 1,
                "color_equals": 1,
                "color_of": 1,
                "X": 1,
                "apply": 1,
                "move_node_max": 1,
                "direction_of": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of size 1 one step down, then recolor them to their previous step's color.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 1)\n        )\n        (apply\n            (move_node down)\n            (move_node up)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "filter": 1,
                "size_equals": 1,
                "size_of": 1,
                "1": 1,
                "apply": 1,
                "move_node": 2,
                "down": 1,
                "up": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move isolated objects to the neighboring empty cells to form two new columns.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (not\n                    (neighbor_of this other)\n                )\n            )\n        )\n        (apply\n            (move_node right)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (not\n                    (neighbor_of this other)\n                )\n            )\n        )\n        (apply\n            (move_node left)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 6,
                "other": 4,
                "filter": 2,
                "and": 2,
                "size_equals": 2,
                "size_of": 2,
                "1": 2,
                "not": 2,
                "neighbor_of": 2,
                "apply": 2,
                "move_node": 2,
                "right": 1,
                "left": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move objects of size 1 to adjacent positions, keeping their colors",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 1)\n        )\n        (apply\n            (move_node_max (direction_of this))\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 3,
                "filter": 1,
                "size_equals": 1,
                "size_of": 1,
                "1": 1,
                "apply": 1,
                "move_node_max": 1,
                "direction_of": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Insert the objects of size 1 between all the pairs of objects of maximum size X.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (and\n                    (neighbor_of this other)\n                    (size_equals (size_of other) max)\n                )\n            )\n        )\n        (apply\n            (insert 1 (img_pts_of this) source)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 4,
                "other": 3,
                "filter": 1,
                "and": 2,
                "size_equals": 2,
                "size_of": 2,
                "1": 2,
                "neighbor_of": 1,
                "max": 1,
                "apply": 1,
                "insert": 1,
                "img_pts_of": 1,
                "source": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of size 1 toward the object of color X, if they are neighbors of it, and then recolor them to their respective colors.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) X)\n                )\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 3,
                "other": 4,
                "filter": 1,
                "and": 2,
                "size_equals": 1,
                "size_of": 1,
                "1": 1,
                "neighbor_of": 1,
                "color_equals": 1,
                "color_of": 1,
                "X": 1,
                "apply": 1,
                "move_node": 1,
                "direction_of": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Insert objects in the regions adjacent to objects of color X with different color values, creating additional objects between them.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) X))\n                (neighbor_of this other)\n                (color_equals (color_of other) X)\n            )\n        )\n        (apply\n            (insert 0 bottom_left source)\n            (insert 0 top_right source)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 8 col 17\n\n                (color_equals (color_of other) X)\n                ^\nExpected one of: \n\t* RPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 3,
                "other": 3,
                "filter": 1,
                "and": 1,
                "not": 1,
                "color_equals": 2,
                "color_of": 2,
                "X": 2,
                "neighbor_of": 1,
                "apply": 1,
                "insert": 2,
                "0": 2,
                "bottom_left": 1,
                "source": 2,
                "top_right": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move objects of size 1 to cells forming an intersection with the object of color X.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (neighbor_of this other)\n                (color_equals (color_of other) X)\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 8 col 17\n\n                (color_equals (color_of other) X)\n                ^\nExpected one of: \n\t* RPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 3,
                "other": 4,
                "filter": 1,
                "and": 1,
                "size_equals": 1,
                "size_of": 1,
                "1": 1,
                "neighbor_of": 1,
                "color_equals": 1,
                "color_of": 1,
                "X": 1,
                "apply": 1,
                "move_node_max": 1,
                "direction_of": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Insert colored objects in positions near the object of color X.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (neighbor_of this other)\n        )\n        (apply\n            (insert 0 (img_pts_of this) source)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 3,
                "other": 2,
                "filter": 1,
                "neighbor_of": 1,
                "apply": 1,
                "insert": 1,
                "0": 1,
                "img_pts_of": 1,
                "source": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all single cells in the direction of the nearest X block and recolor them.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (neighbor_of this other)\n                (color_equals (color_of other) X)\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n            (update_color (color_of this))\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 8 col 17\n\n                (color_equals (color_of other) X)\n                ^\nExpected one of: \n\t* RPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 4,
                "other": 4,
                "filter": 1,
                "and": 1,
                "size_equals": 1,
                "size_of": 1,
                "1": 1,
                "neighbor_of": 1,
                "color_equals": 1,
                "color_of": 2,
                "X": 1,
                "apply": 1,
                "move_node": 1,
                "direction_of": 1,
                "update_color": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects toward the object of color X, if they are neighbors of it.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) X)\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "other": 4,
                "filter": 1,
                "and": 1,
                "neighbor_of": 1,
                "color_equals": 1,
                "color_of": 1,
                "X": 1,
                "apply": 1,
                "move_node_max": 1,
                "direction_of": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color different than X, toward the object of color X, if they are neighbors of it.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) X))\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) X)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 3,
                "other": 4,
                "filter": 1,
                "and": 2,
                "not": 1,
                "color_equals": 2,
                "color_of": 2,
                "X": 2,
                "neighbor_of": 1,
                "apply": 1,
                "move_node_max": 1,
                "direction_of": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Insert objects of colors B, R, G, and Y at the neighboring positions of 2x2 blocks of color X.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (insert 1 top_left source)\n            (insert 1 top_right source)\n            (insert 1 bottom_left source)\n            (insert 1 bottom_right source)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "other": 1,
                "filter": 1,
                "color_equals": 1,
                "color_of": 1,
                "X": 1,
                "apply": 1,
                "insert": 4,
                "1": 4,
                "top_left": 1,
                "source": 4,
                "top_right": 1,
                "bottom_left": 1,
                "bottom_right": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color different than X, toward the object of color X, if they are neighbors of it. ",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) X))\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) X)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 3,
                "other": 4,
                "filter": 1,
                "and": 2,
                "not": 1,
                "color_equals": 2,
                "color_of": 2,
                "X": 2,
                "neighbor_of": 1,
                "apply": 1,
                "move_node_max": 1,
                "direction_of": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Insert objects of size 1 between objects of color X and other objects that are neighbors of them.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) X)\n                )\n            )\n        )\n        (apply\n            (insert (img_pts_of this) target)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 14 col 21\n\n            (insert (img_pts_of this) target)\n                    ^\nExpected one of: \n\t* OBJECT_ID\n",
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 4,
                "other": 3,
                "filter": 1,
                "and": 2,
                "size_equals": 1,
                "size_of": 1,
                "1": 1,
                "neighbor_of": 1,
                "color_equals": 1,
                "color_of": 1,
                "X": 1,
                "apply": 1,
                "insert": 1,
                "img_pts_of": 1,
                "target": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of size 1 one step away from the object of color X, if they are neighbors of it.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) X)\n                )\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 3,
                "other": 4,
                "filter": 1,
                "and": 2,
                "size_equals": 1,
                "size_of": 1,
                "1": 1,
                "neighbor_of": 1,
                "color_equals": 1,
                "color_of": 1,
                "X": 1,
                "apply": 1,
                "move_node": 1,
                "direction_of": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of size 1 located in the row or column adjacent to size 2 objects, one step away.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (and\n                    (neighbor_of this other)\n                    (size_equals (size_of other) 2)\n                )\n            )\n        )\n        (apply\n            (move_node (direction_of this))\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 4,
                "other": 3,
                "filter": 1,
                "and": 2,
                "size_equals": 2,
                "size_of": 2,
                "1": 1,
                "neighbor_of": 1,
                "2": 1,
                "apply": 1,
                "move_node": 1,
                "direction_of": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Insert colored objects at all four corners of the grid.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (insert 7 top_left source)\n            (insert 8 top_right source)\n            (insert 9 bottom_left source)\n            (insert 10 bottom_right source)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 1,
                "filter": 1,
                "apply": 1,
                "insert": 4,
                "7": 1,
                "top_left": 1,
                "source": 4,
                "8": 1,
                "top_right": 1,
                "9": 1,
                "bottom_left": 1,
                "10": 1,
                "bottom_right": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of size 2 one step away from the object X.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 2)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) X)\n                )\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 3,
                "other": 4,
                "filter": 1,
                "and": 2,
                "size_equals": 1,
                "size_of": 1,
                "2": 1,
                "neighbor_of": 1,
                "color_equals": 1,
                "color_of": 1,
                "X": 1,
                "apply": 1,
                "move_node": 1,
                "direction_of": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Insert colored objects at the positions around color X objects which are all connected, systematically cycling through colors B, R, G, and Y.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of other) X)\n        )\n        (apply\n            (insert 0 top_left source)\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of other) X)\n        )\n        (apply\n            (insert 1 top_right source)\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of other) X)\n        )\n        (apply\n            (insert 2 bottom_left source)\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of other) X)\n        )\n        (apply\n            (insert 3 bottom_right source)\n            (update_color Y)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 4,
                "vars": 4,
                "this": 4,
                "other": 8,
                "filter": 4,
                "color_equals": 4,
                "color_of": 4,
                "X": 4,
                "apply": 4,
                "insert": 4,
                "0": 1,
                "top_left": 1,
                "source": 4,
                "update_color": 4,
                "B": 1,
                "1": 1,
                "top_right": 1,
                "R": 1,
                "2": 1,
                "bottom_left": 1,
                "G": 1,
                "3": 1,
                "bottom_right": 1,
                "Y": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color different than X and not already at an edge, toward the nearest edge.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (not (color_equals (color_of this) X))\n                (and\n                    (not (color_equals (height_of this) 0))\n                    (and\n                        (not (color_equals (height_of this) max))\n                        (and\n                            (not (color_equals (width_of this) 0))\n                            (not (color_equals (width_of this) max))\n                        )\n                    )\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of this))\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches 'h' in the current parser context, at line 8 col 41\n\n                    (not (color_equals (height_of this) 0))\n                                        ^\nExpected one of: \n\t* COLOR_OF\n",
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 7,
                "filter": 1,
                "and": 4,
                "not": 5,
                "color_equals": 5,
                "color_of": 1,
                "X": 1,
                "height_of": 2,
                "0": 2,
                "max": 2,
                "width_of": 2,
                "apply": 1,
                "move_node_max": 1,
                "direction_of": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Insert a single object in empty spaces near objects of color X with different colors in each such space.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of other) X)\n                (and\n                    (neighbor_of this other)\n                    (not (color_equals (color_of this) O))\n                )\n            )\n        )\n        (apply\n            (insert this (img_pts_of other) source)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches 't' in the current parser context, at line 14 col 21\n\n            (insert this (img_pts_of other) source)\n                    ^\nExpected one of: \n\t* OBJECT_ID\n",
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 4,
                "other": 4,
                "filter": 1,
                "and": 2,
                "color_equals": 2,
                "color_of": 2,
                "X": 1,
                "neighbor_of": 1,
                "not": 1,
                "O": 1,
                "apply": 1,
                "insert": 1,
                "img_pts_of": 1,
                "source": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Insert objects of size 1 at the top-left corner of the objects of color X.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) X)\n                )\n            )\n        )\n        (apply\n            (insert (0) top_left target)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 14 col 21\n\n            (insert (0) top_left target)\n                    ^\nExpected one of: \n\t* OBJECT_ID\n",
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 3,
                "other": 3,
                "filter": 1,
                "and": 2,
                "size_equals": 1,
                "size_of": 1,
                "1": 1,
                "neighbor_of": 1,
                "color_equals": 1,
                "color_of": 1,
                "X": 1,
                "apply": 1,
                "insert": 1,
                "0": 1,
                "top_left": 1,
                "target": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color B, G, R, and Y one step away from the object of color X.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (or\n                    (color_equals (color_of this) B)\n                    (or\n                        (color_equals (color_of this) G)\n                        (or\n                            (color_equals (color_of this) R)\n                            (color_equals (color_of this) Y)\n                        )\n                    )\n                )\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) X)\n                )\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 6,
                "other": 4,
                "filter": 1,
                "and": 2,
                "or": 3,
                "color_equals": 5,
                "color_of": 5,
                "B": 1,
                "G": 1,
                "R": 1,
                "Y": 1,
                "neighbor_of": 1,
                "X": 1,
                "apply": 1,
                "move_node": 1,
                "direction_of": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Insert objects of color X into the grid and then move neighbor 1-sized objects towards them.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (insert this top_left source)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (and\n                    (color_equals (color_of other) X)\n                    (size_equals (size_of this) 1)\n                )\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches 't' in the current parser context, at line 8 col 21\n\n            (insert this top_left source)\n                    ^\nExpected one of: \n\t* OBJECT_ID\n",
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 6,
                "filter": 2,
                "color_equals": 2,
                "color_of": 2,
                "X": 2,
                "apply": 2,
                "insert": 1,
                "top_left": 1,
                "source": 1,
                "other": 4,
                "and": 2,
                "neighbor_of": 1,
                "size_equals": 1,
                "size_of": 1,
                "1": 1,
                "move_node": 1,
                "direction_of": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Insert colored dots around the largest object, focusing on the corners surrounding it.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (and\n                    (size_equals (size_of other) max)\n                    (color_equals (color_of this) O)\n                )\n            )\n        )\n        (apply\n            (update_color (color_of this))\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 4,
                "other": 3,
                "filter": 1,
                "and": 2,
                "neighbor_of": 1,
                "size_equals": 1,
                "size_of": 1,
                "max": 1,
                "color_equals": 1,
                "color_of": 2,
                "O": 1,
                "apply": 1,
                "update_color": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of size 1 away from the object of color X if they are neighbors, and then recolor them according to specific colors.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) X)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of (not (direction_of other))))\n        )    \n    )\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 1)\n        )\n        (apply\n            (update_color B)\n            (update_color R)\n            (update_color G)\n            (update_color Y)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 14 col 42\n\n           (move_node_max (direction_of (not (direction_of other))))\n                                        ^\nExpected one of: \n\t* VAR\n",
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 5,
                "other": 4,
                "filter": 2,
                "and": 2,
                "size_equals": 2,
                "size_of": 2,
                "1": 2,
                "neighbor_of": 1,
                "color_equals": 1,
                "color_of": 1,
                "X": 1,
                "apply": 2,
                "move_node_max": 1,
                "direction_of": 2,
                "not": 1,
                "update_color": 4,
                "B": 1,
                "R": 1,
                "G": 1,
                "Y": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Insert objects of primary colors (B, R, G, Y) at specific positions forming a pattern around the blue objects in the input grid.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of other) X)\n        )\n        (apply\n            (insert 1 top this)\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of other) X)\n        )\n        (apply\n            (insert 1 top_right this)\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of other) X)\n        )\n        (apply\n            (insert 1 down this)\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of other) X)\n        )\n        (apply\n            (insert 1 down_left this)\n            (update_color Y)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches 't' in the current parser context, at line 8 col 27\n\n            (insert 1 top this)\n                          ^\nExpected one of: \n\t* RELATIVE_POSITION\n",
            "token_counts": {
                "do": 1,
                "rule": 4,
                "vars": 4,
                "this": 8,
                "other": 8,
                "filter": 4,
                "color_equals": 4,
                "color_of": 4,
                "X": 4,
                "apply": 4,
                "insert": 4,
                "1": 4,
                "top": 1,
                "update_color": 4,
                "B": 1,
                "top_right": 1,
                "R": 1,
                "down": 1,
                "G": 1,
                "down_left": 1,
                "Y": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Insert objects of size 1 at the 'source' position of all its neighbors.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of other) 1)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (insert this (img_pts_of this) source)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches 't' in the current parser context, at line 11 col 21\n\n            (insert this (img_pts_of this) source)\n                    ^\nExpected one of: \n\t* OBJECT_ID\n",
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 4,
                "other": 3,
                "filter": 1,
                "and": 1,
                "size_equals": 1,
                "size_of": 1,
                "1": 1,
                "neighbor_of": 1,
                "apply": 1,
                "insert": 1,
                "img_pts_of": 1,
                "source": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects with color O towards the objects with color X, if they are neighbors of it.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) O)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) X)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 3,
                "other": 4,
                "filter": 1,
                "and": 2,
                "color_equals": 2,
                "color_of": 2,
                "O": 1,
                "neighbor_of": 1,
                "X": 1,
                "apply": 1,
                "move_node_max": 1,
                "direction_of": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Color the cells around all occurrences of adjacent objects of color X.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (neighbor_of this other)\n        )\n        (apply\n            (update_color B)\n            (update_color R)\n            (update_color G)\n            (update_color Y)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "other": 2,
                "filter": 1,
                "neighbor_of": 1,
                "apply": 1,
                "update_color": 4,
                "B": 1,
                "R": 1,
                "G": 1,
                "Y": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of size 1 or color different than X towards leftmost object of color X.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (or\n                (size_equals (size_of this) 1)\n                (and\n                    (not (color_equals (color_of this) X))\n                    (neighbor_of this other)\n                    (color_equals (color_of other) X)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 10 col 21\n\n                    (color_equals (color_of other) X)\n                    ^\nExpected one of: \n\t* RPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 4,
                "other": 4,
                "filter": 1,
                "or": 1,
                "size_equals": 1,
                "size_of": 1,
                "1": 1,
                "and": 1,
                "not": 1,
                "color_equals": 2,
                "color_of": 2,
                "X": 2,
                "neighbor_of": 1,
                "apply": 1,
                "move_node_max": 1,
                "direction_of": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of size 1 to the neighboring objects of color X.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (neighbor_of this other)\n                (color_equals (color_of other) X)\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 8 col 17\n\n                (color_equals (color_of other) X)\n                ^\nExpected one of: \n\t* RPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 3,
                "other": 4,
                "filter": 1,
                "and": 1,
                "size_equals": 1,
                "size_of": 1,
                "1": 1,
                "neighbor_of": 1,
                "color_equals": 1,
                "color_of": 1,
                "X": 1,
                "apply": 1,
                "move_node": 1,
                "direction_of": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of size 1 one step in various directions as indicated",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 1)\n        )\n        (apply\n            (move_node up)\n            (move_node down)\n            (move_node left)\n            (move_node right)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "filter": 1,
                "size_equals": 1,
                "size_of": 1,
                "1": 1,
                "apply": 1,
                "move_node": 4,
                "up": 1,
                "down": 1,
                "left": 1,
                "right": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Insert different colored objects at various locations maintaining their non-overlapping positions.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (not (color_equals (color_of this) X))\n        )\n        (apply\n            (insert X (img_pts_of this) source)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches 'X' in the current parser context, at line 8 col 21\n\n            (insert X (img_pts_of this) source)\n                    ^\nExpected one of: \n\t* OBJECT_ID\n",
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 3,
                "filter": 1,
                "not": 1,
                "color_equals": 1,
                "color_of": 1,
                "X": 2,
                "apply": 1,
                "insert": 1,
                "img_pts_of": 1,
                "source": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Insert objects of color other than X around the nearest X object.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) X))\n                (neighbor_of this other)\n                (color_equals (color_of other) X)\n            )\n        )\n        (apply\n            (insert 0 (img_pts_of this) target)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 8 col 17\n\n                (color_equals (color_of other) X)\n                ^\nExpected one of: \n\t* RPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 4,
                "other": 3,
                "filter": 1,
                "and": 1,
                "not": 1,
                "color_equals": 2,
                "color_of": 2,
                "X": 2,
                "neighbor_of": 1,
                "apply": 1,
                "insert": 1,
                "0": 1,
                "img_pts_of": 1,
                "target": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move objects in columns adjacent to objects of color X up or down to avoid overlaps with X, changing their colors.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) X)\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (not (color_equals (color_of this) X))\n        )\n        (apply\n            (update_color R)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 4,
                "other": 4,
                "filter": 2,
                "and": 1,
                "neighbor_of": 1,
                "color_equals": 2,
                "color_of": 2,
                "X": 2,
                "apply": 2,
                "move_node": 1,
                "direction_of": 1,
                "update_color": 2,
                "G": 1,
                "not": 1,
                "R": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Insert new colored nodes above all objects of color X to form a cross pattern.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (insert 0 top source)\n            (update_color B)\n            (insert 1 left source)\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (insert 2 above this)\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (insert 3 below this)\n            (update_color Y)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches 'a' in the current parser context, at line 20 col 23\n\n            (insert 2 above this)\n                      ^\nExpected one of: \n\t* LPAR\n\t* IMAGE_POINTS\n",
            "token_counts": {
                "do": 1,
                "rule": 3,
                "vars": 3,
                "this": 8,
                "other": 3,
                "filter": 3,
                "color_equals": 3,
                "color_of": 3,
                "X": 1,
                "apply": 3,
                "insert": 4,
                "0": 1,
                "top": 1,
                "source": 2,
                "update_color": 4,
                "B": 2,
                "1": 1,
                "left": 1,
                "R": 2,
                "2": 1,
                "above": 1,
                "G": 1,
                "3": 1,
                "below": 1,
                "Y": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of size 1 to the nearest border and then recolor them to unique colors.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 1)\n        )\n        (apply\n            (move_node_max (direction_of this))\n            (update_color (color_of this))\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 4,
                "filter": 1,
                "size_equals": 1,
                "size_of": 1,
                "1": 1,
                "apply": 1,
                "move_node_max": 1,
                "direction_of": 1,
                "update_color": 1,
                "color_of": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Insert a new object of size 1 (Color G) next to each object of color X, if they are neighbors of an object of color different than X, then recolor the surrounding non-X objects.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) X)\n                (not (color_equals (color_of this) X))\n            )\n        )\n        (apply\n            (insert 1 (img_pts_of this) neighbor)\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) X)\n                (not (color_equals (color_of this) X))\n            )\n        )\n        (apply\n            (update_color other)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 8 col 17\n\n                (not (color_equals (color_of this) X))\n                ^\nExpected one of: \n\t* RPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 7,
                "other": 7,
                "filter": 2,
                "and": 2,
                "neighbor_of": 2,
                "color_equals": 4,
                "color_of": 4,
                "X": 4,
                "not": 2,
                "apply": 2,
                "insert": 1,
                "1": 1,
                "img_pts_of": 1,
                "neighbor": 1,
                "update_color": 2,
                "G": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Insert a new object of color B at the top, R to the right, G to the left, and Y at the bottom neighbors of each object of color X.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (insert B top source)\n            (insert R right source)\n            (insert G left source)\n            (insert Y bottom source)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches 'B' in the current parser context, at line 8 col 21\n\n            (insert B top source)\n                    ^\nExpected one of: \n\t* OBJECT_ID\n",
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "other": 1,
                "filter": 1,
                "color_equals": 1,
                "color_of": 1,
                "X": 1,
                "apply": 1,
                "insert": 4,
                "B": 1,
                "top": 1,
                "source": 4,
                "R": 1,
                "right": 1,
                "G": 1,
                "left": 1,
                "Y": 1,
                "bottom": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color different than X, towards the object of color X, if they are neighbors of it.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) X))\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) X)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 3,
                "other": 4,
                "filter": 1,
                "and": 2,
                "not": 1,
                "color_equals": 2,
                "color_of": 2,
                "X": 2,
                "neighbor_of": 1,
                "apply": 1,
                "move_node_max": 1,
                "direction_of": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all single cell objects to the closest X object without overlapping",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) X)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 3,
                "other": 4,
                "filter": 1,
                "and": 2,
                "size_equals": 1,
                "size_of": 1,
                "1": 1,
                "neighbor_of": 1,
                "color_equals": 1,
                "color_of": 1,
                "X": 1,
                "apply": 1,
                "move_node_max": 1,
                "direction_of": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of size 1 to the closest neighboring object of color X.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) X)\n                )\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 3,
                "other": 4,
                "filter": 1,
                "and": 2,
                "size_equals": 1,
                "size_of": 1,
                "1": 1,
                "neighbor_of": 1,
                "color_equals": 1,
                "color_of": 1,
                "X": 1,
                "apply": 1,
                "move_node": 1,
                "direction_of": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of size 1 located at the boundary towards objects of size greater than 1 located next to them",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (neighbor_of this other)\n                (not (size_equals (size_of other) 1))\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 8 col 17\n\n                (not (size_equals (size_of other) 1))\n                ^\nExpected one of: \n\t* RPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 3,
                "other": 4,
                "filter": 1,
                "and": 1,
                "size_equals": 2,
                "size_of": 2,
                "1": 2,
                "neighbor_of": 1,
                "not": 1,
                "apply": 1,
                "move_node_max": 1,
                "direction_of": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color different than X, toward the object of color X, if they are neighbors of it.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) X))\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) X)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 3,
                "other": 4,
                "filter": 1,
                "and": 2,
                "not": 1,
                "color_equals": 2,
                "color_of": 2,
                "X": 2,
                "neighbor_of": 1,
                "apply": 1,
                "move_node_max": 1,
                "direction_of": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor each object to a different color based on their vertical neighbors.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter (and (color_equals (color_of other) X) (neighbor_of this other)))\n        (apply (update_color B))\n    )\n    (rule\n        (vars (this other))\n        (filter (and (color_equals (color_of other) X) (neighbor_of this other)))\n        (apply (update_color R))\n    )\n    (rule\n        (vars (this other))\n        (filter (and (color_equals (color_of other) X) (neighbor_of this other)))\n        (apply (update_color G))\n    )\n    (rule\n        (vars (this other))\n        (filter (and (color_equals (color_of other) X) (neighbor_of this other)))\n        (apply (update_color Y))\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 4,
                "vars": 4,
                "this": 8,
                "other": 12,
                "filter": 4,
                "and": 4,
                "color_equals": 4,
                "color_of": 4,
                "X": 4,
                "neighbor_of": 4,
                "apply": 4,
                "update_color": 4,
                "B": 1,
                "R": 1,
                "G": 1,
                "Y": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color different than X toward the object of color X, if they are neighbors of it.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) X))\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) X)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 3,
                "other": 4,
                "filter": 1,
                "and": 2,
                "not": 1,
                "color_equals": 2,
                "color_of": 2,
                "X": 2,
                "neighbor_of": 1,
                "apply": 1,
                "move_node_max": 1,
                "direction_of": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Insert new objects and position them relative to the object of maximum size, towards all the objects that are neighbors to it, and recolor them to Blue, Red, Green, and Yellow respectively.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (and\n                    (color_equals (color_of this) X)\n                    (size_equals (size_of this) max)\n                )\n            )\n        )\n        (apply\n            (insert 0 bottom_left relative_direction)\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (and\n                    (color_equals (color_of this) X)\n                    (size_equals (size_of this) max)\n                )\n            )\n        )\n        (apply\n            (insert 1 bottom_right relative_direction)\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (and\n                    (color_equals (color_of this) X)\n                    (size_equals (size_of this) max)\n                )\n            )\n        )\n        (apply\n            (insert 2 top_left relative_direction)\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (and\n                    (color_equals (color_of this) X)\n                    (size_equals (size_of this) max)\n                )\n            )\n        )\n        (apply\n            (insert 3 top_right relative_direction)\n            (update_color Y)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches 'r' in the current parser context, at line 14 col 35\n\n            (insert 0 bottom_left relative_direction)\n                                  ^\nExpected one of: \n\t* RELATIVE_POSITION\n",
            "token_counts": {
                "do": 1,
                "rule": 4,
                "vars": 4,
                "this": 16,
                "other": 8,
                "filter": 4,
                "and": 8,
                "neighbor_of": 4,
                "color_equals": 4,
                "color_of": 4,
                "X": 4,
                "size_equals": 4,
                "size_of": 4,
                "max": 4,
                "apply": 4,
                "insert": 4,
                "0": 1,
                "bottom_left": 1,
                "relative_direction": 4,
                "update_color": 4,
                "B": 1,
                "1": 1,
                "bottom_right": 1,
                "R": 1,
                "2": 1,
                "top_left": 1,
                "G": 1,
                "3": 1,
                "top_right": 1,
                "Y": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move and recolor objects of color different than X to the adjacent cells around objects of color X.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) X))\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) X)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 3,
                "other": 4,
                "filter": 1,
                "and": 2,
                "not": 1,
                "color_equals": 2,
                "color_of": 2,
                "X": 2,
                "neighbor_of": 1,
                "apply": 1,
                "move_node_max": 1,
                "direction_of": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of size 1 toward the object of color X, if they are neighbors of it.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) X)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 3,
                "other": 4,
                "filter": 1,
                "and": 2,
                "size_equals": 1,
                "size_of": 1,
                "1": 1,
                "neighbor_of": 1,
                "color_equals": 1,
                "color_of": 1,
                "X": 1,
                "apply": 1,
                "move_node_max": 1,
                "direction_of": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of size 1 adjacent to an object of color X, toward the object of color X, one step.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) X)\n                )\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 3,
                "other": 4,
                "filter": 1,
                "and": 2,
                "size_equals": 1,
                "size_of": 1,
                "1": 1,
                "neighbor_of": 1,
                "color_equals": 1,
                "color_of": 1,
                "X": 1,
                "apply": 1,
                "move_node": 1,
                "direction_of": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Insert objects of colors B, R, G, and Y at the north, east, south, and west neighboring positions of X objects, respectively.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (insert 1 top source)\n            (insert 2 right source)\n            (insert 3 bottom source)\n            (insert 4 left source)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "other": 1,
                "filter": 1,
                "color_equals": 1,
                "color_of": 1,
                "X": 1,
                "apply": 1,
                "insert": 4,
                "1": 1,
                "top": 1,
                "source": 4,
                "2": 1,
                "right": 1,
                "3": 1,
                "bottom": 1,
                "4": 1,
                "left": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Insert objects of color into empty spaces, evenly distributed around the existing objects.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (insert 1 bottom_left target)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 1,
                "filter": 1,
                "apply": 1,
                "insert": 1,
                "1": 1,
                "bottom_left": 1,
                "target": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of size 1 to specific positions, then recolor them to different colors based on pattern.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (size_equals (size_of this) 1)\n        )\n        (apply\n            (move_node (direction_of other))\n            (update_color (color_of other))\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "other": 3,
                "filter": 1,
                "size_equals": 1,
                "size_of": 1,
                "1": 1,
                "apply": 1,
                "move_node": 1,
                "direction_of": 1,
                "update_color": 1,
                "color_of": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Insert objects of size 1 into random neighboring positions of the object",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (insert (this) (img_pts_of this) random)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 11 col 21\n\n            (insert (this) (img_pts_of this) random)\n                    ^\nExpected one of: \n\t* OBJECT_ID\n",
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 5,
                "other": 2,
                "filter": 1,
                "and": 1,
                "size_equals": 1,
                "size_of": 1,
                "1": 1,
                "neighbor_of": 1,
                "apply": 1,
                "insert": 1,
                "img_pts_of": 1,
                "random": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Insert new objects of color B, R, G, and Y respectively near the object X and keep their color as it is.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (or\n                    (color_equals (color_of this) B)\n                    (or\n                        (color_equals (color_of this) R)\n                        (or\n                            (color_equals (color_of this) G)\n                            (color_equals (color_of this) Y)\n                        )\n                    )\n                )\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) X)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 6,
                "other": 4,
                "filter": 1,
                "and": 2,
                "or": 3,
                "color_equals": 5,
                "color_of": 5,
                "B": 1,
                "R": 1,
                "G": 1,
                "Y": 1,
                "neighbor_of": 1,
                "X": 1,
                "apply": 1,
                "move_node_max": 1,
                "direction_of": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects towards the object of color X, and then recolor them based on their height.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) X))\n                (neighbor_of this other)\n                (color_equals (color_of other) X)\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n            (update_color (color_of (this)))\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (not (color_equals (color_of this) X))\n                (or\n                    (height_equals (height_of this) 1)\n                    (height_equals (height_of this) 2)\n                )\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (not (color_equals (color_of this) X))\n                (or\n                    (height_equals (height_of this) 3)\n                    (height_equals (height_of this) 4)\n                )\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (not (color_equals (color_of this) X))\n                (or\n                    (height_equals (height_of this) 5)\n                    (height_equals (height_of this) 6)\n                )\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (not (color_equals (color_of this) X))\n                (height_equals (height_of this) 7)\n            )\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 8 col 17\n\n                (color_equals (color_of other) X)\n                ^\nExpected one of: \n\t* RPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 5,
                "vars": 5,
                "this": 19,
                "other": 4,
                "filter": 5,
                "and": 5,
                "not": 5,
                "color_equals": 6,
                "color_of": 7,
                "X": 6,
                "neighbor_of": 1,
                "apply": 5,
                "move_node": 1,
                "direction_of": 1,
                "update_color": 5,
                "or": 3,
                "height_equals": 7,
                "height_of": 7,
                "1": 1,
                "2": 1,
                "B": 1,
                "3": 1,
                "4": 1,
                "R": 1,
                "5": 1,
                "6": 1,
                "G": 1,
                "7": 1,
                "Y": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move isolated colored objects towards the object of color X and recolor them randomly based on their position.",
            "code": "(do \n    (rule\n        (vars (this other)) \n        (filter\n            (and\n                (not (color_equals (color_of this) X))\n                (and\n                    (size_equals (size_of this) 1)\n                    (neighbor_of this other)\n                    (color_equals (color_of other) X)\n                )\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n            (update_color (color_of this))\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 10 col 21\n\n                    (color_equals (color_of other) X)\n                    ^\nExpected one of: \n\t* RPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 5,
                "other": 4,
                "filter": 1,
                "and": 2,
                "not": 1,
                "color_equals": 2,
                "color_of": 3,
                "X": 2,
                "size_equals": 1,
                "size_of": 1,
                "1": 1,
                "neighbor_of": 1,
                "apply": 1,
                "move_node": 1,
                "direction_of": 1,
                "update_color": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects from column positions 2, 5, 8 to the center columns if they are neighbors of an object of color X.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (or (or (column_equals (column_of this) 2) (column_equals (column_of this) 5)) (column_equals (column_of this) 8))\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) X)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 5,
                "other": 4,
                "filter": 1,
                "and": 2,
                "or": 2,
                "column_equals": 3,
                "column_of": 3,
                "2": 1,
                "5": 1,
                "8": 1,
                "neighbor_of": 1,
                "color_equals": 1,
                "color_of": 1,
                "X": 1,
                "apply": 1,
                "move_node_max": 1,
                "direction_of": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Reposition objects of size 1 to the corners of the objects of color X",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (neighbor_of this other)\n                (color_equals (color_of other) X)\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 8 col 17\n\n                (color_equals (color_of other) X)\n                ^\nExpected one of: \n\t* RPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 3,
                "other": 4,
                "filter": 1,
                "and": 1,
                "size_equals": 1,
                "size_of": 1,
                "1": 1,
                "neighbor_of": 1,
                "color_equals": 1,
                "color_of": 1,
                "X": 1,
                "apply": 1,
                "move_node_max": 1,
                "direction_of": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor objects in the middle rows and columns of size 1 to colors B, R, G, Y in sequence",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 4,
                "vars": 4,
                "this": 12,
                "other": 8,
                "filter": 4,
                "and": 4,
                "size_equals": 4,
                "size_of": 4,
                "1": 4,
                "neighbor_of": 4,
                "apply": 4,
                "update_color": 4,
                "B": 1,
                "R": 1,
                "G": 1,
                "Y": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Insert objects of color X into neighboring empty cells, recoloring the inserted objects.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) X)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (insert 0 (img_pts_of this) source)\n            (update_color (color_of other))\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 4,
                "other": 3,
                "filter": 1,
                "and": 1,
                "color_equals": 1,
                "color_of": 2,
                "X": 1,
                "neighbor_of": 1,
                "apply": 1,
                "insert": 1,
                "0": 1,
                "img_pts_of": 1,
                "source": 1,
                "update_color": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of size 1 to the cells immediately around the object of color X, while retaining their respective colors.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (color_equals (color_of other) X)\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "other": 3,
                "filter": 1,
                "and": 1,
                "size_equals": 1,
                "size_of": 1,
                "1": 1,
                "color_equals": 1,
                "color_of": 1,
                "X": 1,
                "apply": 1,
                "move_node": 1,
                "direction_of": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Insert objects of size 1 in rows that are centered vertically with respect to the objects of color X.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (neighbor_of this other)\n                (color_equals (color_of other) X)\n            )\n        )\n        (apply\n            (insert (this) (img_pts_of other) middle)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 8 col 17\n\n                (color_equals (color_of other) X)\n                ^\nExpected one of: \n\t* RPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 4,
                "other": 4,
                "filter": 1,
                "and": 1,
                "size_equals": 1,
                "size_of": 1,
                "1": 1,
                "neighbor_of": 1,
                "color_equals": 1,
                "color_of": 1,
                "X": 1,
                "apply": 1,
                "insert": 1,
                "img_pts_of": 1,
                "middle": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Insert color markers of colors B, R, G, and Y at specific positions relative to objects of color X.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of other) X)\n        )\n        (apply\n            (insert 1 top)\n            (insert 2 bottom)\n            (insert 3 left)\n            (insert 4 right)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches ')' in the current parser context, at line 8 col 26\n\n            (insert 1 top)\n                         ^\nExpected one of: \n\t* RELATIVE_POSITION\n",
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 1,
                "other": 2,
                "filter": 1,
                "color_equals": 1,
                "color_of": 1,
                "X": 1,
                "apply": 1,
                "insert": 4,
                "1": 1,
                "top": 1,
                "2": 1,
                "bottom": 1,
                "3": 1,
                "left": 1,
                "4": 1,
                "right": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Insert objects of colors different than X at the position of the neighboring objects with color X.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (and\n                    (not (color_equals (color_of this) X))\n                    (color_equals (color_of other) X)\n                )\n            )\n        )\n        (apply\n            (insert (color_of this) (img_pts_of other) source)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 14 col 21\n\n            (insert (color_of this) (img_pts_of other) sourc\n                    ^\nExpected one of: \n\t* OBJECT_ID\n",
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 4,
                "other": 4,
                "filter": 1,
                "and": 2,
                "neighbor_of": 1,
                "not": 1,
                "color_equals": 2,
                "color_of": 3,
                "X": 2,
                "apply": 1,
                "insert": 1,
                "img_pts_of": 1,
                "source": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Insert objects of size 1 (colors B, R, G, and Y) at their positions in the grid where the objects of color X are present.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (color_equals (color_of this) B)\n            )\n        )\n        (apply\n            (insert (size_of this) (img_pts_of other) source)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (color_equals (color_of this) R)\n            )\n        )\n        (apply\n            (insert (size_of this) (img_pts_of other) source)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (color_equals (color_of this) G)\n            )\n        )\n        (apply\n            (insert (size_of this) (img_pts_of other) source)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (color_equals (color_of this) Y)\n            )\n        )\n        (apply\n            (insert (size_of this) (img_pts_of other) source)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 11 col 21\n\n            (insert (size_of this) (img_pts_of other) source\n                    ^\nExpected one of: \n\t* OBJECT_ID\n",
            "token_counts": {
                "do": 1,
                "rule": 4,
                "vars": 4,
                "this": 16,
                "other": 8,
                "filter": 4,
                "and": 4,
                "size_equals": 4,
                "size_of": 8,
                "1": 4,
                "color_equals": 4,
                "color_of": 4,
                "B": 1,
                "apply": 4,
                "insert": 4,
                "img_pts_of": 4,
                "source": 4,
                "R": 1,
                "G": 1,
                "Y": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color different than X towards the nearest X object, if they are neighbors, then recolor them to different colors.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) X))\n                (neighbor_of this other)\n                (color_equals (color_of other) X)\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) G)\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 8 col 17\n\n                (color_equals (color_of other) X)\n                ^\nExpected one of: \n\t* RPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 3,
                "vars": 3,
                "this": 7,
                "other": 4,
                "filter": 3,
                "and": 1,
                "not": 1,
                "color_equals": 4,
                "color_of": 4,
                "X": 2,
                "neighbor_of": 1,
                "apply": 3,
                "move_node_max": 1,
                "direction_of": 1,
                "B": 1,
                "update_color": 2,
                "R": 1,
                "G": 1,
                "Y": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color different than X towards the object of color X, if they are neighbors of it.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) X))\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) X)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 3,
                "other": 4,
                "filter": 1,
                "and": 2,
                "not": 1,
                "color_equals": 2,
                "color_of": 2,
                "X": 2,
                "neighbor_of": 1,
                "apply": 1,
                "move_node_max": 1,
                "direction_of": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of size 1, color them to B, R, G, or Y accordingly to their order, and place them around the object of color X",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (and\n                    (size_equals (size_of this) 1)\n                    (color_equals (color_of other) X)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (and\n                    (size_equals (size_of this) 1)\n                    (color_equals (color_of other) X)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (and\n                    (size_equals (size_of this) 1)\n                    (color_equals (color_of other) X)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (and\n                    (size_equals (size_of this) 1)\n                    (color_equals (color_of other) X)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n            (update_color Y)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 4,
                "vars": 4,
                "this": 12,
                "other": 16,
                "filter": 4,
                "and": 8,
                "neighbor_of": 4,
                "size_equals": 4,
                "size_of": 4,
                "1": 4,
                "color_equals": 4,
                "color_of": 4,
                "X": 4,
                "apply": 4,
                "move_node_max": 4,
                "direction_of": 4,
                "update_color": 4,
                "B": 1,
                "R": 1,
                "G": 1,
                "Y": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color different than X one step towards the center diagonally.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) X))\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) X)\n                )\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 3,
                "other": 4,
                "filter": 1,
                "and": 2,
                "not": 1,
                "color_equals": 2,
                "color_of": 2,
                "X": 2,
                "neighbor_of": 1,
                "apply": 1,
                "move_node": 1,
                "direction_of": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Place new objects colored differently than X, and place them in positions forming a plus (+) pattern around the X object.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (insert 0 top this)\n            (insert 1 bottom this)\n            (insert 2 left this)\n            (insert 3 right this)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches 't' in the current parser context, at line 8 col 27\n\n            (insert 0 top this)\n                          ^\nExpected one of: \n\t* RELATIVE_POSITION\n",
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 6,
                "other": 1,
                "filter": 1,
                "color_equals": 1,
                "color_of": 1,
                "X": 1,
                "apply": 1,
                "insert": 4,
                "0": 1,
                "top": 1,
                "1": 1,
                "bottom": 1,
                "2": 1,
                "left": 1,
                "3": 1,
                "right": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Insert objects of size 1 towards object X, from neighbor objects of size 1.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (and\n                    (neighbor_of this other)\n                    (and\n                        (size_equals (size_of other) 1)\n                        (color_equals (color_of other) X)\n                    )\n                )\n            )\n        )\n        (apply\n            (insert (direction_of other) this target)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 17 col 21\n\n            (insert (direction_of other) this target)\n                    ^\nExpected one of: \n\t* OBJECT_ID\n",
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 4,
                "other": 5,
                "filter": 1,
                "and": 3,
                "size_equals": 2,
                "size_of": 2,
                "1": 2,
                "neighbor_of": 1,
                "color_equals": 1,
                "color_of": 1,
                "X": 1,
                "apply": 1,
                "insert": 1,
                "direction_of": 1,
                "target": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Insert colorful single cells at the same row and column as the middle points of each X object.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 4)\n        )\n        (apply\n            (insert 0 top left) \n            (insert 1 bottom right) \n            (insert 2 top right) \n            (insert 3 bottom left)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches 'l' in the current parser context, at line 8 col 27\n\n            (insert 0 top left) \n                          ^\nExpected one of: \n\t* RELATIVE_POSITION\n",
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "filter": 1,
                "size_equals": 1,
                "size_of": 1,
                "4": 1,
                "apply": 1,
                "insert": 4,
                "0": 1,
                "top": 2,
                "left": 2,
                "1": 1,
                "bottom": 2,
                "right": 2,
                "2": 1,
                "3": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of maximum size to different locations in the grid.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) max)\n        )\n        (apply\n            (move_node (up_left))\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) max)\n        )\n        (apply\n            (move_node (up_right))\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) max)\n        )\n        (apply\n            (move_node (down_left))\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) max)\n        )\n        (apply\n            (move_node (down_right))\n            (update_color Y)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches 'u' in the current parser context, at line 8 col 25\n\n            (move_node (up_left))\n                        ^\nExpected one of: \n\t* DIRECTION_OF\n",
            "token_counts": {
                "do": 1,
                "rule": 4,
                "vars": 4,
                "this": 8,
                "filter": 4,
                "size_equals": 4,
                "size_of": 4,
                "max": 4,
                "apply": 4,
                "move_node": 4,
                "up_left": 1,
                "update_color": 4,
                "B": 1,
                "up_right": 1,
                "R": 1,
                "down_left": 1,
                "G": 1,
                "down_right": 1,
                "Y": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all objects of size 1 to different colors: B, R, G, Y",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (size_equals (size_of this) 1)\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (size_equals (size_of this) 1)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (size_equals (size_of this) 1)\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (size_equals (size_of this) 1)\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 4,
                "vars": 4,
                "this": 8,
                "other": 4,
                "filter": 4,
                "size_equals": 4,
                "size_of": 4,
                "1": 4,
                "apply": 4,
                "update_color": 4,
                "B": 1,
                "R": 1,
                "G": 1,
                "Y": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of size 1 towards the object of color X, without overlapping.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) X)\n                )\n            )\n        )\n        (apply\n            (extend_node (direction_of other) false)\n        )    \n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 3,
                "other": 4,
                "filter": 1,
                "and": 2,
                "size_equals": 1,
                "size_of": 1,
                "1": 1,
                "neighbor_of": 1,
                "color_equals": 1,
                "color_of": 1,
                "X": 1,
                "apply": 1,
                "extend_node": 1,
                "direction_of": 1,
                "false": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move isolated objects to new positions and recolor them.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (not (neighbor_of this this))\n            )\n        )\n        (apply\n            (move_node (direction_of this))\n            (update_color (color_of this))\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 6,
                "filter": 1,
                "and": 1,
                "size_equals": 1,
                "size_of": 1,
                "1": 1,
                "not": 1,
                "neighbor_of": 1,
                "apply": 1,
                "move_node": 1,
                "direction_of": 1,
                "update_color": 1,
                "color_of": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects toward the nearest object of color X, and recolor them to different colors.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) X)\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) O)\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) Y)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 5,
                "vars": 5,
                "this": 10,
                "other": 4,
                "filter": 5,
                "and": 1,
                "neighbor_of": 1,
                "color_equals": 5,
                "color_of": 5,
                "X": 1,
                "apply": 5,
                "move_node_max": 1,
                "direction_of": 1,
                "O": 1,
                "update_color": 4,
                "B": 2,
                "R": 2,
                "G": 1,
                "Y": 2
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move the object of color B, R, G, or Y as close as possible to color X.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (or\n                    (color_equals (color_of this) B)\n                    (or\n                        (color_equals (color_of this) R)\n                        (or\n                            (color_equals (color_of this) G)\n                            (color_equals (color_of this) Y)\n                        )\n                    )\n                )\n                (color_equals (color_of other) X)\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 5,
                "other": 3,
                "filter": 1,
                "and": 1,
                "or": 3,
                "color_equals": 5,
                "color_of": 5,
                "B": 1,
                "R": 1,
                "G": 1,
                "Y": 1,
                "X": 1,
                "apply": 1,
                "move_node_max": 1,
                "direction_of": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move objects of color B, R, G, and Y to create an alternating pattern around objects of color X.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (or\n                    (color_equals (color_of this) B)\n                    (color_equals (color_of this) R)\n                )\n                (neighbor_of this other)\n                (color_equals (color_of other) X)\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (or\n                    (color_equals (color_of this) G)\n                    (color_equals (color_of this) Y)\n                )\n                (neighbor_of this other)\n                (color_equals (color_of other) X)\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 11 col 17\n\n                (color_equals (color_of other) X)\n                ^\nExpected one of: \n\t* RPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 8,
                "other": 8,
                "filter": 2,
                "and": 2,
                "or": 2,
                "color_equals": 6,
                "color_of": 6,
                "B": 1,
                "R": 1,
                "neighbor_of": 2,
                "X": 2,
                "apply": 2,
                "move_node_max": 2,
                "direction_of": 2,
                "G": 1,
                "Y": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Add objects of size 1 and color B, R, G, Y, one step away from the nearest object of color X.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) X)\n                )\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 3,
                "other": 4,
                "filter": 1,
                "and": 2,
                "size_equals": 1,
                "size_of": 1,
                "1": 1,
                "neighbor_of": 1,
                "color_equals": 1,
                "color_of": 1,
                "X": 1,
                "apply": 1,
                "move_node": 1,
                "direction_of": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Insert new objects of colors B, R, G, Y in respective positions around objects of color X.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (insert 1 top_left source)\n            (insert 2 top middle)\n            (insert 3 bottom_left source)\n            (insert 4 bottom middle)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) 1)\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) 2)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) 3)\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) 4)\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '1' in the current parser context, at line 17 col 43\n\n          (color_equals (color_of this) 1)\n                                        ^\nExpected one of: \n\t* LPAR\n\t* FCOLOR\n",
            "token_counts": {
                "do": 1,
                "rule": 5,
                "vars": 5,
                "this": 10,
                "other": 1,
                "filter": 5,
                "color_equals": 5,
                "color_of": 5,
                "X": 1,
                "apply": 5,
                "insert": 4,
                "1": 2,
                "top_left": 1,
                "source": 2,
                "2": 2,
                "top": 1,
                "middle": 2,
                "3": 2,
                "bottom_left": 1,
                "4": 2,
                "bottom": 1,
                "update_color": 4,
                "B": 1,
                "R": 1,
                "G": 1,
                "Y": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of size 2 one step up, and then recolor them to different colors (B, R, G, Y) in pairs.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 2)\n        )\n        (apply\n            (move_node up)\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 2)\n        )\n        (apply\n            (move_node up)\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 2)\n        )\n        (apply\n            (move_node up)\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 2)\n        )\n        (apply\n            (move_node up)\n            (update_color Y)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 4,
                "vars": 4,
                "this": 8,
                "filter": 4,
                "size_equals": 4,
                "size_of": 4,
                "2": 4,
                "apply": 4,
                "move_node": 4,
                "up": 4,
                "update_color": 4,
                "B": 1,
                "R": 1,
                "G": 1,
                "Y": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Reinsert objects of size 1 around objects of color X in every blank space next to them.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (neighbor_of this other)\n                (color_equals (color_of other) X)\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 8 col 17\n\n                (color_equals (color_of other) X)\n                ^\nExpected one of: \n\t* RPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 3,
                "other": 4,
                "filter": 1,
                "and": 1,
                "size_equals": 1,
                "size_of": 1,
                "1": 1,
                "neighbor_of": 1,
                "color_equals": 1,
                "color_of": 1,
                "X": 1,
                "apply": 1,
                "move_node_max": 1,
                "direction_of": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move the isolated objects to the closest corners of objects having color X and size of at least 2x2.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (or\n                    (size_equals (size_of this) 1)\n                    (size_equals (size_of this) even)\n                )\n                (and\n                    (neighbor_of this other)\n                    (and\n                        (color_equals (color_of other) X)\n                        (or\n                            (and (width_equals (width_of other) even) (height_equals (height_of other) 2))\n                            (and (width_equals (width_of other) 2) (height_equals (height_of other) even))\n                        )\n                    )\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 4,
                "other": 8,
                "filter": 1,
                "and": 5,
                "or": 2,
                "size_equals": 2,
                "size_of": 2,
                "1": 1,
                "even": 3,
                "neighbor_of": 1,
                "color_equals": 1,
                "color_of": 1,
                "X": 1,
                "width_equals": 2,
                "width_of": 2,
                "height_equals": 2,
                "height_of": 2,
                "2": 2,
                "apply": 1,
                "move_node_max": 1,
                "direction_of": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all the objects of size 1 to the boundary cells of the grid.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (size_equals (size_of this) 1)\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )    \n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "other": 2,
                "filter": 1,
                "size_equals": 1,
                "size_of": 1,
                "1": 1,
                "apply": 1,
                "move_node_max": 1,
                "direction_of": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Insert colors B, R, G, and Y into empty spaces forming a plus sign pattern around the objects of color X.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (insert 0 top source)\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (insert 0 left source)\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (insert 0 bottom source)\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (insert 0 right source)\n            (update_color Y)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 4,
                "vars": 4,
                "this": 8,
                "other": 4,
                "filter": 4,
                "color_equals": 4,
                "color_of": 4,
                "X": 4,
                "apply": 4,
                "insert": 4,
                "0": 4,
                "top": 1,
                "source": 4,
                "update_color": 4,
                "B": 1,
                "left": 1,
                "R": 1,
                "bottom": 1,
                "G": 1,
                "right": 1,
                "Y": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Insert objects of color B, R, G, Y randomly around objects of color X",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) X)\n            )\n        )\n        (apply\n            (insert 1 B source)\n            (insert 2 R source)\n            (insert 3 G source)\n            (insert 4 Y source)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches 'B' in the current parser context, at line 11 col 23\n\n            (insert 1 B source)\n                      ^\nExpected one of: \n\t* LPAR\n\t* IMAGE_POINTS\n",
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "other": 3,
                "filter": 1,
                "and": 1,
                "neighbor_of": 1,
                "color_equals": 1,
                "color_of": 1,
                "X": 1,
                "apply": 1,
                "insert": 4,
                "1": 1,
                "B": 1,
                "source": 4,
                "2": 1,
                "R": 1,
                "3": 1,
                "G": 1,
                "4": 1,
                "Y": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Insert objects of color X at the boundaries of the grid, and recolor the objects at those positions.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (insert 0 top_left source)\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (insert 0 top_right source)\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (insert 0 bottom_left source)\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (insert 0 bottom_right source)\n            (update_color Y)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 4,
                "vars": 4,
                "this": 8,
                "other": 4,
                "filter": 4,
                "color_equals": 4,
                "color_of": 4,
                "X": 4,
                "apply": 4,
                "insert": 4,
                "0": 4,
                "top_left": 1,
                "source": 4,
                "update_color": 4,
                "B": 1,
                "top_right": 1,
                "R": 1,
                "bottom_left": 1,
                "G": 1,
                "bottom_right": 1,
                "Y": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color X without overlapping.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (move_node_max (direction_of this))\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 3,
                "filter": 1,
                "color_equals": 1,
                "color_of": 1,
                "X": 1,
                "apply": 1,
                "move_node_max": 1,
                "direction_of": 1
            }
        }
    ],
    "task_id": "95990924"
}