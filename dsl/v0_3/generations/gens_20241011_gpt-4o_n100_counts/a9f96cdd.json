{
    "model": "gpt-4o-2024-05-13",
    "usage": {
        "completion_tokens": 16644,
        "prompt_tokens": 5268,
        "total_tokens": 21912,
        "prompt_tokens_details": {
            "cached_tokens": 0
        },
        "completion_tokens_details": {
            "reasoning_tokens": 0
        }
    },
    "request_time": 12.973304986953735,
    "n_requested": 100,
    "prompt_messages": [
        {
            "role": "system",
            "content": "You are an assistant chatbot with human-like perception, reasoning and learning capabilities.\nYou can solve tasks concisely, efficiently, and moreover, correctly.\nLet's engage in perception- and logic-based tasks.\nYou only output source code.\nNo explanations or any other text.\nOnly code."
        },
        {
            "role": "user",
            "content": "You are an efficient assistant for logical reasoning and code generation.\nYou will help me solve a visual perception and reasoning task.\nI will first provide you with the definition of a Domain Specific Language you will use for writing a solution for the task.\nI will then present you with the description of the task that you will be tested in.\nYou will then respond the queries I make regarding the solution of the task.\n\n\nThis is the definition of the DSL you will use to solve the task.\nIt is given as a context-free grammar in the EBNF format used by the Lark parser generator, with some informative comments about the semantics.\nYou will return a string that is parseable by the `program` non-terminal of the grammar.\n\n```\nlibrary: \"(\" program* \")\"\n\n// Rules are executed one after another, in the order they appear.\n// There could be no rules, in which case the program does nothing.\nprogram: \"(\" \"do\" rule* \")\"\n\n// First, it declares the variables that will be used in the filter and transform expressions.\n// Second, it defines a filter expression that an object must satisfy in order to be transformed.\n// Then, it defines a list of transforms that will be applied objects that satisfy the filter expression.\nrule: \"(\" \"rule\" decl filter xform_list \")\"\n\n// The `vars` declaration specifies the names of the variables that will be used in the filter and transform expressions.\n// The `this` variable is always declared, and it refers to the object that is being transformed.\n// There could also be an additional optional variable `other` that refers to another object in the grid,\n// which is not being transformed, but is used in the filter expression.\ndecl: \"(\" \"vars\" \"(\" VAR_THIS VAR_OTHER? \")\" \")\"\n\n// A filter is a predicate over the objects in the grid.\n// If no filter is given, then all the objects are selected.\nfilter: \"(\" \"filter\" filter_expr? \")\"\n\n// It can be a primitive filter operation, or a boolean expression using the `and`, `or`, and `not` connectives.\n// IMPORTANT: The `and` and `or` connectives are strictly binary, so to take the conjunction or disjunction \n// of more than two expressions, the binary connectives must be nested.\n// AGAIN, the `and` and `or` connectives are not variadic, so the following is not allowed:\n// (and true true false)\n// Instead, the following must be used:\n// (and true (and true false))\n// The `not` connective is unary as expected.\n// The objects that are transformed are the ones that satisfy the filter expression.\nfilter_expr: filter_prim\n           | \"(\" OP_AND filter_expr filter_expr \")\"   \n           | \"(\" OP_OR filter_expr filter_expr \")\"\n           | \"(\" OP_NOT filter_expr \")\"\n\nfilter_prim: \"(\" COLOR_EQ fcolor_expr fcolor_expr \")\"           \n           | \"(\" SIZE_EQ size_expr size_expr \")\"                \n           | \"(\" HEIGHT_EQ height_expr height_expr \")\"          \n           | \"(\" WIDTH_EQ width_expr width_expr \")\"             \n           | \"(\" DEGREE_EQ degree_expr degree_expr \")\"          \n           | \"(\" SHAPE_EQ shape_expr shape_expr \")\"             \n           | \"(\" COLUMN_EQ column_expr column_expr \")\"         \n           | \"(\" NEIGHBOR_OF VAR VAR \")\"      // true if the two objects are neighbors\n\n\n// Transforms are applied one after another, in the order they appear.\nxform_list: \"(\" \"apply\" xform+ \")\"\n\n// A single transform is applied to all the objects that are bound to the `this` variable. \n// The transform is applied to each such object independently and simultaneously.\nxform:     \"(\" TR_UPDATE_COLOR color_expr \")\"                          // change this object color to the given color \n         | \"(\" TR_MOVE_NODE direction_expr \")\"                         // move this object in the given direction\n         | \"(\" TR_EXTEND_NODE direction_expr OVERLAP \")\"               // extend (move while leaving a trail) this object in the given direction\n                                                                  // if overlap is false, then the object is extended until it hits another object,\n                                                                  // otherwise it is extended until the edge of the grid.\n         | \"(\" TR_MOVE_NODE_MAX direction_expr \")\"                     // move this object until it hits another object, in the given direction\n         | \"(\" TR_ROTATE_NODE ROT_ANGLE \")\"                       // rotate this object by the given angle\n         | \"(\" TR_ADD_BORDER color_expr \")\"                            // color this exterior pixels of the object with the given color\n         | \"(\" TR_FILL_RECTANGLE color_expr OVERLAP \")\"                // color this interior of a hollow rectangle with the given color\n         | \"(\" TR_HOLLOW_RECTANGLE color_expr \")\"                      // color this interior of a solid rectangle with the given color\n         | \"(\" TR_MIRROR mirror_expr \")\"\n         | \"(\" TR_FLIP SYMMETRY_AXIS \")\"                          // flip this object with respect to the given axis\n         | \"(\" TR_INSERT OBJECT_ID img_pts_expr RELATIVE_POSITION \")\" // insert a copy of this object at the position of the given object\n         | \"(\" TR_NOOP \")\"                                        // do nothing\n\nfcolor_expr: FCOLOR\n           | \"(\" COLOR_OF VAR \")\"\n\ncolor_expr: COLOR\n          | \"(\" COLOR_OF VAR \")\"\n\nsize_expr: SIZE\n         | \"(\" SIZE_OF VAR \")\"\n\nheight_expr: HEIGHT\n           | \"(\" HEIGHT_OF VAR \")\"\n\nwidth_expr: WIDTH\n          | \"(\" WIDTH_OF VAR \")\"\n\ndegree_expr: DEGREE\n           | \"(\" DEGREE_OF VAR \")\" \n\nshape_expr: SHAPE\n          | \"(\" SHAPE_OF VAR \")\"\n\ncolumn_expr: COLUMN\n           | \"(\" COLUMN_OF VAR \")\"\n\ndirection_expr: DIRECTION\n              | \"(\" DIRECTION_OF VAR \")\"\n\nimg_pts_expr: IMAGE_POINTS\n            | \"(\" IMAGE_POINTS_OF VAR \")\"\n\nmirror_expr: \"(\" MIRROR_AXIS_OF VAR \")\"\n\nOBJECT_ID: /[0-9]+/\nFCOLOR: \"O\" // black\n      | \"B\" // blue\n      | \"R\" // red\n      | \"G\" // green\n      | \"Y\" // yellow\n      | \"X\" // grey\n      | \"F\" // fuchsia\n      | \"A\" // orange\n      | \"C\" // cyan  \n      | \"W\" // brown\n\nSIZE: \"min\" | \"max\" | \"even\" | \"odd\" | /[0-9]+/  // size of objects\nDEGREE: \"min\" | \"max\" | \"even\" | \"odd\" | /[0-9]+/  // degree of objects\nHEIGHT: \"min\" | \"max\" | \"even\" | \"odd\" | /[0-9]+/  // height of objects\nWIDTH: \"min\" | \"max\" | \"even\" | \"odd\" | /[0-9]+/  // width of objects\nCOLUMN: \"center\" | \"even\" | \"odd\" | /[0-9]+/  // column of objects\nSHAPE: \"square\" | \"enclosed\"  // shape of objects\n\nDIRECTION: \"up\"\n         | \"down\"\n         | \"left\"\n         | \"right\"\n         | \"up_left\"\n         | \"up_right\"\n         | \"down_left\"\n         | \"down_right\"\n\nSYMMETRY_AXIS: \"vertical\" | \"horizontal\" | \"diagonal_left\" | \"diagonal_right\"\n\n// The angle of clockwise rotation, in degrees.\nROT_ANGLE: \"0\" \n         | \"90\" \n         | \"180\" \n         | \"270\"\n\nCOLOR: \"O\" // black\n      | \"B\" // blue\n      | \"R\" // red\n      | \"G\" // green\n      | \"Y\" // yellow\n      | \"X\" // grey\n      | \"F\" // fuchsia\n      | \"A\" // orange\n      | \"C\" // cyan  \n      | \"W\" // brown\n\nOVERLAP: BOOL\n\nBOOL: \"true\" | \"false\"\n\nIMAGE_POINTS: \"top\" | \"bottom\" | \"left\" | \"right\" | \"top_left\" | \"top_right\" | \"bottom_left\" | \"bottom_right\" \n\nRELATIVE_POSITION: \"source\"\n                 | \"target\"\n                 | \"middle\"\n\nVAR: VAR_THIS | VAR_OTHER\nVAR_THIS: \"this\"\nVAR_OTHER: \"other\"\n\nOP_AND: \"and\"\nOP_OR: \"or\"\nOP_NOT: \"not\"\n\nCOLOR_OF: \"color_of\"\nSIZE_OF: \"size_of\"\nHEIGHT_OF: \"height_of\"\nWIDTH_OF: \"width_of\"\nDEGREE_OF: \"degree_of\"\nSHAPE_OF: \"shape_of\"\nCOLUMN_OF: \"column_of\"\nDIRECTION_OF: \"direction_of\"\nIMAGE_POINTS_OF: \"img_pts_of\"\nMIRROR_AXIS_OF: \"mirror_axis_of\"\n\nCOLOR_EQ: \"color_equals\"\nSIZE_EQ: \"size_equals\"\nDEGREE_EQ: \"degree_equals\"\nHEIGHT_EQ: \"height_equals\"\nWIDTH_EQ: \"width_equals\"\nSHAPE_EQ: \"shape_equals\"\nCOLUMN_EQ: \"column_equals\"\nNEIGHBOR_OF: \"neighbor_of\"\n\nTR_UPDATE_COLOR: \"update_color\"\nTR_MOVE_NODE: \"move_node\"\nTR_EXTEND_NODE: \"extend_node\"\nTR_MOVE_NODE_MAX: \"move_node_max\"\nTR_ROTATE_NODE: \"rotate_node\"\nTR_ADD_BORDER: \"add_border\"\nTR_FILL_RECTANGLE: \"fill_rectangle\"\nTR_HOLLOW_RECTANGLE: \"hollow_rectangle\"\nTR_MIRROR: \"mirror\"\nTR_FLIP: \"flip\"\nTR_INSERT: \"insert\"\nTR_NOOP: \"noop\"\n\nCOMMENT: /\\s*/ \";;\" /[^\\n]/*\n\n%import common.WS\n%import common.LCASE_LETTER\n%import common.INT\n%ignore WS\n%ignore COMMENT\n```\n\n\nNow we continue with the visual perception and reasoning task.\nThe input for the task is a small number of pairs of grids of characters.\nThe value of each of the cells of the grids are the colors defined in the DSL, so we can think of grids as images.\nEach pair of images correspond to an input-output example for an unknown program P.\nFor each pair, the program P is evaluated on the image grid and operates on the objects that appear in it.\nThe output of the program is then the output image.\nThe objects in the images are easy and natural to identify for humans, so there is no need to define them explicitly.\nHowever you are able to abstract them correctly, and the DSL is interpreted with the same correct abstraction.\n\n\nNow I will show you some demonstration tasks along with the output you would be expected to produce for each of them.\n\n## DEMONSTRATION TASK 1\n\n### INPUT\nPAIR 1\nINPUT GRID:\nO O O O O O O O\nO O O O O R O O\nO R O O O R O R\nO R R O O R O O\nO O O O O O O O\nO R R O O O O O\nO R R O R R O O\nO O O O O O O O\nOUTPUT GRID:\nO O O O O O O O\nO O O O O Y O O\nO Y O O O Y O Y\nO Y Y O O Y O O\nO O O O O O O O\nO Y Y O O O O O\nO Y Y O Y Y O O\nO O O O O O O O\n\nPAIR 2\nINPUT GRID:\nO O O O O O O O O O\nO O O O R O O O O O\nO G O O R O O W O O\nO O G O O O W W O O\nO O G O O O O O O O\nO O O O X O O O O O\nO O O O O O F F F O\nO B O O O O O O O O\nO B B B B O O C C O\nO O O O O O O C O O\nOUTPUT GRID:\nO O O O O O O O O O\nO O O O Y O O O O O\nO Y O O Y O O Y O O\nO O Y O O O Y Y O O\nO O Y O O O O O O O\nO O O O Y O O O O O\nO O O O O O Y Y Y O\nO Y O O O O O O O O\nO Y Y Y Y O O Y Y O\nO O O O O O O Y O O\n\n### EXPECTED OUTPUT\n{\n    \"nl_description\": \"Recolor all objects to color Y\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color Y)\\n        )\\n    )\\n)\"\n}\n\n\n## DEMONSTRATION TASK 2\n\n### INPUT\nPAIR 1\nINPUT GRID:\nO O O O O O O O\nO F F O O O R O\nO F F O O O O O\nO O O O O O O O\nO O O O O O O O\nO O O O O O O O\nO O A O O X X O\nO O O O O O O O\nOUTPUT GRID:\nO O O O O O O O\nO F F R R R R O\nO F F O O O O O\nO O A O O O O O\nO O A O O O O O\nO O A O O O O O\nO O A O O X X O\nO O O O O O O O\n\nPAIR 2\nINPUT GRID:\nO O O O O O O O O O\nO O O Y O G G G G O\nO O F O O G G G G O\nO O O O O O O O O O\nO O O O O O O O O O\nO O O O O O O O O O\nO C C C O O O O O O\nO C C C O O O O A O\nO C C C O O O X O O\nO O O O O O O O O O\nOUTPUT GRID:\nO O O O O O O O O O\nO O O Y O G G G G O\nO O F Y O G G G G O\nO O F Y O O O O O O\nO O F Y O O O O O O\nO O F Y O O O O O O\nO C C C O O O O O O\nO C C C A A A A A O\nO C C C X X X X O O\nO O O O O O O O O O\n\n### EXPECTED OUTPUT\n{\n    \"nl_description\": \"Extend all the objects of size 1 toward the object of maximum size, without overlapping.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (size_equals (size_of this) 1)\\n                (and\\n                    (neighbor_of this other)\\n                    (size_equals (size_of other) max)\\n                )\\n            )\\n        )\\n        (apply\\n            (extend_node (direction_of other) false)\\n        )    \\n    )\\n)\"\n}\n\n\n## DEMONSTRATION TASK 3\n\n### INPUT\nPAIR 1\nINPUT GRID:\nO O O O O O O O O O\nO O O O O O O G O O\nO O G O O O O G O O\nO O G G O O O G G O\nO O O O O O O O O O\nO G G O O O O O O O\nO G G O O G G G O O\nO O O O O O O O O O\nO O G G O O O G O O\nO O O O O O O O O O\nOUTPUT GRID:\nO O O O O O O O O O\nO O B O O O O G O O\nO O B B O O O G O O\nO O O O O O O G G O\nO O O O O O O O O O\nO G G O O B B B O O\nO G G O O O O O O O\nO O O O O O O O O O\nO O G G O O O G O O\nO O O O O O O O O O\n\nPAIR 2\nINPUT GRID:\nO O O O O O O O O O O O O O O O\nO O O O O O O O O O O O O G O O\nO B B O O O O O O C C C O G G O\nO O O O O F O O O O O O O O O O\nO O O O O F O O O O R R O O O O\nO O O O O F O O O O R R O O O O\nO O O O O O O O W O O O O O O O\nO O O A O O O W W O O O X O O O\nO O O A A O O W W O O O X X X O\nO O O O O O O O O O O O O O O O\nO O O O O O O O O O Y Y O O O O\nO O O O B O O O O O O O O O O O\nO Y O O B O O O G O O O O F F O\nO Y O O O O O O G O O O O F F O\nO Y Y Y O O O O G O O O O O O O\nO O O O O O O O O O O O O O O O\nOUTPUT GRID:\nO O O O O O O O O O O O O B O O\nO O O O O O O O O B B B O B B O\nO B B O O B O O O O O O O O O O\nO O O O O B O O O O O O O O O O\nO O O O O B O O O O R R O O O O\nO O O O O O O O O O R R O O O O\nO O O B O O O O W O O O O O O O\nO O O B B O O W W O O O X O O O\nO O O O O O O W W O O O X X X O\nO O O O O O O O O O O O O O O O\nO O O O O O O O O O Y Y O O O O\nO O O O B O O O B O O O O O O O\nO Y O O B O O O B O O O O F F O\nO Y O O O O O O B O O O O F F O\nO Y Y Y O O O O O O O O O O O O\nO O O O O O O O O O O O O O O O\n\n### EXPECTED OUTPUT\n{\n    \"nl_description\": \"Move all objects of size 3 one step up, and then recolor them to color B.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (size_equals (size_of this) 3)\\n        )\\n        (apply\\n            (move_node up)\\n            (update_color B)\\n        )\\n    )\\n)\"\n}\n\n\n## DEMONSTRATION TASK 4\n\n### INPUT\nPAIR 1\nINPUT GRID:\nO O O O R O O O A O\nO B O O O O B O O O\nO O O O O O O O O O\nO O O O X X X O O O\nO O O O X X X O O F\nW O O O O O O O O O\nO O F O O O Y O O O\nO O O O O O O O O O\nO O O O G O O O W O\nO O O O O O O O O O\nOUTPUT GRID:\nO O O O O O O O A O\nO B O O O O O O O O\nO O O O R O B O O O\nO O O O X X X O O O\nO O O O X X X F O O\nW O O O G O Y O O O\nO O F O O O O O O O\nO O O O O O O O O O\nO O O O O O O O W O\nO O O O O O O O O O\n\nPAIR 2\nINPUT GRID:\nO O O F O O O R O O O O\nO O O O O O O O O Y O O\nO O O O O B O O O O O O\nO O R O O O O O G O O O\nB O O O O G O O O O O A\nO O O O O O R O O O W O\nO O O O O O O O C O O O\nG O X X O O O O O O O R\nO O X X O O O O O O Y O\nO O X X O O A O O O O O\nO F X X O O O O O O O O\nO O O O O Y O O O O O O\nOUTPUT GRID:\nO O O O O O O R O O O O\nO O O O O O O O O Y O O\nO O O O O B O O O O O O\nO O O O O O O O G O O O\nB O O O O G O O O O O A\nO O O O O O R O O O W O\nO O R F O O O O C O O O\nO G X X R O O O O O O O\nO O X X Y O O O O O O O\nO O X X A O O O O O O O\nO F X X O O O O O O O O\nO O O O O Y O O O O O O\n\nPAIR 3\nINPUT GRID:\nO G O O O O O O\nO O O A O O A O\nW O O O W O O O\nO O O O O O O B\nO R O X O F O O\nO O O O O O O O\nO G O O F O O G\nO O B O O A O O\nOUTPUT GRID:\nO G O O O O O O\nO O O O O O A O\nW O O O W O O O\nO O O A O O O B\nO O R X F O O O\nO O O O O O O O\nO G O O F O O G\nO O B O O A O O\n\n### EXPECTED OUTPUT\n{\n    \"nl_description\": \"Move all objects of color different than X, toward the object of color X, if they are neighbors of it.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (not (color_equals (color_of this) X))\\n                (and\\n                    (neighbor_of this other)\\n                    (color_equals (color_of other) X)\\n                )\\n            )\\n        )\\n        (apply\\n            (move_node_max (direction_of other))\\n        )\\n    )\\n)\"\n}\n\n\nNow follows task you will be evaluated on.\nOutput the solution as a JSON object, which should contain both a natural language description of the solution and the solution written in the DSL.\nThe code should be parseable by the DSL grammar.\nThe JSON must have the following structure:\n\n{\n    \"nl_description\": \"TO_BE_FILLED\",\n    \"code\": \"TO_BE_FILLED\"\n}\n\n## TEST TASK\n\nPAIR 1\nINPUT GRID:\nO O O O O\nO R O O O\nO O O O O\nOUTPUT GRID:\nG O F O O\nO O O O O\nC O A O O\n\nPAIR 2\nINPUT GRID:\nO O O O O\nO O O O O\nO O O O R\nOUTPUT GRID:\nO O O O O\nO O O G O\nO O O O O\n\nPAIR 3\nINPUT GRID:\nO O R O O\nO O O O O\nO O O O O\nOUTPUT GRID:\nO O O O O\nO C O A O\nO O O O O\n\nPAIR 4\nINPUT GRID:\nO O O O O\nO O O R O\nO O O O O\nOUTPUT GRID:\nO O G O F\nO O O O O\nO O C O A\n"
        }
    ],
    "n_valid_json": 100,
    "n_can_parse": 84,
    "completions": [
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color R to the corners and recolor them clockwise starting from the top-left with colors G, F, C, and A.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node_max up_left)\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node_max up_right)\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node_max down_left)\n            (update_color C)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node_max down_right)\n            (update_color A)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 4,
                "vars": 4,
                "this": 8,
                "filter": 4,
                "color_equals": 4,
                "color_of": 4,
                "R": 4,
                "apply": 4,
                "move_node_max": 4,
                "up_left": 1,
                "update_color": 4,
                "G": 1,
                "up_right": 1,
                "F": 1,
                "down_left": 1,
                "C": 1,
                "down_right": 1,
                "A": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all red objects one step left",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node left)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "filter": 1,
                "color_equals": 1,
                "color_of": 1,
                "R": 1,
                "apply": 1,
                "move_node": 1,
                "left": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color R one step diagonally down and left and recolor them based on their position.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node down_left)\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of other) G)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (move_node down_left)\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of other) F)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (move_node down_left)\n            (update_color C)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of other) C)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (move_node down_left)\n            (update_color A)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 4,
                "vars": 4,
                "this": 8,
                "filter": 4,
                "color_equals": 4,
                "color_of": 4,
                "R": 1,
                "apply": 4,
                "move_node": 4,
                "down_left": 4,
                "update_color": 4,
                "G": 2,
                "other": 9,
                "and": 3,
                "neighbor_of": 3,
                "F": 2,
                "C": 2,
                "A": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color R to the last seen G position and recolor them to the last seen color in the order G, F, C, A.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node_max down)\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) G)\n        )\n        (apply\n            (move_node_max down)\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) F)\n        )\n        (apply\n            (move_node_max down)\n            (update_color C)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) C)\n        )\n        (apply\n            (move_node_max down)\n            (update_color A)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 4,
                "vars": 4,
                "this": 8,
                "filter": 4,
                "color_equals": 4,
                "color_of": 4,
                "R": 1,
                "apply": 4,
                "move_node_max": 4,
                "down": 4,
                "update_color": 4,
                "G": 2,
                "F": 2,
                "C": 2,
                "A": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color R to the top-left-most unoccupied position in the entire grid. Then, recolor them in sequence with colors G, F, C, A from top to bottom.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node_max up_left)\n            (update_color G)\n            (update_color F)\n            (update_color C)\n            (update_color A)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "filter": 1,
                "color_equals": 1,
                "color_of": 1,
                "R": 1,
                "apply": 1,
                "move_node_max": 1,
                "up_left": 1,
                "update_color": 4,
                "G": 1,
                "F": 1,
                "C": 1,
                "A": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects towards the closest border they are located on.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (column_equals (column_of this) 2)\n        )\n        (apply\n            (move_node_max left)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (row_equals (row_of this) 2)\n        )\n        (apply\n            (move_node_max up)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (column_equals (column_of this) 4)\n        )\n        (apply\n            (move_node_max right)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (row_equals (row_of this) 4)\n        )\n        (apply\n            (move_node_max down)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches 'r' in the current parser context, at line 14 col 14\n\n            (row_equals (row_of this) 2)\n             ^\nExpected one of: \n\t* SHAPE_EQ\n\t* OP_NOT\n\t* OP_AND\n\t* WIDTH_EQ\n\t* DEGREE_EQ\n\t* SIZE_EQ\n\t* COLUMN_EQ\n\t* COLOR_EQ\n\t* NEIGHBOR_OF\n\t* HEIGHT_EQ\n\t* OP_OR\n",
            "token_counts": {
                "do": 1,
                "rule": 4,
                "vars": 4,
                "this": 8,
                "other": 4,
                "filter": 4,
                "column_equals": 2,
                "column_of": 2,
                "2": 2,
                "apply": 4,
                "move_node_max": 4,
                "left": 1,
                "row_equals": 2,
                "row_of": 2,
                "up": 1,
                "4": 2,
                "right": 1,
                "down": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Change the color of any isolated object to a specific color pattern: For position (r1, c2) to G, for position (r2, c3) to C, for position (r2, c4) to A, for position (r1, c4) to F.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (size_equals (size_of other) 1)\n                (color_equals (color_of other) R)\n            )\n        )\n        (apply\n            (update_color O)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (not (color_equals (color_of this) O))\n            )\n        )\n        (apply\n            (extend_node right false)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) O)\n                (color_equals (color_of this) O)\n            )\n        )\n        (apply\n            (extend_node down false)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 8 col 17\n\n                (color_equals (color_of other) R)\n                ^\nExpected one of: \n\t* RPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 3,
                "vars": 3,
                "this": 8,
                "other": 5,
                "filter": 3,
                "and": 3,
                "neighbor_of": 1,
                "size_equals": 2,
                "size_of": 2,
                "1": 2,
                "color_equals": 4,
                "color_of": 4,
                "R": 1,
                "apply": 3,
                "update_color": 1,
                "O": 4,
                "not": 1,
                "extend_node": 2,
                "right": 1,
                "false": 2,
                "down": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of size 1 to a randomized position.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (size_equals (size_of this) 1))\n        (apply (move_node random))\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches 'r' in the current parser context, at line 5 col 27\n\n        (apply (move_node random))\n                          ^\nExpected one of: \n\t* LPAR\n\t* DIRECTION\n",
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "filter": 1,
                "size_equals": 1,
                "size_of": 1,
                "1": 1,
                "apply": 1,
                "move_node": 1,
                "random": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move every object of color R one step down and then one step left, the change its color to the adjacent objects.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n\t    (apply\n\t        (move_node down)\n\t        (move_node left)\n            (update_color (color_of this))\n         )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 3,
                "filter": 1,
                "color_equals": 1,
                "color_of": 2,
                "R": 1,
                "apply": 1,
                "move_node": 2,
                "down": 1,
                "left": 1,
                "update_color": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move each non-background object in a 4-step sequence: first move up, then left, then recolor to the color of the nearest background object (top-to-bottom, left-to-right for ties).",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (not (color_equals (color_of this) O)))\n        (apply\n            (move_node up)\n            (move_node left)\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter (not (color_equals (color_of this) O)))\n        (apply\n            (update_color C)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter (not (color_equals (color_of this) O)))\n        (apply\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter (not (color_equals (color_of this) O)))\n        (apply\n            (move_node right)\n            (update_color A)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 4,
                "vars": 4,
                "this": 8,
                "filter": 4,
                "not": 4,
                "color_equals": 4,
                "color_of": 4,
                "O": 4,
                "apply": 4,
                "move_node": 3,
                "up": 1,
                "left": 1,
                "update_color": 4,
                "G": 1,
                "C": 1,
                "F": 1,
                "right": 1,
                "A": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor objects of color R according to size-based color mapping.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (update_color C)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (update_color A)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 4,
                "vars": 4,
                "this": 8,
                "filter": 4,
                "color_equals": 4,
                "color_of": 4,
                "R": 4,
                "apply": 4,
                "update_color": 4,
                "G": 1,
                "F": 1,
                "C": 1,
                "A": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all objects of color R. The new colors are G, F, C, and A, one per instance of R in each sample.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (update_color G)\n            (update_color F)\n            (update_color C)\n            (update_color A)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "filter": 1,
                "color_equals": 1,
                "color_of": 1,
                "R": 1,
                "apply": 1,
                "update_color": 4,
                "G": 1,
                "F": 1,
                "C": 1,
                "A": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move red objects towards an empty cell and recolor each to the next non-empty color. If it's the last color, move it to the beginning.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node down)\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) G)\n        )\n        (apply\n            (move_node down)\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) F)\n        )\n        (apply\n            (move_node down)\n            (update_color C)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) C)\n        )\n        (apply\n            (move_node down)\n            (update_color A)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) A)\n        )\n        (apply\n            (move_node down)\n            (update_color C)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 5,
                "vars": 5,
                "this": 10,
                "filter": 5,
                "color_equals": 5,
                "color_of": 5,
                "R": 1,
                "apply": 5,
                "move_node": 5,
                "down": 5,
                "update_color": 5,
                "G": 2,
                "F": 2,
                "C": 3,
                "A": 2
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "The colors of objects are rotated one step clockwise around the red objects.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (update_color O)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (neighbor_of this other)\n        )\n        (apply\n            (move_node_max (direction_of other))\n            (rotate_node (mirror_axis_of other))\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 18 col 26\n\n            (rotate_node (mirror_axis_of other))\n                         ^\nExpected one of: \n\t* ROT_ANGLE\n",
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 4,
                "other": 5,
                "filter": 2,
                "color_equals": 1,
                "color_of": 1,
                "R": 1,
                "apply": 2,
                "update_color": 1,
                "O": 1,
                "neighbor_of": 1,
                "move_node_max": 1,
                "direction_of": 1,
                "rotate_node": 1,
                "mirror_axis_of": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color R, then cycle their color to the next in the sequence: G, F, C, A.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node down)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (update_color G)\n        )    \n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) G)\n        )\n        (apply\n            (update_color F)\n        )    \n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) F)\n        )\n        (apply\n            (update_color C)\n        )    \n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) C)\n        )\n        (apply\n            (update_color A)\n        )    \n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 5,
                "vars": 5,
                "this": 10,
                "filter": 5,
                "color_equals": 5,
                "color_of": 5,
                "R": 2,
                "apply": 5,
                "move_node": 1,
                "down": 1,
                "update_color": 4,
                "G": 2,
                "F": 2,
                "C": 2,
                "A": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all red objects in the grid one step diagonally towards the bottom-left, recoloring them to green, fuchsia, cyan, and orange in sequence.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) R))\n        (apply\n            (move_node down_left)\n            (update_color (case_of (step_this 0) G F C A))\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches 'c' in the current parser context, at line 7 col 28\n\n            (update_color (case_of (step_this 0) G F C A))\n                           ^\nExpected one of: \n\t* COLOR_OF\n",
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "filter": 1,
                "color_equals": 1,
                "color_of": 1,
                "R": 1,
                "apply": 1,
                "move_node": 1,
                "down_left": 1,
                "update_color": 1,
                "case_of": 1,
                "step_this": 1,
                "0": 1,
                "G": 1,
                "F": 1,
                "C": 1,
                "A": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of size 1 toward the left.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 1)\n        )\n        (apply\n            (move_node left)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "filter": 1,
                "size_equals": 1,
                "size_of": 1,
                "1": 1,
                "apply": 1,
                "move_node": 1,
                "left": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color R in a diagonal down-right direction, wrapping around.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node_max down_right)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "filter": 1,
                "color_equals": 1,
                "color_of": 1,
                "R": 1,
                "apply": 1,
                "move_node_max": 1,
                "down_right": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color R one step down and recolor them.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node down)\n            (update_color G)\n            (update_color F)\n            (update_color A)\n            (update_color C)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "filter": 1,
                "color_equals": 1,
                "color_of": 1,
                "R": 1,
                "apply": 1,
                "move_node": 1,
                "down": 1,
                "update_color": 4,
                "G": 1,
                "F": 1,
                "A": 1,
                "C": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color R, then insert the following objects at each: G, F, C, A.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) R))\n        (apply\n            (move_node down)\n            (insert 0 top source)\n            (insert 1 right source)\n            (insert 2 left source)\n            (insert 3 bottom source)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "filter": 1,
                "color_equals": 1,
                "color_of": 1,
                "R": 1,
                "apply": 1,
                "move_node": 1,
                "down": 1,
                "insert": 4,
                "0": 1,
                "top": 1,
                "source": 4,
                "1": 1,
                "right": 1,
                "2": 1,
                "left": 1,
                "3": 1,
                "bottom": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of size 1 to the first empty spot vertically downward.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 1)\n        )\n        (apply\n            (move_node_max down)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "filter": 1,
                "size_equals": 1,
                "size_of": 1,
                "1": 1,
                "apply": 1,
                "move_node_max": 1,
                "down": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color R one step to the right, and update their colors to G, F, C, and A respectively.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node right)\n            (update_color G)\n            (update_color F)\n            (update_color C)\n            (update_color A)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "filter": 1,
                "color_equals": 1,
                "color_of": 1,
                "R": 1,
                "apply": 1,
                "move_node": 1,
                "right": 1,
                "update_color": 4,
                "G": 1,
                "F": 1,
                "C": 1,
                "A": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of any color to random positions.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node right)\n            (move_node down)\n            (move_node down_left)\n            (move_node right)\n            (update_color G)\n            (move_node left)\n            (update_color F)\n            (move_node up_left)\n            (update_color C)\n            (move_node up_right)\n            (update_color A)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 1,
                "filter": 1,
                "apply": 1,
                "move_node": 7,
                "right": 2,
                "down": 1,
                "down_left": 1,
                "update_color": 4,
                "G": 1,
                "left": 1,
                "F": 1,
                "up_left": 1,
                "C": 1,
                "up_right": 1,
                "A": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects one step down.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node down)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 1,
                "filter": 1,
                "apply": 1,
                "move_node": 1,
                "down": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects to their nearest empty neighbors. Recolor the moved objects according to a given pattern.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node_max down)\n            (update_color (color_of this))\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "filter": 1,
                "apply": 1,
                "move_node_max": 1,
                "down": 1,
                "update_color": 1,
                "color_of": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color R one step down, and then recolor them to colors G, A, F, or C.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node down)\n            (update_color G)\n            (update_color A)\n            (update_color F)\n            (update_color C)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "filter": 1,
                "color_equals": 1,
                "color_of": 1,
                "R": 1,
                "apply": 1,
                "move_node": 1,
                "down": 1,
                "update_color": 4,
                "G": 1,
                "A": 1,
                "F": 1,
                "C": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color R one step left, then recolor them to G, F, C, and A sequentially.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node left)\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node left)\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node left)\n            (update_color C)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node left)\n            (update_color A)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 4,
                "vars": 4,
                "this": 8,
                "filter": 4,
                "color_equals": 4,
                "color_of": 4,
                "R": 4,
                "apply": 4,
                "move_node": 4,
                "left": 4,
                "update_color": 4,
                "G": 1,
                "F": 1,
                "C": 1,
                "A": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color R one step down, then update their colors in sequence.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node down)\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) G)\n        )\n        (apply\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) F)\n        )\n        (apply\n            (update_color C)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) C)\n        )\n        (apply\n            (update_color A)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 4,
                "vars": 4,
                "this": 8,
                "filter": 4,
                "color_equals": 4,
                "color_of": 4,
                "R": 1,
                "apply": 4,
                "move_node": 1,
                "down": 1,
                "update_color": 4,
                "G": 2,
                "F": 2,
                "C": 2,
                "A": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all colored objects diagonally down-left and change their color to a respective predefined sequence: G, F, C, A.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (not (color_equals (color_of this) O))\n        )\n        (apply\n            (move_node down_left)\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) G)\n        )\n        (apply\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) F)\n        )\n        (apply\n            (update_color C)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) C)\n        )\n        (apply\n            (update_color A)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 4,
                "vars": 4,
                "this": 8,
                "filter": 4,
                "not": 1,
                "color_equals": 4,
                "color_of": 4,
                "O": 1,
                "apply": 4,
                "move_node": 1,
                "down_left": 1,
                "update_color": 4,
                "G": 2,
                "F": 2,
                "C": 2,
                "A": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor the objects from initial position to specific colors",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (column_equals (column_of this) 1))\n        (apply (update_color G))\n    )\n    (rule\n        (vars (this))\n        (filter (column_equals (column_of this) 2))\n        (apply (update_color F))\n    )\n    (rule\n        (vars (this))\n        (filter (column_equals (column_of this) 3))\n        (apply (update_color C))\n    )\n    (rule\n        (vars (this))\n        (filter (column_equals (column_of this) 4))\n        (apply (update_color A))\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 4,
                "vars": 4,
                "this": 8,
                "filter": 4,
                "column_equals": 4,
                "column_of": 4,
                "1": 1,
                "apply": 4,
                "update_color": 4,
                "G": 1,
                "2": 1,
                "F": 1,
                "3": 1,
                "C": 1,
                "4": 1,
                "A": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move objects of color R to the last non-black pixel and recolor them with specified colors in sequence, starting with G, F, C, and A.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node down)\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) G)\n                (neighbor_of this this)\n            )\n        )\n        (apply\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) G)\n        )\n        (apply\n            (move_node down)\n            (update_color C)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) C)\n        )\n        (apply\n            (move_node down)\n            (update_color A)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 4,
                "vars": 4,
                "this": 10,
                "filter": 4,
                "color_equals": 4,
                "color_of": 4,
                "R": 1,
                "apply": 4,
                "move_node": 3,
                "down": 3,
                "update_color": 4,
                "G": 3,
                "and": 1,
                "neighbor_of": 1,
                "F": 1,
                "C": 2,
                "A": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color R to different predefined positions: top-left, bottom-right, left-mirror middle, center-right vertical.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node (img_pts_of ((up_left) (bottom_right) (horizontal) (vertical))))\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches 'i' in the current parser context, at line 8 col 25\n\n            (move_node (img_pts_of ((up_left) (bottom_right) (ho\n                        ^\nExpected one of: \n\t* DIRECTION_OF\n",
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "filter": 1,
                "color_equals": 1,
                "color_of": 1,
                "R": 1,
                "apply": 1,
                "move_node": 1,
                "img_pts_of": 1,
                "up_left": 1,
                "bottom_right": 1,
                "horizontal": 1,
                "vertical": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "New colorful objects are added in a sequence at new positions after removing the existing colored object.",
            "code": "(do\n(rule\n(vars (this other))\n(filter (neighbor_of this other))\n(apply (move_node_max (direction_of this)) (insert 1 (img_pts_of other) source))\n)\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 3,
                "other": 3,
                "filter": 1,
                "neighbor_of": 1,
                "apply": 1,
                "move_node_max": 1,
                "direction_of": 1,
                "insert": 1,
                "1": 1,
                "img_pts_of": 1,
                "source": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all objects to different colors in a specific sequence",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color G)\n            (update_color F)\n            (update_color C)\n            (update_color A)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 1,
                "filter": 1,
                "apply": 1,
                "update_color": 4,
                "G": 1,
                "F": 1,
                "C": 1,
                "A": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all red objects in different directions and recolor to different colors.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node up)\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node down)\n            (update_color C)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node left)\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node right)\n            (update_color A)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 4,
                "vars": 4,
                "this": 8,
                "filter": 4,
                "color_equals": 4,
                "color_of": 4,
                "R": 4,
                "apply": 4,
                "move_node": 4,
                "up": 1,
                "update_color": 4,
                "G": 1,
                "down": 1,
                "C": 1,
                "left": 1,
                "F": 1,
                "right": 1,
                "A": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects with color R one cell to the south, then repaint them different colors.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node down)\n            (update_color G)\n            (update_color F)\n            (update_color C)\n            (update_color A)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "filter": 1,
                "color_equals": 1,
                "color_of": 1,
                "R": 1,
                "apply": 1,
                "move_node": 1,
                "down": 1,
                "update_color": 4,
                "G": 1,
                "F": 1,
                "C": 1,
                "A": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color R one step to the left and recolor them sequentially with colors G, F, C, and A.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node left)\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) G)\n        )\n        (apply\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) G)\n        )\n        (apply\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) F)\n        )\n        (apply\n            (update_color C)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) C)\n        )\n        (apply\n            (update_color A)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 5,
                "vars": 5,
                "this": 10,
                "filter": 5,
                "color_equals": 5,
                "color_of": 5,
                "R": 1,
                "apply": 5,
                "move_node": 1,
                "left": 1,
                "update_color": 5,
                "G": 3,
                "F": 3,
                "C": 2,
                "A": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move colors from specific positions to another grid by setting specific colors to specific locations.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (and (color_equals (color_of this) R)))\n        (apply (move_node_max down))\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches ')' in the current parser context, at line 4 col 54\n\ner (and (color_equals (color_of this) R)))\n                                        ^\nExpected one of: \n\t* LPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "filter": 1,
                "and": 1,
                "color_equals": 1,
                "color_of": 1,
                "R": 1,
                "apply": 1,
                "move_node_max": 1,
                "down": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of size 1 towards the nearest border or corner of the grid and recolor them in a pattern.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 1)\n        )\n        (apply\n            (move_node_max (direction_of this))\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 1)\n        )\n        (apply\n            (move_node_max (direction_of this))\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 1)\n        )\n        (apply\n            (move_node_max (direction_of this))\n            (update_color C)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 1)\n        )\n        (apply\n            (move_node_max (direction_of this))\n            (update_color A)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 4,
                "vars": 4,
                "this": 12,
                "filter": 4,
                "size_equals": 4,
                "size_of": 4,
                "1": 4,
                "apply": 4,
                "move_node_max": 4,
                "direction_of": 4,
                "update_color": 4,
                "G": 1,
                "F": 1,
                "C": 1,
                "A": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all infinitely many colored positions diagonally down to the right.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter)\n        (apply\n            (move_node_max down_right)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 1,
                "other": 1,
                "filter": 1,
                "apply": 1,
                "move_node_max": 1,
                "down_right": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of size 1 down, and recolor them to specific colors depending on their initial column.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and (size_equals (size_of this) 1))\n        )\n        (apply\n            (move_node down)\n            (update_color (color_of this))\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches ')' in the current parser context, at line 5 col 48\n\n     (and (size_equals (size_of this) 1))\n                                        ^\nExpected one of: \n\t* LPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 3,
                "filter": 1,
                "and": 1,
                "size_equals": 1,
                "size_of": 1,
                "1": 1,
                "apply": 1,
                "move_node": 1,
                "down": 1,
                "update_color": 1,
                "color_of": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all red objects to green, fuchsia, cyan and orange while preserving their position order.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) G)\n        )\n        (apply\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) F)\n        )\n        (apply\n            (update_color C)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) C)\n        )\n        (apply\n            (update_color A)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 4,
                "vars": 4,
                "this": 8,
                "filter": 4,
                "color_equals": 4,
                "color_of": 4,
                "R": 1,
                "apply": 4,
                "update_color": 4,
                "G": 2,
                "F": 2,
                "C": 2,
                "A": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all red objects one step down and modify their color to the color of the initial row of placement.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) R))\n        (apply\n            (move_node down)\n            (update_color (color_of this))\n        ) \n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 3,
                "filter": 1,
                "color_equals": 1,
                "color_of": 2,
                "R": 1,
                "apply": 1,
                "move_node": 1,
                "down": 1,
                "update_color": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "For each object of color R, move it toward different corners (top-left, top-right, bottom-left, bottom-right) based on their positions.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node (if (column_equals (column_of this) 1) up_left right))\n            (move_node (if (column_equals (column_of this) 1) down_left right))\n            (move_node (if (column_equals (column_of this) 4) up_right left))\n            (move_node (if (column_equals (column_of this) 4) down_right left))\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches 'i' in the current parser context, at line 8 col 25\n\n            (move_node (if (column_equals (column_of this) 1) up\n                        ^\nExpected one of: \n\t* DIRECTION_OF\n",
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 6,
                "filter": 1,
                "color_equals": 1,
                "color_of": 1,
                "R": 1,
                "apply": 1,
                "move_node": 4,
                "if": 4,
                "column_equals": 4,
                "column_of": 4,
                "1": 2,
                "up_left": 1,
                "right": 2,
                "down_left": 1,
                "4": 2,
                "up_right": 1,
                "left": 2,
                "down_right": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all the objects of size 1 to different colors.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 1)\n        )\n        (apply\n            (update_color G)\n            (update_color F)\n            (update_color C)\n            (update_color A)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "filter": 1,
                "size_equals": 1,
                "size_of": 1,
                "1": 1,
                "apply": 1,
                "update_color": 4,
                "G": 1,
                "F": 1,
                "C": 1,
                "A": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "For every object of size 1, replace it with a new object of the corresponding sequence in color list [G, F, C, A]",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 1)\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 1)\n        )\n        (apply\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 1)\n        )\n        (apply\n            (update_color C)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 1)\n        )\n        (apply\n            (update_color A)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 4,
                "vars": 4,
                "this": 8,
                "filter": 4,
                "size_equals": 4,
                "size_of": 4,
                "1": 4,
                "apply": 4,
                "update_color": 4,
                "G": 1,
                "F": 1,
                "C": 1,
                "A": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move the object of color R one step up and then recolor it to G in the first step, F in the second step, C in the third step, and A in the fourth step.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node up)\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) G)\n        )\n        (apply\n            (move_node up)\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) F)\n        )\n        (apply\n            (move_node up)\n            (update_color C)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) C)\n        )\n        (apply\n            (move_node up)\n            (update_color A)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 4,
                "vars": 4,
                "this": 8,
                "filter": 4,
                "color_equals": 4,
                "color_of": 4,
                "R": 1,
                "apply": 4,
                "move_node": 4,
                "up": 4,
                "update_color": 4,
                "G": 2,
                "F": 2,
                "C": 2,
                "A": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move each object to the second row and recolor them with unique colors.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node down)\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node down)\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node down)\n            (update_color C)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node down)\n            (update_color A)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 4,
                "vars": 4,
                "this": 4,
                "filter": 4,
                "apply": 4,
                "move_node": 4,
                "down": 4,
                "update_color": 4,
                "G": 1,
                "F": 1,
                "C": 1,
                "A": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Rotate all objects 90 degrees.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 1,
                "filter": 1,
                "apply": 1,
                "rotate_node": 1,
                "90": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color R to the first empty cell found when searching from top to bottom.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node_max down)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "other": 1,
                "filter": 1,
                "color_equals": 1,
                "color_of": 1,
                "R": 1,
                "apply": 1,
                "move_node_max": 1,
                "down": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color R one step down, then recolor them according to a specific pattern in sequence: G, F, C, A.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node down)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (update_color G)\n            (update_color F)\n            (update_color C)\n            (update_color A)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 4,
                "filter": 2,
                "color_equals": 2,
                "color_of": 2,
                "R": 2,
                "apply": 2,
                "move_node": 1,
                "down": 1,
                "update_color": 4,
                "G": 1,
                "F": 1,
                "C": 1,
                "A": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all objects of color R to a sequence of colors G, F, C, A",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) G)\n        )\n        (apply\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) F)\n        )\n        (apply\n            (update_color C)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) C)\n        )\n        (apply\n            (update_color A)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 4,
                "vars": 4,
                "this": 8,
                "filter": 4,
                "color_equals": 4,
                "color_of": 4,
                "R": 1,
                "apply": 4,
                "update_color": 4,
                "G": 2,
                "F": 2,
                "C": 2,
                "A": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all red objects to the first empty cell above them and apply specific recolorings.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node up)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of this) O)\n                (not (color_equals (color_of other) X))\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of this) G)\n            )\n        )\n        (apply\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of this) C)\n            )\n        )\n        (apply\n            (update_color A)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 17 col 17\n\n                (not (color_equals (color_of other) X))\n                ^\nExpected one of: \n\t* RPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 4,
                "vars": 4,
                "this": 11,
                "filter": 4,
                "color_equals": 5,
                "color_of": 5,
                "R": 1,
                "apply": 4,
                "move_node": 1,
                "up": 1,
                "and": 3,
                "neighbor_of": 3,
                "other": 6,
                "O": 1,
                "not": 1,
                "X": 1,
                "update_color": 3,
                "G": 2,
                "F": 1,
                "C": 1,
                "A": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move any red-colored objects and replace them with objects of specific colors based on their initial positions.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (insert 0 top_left source)\n            (insert 1 top_right source)\n            (insert 2 middle source)\n            (insert 3 bottom_left source)\n            (insert 4 bottom_right source)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches 'm' in the current parser context, at line 10 col 23\n\n            (insert 2 middle source)\n                      ^\nExpected one of: \n\t* LPAR\n\t* IMAGE_POINTS\n",
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "filter": 1,
                "color_equals": 1,
                "color_of": 1,
                "R": 1,
                "apply": 1,
                "insert": 5,
                "0": 1,
                "top_left": 1,
                "source": 5,
                "1": 1,
                "top_right": 1,
                "2": 1,
                "middle": 1,
                "3": 1,
                "bottom_left": 1,
                "4": 1,
                "bottom_right": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all the objects of color R to another positions and recolor them.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node down)\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) G)\n        )\n        (apply\n            (move_node left)\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) F)\n        )\n        (apply\n            (move_node down)\n            (update_color C)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) C)\n        )\n        (apply\n            (move_node right)\n            (update_color A)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 4,
                "vars": 4,
                "this": 8,
                "filter": 4,
                "color_equals": 4,
                "color_of": 4,
                "R": 1,
                "apply": 4,
                "move_node": 4,
                "down": 2,
                "update_color": 4,
                "G": 2,
                "left": 1,
                "F": 2,
                "C": 2,
                "right": 1,
                "A": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move objects to positions in columns next to them in a repeating patter of colors: G, F, C and A",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node down)\n            (update_color G)\n            (move_node down)\n            (update_color F)\n            (move_node down)\n            (update_color C)\n            (move_node down)\n            (update_color A)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 1,
                "filter": 1,
                "apply": 1,
                "move_node": 4,
                "down": 4,
                "update_color": 4,
                "G": 1,
                "F": 1,
                "C": 1,
                "A": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor objects of color R such that their color changes in the order: green, fuchsia, cyan, orange, respectively.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) G)\n        )\n        (apply\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) F)\n        )\n        (apply\n            (update_color C)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) C)\n        )\n        (apply\n            (update_color A)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 4,
                "vars": 4,
                "this": 8,
                "filter": 4,
                "color_equals": 4,
                "color_of": 4,
                "R": 1,
                "apply": 4,
                "update_color": 4,
                "G": 2,
                "F": 2,
                "C": 2,
                "A": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Rotate all objects 90 degrees and then move them by one step up.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n            (move_node up)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 1,
                "filter": 1,
                "apply": 1,
                "rotate_node": 1,
                "90": 1,
                "move_node": 1,
                "up": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all non-black cells to a specific position in the grid (bottom or right), filling each resulting cell with a set of specific colors.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (not (color_equals (color_of this) O)))\n        (apply\n            (move_node right)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "filter": 1,
                "not": 1,
                "color_equals": 1,
                "color_of": 1,
                "O": 1,
                "apply": 1,
                "move_node": 1,
                "right": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color R to their bottom neighbor cells, till they reach O. Then the object is recolored based on it's position.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node_max down)\n            (update_color (if (position_of this) (G C F A)))\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches 'i' in the current parser context, at line 9 col 28\n\n            (update_color (if (position_of this) (G C F A)))\n                           ^\nExpected one of: \n\t* COLOR_OF\n",
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 3,
                "filter": 1,
                "color_equals": 1,
                "color_of": 1,
                "R": 1,
                "apply": 1,
                "move_node_max": 1,
                "down": 1,
                "update_color": 1,
                "if": 1,
                "position_of": 1,
                "G": 1,
                "C": 1,
                "F": 1,
                "A": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all the objects of color R to the corners of the grid and recolor the corners with specific colors.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node_max up_left)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) O)\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) O)\n        )\n        (apply\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) O)\n        )\n        (apply\n            (update_color C)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) O)\n        )\n        (apply\n            (update_color A)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 5,
                "vars": 5,
                "this": 10,
                "filter": 5,
                "color_equals": 5,
                "color_of": 5,
                "R": 1,
                "apply": 5,
                "move_node_max": 1,
                "up_left": 1,
                "O": 4,
                "update_color": 4,
                "G": 1,
                "F": 1,
                "C": 1,
                "A": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all non-black objects towards the top left corner of the grid until they hit an obstacle, and update their colors accordingly.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (not (color_equals (color_of this) O))\n        )\n        (apply\n            (move_node_max up_left)\n            (update_color (color_of other))\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "other": 2,
                "filter": 1,
                "not": 1,
                "color_equals": 1,
                "color_of": 2,
                "O": 1,
                "apply": 1,
                "move_node_max": 1,
                "up_left": 1,
                "update_color": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all colored objects to the top row and update their colors in a predefined sequence.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (not (color_equals (color_of this) O))\n        )\n        (apply\n            (move_node up)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n)\n        (apply\n\t\t\t (update_color G)\n\t\t\t (update_color F)\n\t\t\t (update_color C)\n\t\t\t (update_color A)\n\t\t\t (update_color C)\n\t\t\t (update_color A)\n\t)\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 3,
                "other": 2,
                "filter": 2,
                "not": 1,
                "color_equals": 1,
                "color_of": 1,
                "O": 1,
                "apply": 2,
                "move_node": 1,
                "up": 1,
                "update_color": 6,
                "G": 1,
                "F": 1,
                "C": 2,
                "A": 2
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color R diagonally in some direction, changing their color along the way according to their steps.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node down_right)\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) G)\n        )\n        (apply\n            (move_node down_right)\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) F)\n        )\n        (apply\n            (move_node down_right)\n            (update_color C)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) C)\n        )\n        (apply\n            (move_node down_right)\n            (update_color A)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 4,
                "vars": 4,
                "this": 8,
                "filter": 4,
                "color_equals": 4,
                "color_of": 4,
                "R": 1,
                "apply": 4,
                "move_node": 4,
                "down_right": 4,
                "update_color": 4,
                "G": 2,
                "F": 2,
                "C": 2,
                "A": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all 'R' objects to the top-left of other objects.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node up_left)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "other": 1,
                "filter": 1,
                "color_equals": 1,
                "color_of": 1,
                "R": 1,
                "apply": 1,
                "move_node": 1,
                "up_left": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all red objects to different random locations and recolor them.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) R))\n        (apply\n            (move_node down)\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) G))\n        (apply\n            (move_node left)\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) F))\n        (apply\n            (move_node left)\n            (update_color C)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) C))\n        (apply\n            (move_node left)\n            (update_color A)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 4,
                "vars": 4,
                "this": 8,
                "filter": 4,
                "color_equals": 4,
                "color_of": 4,
                "R": 1,
                "apply": 4,
                "move_node": 4,
                "down": 1,
                "update_color": 4,
                "G": 2,
                "left": 3,
                "F": 2,
                "C": 2,
                "A": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color R to the top-left corner, and then recolor them to different colors.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node_max up_left)\n            (update_color G)\n            (update_color F)\n            (update_color C)\n            (update_color A)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "filter": 1,
                "color_equals": 1,
                "color_of": 1,
                "R": 1,
                "apply": 1,
                "move_node_max": 1,
                "up_left": 1,
                "update_color": 4,
                "G": 1,
                "F": 1,
                "C": 1,
                "A": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color R to their neighboring cells in the following order: left, left-down, left-up, right-down and recolor them respectively to G, F, C, A.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node left)\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node down_left)\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node up_left)\n            (update_color C)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node down_right)\n            (update_color A)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 4,
                "vars": 4,
                "this": 8,
                "other": 4,
                "filter": 4,
                "color_equals": 4,
                "color_of": 4,
                "R": 4,
                "apply": 4,
                "move_node": 4,
                "left": 1,
                "update_color": 4,
                "G": 1,
                "down_left": 1,
                "F": 1,
                "up_left": 1,
                "C": 1,
                "down_right": 1,
                "A": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all objects with the colors G, F, C, and A.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color C)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color A)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 4,
                "vars": 4,
                "this": 4,
                "filter": 4,
                "apply": 4,
                "update_color": 4,
                "G": 1,
                "F": 1,
                "C": 1,
                "A": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color R one step down and towards objects of color O, and then recolor them in sequence G, F, C and A.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node down)\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (color_equals (color_of other) O)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node down)\n            (update_color C)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (color_equals (color_of other) O)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n            (update_color A)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 18 col 17\n\n                (neighbor_of this other)\n                ^\nExpected one of: \n\t* RPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 4,
                "vars": 4,
                "this": 10,
                "filter": 4,
                "color_equals": 6,
                "color_of": 6,
                "R": 4,
                "apply": 4,
                "move_node": 4,
                "down": 2,
                "update_color": 4,
                "G": 1,
                "other": 8,
                "and": 2,
                "O": 2,
                "neighbor_of": 2,
                "direction_of": 2,
                "F": 1,
                "C": 1,
                "A": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color R to a corner of the grid.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node_max (direction_of this))\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 3,
                "filter": 1,
                "color_equals": 1,
                "color_of": 1,
                "R": 1,
                "apply": 1,
                "move_node_max": 1,
                "direction_of": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Reposition objects of color different than 'O' diagonally up-left and recolor them to other colors.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (not (color_equals (color_of this) O))\n        )\n        (apply\n            (move_node up_left)\n            (update_color G)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "filter": 1,
                "not": 1,
                "color_equals": 1,
                "color_of": 1,
                "O": 1,
                "apply": 1,
                "move_node": 1,
                "up_left": 1,
                "update_color": 1,
                "G": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects to random positions, changing their colors to different random ones.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter)\n        (apply\n            (move_node down)\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter)\n        (apply\n            (move_node left)\n            (update_color C)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter)\n        (apply\n            (move_node up)\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter)\n        (apply\n            (move_node right)\n            (update_color A)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 4,
                "vars": 4,
                "this": 4,
                "other": 4,
                "filter": 4,
                "apply": 4,
                "move_node": 4,
                "down": 1,
                "update_color": 4,
                "G": 1,
                "left": 1,
                "C": 1,
                "up": 1,
                "F": 1,
                "right": 1,
                "A": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color R down, recoloring them simultaneously to different colors.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node down)\n            (update_color G)\n            (move_node down)\n            (update_color F)\n            (move_node down)\n            (update_color C)\n            (move_node down)\n            (update_color A)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "filter": 1,
                "color_equals": 1,
                "color_of": 1,
                "R": 1,
                "apply": 1,
                "move_node": 4,
                "down": 4,
                "update_color": 4,
                "G": 1,
                "F": 1,
                "C": 1,
                "A": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color R one step down, and change their color to G, F, C, and A respectively.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node down)\n            (update_color G)\n            (update_color F)\n            (update_color C)\n            (update_color A)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "filter": 1,
                "color_equals": 1,
                "color_of": 1,
                "R": 1,
                "apply": 1,
                "move_node": 1,
                "down": 1,
                "update_color": 4,
                "G": 1,
                "F": 1,
                "C": 1,
                "A": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color R to a unique position and replace them by a new object with different colors for each instance.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (extend_node down_right false)\n            (update_color G)\n            (extend_node down_left false)\n            (update_color F)\n            (extend_node down false)\n            (update_color C)\n            (extend_node right false)\n            (update_color A)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "other": 1,
                "filter": 1,
                "color_equals": 1,
                "color_of": 1,
                "R": 1,
                "apply": 1,
                "extend_node": 4,
                "down_right": 1,
                "false": 4,
                "update_color": 4,
                "G": 1,
                "down_left": 1,
                "F": 1,
                "down": 1,
                "C": 1,
                "right": 1,
                "A": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects by one position clockwise, color change as Green -> Yellow, Fuchsia -> Red, Cyan -> Green, Red -> Orange.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter (color_equals (color_of this) G))\n        (apply\n            (update_color Y)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter (color_equals (color_of this) F))\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter (color_equals (color_of this) C))\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter (color_equals (color_of this) R))\n        (apply\n            (update_color A)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 4,
                "vars": 4,
                "this": 8,
                "other": 4,
                "filter": 4,
                "color_equals": 4,
                "color_of": 4,
                "G": 2,
                "apply": 4,
                "update_color": 4,
                "Y": 1,
                "F": 1,
                "R": 2,
                "C": 1,
                "A": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects to the leftmost column and recolor them.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node left)\n            (update_color (color_of this))\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "filter": 1,
                "apply": 1,
                "move_node": 1,
                "left": 1,
                "update_color": 1,
                "color_of": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all the red objects to colors G, F, C, and A in that order.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) R))\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) R))\n        (apply\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) R))\n        (apply\n            (update_color C)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) R))\n        (apply\n            (update_color A)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 4,
                "vars": 4,
                "this": 8,
                "filter": 4,
                "color_equals": 4,
                "color_of": 4,
                "R": 4,
                "apply": 4,
                "update_color": 4,
                "G": 1,
                "F": 1,
                "C": 1,
                "A": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Cycle colors of all objects by 1 position clockwise.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color (color_of (.\n                ((F . W) (A . F) (C . A) (G . C) (R . G) (W . B) (B . Y) (Y . X) (X . O) (O . R)))\n            ))\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 6 col 37\n\n            (update_color (color_of (.\n                                    ^\nExpected one of: \n\t* VAR\n",
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 1,
                "filter": 1,
                "apply": 1,
                "update_color": 1,
                "color_of": 1,
                ".": 11,
                "F": 2,
                "W": 2,
                "A": 2,
                "C": 2,
                "G": 2,
                "R": 2,
                "B": 2,
                "Y": 2,
                "X": 2,
                "O": 2
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all the objects of color R to the first non-occupied neighbor cell and recolor them based on the relative position in the grid.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node right)\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) G)\n        )\n        (apply\n            (move_node down_right)\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) F)\n        )\n        (apply\n            (move_node down_right)\n            (update_color A)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) A)\n        )\n        (apply\n            (move_node up_left)\n            (update_color C)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) C)\n        )\n        (apply\n            (move_node up_left)\n            (update_color G)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 5,
                "vars": 5,
                "this": 10,
                "filter": 5,
                "color_equals": 5,
                "color_of": 5,
                "R": 1,
                "apply": 5,
                "move_node": 5,
                "right": 1,
                "update_color": 5,
                "G": 3,
                "down_right": 2,
                "F": 2,
                "A": 2,
                "up_left": 2,
                "C": 2
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move the objects toward the center, following the sequence: C, A, G, F.",
            "code": "(do (rule (vars (this other)) (filter) (apply (move_node down)) (move_node right) (move_node left) (move_node up))))",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 1 col 65\n\nher)) (filter) (apply (move_node down)) (move_node right) (move_node left) (move\n                                        ^\nExpected one of: \n\t* RPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 1,
                "other": 1,
                "filter": 1,
                "apply": 1,
                "move_node": 4,
                "down": 1,
                "right": 1,
                "left": 1,
                "up": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move and recolor all objects to specified colors and positions.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node down)\n            (update_color G)\n            (move_node down)\n            (update_color F)\n            (move_node down)\n            (update_color C)\n            (move_node down)\n            (update_color A)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 1,
                "filter": 1,
                "apply": 1,
                "move_node": 4,
                "down": 4,
                "update_color": 4,
                "G": 1,
                "F": 1,
                "C": 1,
                "A": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all colored objects to the top left corner, retaining their original relative positions.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (not (color_equals (color_of this) O))\n        )\n        (apply\n            (move_node_max up)\n            (move_node_max left)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "filter": 1,
                "not": 1,
                "color_equals": 1,
                "color_of": 1,
                "O": 1,
                "apply": 1,
                "move_node_max": 2,
                "up": 1,
                "left": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all the objects of red color to the leftmost empty cell in the same row, then recolor each to a distinct color.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node left)\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) G)\n        )\n        (apply\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) F)\n        )\n        (apply\n            (update_color A)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 3,
                "vars": 3,
                "this": 6,
                "filter": 3,
                "color_equals": 3,
                "color_of": 3,
                "R": 1,
                "apply": 3,
                "move_node": 1,
                "left": 1,
                "update_color": 3,
                "G": 2,
                "F": 2,
                "A": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color R to the first empty spot in the direction of the closest edge.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "other": 2,
                "filter": 1,
                "color_equals": 1,
                "color_of": 1,
                "R": 1,
                "apply": 1,
                "move_node": 1,
                "direction_of": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all non-black objects one step to the left and recolor them in the new position",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (not (color_equals (color_of this) O))\n        )\n        (apply\n            (move_node left)\n            (update_color (color_of this))\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 3,
                "filter": 1,
                "not": 1,
                "color_equals": 1,
                "color_of": 2,
                "O": 1,
                "apply": 1,
                "move_node": 1,
                "left": 1,
                "update_color": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all objects of size 1 to different colors.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 1)\n        )\n        (apply\n            (update_color G)\n            (update_color F)\n            (update_color C)\n            (update_color A)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "filter": 1,
                "size_equals": 1,
                "size_of": 1,
                "1": 1,
                "apply": 1,
                "update_color": 4,
                "G": 1,
                "F": 1,
                "C": 1,
                "A": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Objects of various colors are inserted at fixed positions regardless of the input grid configuration.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (insert 1 (img_pts_of this) source)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "filter": 1,
                "apply": 1,
                "insert": 1,
                "1": 1,
                "img_pts_of": 1,
                "source": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all objects by shifting their colors according to a specific pattern.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color G)\n            (update_color F)\n            (update_color C)\n            (update_color A)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 1,
                "filter": 1,
                "apply": 1,
                "update_color": 4,
                "G": 1,
                "F": 1,
                "C": 1,
                "A": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all objects with Red color to Green, Cyan, Fuchsia, and Amber in that order, without any defined pattern or direction.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) G)\n        )\n        (apply\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) F)\n        )\n        (apply\n            (update_color C)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) C)\n        )\n        (apply\n            (update_color A)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 4,
                "vars": 4,
                "this": 8,
                "filter": 4,
                "color_equals": 4,
                "color_of": 4,
                "R": 1,
                "apply": 4,
                "update_color": 4,
                "G": 2,
                "F": 2,
                "C": 2,
                "A": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of any color except 'O' toward the direction 'O', if they are neighbors of 'O'.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) O))\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 3,
                "other": 3,
                "filter": 1,
                "and": 1,
                "not": 1,
                "color_equals": 1,
                "color_of": 1,
                "O": 1,
                "neighbor_of": 1,
                "apply": 1,
                "move_node_max": 1,
                "direction_of": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects to the top-left corner, maintaining their relative positions.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node_max up)\n            (move_node_max left)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 1,
                "filter": 1,
                "apply": 1,
                "move_node_max": 2,
                "up": 1,
                "left": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Rotate all the objects to the right.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 1,
                "filter": 1,
                "apply": 1,
                "rotate_node": 1,
                "90": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all red objects to a specific position, set to top-left corner, and recolor them to colors G, F, C, A sequentially.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node up)\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node left)\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node max)\n            (update_color C)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node max)\n            (update_color A)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches 'm' in the current parser context, at line 28 col 24\n\n            (move_node max)\n                       ^\nExpected one of: \n\t* LPAR\n\t* DIRECTION\n",
            "token_counts": {
                "do": 1,
                "rule": 4,
                "vars": 4,
                "this": 8,
                "filter": 4,
                "color_equals": 4,
                "color_of": 4,
                "R": 4,
                "apply": 4,
                "move_node": 4,
                "up": 1,
                "update_color": 4,
                "G": 1,
                "left": 1,
                "F": 1,
                "max": 2,
                "C": 1,
                "A": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all objects and move them to different positions.",
            "code": "(do (rule (vars (this)) (filter) (apply (move_node_max up) (update_color G) (move_node_max down) (update_color C) (move_node_max left) (update_color F) (move_node_max right) (update_color A))))",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 1,
                "filter": 1,
                "apply": 1,
                "move_node_max": 4,
                "up": 1,
                "update_color": 4,
                "G": 1,
                "down": 1,
                "C": 1,
                "left": 1,
                "F": 1,
                "right": 1,
                "A": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color R to an adjacent cell in a pre-defined pattern, and recolor them to G, F, C, and A in that order.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node down)\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) G)\n        )\n        (apply\n            (move_node left)\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) F)\n        )\n        (apply\n            (move_node down)\n            (update_color C)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) C)\n        )\n        (apply\n            (move_node right)\n            (update_color A)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 4,
                "vars": 4,
                "this": 8,
                "filter": 4,
                "color_equals": 4,
                "color_of": 4,
                "R": 1,
                "apply": 4,
                "move_node": 4,
                "down": 2,
                "update_color": 4,
                "G": 2,
                "left": 1,
                "F": 2,
                "C": 2,
                "right": 1,
                "A": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all objects of size 1 to various colors in a pattern.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (size_equals (size_of this) 1))\n        (apply\n            (update_color G)\n            (update_color F)\n            (update_color C)\n            (update_color A)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "filter": 1,
                "size_equals": 1,
                "size_of": 1,
                "1": 1,
                "apply": 1,
                "update_color": 4,
                "G": 1,
                "F": 1,
                "C": 1,
                "A": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of size 1 towards the empty spaces.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (size_equals (size_of this) 1)\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "other": 2,
                "filter": 1,
                "size_equals": 1,
                "size_of": 1,
                "1": 1,
                "apply": 1,
                "move_node": 1,
                "direction_of": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects with color R to the top left, refreshing their color, and change their color based on the pattern [G, F, C, A].",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node up_left)\n            (update_color (color_of this))\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 3,
                "filter": 1,
                "color_equals": 1,
                "color_of": 2,
                "R": 1,
                "apply": 1,
                "move_node": 1,
                "up_left": 1,
                "update_color": 1
            }
        }
    ],
    "task_id": "a9f96cdd"
}