{
    "model": "gpt-4o-2024-05-13",
    "usage": {
        "completion_tokens": 27292,
        "prompt_tokens": 6184,
        "total_tokens": 33476,
        "prompt_tokens_details": {
            "cached_tokens": 0
        },
        "completion_tokens_details": {
            "reasoning_tokens": 0
        }
    },
    "request_time": 32.359028816223145,
    "n_requested": 100,
    "prompt_messages": [
        {
            "role": "system",
            "content": "You are an assistant chatbot with human-like perception, reasoning and learning capabilities.\nYou can solve tasks concisely, efficiently, and moreover, correctly.\nLet's engage in perception- and logic-based tasks.\nYou only output source code.\nNo explanations or any other text.\nOnly code."
        },
        {
            "role": "user",
            "content": "You are an efficient assistant for logical reasoning and code generation.\nYou will help me solve a visual perception and reasoning task.\nI will first provide you with the definition of a Domain Specific Language you will use for writing a solution for the task.\nI will then present you with the description of the task that you will be tested in.\nYou will then respond the queries I make regarding the solution of the task.\n\n\nThis is the definition of the DSL you will use to solve the task.\nIt is given as a context-free grammar in the EBNF format used by the Lark parser generator, with some informative comments about the semantics.\nYou will return a string that is parseable by the `program` non-terminal of the grammar.\n\n```\nlibrary: \"(\" program* \")\"\n\n// Rules are executed one after another, in the order they appear.\n// There could be no rules, in which case the program does nothing.\nprogram: \"(\" \"do\" rule* \")\"\n\n// First, it declares the variables that will be used in the filter and transform expressions.\n// Second, it defines a filter expression that an object must satisfy in order to be transformed.\n// Then, it defines a list of transforms that will be applied objects that satisfy the filter expression.\nrule: \"(\" \"rule\" decl filter xform_list \")\"\n\n// The `vars` declaration specifies the names of the variables that will be used in the filter and transform expressions.\n// The `this` variable is always declared, and it refers to the object that is being transformed.\n// There could also be an additional optional variable `other` that refers to another object in the grid,\n// which is not being transformed, but is used in the filter expression.\ndecl: \"(\" \"vars\" \"(\" VAR_THIS VAR_OTHER? \")\" \")\"\n\n// A filter is a predicate over the objects in the grid.\n// If no filter is given, then all the objects are selected.\nfilter: \"(\" \"filter\" filter_expr? \")\"\n\n// It can be a primitive filter operation, or a boolean expression using the `and`, `or`, and `not` connectives.\n// IMPORTANT: The `and` and `or` connectives are strictly binary, so to take the conjunction or disjunction \n// of more than two expressions, the binary connectives must be nested.\n// AGAIN, the `and` and `or` connectives are not variadic, so the following is not allowed:\n// (and true true false)\n// Instead, the following must be used:\n// (and true (and true false))\n// The `not` connective is unary as expected.\n// The objects that are transformed are the ones that satisfy the filter expression.\nfilter_expr: filter_prim\n           | \"(\" OP_AND filter_expr filter_expr \")\"   \n           | \"(\" OP_OR filter_expr filter_expr \")\"\n           | \"(\" OP_NOT filter_expr \")\"\n\nfilter_prim: \"(\" COLOR_EQ fcolor_expr fcolor_expr \")\"           \n           | \"(\" SIZE_EQ size_expr size_expr \")\"                \n           | \"(\" HEIGHT_EQ height_expr height_expr \")\"          \n           | \"(\" WIDTH_EQ width_expr width_expr \")\"             \n           | \"(\" DEGREE_EQ degree_expr degree_expr \")\"          \n           | \"(\" SHAPE_EQ shape_expr shape_expr \")\"             \n           | \"(\" COLUMN_EQ column_expr column_expr \")\"         \n           | \"(\" NEIGHBOR_OF VAR VAR \")\"      // true if the two objects are neighbors\n\n\n// Transforms are applied one after another, in the order they appear.\nxform_list: \"(\" \"apply\" xform+ \")\"\n\n// A single transform is applied to all the objects that are bound to the `this` variable. \n// The transform is applied to each such object independently and simultaneously.\nxform:     \"(\" TR_UPDATE_COLOR color_expr \")\"                          // change this object color to the given color \n         | \"(\" TR_MOVE_NODE direction_expr \")\"                         // move this object in the given direction\n         | \"(\" TR_EXTEND_NODE direction_expr OVERLAP \")\"               // extend (move while leaving a trail) this object in the given direction\n                                                                  // if overlap is false, then the object is extended until it hits another object,\n                                                                  // otherwise it is extended until the edge of the grid.\n         | \"(\" TR_MOVE_NODE_MAX direction_expr \")\"                     // move this object until it hits another object, in the given direction\n         | \"(\" TR_ROTATE_NODE ROT_ANGLE \")\"                       // rotate this object by the given angle\n         | \"(\" TR_ADD_BORDER color_expr \")\"                            // color this exterior pixels of the object with the given color\n         | \"(\" TR_FILL_RECTANGLE color_expr OVERLAP \")\"                // color this interior of a hollow rectangle with the given color\n         | \"(\" TR_HOLLOW_RECTANGLE color_expr \")\"                      // color this interior of a solid rectangle with the given color\n         | \"(\" TR_MIRROR mirror_expr \")\"\n         | \"(\" TR_FLIP SYMMETRY_AXIS \")\"                          // flip this object with respect to the given axis\n         | \"(\" TR_INSERT OBJECT_ID img_pts_expr RELATIVE_POSITION \")\" // insert a copy of this object at the position of the given object\n         | \"(\" TR_NOOP \")\"                                        // do nothing\n\nfcolor_expr: FCOLOR\n           | \"(\" COLOR_OF VAR \")\"\n\ncolor_expr: COLOR\n          | \"(\" COLOR_OF VAR \")\"\n\nsize_expr: SIZE\n         | \"(\" SIZE_OF VAR \")\"\n\nheight_expr: HEIGHT\n           | \"(\" HEIGHT_OF VAR \")\"\n\nwidth_expr: WIDTH\n          | \"(\" WIDTH_OF VAR \")\"\n\ndegree_expr: DEGREE\n           | \"(\" DEGREE_OF VAR \")\" \n\nshape_expr: SHAPE\n          | \"(\" SHAPE_OF VAR \")\"\n\ncolumn_expr: COLUMN\n           | \"(\" COLUMN_OF VAR \")\"\n\ndirection_expr: DIRECTION\n              | \"(\" DIRECTION_OF VAR \")\"\n\nimg_pts_expr: IMAGE_POINTS\n            | \"(\" IMAGE_POINTS_OF VAR \")\"\n\nmirror_expr: \"(\" MIRROR_AXIS_OF VAR \")\"\n\nOBJECT_ID: /[0-9]+/\nFCOLOR: \"O\" // black\n      | \"B\" // blue\n      | \"R\" // red\n      | \"G\" // green\n      | \"Y\" // yellow\n      | \"X\" // grey\n      | \"F\" // fuchsia\n      | \"A\" // orange\n      | \"C\" // cyan  \n      | \"W\" // brown\n\nSIZE: \"min\" | \"max\" | \"even\" | \"odd\" | /[0-9]+/  // size of objects\nDEGREE: \"min\" | \"max\" | \"even\" | \"odd\" | /[0-9]+/  // degree of objects\nHEIGHT: \"min\" | \"max\" | \"even\" | \"odd\" | /[0-9]+/  // height of objects\nWIDTH: \"min\" | \"max\" | \"even\" | \"odd\" | /[0-9]+/  // width of objects\nCOLUMN: \"center\" | \"even\" | \"odd\" | /[0-9]+/  // column of objects\nSHAPE: \"square\" | \"enclosed\"  // shape of objects\n\nDIRECTION: \"up\"\n         | \"down\"\n         | \"left\"\n         | \"right\"\n         | \"up_left\"\n         | \"up_right\"\n         | \"down_left\"\n         | \"down_right\"\n\nSYMMETRY_AXIS: \"vertical\" | \"horizontal\" | \"diagonal_left\" | \"diagonal_right\"\n\n// The angle of clockwise rotation, in degrees.\nROT_ANGLE: \"0\" \n         | \"90\" \n         | \"180\" \n         | \"270\"\n\nCOLOR: \"O\" // black\n      | \"B\" // blue\n      | \"R\" // red\n      | \"G\" // green\n      | \"Y\" // yellow\n      | \"X\" // grey\n      | \"F\" // fuchsia\n      | \"A\" // orange\n      | \"C\" // cyan  \n      | \"W\" // brown\n\nOVERLAP: BOOL\n\nBOOL: \"true\" | \"false\"\n\nIMAGE_POINTS: \"top\" | \"bottom\" | \"left\" | \"right\" | \"top_left\" | \"top_right\" | \"bottom_left\" | \"bottom_right\" \n\nRELATIVE_POSITION: \"source\"\n                 | \"target\"\n                 | \"middle\"\n\nVAR: VAR_THIS | VAR_OTHER\nVAR_THIS: \"this\"\nVAR_OTHER: \"other\"\n\nOP_AND: \"and\"\nOP_OR: \"or\"\nOP_NOT: \"not\"\n\nCOLOR_OF: \"color_of\"\nSIZE_OF: \"size_of\"\nHEIGHT_OF: \"height_of\"\nWIDTH_OF: \"width_of\"\nDEGREE_OF: \"degree_of\"\nSHAPE_OF: \"shape_of\"\nCOLUMN_OF: \"column_of\"\nDIRECTION_OF: \"direction_of\"\nIMAGE_POINTS_OF: \"img_pts_of\"\nMIRROR_AXIS_OF: \"mirror_axis_of\"\n\nCOLOR_EQ: \"color_equals\"\nSIZE_EQ: \"size_equals\"\nDEGREE_EQ: \"degree_equals\"\nHEIGHT_EQ: \"height_equals\"\nWIDTH_EQ: \"width_equals\"\nSHAPE_EQ: \"shape_equals\"\nCOLUMN_EQ: \"column_equals\"\nNEIGHBOR_OF: \"neighbor_of\"\n\nTR_UPDATE_COLOR: \"update_color\"\nTR_MOVE_NODE: \"move_node\"\nTR_EXTEND_NODE: \"extend_node\"\nTR_MOVE_NODE_MAX: \"move_node_max\"\nTR_ROTATE_NODE: \"rotate_node\"\nTR_ADD_BORDER: \"add_border\"\nTR_FILL_RECTANGLE: \"fill_rectangle\"\nTR_HOLLOW_RECTANGLE: \"hollow_rectangle\"\nTR_MIRROR: \"mirror\"\nTR_FLIP: \"flip\"\nTR_INSERT: \"insert\"\nTR_NOOP: \"noop\"\n\nCOMMENT: /\\s*/ \";;\" /[^\\n]/*\n\n%import common.WS\n%import common.LCASE_LETTER\n%import common.INT\n%ignore WS\n%ignore COMMENT\n```\n\n\nNow we continue with the visual perception and reasoning task.\nThe input for the task is a small number of pairs of grids of characters.\nThe value of each of the cells of the grids are the colors defined in the DSL, so we can think of grids as images.\nEach pair of images correspond to an input-output example for an unknown program P.\nFor each pair, the program P is evaluated on the image grid and operates on the objects that appear in it.\nThe output of the program is then the output image.\nThe objects in the images are easy and natural to identify for humans, so there is no need to define them explicitly.\nHowever you are able to abstract them correctly, and the DSL is interpreted with the same correct abstraction.\n\n\nNow I will show you some demonstration tasks along with the output you would be expected to produce for each of them.\n\n## DEMONSTRATION TASK 1\n\n### INPUT\nPAIR 1\nINPUT GRID:\nO O O O O O O O\nO O O O O R O O\nO R O O O R O R\nO R R O O R O O\nO O O O O O O O\nO R R O O O O O\nO R R O R R O O\nO O O O O O O O\nOUTPUT GRID:\nO O O O O O O O\nO O O O O Y O O\nO Y O O O Y O Y\nO Y Y O O Y O O\nO O O O O O O O\nO Y Y O O O O O\nO Y Y O Y Y O O\nO O O O O O O O\n\nPAIR 2\nINPUT GRID:\nO O O O O O O O O O\nO O O O R O O O O O\nO G O O R O O W O O\nO O G O O O W W O O\nO O G O O O O O O O\nO O O O X O O O O O\nO O O O O O F F F O\nO B O O O O O O O O\nO B B B B O O C C O\nO O O O O O O C O O\nOUTPUT GRID:\nO O O O O O O O O O\nO O O O Y O O O O O\nO Y O O Y O O Y O O\nO O Y O O O Y Y O O\nO O Y O O O O O O O\nO O O O Y O O O O O\nO O O O O O Y Y Y O\nO Y O O O O O O O O\nO Y Y Y Y O O Y Y O\nO O O O O O O Y O O\n\n### EXPECTED OUTPUT\n{\n    \"nl_description\": \"Recolor all objects to color Y\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color Y)\\n        )\\n    )\\n)\"\n}\n\n\n## DEMONSTRATION TASK 2\n\n### INPUT\nPAIR 1\nINPUT GRID:\nO O O O O O O O\nO F F O O O R O\nO F F O O O O O\nO O O O O O O O\nO O O O O O O O\nO O O O O O O O\nO O A O O X X O\nO O O O O O O O\nOUTPUT GRID:\nO O O O O O O O\nO F F R R R R O\nO F F O O O O O\nO O A O O O O O\nO O A O O O O O\nO O A O O O O O\nO O A O O X X O\nO O O O O O O O\n\nPAIR 2\nINPUT GRID:\nO O O O O O O O O O\nO O O Y O G G G G O\nO O F O O G G G G O\nO O O O O O O O O O\nO O O O O O O O O O\nO O O O O O O O O O\nO C C C O O O O O O\nO C C C O O O O A O\nO C C C O O O X O O\nO O O O O O O O O O\nOUTPUT GRID:\nO O O O O O O O O O\nO O O Y O G G G G O\nO O F Y O G G G G O\nO O F Y O O O O O O\nO O F Y O O O O O O\nO O F Y O O O O O O\nO C C C O O O O O O\nO C C C A A A A A O\nO C C C X X X X O O\nO O O O O O O O O O\n\n### EXPECTED OUTPUT\n{\n    \"nl_description\": \"Extend all the objects of size 1 toward the object of maximum size, without overlapping.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (size_equals (size_of this) 1)\\n                (and\\n                    (neighbor_of this other)\\n                    (size_equals (size_of other) max)\\n                )\\n            )\\n        )\\n        (apply\\n            (extend_node (direction_of other) false)\\n        )    \\n    )\\n)\"\n}\n\n\n## DEMONSTRATION TASK 3\n\n### INPUT\nPAIR 1\nINPUT GRID:\nO O O O O O O O O O\nO O O O O O O G O O\nO O G O O O O G O O\nO O G G O O O G G O\nO O O O O O O O O O\nO G G O O O O O O O\nO G G O O G G G O O\nO O O O O O O O O O\nO O G G O O O G O O\nO O O O O O O O O O\nOUTPUT GRID:\nO O O O O O O O O O\nO O B O O O O G O O\nO O B B O O O G O O\nO O O O O O O G G O\nO O O O O O O O O O\nO G G O O B B B O O\nO G G O O O O O O O\nO O O O O O O O O O\nO O G G O O O G O O\nO O O O O O O O O O\n\nPAIR 2\nINPUT GRID:\nO O O O O O O O O O O O O O O O\nO O O O O O O O O O O O O G O O\nO B B O O O O O O C C C O G G O\nO O O O O F O O O O O O O O O O\nO O O O O F O O O O R R O O O O\nO O O O O F O O O O R R O O O O\nO O O O O O O O W O O O O O O O\nO O O A O O O W W O O O X O O O\nO O O A A O O W W O O O X X X O\nO O O O O O O O O O O O O O O O\nO O O O O O O O O O Y Y O O O O\nO O O O B O O O O O O O O O O O\nO Y O O B O O O G O O O O F F O\nO Y O O O O O O G O O O O F F O\nO Y Y Y O O O O G O O O O O O O\nO O O O O O O O O O O O O O O O\nOUTPUT GRID:\nO O O O O O O O O O O O O B O O\nO O O O O O O O O B B B O B B O\nO B B O O B O O O O O O O O O O\nO O O O O B O O O O O O O O O O\nO O O O O B O O O O R R O O O O\nO O O O O O O O O O R R O O O O\nO O O B O O O O W O O O O O O O\nO O O B B O O W W O O O X O O O\nO O O O O O O W W O O O X X X O\nO O O O O O O O O O O O O O O O\nO O O O O O O O O O Y Y O O O O\nO O O O B O O O B O O O O O O O\nO Y O O B O O O B O O O O F F O\nO Y O O O O O O B O O O O F F O\nO Y Y Y O O O O O O O O O O O O\nO O O O O O O O O O O O O O O O\n\n### EXPECTED OUTPUT\n{\n    \"nl_description\": \"Move all objects of size 3 one step up, and then recolor them to color B.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (size_equals (size_of this) 3)\\n        )\\n        (apply\\n            (move_node up)\\n            (update_color B)\\n        )\\n    )\\n)\"\n}\n\n\n## DEMONSTRATION TASK 4\n\n### INPUT\nPAIR 1\nINPUT GRID:\nO O O O R O O O A O\nO B O O O O B O O O\nO O O O O O O O O O\nO O O O X X X O O O\nO O O O X X X O O F\nW O O O O O O O O O\nO O F O O O Y O O O\nO O O O O O O O O O\nO O O O G O O O W O\nO O O O O O O O O O\nOUTPUT GRID:\nO O O O O O O O A O\nO B O O O O O O O O\nO O O O R O B O O O\nO O O O X X X O O O\nO O O O X X X F O O\nW O O O G O Y O O O\nO O F O O O O O O O\nO O O O O O O O O O\nO O O O O O O O W O\nO O O O O O O O O O\n\nPAIR 2\nINPUT GRID:\nO O O F O O O R O O O O\nO O O O O O O O O Y O O\nO O O O O B O O O O O O\nO O R O O O O O G O O O\nB O O O O G O O O O O A\nO O O O O O R O O O W O\nO O O O O O O O C O O O\nG O X X O O O O O O O R\nO O X X O O O O O O Y O\nO O X X O O A O O O O O\nO F X X O O O O O O O O\nO O O O O Y O O O O O O\nOUTPUT GRID:\nO O O O O O O R O O O O\nO O O O O O O O O Y O O\nO O O O O B O O O O O O\nO O O O O O O O G O O O\nB O O O O G O O O O O A\nO O O O O O R O O O W O\nO O R F O O O O C O O O\nO G X X R O O O O O O O\nO O X X Y O O O O O O O\nO O X X A O O O O O O O\nO F X X O O O O O O O O\nO O O O O Y O O O O O O\n\nPAIR 3\nINPUT GRID:\nO G O O O O O O\nO O O A O O A O\nW O O O W O O O\nO O O O O O O B\nO R O X O F O O\nO O O O O O O O\nO G O O F O O G\nO O B O O A O O\nOUTPUT GRID:\nO G O O O O O O\nO O O O O O A O\nW O O O W O O O\nO O O A O O O B\nO O R X F O O O\nO O O O O O O O\nO G O O F O O G\nO O B O O A O O\n\n### EXPECTED OUTPUT\n{\n    \"nl_description\": \"Move all objects of color different than X, toward the object of color X, if they are neighbors of it.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (not (color_equals (color_of this) X))\\n                (and\\n                    (neighbor_of this other)\\n                    (color_equals (color_of other) X)\\n                )\\n            )\\n        )\\n        (apply\\n            (move_node_max (direction_of other))\\n        )\\n    )\\n)\"\n}\n\n\nNow follows task you will be evaluated on.\nOutput the solution as a JSON object, which should contain both a natural language description of the solution and the solution written in the DSL.\nThe code should be parseable by the DSL grammar.\nThe JSON must have the following structure:\n\n{\n    \"nl_description\": \"TO_BE_FILLED\",\n    \"code\": \"TO_BE_FILLED\"\n}\n\n## TEST TASK\n\nPAIR 1\nINPUT GRID:\nO O O O C O O O O O O C O O O O O O O\nO O O O C O O O O O O C O O O O O O O\nC C C C C C C C C C C C C C C C C C C\nO O O O C O O O O O O C O O O O O O O\nO O O O C O O O O O O C O O O O O O O\nO O O O C O O O O O O C O O O O O O O\nO O O O C O O O O O O C O O O O O O O\nC C C C C C C C C C C C C C C C C C C\nO O O O C O O O O O O C O O O O O O O\nO O O O C O O O O O O C O O O O O O O\nO O O O C O O O O O O C O O O O O O O\nO O O O C O O O O O O C O O O O O O O\nO O O O C O O O O O O C O O O O O O O\nO O O O C O O O O O O C O O O O O O O\nO O O O C O O O O O O C O O O O O O O\nO O O O C O O O O O O C O O O O O O O\nO O O O C O O O O O O C O O O O O O O\nO O O O C O O O O O O C O O O O O O O\nOUTPUT GRID:\nO O O O C R R R R R R C O O O O O O O\nO O O O C R R R R R R C O O O O O O O\nC C C C C C C C C C C C C C C C C C C\nY Y Y Y C F F F F F F C G G G G G G G\nY Y Y Y C F F F F F F C G G G G G G G\nY Y Y Y C F F F F F F C G G G G G G G\nY Y Y Y C F F F F F F C G G G G G G G\nC C C C C C C C C C C C C C C C C C C\nO O O O C B B B B B B C O O O O O O O\nO O O O C B B B B B B C O O O O O O O\nO O O O C B B B B B B C O O O O O O O\nO O O O C B B B B B B C O O O O O O O\nO O O O C B B B B B B C O O O O O O O\nO O O O C B B B B B B C O O O O O O O\nO O O O C B B B B B B C O O O O O O O\nO O O O C B B B B B B C O O O O O O O\nO O O O C B B B B B B C O O O O O O O\nO O O O C B B B B B B C O O O O O O O\n\nPAIR 2\nINPUT GRID:\nO O C O O O O O O C O O O O\nO O C O O O O O O C O O O O\nO O C O O O O O O C O O O O\nO O C O O O O O O C O O O O\nC C C C C C C C C C C C C C\nO O C O O O O O O C O O O O\nO O C O O O O O O C O O O O\nC C C C C C C C C C C C C C\nO O C O O O O O O C O O O O\nO O C O O O O O O C O O O O\nO O C O O O O O O C O O O O\nO O C O O O O O O C O O O O\nOUTPUT GRID:\nO O C R R R R R R C O O O O\nO O C R R R R R R C O O O O\nO O C R R R R R R C O O O O\nO O C R R R R R R C O O O O\nC C C C C C C C C C C C C C\nY Y C F F F F F F C G G G G\nY Y C F F F F F F C G G G G\nC C C C C C C C C C C C C C\nO O C B B B B B B C O O O O\nO O C B B B B B B C O O O O\nO O C B B B B B B C O O O O\nO O C B B B B B B C O O O O\n"
        }
    ],
    "n_valid_json": 100,
    "n_can_parse": 63,
    "completions": [
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all objects to different colors based on their row, with the first occurring change in color starting from the 4th row.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (and (neighbor_of this other) (color_equals (color_of other) C)))\n        (apply (update_color R))\n    )\n    (rule\n        (vars (this))\n        (filter (and (neighbor_of this other) (color_equals (color_of other) C)))\n        (apply (move_node down)\n               (update_color F)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter (and (neighbor_of this other) (color_equals (color_of other) C)))\n        (apply (move_node down)\n               (move_node down)\n               (update_color B)\n        )\n    )\n)\n)}",
            "can_parse": false,
            "parse_error_message": "No terminal matches ')' in the current parser context, at line 23 col 1\n\n)}\n^\n",
            "token_counts": {
                "do": 1,
                "rule": 3,
                "vars": 3,
                "this": 6,
                "filter": 3,
                "and": 3,
                "neighbor_of": 3,
                "other": 6,
                "color_equals": 3,
                "color_of": 3,
                "C": 3,
                "apply": 3,
                "update_color": 3,
                "R": 1,
                "move_node": 3,
                "down": 3,
                "F": 1,
                "B": 1,
                "}": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor horizontal lines of objects to different colors.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (size_equals (size_of this) max)\n                (height_equals (height_of this) 1)\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (size_equals (size_of this) max)\n                (height_equals (height_of this) 4)\n            )\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (size_equals (size_of this) max)\n                (height_equals (height_of this) 6)\n            )\n        )\n        (apply\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (size_equals (size_of this) max)\n                (height_equals (height_of this) 8)\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (size_equals (size_of this) max)\n                (height_equals (height_of this) 6)\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 5,
                "vars": 5,
                "this": 15,
                "filter": 5,
                "and": 5,
                "size_equals": 5,
                "size_of": 5,
                "max": 5,
                "height_equals": 5,
                "height_of": 5,
                "1": 1,
                "apply": 5,
                "update_color": 5,
                "R": 1,
                "4": 1,
                "Y": 1,
                "6": 2,
                "F": 1,
                "8": 1,
                "G": 1,
                "B": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor objects into different colors based on their vertical position: top objects to color R, middle objects to color F, and bottom objects to color B.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (and (color_equals (color_of this) O) (column_equals (column_of this) odd)))\n        (apply (update_color R))\n    )\n    (rule\n        (vars (this))\n        (filter (and (color_equals (color_of this) O) (column_equals (column_of this) even)))\n        (apply (update_color F))\n    )\n    (rule\n        (vars (this))\n        (filter (and (color_equals (color_of this) O) (column_equals (column_of this) even)))\n        (apply (update_color B))\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 3,
                "vars": 3,
                "this": 9,
                "filter": 3,
                "and": 3,
                "color_equals": 3,
                "color_of": 3,
                "O": 3,
                "column_equals": 3,
                "column_of": 3,
                "odd": 1,
                "apply": 3,
                "update_color": 3,
                "R": 1,
                "even": 2,
                "F": 1,
                "B": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all rows and columns containing objects of color C with new specified colors between the rows and columns of objects of color C.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (neighbor_of this other)\n        )\n        (apply\n            (update_color B)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 3,
                "filter": 2,
                "apply": 2,
                "update_color": 2,
                "F": 1,
                "neighbor_of": 1,
                "other": 1,
                "B": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor the neighboring objects of each 'C' grid separated by 'C' rows according to their row position.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (neighbor_of this other)\n        )\n        (apply\n            (update_color (color_of other))\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "other": 3,
                "filter": 1,
                "neighbor_of": 1,
                "apply": 1,
                "update_color": 1,
                "color_of": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor rows between the lines of C vertically, each with a different color.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 19)\n                (color_equals (color_of this) O)\n                (neighbor_of this other)\n                (color_equals (color_of other) C)\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 19)\n                (color_equals (color_of this) O)\n                (neighbor_of this other)\n                (color_equals (color_of other) R)\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 19)\n                (color_equals (color_of this) O)\n                (neighbor_of this other)\n                (color_equals (color_of other) R)\n            )\n        )\n        (apply\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 19)\n                (color_equals (color_of this) O)\n                (neighbor_of this other)\n                (color_equals (color_of other) F)\n            )\n        )\n        (apply\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 19)\n                (color_equals (color_of this) O)\n                (neighbor_of this other)\n                (color_equals (color_of other) F)\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 19)\n                (color_equals (color_of this) O)\n                (neighbor_of this other)\n                (color_equals (color_of other) G)\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 19)\n                (color_equals (color_of this) O)\n                (neighbor_of this other)\n                (color_equals (color_of other) C)\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 19)\n                (color_equals (color_of this) O)\n                (neighbor_of this other)\n                (color_equals (color_of other) B)\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 8 col 17\n\n                (neighbor_of this other)\n                ^\nExpected one of: \n\t* RPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 8,
                "vars": 8,
                "this": 32,
                "other": 24,
                "filter": 8,
                "and": 8,
                "size_equals": 8,
                "size_of": 8,
                "19": 8,
                "color_equals": 16,
                "color_of": 16,
                "O": 8,
                "neighbor_of": 8,
                "C": 2,
                "apply": 8,
                "update_color": 8,
                "R": 4,
                "F": 4,
                "G": 3,
                "B": 3
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor rectangular regions in the grid.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) center)\n        )\n        (apply\n            (update_color C)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color C)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 3,
                "filter": 2,
                "column_equals": 1,
                "column_of": 1,
                "center": 1,
                "apply": 2,
                "update_color": 2,
                "C": 2
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Color horizontal neighbor objects of C with different colors: (R, F, B), starting from the top row.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (neighbor_of this other)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (neighbor_of this other)\n        )\n        (apply\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (neighbor_of this other)\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (neighbor_of this other)\n        )\n        (apply\n            (update_color B)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 4,
                "vars": 4,
                "this": 8,
                "other": 8,
                "filter": 4,
                "neighbor_of": 4,
                "apply": 4,
                "update_color": 4,
                "R": 1,
                "F": 1,
                "Y": 1,
                "B": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor each row of objects sandwiched between two rows of 'C' to a specific color.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (and (neighbor_of this other) (color_equals (color_of other) C)))\n        (apply (update_color R))\n    )\n    (rule\n        (vars (this))\n        (filter (and (neighbor_of this other) (color_equals (color_of other) R)))\n        (apply (update_color R))\n    )\n    (rule\n        (vars (this))\n        (filter (and (neighbor_of this other) (color_equals (color_of other) F)))\n        (apply (update_color F))\n    )\n    (rule\n        (vars (this))\n        (filter (and (neighbor_of this other) (color_equals (color_of other) B)))\n        (apply (update_color B))\n    )\n)\n}",
            "can_parse": false,
            "parse_error_message": "No terminal matches '}' in the current parser context, at line 23 col 1\n\n}\n^\n",
            "token_counts": {
                "do": 1,
                "rule": 4,
                "vars": 4,
                "this": 8,
                "filter": 4,
                "and": 4,
                "neighbor_of": 4,
                "other": 8,
                "color_equals": 4,
                "color_of": 4,
                "C": 1,
                "apply": 4,
                "update_color": 4,
                "R": 3,
                "F": 2,
                "B": 2,
                "}": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all rows that have objects of color C to the top of the grid, then recolor each row's non-C objects with a unique color.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n            (color_equals (color_of this) C)\n        )\n        (apply\n            (move_node up)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches 'c' in the current parser context, at line 5 col 14\n\n            (color_equals (color_of this) C)\n             ^\nExpected one of: \n\t* APPLY\n",
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "filter": 1,
                "color_equals": 1,
                "color_of": 1,
                "C": 1,
                "apply": 1,
                "move_node": 1,
                "up": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "For each row, move all cells to the left, stopping at the first 'C'. Then color the cells differently based on the row position.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (neighbor_of this other)\n        )\n        (apply\n            (extend_node left false)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color Y)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color B)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 6,
                "vars": 6,
                "this": 7,
                "other": 2,
                "filter": 6,
                "neighbor_of": 1,
                "apply": 6,
                "extend_node": 1,
                "left": 1,
                "false": 1,
                "update_color": 5,
                "R": 1,
                "Y": 1,
                "F": 1,
                "G": 1,
                "B": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Extend the objects toward the nearest clusters, forming new groups and recoloring the extended parts with unique colors.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of this) O)\n            )\n        )\n        (apply\n            (extend_node (direction_of other) false)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) O)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 5,
                "other": 3,
                "filter": 2,
                "and": 1,
                "neighbor_of": 1,
                "color_equals": 2,
                "color_of": 2,
                "O": 2,
                "apply": 2,
                "extend_node": 1,
                "direction_of": 1,
                "false": 1,
                "update_color": 1,
                "R": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Color all cells of objects enclosed by rows of C with different colors based on their initial rows.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) O)\n                (and\n                    (not (neighbor_of this (neighbor_of this)))\n                    (neighbor_of this (neighbor_of this))\n                )\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) O)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) O)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) O)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) O)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 8 col 44\n\n                 (not (neighbor_of this (neighbor_of this)))\n                                        ^\nExpected one of: \n\t* VAR\n",
            "token_counts": {
                "do": 1,
                "rule": 5,
                "vars": 5,
                "this": 18,
                "filter": 5,
                "and": 6,
                "color_equals": 5,
                "color_of": 5,
                "O": 5,
                "not": 1,
                "neighbor_of": 8,
                "apply": 5,
                "update_color": 5,
                "R": 1,
                "other": 8,
                "Y": 1,
                "F": 1,
                "G": 1,
                "B": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all rows to a specific color, excluding the color C.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (not (color_equals (color_of this) C))\n        )\n        (apply\n            (update_color R)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "filter": 1,
                "not": 1,
                "color_equals": 1,
                "color_of": 1,
                "C": 1,
                "apply": 1,
                "update_color": 1,
                "R": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all objects of color C, based on their position relative to other objects of the same color C.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of this) C)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) C)\n                (color_equals (color_of other) C)\n                (neighbor_of this other)\n                (column_equals (column_of this) (column_of other))\n            )\n        )\n        (apply\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) C)\n                (color_equals (color_of other) C)\n                (neighbor_of this other)\n                (not (column_equals (column_of this) (column_of other)))\n                (row_equals (row_of this) (row_of other))\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) C)\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) C)\n                (color_equals (color_of other) C)\n                (neighbor_of this other)\n                (not (column_equals (column_of this) (column_of other)))\n                (not (row_equals (row_of this) (row_of other)))\n            )\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 17 col 17\n\n                (neighbor_of this other)\n                ^\nExpected one of: \n\t* RPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 5,
                "vars": 5,
                "this": 18,
                "other": 15,
                "filter": 5,
                "color_equals": 8,
                "color_of": 8,
                "C": 8,
                "apply": 5,
                "update_color": 5,
                "R": 1,
                "and": 3,
                "neighbor_of": 3,
                "column_equals": 3,
                "column_of": 6,
                "F": 1,
                "not": 3,
                "row_equals": 2,
                "row_of": 4,
                "G": 1,
                "B": 1,
                "Y": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor rows of the grid with new colors while preserving the objects in column.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (column_equals (column_of this) (column_of other))\n        )\n        (apply\n            (update_color (color_of other))\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "other": 3,
                "filter": 1,
                "column_equals": 1,
                "column_of": 2,
                "apply": 1,
                "update_color": 1,
                "color_of": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects by on step up according to their columns.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node up)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 1,
                "filter": 1,
                "apply": 1,
                "move_node": 1,
                "up": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects except color C horizontally towards the nearest C columns",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) C))\n                (neighbor_of this other)\n                (color_equals (color_of other) C)\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 8 col 17\n\n                (color_equals (color_of other) C)\n                ^\nExpected one of: \n\t* RPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 3,
                "other": 4,
                "filter": 1,
                "and": 1,
                "not": 1,
                "color_equals": 2,
                "color_of": 2,
                "C": 2,
                "neighbor_of": 1,
                "apply": 1,
                "move_node_max": 1,
                "direction_of": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Extend objects into rows, wiping out other objects in their path, until they encounter a vertical full column of color C.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter (and (color_equals (color_of other) C) (neighbor_of this other)))\n        (apply (extend_node (direction_of other) true))\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "other": 4,
                "filter": 1,
                "and": 1,
                "color_equals": 1,
                "color_of": 1,
                "C": 1,
                "neighbor_of": 1,
                "apply": 1,
                "extend_node": 1,
                "direction_of": 1,
                "true": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor each row in a gradient fashion.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) O)\n                (neighbor_of this this)\n            )\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) C)\n                (neighbor_of this this)\n            )\n        )\n        (apply\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color G)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 5,
                "vars": 5,
                "this": 11,
                "filter": 5,
                "apply": 5,
                "update_color": 5,
                "R": 1,
                "and": 2,
                "color_equals": 2,
                "color_of": 2,
                "O": 1,
                "neighbor_of": 2,
                "Y": 1,
                "C": 1,
                "F": 1,
                "B": 1,
                "G": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor rows to different colors based on the given pattern and directions.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (not (color_equals (color_of this) C))\n        )\n        (apply\n            (update_color (color_of other))\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "other": 2,
                "filter": 1,
                "not": 1,
                "color_equals": 1,
                "color_of": 2,
                "C": 1,
                "apply": 1,
                "update_color": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor objects inside horizontal stripes to different colors.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) O))\n        (apply (update_color R))\n    )\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) Y))\n        (apply (update_color F))\n    )\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) G))\n        (apply (update_color G))\n    )\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) B))\n        (apply (update_color B))\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 4,
                "vars": 4,
                "this": 8,
                "filter": 4,
                "color_equals": 4,
                "color_of": 4,
                "O": 1,
                "apply": 4,
                "update_color": 4,
                "R": 1,
                "Y": 1,
                "F": 1,
                "G": 2,
                "B": 2
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all horizontal lines of objects of size greater than 1, except the color C, to different colors based on their order.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (not (color_equals (color_of this) C))\n                (size_equals (size_of this) max)\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (not (color_equals (color_of this) C))\n                (size_equals (size_of this) max)\n            )\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (not (color_equals (color_of this) C))\n                (size_equals (size_of this) max)\n            )\n        )\n        (apply\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (not (color_equals (color_of this) C))\n                (size_equals (size_of this) max)\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (not (color_equals (color_of this) C))\n                (size_equals (size_of this) max)\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 5,
                "vars": 5,
                "this": 15,
                "filter": 5,
                "and": 5,
                "not": 5,
                "color_equals": 5,
                "color_of": 5,
                "C": 5,
                "size_equals": 5,
                "size_of": 5,
                "max": 5,
                "apply": 5,
                "update_color": 5,
                "R": 1,
                "Y": 1,
                "F": 1,
                "G": 1,
                "B": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all objects except those in color C depending on their initial position: the top rows to color R, the middle rows to color F, and the bottom rows to color B.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (not (color_equals (color_of this) C))\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (not (color_equals (color_of this) C))\n                (or\n                    (column_equals (column_of this) 2)\n                    (column_equals (column_of this) 6)\n                )\n            )\n        )\n        (apply\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (not (color_equals (color_of this) C))\n                (or\n                    (column_equals (column_of this) 10)\n                    (column_equals (column_of this) 14)\n                )\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n)\n",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 3,
                "vars": 3,
                "this": 10,
                "filter": 3,
                "not": 3,
                "color_equals": 3,
                "color_of": 3,
                "C": 3,
                "apply": 3,
                "update_color": 3,
                "R": 1,
                "and": 2,
                "or": 2,
                "column_equals": 4,
                "column_of": 4,
                "2": 1,
                "6": 1,
                "F": 1,
                "10": 1,
                "14": 1,
                "B": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all objects of width 6 to different colors based on their row position.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (width_equals (width_of this) 6)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (width_equals (width_of this) 6)\n                (neighbor_of this other)\n                (color_equals (color_of other) R)\n            )\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (width_equals (width_of this) 6)\n                (neighbor_of this other)\n                (color_equals (color_of other) Y)\n            )\n        )\n        (apply\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (width_equals (width_of this) 6)\n                (neighbor_of this other)\n                (color_equals (color_of other) F)\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (width_equals (width_of this) 6)\n                (neighbor_of this other)\n                (color_equals (color_of other) G)\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 17 col 17\n\n                (color_equals (color_of other) R)\n                ^\nExpected one of: \n\t* RPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 5,
                "vars": 5,
                "this": 14,
                "filter": 5,
                "width_equals": 5,
                "width_of": 5,
                "6": 5,
                "apply": 5,
                "update_color": 5,
                "R": 2,
                "other": 12,
                "and": 4,
                "neighbor_of": 4,
                "color_equals": 4,
                "color_of": 4,
                "Y": 2,
                "F": 2,
                "G": 2,
                "B": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all rows of C objects to different colors.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of this) C)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (neighbor_of this other)\n                (color_equals (color_of other) C)\n            )\n        )\n        (apply\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) F)\n                (neighbor_of this other)\n                (color_equals (color_of other) C)\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (neighbor_of this other)\n                (color_equals (color_of other) R)\n            )\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) G)\n                (neighbor_of this other)\n                (color_equals (color_of other) R)\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 17 col 17\n\n                (color_equals (color_of other) C)\n                ^\nExpected one of: \n\t* RPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 5,
                "vars": 5,
                "this": 14,
                "other": 13,
                "filter": 5,
                "color_equals": 9,
                "color_of": 9,
                "C": 3,
                "apply": 5,
                "update_color": 5,
                "R": 5,
                "and": 4,
                "neighbor_of": 4,
                "F": 2,
                "G": 2,
                "Y": 1,
                "B": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all non-border objects toward the border object, until they are neighbors.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (neighbor_of this other))\n                (and\n                    (not (column_equals (column_of this) (column_of other)))\n                    (color_equals (color_of other) C)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 3,
                "other": 5,
                "filter": 1,
                "and": 2,
                "not": 2,
                "neighbor_of": 1,
                "column_equals": 1,
                "column_of": 2,
                "color_equals": 1,
                "color_of": 1,
                "C": 1,
                "apply": 1,
                "move_node_max": 1,
                "direction_of": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects to the nearest boundary cell and recolor them based on their final position.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (neighbor_of this other)\n        )\n        (apply\n            (move_node_max (direction_of other))\n            (update_color (color_of other))\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "other": 4,
                "filter": 1,
                "neighbor_of": 1,
                "apply": 1,
                "move_node_max": 1,
                "direction_of": 1,
                "update_color": 1,
                "color_of": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all objects to different colors based on their relative position, leaving some objects unchanged.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) O))\n        (apply (update_color Y))\n    )\n    (rule\n        (vars (this))\n        (filter (and (color_equals (color_of this) O) (color_equals (color_of this) O)))\n        (apply (update_color B))\n    )\n    (rule\n        (vars (this))\n        (filter (and (color_equals (color_of this) O) (color_equals (color_of this) O)))\n        (apply (update_color G))\n    )\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) O))\n        (apply (update_color F))\n    )\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) O))\n        (apply (update_color R))\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 5,
                "vars": 5,
                "this": 12,
                "filter": 5,
                "color_equals": 7,
                "color_of": 7,
                "O": 7,
                "apply": 5,
                "update_color": 5,
                "Y": 1,
                "and": 2,
                "B": 1,
                "G": 1,
                "F": 1,
                "R": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor each row of objects in alternating colors.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (column_equals (column_of this) even)\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (column_equals (column_of this) odd)\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (neighbor_of this other)\n                (color_equals (color_of other) C)\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (neighbor_of this other)\n                (color_equals (color_of other) G)\n            )\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (neighbor_of this other)\n                (color_equals (color_of other) Y)\n            )\n        )\n        (apply\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (neighbor_of this other)\n                (color_equals (color_of other) F)\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 32 col 17\n\n                (color_equals (color_of other) C)\n                ^\nExpected one of: \n\t* RPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 6,
                "vars": 6,
                "this": 18,
                "filter": 6,
                "and": 6,
                "size_equals": 6,
                "size_of": 6,
                "1": 6,
                "column_equals": 2,
                "column_of": 2,
                "even": 1,
                "apply": 6,
                "update_color": 6,
                "R": 3,
                "odd": 1,
                "neighbor_of": 4,
                "other": 8,
                "color_equals": 4,
                "color_of": 4,
                "C": 1,
                "G": 1,
                "Y": 2,
                "F": 2,
                "B": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Extend all objects to the right into a bar of 6 cells, retaining their color.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n            (apply\n                (extend_node right false)\n            )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 1,
                "filter": 1,
                "apply": 1,
                "extend_node": 1,
                "right": 1,
                "false": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects adjacent to the central object horizontally outward, then recolor them in alternating colors.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (neighbor_of this C))\n        (apply\n            (move_node left)\n            (move_node right)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter (size_equals (size_of this) 6))\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter (size_equals (size_of this) 4))\n        (apply\n            (update_color Y)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter (size_equals (size_of this) 5))\n        (apply\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter (size_equals (size_of this) 7))\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter (size_equals (size_of this) 8))\n        (apply\n            (update_color G)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches 'C' in the current parser context, at line 4 col 35\n\n        (filter (neighbor_of this C))\n                                  ^\nExpected one of: \n\t* VAR\n",
            "token_counts": {
                "do": 1,
                "rule": 6,
                "vars": 6,
                "this": 12,
                "filter": 6,
                "neighbor_of": 1,
                "C": 1,
                "apply": 6,
                "move_node": 2,
                "left": 1,
                "right": 1,
                "size_equals": 5,
                "size_of": 5,
                "6": 1,
                "update_color": 5,
                "R": 1,
                "4": 1,
                "Y": 1,
                "5": 1,
                "F": 1,
                "7": 1,
                "B": 1,
                "8": 1,
                "G": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Change the color of all objects above and below the middle filled row to designated colors, and color all objects to red above the middle row.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (column_equals (column_of this) odd))\n        (apply (update_color R))\n    )\n    (rule\n        (vars (this))\n        (filter (and (column_equals (column_of this) even) (neighbor_of this other)))\n        (apply (update_color (color_of other)))\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 5,
                "filter": 2,
                "column_equals": 2,
                "column_of": 2,
                "odd": 1,
                "apply": 2,
                "update_color": 2,
                "R": 1,
                "and": 1,
                "even": 1,
                "neighbor_of": 1,
                "other": 2,
                "color_of": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of size 1 and recolor them as per pattern.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 1)\n        )\n        (apply\n            (move_node (right))\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 1)\n        )\n        (apply\n            (move_node (down))\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 1)\n        )\n        (apply\n            (move_node (down_right))\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 1)\n        )\n        (apply\n            (move_node (down_left))\n            (update_color Y)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 1)\n        )\n        (apply\n            (move_node (left))\n            (update_color G)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches 'r' in the current parser context, at line 8 col 25\n\n            (move_node (right))\n                        ^\nExpected one of: \n\t* DIRECTION_OF\n",
            "token_counts": {
                "do": 1,
                "rule": 5,
                "vars": 5,
                "this": 10,
                "filter": 5,
                "size_equals": 5,
                "size_of": 5,
                "1": 5,
                "apply": 5,
                "move_node": 5,
                "right": 1,
                "update_color": 5,
                "R": 1,
                "down": 1,
                "F": 1,
                "down_right": 1,
                "B": 1,
                "down_left": 1,
                "Y": 1,
                "left": 1,
                "G": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color different than C towards the border made of Cs if they are neighbors, then recolor them according to their original position relative to the vertical line of Cs.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) C))\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) C)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 4)\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 5)\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 10)\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 1)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 13)\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 7)\n        )\n        (apply\n            (update_color F)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 7,
                "vars": 7,
                "this": 15,
                "other": 4,
                "filter": 7,
                "and": 2,
                "not": 1,
                "color_equals": 2,
                "color_of": 2,
                "C": 2,
                "neighbor_of": 1,
                "apply": 7,
                "move_node_max": 1,
                "direction_of": 1,
                "column_equals": 6,
                "column_of": 6,
                "4": 1,
                "update_color": 6,
                "Y": 1,
                "5": 1,
                "G": 2,
                "10": 1,
                "B": 1,
                "1": 1,
                "R": 1,
                "13": 1,
                "7": 1,
                "F": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all rows that intersect with columns of color C. Each row is colored uniquely.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n            (column_equals (column_of this) (column_of other))\n        (apply\n            (update_color R)\n        )\n    )\n     (rule\n        (vars (this))\n        (filter)\n          (column_equals (column_of this) (column_of other))\n        (apply\n            (update_color Y)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n          (column_equals (column_of this) (column_of other))\n        (apply\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n            (column_equals (column_of this) (column_of other))\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n            (column_equals (column_of this) (column_of other))\n        (apply\n            (update_color B)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches 'c' in the current parser context, at line 5 col 14\n\n            (column_equals (column_of this) (column_o\n             ^\nExpected one of: \n\t* APPLY\n",
            "token_counts": {
                "do": 1,
                "rule": 5,
                "vars": 5,
                "this": 10,
                "filter": 5,
                "column_equals": 5,
                "column_of": 10,
                "other": 5,
                "apply": 5,
                "update_color": 5,
                "R": 1,
                "Y": 1,
                "F": 1,
                "G": 1,
                "B": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Change the color of rows adjacent to the colored cells with C.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of other) C)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color (color_of this))\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 3,
                "other": 3,
                "filter": 1,
                "and": 1,
                "color_equals": 1,
                "color_of": 2,
                "C": 1,
                "neighbor_of": 1,
                "apply": 1,
                "update_color": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor rows with each color block to different colors",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (and (color_equals (color_of this) C) (neighbor_of this this)))\n        (apply (update_color R))\n    )\n    (rule\n        (vars (this))\n        (filter (and (color_equals (color_of this) C) (neighbor_of this this)))\n        (apply (update_color F))\n    )\n    (rule\n        (vars (this))\n        (filter (and (color_equals (color_of this) C) (neighbor_of this this)))\n        (apply (update_color B))\n    )\n    (rule\n        (vars (this))\n        (filter (and (color_equals (color_of this) C) (neighbor_of this this)))\n        (apply (update_color G))\n    )\n    (rule\n        (vars (this))\n        (filter (and (color_equals (color_of this) C) (neighbor_of this this)))\n        (apply (update_color Y))\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 5,
                "vars": 5,
                "this": 20,
                "filter": 5,
                "and": 5,
                "color_equals": 5,
                "color_of": 5,
                "C": 5,
                "neighbor_of": 5,
                "apply": 5,
                "update_color": 5,
                "R": 1,
                "F": 1,
                "B": 1,
                "G": 1,
                "Y": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Color the rows to the left and right of the cyan columns with distinct colors.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) C)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) C)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) C)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 3,
                "vars": 3,
                "this": 9,
                "other": 6,
                "filter": 3,
                "and": 3,
                "color_equals": 3,
                "color_of": 3,
                "C": 3,
                "neighbor_of": 3,
                "apply": 3,
                "update_color": 3,
                "R": 1,
                "F": 1,
                "B": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move objects to the center line of color C and recolor them.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) C))\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (move_node (direction_of center))\n            (update_color (color_of this))\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches 'c' in the current parser context, at line 11 col 38\n\n            (move_node (direction_of center))\n                                     ^\nExpected one of: \n\t* VAR\n",
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 4,
                "other": 2,
                "filter": 1,
                "and": 1,
                "not": 1,
                "color_equals": 1,
                "color_of": 2,
                "C": 1,
                "neighbor_of": 1,
                "apply": 1,
                "move_node": 1,
                "direction_of": 1,
                "center": 1,
                "update_color": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Extend objects in adjacent blocks, with each adjacent block represented by one row or column solely occupied by color C's, into a line of colors only on that row or column.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of other) C)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (extend_node (direction_of other) true)\n        )    \n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "other": 4,
                "filter": 1,
                "and": 1,
                "color_equals": 1,
                "color_of": 1,
                "C": 1,
                "neighbor_of": 1,
                "apply": 1,
                "extend_node": 1,
                "direction_of": 1,
                "true": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color different than C toward the object of color C, then recolor them based on their initial position where they were moved from.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) C))\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n            (update_color (color_of this))\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 4,
                "other": 3,
                "filter": 1,
                "and": 1,
                "not": 1,
                "color_equals": 1,
                "color_of": 2,
                "C": 1,
                "neighbor_of": 1,
                "apply": 1,
                "move_node_max": 1,
                "direction_of": 1,
                "update_color": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor the first row of size 6 to R, the second row of size 6 to Y, the third row of size 6 to F, and the fourth row of size 6 to G.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (size_equals (size_of this) 6)\n                (and\n                    (neighbor_of this other)\n                    (and\n                        (column_equals (column_of other) center)\n                        (color_equals (color_of other) C)\n                    )\n                )\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 6)\n                (and\n                    (neighbor_of this other)\n                    (and\n                        (row_equals (row_of this) plus_1)\n                        (color_equals (color_of this) R)\n                    )\n                )\n            )\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 6)\n                (and\n                    (neighbor_of this other)\n                    (and\n                        (row_equals (row_of this) plus_1)\n                        (color_equals (color_of this) Y)\n                    )\n                )\n            )\n        )\n        (apply\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 6)\n                (and\n                    (neighbor_of this other)\n                    (and\n                        (row_equals (row_of this) plus_1)\n                        (color_equals (color_of this) F)\n                    )\n                )\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches 'r' in the current parser context, at line 28 col 26\n\n                        (row_equals (row_of this) plus_1)\n                         ^\nExpected one of: \n\t* SHAPE_EQ\n\t* OP_NOT\n\t* OP_AND\n\t* WIDTH_EQ\n\t* DEGREE_EQ\n\t* SIZE_EQ\n\t* COLUMN_EQ\n\t* COLOR_EQ\n\t* NEIGHBOR_OF\n\t* HEIGHT_EQ\n\t* OP_OR\n",
            "token_counts": {
                "do": 1,
                "rule": 4,
                "vars": 4,
                "this": 18,
                "filter": 4,
                "and": 12,
                "size_equals": 4,
                "size_of": 4,
                "6": 4,
                "neighbor_of": 4,
                "other": 9,
                "column_equals": 1,
                "column_of": 1,
                "center": 1,
                "color_equals": 4,
                "color_of": 4,
                "C": 1,
                "apply": 4,
                "update_color": 4,
                "R": 2,
                "row_equals": 3,
                "row_of": 3,
                "plus_1": 3,
                "Y": 2,
                "F": 2,
                "G": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor objects of color other than 'C' to different colors based on their vertical positions.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (not (color_equals (color_of this) C))\n        )\n        (apply\n            (if (<= (column_of this) 3)\n                (update_color R)\n            (if (<= (column_of this) 7)\n                (update_color F)\n            (if (<= (column_of this) 11)\n                (update_color B)\n            (if (<= (column_of this) 15)\n                (update_color Y)\n            (update_color G))))))\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches 'i' in the current parser context, at line 8 col 14\n\n            (if (<= (column_of this) 3)\n             ^\nExpected one of: \n\t* TR_MIRROR\n\t* TR_MOVE_NODE\n\t* TR_NOOP\n\t* TR_MOVE_NODE_MAX\n\t* TR_HOLLOW_RECTANGLE\n\t* TR_FILL_RECTANGLE\n\t* TR_ROTATE_NODE\n\t* TR_EXTEND_NODE\n\t* TR_ADD_BORDER\n\t* TR_FLIP\n\t* TR_INSERT\n\t* TR_UPDATE_COLOR\n",
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 6,
                "other": 1,
                "filter": 1,
                "not": 1,
                "color_equals": 1,
                "color_of": 1,
                "C": 1,
                "apply": 1,
                "if": 4,
                "<=": 4,
                "column_of": 4,
                "3": 1,
                "update_color": 5,
                "R": 1,
                "7": 1,
                "F": 1,
                "11": 1,
                "B": 1,
                "15": 1,
                "Y": 1,
                "G": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects one step towards the first encountered object in its row or column and recolor them in the same manner as the neighboring object.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (neighbor_of this other)\n        )\n        (apply\n            (move_node (direction_of other))\n            (update_color (color_of other))\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "other": 4,
                "filter": 1,
                "neighbor_of": 1,
                "apply": 1,
                "move_node": 1,
                "direction_of": 1,
                "update_color": 1,
                "color_of": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor objects of size 6 in each vertical block to a different distinct color.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (size_equals (size_of this) 6)\n                (column_equals (column_of this) 4)\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (size_equals (size_of this) 6)\n                (column_equals (column_of this) 5)\n            )\n        )\n        (apply\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (size_equals (size_of this) 6)\n                (column_equals (column_of this) 10)\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (size_equals (size_of this) 6)\n                (column_equals (column_of this) 11)\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 4,
                "vars": 4,
                "this": 12,
                "filter": 4,
                "and": 4,
                "size_equals": 4,
                "size_of": 4,
                "6": 4,
                "column_equals": 4,
                "column_of": 4,
                "4": 1,
                "apply": 4,
                "update_color": 4,
                "R": 1,
                "5": 1,
                "F": 1,
                "10": 1,
                "B": 1,
                "11": 1,
                "G": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all objects except those of color C to different colors.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (not (color_equals (color_of this) C))\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) Y)\n        )\n        (apply\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) F)\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 4,
                "vars": 4,
                "this": 8,
                "filter": 4,
                "not": 1,
                "color_equals": 4,
                "color_of": 4,
                "C": 1,
                "apply": 4,
                "update_color": 4,
                "R": 1,
                "Y": 1,
                "F": 2,
                "B": 2,
                "G": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor objects separated by columns of 'C' with different colors.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (column_equals (column_of this) 4))\n        (apply (update_color R))\n    )\n    (rule\n        (vars (this other))\n        (filter (and (column_equals (column_of this) 6) (column_equals (column_of other) 10)))\n        (apply (update_color F))\n    )\n    (rule\n        (vars (this other))\n        (filter (and (column_equals (column_of this) 14) (column_equals (column_of other) 18)))\n        (apply (update_color B))\n    )\n    (rule\n        (vars (this other))\n        (filter (and (column_equals (column_of this) 2) (column_equals (column_of other) 8)))\n        (apply (update_color G))\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 4,
                "vars": 4,
                "this": 8,
                "filter": 4,
                "column_equals": 7,
                "column_of": 7,
                "4": 1,
                "apply": 4,
                "update_color": 4,
                "R": 1,
                "other": 6,
                "and": 3,
                "6": 1,
                "10": 1,
                "F": 1,
                "14": 1,
                "18": 1,
                "B": 1,
                "2": 1,
                "8": 1,
                "G": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move objects in the upper half to the left, objects in the middle to the right, and objects in the lower half to the left, recoloring them in the process.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (move_node left)\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (move_node right)\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (move_node left)\n            (update_color B)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 3,
                "vars": 3,
                "this": 9,
                "filter": 3,
                "and": 3,
                "size_equals": 3,
                "size_of": 3,
                "1": 3,
                "neighbor_of": 3,
                "other": 3,
                "apply": 3,
                "move_node": 3,
                "left": 2,
                "update_color": 3,
                "R": 1,
                "right": 1,
                "F": 1,
                "B": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "For each thick line of color C, recolor one side entirely to color R and the other side to colors Y, F, G, and B moving left to right.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) C)\n                (neighbor_of this this)\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) O)\n                (column_equals (column_of this) even)\n            )\n        )\n        (apply\n            (update_color Y)\n            (update_color F)\n            (update_color G)\n            (update_color B)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 7,
                "filter": 2,
                "and": 2,
                "color_equals": 2,
                "color_of": 2,
                "C": 1,
                "neighbor_of": 1,
                "apply": 2,
                "update_color": 5,
                "R": 1,
                "O": 1,
                "column_equals": 1,
                "column_of": 1,
                "even": 1,
                "Y": 1,
                "F": 1,
                "G": 1,
                "B": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move objects towards the left within each row, except the object of color C remaining in the center without overlap.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (not (color_equals (color_of this) C))\n        )\n        (apply\n            (move_node left)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "filter": 1,
                "not": 1,
                "color_equals": 1,
                "color_of": 1,
                "C": 1,
                "apply": 1,
                "move_node": 1,
                "left": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor the objects in the squares between the horizontal solid lines to R, F, and B. Recolor the objects in the squares between the horizontal dashed lines to Y, G, and B.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (not (color_equals (color_of this) C))\n                (and\n                    (height_equals (height_of this) 1)\n                    (or\n                        (column_equals (column_of this) 1)\n                        (column_equals (column_of this) 8)\n                        (column_equals (column_of this) 14)\n                    )\n                )\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (not (color_equals (color_of this) C))\n                (height_equals (height_of this) 4)\n            )\n        )\n        (apply\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (not (color_equals (color_of this) C))\n                (or\n                    (column_equals (column_of this) 0)\n                    (column_equals (column_of this) 6)\n                )\n                (or\n                    (height_equals (height_of this) 1)\n                    (height_equals (height_of this) 2)\n                )\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (not (color_equals (color_of this) C))\n                (and\n                    (height_equals (height_of this) 3)\n                    (or\n                        (column_equals (column_of this) 1)\n                        (column_equals (column_of this) 8)\n                        (column_equals (column_of this) 14)\n                    )\n                )\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (not (color_equals (color_of this) C))\n                (height_equals (height_of this) 2)\n            )\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 12 col 25\n\n                        (column_equals (column_of this) 14)\n                        ^\nExpected one of: \n\t* RPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 5,
                "vars": 5,
                "this": 24,
                "filter": 5,
                "and": 7,
                "not": 5,
                "color_equals": 5,
                "color_of": 5,
                "C": 5,
                "height_equals": 6,
                "height_of": 6,
                "1": 4,
                "or": 4,
                "column_equals": 8,
                "column_of": 8,
                "8": 2,
                "14": 2,
                "apply": 5,
                "update_color": 5,
                "R": 1,
                "4": 1,
                "F": 1,
                "0": 1,
                "6": 1,
                "2": 2,
                "B": 1,
                "3": 1,
                "G": 1,
                "Y": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move objects to their respective rows and recolor them accordingly.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) O)\n                (column_equals (column_of this) 4)\n            )\n        )\n        (apply\n            (move_node_max down)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) O)\n                (column_equals (column_of this) 10)\n            )\n        )\n        (apply\n            (move_node_max down)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (column_equals (column_of this) 5)\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) F)\n                (column_equals (column_of this) 5)\n            )\n        )\n        (apply\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) B)\n                (column_equals (column_of this) 5)\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 5,
                "vars": 5,
                "this": 15,
                "other": 5,
                "filter": 5,
                "and": 5,
                "color_equals": 5,
                "color_of": 5,
                "O": 2,
                "column_equals": 5,
                "column_of": 5,
                "4": 1,
                "apply": 5,
                "move_node_max": 2,
                "down": 2,
                "10": 1,
                "R": 2,
                "5": 3,
                "update_color": 3,
                "F": 2,
                "B": 2
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move objects of size 6 horizontally to the left of the nearest 'C' column with different horizontal positions.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 6)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) C)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 3,
                "other": 4,
                "filter": 1,
                "and": 2,
                "size_equals": 1,
                "size_of": 1,
                "6": 1,
                "neighbor_of": 1,
                "color_equals": 1,
                "color_of": 1,
                "C": 1,
                "apply": 1,
                "move_node_max": 1,
                "direction_of": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move the objects adjacent to the vertical lines to the right and then recolor them in a gradient pattern.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (not (color_equals (color_of this) C))\n        )\n        (apply\n            (move_node (direction_of other))\n            (update_color (color_of other))\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "other": 3,
                "filter": 1,
                "not": 1,
                "color_equals": 1,
                "color_of": 2,
                "C": 1,
                "apply": 1,
                "move_node": 1,
                "direction_of": 1,
                "update_color": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move objects of color O towards the nearest object of color C, extend them until they hit the objects, and recolor the blocks in between with different colors based on their starting row.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) O)\n                (color_equals (color_of other) C)\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n            (update_color (if (neighbor_of this) G Y))\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) O)\n        )\n        (apply\n            (update_color (if (row_equals (row_of this) 0) R Y))\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) O)\n        )\n        (apply\n            (update_color (if (row_equals (row_of this) 4) B Y))\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches 'i' in the current parser context, at line 12 col 28\n\n            (update_color (if (neighbor_of this) G Y))\n                           ^\nExpected one of: \n\t* COLOR_OF\n",
            "token_counts": {
                "do": 1,
                "rule": 3,
                "vars": 3,
                "this": 9,
                "other": 3,
                "filter": 3,
                "and": 1,
                "color_equals": 4,
                "color_of": 4,
                "O": 3,
                "C": 1,
                "apply": 3,
                "move_node_max": 1,
                "direction_of": 1,
                "update_color": 3,
                "if": 3,
                "neighbor_of": 1,
                "G": 1,
                "Y": 3,
                "row_equals": 2,
                "row_of": 2,
                "0": 1,
                "R": 1,
                "4": 1,
                "B": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Color objects adjacent to the horizontal bar-like shapes with R, Y, F, G, B in different rows.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) O)\n                (or\n                    (and (neighbor_of this (other O)) (color_equals (color_of other) C))\n                    (and (neighbor_of this (other Y)) (color_equals (color_of other) C))\n                    (and (neighbor_of this (other F)) (color_equals (color_of other) C))\n                    (and (neighbor_of this (other G)) (color_equals (color_of other) C))\n                    (and (neighbor_of this (other B)) (color_equals (color_of other) C))\n                )\n            )\n        )\n        (apply\n            (update_color R)\n            (update_color Y)\n            (update_color F)\n            (update_color G)\n            (update_color B)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 8 col 44\n\n                 (and (neighbor_of this (other O)) (color_equals (color_of other\n                                        ^\nExpected one of: \n\t* VAR\n",
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 7,
                "filter": 1,
                "and": 6,
                "color_equals": 6,
                "color_of": 6,
                "O": 2,
                "or": 1,
                "neighbor_of": 5,
                "other": 10,
                "C": 5,
                "Y": 2,
                "F": 2,
                "G": 2,
                "B": 2,
                "apply": 1,
                "update_color": 5,
                "R": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move objects of size 6 towards the bottom or top, depending on their position, then recolor them.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (size_equals (size_of this) 6)\n        )\n        (apply\n            (move_node down)\n            (update_color Y)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 6)\n                (neighbor_of this other)\n                (color_equals (color_of other) C)\n            )\n        )\n        (apply\n            (move_node up)\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 6)\n                (neighbor_of this other)\n                (not (color_equals (color_of this) R))\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 18 col 17\n\n                (color_equals (color_of other) C)\n                ^\nExpected one of: \n\t* RPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 3,
                "vars": 3,
                "this": 9,
                "other": 6,
                "filter": 3,
                "size_equals": 3,
                "size_of": 3,
                "6": 3,
                "apply": 3,
                "move_node": 2,
                "down": 1,
                "update_color": 3,
                "Y": 1,
                "and": 2,
                "neighbor_of": 2,
                "color_equals": 2,
                "color_of": 2,
                "C": 1,
                "up": 1,
                "R": 2,
                "not": 1,
                "B": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects to the line directly below the horizontal line of size greater than 1, except the 'C' objects. Recolor the objects based on the segment they are in.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) C))\n                (and\n                    (neighbor_of this other)\n                    (size_equals (size_of other) max)\n                )\n            )\n        )\n        (apply\n            (move_node down)\n            (update_color (color_of this))\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 4,
                "other": 3,
                "filter": 1,
                "and": 2,
                "not": 1,
                "color_equals": 1,
                "color_of": 2,
                "C": 1,
                "neighbor_of": 1,
                "size_equals": 1,
                "size_of": 1,
                "max": 1,
                "apply": 1,
                "move_node": 1,
                "down": 1,
                "update_color": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor the objects adjacent to the vertical line groups as R and separate groups of horizontal lines with unique colors.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (neighbor_of this other)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) center)\n        )\n        (apply\n            (update_color C)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (column_equals (column_of this) (14))\n                (height_equals (height_of this) 1)\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (column_equals (column_of this) (10))\n                (height_equals (height_of this) 1)\n            )\n        )\n        (apply\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (column_equals (column_of this) (6))\n                (height_equals (height_of this) 1)\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (column_equals (column_of this) (2))\n                (height_equals (height_of this) 1)\n            )\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '1' in the current parser context, at line 24 col 50\n\n       (column_equals (column_of this) (14))\n                                        ^\nExpected one of: \n\t* COLUMN_OF\n",
            "token_counts": {
                "do": 1,
                "rule": 6,
                "vars": 6,
                "this": 16,
                "other": 2,
                "filter": 6,
                "neighbor_of": 1,
                "apply": 6,
                "update_color": 6,
                "R": 1,
                "column_equals": 5,
                "column_of": 5,
                "center": 1,
                "C": 1,
                "and": 4,
                "14": 1,
                "height_equals": 4,
                "height_of": 4,
                "1": 4,
                "B": 1,
                "10": 1,
                "F": 1,
                "6": 1,
                "G": 1,
                "2": 1,
                "Y": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Update the color of the objects in each row based on their initial position and height.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (and (size_equals (size_of this) odd) (column_equals (column_of this) 2)))\n        (apply (update_color R))\n    )\n    (rule\n        (vars (this))\n        (filter (and (size_equals (size_of this) odd) (column_equals (column_of this) 5)))\n        (apply (update_color F))\n    )\n    (rule\n        (vars (this))\n        (filter (and (size_equals (size_of this) odd) (column_equals (column_of this) 8)))\n        (apply (update_color G))\n    )\n    (rule\n        (vars (this))\n        (filter (and (size_equals (size_of this) odd) (column_equals (column_of this) 11)))\n        (apply (update_color B))\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 4,
                "vars": 4,
                "this": 12,
                "filter": 4,
                "and": 4,
                "size_equals": 4,
                "size_of": 4,
                "odd": 4,
                "column_equals": 4,
                "column_of": 4,
                "2": 1,
                "apply": 4,
                "update_color": 4,
                "R": 1,
                "5": 1,
                "F": 1,
                "8": 1,
                "G": 1,
                "11": 1,
                "B": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor the objects adjacent to the blue-colored line on both sides with different colors.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) C)\n            )\n        )\n        (apply\n            (update_color (if (neighbor_of this other) (color_of this) Y B R F G))\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches 'i' in the current parser context, at line 11 col 28\n\n            (update_color (if (neighbor_of this other) (color_of th\n                           ^\nExpected one of: \n\t* COLOR_OF\n",
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 4,
                "other": 4,
                "filter": 1,
                "and": 1,
                "neighbor_of": 2,
                "color_equals": 1,
                "color_of": 2,
                "C": 1,
                "apply": 1,
                "update_color": 1,
                "if": 1,
                "Y": 1,
                "B": 1,
                "R": 1,
                "F": 1,
                "G": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Extend all objects of color C horizontally, without overlapping, and then recolor them to various colors based on their rows.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) C)\n        )\n        (apply\n            (extend_node right false)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) C)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) C)\n        )\n        (apply\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) C)\n        )\n        (apply\n            (update_color B)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 4,
                "vars": 4,
                "this": 8,
                "filter": 4,
                "color_equals": 4,
                "color_of": 4,
                "C": 4,
                "apply": 4,
                "extend_node": 1,
                "right": 1,
                "false": 1,
                "update_color": 3,
                "R": 1,
                "F": 1,
                "B": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects towards the object of color C that are in the same row as it, then recolor them.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) C)\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color B)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 5,
                "vars": 5,
                "this": 6,
                "other": 4,
                "filter": 5,
                "and": 1,
                "neighbor_of": 1,
                "color_equals": 1,
                "color_of": 1,
                "C": 1,
                "apply": 5,
                "move_node_max": 1,
                "direction_of": 1,
                "update_color": 4,
                "R": 1,
                "F": 1,
                "G": 1,
                "B": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor objects of size 6 to various colors based on their position.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (size_equals (size_of this) 6)\n                (column_equals (column_of this) 1)\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (size_equals (size_of this) 6)\n                (column_equals (column_of this) 2)\n            )\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (size_equals (size_of this) 6)\n                (column_equals (column_of this) 3)\n            )\n        )\n        (apply\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (size_equals (size_of this) 6)\n                (column_equals (column_of this) 4)\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (size_equals (size_of this) 6)\n                (column_equals (column_of this) 5)\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 5,
                "vars": 5,
                "this": 15,
                "filter": 5,
                "and": 5,
                "size_equals": 5,
                "size_of": 5,
                "6": 5,
                "column_equals": 5,
                "column_of": 5,
                "1": 1,
                "apply": 5,
                "update_color": 5,
                "R": 1,
                "2": 1,
                "Y": 1,
                "3": 1,
                "F": 1,
                "4": 1,
                "G": 1,
                "5": 1,
                "B": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color different than C and located in odd rows, one step left.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (not (color_equals (color_of this) C))\n                (column_equals (column_of this) odd)\n            )\n        )\n        (apply\n            (move_node left)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 3,
                "filter": 1,
                "and": 1,
                "not": 1,
                "color_equals": 1,
                "color_of": 1,
                "C": 1,
                "column_equals": 1,
                "column_of": 1,
                "odd": 1,
                "apply": 1,
                "move_node": 1,
                "left": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor objects around the central column with different sequences of colors.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (and (neighbor_of this other) (color_equals (color_of other) C)))\n        (apply (update_color R))\n    )\n    (rule\n        (vars (this))\n        (filter (and (neighbor_of this other) (color_equals (color_of other) C)))\n        (apply (update_color Y))\n    )\n    (rule\n        (vars (this))\n        (filter (and (neighbor_of this other) (color_equals (color_of other) C)))\n        (apply (update_color G))\n    )\n    (rule\n        (vars (this))\n        (filter (and (neighbor_of this other) (color_equals (color_of other) C)))\n        (apply (update_color B))\n    )\n    (rule\n        (vars (this))\n        (filter (and (neighbor_of this other) (color_equals (color_of other) C)))\n        (apply (update_color F))\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 5,
                "vars": 5,
                "this": 10,
                "filter": 5,
                "and": 5,
                "neighbor_of": 5,
                "other": 10,
                "color_equals": 5,
                "color_of": 5,
                "C": 5,
                "apply": 5,
                "update_color": 5,
                "R": 1,
                "Y": 1,
                "G": 1,
                "B": 1,
                "F": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Extend all the objects from the edge of the grid toward the center in alternating colors.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 0)\n        )\n        (apply\n            (extend_node right true)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (neighbor_of this other)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and (column_equals (column_of this) 1) (color_equals (color_of this) R))\n        )\n        (apply\n            (move_node max)\n            (update_color Y)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and (column_equals (column_of this) 1) (color_equals (color_of this) Y))\n        )\n        (apply\n            (move_node max)\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and (column_equals (column_of this) 1) (color_equals (color_of this) F))\n        )\n        (apply\n            (move_node max)\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 7)\n        )\n        (apply\n            (extend_node right true)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and (neighbor_of this other) (not (column_equals (column_of this) 0)))\n        )\n        (apply\n            (update_color B)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches 'm' in the current parser context, at line 26 col 24\n\n            (move_node max)\n                       ^\nExpected one of: \n\t* LPAR\n\t* DIRECTION\n",
            "token_counts": {
                "do": 1,
                "rule": 7,
                "vars": 7,
                "this": 18,
                "filter": 7,
                "column_equals": 6,
                "column_of": 6,
                "0": 2,
                "apply": 7,
                "extend_node": 2,
                "right": 2,
                "true": 2,
                "other": 4,
                "neighbor_of": 2,
                "update_color": 5,
                "R": 2,
                "and": 4,
                "1": 3,
                "color_equals": 3,
                "color_of": 3,
                "move_node": 3,
                "max": 3,
                "Y": 2,
                "F": 2,
                "G": 1,
                "7": 1,
                "not": 1,
                "B": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Extend all objects horizontally, changing their colors to R, F, G, B based on their rows.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) O))\n        (apply\n            (update_color R)\n\n)\n    )\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) Y))\n        (apply\n            (update_color F)\n)\n    )\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) G))\n        (apply\n            (update_color G)\n)\n    )\n)\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) B))\n        (apply\n            (update_color B)\n)\n    )\n",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 25 col 5\n\n    (rule\n    ^\n",
            "token_counts": {
                "do": 1,
                "rule": 4,
                "vars": 4,
                "this": 8,
                "filter": 4,
                "color_equals": 4,
                "color_of": 4,
                "O": 1,
                "apply": 4,
                "update_color": 4,
                "R": 1,
                "Y": 1,
                "F": 1,
                "G": 2,
                "B": 2
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor objects centered on columns 0 and 11 towards the middle in each row with different colors.",
            "code": "(do\n  (rule\n    (vars (this other))\n    (filter\n      (and\n        (column_equals (column_of this) 0)\n        (and\n          (neighbor_of this other)\n          (column_equals (column_of other) 11))\n        )\n    )\n    (apply\n      (move_node end)\n      (update_color B)\n    )\n )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches 'e' in the current parser context, at line 13 col 18\n\n      (move_node end)\n                 ^\nExpected one of: \n\t* LPAR\n\t* DIRECTION\n",
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 3,
                "other": 3,
                "filter": 1,
                "and": 2,
                "column_equals": 2,
                "column_of": 2,
                "0": 1,
                "neighbor_of": 1,
                "11": 1,
                "apply": 1,
                "move_node": 1,
                "end": 1,
                "update_color": 1,
                "B": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor objects in specific rows such that rows above the object of color C are recolored to R, the rows below are recolored to Y, F, G, and B respectively.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (and (color_equals (color_of this) C) (row_equals (row_of this) 2)))\n        (apply\n            (extend_node down false)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter (and (color_equals (color_of this) C) (row_equals (row_of this) 4)))\n        (apply\n            (extend_node down false)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (row_equals (row_of this) (row_of this) 1)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (row_equals (row_of this) (row_of this) 4)\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (row_equals (row_of this) (row_of this) 5)\n        )\n        (apply\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (row_equals (row_of this) (row_of this) 6)\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (row_equals (row_of this) (row_of this) 8)\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches 'r' in the current parser context, at line 4 col 56\n\n (and (color_equals (color_of this) C) (row_equals (row_of this) 2)))\n                                        ^\nExpected one of: \n\t* SHAPE_EQ\n\t* OP_NOT\n\t* OP_AND\n\t* WIDTH_EQ\n\t* DEGREE_EQ\n\t* SIZE_EQ\n\t* COLUMN_EQ\n\t* COLOR_EQ\n\t* NEIGHBOR_OF\n\t* HEIGHT_EQ\n\t* OP_OR\n",
            "token_counts": {
                "do": 1,
                "rule": 7,
                "vars": 7,
                "this": 21,
                "filter": 7,
                "and": 2,
                "color_equals": 2,
                "color_of": 2,
                "C": 2,
                "row_equals": 7,
                "row_of": 12,
                "2": 1,
                "apply": 7,
                "extend_node": 2,
                "down": 2,
                "false": 2,
                "4": 2,
                "1": 1,
                "update_color": 5,
                "R": 1,
                "Y": 1,
                "5": 1,
                "F": 1,
                "6": 1,
                "B": 1,
                "8": 1,
                "G": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor each group of neighboring objects to a specific color.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (not (color_equals (color_of this) C))\n            )\n        )\n        (apply\n            (update_color (color_of other))\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 3,
                "other": 3,
                "filter": 1,
                "and": 1,
                "neighbor_of": 1,
                "not": 1,
                "color_equals": 1,
                "color_of": 2,
                "C": 1,
                "apply": 1,
                "update_color": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Fill the areas between vertical and horizontal blocks of color C with different colors.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) C))\n                (neighbor_of this other)\n                (color_equals (color_of other) C)\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) C))\n                (neighbor_of this other)\n                (color_equals (color_of other) C)\n            )\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) C))\n                (neighbor_of this other)\n                (color_equals (color_of other) C)\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) C))\n                (neighbor_of this other)\n                (color_equals (color_of other) C)\n            )\n        )\n        (apply\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) C))\n                (neighbor_of this other)\n                (color_equals (color_of other) C)\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 8 col 17\n\n                (color_equals (color_of other) C)\n                ^\nExpected one of: \n\t* RPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 5,
                "vars": 5,
                "this": 15,
                "other": 15,
                "filter": 5,
                "and": 5,
                "not": 5,
                "color_equals": 10,
                "color_of": 10,
                "C": 10,
                "neighbor_of": 5,
                "apply": 5,
                "update_color": 5,
                "R": 1,
                "Y": 1,
                "G": 1,
                "F": 1,
                "B": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor the horizontal bars with uniform color, maintaining alignment.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) O)\n                (column_equals (column_of this) center)\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) C)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) G)\n        )\n        (apply\n            (update_color B)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 3,
                "vars": 3,
                "this": 8,
                "filter": 3,
                "and": 2,
                "color_equals": 3,
                "color_of": 3,
                "O": 1,
                "column_equals": 1,
                "column_of": 1,
                "center": 1,
                "apply": 3,
                "update_color": 3,
                "R": 1,
                "other": 2,
                "C": 1,
                "neighbor_of": 1,
                "F": 1,
                "G": 1,
                "B": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor the topmost row and adjacent columns of each object of color C to R, then recolor the middle and bottom rows to different colors while keeping C as boundary.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) C)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) C)\n                (and (neighbor_of this other)\n                (and\n                    (color_equals (color_of other) O)\n                    (color_equals (color_of (other other)) O)\n            )\n        )\n    ))\n    (apply\n        (update_color F)\n    )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) C)\n                (and (neighbor_of this other)\n                (and (color_equals (color_of other) O)\n                (color_equals (color_of (other other)) O)\n                (neighbor_of other (other other)) ))\n        )\n    )\n    (apply\n        (update_color B)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) C)\n                (and (neighbor_of this other)\n                (and (color_equals (color_of other) (color_of (other other)))\n                (color_equals (color_of (other other)) (color_of (other (other other)))) ))\n        )\n    )\n    (apply\n        (update_color G)\n    )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 22 col 45\n\n                (color_equals (color_of (other other)) O)\n                                        ^\nExpected one of: \n\t* VAR\n",
            "token_counts": {
                "do": 1,
                "rule": 4,
                "vars": 4,
                "this": 12,
                "other": 25,
                "filter": 4,
                "and": 10,
                "color_equals": 10,
                "color_of": 12,
                "C": 4,
                "neighbor_of": 5,
                "apply": 4,
                "update_color": 4,
                "R": 1,
                "O": 4,
                "F": 1,
                "B": 1,
                "G": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor objects adjacent to the middle column blocks.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) C)\n            )\n        )\n        (apply\n            (update_color (color_of other))\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "other": 4,
                "filter": 1,
                "and": 1,
                "neighbor_of": 1,
                "color_equals": 1,
                "color_of": 2,
                "C": 1,
                "apply": 1,
                "update_color": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor objects around the columns of color C to new colors in each section.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) C)\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) C)\n            )\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) C)\n            )\n        )\n        (apply\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) C)\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) C)\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 5,
                "vars": 5,
                "this": 10,
                "other": 15,
                "filter": 5,
                "and": 5,
                "neighbor_of": 5,
                "color_equals": 5,
                "color_of": 5,
                "C": 5,
                "apply": 5,
                "update_color": 5,
                "B": 1,
                "Y": 1,
                "F": 1,
                "G": 1,
                "R": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor objects on the left and right of each row, matching horizontally with color stripes.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (neighbor_of this other)\n        )\n        (apply\n            (update_color (color_of other))\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "other": 3,
                "filter": 1,
                "neighbor_of": 1,
                "apply": 1,
                "update_color": 1,
                "color_of": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all segments connecting to cyan segments with different colors.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n            (and (neighbor_of this C) (not (color_equals (color_of this) C)))\n        )\n        (apply\n            (update_color (color_of (neighbor C)))\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches 'a' in the current parser context, at line 5 col 14\n\n            (and (neighbor_of this C) (not (color_equ\n             ^\nExpected one of: \n\t* APPLY\n",
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 3,
                "filter": 1,
                "and": 1,
                "neighbor_of": 1,
                "C": 3,
                "not": 1,
                "color_equals": 1,
                "color_of": 2,
                "apply": 1,
                "update_color": 1,
                "neighbor": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all objects to color R for the first row, Y for the fourth row and down of the left half, and G for the fourth row and down of the right half.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 0)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (or\n                    (column_equals (column_of this) 3)\n                    (column_equals (column_of this) 4)\n                )\n                (not\n                    (column_equals (column_of this) 0)\n                )\n            )\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (or\n                    (column_equals (column_of this) 6)\n                    (column_equals (column_of this) 7)\n                )\n                (not\n                    (column_equals (column_of this) 0)\n                )\n                (not\n                    (column_equals (column_of this) 3)\n                )\n                (not\n                    (column_equals (column_of this) 4)\n                )\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 39 col 17\n\n                (not\n                ^\nExpected one of: \n\t* RPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 3,
                "vars": 3,
                "this": 12,
                "filter": 3,
                "column_equals": 9,
                "column_of": 9,
                "0": 3,
                "apply": 3,
                "update_color": 3,
                "R": 1,
                "and": 2,
                "or": 2,
                "3": 2,
                "4": 2,
                "not": 4,
                "Y": 1,
                "6": 1,
                "7": 1,
                "G": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor each row of objects to a different color in the output grid, except those that maintain the same color C.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) C)\n                (row_equals (row_of this) 3)\n            )\n        )\n        (apply\n            (update_color O)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) C)\n                (row_equals (row_of this) 8)\n            )\n        )\n        (apply\n            (update_color O)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) C)\n                (row_equals (row_of this) 12)\n            )\n        )\n        (apply\n            (update_color O)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 1)\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (or\n                (color_equals (color_of this) B)\n                (color_equals (color_of this) F)\n            )\n        )\n        (apply\n            (extend_node (direction_of down) false)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) G)\n                (row_equals (row_of this) 6)\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches 'r' in the current parser context, at line 7 col 18\n\n                (row_equals (row_of this) 3)\n                 ^\nExpected one of: \n\t* SHAPE_EQ\n\t* OP_NOT\n\t* OP_AND\n\t* WIDTH_EQ\n\t* DEGREE_EQ\n\t* SIZE_EQ\n\t* COLUMN_EQ\n\t* COLOR_EQ\n\t* NEIGHBOR_OF\n\t* HEIGHT_EQ\n\t* OP_OR\n",
            "token_counts": {
                "do": 1,
                "rule": 6,
                "vars": 6,
                "this": 17,
                "filter": 6,
                "and": 4,
                "color_equals": 6,
                "color_of": 6,
                "C": 3,
                "row_equals": 4,
                "row_of": 4,
                "3": 1,
                "apply": 6,
                "update_color": 5,
                "O": 3,
                "8": 1,
                "12": 1,
                "size_equals": 1,
                "size_of": 1,
                "1": 1,
                "B": 3,
                "or": 1,
                "F": 1,
                "extend_node": 1,
                "direction_of": 1,
                "down": 1,
                "false": 1,
                "G": 1,
                "6": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor neighboring objects of size 10 in different colors based on their y-coordinate position.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (size_equals (size_of other) 10)\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (and\n                    (size_equals (size_of other) 10)\n                    (column_equals (column_of other) 5)\n                )\n            )\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (and\n                    (size_equals (size_of other) 10)\n                    (column_equals (column_of other) 7)\n                )\n            )\n        )\n        (apply\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (and\n                    (size_equals (size_of other) 10)\n                    (column_equals (column_of other) 9)\n                )\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (and\n                    (size_equals (size_of other) 10)\n                    (column_equals (column_of other) 11)\n                )\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 5,
                "vars": 5,
                "this": 10,
                "other": 19,
                "filter": 5,
                "and": 9,
                "neighbor_of": 5,
                "size_equals": 5,
                "size_of": 5,
                "10": 5,
                "apply": 5,
                "update_color": 5,
                "R": 1,
                "column_equals": 4,
                "column_of": 4,
                "5": 1,
                "Y": 1,
                "7": 1,
                "F": 1,
                "9": 1,
                "G": 1,
                "11": 1,
                "B": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move objects to the row flowing with only one color, matching the color in their row",
            "code": "(do (rule (vars (this)) (filter) (apply (move_node_max down) (update_color C) )))",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 1,
                "filter": 1,
                "apply": 1,
                "move_node_max": 1,
                "down": 1,
                "update_color": 1,
                "C": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of size 11 one step towards the empty cells and recolor them based on their row positions.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (size_equals (size_of this) 11)\n            )\n        )\n        (apply\n            (move_node down)\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (size_equals (size_of this) 11)\n            )\n        )\n        (apply\n            (move_node down)\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (size_equals (size_of this) 11)\n            )\n        )\n        (apply\n            (move_node down)\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (size_equals (size_of this) 11)\n            )\n        )\n        (apply\n            (move_node down)\n            (update_color B)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches ')' in the current parser context, at line 7 col 13\n\n            )\n            ^\nExpected one of: \n\t* LPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 4,
                "vars": 4,
                "this": 8,
                "filter": 4,
                "and": 4,
                "size_equals": 4,
                "size_of": 4,
                "11": 4,
                "apply": 4,
                "move_node": 4,
                "down": 4,
                "update_color": 4,
                "R": 1,
                "F": 1,
                "G": 1,
                "B": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Extend objects of size 1 while leaving a trail until they hit another object, coloring the trail as they extend.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (size_equals (size_of other) max)\n            )\n        )\n        (apply\n            (extend_node (direction_of other) false)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "other": 3,
                "filter": 1,
                "and": 1,
                "size_equals": 2,
                "size_of": 2,
                "1": 1,
                "max": 1,
                "apply": 1,
                "extend_node": 1,
                "direction_of": 1,
                "false": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor each row of objects between two columns of color C to a specific color based on their original position in the input grid.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) O)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) Y)\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) G)\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) F)\n        )\n        (apply\n            (update_color F)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 5,
                "vars": 5,
                "this": 10,
                "filter": 5,
                "color_equals": 5,
                "color_of": 5,
                "O": 1,
                "apply": 5,
                "update_color": 5,
                "R": 1,
                "Y": 2,
                "G": 2,
                "B": 2,
                "F": 2
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor objects to different colors based on specific rows in the grid",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (and (column_equals (column_of this) center) (row_equals (row_of this) 0)))\n        (apply (update_color R))\n    )\n    (rule\n        (vars (this))\n        (filter (and (column_equals (column_of this) center) (row_equals (row_of this) 1)))\n        (apply (update_color R))\n    )\n    (rule\n        (vars (this))\n        (filter (and (column_equals (column_of this) center) (row_equals (row_of this) min)))\n        (apply (update_color Y))\n    )\n    (rule\n        (vars (this))\n        (filter (and (column_equals (column_of this) center) (row_equals (row_of this) max)))\n        (apply (update_color B))\n    )\n    (rule\n        (vars (this))\n        (filter (and (column_equals (column_of this) center) (or (row_equals (row_of this) 2) (row_equals (row_of this) 3) (row_equals (row_of this) 4))))\n        (apply (update_color F))\n    )\n    (rule\n        (vars (this))\n        (filter (and (column_equals (column_of this) center) (or (row_equals (row_of this) 5) (row_equals (row_of this) 6))))\n        (apply (update_color G))\n    )\n)\n}",
            "can_parse": false,
            "parse_error_message": "No terminal matches 'r' in the current parser context, at line 4 col 63\n\ncolumn_equals (column_of this) center) (row_equals (row_of this) 0)))\n                                        ^\nExpected one of: \n\t* SHAPE_EQ\n\t* OP_NOT\n\t* OP_AND\n\t* WIDTH_EQ\n\t* DEGREE_EQ\n\t* SIZE_EQ\n\t* COLUMN_EQ\n\t* COLOR_EQ\n\t* NEIGHBOR_OF\n\t* HEIGHT_EQ\n\t* OP_OR\n",
            "token_counts": {
                "do": 1,
                "rule": 6,
                "vars": 6,
                "this": 21,
                "filter": 6,
                "and": 6,
                "column_equals": 6,
                "column_of": 6,
                "center": 6,
                "row_equals": 9,
                "row_of": 9,
                "0": 1,
                "apply": 6,
                "update_color": 6,
                "R": 2,
                "1": 1,
                "min": 1,
                "Y": 1,
                "max": 1,
                "B": 1,
                "or": 2,
                "2": 1,
                "3": 1,
                "4": 1,
                "F": 1,
                "5": 1,
                "6": 1,
                "G": 1,
                "}": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all objects vertically adjacent to the central column, each row with a unique color.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 6)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 10)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 8)\n        )\n        (apply\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 12)\n        )\n        (apply\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 14)\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 16)\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 18)\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 20)\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 8,
                "vars": 8,
                "this": 16,
                "filter": 8,
                "column_equals": 8,
                "column_of": 8,
                "6": 1,
                "apply": 8,
                "update_color": 8,
                "R": 2,
                "10": 1,
                "8": 1,
                "F": 2,
                "12": 1,
                "14": 1,
                "B": 2,
                "16": 1,
                "18": 1,
                "Y": 2,
                "20": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects horizontally to the nearest cyan column and then recolor them based on their row position.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (column_equals (column_of this) (column_of other))\n        )\n        (apply\n            (move_node_max right)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (not (column_equals (column_of this) center))\n                (row_equals (row_of this) 2)\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (not (column_equals (column_of this) center))\n                (row_equals (row_of this) 3)\n            )\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (not (column_equals (column_of this) center))\n                (row_equals (row_of this) 5)\n            )\n        )\n        (apply\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (not (column_equals (column_of this) center))\n                (row_equals (row_of this) 6)\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (not (column_equals (column_of this) center))\n                (row_equals (row_of this) 10)\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (not (column_equals (column_of this) center))\n                (row_equals (row_of this) 11)\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches 'r' in the current parser context, at line 16 col 18\n\n                (row_equals (row_of this) 2)\n                 ^\nExpected one of: \n\t* SHAPE_EQ\n\t* OP_NOT\n\t* OP_AND\n\t* WIDTH_EQ\n\t* DEGREE_EQ\n\t* SIZE_EQ\n\t* COLUMN_EQ\n\t* COLOR_EQ\n\t* NEIGHBOR_OF\n\t* HEIGHT_EQ\n\t* OP_OR\n",
            "token_counts": {
                "do": 1,
                "rule": 7,
                "vars": 7,
                "this": 20,
                "other": 2,
                "filter": 7,
                "column_equals": 7,
                "column_of": 8,
                "apply": 7,
                "move_node_max": 1,
                "right": 1,
                "and": 6,
                "not": 6,
                "center": 6,
                "row_equals": 6,
                "row_of": 6,
                "2": 1,
                "update_color": 6,
                "R": 1,
                "3": 1,
                "Y": 1,
                "5": 1,
                "F": 1,
                "6": 1,
                "B": 1,
                "10": 1,
                "G": 2,
                "11": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor specific sections of the grid with alternating rows of colors.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (column_equals (column_of this) 4)\n                (not (width_equals (width_of this) 19))\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (column_equals (column_of this) 4)\n                (width_equals (width_of this) 19)\n            )\n        )\n        (apply\n            (update_color Y)\n            (update_color F)\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (column_equals (column_of this) 9)\n                (not (width_equals (width_of this) 19))\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n)\n",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 3,
                "vars": 3,
                "this": 9,
                "filter": 3,
                "and": 3,
                "column_equals": 3,
                "column_of": 3,
                "4": 2,
                "not": 2,
                "width_equals": 3,
                "width_of": 3,
                "19": 3,
                "apply": 3,
                "update_color": 5,
                "R": 1,
                "Y": 1,
                "F": 1,
                "G": 1,
                "9": 1,
                "B": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all objects towards the center to R, F, B, G, Y based on row position.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter (color_equals (color_of this) O))\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter (and (color_equals (color_of this) O) (height_equals (height_of other) min)))\n        (apply\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter (and (color_equals (color_of this) O) (size_equals (size_of other) max)))\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter (and (color_equals (color_of this) O) (not (size_equals (size_of other) min))))\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter (and (color_equals (color_of this) O) (not (height_equals (height_of other) max))))\n        (apply\n            (update_color Y)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 5,
                "vars": 5,
                "this": 10,
                "other": 9,
                "filter": 5,
                "color_equals": 5,
                "color_of": 5,
                "O": 5,
                "apply": 5,
                "update_color": 5,
                "R": 1,
                "and": 4,
                "height_equals": 2,
                "height_of": 2,
                "min": 2,
                "F": 1,
                "size_equals": 2,
                "size_of": 2,
                "max": 2,
                "B": 1,
                "not": 2,
                "G": 1,
                "Y": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor specific rows to different colors in a patterned fashion.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 4)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 5)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 6)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 7)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 8)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (and\n                    (row_equals (row_of this) 3)\n                    (column_equals (column_of other) 4)\n                )\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (and\n                    (row_equals (row_of this) 3)\n                    (column_equals (column_of other) 5)\n                )\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (and\n                    (row_equals (row_of this) 3)\n                    (column_equals (column_of other) 6)\n                )\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (and\n                    (row_equals (row_of this) 3)\n                    (column_equals (column_of other) 7)\n                )\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (and\n                    (row_equals (row_of this) 3)\n                    (column_equals (column_of other) 8)\n                )\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (and\n                    (row_equals (row_of this) 8)\n                    (column_equals (column_of other) 9)\n                )\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (and\n                    (row_equals (row_of this) 8)\n                    (column_equals (column_of other) 10)\n                )\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (and\n                    (row_equals (row_of this) 8)\n                    (column_equals (column_of other) 11)\n                )\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (and\n                    (row_equals (row_of this) 8)\n                    (column_equals (column_of other) 12)\n                )\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (and\n                    (row_equals (row_of this) 9)\n                    (column_equals (column_of other) 9)\n                )\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (and\n                    (row_equals (row_of this) 9)\n                    (column_equals (column_of other) 10)\n                )\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (and\n                    (row_equals (row_of this) 9)\n                    (column_equals (column_of other) 11)\n                )\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (and\n                    (row_equals (row_of this) 9)\n                    (column_equals (column_of other) 12)\n                )\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n)\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches 'r' in the current parser context, at line 52 col 22\n\n                    (row_equals (row_of this) 3)\n                     ^\nExpected one of: \n\t* SHAPE_EQ\n\t* OP_NOT\n\t* OP_AND\n\t* WIDTH_EQ\n\t* DEGREE_EQ\n\t* SIZE_EQ\n\t* COLUMN_EQ\n\t* COLOR_EQ\n\t* NEIGHBOR_OF\n\t* HEIGHT_EQ\n\t* OP_OR\n",
            "token_counts": {
                "do": 1,
                "rule": 18,
                "vars": 18,
                "this": 49,
                "filter": 18,
                "column_equals": 18,
                "column_of": 18,
                "4": 2,
                "apply": 18,
                "update_color": 18,
                "R": 5,
                "5": 2,
                "6": 2,
                "7": 2,
                "8": 6,
                "other": 39,
                "and": 26,
                "row_equals": 13,
                "row_of": 13,
                "3": 5,
                "neighbor_of": 13,
                "Y": 5,
                "9": 6,
                "B": 8,
                "10": 2,
                "11": 2,
                "12": 2
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor sections around the borders of the central stripe with new colors.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (and (not (color_equals (color_of this) C)) (or (column_equals (column_of this) 2) (column_equals (column_of this) 10) (column_equals (column_of this) 12))))\n        (apply (update_color R))\n    )\n    (rule\n        (vars (this))\n        (filter (and (not (color_equals (color_of this) C)) (or (column_equals (column_of this) 6) (column_equals (column_of this) 7) (column_equals (column_of this) 8) (column_equals (column_of this) 9))))\n        (apply (update_color F))\n    )\n    (rule\n        (vars (this))\n        (filter (and (not (color_equals (color_of this) C)) (column_equals (column_of this) 13)))\n        (apply (update_color G))\n    )\n    (rule\n        (vars (this))\n        (filter (and (not (color_equals (color_of this) C)) (or (row_equals (row_of this) 6) (row_equals (row_of this) 10) (row_equals (row_of this) 14) (row_equals (row_of this) 18))))\n        (apply (update_color B))\n    )\n    (rule\n        (vars (this))\n        (filter (and (not (color_equals (color_of this) C)) (or (row_equals (row_of this) 3) (row_equals (row_of this) 7))))\n        (apply (update_color Y))\n    )\n)\n",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 4 col 136\n\n 2) (column_equals (column_of this) 10) (column_equals (column_of this) 12))))\n                                        ^\nExpected one of: \n\t* RPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 5,
                "vars": 5,
                "this": 24,
                "filter": 5,
                "and": 5,
                "not": 5,
                "color_equals": 5,
                "color_of": 5,
                "C": 5,
                "or": 4,
                "column_equals": 8,
                "column_of": 8,
                "2": 1,
                "10": 2,
                "12": 1,
                "apply": 5,
                "update_color": 5,
                "R": 1,
                "6": 2,
                "7": 2,
                "8": 1,
                "9": 1,
                "F": 1,
                "13": 1,
                "G": 1,
                "row_equals": 6,
                "row_of": 6,
                "14": 1,
                "18": 1,
                "B": 1,
                "3": 1,
                "Y": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all non-border objects to the top immediately upon contact with another object, then color them accordingly.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (not (color_equals (color_of this) C))\n            )\n        )\n        (apply\n            (move_node up)\n            (update_color (color_of other))\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 3,
                "other": 3,
                "filter": 1,
                "and": 1,
                "neighbor_of": 1,
                "not": 1,
                "color_equals": 1,
                "color_of": 2,
                "C": 1,
                "apply": 1,
                "move_node": 1,
                "up": 1,
                "update_color": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor objects on the 4th and 9th rows from left to right with different colors.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (column_equals (column_of this) 4)\n                (or\n                    (color_equals (color_of this) O)\n                    (color_equals (color_of this) G)\n                )\n            )\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (column_equals (column_of this) 9)\n                (or\n                    (color_equals (color_of this) O)\n                    (color_equals (color_of this) G)\n                )\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) O)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) G)\n        )\n        (apply\n            (update_color F)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 4,
                "vars": 4,
                "this": 12,
                "filter": 4,
                "and": 2,
                "column_equals": 2,
                "column_of": 2,
                "4": 1,
                "or": 2,
                "color_equals": 6,
                "color_of": 6,
                "O": 3,
                "G": 3,
                "apply": 4,
                "update_color": 4,
                "Y": 1,
                "9": 1,
                "B": 1,
                "R": 1,
                "F": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor regions of length 6 on each side of color C border to different colors.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (size_equals (size_of this) 6)\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) F)\n                (size_equals (size_of this) 6)\n            )\n        )\n        (apply\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) Y)\n                (size_equals (size_of this) 6)\n            )\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) G)\n                (size_equals (size_of this) 6)\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) B)\n                (size_equals (size_of this) 6)\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 5,
                "vars": 5,
                "this": 15,
                "filter": 5,
                "and": 5,
                "color_equals": 5,
                "color_of": 5,
                "R": 2,
                "size_equals": 5,
                "size_of": 5,
                "6": 5,
                "apply": 5,
                "update_color": 5,
                "F": 2,
                "Y": 2,
                "G": 2,
                "B": 2
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all rows containing color C to the left or right according to their original position. Then recolor the rows based on their original position.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) C)\n                (column_equals (column_of this) even)\n            )\n        )\n        (apply\n            (move_node left)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) C)\n                (column_equals (column_of this) odd)\n            )\n        )\n        (apply\n            (move_node right)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) C)\n                (not (column_equals (column_of this) center))\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) C)\n                (and\n                    (not (column_equals (column_of this) center))\n                    (not (column_equals (column_of this) odd))\n                )\n            )\n        )\n        (apply\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) C)\n                (not (column_equals (column_of this) even))\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) C)\n                (not (column_equals (column_of this) center))\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) center)\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 7,
                "vars": 7,
                "this": 21,
                "filter": 7,
                "and": 7,
                "color_equals": 6,
                "color_of": 6,
                "C": 6,
                "column_equals": 8,
                "column_of": 8,
                "even": 2,
                "apply": 7,
                "move_node": 2,
                "left": 1,
                "odd": 2,
                "right": 1,
                "not": 5,
                "center": 4,
                "update_color": 5,
                "R": 1,
                "F": 1,
                "B": 1,
                "G": 1,
                "Y": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all objects by their respective rows",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter (neighbor_of this other))\n        (apply (update_color (color_of other)))\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "other": 3,
                "filter": 1,
                "neighbor_of": 1,
                "apply": 1,
                "update_color": 1,
                "color_of": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all objects adjacent to the object of color C with specified colors for each section",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (neighbor_of this other)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) O)\n                (column_equals (column_of this) 2)\n            )\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) O)\n                (column_equals (column_of this) 12)\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) O)\n                (column_equals (column_of this) 8)\n            )\n        )\n        (apply\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) O)\n                (column_equals (column_of this) 10)\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 5,
                "vars": 5,
                "this": 14,
                "other": 2,
                "filter": 5,
                "neighbor_of": 1,
                "apply": 5,
                "update_color": 5,
                "R": 1,
                "and": 4,
                "color_equals": 4,
                "color_of": 4,
                "O": 4,
                "column_equals": 4,
                "column_of": 4,
                "2": 1,
                "Y": 1,
                "12": 1,
                "G": 1,
                "8": 1,
                "F": 1,
                "10": 1,
                "B": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all objects adjacent to vertical lines of color C to different colors based on their position.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) C)\n            )\n        )\n        (apply\n            (update_color (color_of (image_pts_of this)))\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 11 col 37\n\n            (update_color (color_of (image_pts_of this)))\n                                    ^\nExpected one of: \n\t* VAR\n",
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 3,
                "other": 3,
                "filter": 1,
                "and": 1,
                "neighbor_of": 1,
                "color_equals": 1,
                "color_of": 2,
                "C": 1,
                "apply": 1,
                "update_color": 1,
                "image_pts_of": 1
            }
        }
    ],
    "task_id": "272f95fa"
}