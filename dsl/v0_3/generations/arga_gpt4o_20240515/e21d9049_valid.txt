[
    "{\n    \"nl_description\": \"Rotate the diagonal of objects from top-left to bottom-right by 90 degrees clockwise, forming multiple stripes in the process.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (rotate_node 90)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all the colored objects to form a pattern of repeated sequences horizontally on the middle row.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (not (color_equals (color_of this) O))\\n        )\\n        (apply\\n            (move_node_max right)\\n            (move_node down)\\n            (move_node down)\\n            (move_node down)\\n            (move_node down)\\n            (move_node down)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all vertically aligned sequence groups left or right to fit within the grid boundaries, repeating the sequence in each row until the grid is filled.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (move_node_max left)\\n            (move_node_max right)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Columns of objects C, G, and R are repeated every three rows.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) C)\\n                (or\\n                    (color_equals (color_of other) G)\\n                    (color_equals (color_of other) R)\\n                )\\n            )\\n        )\\n        (apply\\n            (move_node_max down)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Repeatedly move all objects of size 1 to form a repeated pattern in the middle row.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (size_equals (size_of this) 1)\\n        )\\n        (apply\\n            (move_node down)\\n        )\\n    ) (rule\\n        (vars (this))\\n        (filter\\n            (size_equals (size_of this) 1)\\n        )\\n        (apply\\n            (move_node down)\\n        )\\n    ) (rule\\n        (vars (this))\\n        (filter\\n            (size_equals (size_of this) 1)\\n        )\\n        (apply\\n            (move_node down)\\n        )\\n    ) (rule\\n        (vars (this))\\n        (filter\\n            (size_equals (size_of this) 1)\\n        )\\n        (apply\\n            (move_node down)\\n        )\\n    ) (rule\\n        (vars (this))\\n        (filter\\n            (size_equals (size_of this) 1)\\n        )\\n        (apply\\n            (move_node down)\\n        )\\n    ) )\"\n}",
    "{\n    \"nl_description\": \"Rotate every object of color G, C, or R by 90 degrees.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (or\\n                (color_equals (color_of this) G)\\n                (or\\n                    (color_equals (color_of this) C)\\n                    (color_equals (color_of this) R)\\n                )\\n            )\\n        )\\n        (apply\\n            (rotate_node 90)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move the cyan, green, and red objects to form a row at the center. Repeat this process for every third row.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (or (color_equals (color_of this) C) (or (color_equals (color_of this) G) (color_equals (color_of this) R)))\\n        )\\n        (apply\\n            (move_node (direction_of other))\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Rotate the grid 90 degrees clockwise.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (rotate_node 90)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Rotate the diagonal objects at the center of each grid cell and form a repeating pattern along the rows.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter (color_equals (color_of this) C))\\n        (apply (move_node right))\\n    )\\n    (rule\\n        (vars (this))\\n        (filter (color_equals (color_of this) G))\\n        (apply (move_node right))\\n    )\\n    (rule\\n        (vars (this))\\n        (filter (color_equals (color_of this) R))\\n        (apply (move_node right))\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Reorder objects G, R, and C in a specific repetitive pattern along the middle row in a sequential manner.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (or\\n                (color_equals (color_of this) G)\\n                (or\\n                    (color_equals (color_of this) R)\\n                    (color_equals (color_of this) C)\\n                )\\n            )\\n        )\\n        (apply\\n            (move_node (direction_of this))\\n            (update_color G)\\n            (move_node (direction_of this))\\n            (update_color R)\\n            (move_node (direction_of this))\\n            (update_color C)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move objects of colors G and R one step up.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (or\\n                (color_equals (color_of this) G)\\n                (color_equals (color_of this) R)\\n            )\\n        )\\n        (apply\\n            (move_node up)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"For specific columns, repeat the objects of colors G, R, C in a row within that column.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (or\\n                (column_equals (column_of this) 2)\\n                (or\\n                    (column_equals (column_of this) 8)\\n                    (column_equals (column_of this) 10)\\n                )\\n            )\\n        )\\n        (apply\\n            (move_node down)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Rearrange all objects by moving them cyclically in a vertical direction.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (move_node down)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move color sequences to different positions along the columns to create alternating patterns.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) G)\\n        )\\n        (apply\\n            (move_node up)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) R)\\n        )\\n        (apply\\n            (move_node up)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) C)\\n        )\\n        (apply\\n            (move_node up)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) Y)\\n        )\\n        (apply\\n            (move_node up)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects to a specific row, preserving their order.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (move_node down)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of colors G, C, and R one step up, as long as they do not align into a row of colors G, C, R.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (or\\n                (color_equals (color_of this) G)\\n                (or\\n                    (color_equals (color_of this) C)\\n                    (color_equals (color_of this) R)\\n                )\\n            )\\n        )\\n        (apply\\n            (move_node up)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all the objects in the vertical middle column to the middle row, preserving their colors.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (column_equals (column_of this) center)\\n        )\\n        (apply\\n            (move_node down)\\n            (move_node down)\\n            (move_node down)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of colors C, G, and R to the first row and fourth row of the grid, respectively.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (or\\n                (color_equals (color_of this) C)\\n                (or\\n                    (color_equals (color_of this) G)\\n                    (color_equals (color_of this) R)\\n                )\\n            )\\n        )\\n        (apply\\n            (move_node up)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move objects of color G, R, C cyclically in sequence.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter (or (color_equals (color_of this) G) (or (color_equals (color_of this) R) (color_equals (color_of this) C))))\\n        (apply\\n            (move_node down)\\n            (move_node right)\\n            (move_node right)\\n            (move_node down)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Objects of size 1 appear in a row at the bottom, and are then repeated every four steps upwards. When object reach the top, they appear from the beginning.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (not (color_equals (color_of this) O))\\n        )\\n        (apply\\n            (move_node down)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (neighbor_of this other)\\n        )\\n        (apply\\n            (move_node left)\\n            (move_node_max down)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move and organize the objects of colors C, G, and R into the middle horizontal row.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (or\\n                (color_equals (color_of this) C)\\n                (or\\n                    (color_equals (color_of this) G)\\n                    (color_equals (color_of this) R)\\n                )\\n            )\\n        )\\n        (apply\\n            (move_node_max down)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Rotate all the objects in the grid by 90 degrees clockwise\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (rotate_node 90)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Transpose each row such that it cycles through different colors.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (rotate_node 90)\\n            (rotate_node 90)\\n            (rotate_node 90)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move the objects (cycle) G-R-C repeatedly in the fifth row and seventh column, as well as seventh row and seventh column.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (or\\n                (and\\n                    (column_equals (column_of this) 4)\\n                    (and\\n                        (neighbor_of this other)\\n                        (column_equals (column_of other) 4)\\n                    )\\n                )\\n                (and\\n                    (column_equals (column_of this) 6)\\n                    (and\\n                        (neighbor_of this other)\\n                        (column_equals (column_of other) 6)\\n                    )\\n                )\\n            )\\n        )\\n        (apply\\n            (move_node down)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move objects of size 1 towards the object of size 3, and repeat from the bottom row.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (and\\n                    (size_equals (size_of this) 1)\\n                    (neighbor_of this other)\\n                )\\n                (size_equals (size_of other) 3)\\n            )\\n        )\\n        (apply\\n            (move_node (direction_of other))\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of size 1 to the first row.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (size_equals (size_of this) 1)\\n        )\\n        (apply\\n            (move_node up)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects diagonally towards the bottom right corner and place each type of object in a repeating sequence.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter (size_equals (size_of this) 1))\\n        (apply\\n            (extend_node down_right true)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Reconstruct rows of objects by repeating the unique pattern of C, G, and R horizontally.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (color_equals (color_of this) C)\\n                (neighbor_of this other)\\n            )\\n        )\\n        (apply\\n            (move_node right)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Rearrange the objects in a repeating pattern of colors C, G, and R, in descending order.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter)\\n        (apply\\n            (update_color G)\\n            (update_color R)\\n            (update_color C)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move the row that has objects towards the first empty row available, starting from the top.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) C)\\n                (and\\n                    (color_equals (color_of other) O)\\n                    (neighbor_of this other)\\n                )\\n            )\\n        )\\n        (apply\\n            (move_node_max up)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move each row of colored objects to the middle row, then repeat the row.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter (not (color_equals (color_of this) O)))\\n        (apply\\n            (move_node down)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move objects of color C, G, and R one step down if R is at the current level, then move them one step up if G is at the current level.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (color_equals (color_of this) R)\\n        )\\n        (apply\\n            (move_node down)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (color_equals (color_of this) G)\\n        )\\n        (apply\\n            (move_node up)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move specific color objects downwards to form a pattern of C, G, R repeatedly in a column.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (or\\n                (color_equals (color_of this) C)\\n                (or\\n                    (color_equals (color_of this) G)\\n                    (color_equals (color_of this) R)\\n)\\n)\\n)\\n        (apply\\n            (move_node down)\\n)\\n)\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of color C, G, and R one step up.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (or\\n                (color_equals (color_of this) C)\\n                (or\\n                    (color_equals (color_of this) G)\\n                    (color_equals (color_of this) R)\\n                )\\n            )\\n        )\\n        (apply\\n            (move_node up)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move the Color G, R and C every other 2 rows.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (or\\n                (color_equals (color_of this) G)\\n                (or\\n                    (color_equals (color_of this) R)\\n                    (color_equals (color_of this) C)\\n                )\\n            )\\n        )\\n        (apply\\n            (move_node_max down)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Rotate all the objects by 90 degrees clockwise.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (rotate_node 90)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all the objects of color different than C, G, and R to the column occupied by one of C, G, or R respectively if they share the same row, and recolor them as C, G, or R in sequence.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (not (or\\n                    (color_equals (color_of this) C)\\n                    (or\\n                        (color_equals (color_of this) G)\\n                        (color_equals (color_of this) R)\\n                    )\\n                ))\\n                (and\\n                    (neighbor_of this other)\\n                    (or\\n                        (color_equals (color_of other) C)\\n                        (or\\n                            (color_equals (color_of other) G)\\n                            (color_equals (color_of other) R)\\n                        )\\n                    )\\n                )\\n            )\\n        )\\n        (apply\\n            (move_node (direction_of other))\\n            (update_color (color_of other))\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Cycle vertically within the same column all objects with colors: C, G, R.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter \\n            (or\\n                (or\\n                    (color_equals (color_of this) C)\\n                    (color_equals (color_of this) G)\\n                )\\n                (color_equals (color_of this) R)\\n            )\\n        )\\n        (apply\\n            (move_node down)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move the objects C, G, and R around the column space provided by an object C and G in a row, and then replicate this pattern row by row.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter (or (color_equals (color_of this) C) (or (color_equals (color_of this) G) (color_equals (color_of this) R))))\\n        (apply\\n            (move_node_max right)\\n            (extend_node right true)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move objects in the middle row up, one by one, and copy the middle row to each row below it.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (column_equals (column_of this) center)\\n                (not (color_equals (color_of this) O))\\n            )\\n        )\\n        (apply\\n            (move_node up)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Stack the bottom row of the objects vertically at a regular interval of three columns.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (column_equals (column_of this) 4)\\n                (not (color_equals (color_of this) O))\\n            )\\n        )\\n        (apply\\n            (move_node_max up)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (column_equals (column_of this) 7)\\n                (not (color_equals (color_of this) O))\\n            )\\n        )\\n        (apply\\n            (move_node_max up)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (column_equals (column_of this) 10)\\n                (not (color_equals (color_of this) O))\\n            )\\n        )\\n        (apply\\n            (move_node_max up)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Rotate all objects of color C, G, and R by 90 degrees.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (or\\n                (or\\n                    (color_equals (color_of this) C)\\n                    (color_equals (color_of this) G)\\n                )\\n                (color_equals (color_of this) R)\\n            )\\n        )\\n        (apply\\n            (rotate_node 90)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Swap the colors of adjacent objects in the 2 middle rows with their corresponding counterparts along the diagonal, and create patterns along the middle column.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (neighbor_of this other)\\n        )\\n        (apply\\n            (move_node (direction_of other))\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color (color_of this))\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move the color pattern G-R-C to fill the entire grid in a vertical manner, repeating the pattern down the grid.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (or\\n                (color_equals (color_of this) G)\\n                (or\\n                    (color_equals (color_of this) R)\\n                    (color_equals (color_of this) C)\\n                )\\n            )\\n        )\\n        (apply\\n            (move_node down)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move the objects of shape square line by line with repetition across the grid vertically.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (shape_equals (shape_of this) square)\\n        )\\n        (apply\\n            (move_node down)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of color C, G or R towards the center row, and repeat them in the row\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (or\\n                (color_equals (color_of this) C)\\n                (or\\n                    (color_equals (color_of this) G)\\n                    (color_equals (color_of this) R)\\n                )\\n            )\\n        )\\n        (apply\\n            (move_node down)\\n            (move_node down)\\n            (move_node down)\\n            (move_node down)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move objects of color G and R to the left by one step, then move objects of color C to the right by one step.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (or\\n                (color_equals (color_of this) G)\\n                (color_equals (color_of this) R)\\n            )\\n        )\\n        (apply\\n            (move_node left)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) C)\\n        )\\n        (apply\\n            (move_node right)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Rotate objects with color G 90 degrees, objects with color R 180 degrees, and objects with color C 270 degrees.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) G)\\n        )\\n        (apply\\n            (rotate_node 90)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) R)\\n        )\\n        (apply\\n            (rotate_node 180)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) C)\\n        )\\n        (apply\\n            (rotate_node 270)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of colors C, G, and R towards each other, if they are neighbors, then repeat this action till all move towards each other.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) C)\\n        )\\n        (apply\\n            (move_node down)\\n            (move_node right)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) G)\\n        )\\n        (apply\\n            (move_node left)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) R)\\n        )\\n        (apply\\n            (move_node up)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Rotate all objects by 90 degrees.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (rotate_node 90)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Spread all objects to fill the entire grid by duplicating their rows horizontally.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color (color_of this))\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects to color G, R, and C in a repeating sequence.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color G)\\n            (update_color R)\\n            (update_color C)\\n        )\\n    )\\n)\"\n}"
]