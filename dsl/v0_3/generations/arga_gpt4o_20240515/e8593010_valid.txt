[
    "{\n    \"nl_description\": \"Move all objects of color O and extend them to cover neighboring background cells X.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) O)\\n                (neighbor_of this other)\\n            )\\n        )\\n        (apply\\n            (extend_node (direction_of other) false)\\n            (update_color B)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects that are neighbors of 'X' objects and change their color based on their coordinates.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of other) X)\\n                (neighbor_of this other)\\n            )\\n        )\\n        (apply\\n            (move_node_max (direction_of other))\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color (color_of this))\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects to distinct color based on their positions.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter (neighbor_of this other))\\n        (apply\\n            (update_color B)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (neighbor_of this other)\\n        )\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of color O towards the object of color X, if they are neighbors to it, and recolor all objects of color O to color B, G, or R based on their total count of neighbors.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) O)\\n                (neighbor_of this other)\\n            )\\n        )\\n        (apply\\n            (move_node_max (direction_of other))\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) O)\\n                (neighbor_of this other)\\n            )\\n        )\\n        (apply\\n            (update_color B)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) O)\\n                (neighbor_of this other)\\n            )\\n        )\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) O)\\n                (neighbor_of this other)\\n            )\\n        )\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n)\"\n}\n",
    "{\n    \"nl_description\": \"Recolor all objects in column 1 to color B, in column 2 to color R, in column 9 to color G, and in column 10 to color R.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (column_equals (column_of this) 1)\\n        )\\n        (apply\\n            (update_color B)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (column_equals (column_of this) 2)\\n        )\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (column_equals (column_of this) 9)\\n        )\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (column_equals (column_of this) 10)\\n        )\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor each unique object in the grid to a specific color\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) B)\\n        )\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) R)\\n        )\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) G)\\n        )\\n        (apply\\n            (update_color B)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Extend all objects of color O to their nearest neighboring object while changing their color to the same as that neighbor, and extend objects of color X which are in the fourth row or column to objects of color B.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) O)\\n                (neighbor_of this other)\\n            )\\n        )\\n        (apply\\n            (extend_node (direction_of other) true)\\n            (update_color (color_of other))\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (color_equals (color_of this) X)\\n                (or\\n                    (column_equals (column_of this) 4)\\n                    (column_equals (column_of this) 9)\\n                )\\n            )\\n        )\\n        (apply\\n            (extend_node right true)\\n            (update_color B)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor objects to specific colors based on their current positions and colors without any specific size or neighborhood relationship.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (color_equals (color_of this) O)\\n        )\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (color_equals (color_of this) B)\\n        )\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and (color_equals (color_of this) X) (color_equals (color_of other) O))\\n        )\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and (color_equals (color_of this) O) (color_equals (color_of other) X))\\n        )\\n        (apply\\n            (update_color B)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all green objects towards objects of color X if they are neighbors, and then recolor all objects to their respective new colors\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (not (color_equals (color_of this) X))\\n                (and\\n                    (neighbor_of this other)\\n                    (color_equals (color_of other) X)\\n                )\\n            )\\n        )\\n        (apply\\n            (move_node_max (direction_of other))\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color (color_of this))\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of color different than X and neighbors of object O closer to the nearest O, then recolor all objects of color O to G and Y to R. Afterwards, recolor all objects to their respective new colors.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (not (color_equals (color_of this) X))\\n                (and\\n                    (neighbor_of this other)\\n                    (color_equals (color_of other) O)\\n                )\\n            )\\n        )\\n        (apply\\n            (move_node_max (direction_of other))\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) O)\\n        )\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) B)\\n        )\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move objects of size 1 to the edge and change their color based on their initial color.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (size_equals (size_of this) 1)\\n        )\\n        (apply\\n            (move_node_max (direction_of this))\\n            (update_color G)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (size_equals (size_of this) 1)\\n        )\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (size_equals (size_of this) 1)\\n        )\\n        (apply\\n            (update_color B)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects that are neighbors to an object of color 'X' towards them, and recolor them with a specific color based on a pattern.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (neighbor_of this other)\\n        )\\n        (apply\\n            (move_node (direction_of other))\\n            (update_color (color_of other))\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all non-X objects to specific colors: O to R, B to G, G to B, and R to G.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter (color_equals (color_of this) O))\\n        (apply (update_color R))\\n    )\\n    (rule\\n        (vars (this))\\n        (filter (color_equals (color_of this) G))\\n        (apply (update_color B))\\n    )\\n    (rule\\n        (vars (this))\\n        (filter (color_equals (color_of this) B))\\n        (apply (update_color G))\\n    )\\n    (rule\\n        (vars (this))\\n        (filter (color_equals (color_of this) R))\\n        (apply (update_color G))\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Color all objects touching the border with different colors based on their position, and all objects not touching the border with a single color.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (neighbor_of this other)\\n                (color_equals (color_of other) X)\\n            )\\n        )\\n        (apply\\n            (move_node_max (direction_of other))\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Change the color of all non-X objects to a new color such that objects of the same color in the input grid keep the same color in the output grid.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (not (color_equals (color_of this) X))\\n        )\\n        (apply\\n            (update_color (color_of this))\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor specific objects to a new color\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (neighbor_of this other)\\n                (or\\n                    (color_equals (color_of this) O)\\n                    (color_equals (color_of this) R)\\n                )\\n            )\\n        )\\n        (apply\\n            (update_color (color_of other))\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor the objects based on their initial color: O to R, R to G, B to G, and G to B\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter (color_equals (color_of this) O))\\n        (apply (update_color R))\\n    )\\n    (rule\\n        (vars (this))\\n        (filter (color_equals (color_of this) R))\\n        (apply (update_color G))\\n    )\\n    (rule\\n        (vars (this))\\n        (filter (color_equals (color_of this) B))\\n        (apply (update_color G))\\n    )\\n    (rule\\n        (vars (this))\\n        (filter (color_equals (color_of this) G))\\n        (apply (update_color B))\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all O objects with random colors.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (color_equals (color_of this) O)\\n        )\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (color_equals (color_of this) O)\\n        )\\n        (apply\\n            (update_color B)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (color_equals (color_of this) O)\\n        )\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Change colors as follows: O to R, B to G, G to B.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) O)\\n        )\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) B)\\n        )\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) G)\\n        )\\n        (apply\\n            (update_color B)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of color O up until they hit another object, then recolor them based on the objects they hit.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) O)\\n        )\\n        (apply\\n            (move_node_max up)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (neighbor_of this other)\\n        )\\n        (apply\\n            (update_color (color_of other))\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Change color of the objects on the diagonal starting from the first G object encountered. The first diagonal line and its mirror are colored with R and G respectively. Remaining elements in the path are modified to correspond to G if already R or vice versa.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (neighbor_of this other)\\n        )\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (column_equals (column_of this) (column_of other))\\n        )\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects of color O to G, objects of color B to R, objects of color R to G, and objects of color G to R.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) O)\\n        )\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) B)\\n        )\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) R)\\n        )\\n        (apply\\n            (update_color B)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) G)\\n        )\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor each neighboring pair of objects that are not 'X' with alternating colors B, G, or R.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (not (color_equals (color_of this) X))\\n                (neighbor_of this other)\\n            )\\n        )\\n        (apply\\n            (update_color B)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (not (color_equals (color_of this) R))\\n                (color_equals (color_of this) B)\\n            )\\n        )\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (not (color_equals (color_of this) G))\\n                (color_equals (color_of this) G)\\n            )\\n        )\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of color different than X, to the diagonally opposite corner of the object of color X, if they are neighbors of it.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (not (color_equals (color_of this) X))\\n                (neighbor_of this other)\\n            )\\n        )\\n        (apply\\n            (move_node_max (direction_of other))\\n            (update_color (color_of other))\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"For all objects of size 1, recolor them to G if they are in a row containing at least a G. Recolor them to R if they are in a row containing at least an R. Otherwise, recolor them to B.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color B)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (size_equals (size_of this) 1)\\n                (color_equals (color_of other) G)\\n            )\\n        )\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (size_equals (size_of this) 1)\\n                (color_equals (color_of other) R)\\n            )\\n        )\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor the objects on the left of the grid to B, the objects on the right of the grid to R, and the objects in the middle column to G.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter (column_equals (column_of this) even))\\n        (apply (update_color B))\\n    )\\n    (rule\\n        (vars (this))\\n        (filter (column_equals (column_of this) odd))\\n        (apply (update_color R))\\n    )\\n    (rule\\n        (vars (this))\\n        (filter (column_equals (column_of this) center))\\n        (apply (update_color G))\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor objects to G or R based on position and initial color. Recolor other objects proximate to objects of color O.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) O)\\n        )\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of other) O)\\n                (neighbor_of this other)\\n            )\\n        )\\n        (apply\\n            (update_color B)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) G)\\n        )\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) X)\\n        )\\n        (apply\\n            (update_color X)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Replace the color O with sequential specific colors: G, B, and R.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) O)\\n        )\\n        (apply\\n            (update_color B)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) B)\\n        )\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) R)\\n        )\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor objects in the first column to B, second column to R, third column to G, and fourth column to G. Finally, recolor the last column to R.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (column_equals (column_of this) 1)\\n        )\\n        (apply\\n            (update_color B)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (column_equals (column_of this) 2)\\n        )\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (column_equals (column_of this) 3)\\n        )\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (column_equals (column_of this) 4)\\n        )\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (column_equals (column_of this) 10)\\n        )\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor objects based on their position, maintaining X cells intact.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter \\n            (and\\n                (column_equals (column_of this) odd)\\n                (color_equals (color_of this) O)\\n            )\\n        )\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter \\n            (and\\n                (column_equals (column_of this) even)\\n                (color_equals (color_of this) O)\\n            )\\n        )\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter \\n            (and\\n                (column_equals (column_of this) odd)\\n                (color_equals (color_of this) O)\\n            )\\n        )\\n        (apply\\n            (update_color B)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move and recolor all objects. Move objects of color O to G, move objects of color G to R, objects of color B to R, and objects of color R to G.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) O)\\n        )\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) G)\\n        )\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) B)\\n        )\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) R)\\n        )\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects of color O adjacent to objects of color X in the following sequence: G, B, R.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) O)\\n                (color_equals (color_of other) X)\\n            )\\n        )\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) G)\\n        )\\n        (apply\\n            (update_color B)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) B)\\n        )\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects to different colors based on their positions.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (neighbor_of this other)\\n        )\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (neighbor_of this other)\\n        )\\n        (apply\\n            (update_color B)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Assign new colors following some pattern.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (color_equals (color_of this) O)\\n        )\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (color_equals (color_of this) O)\\n        )\\n        (apply\\n            (update_color B)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (color_equals (color_of this) O)\\n        )\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects of color B, G, and R in a predefined order, maintaining their respective order from top to bottom, left to right.\",\n    \"code\": \"(do\\n  (rule\\n    (vars (this))\\n    (filter (color_equals (color_of this) O))\\n    (apply (update_color B))\\n  )\\n  (rule\\n    (vars (this))\\n    (filter (color_equals (color_of this) X))\\n    (apply (update_color G))\\n  )\\n  (rule\\n    (vars (this))\\n    (filter (color_equals (color_of this) G))\\n    (apply (update_color R))\\n  )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor objects of color O to different colors determined by the relative position and neighbors, and recolor the X object neighbors differently in pairs.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and (color_equals (color_of this) O) (color_equals (color_of other) X))\\n        )\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and (color_equals (color_of this) O) (not (color_equals (color_of other) X)))\\n        )\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and (color_equals (color_of this) O) (neighbor_of this other))\\n        )\\n        (apply\\n            (update_color B)\\n        )\\n    )\\n)\" \n}",
    "{\n    \"nl_description\": \"Move all objects of color different than X, towards the nearest object of color X while changing their color.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (not (color_equals (color_of this) X))\\n                (and\\n                    (neighbor_of this other)\\n                    (color_equals (color_of other) X)\\n                )\\n            )\\n        )\\n        (apply\\n            (move_node (direction_of other))\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (color_equals (color_of this) G)\\n                (or\\n                    (color_equals (color_of other) B)\\n                    (color_equals (color_of other) R)\\n                )\\n            )\\n        )\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects of color O according to the color of the objects above them.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) O)\\n                (and\\n                    (neighbor_of this other)\\n                    (color_equals (color_of other) X)\\n                )\\n            )\\n        )\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) O)\\n                (and\\n                    (neighbor_of this other)\\n                    (color_equals (color_of other) B)\\n                )\\n            )\\n        )\\n        (apply\\n            (update_color B)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) O)\\n                (and\\n                    (neighbor_of this other)\\n                    (color_equals (color_of other) G)\\n                )\\n            )\\n        )\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all O objects to a cyclic pattern of colors starting from G moving clockwise, in the sequence G, R, B.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (color_equals (color_of this) O)\\n        )\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (color_equals (color_of this) G)\\n        )\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (color_equals (color_of this) R)\\n        )\\n        (apply\\n            (update_color B)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects of colors O and different from X to multiple specific colors.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) O)\\n        )\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) G)\\n        )\\n        (apply\\n            (update_color B)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recoloring all the objects neighboring an object with color X according to a specified pattern.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (neighbor_of this other)\\n        )\\n        (apply\\n            (update_color (color_of other))\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"For objects of size 1, recolor them to R if they are gray and green if they are orange. For objects of size greater than 1, objects are recolored blue at the top parts, gold at the middle parts, and red at the bottom parts.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (size_equals (size_of this) 1)\\n        )\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (size_equals (size_of this) 1)\\n                (color_equals (color_of this) O)\\n            )\\n        )\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (size_equals (size_of this) 3)\\n        )\\n        (apply\\n            (update_color B)\\n            (update_color R)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (size_equals (size_of this) 2)\\n        )\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor specific object pairs: X to G, O to B, B to R, G to G, and R to R.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter (color_equals (color_of this) X))\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter (color_equals (color_of this) O))\\n        (apply\\n            (update_color B)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter (color_equals (color_of this) B))\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter (color_equals (color_of this) G))\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter (color_equals (color_of this) R))\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of color different than X one step diagonally, and then recolor them according to the pattern.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (not (color_equals (color_of this) X))\\n        )\\n        (apply\\n            (move_node up_left)\\n            (update_color G)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) G)\\n        )\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of color O one step toward their nearest object of color X, and then recolor them with different colors.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) O)\\n                (color_equals (color_of other) X)\\n            )\\n        )\\n        (apply\\n            (move_node (direction_of other))\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) O)\\n        )\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (color_equals (color_of this) B)\\n        )\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (color_equals (color_of this) G)\\n        )\\n        (apply\\n            (update_color B)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor objects of color O to G, color B to R, and color G to B.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) O)\\n        )\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) B)\\n        )\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) G)\\n        )\\n        (apply\\n            (update_color B)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all instances of red objects in the grid.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) O)\\n        )\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects to specific colors based on the position of other objects in the grid.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (neighbor_of this other)\\n        )\\n        (apply\\n            (update_color B)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (neighbor_of this other)\\n                (color_equals (color_of other) G)\\n            )\\n        )\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (neighbor_of this other)\\n        )\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recoloring objects with different colors, redrawing their shapes or correcting their placements in the grid. Each color is associated with a different type of object handling.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) O)\\n        )\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) B)\\n        )\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (not (color_equals (color_of this) X))\\n                (color_equals (color_of this) B)\\n            )\\n        )\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move each object of size 1 to the nearest object in the grid, and recolor all objects as per the color of the nearest object.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (size_equals (size_of this) 1)\\n                (neighbor_of this other)\\n            )\\n        )\\n        (apply\\n            (move_node_max (direction_of other))\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter (neighbor_of this other))\\n        (apply\\n            (update_color (color_of other))\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor the objects of color O in the following sequence: G, B, R.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) O)\\n        )\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) G)\\n        )\\n        (apply\\n            (move_node down_right)\\n            (update_color B)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) B)\\n        )\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n)\"\n}"
]