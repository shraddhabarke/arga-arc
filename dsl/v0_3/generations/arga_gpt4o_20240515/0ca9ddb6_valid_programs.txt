(do
    (rule
        (vars (this other))
        (filter
            (size_equals (size_of this) 1)
        )
        (apply
            (extend_node left false)
            (extend_node right false)
            (extend_node up false)
            (extend_node down false)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (and
                (size_equals (size_of this) 1)
                (not (color_equals (color_of this) O))
            )
        )
        (apply
            (insert 1 top_left source)
            (insert 1 top_right source)
            (insert 1 bottom_left source)
            (insert 1 bottom_right source)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (and
                (color_equals (color_of this) O)
                (and
                    (neighbor_of this other)
                    (not (color_equals (color_of other) O))
                )
            )
        )
        (apply
            (move_node_max (direction_of other))
            (update_color A)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (and
                (size_equals (size_of this) 1)
                (neighbor_of this other)
  )
        )
        (apply
            (update_color A)
            (add_border Y)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter (not (color_equals (color_of this) O)))
        (apply
            (insert 1 top_left source)
            (insert 1 top_right source)
            (insert 1 bottom_left source)
            (insert 1 bottom_right source)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (and
                (not (color_equals (color_of this) R))
                (and
                    (neighbor_of this other)
                    (color_equals (color_of other) R)
                )
            )
        )
        (apply
            (extend_node (direction_of other) false)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (size_equals (size_of this) 1)
        )
        (apply
            (update_color A)
        )
    )
    (rule
        (vars (this other))
        (filter
            (and
                (color_equals (color_of this) O)
                (and
                    (neighbor_of this other)
                    (color_equals (color_of other) A)
                )
            )
        )
        (apply
            (update_color Y)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (not (color_equals (color_of this) O))
        )
        (apply
            (insert 1 top_left source)
            (insert 1 top_right source)
            (insert 1 bottom_left source)
            (insert 1 bottom_right source)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (and
                (not (color_equals (color_of this) O))
                (neighbor_of this other)
            )
        )
        (apply
            (insert 1 top_left source)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (and
                (size_equals (size_of this) 1)
                (neighbor_of this other)
            )
        )
        (apply
            (move_node (direction_of other))
            (update_color A)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (not (color_equals (color_of this) O))
        )
        (apply
            (insert 0 top_left target)
            (insert 0 top_right target)
            (insert 0 bottom_left target)
            (insert 0 bottom_right target)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter (or (size_equals (size_of this) 3) (size_equals (size_of this) 4)))
        (apply
            (insert 0 top_right source)
            (insert 0 top_left source)
            (insert 0 top source)
            (insert 0 bottom_right source)
            (insert 0 bottom_left source)
            (insert 0 bottom source)
            (insert 0 left source)
            (insert 0 right source)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter (size_equals (size_of this) 1))
        (apply
            (insert 0 top_left source)
            (insert 0 top_right source)
            (insert 0 bottom_left source)
            (insert 0 bottom_right source)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (size_equals (size_of this) 1)
        )
        (apply
            (insert 1 top source)
            (insert 1 bottom source)
            (insert 1 left source)
            (insert 1 right source)
        )
    )
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color Y)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (and
                (size_equals (size_of this) 1)
                (size_equals (size_of other) 2)
            )
        )
        (apply
            (insert 2 top source)
            (insert 2 bottom source)
            (insert 2 left source)
            (insert 2 right source)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) B)
        )
        (apply
            (insert 1 top_left source)
            (insert 1 top source)
            (insert 1 top_right source)
            (insert 1 left source)
            (insert 1 right source)
            (insert 1 bottom_left source)
            (insert 1 bottom source)
            (insert 1 bottom_right source)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) R)
        )
        (apply
            (insert 2 top_left source)
            (insert 2 top source)
            (insert 2 top_right source)
            (insert 2 left source)
            (insert 2 right source)
            (insert 2 bottom_left source)
            (insert 2 bottom source)
            (insert 2 bottom_right source)
        )
    )
)

(do (rule (vars (this other)) (filter (and (size_equals (size_of this) 1) (neighbor_of this other))) (apply (extend_node (direction_of other) false) (update_color A))))

(do
    (rule
        (vars (this other))
        (filter
            (size_equals (size_of this) 1)
        )
        (apply
            (insert 67 (img_pts_of this) source)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (size_equals (size_of this) 1)
        )
        (apply
            (insert 0 (img_pts_of this) source)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (or
                (color_equals (color_of this) R)
                (color_equals (color_of this) B)
            )
        )
        (apply
            (insert 1 top source)
            (insert 1 bottom source)
            (insert 1 left source)
            (insert 1 right source)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) A)
        )
        (apply
            (extend_node up false)
            (extend_node down false)
            (extend_node left false)
            (extend_node right false)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter)
        (apply
            (update_color Y)
        )
    )
    (rule
        (vars (this))
        (filter
            (not (color_equals (color_of this) R))
        )
        (apply
            (move_node left)
        )
    )
    (rule
        (vars (this))
        (filter
            (not (color_equals (color_of this) B))
        )
        (apply
            (move_node right)
        )
    )
    (rule
        (vars (this other))
        (filter (neighbor_of this other))
        (apply
            (insert 0 top_left target)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (and
                (size_equals (size_of this) 1)
                (size_equals (size_of other) 2)
            )
        )
        (apply
            (hollow_rectangle Y)
        )
    )

    (rule
        (vars (this other))
        (filter
        (and
                (size_equals (size_of this) 1)
                (size_equals (size_of other) 3)
            ) 
        )
        (apply
            (update_color A)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (and
                (neighbor_of this other)
                (not (color_equals (color_of other) O))
            )
        )
        (apply
            (insert 1 (img_pts_of this) target)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter (neighbor_of this other))
        (apply
            (insert 0 top_left source)
            (insert 0 top_right source)
            (insert 0 bottom_left source)
            (insert 0 bottom_right source)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (and
                (not (size_equals (size_of this) 1))
                (and
                    (neighbor_of this other)
                    (size_equals (size_of other) 1)
                )
            )
        )
        (apply
            (move_node_max (direction_of other))
            (update_color A)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter)
        (apply
            (extend_node up_left false)
            (extend_node up_right false)
            (extend_node down_left false)
            (extend_node down_right false)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (and
                (not (color_equals (color_of this) R))
                (neighbor_of this other)
            )
        )
        (apply
            (insert 1 (img_pts_of other) target)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (and
                (not (color_equals (color_of this) X))
                (or
                    (color_equals (color_of other) R)
                    (or
                        (color_equals (color_of other) A)
                        (or
                            (color_equals (color_of other) C)
                            (color_equals (color_of other) F)
                        )
                    )
                )
            )
        )
        (apply
            (move_node_max (direction_of other))
            (update_color A)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (and
                (size_equals (size_of this) 1)
                (or
                    (color_equals (color_of this) R)
                    (color_equals (color_of this) B)
                )
            )
        )
        (apply
            (insert 1 top source)
            (insert 2 right source)
            (insert 4 left source)
            (insert 7 bottom source)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (and
                (not (color_equals (color_of this) O))
                (neighbor_of this other)
            )
        )
        (apply
            (insert 0 top_left source)
            (insert 0 top_right source)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (not (color_equals (color_of this) O))
        )
        (apply
            (insert 1 top_left source)
            (insert 1 top_right source)
            (insert 1 bottom_left source)
            (insert 1 bottom_right source)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter)
        (apply
            (insert 1 (img_pts_of this) source)
            (update_color Y)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter (neighbor_of this other))
        (apply (insert 1 top source))
    )
    (rule
        (vars (this))
        (filter (color_equals (color_of this) A))
        (apply (move_node_max (direction_of other)))
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (and
                (size_equals (size_of this) 1)
                (neighbor_of this other)
            )
        )
        (apply
            (move_node (direction_of other))
            (update_color A)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (not (color_equals (color_of this) O))
        )
        (apply
            (insert 0 top_left target)
            (insert 0 top_right target)
            (insert 0 bottom_left target)
            (insert 0 bottom_right target)
        )
    )
    (rule
        (vars (this))
        (filter
            (not (color_equals (color_of this) O))
        )
        (apply
            (update_color Y)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter (not (color_equals (color_of this) R)))
        (apply
            (update_color A)
        )
    )
    (rule
        (vars (this))
        (filter (color_equals (color_of this) R))
        (apply
            (add_border Y)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (and
                (color_equals (color_of this) B)
                (neighbor_of other this)
            )
        )
        (apply
            (insert 1 top_left source)
            (insert 1 top source)
            (insert 1 top_right source)
            (insert 1 left source)
            (insert 1 right source)
            (insert 1 bottom_left source)
            (insert 1 bottom source)
            (insert 1 bottom_right source)
        )
    )
    (rule
        (vars (this other))
        (filter
            (and
                (color_equals (color_of this) R)
                (or
                    (neighbor_of other this)
                    (neighbor_of this other)
                )
            )
        )
        (apply
            (insert 2 left middle)
            (insert 2 right middle)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (and
                (neighbor_of this other)
                (color_equals (color_of other) R)
            )
        )
        (apply
            (insert 1 (img_pts_of this) source)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) R)
        )
        (apply
            (update_color Y)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (and
                (not (color_equals (color_of this) R))
                (neighbor_of this other)
            )
        )
        (apply
            (move_node (direction_of other))
            (update_color Y)
        )
    )
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color A)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (size_equals (size_of this) max)
        )
        (apply
            (insert 1 top_left source)
            (insert 1 top_right source)
            (insert 1 bottom_left source)
            (insert 1 bottom_right source)
        )
    )
    (rule
        (vars (this))
        (filter
            (size_equals (size_of this) 1)
        )
        (apply
            (update_color Y)
        )
    )
)