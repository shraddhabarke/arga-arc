[
    {
        "response": "{\n    \"nl_description\": \"Move objects which are not empty upwards. Non-empty nodes in odd columns should swap their positions with their neighbors in even columns.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (not (color_equals (color_of this) O))\\n                (neighbor_of this other)\\n            )\\n        )\\n        (apply\\n            (swap_node this other)\\n        )\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches 's' in the current parser context, at line 11 col 14\n\n            (swap_node this other)\n             ^\nExpected one of: \n\t* TR_FLIP\n\t* TR_ADD_BORDER\n\t* TR_UPDATE_COLOR\n\t* TR_INSERT\n\t* TR_MIRROR\n\t* TR_NOOP\n\t* TR_HOLLOW_RECTANGLE\n\t* TR_EXTEND_NODE\n\t* TR_MOVE_NODE_MAX\n\t* TR_MOVE_NODE\n\t* TR_ROTATE_NODE\n\t* TR_FILL_RECTANGLE\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Move all objects of size 1 and 2 to the positions of the larger objects.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (or\\n                    (size_equals (size_of this) 1)\\n                    (size_equals (size_of this) 2)\\n                )\\n                (neighbor_of this other)\\n                (or\\n                    (size_equals (size_of other) 4)\\n                    (size_equals (size_of other) 6)\\n                )\\n            )\\n        )\\n        (apply\\n            (move_node_max (direction_of other))\\n        )\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches '(' in the current parser context, at line 11 col 17\n\n                (or\n                ^\nExpected one of: \n\t* RPAR\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Move all the objects of size 1 to the bottom left corner of the object of maximum size.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (size_equals (size_of this) 1)\\n                (size_equals (size_of other) max)\\n            )\\n        )\\n        (apply\\n            (insert (img_pts_of other bottom_left) relative)\\n        )\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches '(' in the current parser context, at line 11 col 21\n\n            (insert (img_pts_of other bottom_left) relative)\n                    ^\nExpected one of: \n\t* OBJECT_ID\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Move all objects above the nearest object of color C, keeping their order.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (neighbor_of other this)\\n            (color_equals (color_of other) C)\\n        )\\n        (apply\\n            (move_node down)\\n        )\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches '(' in the current parser context, at line 6 col 13\n\n            (color_equals (color_of other) C)\n            ^\nExpected one of: \n\t* RPAR\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Move all non-border objects of size 2 to the last row, maintaining their original order.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (size_equals (size_of this) 2)\\n                (not (or\\n                    (neighbor_of this O)\\n                    (neighbor_of this W)\\n                    (neighbor_of this N)\\n                    (neighbor_of this S)\\n                ))\\n            )\\n        )\\n        (apply\\n            (move_node down)\\n        )\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches 'O' in the current parser context, at line 8 col 39\n\n                    (neighbor_of this O)\n                                      ^\nExpected one of: \n\t* VAR\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Move all objects of size 2 to the bottom of the grid.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (or\\n                (size_equals (size_of this) 2)\\n            )\\n        )\\n        (apply\\n            (move_node down)\\n        )\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches ')' in the current parser context, at line 7 col 13\n\n            )\n            ^\nExpected one of: \n\t* LPAR\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Move all diagonal pairs of objects to the next diagonal line.\",\n    \"code\": \"(do (rule (vars (this)) (filter (and (neighbor_of this other) (or (and (column_equals (column_of this) (deg 1)) (column_equals (column_of this) (deg 1))) (and (column_equals (column_of this) (deg -1)) (column_equals (column_of this) (deg -1)))))) (apply (move_node down_right) (move_node up_right) (move_node up_left) (move_node down_left))) (rule (vars (this)) (filter) (apply (noop))))\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches 'd' in the current parser context, at line 1 col 105\n\nr (and (column_equals (column_of this) (deg 1)) (column_equals (column_of this) \n                                        ^\nExpected one of: \n\t* COLUMN_OF\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Move all objects in the top half to the bottom half such that the relative positions are maintained.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (COLUMN_EQ (column_of this) (column_of other))\\n                (not (and\" \n                }\n      \t   \t\t\t\n\n",
        "error_type": "parse_error",
        "error_message": "No terminal matches 'C' in the current parser context, at line 6 col 18\n\n                (COLUMN_EQ (column_of this) (column_of ot\n                 ^\nExpected one of: \n\t* SHAPE_EQ\n\t* OP_OR\n\t* SIZE_EQ\n\t* NEIGHBOR_OF\n\t* WIDTH_EQ\n\t* COLUMN_EQ\n\t* OP_AND\n\t* HEIGHT_EQ\n\t* COLOR_EQ\n\t* OP_NOT\n\t* DEGREE_EQ\n"
    }
]