[
    "{\n    \"nl_description\": \"Move each object with original color B, and recolor it to a different color along its path.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) B)\\n        )\\n        (apply\\n            (move_node up)\\n            (update_color A)\\n            (move_node right)\\n            (update_color B)\\n            (move_node down)\\n            (update_color F)\\n            (move_node left)\\n            (update_color C)\\n            (move_node down)\\n            (update_color R)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all the objects up diagonally to the top, left, and change their color in a constant sequence.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (move_node up_left)\\n            (update_color R)\\n            (move_node up_left)\\n            (update_color A)\\n            (move_node up_left)\\n            (update_color F)\\n            (move_node up_left)\\n            (update_color C)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of color B and change their colors based on their positions\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) B)\\n        )\\n        (apply\\n            (move_node up)\\n            (update_color A)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) A)\\n        )\\n        (apply\\n            (move_node right)\\n            (update_color B)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) B)\\n        )\\n        (apply\\n            (move_node down)\\n            (update_color F)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) F)\\n        )\\n        (apply\\n            (move_node left)\\n            (update_color O)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) B)\\n        )\\n        (apply\\n            (move_node down)\\n            (update_color C)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) C)\\n        )\\n        (apply\\n            (move_node left)\\n            (update_color O)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) B)\\n        )\\n        (apply\\n            (move_node up)\\n            (update_color R)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) R)\\n        )\\n        (apply\\n            (move_node left)\\n            (update_color O)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Change all objects to a sequence of colors: R, A, B, F, C, and repeat.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color R)\\n            (update_color A)\\n            (update_color B)\\n            (update_color F)\\n            (update_color C)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects of color B with a two-step color gradient: A, B, C, F, R, and a final step back to B.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) B)\\n        )\\n        (apply\\n            (update_color A)\\n            (move_node right)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and (color_equals (color_of this) B) (neighbor_of this other))\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) A)\\n        )\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and (color_equals (color_of this) F) (neighbor_of this other))\\n        )\\n        (apply\\n            (update_color B)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) R)\\n        )\\n        (apply\\n            (update_color C)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and (color_equals (color_of this) C) (neighbor_of this other))\\n        )\\n        (apply\\n            (update_color B)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Assign unique colors to isolated B objects.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (color_equals (color_of this) B)\\n                (size_equals (size_of this) 1)\\n            )\\n        )\\n        (apply\\n            (update_color A)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (color_equals (color_of this) B)\\n                (size_equals (size_of this) 1)\\n            )\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (color_equals (color_of this) B)\\n                (size_equals (size_of this) 1)\\n            )\\n        )\\n        (apply\\n            (update_color C)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (color_equals (color_of this) B)\\n                (size_equals (size_of this) 1)\\n            )\\n        )\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n)\\n\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects and move them in a certain pattern.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter (color_equals (color_of this) B))\\n        (apply\\n            (update_color B)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter (color_equals (color_of this) C))\\n        (apply\\n            (update_color C)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter (color_equals (color_of this) A))\\n        (apply\\n            (update_color A)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter (color_equals (color_of this) R))\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter (color_equals (color_of this) F))\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of color B to a random color and change the original cells with other random colors.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) B)\\n        )\\n        (apply\\n            (update_color A)\\n            (update_color C)\\n            (update_color R)\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor the cells with blue 'B' to red 'R', orange 'A', green 'F', and cyan 'C' in a cyclic manner, while maintaining their relative positions.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) B)\\n        )\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) R)\\n        )\\n        (apply\\n            (update_color A)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) A)\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) F)\\n        )\\n        (apply\\n            (update_color C)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) C)\\n        )\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects one step to the right and assign them a new unique color in cyclic order.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (move_node right)\\n            (update_color R)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (move_node right)\\n            (update_color A)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (move_node right)\\n            (update_color F)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (move_node right)\\n            (update_color C)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of size 1 toward the object of color B, and then recolor them based on their final positions.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (size_equals (size_of this) 1)\\n                (and\\n                    (neighbor_of this other)\\n                    (color_equals (color_of other) B)\\n                )\\n            )\\n        )\\n        (apply\\n            (move_node (direction_of other))\\n            (update_color (color_of this))\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all blue objects to red and insert an additional pattern of objects around each recolored object.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) B)\\n        )\\n        (apply\\n            (update_color R)\\n            (insert 1 top source)\\n            (insert 2 bottom source)\\n            (insert 3 left source)\\n            (insert 4 right source)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects using a sequence of colors in a specific pattern.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color R)\\n            (update_color A)\\n            (update_color B)\\n            (update_color F)\\n            (update_color C)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects in a striped pattern starting from the top left corner, using colors from the set {A, B, C, F, R} in sequence.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter (not (color_equals (color_of this) O)))\\n        (apply\\n            (update_color A)\\n            (update_color B)\\n            (update_color F)\\n            (update_color R)\\n            (update_color C)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects on the grid to a different color in the order of R, A, B, F, C.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color A)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color B)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color C)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all 'B' objects to color 'R', then insert objects 'A', 'F', 'C', and 'R' around the original object.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) B)\\n        )\\n        (apply\\n            (update_color R)\\n            (insert 1 top_left source)\\n            (insert 2 top source)\\n            (insert 3 top_right source)\\n            (insert 4 right source)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Replace each blue object in the grid with four objects of varying colors in a symmetrical pattern, while ensuring that no two objects of the same color are adjacent.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) B)\\n        )\\n        (apply\\n            (update_color R)\\n            (insert 1 top_left source)\\n            (update_color A)\\n            (insert 2 bottom_left source)\\n            (update_color F)\\n            (insert 3 top_right source)\\n            (update_color C)\\n            (insert 4 bottom_right source)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all the objects in the grid using the colors A, B, C, F, R, and O.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color A)\\n            (update_color B)\\n            (update_color C)\\n            (update_color F)\\n            (update_color R)\\n            (update_color O)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects of size 1 to colors R, A, F, C, respectively in a cycle.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (size_equals (size_of this) 1)\\n        )\\n        (apply\\n            (update_color R)\\n            (update_color A)\\n            (update_color F)\\n            (update_color C)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move each object to a new position where objects of different colors are placed in a pattern, changing colors in the process depending on their positions.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter)\\n        (apply\\n            (move_node (direction_of other))\\n            (update_color A)\\n            (update_color B)\\n            (update_color C)\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects to different colors depending on their coordinates.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color A)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color B)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color C)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects to a random color from [R, A, F, C]\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color R)\\n            (update_color A)\\n            (update_color F)\\n            (update_color C)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects of size 1 to a sequence of colors: A, B, C, F, R.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (size_equals (size_of this) 1)\\n        )\\n        (apply\\n            (update_color A)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (color_equals (color_of this) A)\\n                (neighbor_of this other)\\n            )\\n        )\\n        (apply\\n            (update_color B)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (color_equals (color_of this) B)\\n                (neighbor_of this other)\\n            )\\n        )\\n        (apply\\n            (update_color C)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (color_equals (color_of this) C)\\n                (neighbor_of this other)\\n            )\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (color_equals (color_of this) F)\\n                (neighbor_of this other)\\n            )\\n        )\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects of color B to a series of colors R, A, F, C in the given order.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) B)\\n        )\\n        (apply\\n            (update_color R)\\n            (update_color A)\\n            (update_color F)\\n            (update_color C)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects to a sequence of colors 'A', 'B', 'C', 'F', 'O', 'R' in respective positions.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color A)\\n            (update_color B)\\n            (update_color C)\\n            (update_color F)\\n            (update_color O)\\n            (update_color R)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Surround all instances of color B with objects of colors A, B, C, F, and R in a specific pattern.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (color_equals (color_of this) B)\\n        )\\n        (apply\\n            (insert 1 top_left source)\\n            (insert 2 top source)\\n            (insert 3 top_right source)\\n            (insert 4 left source)\\n            (insert 5 right source)\\n            (insert 6 bottom_left source)\\n            (insert 7 bottom source)\\n            (insert 8 bottom_right source)\\n            (update_color A)\\n            (update_color B)\\n            (update_color C)\\n            (update_color F)\\n            (update_color R)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all 'B' objects to 'A', 'F', and 'C' in a cyclic order and move them one step to the right. Then add a border of 'R' color to the middle 4x4 square.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) B)\\n        )\\n        (apply\\n            (update_color A)\\n            (update_color F)\\n            (update_color C)\\n            (move_node right)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (column_equals (column_of this) 3)\\n                (column_equals (column_of this) 6)\\n            )\\n        )\\n        (apply\\n            (add_border R)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects of size 1 to different colors arranged in a repeating pattern of R, A, F, C.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (size_equals (size_of this) 1)\\n        )\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and (color_equals (color_of this) O) (size_equals (size_of this) 1))\\n        )\\n        (apply\\n            (update_color A)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and (color_equals (color_of this) O) (size_equals (size_of this) 1))\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and (color_equals (color_of this) O) (size_equals (size_of this) 1))\\n        )\\n        (apply\\n            (update_color C)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of color B to their right and then recolor them according to their position.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) B)\\n        )\\n        (apply\\n            (move_node right)\\n            (update_color C)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) C)\\n        )\\n        (apply\\n            (update_color (color_of this))\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of color B one step to the right, and then recolor them to different colors cyclically.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) B)\\n        )\\n        (apply\\n            (move_node right)\\n            (update_color R)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) R)\\n        )\\n        (apply\\n            (update_color A)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) A)\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) F)\\n        )\\n        (apply\\n            (update_color C)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) C)\\n        )\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Insert the object A, B, F, C, R in a diagonal pattern starting from the left side of the input grid while maintaining the cells with B.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (insert 1 top_left source)\\n            (insert 2 top_left source)\\n            (insert 3 top_left source)\\n            (insert 4 top_left source)\\n            (insert 5 top_left source)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Distribute the colors A, B, C, F, and R among the objects in the grids.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter (color_equals (color_of this) B))\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color A)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter (color_equals (color_of this) O))\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter (color_equals (color_of this) R))\\n        (apply\\n            (update_color C)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter (color_equals (color_of this) A))\\n        (apply\\n            (update_color B)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor and move all objects of size 1 in a specific pattern and color sequence.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (size_equals (size_of this) 1)\\n        )\\n        (apply\\n            (update_color R)\\n            (move_node right)\\n            (update_color A)\\n            (move_node right)\\n            (update_color B)\\n            (move_node right)\\n            (update_color F)\\n            (move_node right)\\n            (update_color C)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects: from B to F, from O to A, and from O to R, from O to C.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter (color_equals (color_of this) B))\\n        (apply (update_color F))\\n    )\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color Y)\\n            (update_color R)\\n            (update_color C)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all blue objects to red and insert colored objects at their neighbors positions.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (color_equals (color_of this) B)\\n        )\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (color_equals (color_of this) R)\\n        )\\n        (apply\\n            (insert 1 top_left source)\\n            (insert 1 top source)\\n            (insert 1 top_right source)\\n            (insert 1 right source)\\n            (insert 1 bottom_right source)\\n            (insert 1 bottom source)\\n            (insert 1 bottom_left source)\\n            (insert 1 left source)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects to red, orange, fuchsia, or cyan in a specific sequence zigzagging through rows, assigning colors cyclically to each individual object.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color R)\\n            (update_color A)\\n            (update_color F)\\n            (update_color C)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Colorize the objects in an alternating pattern starting from each B, using colors A, F, C, and R, in a repeating sequence.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) B)\\n        )\\n        (apply\\n            (update_color A)\\n            (update_color F)\\n            (update_color C)\\n            (update_color R)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor each object to a unique color.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter (neighbor_of this other))\\n        (apply\\n            (update_color (color_of other))\\n            (move_node (direction_of other))\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color A)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Change the colors of all objects in the grid by assigning a specific pattern: R, A, B, F, O, C, etc., in a repeated sequence.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color R)\\n            (update_color A)\\n            (update_color B)\\n            (update_color F)\\n            (update_color O)\\n            (update_color C)\\n            (update_color R)\\n            (update_color A)\\n            (update_color B)\\n            (update_color F)\\n            (update_color O)\\n            (update_color C)\\n            (update_color R)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects to specific colors: R, A, B, C, and F in a repeating pattern.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color R)\\n            (update_color A)\\n            (update_color B)\\n            (update_color C)\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor the neighbors of each object of color B (excluding B itself) with a distinct color, in a specific pattern depending on their relative position.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (neighbor_of this other)\\n        )\\n        (apply\\n            (update_color R)\\n            (move_node right)\\n            (update_color A)\\n            (move_node left)\\n            (move_node down)\\n            (update_color F)\\n            (move_node up)\\n            (move_node left)\\n            (update_color C)\\n            (move_node right)\\n            (move_node right)\\n            (update_color C)\\n            (move_node left)\\n            (move_node down)\\n            (move_node down)\\n            (update_color C)\\n            (move_node up)\\n            (update_color R)\\n            (move_node left)\\n            (update_color A)\\n            (move_node right)\\n            (move_node up)\\n            (update_color F)\\n            (move_node down)\\n            (move_node down)\\n            (update_color A)\\n            (move_node up)\\n            (update_color R)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Transform all 'B' objects by adding respective colors around them.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) B)\\n        )\\n        (apply\\n            (add_border R)\\n            (update_color A)\\n            (add_border F)\\n            (update_color C)\\n            (add_border O)\\n            (update_color Y)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of color B one step left and recolor them to random colors.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) B)\\n        )\\n        (apply\\n            (move_node left)\\n            (update_color A)\\n            (update_color C)\\n            (update_color F)\\n            (update_color R)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects to random colors from a specific set.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color A)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color C)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor every object to a unique color code, cycling through colors R, A, F, C for 2-cell objects and colors B for others.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter)\\n        (apply\\n            (update_color R)\\n            (update_color A)\\n            (update_color F)\\n            (update_color C)\\n            (update_color B)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects to colors R, A, B, F, or C in a certain sequence.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color A)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color B)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color C)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Surround each object of color B with smaller objects of colors A, F, C, R.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter (color_equals (color_of this) B))\\n        (apply\\n            (insert 1 top_left source)\\n            (insert 2 top_right source)\\n            (insert 3 bottom_right source)\\n            (insert 4 bottom_left source)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor the grid with new colors R, A, F, C in a specific pattern, leaving the positions of B unchanged.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color R)\\n            (update_color A)\\n            (update_color F)\\n            (update_color C)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects of color B with distinct colors based on their position.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter (color_equals (color_of this) B))\\n        (apply\\n            (update_color R)\\n            (move_node up)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter (color_equals (color_of this) B))\\n        (apply\\n            (update_color A)\\n            (move_node left)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter (color_equals (color_of this) Y))\\n        (apply\\n            (update_color F)\\n            (move_node right)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter (color_equals (color_of this) G))\\n        (apply\\n            (update_color C)\\n            (move_node down)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects and arrange in a grid pattern with colors A, B, C, F, R.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color A)\\n            (update_color B)\\n            (update_color C)\\n            (update_color F)\\n            (update_color R)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects of color B to various colors in a cyclic pattern: B -> R -> A -> F -> C -> B.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter (color_equals (color_of this) B))\\n        (apply (update_color R))\\n    )\\n    (rule\\n        (vars (this))\\n        (filter (color_equals (color_of this) R))\\n        (apply (update_color A))\\n    )\\n    (rule\\n        (vars (this))\\n        (filter (color_equals (color_of this) A))\\n        (apply (update_color F))\\n    )\\n    (rule\\n        (vars (this))\\n        (filter (color_equals (color_of this) F))\\n        (apply (update_color C))\\n    )\\n    (rule\\n        (vars (this))\\n        (filter (color_equals (color_of this) C))\\n        (apply (update_color B))\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Replace diagonally adjacent empty spaces with specific colored objects.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) O)\\n                (neighbor_of this other)\\n            )\\n        )\\n        (apply\\n            (update_color R)\\n            (update_color A)\\n            (update_color F)\\n            (update_color C)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects to different colors alternatingly in the grid sequentially.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color A)\\n            (update_color B)\\n            (update_color F)\\n            (update_color C)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of color B in the same order they appear toward right (if possible), and recolor all of them and the empty cells they moved through to distinct colors in order A, B, C, F, R.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) B)\\n        )\\n        (apply\\n            (move_node right)\\n            (update_color A)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) O)\\n        )\\n        (apply\\n            (update_color B)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) O)\\n        )\\n        (apply\\n            (update_color C)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) O)\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) O)\\n        )\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all B objects to A, F, R, or C based on their positions in the grid.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter (color_equals (color_of this) B))\\n        (apply\\n            (update_color A)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter (color_equals (color_of this) A))\\n        (apply\\n            (move_node down)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter (color_equals (color_of this) A))\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter (color_equals (color_of this) F))\\n        (apply\\n            (move_node right)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter (color_equals (color_of this) F))\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter (color_equals (color_of this) R))\\n        (apply\\n            (move_node up_left)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter (color_equals (color_of this) R))\\n        (apply\\n            (update_color C)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor 4x4 subtables in rows, columns and diagonals in a specific pattern of colors.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (size_equals (size_of this) 1)\\n                (and\\n                    (neighbor_of this other)\\n                    (size_equals (size_of other) 1)\\n                )\\n            )\\n        )\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (size_equals (size_of this) 1)\\n                (and\\n                    (neighbor_of this other)\\n                    (size_equals (size_of other) 1)\\n                )\\n            )\\n        )\\n        (apply\\n            (update_color A)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (size_equals (size_of this) 1)\\n                (and\\n                    (neighbor_of this other)\\n                    (size_equals (size_of other) 1)\\n                )\\n            )\\n        )\\n        (apply\\n            (update_color B)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (size_equals (size_of this) 1)\\n                (and\\n                    (neighbor_of this other)\\n                    (size_equals (size_of other) 1)\\n                )\\n            )\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (size_equals (size_of this) 1)\\n                (and\\n                    (neighbor_of this other)\\n                    (size_equals (size_of other) 1)\\n                )\\n            )\\n        )\\n        (apply\\n            (update_color C)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Change the color of all objects to a series of colors in the pattern R, A, B, F, C in each row.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color R)\\n            (update_color A)\\n            (update_color B)\\n            (update_color F)\\n            (update_color C)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all the B spots in object, and color all other spots with specific colors following the sequence: R, A, F, C.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color Y)\\n        )\\n    )\\n)\"\n}\n\n",
    "{\n    \"nl_description\": \"Move all objects to new random positions, and recolor them in the sequence R, A, F, C.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter (color_equals (color_of this) B))\\n        (apply\\n            (move_node up)\\n            (update_color R)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter (color_equals (color_of this) B))\\n        (apply\\n            (move_node down)\\n            (update_color A)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter (color_equals (color_of this) B))\\n        (apply\\n            (move_node left)\\n            (update_color F)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter (color_equals (color_of this) B))\\n        (apply\\n            (move_node right)\\n            (update_color C)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor blue objects and objects in the same locations as blue objects but in different grids, to a new set of colors following a specific pattern.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) B)\\n        )\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) O)\\n        )\\n        (apply\\n            (update_color A)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) O)\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) O)\\n        )\\n        (apply\\n            (update_color C)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Replace each B with a varied pattern of objects with different colors or shapes.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (color_equals (color_of this) B)\\n        )\\n        (apply\\n            (insert 0 bottom source)\\n            (update_color G)\\n            (insert 0 bottom middle)\\n            (update_color C)\\n         )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects stepwise to different specified colors following a predefined pattern.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter)\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter)\\n        (apply\\n            (update_color A)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter)\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter)\\n        (apply\\n            (update_color C)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move the objects of size 1 to their closest neighboring cells in an ordered manner, and recolor the resulting grid.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (size_equals (size_of this) 1)\\n                (neighbor_of this other)\\n            )\\n        )\\n        (apply\\n            (move_node (direction_of other))\\n            (update_color A)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter (size_equals (size_of this) 1))\\n        (apply\\n            (update_color B)\\n            (move_node right)\\n            (update_color C)\\n            (move_node down)\\n            (update_color F)\\n            (move_node left)\\n            (update_color R)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor and reposition each object with a unique color, in a predetermined color sequence (R, A, B, C, F) and pattern.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color R)\\n            (move_node down)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color A)\\n            (move_node down_right)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color B)\\n            (move_node down_left)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color C)\\n            (move_node right)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Replace each blue object with three adjacent objects of colors R, A, and F following a specific pattern.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) B)\\n        )\\n        (apply\\n            (insert 0 top_left source)\\n            (update_color R)\\n            (insert 1 top_right target)\\n            (update_color A)\\n            (insert 2 bottom source)\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Arrange the objects diagonally from top left to bottom right with a repeating pattern of objects A, B, and F.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter)\\n        (apply\\n            (insert 1 top_left source)\\n            (update_color A)\\n            (insert 2 top_left source)\\n            (update_color B)\\n            (insert 3 top_left source)\\n            (update_color F)\\n        )\\n    )\\n)\"\n}"
]