[
    "{\n    \"nl_description\": \"Move all objects of color R or B, one step to the left. Then, recolor them to color X.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (or (color_equals (color_of this) R) (color_equals (color_of this) B))\\n        )\\n        (apply\\n            (move_node left)\\n            (update_color X)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects of color R and B to color X.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (or\\n                (color_equals (color_of this) R)\\n                (color_equals (color_of this) B)\\n            )\\n        )\\n        (apply\\n            (update_color X)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Replace all objects of color R and G with color X.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (or\\n                (color_equals (color_of this) R)\\n                (color_equals (color_of this) G)\\n            )\\n        )\\n        (apply\\n            (update_color X)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Remove all objects of color R and G, then color all adjacent and diagonal cells around each removed object with color X.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (or\\n                (color_equals (color_of this) R)\\n                (color_equals (color_of this) G)\\n            )\\n        )\\n        (apply\\n            (update_color O)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (neighbor_of this other)\\n                (and\\n                    (not (color_equals (color_of other) O))\\n                    (or\\n                        (color_equals (color_of this) R)\\n                        (color_equals (color_of this) G)\\n                    )\\n                )\\n            )\\n        )\\n        (apply\\n            (update_color X)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects of color R to color X\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) R)\\n        )\\n        (apply\\n            (update_color X)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of color R, B, or G one step towards the edge, and then change their color to X.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (or\\n                (color_equals (color_of this) R)\\n                (or\\n                    (color_equals (color_of this) B)\\n                    (color_equals (color_of this) G)\\n                )\\n            )\\n        )\\n        (apply\\n            (move_node_max (direction_of this))\\n            (update_color X)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of color R or G one step to the right and then recolor them to color X.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (or\\n                (color_equals (color_of this) R)\\n                (color_equals (color_of this) G)\\n            )\\n        )\\n        (apply\\n            (move_node right)\\n            (update_color X)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of color different than X, towards the object of color X, if they are neighbors of it.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (not (color_equals (color_of this) X))\\n                (and\\n                    (neighbor_of this other)\\n                    (color_equals (color_of other) X)\\n                )\\n            )\\n        )\\n        (apply\\n            (move_node_max (direction_of other))\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all the objects of color R, G, and B toward the nearest object of color X.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (or\\n                    (color_equals (color_of this) R)\\n                    (or\\n                        (color_equals (color_of this) G)\\n                        (color_equals (color_of this) B)\\n                    )\\n                )\\n                (and\\n                    (neighbor_of this other)\\n                    (color_equals (color_of other) X)\\n                )\\n            )\\n        )\\n        (apply\\n            (move_node_max (direction_of other))\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of color different than X to the same row as the object of color X, if they are neighbors of it.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (not (color_equals (color_of this) X))\\n                (and\\n                    (neighbor_of this other)\\n                    (color_equals (color_of other) X)\\n                )\\n            )\\n        )\\n        (apply\\n            (extend_node down false)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all R objects to X.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) R)\\n        )\\n        (apply\\n            (update_color X)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor the objects of alias R and G with the alias color X.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (or\\n                (color_equals (color_of this) R)\\n                (color_equals (color_of this) G)\\n            )\\n        )\\n        (apply\\n            (update_color X)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of color 'R' towards the object of color 'X' if they are neighbors and recolor them to 'X'.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) R)\\n                (and\\n                    (neighbor_of this other)\\n                    (color_equals (color_of other) X)\\n                )\\n            )\\n        )\\n        (apply\\n            (move_node (direction_of other))\\n            (update_color X)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects to color X\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color X)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects neighboring the objects of color X to color X, and delete the objects with initial color X.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (neighbor_of this other)\\n        )\\n        (apply\\n            (update_color X)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) X)\\n        )\\n        (apply\\n            (update_color O)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all non-X objects in the rows immediately above and below rows of X objects.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (neighbor_of this other)\\n                (color_equals (color_of other) X)\\n            )\\n        )\\n        (apply\\n            (update_color X)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects of color R to color X.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) R)\\n        )\\n        (apply\\n            (update_color X)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects of color R to X and all objects of color G to X.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) R)\\n        )\\n        (apply\\n            (update_color X)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) G)\\n        )\\n        (apply\\n            (update_color X)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of color different than X into the row or column containing objects of color X, if they are neighbors of it.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (not (color_equals (color_of this) X))\\n                (and\\n                    (neighbor_of this other)\\n                    (color_equals (color_of other) X)\\n                )\\n            )\\n        )\\n        (apply\\n            (move_node_max (direction_of other))\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all red objects to the nearest black object.\",\n    \"code\": \"(do (rule (vars (this other)) (filter (and (color_equals (color_of this) R) (color_equals (color_of other) X))) (apply (move_node (direction_of other)))))\"\n}",
    "{\n    \"nl_description\": \"Transform objects of size 1 to X if they have no neighbors.\",\n    \"code\": \"(do (rule (vars (this other)) (filter (and (size_equals (size_of this) 1) (not (neighbor_of this other)))) (apply (update_color X))))\"\n}",
    "{\n    \"nl_description\": \"Move all objects of color R and B one step up and recolor them to color X.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (or\\n                (color_equals (color_of this) R)\\n                (color_equals (color_of this) B)\\n            )\\n        )\\n        (apply\\n            (move_node up)\\n            (update_color X)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all red objects to their closest neighboring black object location and update their color to black.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) R)\\n                (and\\n                    (neighbor_of this other)\\n                    (color_equals (color_of other) X)\\n                )\\n            )\\n        )\\n        (apply\\n            (move_node (direction_of other))\\n            (update_color X)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Replace all objects with color R with color X in all rows and columns of X lines.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) R)\\n                (or\\n                    (neighbor_of this other)\\n                    (color_equals (color_of other) X)\\n                )\\n            )\\n        )\\n        (apply\\n            (update_color X)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all R objects to X.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) R)\\n        )\\n        (apply\\n            (update_color X)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"For all neighboring objects colored other than X and at least one R, move them toward the object colored X.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (not (color_equals (color_of this) X))\\n                (and\\n                    (neighbor_of this other)\\n                    (and\\n                        (not (color_equals (color_of other) X))\\n                        (color_equals (color_of this) R)\\n                    )\\n                )\\n            )\\n        )\\n        (apply\\n            (move_node_max (direction_of other))\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Update objects of color R to color X only if they are directly above or below the objects of color X.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) R)\\n                (and\\n                    (neighbor_of this other)\\n                    (color_equals (color_of other) X)\\n                )\\n            )\\n        )\\n        (apply\\n            (update_color X)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of color different than X, toward the object of color X, if they are neighbors of it.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (not (color_equals (color_of this) X))\\n                (and\\n                    (neighbor_of this other)\\n                    (color_equals (color_of other) X)\\n                )\\n            )\\n        )\\n        (apply\\n            (move_node_max (direction_of other))\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects of color R to color X\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) R)\\n        )\\n        (apply\\n            (update_color X)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of color R or G one step to the left, and then recolor them to color X.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (or\\n                (color_equals (color_of this) R)\\n                (color_equals (color_of this) G)\\n            )\\n        )\\n        (apply\\n            (move_node left)\\n            (update_color X)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all red objects one step towards the nearest blue object and then change their color to X\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) R)\\n                (neighbor_of this other)\\n            )\\n        )\\n        (apply\\n            (move_node (direction_of other))\\n            (update_color X)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Replace all instances of the object colored R with the object colored X.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) R)\\n        )\\n        (apply\\n            (update_color X)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor isolated red objects to grey (color X).\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) R)\\n                (not\\n                    (neighbor_of this other)\\n                )\\n            )\\n        )\\n        (apply\\n            (update_color X)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of color R or G one step up and update their color to X.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (or\\n                (color_equals (color_of this) R)\\n                (color_equals (color_of this) G)\\n            )\\n        )\\n        (apply\\n            (move_node up)\\n            (update_color X)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of color R or color G one step towards an object of color X, if they are neighbors of it, and then recolor them to X.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (or\\n                    (color_equals (color_of this) R)\\n                    (color_equals (color_of this) G)\\n                )\\n                (and\\n                    (neighbor_of this other)\\n                    (color_equals (color_of other) X)\\n                )\\n            )\\n        )\\n        (apply\\n            (move_node (direction_of other))\\n            (update_color X)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of color R and B toward the object of color X, if they are in the same row as X.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (or\\n                    (color_equals (color_of this) R)\\n                    (color_equals (color_of this) B)\\n                )\\n                (and\\n                    (width_equals (width_of this) (width_of other))\\n                    (color_equals (color_of other) X)\\n                )\\n            )\\n        )\\n        (apply\\n            (move_node_max (direction_of other))\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of color R or G one step towards the center line.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (or\\n                (color_equals (color_of this) R)\\n                (color_equals (color_of this) G)\\n            )\\n        )\\n        (apply\\n            (move_node up)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move the red objects one step towards the center row and recolor them to black.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) R)\\n                (column_equals (column_of this) (column_of other))\\n            )\\n        )\\n        (apply\\n            (move_node down)\\n            (update_color X)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of color R and B one step toward the center line, and then recolor them to color X.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (or\\n                (color_equals (color_of this) R)\\n                (color_equals (color_of this) B)\\n            )\\n        )\\n        (apply\\n            (move_node up)\\n            (update_color X)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects of color R to color X.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) R)\\n        )\\n        (apply\\n            (update_color X)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all the objects to color X.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color X)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all red objects one step towards the nearest black object.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) R)\\n                (color_equals (color_of other) X)\\n            )\\n        )\\n        (apply\\n            (move_node (direction_of other))\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all R objects to X objects' positions, and recolor them X.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) R)\\n                (and\\n                    (neighbor_of this other)\\n                    (color_equals (color_of other) X)\\n                )\\n            )\\n        )\\n        (apply\\n            (move_node (direction_of other))\\n            (update_color X)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Change all red objects (R) to grey (X).\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) R)\\n        )\\n        (apply\\n            (update_color X)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects of color R to color X.\",\n    \"code\": \"(do (rule (vars (this)) (filter (color_equals (color_of this) R)) (apply (update_color X))))\"\n}",
    "{\n    \"nl_description\": \"Replace all instances of color R with color X.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter (color_equals (color_of this) R))\\n        (apply (update_color X))\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Replace all red objects with X objects.\",\n    \"code\": \"(do (rule (vars (this)) (filter (color_equals (color_of this) R)) (apply (update_color X) ) ) )\"\n}",
    "{\n    \"nl_description\": \"Recolor the center (rectangular) region composed of objects with color X to X with the neighbors also color X.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) X)\\n                (neighbor_of this other)\\n            )\\n        )\\n        (apply\\n            (update_color X)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Remove all objects with color different than 'X' if they are not adjacent to an object of color 'X'.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (not (color_equals (color_of this) X))\\n                (not (neighbor_of this other))\\n            )\\n        )\\n        (apply\\n            (update_color O)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all red objects towards the closest grey object, and then change their color to grey.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) R)\\n                (color_equals (color_of other) X)\\n            )\\n        )\\n        (apply\\n            (move_node (direction_of other))\\n            (update_color X)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects of color R to color X.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) R)\\n        )\\n        (apply\\n            (update_color X)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Change all objects of color R to color X.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) R)\\n        )\\n        (apply\\n            (update_color X)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Change the color of all R objects to X and move them one step up.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) R)\\n        )\\n        (apply\\n            (move_node up)\\n            (update_color X)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of color R, G, and B towards the closest object of color X and replace them with X.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (or\\n                    (color_equals (color_of this) R)\\n                    (or\\n                        (color_equals (color_of this) G)\\n                        (color_equals (color_of this) B)\\n                    )\\n                )\\n                (and\\n                    (neighbor_of this other)\\n                    (color_equals (color_of other) X)\\n                )\\n            )\\n        )\\n        (apply\\n            (move_node_max (direction_of other))\\n            (update_color X)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Objects with color R move toward the middle row of X objects, then recolor to X.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) R)\\n                (and\\n                    (neighbor_of this other)\\n                    (color_equals (color_of other) X)\\n                )\\n            )\\n        )\\n        (apply\\n            (move_node_max (direction_of other))\\n            (update_color X)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Replace objects of color R and G with new objects of color X.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (or (color_equals (color_of this) R) (color_equals (color_of this) G))\\n        )\\n        (apply\\n            (update_color X)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of color R toward the center of the grid.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter (color_equals (color_of this) R))\\n        (apply (move_node up_left))\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Remove all objects of color R and G from the grid.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (or\\n                (color_equals (color_of this) R)\\n                (color_equals (color_of this) G)\\n            )\\n        )\\n        (apply\\n            (update_color X)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all red objects to grey.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) R)\\n        )\\n        (apply\\n            (update_color X)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Extend all objects of color R towards the objects of color X, without overlapping.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) R)\\n                (and\\n                    (neighbor_of this other)\\n                    (color_equals (color_of other) X)\\n                )\\n            )\\n        )\\n        (apply\\n            (extend_node (direction_of other) false)\\n        )    \\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all red objects to black.\",\n    \"code\": \"(do (rule (vars (this)) (filter (color_equals (color_of this) R)) (apply (update_color X))))\"\n}",
    "{\n    \"nl_description\": \"Move objects of color different than X towards X, and then recolor them to X.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (not (color_equals (color_of this) X))\\n                (and\\n                    (neighbor_of this other)\\n                    (color_equals (color_of other) X)\\n                )\\n            )\\n        )\\n        (apply\\n            (move_node_max (direction_of other))\\n            (update_color X)\\n        )\\n    )\\n)\"\n}"
]