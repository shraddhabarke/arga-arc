[
    "{\n    \"nl_description\": \"Fill all objects of size 1 with color F\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (size_equals (size_of this) 1)\\n        )\\n        (apply\\n            (fill_rectangle F false)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Fill all the objects in the grid with the smallest surrounding rectangle filled with color F, keeping their original colors unchanged\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (add_border F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Extend all objects towards the object of color 'R', without overlap.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of other) R)\\n                (neighbor_of this other)\\n            )\\n        )\\n        (apply\\n            (extend_node (direction_of other) false)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Create a filled rectangle around each 'G', 'R', or 'C' and recolor them.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (or\\n                (color_equals (color_of this) G)\\n                (or\\n                    (color_equals (color_of this) R)\\n                    (color_equals (color_of this) C)\\n                )\\n            )\\n        )\\n        (apply\\n            (fill_rectangle F false)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Extend all objects of size 1 in all directions without overlapping.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (size_equals (size_of this) 1)\\n        )\\n        (apply\\n            (extend_node up false)\\n            (extend_node down false)\\n            (extend_node left false)\\n            (extend_node right false)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Add a border to all objects and color it F, and then add a border to all objects of size 1 and recolor it Y.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (add_border F)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (size_equals (size_of this) 1)\\n        )\\n        (apply\\n            (add_border Y)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Draw a border around objects and recolor the borders to color F\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (add_border F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Fill all empty surrounding cells of objects with color F.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (neighbor_of this other)\\n        )\\n        (apply\\n            (fill_rectangle F false)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Fill a hollow rectangle around each object of size 1 with color Y.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (size_equals (size_of this) 1)\\n        )\\n        (apply\\n            (fill_rectangle Y false)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Add a border of color Y to all objects and fill the background with color F\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (add_border Y)\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Surround all objects with color F.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (add_border F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Create a border of color F around all objects of color and size 1 except position (6,5) and color B around all others of size 3\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and (size_equals (size_of this) 1)\\n                (color_equals (color_of this) Y) ))\\n        (apply\\n            (move_node_max down))\\n    )\\n)\"}\n",
    "{\n    \"nl_description\": \"Create hollow rectangles with a 'Y' color border around each object. If any object is 'G' or 'R', colour them 'F'.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (or\\n                (color_equals (color_of this) G)\\n                (color_equals (color_of this) R)\\n            )\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (hollow_rectangle Y)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Identify the objects of color C, G, R in the grid and add a border of color Y around each object. Surround found bordering objects of other colors with F.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (or\\n                (color_equals (color_of this) C)\\n                (or\\n                    (color_equals (color_of this) G)\\n                    (color_equals (color_of this) R)\\n                )\\n            )\\n        )\\n        (apply\\n            (add_border Y)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (not (color_equals (color_of this) O))\\n                (not (color_equals (color_of this) Y))\\n            )\\n        )\\n        (apply\\n            (add_border F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Paint all pixels around the objects with color F, while extending these objects.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (extend_node down_left false)\\n            (extend_node down_right false)\\n            (extend_node up_left false)\\n            (extend_node up_right false)\\n            (extend_node down false)\\n            (extend_node right false)\\n            (extend_node up false)\\n            (extend_node left false)\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Extend all objects of size 1 outward, without overlapping, and then recolor them to color F.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (size_equals (size_of this) 1)\\n        )\\n        (apply\\n            (extend_node (direction_of other) false)\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"For the smallest object in the grid, create an F-shaped pattern around it with color F, and then surround the original object with color Y.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (size_equals (size_of this) min)\\n        )\\n        (apply\\n            (extend_node up false)\\n            (extend_node left false)\\n            (extend_node right false)\\n            (update_color F)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (size_equals (size_of this) min)\\n        )\\n        (apply\\n            (add_border Y)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects with a border to color 'F' and the inside area to color 'Y'.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (shape_equals (shape_of this) enclosed)\\n        )\\n        (apply\\n            (add_border F)\\n            (fill_rectangle Y false)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Add border to objects around other objects\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter (neighbor_of this other))\\n        (apply\\n            (add_border (color_of other))\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Extend all objects towards their surrounding objects, without overlapping, and then change their color to F.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (neighbor_of this other)\\n        )\\n        (apply\\n            (extend_node (direction_of other) false)\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of size 1 one step up and recolor them to color F, then move all objects of any size that are neighbors of C to form a border around the object.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (size_equals (size_of this) 1)\\n        )\\n        (apply\\n            (move_node up)\\n            (update_color F)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (neighbor_of this other)\\n                (color_equals (color_of other) C)\\n            )\\n        )\\n        (apply\\n            (extend_node down true)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"For all objects of size 1, expand them in all four directions and recolor them to color F.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (size_equals (size_of this) 1)\\n        )\\n        (apply\\n            (extend_node up false)\\n            (extend_node down false)\\n            (extend_node left false)\\n            (extend_node right false)\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Insert new line of objects around the objects of size 1\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter (size_equals (size_of this) 1))\\n        (apply (extend_node up false) (extend_node right false) (extend_node down false) (extend_node left false))\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Extend nodes of size 1 to form X shape around other objects, then recolor all objects to specific colors.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (size_equals (size_of this) 1)\\n        )\\n        (apply\\n            (extend_node up_right false)\\n            (extend_node down_right false)\\n            (extend_node down_left false)\\n            (extend_node up_left false)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color Y)\\n            (update_color F)\\n            (update_color B)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Fill rectangles around the objects.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (fill_rectangle Y false)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor a 3x3 area around each object to color F, excluding the object itself.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (fill_rectangle F false)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Add a border of color Y around each object, and change the background to color F.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (add_border Y)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Add a border of color F to all the objects on the grid.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (add_border F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Fill all the empty spaces surrounding the colored objects with some color to create a 3x3 pattern.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (neighbor_of this other)\\n                (not (color_equals (color_of this) O))\\n            )\\n        )\\n        (apply\\n            (fill_rectangle F false)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of size 1 towards the nearest neighbouring object and then recolor them to color F.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (size_equals (size_of this) 1)\\n                (neighbor_of this other)\\n            )\\n        )\\n        (apply\\n            (move_node (direction_of other))\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects of size 1 to color F.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (size_equals (size_of this) 1)\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Fill a 3x3 area centered around each object with color Y, then create a border of color F around each such area.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (fill_rectangle Y false)\\n            (add_border F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Extend all objects of size 1 to form a 3x3 block and recolor them to yellow, extend all objects of size 2 to form a 3x3 block and recolor them to cyan.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (size_equals (size_of this) 1)\\n        )\\n        (apply\\n            (fill_rectangle Y false)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (size_equals (size_of this) 2)\\n        )\\n        (apply\\n            (fill_rectangle F false)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Extend all objects of size 1 in each example with the color 'F', towards the nearest object and recolor them to 'F'.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter (and (size_equals (size_of this) 1) (neighbor_of this other)))\\n        (apply (extend_node (direction_of other) false) (update_color F))\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Extend all objects in the grids, except the object of color C, to create a larger structure around the object if present, without overlapping.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (not (color_equals (color_of this) C))\\n                (neighbor_of this other)\\n            )\\n        )\\n        (apply\\n            (fill_rectangle (color_of this) false)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Extend all objects of size 1 with color F towards the object of color G without overlapping.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (size_equals (size_of this) 1)\\n                (and\\n                    (color_equals (color_of this) F)\\n                    (and\\n                        (neighbor_of this other)\\n                        (color_equals (color_of other) G)\\n                    )\\n                )\\n            )\\n        )\\n        (apply\\n            (extend_node (direction_of other) false)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Extend all objects of color G, and F in all eight directions, overlapping allowed.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (or\\n                (color_equals (color_of this) G)\\n                (color_equals (color_of this) F)\\n            )\\n        )\\n        (apply\\n            (extend_node up true)\\n            (extend_node down true)\\n            (extend_node left true)\\n            (extend_node right true)\\n            (extend_node up_left true)\\n            (extend_node up_right true)\\n            (extend_node down_left true)\\n            (extend_node down_right true)\\n        )\\n    )\\n)\"\n}",
    "{\n  \"nl_description\": \"Extend objects of color different from O towards adjacent objects.\",\n  \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (not (color_equals (color_of this) O))\\n                (neighbor_of this other)\\n            )\\n        )\\n        (apply\\n            (extend_node (direction_of other) false)\\n        )    \\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Add borders of color F around all objects, changing the objects' color to F.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (add_border F)\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Change the color to F of all objects located at the top-left corner, size 3x3 from the given grid, with new positions and colors\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Surround all objects with a border of color Y, and fill the inner cells of size 3 objects with color F.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (add_border Y)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (size_equals (size_of this) 3)\\n        )\\n        (apply\\n            (fill_rectangle F false)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Replace neighboring cells surrounding any object with a different color.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (not (color_equals (color_of this) O))\\n                (neighbor_of this other)\\n            )\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Fill all objects with size 1 and move them together to form a central cluster.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (size_equals (size_of this) 1)\\n        )\\n        (apply\\n            (fill_rectangle Y false)\\n            (extend_node (direction_of other) false)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Extend all objects of color except O to form a cross if found in the center of the grid.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter (and (not (color_equals (color_of this) O)) (and (neighbor_of this other) (column_equals (column_of this) center))))\\n        (apply\\n            (extend_node up true)\\n            (extend_node down true)\\n            (extend_node left true)\\n            (extend_node right true)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"All objects are extended in all 4 directions until they meet another object, and the objects are recolored to their new border colors.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (extend_node up true)\\n            (extend_node down true)\\n            (extend_node left true)\\n            (extend_node right true)\\n        )        \\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Create 3x3 squares centered on every existing object and recolor them to color Yellow (Y).\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n          (apply\\n            (extend_node left false)\\n            (extend_node up false)\\n            (extend_node right false)\\n            (extend_node down false)\\n            (update_color Y)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Fill a 3x3 square with the object's color around each object in the center of the square.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (extend_node up true)\\n            (extend_node down true)\\n            (extend_node left true)\\n            (extend_node right true)\\n            (extend_node up_left true)\\n            (extend_node up_right true)\\n            (extend_node down_left true)\\n            (extend_node down_right true)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Add a border of F around all objects that are not of color X.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (not (color_equals (color_of this) X))\\n        )\\n        (apply\\n            (add_border F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Surround each object with size 1 with objects of color Y.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (size_equals (size_of this) 1)\\n        )\\n        (apply\\n            (insert 0 top_left source)\\n            (update_color Y)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Create a 3x3 square around each object that extends up to the border of the grid.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (extend_node down true)\\n            (extend_node right true)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Extend all objects to the left, without overlapping.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (extend_node left false)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor a 3x3 grid around each object in the grid, except for objects already present.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n            (apply\\n                (fill_rectangle Y false)\\n           )\\n    ))\"\n}",
    "{\n    \"nl_description\": \"Add a border of color Y to the objects and color any neighboring cells to the object with the same color as that object.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (add_border Y)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (neighbor_of this other)\\n        )\\n        (apply\\n            (update_color (color_of other))\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor the objects of color green to color F, and recolor all cyan and red objects to yellow.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) G)\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (or\\n                (color_equals (color_of this) C)\\n                (color_equals (color_of this) R)\\n            )\\n        )\\n        (apply\\n            (update_color Y)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Extend all objects or sets of size 1, without overlapping.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (size_equals (size_of this) 1)\\n        )\\n        (apply\\n            (extend_node up false)\\n            (extend_node down false)\\n            (extend_node left false)\\n            (extend_node right false)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Create a border around each object\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (add_border F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Add a border to all objects except those colored O with color F.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (not (color_equals (color_of this) O))\\n        )\\n        (apply\\n            (add_border F)\\n        )\\n    )\\n)\"\n}"
]