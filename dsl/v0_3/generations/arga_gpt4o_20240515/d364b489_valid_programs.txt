(do
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) B)
        )
        (apply
            (move_node up)
            (update_color A)
            (move_node right)
            (update_color B)
            (move_node down)
            (update_color F)
            (move_node left)
            (update_color C)
            (move_node down)
            (update_color R)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter)
        (apply
            (move_node up_left)
            (update_color R)
            (move_node up_left)
            (update_color A)
            (move_node up_left)
            (update_color F)
            (move_node up_left)
            (update_color C)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) B)
        )
        (apply
            (move_node up)
            (update_color A)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) A)
        )
        (apply
            (move_node right)
            (update_color B)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) B)
        )
        (apply
            (move_node down)
            (update_color F)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) F)
        )
        (apply
            (move_node left)
            (update_color O)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) B)
        )
        (apply
            (move_node down)
            (update_color C)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) C)
        )
        (apply
            (move_node left)
            (update_color O)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) B)
        )
        (apply
            (move_node up)
            (update_color R)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) R)
        )
        (apply
            (move_node left)
            (update_color O)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color R)
            (update_color A)
            (update_color B)
            (update_color F)
            (update_color C)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) B)
        )
        (apply
            (update_color A)
            (move_node right)
        )
    )
    (rule
        (vars (this))
        (filter
            (and (color_equals (color_of this) B) (neighbor_of this other))
        )
        (apply
            (update_color F)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) A)
        )
        (apply
            (update_color R)
        )
    )
    (rule
        (vars (this))
        (filter
            (and (color_equals (color_of this) F) (neighbor_of this other))
        )
        (apply
            (update_color B)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) R)
        )
        (apply
            (update_color C)
        )
    )
    (rule
        (vars (this))
        (filter
            (and (color_equals (color_of this) C) (neighbor_of this other))
        )
        (apply
            (update_color B)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (and
                (color_equals (color_of this) B)
                (size_equals (size_of this) 1)
            )
        )
        (apply
            (update_color A)
        )
    )
    (rule
        (vars (this))
        (filter
            (and
                (color_equals (color_of this) B)
                (size_equals (size_of this) 1)
            )
        )
        (apply
            (update_color F)
        )
    )
    (rule
        (vars (this))
        (filter
            (and
                (color_equals (color_of this) B)
                (size_equals (size_of this) 1)
            )
        )
        (apply
            (update_color C)
        )
    )
    (rule
        (vars (this))
        (filter
            (and
                (color_equals (color_of this) B)
                (size_equals (size_of this) 1)
            )
        )
        (apply
            (update_color R)
        )
    )
)


(do
    (rule
        (vars (this))
        (filter (color_equals (color_of this) B))
        (apply
            (update_color B)
        )
    )
    (rule
        (vars (this))
        (filter (color_equals (color_of this) C))
        (apply
            (update_color C)
        )
    )
    (rule
        (vars (this))
        (filter (color_equals (color_of this) A))
        (apply
            (update_color A)
        )
    )
    (rule
        (vars (this))
        (filter (color_equals (color_of this) R))
        (apply
            (update_color R)
        )
    )
    (rule
        (vars (this))
        (filter (color_equals (color_of this) F))
        (apply
            (update_color F)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) B)
        )
        (apply
            (update_color A)
            (update_color C)
            (update_color R)
            (update_color F)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) B)
        )
        (apply
            (update_color R)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) R)
        )
        (apply
            (update_color A)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) A)
        )
        (apply
            (update_color F)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) F)
        )
        (apply
            (update_color C)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) C)
        )
        (apply
            (update_color R)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter)
        (apply
            (move_node right)
            (update_color R)
        )
    )
    (rule
        (vars (this))
        (filter)
        (apply
            (move_node right)
            (update_color A)
        )
    )
    (rule
        (vars (this))
        (filter)
        (apply
            (move_node right)
            (update_color F)
        )
    )
    (rule
        (vars (this))
        (filter)
        (apply
            (move_node right)
            (update_color C)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (and
                (size_equals (size_of this) 1)
                (and
                    (neighbor_of this other)
                    (color_equals (color_of other) B)
                )
            )
        )
        (apply
            (move_node (direction_of other))
            (update_color (color_of this))
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) B)
        )
        (apply
            (update_color R)
            (insert 1 top source)
            (insert 2 bottom source)
            (insert 3 left source)
            (insert 4 right source)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color R)
            (update_color A)
            (update_color B)
            (update_color F)
            (update_color C)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter (not (color_equals (color_of this) O)))
        (apply
            (update_color A)
            (update_color B)
            (update_color F)
            (update_color R)
            (update_color C)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color R)
        )
    )
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color A)
        )
    )
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color B)
        )
    )
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color F)
        )
    )
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color C)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) B)
        )
        (apply
            (update_color R)
            (insert 1 top_left source)
            (insert 2 top source)
            (insert 3 top_right source)
            (insert 4 right source)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) B)
        )
        (apply
            (update_color R)
            (insert 1 top_left source)
            (update_color A)
            (insert 2 bottom_left source)
            (update_color F)
            (insert 3 top_right source)
            (update_color C)
            (insert 4 bottom_right source)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color A)
            (update_color B)
            (update_color C)
            (update_color F)
            (update_color R)
            (update_color O)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (size_equals (size_of this) 1)
        )
        (apply
            (update_color R)
            (update_color A)
            (update_color F)
            (update_color C)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter)
        (apply
            (move_node (direction_of other))
            (update_color A)
            (update_color B)
            (update_color C)
            (update_color F)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color A)
        )
    )
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color B)
        )
    )
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color C)
        )
    )
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color F)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color R)
            (update_color A)
            (update_color F)
            (update_color C)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (size_equals (size_of this) 1)
        )
        (apply
            (update_color A)
        )
    )
    (rule
        (vars (this))
        (filter
            (and
                (color_equals (color_of this) A)
                (neighbor_of this other)
            )
        )
        (apply
            (update_color B)
        )
    )
    (rule
        (vars (this))
        (filter
            (and
                (color_equals (color_of this) B)
                (neighbor_of this other)
            )
        )
        (apply
            (update_color C)
        )
    )
    (rule
        (vars (this))
        (filter
            (and
                (color_equals (color_of this) C)
                (neighbor_of this other)
            )
        )
        (apply
            (update_color F)
        )
    )
    (rule
        (vars (this))
        (filter
            (and
                (color_equals (color_of this) F)
                (neighbor_of this other)
            )
        )
        (apply
            (update_color R)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) B)
        )
        (apply
            (update_color R)
            (update_color A)
            (update_color F)
            (update_color C)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color A)
            (update_color B)
            (update_color C)
            (update_color F)
            (update_color O)
            (update_color R)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (color_equals (color_of this) B)
        )
        (apply
            (insert 1 top_left source)
            (insert 2 top source)
            (insert 3 top_right source)
            (insert 4 left source)
            (insert 5 right source)
            (insert 6 bottom_left source)
            (insert 7 bottom source)
            (insert 8 bottom_right source)
            (update_color A)
            (update_color B)
            (update_color C)
            (update_color F)
            (update_color R)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) B)
        )
        (apply
            (update_color A)
            (update_color F)
            (update_color C)
            (move_node right)
        )
    )
    (rule
        (vars (this))
        (filter
            (and
                (column_equals (column_of this) 3)
                (column_equals (column_of this) 6)
            )
        )
        (apply
            (add_border R)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (size_equals (size_of this) 1)
        )
        (apply
            (update_color R)
        )
    )
    (rule
        (vars (this other))
        (filter
            (and (color_equals (color_of this) O) (size_equals (size_of this) 1))
        )
        (apply
            (update_color A)
        )
    )
    (rule
        (vars (this other))
        (filter
            (and (color_equals (color_of this) O) (size_equals (size_of this) 1))
        )
        (apply
            (update_color F)
        )
    )
    (rule
        (vars (this other))
        (filter
            (and (color_equals (color_of this) O) (size_equals (size_of this) 1))
        )
        (apply
            (update_color C)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) B)
        )
        (apply
            (move_node right)
            (update_color C)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) C)
        )
        (apply
            (update_color (color_of this))
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) B)
        )
        (apply
            (move_node right)
            (update_color R)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) R)
        )
        (apply
            (update_color A)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) A)
        )
        (apply
            (update_color F)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) F)
        )
        (apply
            (update_color C)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) C)
        )
        (apply
            (update_color R)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter)
        (apply
            (insert 1 top_left source)
            (insert 2 top_left source)
            (insert 3 top_left source)
            (insert 4 top_left source)
            (insert 5 top_left source)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter (color_equals (color_of this) B))
        (apply
            (update_color F)
        )
    )
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color A)
        )
    )
    (rule
        (vars (this))
        (filter (color_equals (color_of this) O))
        (apply
            (update_color R)
        )
    )
    (rule
        (vars (this))
        (filter (color_equals (color_of this) R))
        (apply
            (update_color C)
        )
    )
    (rule
        (vars (this))
        (filter (color_equals (color_of this) A))
        (apply
            (update_color B)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (size_equals (size_of this) 1)
        )
        (apply
            (update_color R)
            (move_node right)
            (update_color A)
            (move_node right)
            (update_color B)
            (move_node right)
            (update_color F)
            (move_node right)
            (update_color C)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter (color_equals (color_of this) B))
        (apply (update_color F))
    )
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color Y)
            (update_color R)
            (update_color C)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (color_equals (color_of this) B)
        )
        (apply
            (update_color R)
        )
    )
    (rule
        (vars (this other))
        (filter
            (color_equals (color_of this) R)
        )
        (apply
            (insert 1 top_left source)
            (insert 1 top source)
            (insert 1 top_right source)
            (insert 1 right source)
            (insert 1 bottom_right source)
            (insert 1 bottom source)
            (insert 1 bottom_left source)
            (insert 1 left source)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color R)
            (update_color A)
            (update_color F)
            (update_color C)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) B)
        )
        (apply
            (update_color A)
            (update_color F)
            (update_color C)
            (update_color R)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter (neighbor_of this other))
        (apply
            (update_color (color_of other))
            (move_node (direction_of other))
        )
    )
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color A)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color R)
            (update_color A)
            (update_color B)
            (update_color F)
            (update_color O)
            (update_color C)
            (update_color R)
            (update_color A)
            (update_color B)
            (update_color F)
            (update_color O)
            (update_color C)
            (update_color R)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color R)
            (update_color A)
            (update_color B)
            (update_color C)
            (update_color F)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (neighbor_of this other)
        )
        (apply
            (update_color R)
            (move_node right)
            (update_color A)
            (move_node left)
            (move_node down)
            (update_color F)
            (move_node up)
            (move_node left)
            (update_color C)
            (move_node right)
            (move_node right)
            (update_color C)
            (move_node left)
            (move_node down)
            (move_node down)
            (update_color C)
            (move_node up)
            (update_color R)
            (move_node left)
            (update_color A)
            (move_node right)
            (move_node up)
            (update_color F)
            (move_node down)
            (move_node down)
            (update_color A)
            (move_node up)
            (update_color R)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) B)
        )
        (apply
            (add_border R)
            (update_color A)
            (add_border F)
            (update_color C)
            (add_border O)
            (update_color Y)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) B)
        )
        (apply
            (move_node left)
            (update_color A)
            (update_color C)
            (update_color F)
            (update_color R)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color R)
        )
    )
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color A)
        )
    )
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color F)
        )
    )
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color C)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter)
        (apply
            (update_color R)
            (update_color A)
            (update_color F)
            (update_color C)
            (update_color B)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color R)
        )
    )
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color A)
        )
    )
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color B)
        )
    )
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color F)
        )
    )
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color C)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter (color_equals (color_of this) B))
        (apply
            (insert 1 top_left source)
            (insert 2 top_right source)
            (insert 3 bottom_right source)
            (insert 4 bottom_left source)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color R)
            (update_color A)
            (update_color F)
            (update_color C)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter (color_equals (color_of this) B))
        (apply
            (update_color R)
            (move_node up)
        )
    )
    (rule
        (vars (this))
        (filter (color_equals (color_of this) B))
        (apply
            (update_color A)
            (move_node left)
        )
    )
    (rule
        (vars (this))
        (filter (color_equals (color_of this) Y))
        (apply
            (update_color F)
            (move_node right)
        )
    )
    (rule
        (vars (this))
        (filter (color_equals (color_of this) G))
        (apply
            (update_color C)
            (move_node down)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color A)
            (update_color B)
            (update_color C)
            (update_color F)
            (update_color R)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter (color_equals (color_of this) B))
        (apply (update_color R))
    )
    (rule
        (vars (this))
        (filter (color_equals (color_of this) R))
        (apply (update_color A))
    )
    (rule
        (vars (this))
        (filter (color_equals (color_of this) A))
        (apply (update_color F))
    )
    (rule
        (vars (this))
        (filter (color_equals (color_of this) F))
        (apply (update_color C))
    )
    (rule
        (vars (this))
        (filter (color_equals (color_of this) C))
        (apply (update_color B))
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (and
                (color_equals (color_of this) O)
                (neighbor_of this other)
            )
        )
        (apply
            (update_color R)
            (update_color A)
            (update_color F)
            (update_color C)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color R)
        )
    )
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color A)
            (update_color B)
            (update_color F)
            (update_color C)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) B)
        )
        (apply
            (move_node right)
            (update_color A)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) O)
        )
        (apply
            (update_color B)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) O)
        )
        (apply
            (update_color C)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) O)
        )
        (apply
            (update_color F)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) O)
        )
        (apply
            (update_color R)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter (color_equals (color_of this) B))
        (apply
            (update_color A)
        )
    )
    (rule
        (vars (this))
        (filter (color_equals (color_of this) A))
        (apply
            (move_node down)
        )
    )
    (rule
        (vars (this))
        (filter (color_equals (color_of this) A))
        (apply
            (update_color F)
        )
    )
    (rule
        (vars (this))
        (filter (color_equals (color_of this) F))
        (apply
            (move_node right)
        )
    )
    (rule
        (vars (this))
        (filter (color_equals (color_of this) F))
        (apply
            (update_color R)
        )
    )
    (rule
        (vars (this))
        (filter (color_equals (color_of this) R))
        (apply
            (move_node up_left)
        )
    )
    (rule
        (vars (this))
        (filter (color_equals (color_of this) R))
        (apply
            (update_color C)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (and
                (size_equals (size_of this) 1)
                (and
                    (neighbor_of this other)
                    (size_equals (size_of other) 1)
                )
            )
        )
        (apply
            (update_color R)
        )
    )
    (rule
        (vars (this other))
        (filter
            (and
                (size_equals (size_of this) 1)
                (and
                    (neighbor_of this other)
                    (size_equals (size_of other) 1)
                )
            )
        )
        (apply
            (update_color A)
        )
    )
    (rule
        (vars (this other))
        (filter
            (and
                (size_equals (size_of this) 1)
                (and
                    (neighbor_of this other)
                    (size_equals (size_of other) 1)
                )
            )
        )
        (apply
            (update_color B)
        )
    )
    (rule
        (vars (this other))
        (filter
            (and
                (size_equals (size_of this) 1)
                (and
                    (neighbor_of this other)
                    (size_equals (size_of other) 1)
                )
            )
        )
        (apply
            (update_color F)
        )
    )
    (rule
        (vars (this other))
        (filter
            (and
                (size_equals (size_of this) 1)
                (and
                    (neighbor_of this other)
                    (size_equals (size_of other) 1)
                )
            )
        )
        (apply
            (update_color C)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color R)
            (update_color A)
            (update_color B)
            (update_color F)
            (update_color C)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color Y)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter (color_equals (color_of this) B))
        (apply
            (move_node up)
            (update_color R)
        )
    )
    (rule
        (vars (this other))
        (filter (color_equals (color_of this) B))
        (apply
            (move_node down)
            (update_color A)
        )
    )
    (rule
        (vars (this other))
        (filter (color_equals (color_of this) B))
        (apply
            (move_node left)
            (update_color F)
        )
    )
    (rule
        (vars (this other))
        (filter (color_equals (color_of this) B))
        (apply
            (move_node right)
            (update_color C)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) B)
        )
        (apply
            (update_color R)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) O)
        )
        (apply
            (update_color A)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) O)
        )
        (apply
            (update_color F)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) O)
        )
        (apply
            (update_color C)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (color_equals (color_of this) B)
        )
        (apply
            (insert 0 bottom source)
            (update_color G)
            (insert 0 bottom middle)
            (update_color C)
         )
    )
)

(do
    (rule
        (vars (this other))
        (filter)
        (apply
            (update_color R)
        )
    )
    (rule
        (vars (this other))
        (filter)
        (apply
            (update_color A)
        )
    )
    (rule
        (vars (this other))
        (filter)
        (apply
            (update_color F)
        )
    )
    (rule
        (vars (this other))
        (filter)
        (apply
            (update_color C)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (and
                (size_equals (size_of this) 1)
                (neighbor_of this other)
            )
        )
        (apply
            (move_node (direction_of other))
            (update_color A)
        )
    )
    (rule
        (vars (this))
        (filter (size_equals (size_of this) 1))
        (apply
            (update_color B)
            (move_node right)
            (update_color C)
            (move_node down)
            (update_color F)
            (move_node left)
            (update_color R)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color R)
            (move_node down)
        )
    )
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color A)
            (move_node down_right)
        )
    )
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color B)
            (move_node down_left)
        )
    )
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color C)
            (move_node right)
        )
    )
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color F)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) B)
        )
        (apply
            (insert 0 top_left source)
            (update_color R)
            (insert 1 top_right target)
            (update_color A)
            (insert 2 bottom source)
            (update_color F)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter)
        (apply
            (insert 1 top_left source)
            (update_color A)
            (insert 2 top_left source)
            (update_color B)
            (insert 3 top_left source)
            (update_color F)
        )
    )
)