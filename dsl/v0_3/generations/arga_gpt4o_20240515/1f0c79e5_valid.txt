[
    "{\n\t\"nl_description\": \"Extend all objects of color different than O, in all directions, without overlapping.\",\n\t\"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (not (color_equals (color_of this) O))\\n        )\\n        (apply\\n            (extend_node up false)\\n            (extend_node down false)\\n            (extend_node left false)\\n            (extend_node right false)\\n            (extend_node up_left false)\\n            (extend_node up_right false)\\n            (extend_node down_left false)\\n            (extend_node down_right false)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Extend all objects by filling the hollow rectangles with the color of their shapes until the grid edges.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (fill_rectangle (color_of this) true)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Extend objects of color adjacent to another object of different color, toward the direction opposite to the neighbor.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (not (color_equals (color_of this) (color_of other)))\\n                (neighbor_of this other)\\n            )\\n        )\\n        (apply\\n            (extend_node (direction_of other) false)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of color that is different than O, towards top left corner.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (not (color_equals (color_of this) O))\\n        )\\n        (apply\\n            (move_node up_left)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Extend the objects of color adjacent to an object of color in the direction of the object of color until they hit another object, recoloring them with the color of the object.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (neighbor_of this other)\\n        )\\n        (apply\\n            (extend_node (direction_of other) true)\\n            (update_color (color_of other))\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Extend all objects horizontally to the right and recolor them based on their current color without overlapping.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (extend_node right false)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Extend all objects towards the upper left corner, without overlapping.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (extend_node up_left false)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Extend all objects towards the top left, without overlapping.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (extend_node up_left false)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Extend all objects of color R in all directions\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) R)\\n        )\\n        (apply\\n            (extend_node up true)\\n            (extend_node down true)\\n            (extend_node left true)\\n            (extend_node right true)\\n            (extend_node up_left true)\\n            (extend_node up_right true)\\n            (extend_node down_left true)\\n            (extend_node down_right true)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Select all objects that are neighbors to objects with a non-black color and extend them without overlap.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (not (color_equals (color_of other) O))\\n                (neighbor_of this other)\\n            )\\n        )\\n        (apply\\n            (extend_node (direction_of other) false)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Extend all objects toward the grid edge, without overlapping.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (extend_node (direction_of this) false)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Fill rectangles around all occurrences of the symbol Y, G, F, or A with their respective colors\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (or\\n                (color_equals (color_of this) Y)\\n                (or\\n                    (color_equals (color_of this) G)\\n                    (or\\n                        (color_equals (color_of this) F)\\n                        (color_equals (color_of this) A)\\n                    )\\n                )\\n            )\\n        )\\n        (apply\\n            (extend_node up_right false)\\n            (extend_node up false)\\n            (extend_node right false)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Extend all objects until the top-left corner and recolor them to a specific color based on the input grid.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) Y)\\n        )\\n        (apply\\n            (extend_node up_left false)\\n            (update_color Y)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) G)\\n        )\\n        (apply\\n            (extend_node down_left false)\\n            (update_color G)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) F)\\n        )\\n        (apply\\n            (extend_node up_left false)\\n            (update_color F)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) R)\\n        )\\n        (apply\\n            (extend_node up_left false)\\n            (update_color A)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of color R one step up, and then extend them to the right, without overlapping, using their own color.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) R)\\n        )\\n        (apply\\n            (move_node up)\\n            (extend_node right false)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Extend all objects one step to the top-right direction with overlapping.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (extend_node up_right true)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Extend vertically all objects of color Y that are neighbors of an object of color R.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) Y)\\n                (and\\n                    (neighbor_of this other)\\n                    (color_equals (color_of other) R)\\n                )\\n            )\\n        )\\n        (apply\\n            (extend_node up false)\\n            (extend_node down false)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Extend the objects in the diagonal to the top left.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (neighbor_of this other)\\n        )\\n        (apply\\n            (extend_node up_left false)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Extend the line of the colored objects towards the zero degree angle.\",\n    \"code\": \"(do\\n  (rule\\n    (vars (this))\\n    (filter)\\n    (apply\\n      (extend_node up_right false)\\n    )\\n  )\\n)\"\n}",
    "{\n    \"nl_description\": \"Extend all objects diagonally towards the center\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (extend_node down_right false)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Extend all objects towards the object of a different color until they form a diagonal line.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (neighbor_of this other)\\n                (not (color_equals (color_of this)(color_of other)))\\n            )\\n        )\\n        (apply\\n            (extend_node (direction_of other) true)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Extend all objects of any color toward upper-left direction until they touch other objects or the grid boundary.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (extend_node up_left false)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Extend all objects of color Y, G, F, and A to the left edge until they hit another object or the grid boundary, recoloring the objects to their respective colors.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (or\\n                (or\\n                    (color_equals (color_of this) Y)\\n                    (color_equals (color_of this) G)\\n                )\\n                (or\\n                    (color_equals (color_of this) F)\\n                    (color_equals (color_of this) A)\\n                )\\n            )\\n        )\\n        (apply\\n            (extend_node left false)\\n            (update_color (color_of this))\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Extend objects towards the object of the same size until they hit another object.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (neighbor_of this other)\\n                (size_equals (size_of this) (size_of other))\\n            )\\n        )\\n        (apply\\n            (extend_node (direction_of other) false)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Extend all the objects toward right, without overlapping.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (extend_node right false)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Flood fill from the upper-left corner of the objects with size 3 by column.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (neighbor_of this other)\\n                (size_equals (size_of other) 3)\\n            )\\n        )\\n        (apply\\n            (extend_node left true)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Extend all objects by filling rows and columns from the object's position. Diagonal paths are not considered.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (extend_node right true)\\n            (extend_node down true)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Extend all objects of color different than O in the direction of the object with the same color or other objects if it becomes neighbors.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (not (color_equals (color_of this) O))\\n                (neighbor_of this other)\\n            )\\n        )\\n        (apply\\n            (extend_node (direction_of other) true)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Extend all objects up to their maximum size without overlapping.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (extend_node right false)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Fill rectangles around non-black objects.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (not (color_equals (color_of this) O))\\n        )\\n        (apply\\n            (fill_rectangle (color_of this) false)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Extend objects except X objects from the grid center point towards the edge.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter (not (color_equals (color_of this) X)))\\n        (apply\\n            (extend_node right false)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Extend all objects that are neighbors of objects with color different from 'O', towards the maximum size objects of color corresponding to their neighbors.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) R)\\n                (neighbor_of this other)\\n            )\\n        )\\n        (apply\\n            (extend_node (direction_of other) true)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Extend nodes of size greater than 1 in a shape or L-shape to the bottom right (down_right) with overlapping.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (or\\n              (height_equals (height_of this) 2)\\n              (width_equals (width_of this) 2)\\n            )\\n        )\\n        (apply\\n            (extend_node down_right true)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Extend all the objects towards the right without overlapping.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (extend_node right false)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Extend all objects to color Y towards the right side of max overlap.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter \\n            (size_equals (size_of this) 3)\\n        )\\n        (apply\\n            (extend_node right true)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Extend all objects that have color R in all directions to form a larger connected shape, with overlapping allowed.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) R)\\n        )\\n        (apply\\n            (extend_node up_left true)\\n            (extend_node up true)\\n            (extend_node up_right true)\\n            (extend_node left true)\\n            (extend_node right true)\\n            (extend_node down_left true)\\n            (extend_node down true)\\n            (extend_node down_right true)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects to the top-left diagonal and recolor them with their initial color.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter)\\n        (apply\\n            (move_node up_left)\\n            (update_color (color_of this))\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Extend all objects of color different than O toward the right, without overlapping.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (not (color_equals (color_of this) O))\\n        )\\n        (apply\\n            (extend_node right false)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Flood fill each object with its color\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (extend_node down_right false)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Extend all objects of size 2 in all directions without overlapping.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (size_equals (size_of this) 2)\\n        )\\n        (apply\\n            (extend_node up true)\\n            (extend_node down true)\\n            (extend_node left true)\\n            (extend_node right true)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Extend all objects by filling them in all diagonal directions and changing them to a certain color.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (extend_node down_right false)\\n            (extend_node down_left false)\\n            (extend_node up_right false)\\n            (extend_node up_left false)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Extend the color of a diagonal neighbor object to fill the diagonal with that object's color.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (neighbor_of this other)\\n        )\\n        (apply\\n            (extend_node (direction_of other) true)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Fill the entire diagonal regions that contain specific colored objects in each grid, with the color of those specific objects by extending them.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (extend_node down_left false)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Extend the objects of color Y, G, F, or A towards the right without overlapping.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (or\\n                (or\\n                    (color_equals (color_of this) Y)\\n                    (color_equals (color_of this) G)\\n                )\\n                (or\\n                    (color_equals (color_of this) F)\\n                    (color_equals (color_of this) A)\\n                )\\n            )\\n        )\\n        (apply\\n            (extend_node right false)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Extend all objects of size 2 toward the right, with overlap.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (size_equals (size_of this) 2)\\n        )\\n        (apply\\n            (extend_node right true)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of color different than Y, toward the object of color Y, if they are neighbors of it.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (not (color_equals (color_of this) Y))\\n                (and\\n                    (neighbor_of this other)\\n                    (color_equals (color_of other) Y)\\n                )\\n            )\\n        )\\n        (apply\\n            (move_node_max (direction_of other))\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Extend all the objects of size 2 toward right, without overlapping, and then recolor them to color A.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (size_equals (size_of this) 2)\\n        )\\n        (apply\\n            (extend_node right false)\\n            (update_color A)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Extend all the objects of size 2 towards right and repaint them with their colors.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (size_equals (size_of this) 2)\\n        )\\n        (apply\\n            (extend_node right false)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Extend all objects of different colors until they meet with another object.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (not (color_equals (color_of this) (color_of other)))\\n                (neighbor_of this other)\\n            )\\n        )\\n        (apply\\n            (extend_node (direction_of other) false)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Extend the objects of color different from O in the direction of size increment.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (not (color_equals (color_of this) O))\\n                (neighbor_of this other)\\n            )\\n        )\\n        (apply\\n            (extend_node (direction_of other) false)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Extend all objects of color other than O in a direction forming a decreasing diagonal pattern without overlapping, and recolor them to match one object in the grid.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (not (color_equals (color_of this) O))\\n        )\\n        (apply\\n            (extend_node down_right false)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects that are neighbors of R towards it and change their color.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (neighbor_of this other)\\n                (color_equals (color_of other) R)\\n            )\\n        )\\n        (apply\\n            (move_node_max (direction_of other))\\n            (update_color (color_of other))\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Expand all the objects of secondary colors (i.e., colors different from primary colors) in all directions until the edges of the grid.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) Y)\\n        )\\n        (apply\\n            (extend_node up false)\\n            (extend_node down false)\\n            (extend_node left false)\\n            (extend_node right false)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) G)\\n        )\\n        (apply\\n            (extend_node up false)\\n            (extend_node down false)\\n            (extend_node left false)\\n            (extend_node right false)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) F)\\n        )\\n        (apply\\n            (extend_node up false)\\n            (extend_node down false)\\n            (extend_node left false)\\n            (extend_node right false)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) A)\\n        )\\n        (apply\\n            (extend_node up false)\\n            (extend_node down false)\\n            (extend_node left false)\\n            (extend_node right false)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Extend the object by leaving a trail of its original color towards the object of different color.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (not (color_equals (color_of this) (color_of other)))\\n                (neighbor_of this other)\\n            )\\n        )\\n        (apply\\n            (extend_node (direction_of other) false)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Extend all objects toward the upper left corner and recolor them with their original color.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (extend_node up_left false)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Extend all objects to the right, without overlapping, to form a diagonal.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (extend_node right false)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Extend each object towards the maximum size object until the edge of the grid.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (neighbor_of this other)\\n        )\\n        (apply\\n            (extend_node (direction_of other) false)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Extend all objects of color different than O in the grid.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (not (color_equals (color_of this) O))\\n        )\\n        (apply\\n            (extend_node down_right false)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Extend all the objects toward the object of maximum size, without overlapping.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (neighbor_of this other)\\n        )\\n        (apply\\n            (extend_node (direction_of other) false)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Extend all objects towards the object of color different from their own color, without overlapping.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (neighbor_of this other)\\n                (not (color_equals (color_of this) (color_of other)))\\n            )\\n        )\\n        (apply\\n            (extend_node (direction_of other) false)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Extend objects of size 2 to the left without overlapping.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (size_equals (size_of this) 2)\\n        )\\n        (apply\\n            (extend_node left false)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Extend all objects of color toward the top border of the grid.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (extend_node up true)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Extend all the objects towards the edge of the grid.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (extend_node right true)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Extend all objects towards right-side columns until the edge of the grid with overlapping, and recolor them to the color A.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (extend_node right true)\\n            (update_color A)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Extend all the objects starting from the top left cell and going in both right and down directions, without overlapping.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (neighbor_of this other)\\n        )\\n        (apply\\n            (extend_node right false)\\n            (extend_node down false)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Extend all objects towards the top-left direction.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (extend_node up_left false)\\n        )\\n    )\\n)\"\n}"
]