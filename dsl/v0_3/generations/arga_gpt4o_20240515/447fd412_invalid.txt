[
    {
        "response": "{\n    \"nl_description\": \"Extend all objects towards the bottom without overlapping, if they meet a red object.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) B)\\n                (neighbor_of this other)\\n                (color_equals (color_of other) R)\\n            )\\n        )\\n        (apply\\n            (extend_node down false)\\n        )\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches '(' in the current parser context, at line 8 col 17\n\n                (color_equals (color_of other) R)\n                ^\nExpected one of: \n\t* RPAR\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Move all objects of size 4 to the bottom, filling 2 horizontal lines, starting with additional bottom layers.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (or\\n                (size_equals (size_of this) 4)\\n            )\\n        )\\n        (apply\\n            (move_node_max down)\\n            (extend_node down false)\\n        )\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches ')' in the current parser context, at line 7 col 13\n\n            )\n            ^\nExpected one of: \n\t* LPAR\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Extend all B objects until they hit another object, without overlapping.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (size_equals (size_of this) B)\\n        )\\n        (apply\\n            (extend_node down false)\\n        )    \\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches 'B' in the current parser context, at line 5 col 41\n\n            (size_equals (size_of this) B)\n                                        ^\nExpected one of: \n\t* LPAR\n\t* SIZE\n"
    },
    {
        "response": "{\n    \"nl_description\": \"For rows located at the bottom half of the grid, extend blue rectangles from the columns of the previous row's blue objects to all remaining columns up to the next red object.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (color_equals (color_of this) B)\\n                (neighbor_of this other))))\\n        (apply\\n            (extend_node_down false)\\n ))))\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches ')' in the current parser context, at line 7 col 43\n\n              (neighbor_of this other))))\n                                        ^\nExpected one of: \n\t* LPAR\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Extend all the horizontal line segments to the edges.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (neighbor_of this other)\\n                (or\\n                    (and (column_equals (column_of this) (column_of other)) (width_equals (width_of this) 1) (width_equals (width_of other) min))\\n                    (and (width_equals (width_of this) 1) (not (column_equals (column_of this) (column_of other))))\\n                )\\n            )\\n        )\\n        (apply\\n            (move_node right)\\n            (extend_node right false)\\n        )\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches '(' in the current parser context, at line 8 col 110\n\nther)) (width_equals (width_of this) 1) (width_equals (width_of other) min))\n                                        ^\nExpected one of: \n\t* RPAR\n"
    }
]