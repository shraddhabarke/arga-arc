[
    "{\n    \"nl_description\": \"Recolor all objects to color of neighbor object X\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (neighbor_of this other)\\n        )\\n        (apply\\n            (update_color (color_of other))\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor the objects and fill the grid.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color A)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects of size 1 to a given color, except those that are already colored X.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (size_equals (size_of this) 1)\\n                (not (color_equals (color_of this) X))\\n            )\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (size_equals (size_of this) 1)\\n                (color_equals (color_of this) R)\\n            )\\n        )\\n        (apply\\n            (update_color A)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (size_equals (size_of this) 1)\\n                (color_equals (color_of this) G)\\n            )\\n        )\\n        (apply\\n            (update_color C)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (size_equals (size_of this) 1)\\n                (color_equals (color_of this) B)\\n            )\\n        )\\n        (apply\\n            (update_color W)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (size_equals (size_of this) 1)\\n                (color_equals (color_of this) Y)\\n            )\\n        )\\n        (apply\\n            (update_color A)\\n        )\\n    )\\n)\\n\"\n}",
    "{\n    \"nl_description\": \"For all objects in the grid except those with color X, replace them with a 3x3 filled square of varying colors based on their original color.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (not (color_equals (color_of this) X))\\n        )\\n        (apply\\n            (fill_rectangle (color_of this) false)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects of size 1 to color A, recolor all objects of size 3 to color F, and recolor all objects of size 2 to color C.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (size_equals (size_of this) 1)\\n        )\\n        (apply\\n            (update_color A)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (size_equals (size_of this) 3)\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (size_equals (size_of this) 2)\\n        )\\n        (apply\\n            (update_color C)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Replace color of all objects with F in the rows where there is no X, and with A, C, and W respectively in the rows with an X, in columns where an X is present.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (not (color_equals (color_of this) X))\\n                (not (neighbor_of this other))\\n            )\\n        )\\n        (apply\\n            (update_color F)\\n        )    \\n    )\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color A)\\n        )\\n    )    \\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color C)\\n        )\\n    )    \\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color W)\\n        )\\n    )    \\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects, except objects with color X, and then recolor objects if they neighbor the object with color X.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (not (color_equals (color_of this) X))\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (neighbor_of this other)\\n                (color_equals (color_of other) X)\\n            )\\n        )\\n        (apply\\n            (update_color (color_of other))\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Change the color of all objects in the horizontal middle row of the grid. Each object gets a unique, constant replacement color.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (column_equals (column_of this) odd)\\n                (neighbor_of this this)\\n            )\\n        )\\n        (apply\\n            (update_color A)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (column_equals (column_of this) 2)\\n                (neighbor_of this this)\\n            )\\n        )\\n        (apply\\n            (update_color C)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (column_equals (column_of this) 3)\\n                (neighbor_of this this)\\n            )\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all vertical strips of objects to different colors.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter (column_equals (column_of this) 0))\\n        (apply (update_color F))\\n    )\\n    (rule\\n        (vars (this))\\n        (filter (column_equals (column_of this) 1))\\n        (apply (update_color F))\\n    )\\n    (rule\\n        (vars (this))\\n        (filter (column_equals (column_of this) 2))\\n        (apply (update_color F))\\n    )\\n    (rule\\n        (vars (this))\\n        (filter (column_equals (column_of this) 4))\\n        (apply (update_color A))\\n    )\\n    (rule\\n        (vars (this))\\n        (filter (column_equals (column_of this) 5))\\n        (apply (update_color A))\\n    )\\n    (rule\\n        (vars (this))\\n        (filter (column_equals (column_of this) 6))\\n        (apply (update_color A))\\n    )\\n    (rule\\n        (vars (this))\\n        (filter (column_equals (column_of this) 8))\\n        (apply (update_color F))\\n    )\\n    (rule\\n        (vars (this))\\n        (filter (column_equals (column_of this) 9))\\n        (apply (update_color F))\\n    )\\n    (rule\\n        (vars (this))\\n        (filter (column_equals (column_of this) 10))\\n        (apply (update_color F))\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Replace all objects with 3x3 blocks of their respective colors, except for the objects of color X which stay unchanged.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (not (color_equals (color_of this) X))\\n        )\\n        (apply\\n            (fill_rectangle (color_of this) true)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all rows and columns that pass through the object of color X to their corresponding colors in order.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) X)\\n        )\\n        (apply\\n            (fill_rectangle F false)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects in three rows of the input grid.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color A)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all entire rows to their respective colored objects, except X, then replace every O with a random different color and every X remains the same.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (not (color_equals (color_of this) O))\\n        )\\n        (apply\\n            (update_color (color_of this))\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) O)\\n        )\\n        (apply\\n            (update_color (color_of this))\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects except those of color X to a new color, varying for each object.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (not (color_equals (color_of this) X))\\n        )\\n        (apply\\n            (update_color A)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects into the object they are in the same column with.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (column_equals (column_of this) (column_of other))\\n        )\\n        (apply\\n            (update_color (color_of other))\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Extend all objects of size 1 to size 3, and recolor each of them according to their initial positions.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (size_equals (size_of this) 1)\\n        )\\n        (apply\\n            (extend_node down true)\\n            (update_color A)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (size_equals (size_of this) 3)\\n                (neighbor_of this other)\\n            )\\n        )\\n        (apply\\n            (update_color (color_of other))\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects except X with a color gradient, then fill the middle region with a fixed color.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter (not (color_equals (color_of this) X)))\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (neighbor_of this other)\\n                (color_equals (color_of other) X)\\n            )\\n        )\\n        (apply\\n            (update_color A)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Change all colors to horizontal bands of colors where band below `X` row gets the color 'F', band above `X` row gets 'A' and color 'C' excluding 'X'.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter (not (color_equals (color_of this) X)))\\n        (apply (update_color F))\\n    )\\n    (rule\\n        (vars (this))\\n        (filter (neighbor_of this other))\\n        (apply (update_color A) (move_node down))\\n    )\\n    (rule\\n        (vars (this))\\n        (filter (neighbor_of this other))\\n        (apply (update_color C) (move_node up))\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Transform all 1x1 objects to 3x3 squares, update their color to match that of the original object centered in the new square, preserving the columns of 'X'.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (size_equals (size_of this) 1)\\n        )\\n        (apply\\n            (fill_rectangle (color_of this) true)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Change the color of all objects to different specified colors while ignoring objects of color X.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (not (color_equals (color_of this) X))\\n        )\\n        (apply\\n            (update_color (color_of this))\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Change the color of all objects to the respective colors specified in the output\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color A)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color C)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color W)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Change all colors of objects to progressively lighter color tones.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color A)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color C)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color W)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects in the grid to match certain patterns\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color C)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Fill all rows between the first and last rows with an intermediate color between the initial colors and 'X', from left to right, starting from 'F' at the leftmost cell.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (fill_rectangle F false)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects to an incremented palette, keeping the color X static.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Fill all grids with three different colors: first row and columns with the first color, second row and columns with the second color, and the remaining part with the third color, except where there is X.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n        )\\n        (apply\\n            (fill_rectangle C false)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor rows of objects as follows: first row to color F, second row to color A, third row to color F; and in grid pairs with more than 3 rows, repeat this pattern.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply (update_color F))\\n    )\\n    (rule\\n        (vars (this))\\n        (filter (neighbor_of this this))\\n        (apply\\n            (move_node down)\\n            (update_color A)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter (neighbor_of this this))\\n        (apply\\n            (move_node down)\\n            (update_color F)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter (neighbor_of this this))\\n        (apply\\n            (move_node down)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Fill with color F the first row of cells, then with color A the second row of cells and so on for each different row in the grid. Ignore the X columns.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (fill_rectangle F false)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color A)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color C)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects to alternate colors in each grid row.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color A)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (not (color_equals (color_of other) O))\\n                (and\\n                    (neighbor_of this other)\\n                    (size_equals (size_of other) 1)\\n                )\\n            )\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) A)\\n        )\\n        (apply\\n            (update_color C)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects to color F after moving them to the top row, except objects of color X\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (not (color_equals (color_of this) X))\\n        )\\n        (apply\\n            (move_node up)\\n            (move_node up)\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor the objects of size 1 to the row colors, ensuring to maintain the border X intact.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (size_equals (size_of this) 1)\\n                (not (color_equals (color_of this) X))\\n            )\\n        )\\n        (apply\\n            (update_color (color_of other))\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects to specific colors based on their original colors, preserving color X and forming a pattern.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (color_equals (color_of this) B)\\n        )\\n        (apply\\n            (update_color W)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (color_equals (color_of this) R)\\n        )\\n        (apply\\n            (update_color A)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (color_equals (color_of this) G)\\n        )\\n        (apply\\n            (update_color C)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (color_equals (color_of this) Y)\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Transform all the objects of size 1 to form a solid 3x3 block of different colors around each X column.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (size_equals (size_of this) 1)\\n        )\\n        (apply\\n            (move_node right)\\n            (extend_node down true)\\n            (extend_node left true)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all cells to color of the nearest non-background color on the same row.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) O)\\n                (neighbor_of this other)\\n            )\\n        )\\n        (apply\\n            (update_color (color_of other))\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Transform all neighboring non-X objects into a 3x3 grid following a specific pattern.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (not (color_equals (color_of this) X))\\n                (neighbor_of this other)\\n            )\\n        )\\n        (apply\\n            (update_color C)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Transform all colored objects (not X) into 3x3 squares of the same color.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (not (color_equals (color_of this) X))\\n        )\\n        (apply\\n            (fill_rectangle (color_of this) true)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects first to A, second to C, third to F, fourth to W in sequence\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color A)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color C)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color W)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects other than X with a different color for each row.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (not (color_equals (color_of this) X))\\n        )\\n        (apply\\n            (update_color (color_of this))\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects to different colors based on their original color.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) B)\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) R)\\n        )\\n        (apply\\n            (update_color A)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) G)\\n        )\\n        (apply\\n            (update_color C)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) Y)\\n        )\\n        (apply\\n            (update_color W)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects to different colors based on their locations relative to X columns.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) R)\\n        )\\n        (apply\\n            (update_color A)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) G)\\n        )\\n        (apply\\n            (update_color C)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) B)\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) Y)\\n        )\\n        (apply\\n            (update_color W)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"For each row, color all objects the same color except the objects colored X\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (not (color_equals (color_of this) X))\\n                (neighbor_of this other)\\n            )\\n        )\\n        (apply\\n            (update_color (color_of other))\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Transform all objects to size 3 squares where the row the Xs are located remains unchanged and recolor each square to one color only.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter (not (color_equals (color_of this) X)))\\n        (apply (fill_rectangle (color_of this) false)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all segmented objects to unique colors, preserving the X segments as they are.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (not (color_equals (color_of this) X))\\n        )\\n        (apply\\n            (update_color A)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color C)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (not (color_equals (color_of this) X))\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor the first and last rows of the grid, excluding cells that contain 'X'.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (not (color_equals (color_of this) X))\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (not (color_equals (color_of this) X))\\n        )\\n        (apply\\n            (update_color C)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Change the color of all objects to match the objects on the same row to the right of them before a vertical thin object of color 'X'.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (not (color_equals (color_of this) X))\\n                (and\\n                    (neighbor_of this other)\\n                    (and\\n                        (neighbor_of other other)\\n                        (color_equals (color_of other) X)\\n                    )\\n                )\\n            )\\n        )\\n        (apply\\n            (update_color (color_of other))\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all the objects to distinct colors in different rows, except those in column 4 which remain as X.\",\n    \"code\": \"\\n(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color A)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter (column_equals (column_of this) 4))\\n        (apply\\n            (update_color X)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter (neighbor_of this other))\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects surrounded (left and right) by Xs.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (or\\n                (neighbor_of this other)\\n                (neighbor_of other this)\\n            )\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects to match the color of the center object in the grid.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (color_equals (color_of this) (color_of other))\\n        )\\n        (apply\\n            (update_color (color_of other))\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor the objects of size 1 to specific colors, then recolor the remaining objects to a single color.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (size_equals (size_of this) 1)\\n        )\\n        (apply\\n            (update_color A)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (size_equals (size_of this) 1)\\n        )\\n        (apply\\n            (update_color C)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (size_equals (size_of this) 1)\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (not (size_equals (size_of this) 1))\\n                (not (color_equals (color_of this) X))\\n            )\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Fill all cells not occupied by X with a new 3x3 color square centered around the middle cell that is not an X.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (not (color_equals (color_of this) X))\\n        )\\n        (apply\\n            (fill_rectangle (color_of other) false)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor rows with different specific colors, from top to bottom.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (height_equals (height_of this) 1)\\n                (neighbor_of this this)\\n            )\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (height_equals (height_of this) 2)\\n                (neighbor_of this this)\\n            )\\n        )\\n        (apply\\n            (update_color A)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (height_equals (height_of this) 3)\\n                (neighbor_of this this)\\n            )\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Transform row objects such that each row object is recolored to a unique color pattern.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter \\n            (color_equals (color_of this) B)\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter \\n            (color_equals (color_of this) R)\\n        )\\n        (apply\\n            (update_color A)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter \\n            (color_equals (color_of this) G)\\n        )\\n        (apply\\n            (update_color C)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter \\n            (color_equals (color_of this) Y)\\n        )\\n        (apply\\n            (update_color W)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all the objects to different colors sequentially.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter (color_equals (color_of this) O))\\n        (apply (update_color F))\\n    )\\n    (rule\\n        (vars (this))\\n        (filter (color_equals (color_of this) B))\\n        (apply (update_color A))\\n    )\\n    (rule\\n        (vars (this))\\n        (filter (color_equals (color_of this) R))\\n        (apply (update_color A))\\n    )\\n    (rule\\n        (vars (this))\\n        (filter (color_equals (color_of this) G))\\n        (apply (update_color C))\\n    )\\n    (rule\\n        (vars (this))\\n        (filter (color_equals (color_of this) Y))\\n        (apply (update_color W))\\n    )\\n    (rule\\n        (vars (this))\\n        (filter (color_equals (color_of this) W))\\n        (apply (update_color A))\\n    )\\n    (rule\\n        (vars (this))\\n        (filter (color_equals (color_of this) X))\\n        (apply (update_color X))\\n    )\\n    (rule\\n        (vars (this))\\n        (filter (color_equals (color_of this) F))\\n        (apply (update_color C))\\n    )\\n    (rule\\n        (vars (this))\\n        (filter (color_equals (color_of this) C))\\n        (apply (update_color F))\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects that are not X nor neighbors of X to a different color, according to their initial color.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (not (color_equals (color_of this) X))\\n                (not (neighbor_of this other))\\n            )\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color (color_of this))\\n        )    \\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects except those with color X with a new color.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (not (color_equals (color_of this) X))\\n        )\\n        (apply\\n            (update_color (color_of this))\\n        )\\n    )\\n)\"\n}"
]