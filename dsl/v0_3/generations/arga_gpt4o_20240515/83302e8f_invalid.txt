[
    {
        "response": "{\n    \"nl_description\": \"Recolor `G` and `Y` shapes to `C` when they have a neighbor with color `C`.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (or\\n                    (color_equals (color_of this) G)\\n                    (color_equals (color_of this) Y)\\n                )\\n                (neighbor_of this other)\\n                (color_equals (color_of other) C)\\n            )\\n        )\\n        (apply\\n            (update_color C)\\n        )\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches '(' in the current parser context, at line 11 col 17\n\n                (color_equals (color_of other) C)\n                ^\nExpected one of: \n\t* RPAR\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Recolor all objects to G, except the objects overlapping with the objects which have at least 1 neighbor object of a different color in one of the main diagonals.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (not (neighbor_of this other))\\n                (or\\n                    (not (color_equals (color_of this) (color_of other)))\\n                    (and\\n                        (or\\n                            (neighbor_of this other)\\n                            (neighbor_of this other)\\n                        )\\n                        (not (color_equals (color_of this) C))\\n                    )\\n                )\\n            )\\n        )\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n)\\n(rule\\n    (vars (this other))\\n    (filter\\n        (and\\n            (color_equals (color_of this) C)\\n            (or\\n                (neighbor_of this other)\\n                (neighbor_of this other)\\n            )\\n        )\\n    )\\n    (apply\\n        (update_color Y)\\n    )\\n)\\n(rule\\n    (vars (this))\\n    (filter)\\n    (apply\\n        (update_color G)\\n    )\\n)\\n\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches '(' in the current parser context, at line 24 col 1\n\n(rule\n^\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Move all objects of color different than C, B, or W to the neighboring object's position of the same color, and color them either Y or G based on the neighbor's position.\",\n    \"code\": \"(do\\n  (rule\\n    (vars (this other))\\n    (filter\\n      (and\\n        (not (or (color_equals (color_of this) C) (color_equals (color_of this) B) (color_equals (color_of this) W)))\\n        (neighbor_of this other)\\n      )\\n    )\\n    (apply\\n      (move_node (direction_of other))\\n      (update_color\\n        (if (or (column_equals (column_of other) even) (color_equals (color_of other) W)) Y G)\\n      )\\n    )\\n  )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches '(' in the current parser context, at line 6 col 84\n\nis) C) (color_equals (color_of this) B) (color_equals (color_of this) W)))\n                                        ^\nExpected one of: \n\t* RPAR\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Recolor objects in every second row of size greater than 5 towards yellow, and recolor the objects in all other rows to either green or yellow.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and \\n              (size_equals (size_of this) 5)\\n              (and \\n                (neighbor_of this other)\\n                (column_equals (column_of other) even)\\n              )\\n            )\\n        )\\n        (apply \\n            (update_color Y)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (not\\n                (column_equals (column_of this) even)\\n            )\\n        )\\n        (apply\\n            (or \\n                (update_color G)\\n                (update_color Y)\\n            )\\n        )\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches 'o' in the current parser context, at line 25 col 14\n\n            (or \n             ^\nExpected one of: \n\t* TR_FLIP\n\t* TR_ADD_BORDER\n\t* TR_UPDATE_COLOR\n\t* TR_INSERT\n\t* TR_MIRROR\n\t* TR_NOOP\n\t* TR_HOLLOW_RECTANGLE\n\t* TR_EXTEND_NODE\n\t* TR_MOVE_NODE_MAX\n\t* TR_MOVE_NODE\n\t* TR_ROTATE_NODE\n\t* TR_FILL_RECTANGLE\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Move all objects of color different than the boundary color, towards the boundary objects of the same row or column.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (not (color_equals (color_of this) C))\\n                (or\\n                    (and\\n                        (neighbor_of this other)\\n                        (color_equals (color_of other) C)\\n                        (column_equals (column_of this) (column_of other))\\n                    )\\n                    (and\\n                        (neighbor_of this other)\\n                        (color_equals (color_of other) C)\\n                        (size_equals (size_of this) 1)\\n                    )\\n                )\\n            )\\n        )\\n        (apply\\n            (move_node_max (direction_of other))\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (not (color_equals (color_of this) B))\\n                (or\\n                    (and\\n                        (neighbor_of this other)\\n                        (color_equals (color_of other) B)\\n                        (column_equals (column_of this) (column_of other))\\n                    )\\n                    (and\\n                        (neighbor_of this other)\\n                        (color_equals (color_of other) B)\\n                        (size_equals (size_of this) 1)\\n                    )\\n                )\\n            )\\n        )\\n        (apply\\n            (move_node_max (direction_of other))\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (not (color_equals (color_of this) W))\\n                (or\\n                    (and\\n                        (neighbor_of this other)\\n                        (color_equals (color_of other) W)\\n                        (column_equals (column_of this) (column_of other))\\n                    )\\n                    (and\\n                        (neighbor_of this other)\\n                        (color_equals (color_of other) W)\\n                        (size_equals (size_of this) 1)\\n                    )\\n                )\\n            )\\n        )\\n        (apply\\n            (move_node_max (direction_of other))\\n        )\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches '(' in the current parser context, at line 11 col 25\n\n                        (column_equals (column_of this) (column_\n                        ^\nExpected one of: \n\t* RPAR\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Replace the color O to G, and extend the color G and replace the color to Y.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) O)\\n        )\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) G)\\n                (neighbor_of this other)\\n                (color_equals (color_of other) B)\\n            )\\n        )\\n        (apply\\n            (extend_node (direction_of other) false)\\n            (update_color Y)\\n        )\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches '(' in the current parser context, at line 17 col 17\n\n                (color_equals (color_of other) B)\n                ^\nExpected one of: \n\t* RPAR\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Recolor the four corners of each grid to G, the edges to Y, and upper-right corner cells to G for some grids, and move towards edges if adjacent.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (or\\n                (or\\n                    (and\\n                        (neighbor_of this other)\\n                        (color_equals (color_of other) X)\\n                    )\\n                    (and\\n                        (or\\n                            (and\\n                                (column_equals (column_of this) 0)\\n                                (row_equals (row_of this) 3)\\n                            )\\n                            (and\\n                                (column_equals (column_of this) 3)\\n                                (row_equals (row_of this) 0)\\n                            )\\n                        )\\n                        (color_equals (color_of this) X)\\n                    )\\n                )\\n            )\\n        )\\n        (apply\\n            (move_node_max (direction_of other))\\n            (update_color B)\\n        )\\n    )\\n) \\n(rule\\n(enemy(playerX=3, playerY=0), blob(1), kug(2), disappear)\\n(kug(2):\\n    |||A\\n    |||B||\\n    ||||C\\n    ||4\\n(enemy=3)\\n(world(3), true), Random(1000).successWorldResult(true)\\n    (self=11, 12, 13, 14)\\n        (move(#{8, 16, 48}>\\n        moveNode this A\\n) }\\n        (program (\\n    deploy fighter on(#{number(randfilename)}\\n(prob3), strategy(basic)\\n    endLine(buggyPower(2)), star(16), Col\\n)# Deploy our fighter which uses buggyPower and generates 3 times more buggyPower and 4 times faster speed. Inverse enemy calculations and transform as g to 4 to 3 using star improvement. The end of line signifies the end of this DSL block, and returns to normal standard).Sop(#{8} 50\\nprob5 end), line,\\n)\\n]\\n}\" \n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches 'r' in the current parser context, at line 15 col 34\n\n                                (row_equals (row_of this) 3)\n                                 ^\nExpected one of: \n\t* SHAPE_EQ\n\t* OP_OR\n\t* SIZE_EQ\n\t* NEIGHBOR_OF\n\t* WIDTH_EQ\n\t* COLUMN_EQ\n\t* OP_AND\n\t* HEIGHT_EQ\n\t* COLOR_EQ\n\t* OP_NOT\n\t* DEGREE_EQ\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Recolor all 'G' shapes to 'Y' if the shapes are surrounded by 'B', else change 'G' and 'W' shapes to 'G' if shapes are not in any row with 'B'.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) G)\\n                (neighbor_of this other)\\n                (color_equals (color_of other) B)\\n            )\\n        )\\n        (apply\\n            (update_color Y)\\n        )  \\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (or\\n                    (color_equals (color_of this) G)\\n                    (color_equals (color_of this) W)\\n                )\\n                (not (neighbor_of this other))\\n                (color_equals (color_of other) B)\\n            )\\n        )\\n        (apply\\n            (update_color G)\\n        ) \\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches '(' in the current parser context, at line 8 col 17\n\n                (color_equals (color_of other) B)\n                ^\nExpected one of: \n\t* RPAR\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Recolor all objects of size greater than 1 to Y, and move objects of columns 4, 10, 16, and 22 in the first cluster down till they touch the closest yellow line by changing the color to G for the second grids pattern.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (not (size_equals (size_of this) 1))\\n        )\\n        (apply\\n            (update_color Y)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (neighbour_of this other)\\n                (and (color_equals (color_of other) Y) (or (column_equals (column_of this) 4) (or (column_equals (column_of this) 10) (or (column_equals (column_of this) 16) (column_equals (column_of this) 22))))))\\n        )\\n        (apply\\n            (move_node_max down)\\n            (update_color G)\\n        )\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches 'n' in the current parser context, at line 15 col 18\n\n                (neighbour_of this other)\n                 ^\nExpected one of: \n\t* SHAPE_EQ\n\t* OP_OR\n\t* SIZE_EQ\n\t* NEIGHBOR_OF\n\t* WIDTH_EQ\n\t* COLUMN_EQ\n\t* OP_AND\n\t* HEIGHT_EQ\n\t* COLOR_EQ\n\t* OP_NOT\n\t* DEGREE_EQ\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Recolor the objects in the checkerboard pattern to Y and the rest to G.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color (if (and (odd (row_of this)) (odd (column_of this))) (if (color_equals (color_of this) C) G (color_of this))\\n                (if (and (even (row_of this)) (even (column_of this))) (if (color_equals (color_of this) C) G (color_of this)))\\n                (update_color G)\\n        )))\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches 'i' in the current parser context, at line 6 col 28\n\n            (update_color (if (and (odd (row_of this)) (odd (column\n                           ^\nExpected one of: \n\t* COLOR_OF\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Recolor the rows of objects alternatively with colors Y and G, while keeping the borders and intersections intact.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and (color_equals (color_of this) O) (or (row_equals (row_of this) even) (row_equals (row_of this) odd)))\\n        )\\n        (apply\\n            (update_color Y)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and (color_equals (color_of this) O) (or (row_equals (row_of this) even) (row_equals (row_of this) odd)))\\n        )\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches 'r' in the current parser context, at line 5 col 56\n\nd (color_equals (color_of this) O) (or (row_equals (row_of this) even) (row_equa\n                                        ^\nExpected one of: \n\t* SHAPE_EQ\n\t* OP_OR\n\t* SIZE_EQ\n\t* NEIGHBOR_OF\n\t* WIDTH_EQ\n\t* COLUMN_EQ\n\t* OP_AND\n\t* HEIGHT_EQ\n\t* COLOR_EQ\n\t* OP_NOT\n\t* DEGREE_EQ\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Move all objects of color different from C and W toward the objects of those colors, if they are their neighbors, and recolor them.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (not (color_equals (color_of this) C))\\n                (neighbor_of this other)\\n                (or (color_equals (color_of other) C)\\n                    (color_equals (color_of other) W)))\\n        )\\n        (apply\\n            (move_node_max (direction_of other))\\n            (update_color (color_of other))\\n        )\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches '(' in the current parser context, at line 8 col 17\n\n                (or (color_equals (color_of other) C)\n                ^\nExpected one of: \n\t* RPAR\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Move all objects of color different than C and B, towards the object of color C, if they are neighbors of it. Then recolor objects to color G if moved up, or to color Y if moved down.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (not (or (color_equals (color_of this) C) (color_equals (color_of this) B)))\\n                (neighbor_of this other)\\n                (color_equals (color_of other) C)\\n            )\\n        )\\n        (apply\\n            (move_node_max (direction_of other))\\n            (if (direction_equals (direction_of other) up)\\n                (update_color G)\\n                (if (direction_equals (direction_of other) down)\\n                    (update_color Y)\\n                )\\n            )\\n        )\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches '(' in the current parser context, at line 8 col 17\n\n                (color_equals (color_of other) C)\n                ^\nExpected one of: \n\t* RPAR\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Recolor the groups of objects in a grid to either Y or G by alternating rows and columns.\",\n    \"code\": \"(do    \\n    (rule \\n        (vars (this)) \\n        (filter) \\n        (apply \\n             (update_color G) \\n        ) \\n    ) \\n    (rule\\n        (vars (this))\\n        (filter\\n            (or\\n                (and\\n                    (column_equals (column_of this) even)\\n                    (height_equals (height_of this) max)\\n                )\\n                (and\\n                    (row_equals (row_of this) even)\\n                    (height_equals (height_of this) max)\\n                )\\n           \\n            )\\n        )\\n        (apply\\n            (update_color Y)\\n    \\n        )    \\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches 'r' in the current parser context, at line 18 col 22\n\n                    (row_equals (row_of this) even)\n                     ^\nExpected one of: \n\t* SHAPE_EQ\n\t* OP_OR\n\t* SIZE_EQ\n\t* NEIGHBOR_OF\n\t* WIDTH_EQ\n\t* COLUMN_EQ\n\t* OP_AND\n\t* HEIGHT_EQ\n\t* COLOR_EQ\n\t* OP_NOT\n\t* DEGREE_EQ\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Change the color of every object to Y when it crosses the horizontal line of W objects, and change them to G when they are above and to G when they are below.\",\n    \"code\": \"(do (rule (vars (this other)) (filter (and (size_equals (size_of this) max) (or (color_equals (color_of this) X) (and (color_equals (color_of this) X) (neighbor_of this other))))) (apply (update_color Y) (update_color G)))) (rule (vars (this other)) (filter (and (size_equals (size_of this) max) (or (color_equals (color_of other) W) (and (color_equals (color_of other) W) (color_equals (color_of this) W))))) (apply (update_color Y) (update_color G))))\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches '(' in the current parser context, at line 1 col 225\n\nly (update_color Y) (update_color G)))) (rule (vars (this other)) (filter (and (\n                                        ^\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Color every fourth object of size 12 to green, then the next four to yellow.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter (and (size_equals (size_of this) 12) (column_equals (column_of this) (mod (column_of this) 8))))\\n        (apply (update_color G))\\n    )\\n    (rule\\n        (vars (this))\\n        (filter (and (size_equals (size_of this) 12) (column_equals (column_of this) (mod (+ 4 (column_of this)) 8))))\\n        (apply (update_color Y))\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches 'm' in the current parser context, at line 4 col 87\n\ns) 12) (column_equals (column_of this) (mod (column_of this) 8))))\n                                        ^\nExpected one of: \n\t* COLUMN_OF\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Change the color of objects in a pattern of alternating rows to Y, and G in a mirrored pattern.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) C)\\n        )\\n        (apply\\n            (update_color Y)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (not (color_equals (color_of this) C))\\n                (not (row_equals (row_of this) even))\\n            )\\n        )\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches 'r' in the current parser context, at line 16 col 23\n\n                (not (row_equals (row_of this) even))\n                      ^\nExpected one of: \n\t* SHAPE_EQ\n\t* OP_OR\n\t* SIZE_EQ\n\t* NEIGHBOR_OF\n\t* WIDTH_EQ\n\t* COLUMN_EQ\n\t* OP_AND\n\t* HEIGHT_EQ\n\t* COLOR_EQ\n\t* OP_NOT\n\t* DEGREE_EQ\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Recolor north-west parts of the grid to color G and south-east parts to Y\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (size_equals (column_of this) even)\\n                (size_equals (column_of this) odd)\\n            )\\n        )\\n        (apply\\n            (update_color G)\\n            (update_color Y)\\n        )\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches 'c' in the current parser context, at line 6 col 31\n\n                (size_equals (column_of this) even)\n                              ^\nExpected one of: \n\t* SIZE_OF\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Move all objects of color different than C and B, and with a minimum size of 2, to the left edge and the top edge respectively; then recolor horizontal objects to color G and vertical objects to color Y.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (not (color_equals (color_of this) C))\\n                (not (color_equals (color_of this) B))\\n                (size_equals (size_of this) min)\\n            )\\n        )\\n        (apply\\n            (move_node left)\\n            (update_color G)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (not (color_equals (color_of this) C))\\n                (not (color_equals (color_of this) B))\\n                (size_equals (size_of this) min)\\n            )\\n        )\\n        (apply\\n            (move_node up)\\n            (update_color Y)\\n        )\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches '(' in the current parser context, at line 8 col 17\n\n                (size_equals (size_of this) min)\n                ^\nExpected one of: \n\t* RPAR\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Recolor bands of size 4 to G on odd rows. Recolor bands to Y on even rows. After the fourth row, recolor them to G if there is a change in pattern.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter (size_equals (size_of this) 4))\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter (and (size_equals (size_of this) 4) (size_equals (column_of this) even)))\\n        (apply\\n            (update_color Y)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter (and (size_equals (size_of this) 4) (size_equals (column_of this) odd)))\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches 'c' in the current parser context, at line 11 col 67\n\n_equals (size_of this) 4) (size_equals (column_of this) even)))\n                                        ^\nExpected one of: \n\t* SIZE_OF\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Move all objects that are not C one step towards the direction where color changes to C, then update to color Y or G based on their initial grouping.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (not (color_equals (color_of this) C))\\n                (neighbor_of this other)\\n            )\\n        )\\n        (apply\\n            (move_node (direction_of other))\\n            (update_color\\n                (if (neighbor_of this other)\\n                    (color_of this)\\n                    Y\\n                ))\\n        )\\n    )\\n)\"\n}\n",
        "error_type": "parse_error",
        "error_message": "No terminal matches 'i' in the current parser context, at line 13 col 18\n\n                (if (neighbor_of this other)\n                 ^\nExpected one of: \n\t* COLOR_OF\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Move the groups of G to the groups of W and change their color to G, then change the surrounding objects' color (not G) to Y.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) G)\\n                (neighbor_of this other)\\n                (color_equals (color_of other) W)\\n            )\\n        )\\n        (apply\\n            (move_node (direction_of other))\\n            (update_color G)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (not (color_equals (color_of this) G))\\n        )\\n        (apply\\n            (update_color Y)\\n        )\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches '(' in the current parser context, at line 8 col 17\n\n                (color_equals (color_of other) W)\n                ^\nExpected one of: \n\t* RPAR\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Change the color of the objects that touch the grid borders to G, and change the color of the objects touching them to Y.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (or\\n                (column_equals (column_of this) left)\\n                (column_equals (column_of this) right)\\n            )\\n        )\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of other) G)\\n                (neighbor_of this other)\\n            )\\n        )\\n        (apply\\n            (update_color Y)\\n        )\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches 'l' in the current parser context, at line 6 col 49\n\n        (column_equals (column_of this) left)\n                                        ^\nExpected one of: \n\t* LPAR\n\t* COLUMN\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Recolor alternating groups of objects to colors G and Y, then change border objects to color G and interior objects to color Y.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (column_equals (column_of this) (odd))\\n                (not (color_equals (color_of this) O))\\n            )\\n        )\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (column_equals (column_of this) (even))\\n                (not (color_equals (color_of this) O))\\n            )\\n        )\\n        (apply\\n            (update_color Y)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) Y)\\n                (and\\n                    (size_equals (size_of other) 11)\\n                    (neighbor_of this other)\\n                )\\n            )\\n        )\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (color_equals (color_of this) Y)\\n                (not (size_equals (size_of this) 11))\\n            )\\n        )\\n        (apply\\n            (update_color Y)\\n        )\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches 'o' in the current parser context, at line 13 col 50\n\n       (column_equals (column_of this) (odd))\n                                        ^\nExpected one of: \n\t* COLUMN_OF\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Recolor large diagonal blocks to G, surrounding blocks to Y, and small diagonal blocks to G\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (size_equals (size_of this) 25)\\n        )\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (not (size_equals (size_of this) 25))\\n                (neighbor_of this other)\\n                (color_equals (color_of other) C)\\n            )\\n        )\\n        (apply\\n            (update_color Y)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (size_equals (size_of this) 16)\\n                (neighbor_of this other)\\n                (color_equals (color_of other) Y)\\n            )\\n        )\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches '(' in the current parser context, at line 17 col 17\n\n                (color_equals (color_of other) C)\n                ^\nExpected one of: \n\t* RPAR\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Alternate rows of objects with colors G and Y and move them to the top, middle, and bottom sections.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n            (color_equals (color_of this) O)\\n        (apply\\n            (update_color Y)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter)\\n            (color_equals (color_of this) O)\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches 'c' in the current parser context, at line 5 col 14\n\n            (color_equals (color_of this) O)\n             ^\nExpected one of: \n\t* APPLY\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Move all objects of color different than 'C' down, and then recolor objects of color 'C' and objects of color different than 'C' to colors 'Y' and 'G' respectively.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (not (color_equals (color_of this) C))\\n                (neighbor_of this other)\\n                (color_equals (color_of other) C)\\n            )\\n        )\\n        (apply\\n            (move_node_max (direction_of other))\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) C)\\n        )\\n        (apply\\n            (update_color Y)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (not (color_equals (color_of this) C))\\n        )\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches '(' in the current parser context, at line 8 col 17\n\n                (color_equals (color_of other) C)\n                ^\nExpected one of: \n\t* RPAR\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Recolor every 2x2 block in the grid to color G except for the ones that are adjacent to a 'C' object vertically, which are recolored to Y.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (height_equals (height_of this) 2)\\n                (width_equals (width_of this) 2)\\n                (neighbor_of this other)\\n                (color_equals (color_of other) C)\\n            )\\n        )\\n        (apply\\n            (update_color Y)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (height_equals (height_of this) 2)\\n                (width_equals (width_of this) 2)\\n                (not (color_equals (color_of this) Y))\\n            )\\n        )\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches '(' in the current parser context, at line 8 col 17\n\n                (neighbor_of this other)\n                ^\nExpected one of: \n\t* RPAR\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Recolor the four corners of each object to color G, the middle to color Y, and the rest to color the original color.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter (or (img_pts_of this top_left) (or (img_pts_of this top_right) (or (img_pts_of this bottom_left) (img_pts_of this bottom_right)))))\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter (img_pts_of this middle))\\n        (apply\\n            (update_color Y)\\n        )\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches 'i' in the current parser context, at line 11 col 22\n\n        (filter (or (img_pts_of this top_left) (or (img_pts_o\n                     ^\nExpected one of: \n\t* SHAPE_EQ\n\t* OP_OR\n\t* SIZE_EQ\n\t* NEIGHBOR_OF\n\t* WIDTH_EQ\n\t* COLUMN_EQ\n\t* OP_AND\n\t* HEIGHT_EQ\n\t* COLOR_EQ\n\t* OP_NOT\n\t* DEGREE_EQ\n"
    }
]