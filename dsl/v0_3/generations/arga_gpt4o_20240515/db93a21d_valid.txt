[
    "{\n    \"nl_description\": \"Recolor certain areas and objects to new colors following a specific schema.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (shape_equals (shape_of this) enclosed)\\n        )\\n        (apply\\n            (update_color B)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (shape_equals (shape_of this) square)\\n        )\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (size_equals (size_of this) max)\\n        )\\n        (apply\\n            (add_border G)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Change the border color of all hollow rectangles.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (shape_equals (shape_of this) enclosed)\\n        )\\n        (apply\\n            (add_border G)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"For all W objects on the grid, recolor the horizontal borders to G, and the vertical borders to B.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) W)\\n        )\\n        (apply\\n            (add_border B)\\n            (add_border G)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects to different colors based on their size: size 1 to color G, size 4 to color B, and size 9 to color W.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (size_equals (size_of this) 1)\\n        )\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (size_equals (size_of this) 4)\\n        )\\n        (apply\\n            (update_color B)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (size_equals (size_of this) 9)\\n        )\\n        (apply\\n            (update_color W)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor objects to colors G and B, move B-objects to upper left corner area and surround them with G, fill between W-objects with B, fill gaps inside W-objects with G.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) W)\\n                (neighbor_of this other)\\n            )\\n        )\\n        (apply\\n            (update_color B)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) B)\\n        )\\n        (apply\\n            (move_node up_left)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) B)\\n        )\\n        (apply\\n            (add_border G)\\n        )\\n    )    \\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor the objects bordered by W objects: if the bordered object is at the top half, color it G; if it's at the bottom half, color it B.\",\n    \"code\": \"(do (rule (vars (this other)) (filter (and (neighbor_of this other) (color_equals (color_of other) W))) (apply (update_color G))) (rule (vars (this other)) (filter (and (neighbor_of this other) (color_equals (color_of this) G))) (apply (update_color B))) (rule (vars (this other)) (filter (and (neighbor_of this other) (color_equals (color_of other) G))) (apply (update_color O))))\"\n}",
    "{\n    \"nl_description\": \"Transform all objects in the grid by adding a border with color that alternates G and B, while leaving the centers unchanged.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (add_border G)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (neighbor_of this other)\\n        )\\n        (apply\\n            (move_node (direction_of other))\\n            (add_border B)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Extend all objects of color W to their nearest neighbor's color, without overlapping.\",\n    \"code\": \"(do\\n  (rule\\n    (vars (this other))\\n    (filter\\n      (and\\n        (color_equals (color_of this) W)\\n        (neighbor_of this other)\\n      )\\n    )\\n    (apply\\n      (extend_node (direction_of other) false)\\n    )\\n  )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor the objects, according to a predefined pattern: G for the top half, B for the middle, and G for the bottom half.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter (and (color_equals (color_of this) W) (or (neighbor_of this other) (neighbor_of other this))))\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter (and (color_equals (color_of this) W) (or (neighbor_of this other) (neighbor_of other this))))\\n        (apply\\n            (update_color B)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter (and (color_equals (color_of this) O) (or (neighbor_of this other) (neighbor_of other this))))\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Fill the grid starting from the sides with alternating colors, followed by moving and expanding the objects arbitrarily.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) W)\\n        )\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) O)\\n        )\\n        (apply\\n            (update_color B)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) G)\\n                (neighbor_of this other)\\n            )\\n        )\\n        (apply\\n            (move_node (direction_of other))\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) B)\\n        )\\n        (apply\\n            (move_node down)\\n            (extend_node down false)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move objects of size 4 in the four main directions to reach the grid edges and recolor them with color G. Recolor center objects of size 12 to B.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (size_equals (size_of this) 4)\\n        )\\n        (apply\\n            (move_node_max up)\\n            (move_node_max down)\\n            (move_node_max left)\\n            (move_node_max right)\\n            (update_color G)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (size_equals (size_of this) 12)\\n        )\\n        (apply\\n            (update_color B)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Objects are recolored: topmost objects to Red, largest objects to Blue, and remaining objects to Green.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (color_equals (color_of this) W)\\n                (shape_equals (shape_of this) enclosed)\\n            )\\n        )\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (size_equals (size_of this) max)\\n        )\\n        (apply\\n            (update_color B)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n        )\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects horizontally adjacent to objects with color `W` to colors `G` or `B` depending on their row.\",\n    \"code\": \"(do    \\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (neighbor_of this other)\\n                (color_equals (color_of other) W)\\n            )\\n        )\\n        (apply\\n            (update_color G)\\n        )\\n    )    \\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (neighbor_of this other)\\n                (color_equals (color_of other) W)\\n            )\\n        )\\n        (apply\\n            (update_color B)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor the objects of size 4 to color B and the objects of size greater than 4 to colors G and B.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (size_equals (size_of this) 4)\\n        )\\n        (apply\\n            (update_color B)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (not (size_equals (size_of this) 4))\\n                (not (size_equals (size_of this) min))\\n            )\\n        )\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (not (size_equals (size_of this) 4))\\n                (size_equals (size_of this) min)\\n            )\\n        )\\n        (apply\\n            (update_color B)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Extend all objects of color W towards the maximum height edge of the grid without overlapping, then recolor the grid with colors G, B, or original color based on the size and edge proximity.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter (color_equals (color_of this) W))\\n        (apply (extend_node down false))\\n    )\\n    (rule\\n        (vars (this))\\n        (filter (color_equals (color_of this) W))\\n        (apply\\n            (update_color B)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter (and (size_equals (size_of this) max) (color_equals (color_of this) G)))\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter (and (size_equals (size_of this) min) (color_equals (color_of this) G)))\\n        (apply\\n            (update_color B)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color (color_of this))\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Extend all objects horizontally, changing their color as they grow.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) W)\\n                (neighbor_of this other)\\n            )\\n        )\\n        (apply\\n            (extend_node right true)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) G)\\n        )\\n        (apply\\n            (update_color B)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Fill all 2x2 squares with B, extend the borders of W objects with G, fill the hollow rectangles with W objects with B.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (color_equals (color_of this) W)\\n                (neighbor_of this this)\\n            )\\n        )\\n        (apply\\n            (add_border G)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (color_equals (color_of this) W)\\n                (shape_equals (shape_of this) enclosed)\\n            )\\n        )\\n        (apply\\n            (fill_rectangle B false)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (height_equals (height_of this) 2)\\n                (width_equals (width_of this) 2)\\n            )\\n        )\\n        (apply\\n            (fill_rectangle B false)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects of color W to color B, recolor all objects of color W to color G, and then move the remaining objects to form a hollow pattern.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) W)\\n        )\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) B)\\n        )\\n        (apply\\n            (move_node down)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Color a green boundary around the entire grid and insert vertically stacked blue squares in between the different sections of W objects.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (add_border G)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) W)\\n        )\\n        (apply\\n            (rotate_node 90)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor the boundaries of connected regional shapes in the grid: the largest one to G, and the smaller ones to B.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (shape_equals (shape_of this) enclosed)\\n                (size_equals (size_of this) max)\\n            )\\n        )\\n        (apply\\n            (add_border G)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (shape_equals (shape_of this) enclosed)\\n                (not (size_equals (size_of this) max))\\n            )\\n        )\\n        (apply\\n            (add_border B)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects to either color G or color B, and move them up to the top row.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color G)\\n            (move_node up)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color B)\\n            (move_node up)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor the objects in the grid with respect to their y-coordinate. The topmost objects are recolored G, the middle ones B, and the bottom ones W.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter (column_equals (column_of this) 1))\\n        (apply (update_color G))\\n    )\\n    (rule\\n        (vars (this))\\n        (filter (and (column_equals (column_of this) 2) (not (column_equals (column_of this) 1))))\\n        (apply (update_color B))\\n    )\\n    (rule\\n        (vars (this))\\n        (filter (column_equals (column_of this) 2))\\n        (apply (update_color W))\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Extend all objects of size greater than 1 one step in all directions, merging with other objects if they meet.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (not (size_equals (size_of this) 1))\\n                (not (neighbor_of this other))\\n            )\\n        )\\n        (apply\\n            (extend_node up_right true)\\n            (extend_node up_left true)\\n            (extend_node down_right true)\\n            (extend_node down_left true)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor the objects of color 'W' to 'G' and the objects of size 4 to 'B'.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) W)\\n        )\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (size_equals (size_of this) 4)\\n        )\\n        (apply\\n            (update_color B)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects toward the nearest neighbor and recolor them to form distinct regions in the grid\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (color_equals (color_of other) W)\\n        )\\n        (apply\\n            (move_node_max (direction_of other))\\n            (update_color G)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (color_equals (color_of other) B)\\n        )\\n        (apply\\n            (move_node_max (direction_of other))\\n            (update_color B)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Fill and extend rectangles in all colors to color their interior to G and extend their borders outwards while coloring the borders to B.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (fill_rectangle G false)\\n            (add_border B)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move the bottom-leftmost objects of color W one step each diagonally to the bottom-left and recolor them to B. Afterwards, extend the remaining objects to all adjacent empty spaces and recolor them to G.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (color_equals (color_of this) W)\\n                (neighbor_of this other)\\n            )\\n        )\\n        (apply\\n            (move_node_max down_left)\\n            (update_color B)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n        )\\n        (apply\\n            (extend_node right false)\\n            (extend_node left false)\\n            (extend_node up false)\\n            (extend_node down false)\\n            (extend_node up_left false)\\n            (extend_node up_right false)\\n            (extend_node down_left false)\\n            (extend_node down_right false)\\n            (update_color G)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor rows of from top, middle, and bottom differently by extending existing objects' colors horizontally until they hit another object.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (extend_node right false)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects to fully occupy the grid and extend them such that the remaining space is filled by smaller borders or other shapes, and ensure proper coloring for completeness.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color G)\\n            (move_node up)\\n            (move_node down)\\n            (move_node left)\\n            (move_node right)\\n            (extend_node up false)\\n            (extend_node down false)\\n            (extend_node left false)\\n            (extend_node right false)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Change all objects to color G, and change the objects that are neighbors to any object to color B.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter)\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (neighbor_of this other)\\n        )\\n        (apply\\n            (update_color B)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Group objects and recolor them based on their positions.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (size_equals (size_of this) 2)\\n                (color_equals (color_of this) W)\\n            )\\n        )\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (size_equals (size_of this) 4)\\n                (color_equals (color_of this) W)\\n            )\\n        )\\n        (apply\\n            (update_color B)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"First, add a green border to the entire grid. Then, color the areas that surround the largest object with color B.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (add_border G)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (size_equals (size_of this) max)\\n        )\\n        (apply\\n            (extend_node right false)\\n            (extend_node left false)\\n            (extend_node down false)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (size_equals (size_of this) 1)\\n                (and\\n                    (neighbor_of this other)\\n                    (size_equals (size_of other) max)\\n                )\\n            )\\n        )\\n        (apply\\n            (update_color B)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of color W to the corner they are closer to, without overlapping. Some objects that were touched by these objects become colored in the same color as the cornered objects.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) W)\\n                (neighbor_of this other)\\n            )\\n        )\\n        (apply\\n            (move_node_max (direction_of other))\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (not (color_equals (color_of this) W))\\n                (and\\n                    (neighbor_of this other)\\n                    (color_equals (color_of other) W)\\n                )\\n            )\\n        )\\n        (apply\\n            (update_color (color_of other))\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Extend all objects of color W, recolor trailing nodes to color G, and surrounding empty spaces to color B, without overlapping.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) W)\\n        )\\n        (apply\\n            (extend_node up true)\\n            (update_color G)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of other) G)\\n                (neighbor_of this other)\\n            )\\n        )\\n        (apply\\n            (update_color B)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects of size 4 to color G and recolor all objects of size 8 to color B.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (size_equals (size_of this) 4)\\n        )\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (size_equals (size_of this) 8)\\n        )\\n        (apply\\n            (update_color B)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor the border to color G and the interior to B for enclosed objects.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (shape_equals (shape_of this) enclosed)\\n        )\\n        (apply\\n            (add_border G)\\n            (hollow_rectangle B)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor objects on the top and bottom halves of the grid with new colors: objects on the top half are recolored to color G, and objects on the bottom half are recolored to color B.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (color_equals (color_of this) W)\\n                (or\\n                    (column_equals (column_of this) odd)\\n                    (column_equals (column_of this) even)\\n                )\\n            )\\n        )\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (color_equals (color_of this) W)\\n                (not (or\\n                    (column_equals (column_of this) odd)\\n                    (column_equals (column_of this) even)\\n                ))\\n            )\\n        )\\n        (apply\\n            (update_color B)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Divide the grids into segments and change their colors to G and B as shown in the pattern.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter (and (column_equals (column_of this) even) (and (neighbor_of this this) (column_equals (column_of this) odd))))\\n        (apply (update_color G))\\n    )\\n    (rule\\n        (vars (this))\\n        (filter (and (column_equals (column_of this) even) (and (neighbor_of this this) (column_equals (column_of this) odd))))\\n        (apply (update_color B))\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Add a yellow border to all objects.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (add_border Y)\\n        )\\n    )\\n)\"\n}",
    "{\n  \"nl_description\": \"Fill all the shapes with their respective borders' colors, making sure no overlaps occur.\",\n  \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (fill_rectangle (color_of this) false)\\n        )\\n    )\\n)\"\n}",
    "{\n  \"nl_description\": \"Extend objects without overlapping. For blue objects, move one step down and then one step up for black objects, recoloring them after moving.\",\n  \"code\": \"(do\\n  (rule\\n    (vars (this other))\\n    (filter\\n        (and\\n            (color_equals (color_of other) X)\\n            (neighbor_of this other)\\n        )\\n    )\\n    (apply\\n        (extend_node (direction_of other) false)\\n    )\\n  )\\n  (rule\\n    (vars (this))\\n    (filter\\n        (color_equals (color_of this) B)\\n    )\\n    (apply\\n        (move_node down)\\n        (move_node up)\\n        (update_color B)\\n    )\\n  )\\n  (rule\\n    (vars (this))\\n    (filter\\n        (color_equals (color_of this) O)\\n    )\\n    (apply\\n        (update_color G)\\n    )\\n  )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of color W one step toward the edge of the grid, and then recolor them to color G.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) W)\\n        )\\n        (apply\\n            (move_node_max (direction_of this))\\n            (update_color G)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects from top left to bottom right, making them solid colors: green, yellow, blue, etc., at diagonal intervals.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n            (apply\\n               (update_color G)\\n               (move_node down_right)\\n            )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter)\\n            (apply\\n               (update_color B)\\n               (move_node down_right)\\n            )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor the objects with border color W and objects overlapping with them.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) W)\\n        )\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of other) G)\\n                (neighbor_of this other)\\n            )\\n        )\\n        (apply\\n            (update_color W)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor the exterior cells of the objects to color G, and recolor the inner cells to color B.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter (not (color_equals (color_of this) O)))\\n        (apply\\n            (add_border G)\\n            (hollow_rectangle B)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor specific groups of connected cells in certain areas to colors G, B, and G respectively.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (column_equals (column_of this) center)\\n        )\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (neighbor_of this other)\\n                (color_equals (color_of other) B)\\n            )\\n        )\\n        (apply\\n            (update_color B)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (neighbor_of this other)\\n                (color_equals (color_of other) G)\\n            )\\n        )\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n)\"\n}"
]