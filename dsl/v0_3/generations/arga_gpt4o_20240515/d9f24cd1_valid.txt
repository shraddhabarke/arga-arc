[
    "{\n    \"nl_description\": \"Recolor all objects to color R\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of color R by one step up.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) R)\\n        )\\n        (apply\\n            (move_node up)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Extend all the objects towards the rightmost object in each row, without overlapping.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (neighbor_of this other)\\n                (column_equals (column_of other) 9)\\n            )\\n        )\\n        (apply\\n            (extend_node right false)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects of size 1 to color R and move them up.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (size_equals (size_of this) 1)\\n        )\\n        (apply\\n            (update_color R)\\n            (move_node up)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of color R to the left.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) R)\\n        )\\n        (apply\\n            (move_node left)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Extend all the objects of color R vertically to the top and to the bottom until they either touch an object or the edge of the grid, overlapping with any objects encountered during extension.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) R)\\n        )\\n        (apply\\n            (extend_node up true)\\n            (extend_node down true)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of color R vertically up.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) R)\\n        )\\n        (apply\\n            (move_node up)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects, except for X, toward the topmost object of color R, if they are in the same column.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (not (color_equals (color_of this) X))\\n                (and\\n                    (column_equals (column_of this) (column_of other))\\n                    (color_equals (color_of other) R)\\n                )\\n            )\\n        )\\n        (apply\\n            (move_node_max up)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects of size 1 to color R.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (size_equals (size_of this) 1)\\n        )\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all red 'R' objects in the first column through the entire grid.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) R)\\n                (column_equals (column_of this) 0)\\n            )\\n        )\\n        (apply\\n            (move_node_max right)\\n        )\\n    )\\n)\"\n}\n",
    "{\n    \"nl_description\": \"Move all objects of color R to the left edge of the grid.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) R)\\n        )\\n        (apply\\n            (move_node_max left)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Add a border of color R to all objects of color R.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) R)\\n        )\\n        (apply\\n            (add_border R)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of color R one step left.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) R)\\n        )\\n        (apply\\n            (move_node left)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all rows to color R except those containing an X.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (not (color_equals (color_of this) X))\\n        )\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of color R one step to the left, and then recolor them to color R.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) R)\\n        )\\n        (apply\\n            (move_node left)\\n            (update_color R)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Extend all R objects upward to the nearest X, without overlapping.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) R)\\n                (color_equals (color_of other) X)\\n            )\\n        )\\n        (apply\\n            (extend_node up false)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Add a red border around all the objects of color R.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) R)\\n        )\\n        (apply\\n            (add_border R)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Extend all objects of color R vertically downward, overlapping with other objects if necessary.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) R)\\n        )\\n        (apply\\n            (extend_node down true)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Extend all objects of color R upwards, overlapping other objects.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) R)\\n        )\\n        (apply\\n            (extend_node up true)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects to color R\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Extend objects with color R vertically to create a column, while avoiding overlapping.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) R)\\n                (or\\n                    (neighbor_of this other)\\n                    (color_equals (color_of other) X)\\n                )\\n            )\\n        )\\n        (apply\\n            (extend_node down true)\\n            (extend_node up true)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Extend all objects of color R upward, without overlap.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) R)\\n        )\\n        (apply\\n            (extend_node up false)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of color R upwards.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) R)\\n        )\\n        (apply\\n            (move_node up)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Add a red border to all objects of color X\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) X)\\n        )\\n        (apply\\n            (add_border R)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of color R one step up.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) R)\\n        )\\n        (apply\\n            (move_node up)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects to color R\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all rows that contain color R to color R\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) R)\\n                (neighbor_of this other)\\n            )\\n        )\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Insert an object of color R at each column with an object of color R, such that the R object covers that entire column.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) R)\\n        )\\n        (apply\\n            (extend_node up false)\\n            (extend_node down false)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Extend all R colored objects to cover their neighboring cells, without overlapping them.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) R)\\n                (neighbor_of this other)\\n            )\\n        )\\n        (apply\\n            (extend_node (direction_of other) false)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Add a border of color R around all objects of color R\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) R)\\n        )\\n        (apply\\n            (add_border R)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Extend all red objects to the top.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) R)\\n        )\\n        (apply\\n            (extend_node up false)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Create a border for all objects of color R with the color R.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) R)\\n        )\\n        (apply\\n            (add_border R)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Add a border of color R to all objects of color X.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) X)\\n        )\\n        (apply\\n            (add_border R)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Extend all objects of color R upward until the edge of the grid or until they hit another object.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) R)\\n        )\\n        (apply\\n            (extend_node up false)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of color R such that they form a continuous vertical line with each other.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) R)\\n                (not (neighbor_of this other))\\n            )\\n        )\\n        (apply\\n            (move_node (direction_of other))\\n            (update_color R)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of color R, working around objects of color X.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) R)\\n        )\\n        (apply\\n            (move_node up)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Extend all objects of color R toward the nearest object of color X, without overlapping.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) R)\\n                (color_equals (color_of other) X)\\n            )\\n        )\\n        (apply\\n            (extend_node (direction_of other) false)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of color different than R and color X, towards the object of color R or color X, if they are neighbors of it.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (not (color_equals (color_of this) X))\\n                (and\\n                    (not (color_equals (color_of this) R))\\n                    (or\\n                        (color_equals (color_of other) X)\\n                    (color_equals (color_of other) R)\\n                    )\\n                )\\n            )\\n        )\\n        (apply\\n            (move_node_max (direction_of other))\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of color R to the left end of their row.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) R)\\n        )\\n        (apply\\n            (move_node left)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Add a border of color R to all objects.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (add_border R)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Extend all objects of color R toward the object of color X, without overlapping.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) R)\\n                (color_equals (color_of other) X)\\n            )\\n        )\\n        (apply\\n            (extend_node (direction_of other) false)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of color R, extending towards other objects without overlapping.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) R)\\n                (neighbor_of this other)\\n            )\\n        )\\n        (apply\\n            (extend_node (direction_of other) false)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of color R upward.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) R)\\n        )\\n        (apply\\n            (move_node up)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Extend all objects of color R, vertically, without overlapping.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) R)\\n        )\\n        (apply\\n            (extend_node down false)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Extend all objects of color R along the horizontal direction, without overlapping.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) R)\\n        )\\n        (apply\\n            (extend_node right false)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of color R to the leftmost column.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) R)\\n        )\\n        (apply\\n            (move_node_max left)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Extend all the objects of color R, toward the object of color X, overlapping.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) R)\\n                (and\\n                    (neighbor_of this other)\\n                    (color_equals (color_of other) X)\\n                )\\n            )\\n        )\\n        (apply\\n            (extend_node (direction_of other) true)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Add a border to object of color X with color R.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) X)\\n        )\\n        (apply\\n            (add_border R)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all vertical lines of 3 objects with the color R, and any object that intersects with them.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n            (apply\\n                (update_color R)\\n            )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Extend all objects of color R vertically, overlapping other objects.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) R)\\n        )\\n        (apply\\n            (extend_node down true)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of color 'R' upward until they hit another object or the edge of the grid.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) R)\\n        )\\n        (apply\\n            (move_node_max up)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Fill all columns containing a red object with red, and extend to each column neighbor in all rows.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) R)\\n        )\\n        (apply\\n            (extend_node up true)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) R)\\n        )\\n        (apply\\n            (extend_node down true)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) R)\\n                (neighbor_of this other)\\n            )\\n        )\\n        (apply\\n            (extend_node (direction_of other) true)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of color R towards the center of the grid until they hit an obstacle or the edge of the grid.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) R)\\n        )\\n        (apply\\n            (move_node_max up)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Fill rectangles formed by the objects in the grid with color R, aligned with the first object.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (not (color_equals (color_of this) O))\\n        )\\n        (apply\\n            (fill_rectangle R false)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Add border with color R to all objects with color different than X.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter (not (color_equals (color_of this) X)))\\n        (apply (add_border R))\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Add a border of color R to all the objects of colors that are not O.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (not (color_equals (color_of this) O))\\n        )\\n        (apply\\n            (add_border R)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Starting from the bottom row objects of color R are extended vertically towards the top to form a continuous column in each column that contains an R.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (color_equals (color_of this) R)\\n                (column_equals (column_of this) (column_of other))\\n            )\\n        )\\n        (apply\\n            (extend_node up false)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects of color R to color O and extend them up without overlapping, if they are neighbors of an object of color X.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) R)\\n                (and\\n                    (neighbor_of this other)\\n                    (color_equals (color_of other) X)\\n                )\\n            )\\n        )\\n        (apply\\n            (update_color O)\\n            (extend_node up false)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Extend all objects of color R downwards, without overlapping.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) R)\\n        )\\n        (apply\\n            (extend_node down false)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects of color X to color R and apply the changes.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) X)\\n        )\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all red objects (R) upward and insert them in the remaining rows in the grid.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) R)\\n        )\\n        (apply\\n            (move_node up)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Extend the object of color R vertically to the top and bottom edge, until it hits another object.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) R)\\n                (neighbor_of this other)\\n            )\\n        )\\n        (apply\\n            (extend_node up false)\\n            (extend_node down false)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Extend all objects of color R towards the color X without overlapping.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) R)\\n                (and\\n                    (neighbor_of this other)\\n                    (color_equals (color_of other) X)\\n                )\\n            )\\n        )\\n        (apply\\n            (extend_node (direction_of other) false)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Transform all columns containing at least one red object so that every cell in these columns has color R.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) R)\\n        )\\n        (apply\\n            (fill_rectangle R true)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor the rows of objects that contain color R, including the neighboring cells of these objects, to color R\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (or\\n                (color_equals (color_of this) R)\\n                (and\\n                    (neighbor_of this other)\\n                    (color_equals (color_of other) R)\\n                )\\n            )\\n        )\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects adjacent to the object of color X to color R, then extend the objects to form vertical stripes.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (neighbor_of this other)\\n        )\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (extend_node up false)\\n        )\\n    )\\n)\"\n}"
]