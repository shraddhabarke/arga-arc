[
    {
        "response": "{\n    \"nl_description\": \"Move all objects of color different than O, extend them to form a 3x3 block with the object at the center, and then recolor them to color Y, and then insert an object of size 3 represented in the starting position.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (not (color_equals (color_of this) O))\\n        )\\n        (apply\\n            (move_node up)\\n            (extend_node up false)\\n            (move_node left)\\n            (extend_node left false)\\n            (extend_node down false)\\n            (update_color Y)\\n            (insert 3 bottom left middle)\\n        )\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches 'l' in the current parser context, at line 14 col 30\n\n            (insert 3 bottom left middle)\n                             ^\nExpected one of: \n\t* RELATIVE_POSITION\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Add a border to all objects in the grid.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (apply\\n            (add_border F)\\n        )\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches 'a' in the current parser context, at line 4 col 10\n\n        (apply\n         ^\nExpected one of: \n\t* FILTER\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Insert objects of color F forming a square shape in the bounded space around an object at the same position in each output grid. \",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) G)\\n                (neighbor_of this other)\\n            )\\n        )\\n        (apply\\n            (insert (color_of this) top_left source)\\n            (insert (color_of this) top_right source)\\n            (insert (color_of this) bottom_left source)\\n            (insert (color_of this) bottom_right source)\\n        )\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches '(' in the current parser context, at line 11 col 21\n\n            (insert (color_of this) top_left source)\n                    ^\nExpected one of: \n\t* OBJECT_ID\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Color all 3x3 squares, centered on objects, to color F except for the center object and restore its original color.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (size_equals (height_of this) 1)\\n                (size_equals (width_of this) 1)\\n            )\\n        )\\n        (apply\\n            (tr_extend_node (direction_of this) false)\\n            (tr_ext_node direction_of_up false)\\n            (tr_ext_node direction_of_right false)\\n            (tr_ext_node direction_of_down false)\\n        )\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches 'h' in the current parser context, at line 6 col 31\n\n                (size_equals (height_of this) 1)\n                              ^\nExpected one of: \n\t* SIZE_OF\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Surround all objects in the grid with a border of color Y and move all objects of size 1 to a specific formation\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (add_border Y)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (size_equals (size_of this) 1)\\n        )\\n        (apply\\n            (move_node (down))\\n            (move_node (down))\\n            (move_node (down))\\n            (move_node (right))\\n            (move_node (right))\\n        )\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches 'd' in the current parser context, at line 15 col 25\n\n            (move_node (down))\n                        ^\nExpected one of: \n\t* DIRECTION_OF\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Draw a border around objects with color C, without overlapping, and then update them to color Y. Also, extend other objects towards color C and update them to F or B depending on their original color.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) C)\\n        )\\n        (apply\\n            (add_border Y)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (not (color_equals (color_of this) C))\\n                (neighbor_of this other)\\n                (color_equals (color_of other) C)\\n            )\\n        )\\n        (apply\\n            (extend_node (direction_of other) false)\\n            (if (color_equals (color_of this) G) (update_color F) (TR_NOOP))\\n            (if (color_equals (color_of this) R) (update_color B) (TR_NOOP))\\n        )\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches '(' in the current parser context, at line 17 col 17\n\n                (color_equals (color_of other) C)\n                ^\nExpected one of: \n\t* RPAR\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Fill a 3x3 area centered on each object, and then recolor these 3x3 areas to color F.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (extend_node (down) false)\\n            (extend_node (up) false)\\n            (extend_node (left) false)\\n            (extend_node (right) false)\\n            (extend_node (up_left) false)\\n            (extend_node (up_right) false)\\n            (extend_node (down_left) false)\\n            (extend_node (down_right) false)\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches 'd' in the current parser context, at line 6 col 27\n\n            (extend_node (down) false)\n                          ^\nExpected one of: \n\t* DIRECTION_OF\n"
    },
    {
        "response": "{\n    \"nl_description\": \"For all objects, recolor them with the color F, except for objects with color C, G, and R. Then, move these objects to form a cluster around objects with color C and R.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter (not (or (color_equals (color_of this) C) (color_equals (color_of this) G) (color_equals (color_of this) R))))\\n        (apply (update_color F))\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter (or (color_equals (color_of other) C) (color_equals (color_of other) R)))\\n        (apply (move_node_max (direction_of other)))\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches '(' in the current parser context, at line 4 col 92\n\nis) C) (color_equals (color_of this) G) (color_equals (color_of this) R))))\n                                        ^\nExpected one of: \n\t* RPAR\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Fill the shape enclosed by a boundary of size 1, centered at the object, with the color going around the object.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (neighbor_of this other)\\n        )\\n        (apply\\n            (fill_rectangle ((color_of other) (color_of this)) true)\\n        )\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches '(' in the current parser context, at line 8 col 30\n\n            (fill_rectangle ((color_of other) (color_of this)) true)\n                             ^\nExpected one of: \n\t* COLOR_OF\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Insert an object filled with color F in a 3x3 area and move the existing object to fit the new area. Recolor the area with color Y.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (size_equals (size_of this) 1)\\n            )\\n        )\\n        (apply\\n            (move_node_max down)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (or\\n                (size_equals (size_of this) (3 3))\\n            )\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (size_equals (size_of this) 1)\\n            )\\n        )\\n        (apply\\n            (update_color Y)\\n        )\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches ')' in the current parser context, at line 7 col 13\n\n            )\n            ^\nExpected one of: \n\t* LPAR\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Fill a 3x3 square around an object with its color unless that object is located at the edge of the grid.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (size_equals (size_of this) 1)\\n                (not (or\\n                    (column_equals (column_of this) 0)\\n                    (column_equals (column_of this) 1)\\n                    (column_equals (column_of this) 13)\\n                    (column_equals (column_of this) 14)\\n                ))\\n            )\\n        )\\n        (apply\\n            (insert 3x3_square (color_of this) this (middle))\\n        )\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches '(' in the current parser context, at line 10 col 21\n\n                    (column_equals (column_of this) 13)\n                    ^\nExpected one of: \n\t* RPAR\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Recolor all objects and their neighbors to color F, except for the objects with color C, G, or R, which should be left unchanged.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (not (color_equals (color_of this) C))\\n                (not (color_equals (color_of this) G))\\n                (not (color_equals (color_of this) R))\\n                (neighbor_of this other)\\n            )\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (or\\n                (color_equals (color_of this) C)\\n                (color_equals (color_of this) G)\\n                (color_equals (color_of this) R)\\n            )\\n        )\\n        (apply\\n            (noop)\\n        )\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches '(' in the current parser context, at line 8 col 17\n\n                (not (color_equals (color_of this) R))\n                ^\nExpected one of: \n\t* RPAR\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Recolor all objects to color F, then extend all objects of color F in the direction of the object of color G without overlapping.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) F)\\n                (neighbor_of this other)\\n                (color_equals (color_of other) G)\\n            )\\n        )\\n        (apply\\n            (extend_node (direction_of other) false)\\n        )\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches '(' in the current parser context, at line 15 col 17\n\n                (color_equals (color_of other) G)\n                ^\nExpected one of: \n\t* RPAR\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Fill all 3x3 hollow squares with color F.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (shape_equals (shape_of this) hollow_square)\\n                (size_equals (size_of this) 3)\\n            )\\n        )\\n        (apply\\n            (fill_rectangle F false)\\n        )\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches 'h' in the current parser context, at line 6 col 47\n\n          (shape_equals (shape_of this) hollow_square)\n                                        ^\nExpected one of: \n\t* LPAR\n\t* SHAPE\n"
    },
    {
        "response": "{\"nl_description\": \"Expand all objects to a surrounding box filled with color Y, while filling the outer layer with color F.\",\n \"code\": \"(do \\n (rule \\n (vars (this other)) \\n (filter \\n (neighbor_of this other)) \\n (apply \\n (extend_node outward false) \\n (hollow_rectangle Y) \\n (add_border F) \\n )\\n )\\n)\"}",
        "error_type": "parse_error",
        "error_message": "No terminal matches 'o' in the current parser context, at line 7 col 15\n\n (extend_node outward false) \n              ^\nExpected one of: \n\t* LPAR\n\t* DIRECTION\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Extend all the objects of different colors toward the object with color C, with overlap aloud.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (not (color_equals (color_of this) C))\\n                (neighbor_of this other)\\n                (color_equals (color_of other) C)\\n            )\\n        )\\n        (apply\\n            (extend_node (direction_of other) true)\\n        )\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches '(' in the current parser context, at line 8 col 17\n\n                (color_equals (color_of other) C)\n                ^\nExpected one of: \n\t* RPAR\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Extend all objects towards the center of the grid without overlapping with other objects or going beyond the grid edges.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (extend_node center false)\\n        )\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches 'c' in the current parser context, at line 6 col 26\n\n            (extend_node center false)\n                         ^\nExpected one of: \n\t* LPAR\n\t* DIRECTION\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Fill a 3x3 region around every object with color Y, and encapsulate all objects with color F, then add a 3x3 border around them.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (fill_rectangle Y false)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (or\\n                (color_equals (color_of this) F)\\n                (color_equals (color_of this) G)\\n                (color_equals (color_of this) B)\\n                (color_equals (color_of this) R)\\n                (color_equals (color_of this) C)\\n            )\\n        )\\n        (apply\\n            (add_border W)\\n            (fill_rectangle F false)\\n        )\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches '(' in the current parser context, at line 15 col 17\n\n                (color_equals (color_of this) B)\n                ^\nExpected one of: \n\t* RPAR\n"
    }
]