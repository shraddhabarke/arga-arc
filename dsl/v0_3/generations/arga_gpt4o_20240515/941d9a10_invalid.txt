[
    {
        "response": "{\n    \"nl_description\": \"Recolor both neighbors to the left of vertical stripes with color B, neighbors to the right of vertical stripes with color G, and neighbors in the center with color R.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (neighbor_of this other)\\n                (color_equals (color_of this) X)\\n            )\\n        )\\n        (apply\\n            (update_color (if (and (and (neighbor_of (move_node left)) (not (color_equals (color_of this) Y))) (color_equals (color_of this) X)) B (if (color_equals (color_of this) X) G (if (and (neighbor_of (move_node center)) (not (color_equals (color_of this) Y))) (color_equals (color_of this) R) (color_equals (color_of this) none))))\\n        )\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches 'i' in the current parser context, at line 11 col 28\n\n            (update_color (if (and (and (neighbor_of (move_node lef\n                           ^\nExpected one of: \n\t* COLOR_OF\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Move all objects to the bottom row, those that are neighbors to X change color to B, those in the middle change color to R and those that are 3 rows up from the bottom change color to G.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (neighbor_of this other)\\n                (color_equals (color_of other) X)\\n            )\\n        )\\n        (apply\\n            (update_color B)\\n            (move_node down)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (column_equals (column_of this) center)\\n        )\\n        (apply\\n            (update_color R)\\n            (move_node down)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (neighbor_of this center)\\n                (neighbor_of (neighbor_of this))\\n            )\\n        )\\n        (apply\\n            (update_color G)\\n            (move_node down)\\n        )\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches 'c' in the current parser context, at line 29 col 35\n\n                (neighbor_of this center)\n                                  ^\nExpected one of: \n\t* VAR\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Recolor all objects that are neighbors of X in a specific manner: those in the top part to B, those in the middle part to R, and those in the bottom part to G.\",\n    \"code\": \"(do\\n  (rule\\n    (vars (this other))\\n    (filter\\n      (and\\n        (neighbor_of this other)\\n        (color_equals (color_of other) X)\\n      )\\n    )\\n    (apply\\n      (update_color B)\\n    )\\n  )\\n  (rule\\n    (vars (this other))\\n    (filter\\n      (and\\n        (neighbor_of this other)\\n        (color_equals (color_of other) X)\\n        (not (color_equals (color_of this) B))\\n      )\\n    )\\n    (apply\\n      (update_color R)\\n    )\\n  )\\n  (rule\\n    (vars (this other))\\n    (filter\\n      (and\\n        (neighbor_of this other)\\n        (color_equals (color_of other) X)\\n        (not (color_equals (color_of this) B))\\n        (not (color_equals (color_of this) R))\\n      )\\n    )\\n    (apply\\n      (update_color G)\\n    )\\n  )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches '(' in the current parser context, at line 20 col 9\n\n        (not (color_equals (color_of this) B))\n        ^\nExpected one of: \n\t* RPAR\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Move all objects that are neighbors of an X upwards, and recolor them to specific colors: B for the first, R for the second, and G for the third.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (neighbor_of this other)\\n                (color_equals (color_of other) X)\\n            )\\n        )\\n        (apply\\n            (move_node up)\\n            (update_color B)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) B)\\n        )\\n        (apply\\n            (move_node down)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) B)\\n                (neighbor_of this other)\\n                (color_equals (color_of other) X)\\n            )\\n        )\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) R)\\n                (neighbor_of this other)\\n                (color_equals (color_of other) X)\\n            )\\n        )\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches '(' in the current parser context, at line 30 col 17\n\n                (color_equals (color_of other) X)\n                ^\nExpected one of: \n\t* RPAR\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Recolor all objects of color different than X. The object in the top-left corner to color B, the object in the middle to color R, and the object in the bottom-right corner to color G.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (not (color_equals (color_of this) X))\\n                (column_equals (column_of this) 0)\\n            )\\n        )\\n        (apply\\n            (update_color B)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (not (color_equals (color_of this) X))\\n                (column_equals (column_of this) (column_of this))\\n            )\\n        )\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (not (color_equals (color_of this) X))\\n                (column_equals (column_of this) -1)\\n            )\\n        )\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches '-' in the current parser context, at line 31 col 49\n\n        (column_equals (column_of this) -1)\n                                        ^\nExpected one of: \n\t* LPAR\n\t* COLUMN\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Move all objects at the corners one step toward the center, and then recolor them to blue, red, or green.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (or\\n                (or\\n                    (img_pts_of this top_left)\\n                    (img_pts_of this top_right)\\n                )\\n                (or\\n                    (img_pts_of this bottom_left)\\n                    (img_pts_of this bottom_right)\\n                )\\n            )\\n        )\\n        (apply\\n            (move_node middle)\\n            (update_color\\n                (or\\n                    (or\\n                        (and (color_of this) \\\"B\\\")\\n                        (and (color_of this) \\\"R\\\")\\n                    )\\n                    (color_of this)\\n                )\\n            )\\n        )\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches 'i' in the current parser context, at line 7 col 22\n\n                    (img_pts_of this top_left)\n                     ^\nExpected one of: \n\t* SHAPE_EQ\n\t* OP_OR\n\t* SIZE_EQ\n\t* NEIGHBOR_OF\n\t* WIDTH_EQ\n\t* COLUMN_EQ\n\t* OP_AND\n\t* HEIGHT_EQ\n\t* COLOR_EQ\n\t* OP_NOT\n\t* DEGREE_EQ\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Move all objects colored O to the left edge if they are horizontal neighbors of the object X, and then recolor them to different colors based on their vertical positions.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) O)\\n                (neighbor_of this other)\\n                (color_equals (color_of other) X)\\n            )\\n        )\\n        (apply\\n            (move_node_max left)\\n            (update_color B B B R R R G G G)\\n        )\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches '(' in the current parser context, at line 8 col 17\n\n                (color_equals (color_of other) X)\n                ^\nExpected one of: \n\t* RPAR\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Recolor topmost neighbors of the vertical 'X' patterns to B, middle horizontal neighbors to R, and bottommost neighbors to G.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (neighbor_of this other)\\n                (color_equals (color_of other) X)\\n            )\\n        )\\n        (apply\\n            (move_node_max (direction_of other))\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (color_equals (color_of this) O)\\n                (column_equals (column_of this) center)\\n            )\\n        )\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (color_equals (color_of this) O)\\n                (row_equals (row_of this) top)\\n            )\\n        )\\n        (apply\\n            (update_color B)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (color_equals (color_of this) O)\\n                (row_equals (row_of this) bottom)\\n            )\\n        )\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches 'r' in the current parser context, at line 31 col 18\n\n                (row_equals (row_of this) top)\n                 ^\nExpected one of: \n\t* SHAPE_EQ\n\t* OP_OR\n\t* SIZE_EQ\n\t* NEIGHBOR_OF\n\t* WIDTH_EQ\n\t* COLUMN_EQ\n\t* OP_AND\n\t* HEIGHT_EQ\n\t* COLOR_EQ\n\t* OP_NOT\n\t* DEGREE_EQ\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Recolor the first instance in each row of an object adjacent to objects in color X to B. Recolor the first instance in each row of an object adjacent to objects surrounded by rows of X to R. Recolor the first instance in each row of an object adjacent to objects in color X with another adjacent object in color X below it to G.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (column_equals (size_of this) 2)\\n                (color_equals (color_of other) X)\\n            )\\n        )\\n        (apply\\n            (update_color B)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (column_equals (size_of this) 5)\\n                (color_equals (color_of other) X)\\n            )\\n        )\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (column_equals (color_of this) 1)\\n                (color_equals (color_of other) X)\\n            )\\n        )\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches 's' in the current parser context, at line 6 col 33\n\n                (column_equals (size_of this) 2)\n                                ^\nExpected one of: \n\t* COLUMN_OF\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Color the leftmost object above the object of maximum width in color B. Color the rightmost object below it in color G. Recolor any other leftmost object above it and rightmost object below it in color R.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (column_equals (column_of this) (column_of other))\\n                (and\\n                    (not (color_equals (color_of this) X))\\n                    (width_equals (width_of other) max)\\n                )\\n            )\\n        )\\n        (apply\\n            (update_color B)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (column_equals (column_of this) (column_of other))\\n                (and\\n                    (color_equals (color_of this) G)\\n                    (width_equals (width_of other) max)\\n                )\\n            )\\n        )\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (column_equals (column_of this) (column_of other))\\n                (and\\n                    (not (color_equals (color_of this) X))\\n                    (column_equals (column_of this) left)\\n                )\\n            )\\n        )\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (column_equals (column_of this) (column_of other))\\n                (and\\n                    (not (color_equals (color_of this) X))\\n                    (column_equals (column_of this) right)\\n                )\\n            )\\n        )\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches 'l' in the current parser context, at line 39 col 53\n\n        (column_equals (column_of this) left)\n                                        ^\nExpected one of: \n\t* LPAR\n\t* COLUMN\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Extend all objects of color B, R, or G towards the nearest X object, without overlapping.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (or (color_equals (color_of this) B) (or (color_equals (color_of this) R) (color_equals (color_of this) G)))\\n                (neighbor_of this other)\\n                (color_equals (color_of other) X)\\n            )\\n        )\\n        (apply\\n            (extend_node (direction_of other) false)\\n        )\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches '(' in the current parser context, at line 8 col 17\n\n                (color_equals (color_of other) X)\n                ^\nExpected one of: \n\t* RPAR\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Move all objects of size 2 one step left, then recolor them to color B. Move objects of size 4 towards the center, and recolor them. Recolor remaining bottom-right objects to G.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (size_equals (size_of this) 2)\\n        )\\n        (apply\\n            (move_node left)\\n            (update_color B)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (size_equals (size_of this) 4)\\n        )\\n        (apply\\n            (move_node center)\\n            (update_color R)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (size_equals (size_of this) 4)\\n                (column_equals (column_of this) right)\\n            )\\n        )\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches 'c' in the current parser context, at line 18 col 24\n\n            (move_node center)\n                       ^\nExpected one of: \n\t* LPAR\n\t* DIRECTION\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Color the objects in the top left quadrant blue, in the bottom left quadrant red, and in the bottom right quadrant green.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (or\\n                    (and\\n                        (column_equals (column_of this) min)\\n                        (and\\n                            (or\\n                                (row_equals (row_of this) min)\\n                                (row_equals (row_of this) min)\\n                            )\\n                            (or\\n                                (column_equals (column_of this) min)\\n                                (column_equals (column_of this) min)\\n                            )\\n                        )\\n                    )\\n                    (or\\n                        (and\\n                            (column_equals (column_of this) max)\\n                            (row_equals (row_of this) max)\\n                        )\\n                        (and\\n                            (column_equals (column_of this) min)\\n                            (row_equals (row_of this) max)\\n                        )\\n                    )\\n                )\\n                (color_equals (color_of this) O)\\n            )\\n        )\\n        (apply\\n            (update_color B)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (or\\n                    (and\\n                        (column_equals (column_of this) max)\\n                        (and\\n                            (or\\n                                (row_equals (row_of this) min)\\n                                (row_equals (row_of this) min)\\n                            )\\n                            (or\\n                                (column_equals (column_of this) min)\\n                                (column_equals (column_of this) min)\\n                            )\\n                        )\\n                    )\\n                    (or\\n                        (and\\n                            (column_equals (column_of this) max)\\n                            (row_equals (row_of this) max)\\n                        )\\n                        (and\\n                            (column_equals (column_of this) min)\\n                            (row_equals (row_of this) max)\\n                        )\\n                    )\\n                )\\n                (color_equals (color_of this) O)\\n            )\\n        )\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (or\\n                    (and\\n                        (column_equals (column_of this) max)\\n                        (and\\n                            (or\\n                                (row_equals (row_of this) min)\\n                                (row_equals (row_of this) min)\\n                            )\\n                            (or\\n                                (column_equals (column_of this) min)\\n                                (column_equals (column_of this) min)\\n                            )\\n                        )\\n                    )\\n                    (or\\n                        (and\\n                            (column_equals (column_of this) max)\\n                            (row_equals (row_of this) max)\\n                        )\\n                        (and\\n                            (column_equals (column_of this) min)\\n                            (row_equals (row_of this) max)\\n                        )\\n                    )\\n                )\\n                (color_equals (color_of this) O)\\n            )\\n        )\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches 'm' in the current parser context, at line 8 col 57\n\n        (column_equals (column_of this) min)\n                                        ^\nExpected one of: \n\t* LPAR\n\t* COLUMN\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Recolor each column of objects that are not X according to their position relative to X in the same column: top to B, middle to R, bottom to G.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (not (color_equals (color_of this) X))\\n                (column_equals (column_of this) (column_of other))\\n            )\\n        )\\n        (apply\\n            (update_color B)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (not (color_equals (color_of this) X))\\n                (and\\n                    (ball\\n                        (ball\\n                            (neighbor_of this other)\\n                            (color_equals (color_of other) X)\\n                        )\\n                        (row_equals (row_of this) (row_of other))\\n                    )\\n                    (row_equals (row_of this) middle)\\n                )\\n            )\\n        )\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (not (color_equals (color_of this) X))\\n                (column_equals (column_of this) (column_of other))\\n                (row_equals (row_of this) bottom)\\n            )\\n        )\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches 'b' in the current parser context, at line 20 col 22\n\n                    (ball\n                     ^\nExpected one of: \n\t* SHAPE_EQ\n\t* OP_OR\n\t* SIZE_EQ\n\t* NEIGHBOR_OF\n\t* WIDTH_EQ\n\t* COLUMN_EQ\n\t* OP_AND\n\t* HEIGHT_EQ\n\t* COLOR_EQ\n\t* OP_NOT\n\t* DEGREE_EQ\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Change the color of all isolated objects of size 3 on the top left region to B, change the color of all isolated objects of size 3 in the middle to R, and change the color of all isolated objects of size 3 on the bottom right region to G.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter (and (size_equals (size_of this) 3) (column_equals (column_of this) left)))\\n        (apply (update_color B))\\n    )\\n    (rule\\n        (vars (this))\\n        (filter (and (size_equals (size_of this) 3) (column_equals (column_of this) center)))\\n        (apply (update_color R))\\n    )\\n    (rule\\n        (vars (this))\\n        (filter (and (size_equals (size_of this) 3) (column_equals (column_of this) right)))\\n        (apply (update_color G))\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches 'l' in the current parser context, at line 4 col 85\n\nhis) 3) (column_equals (column_of this) left)))\n                                        ^\nExpected one of: \n\t* LPAR\n\t* COLUMN\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Recolor leftmost, topmost and bottommost objects to B, the middle objects to R and the rightmost and bottom-right objects to G.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) O)\\n                (or\\n                    (and\\n                        (color_equals (color_of other) X)\\n                        (NEIGHBOR_OF this other)\\n                        (or\\n                            (COLUMN_EQ (column_of this) \\\"0\\\")\\n                            (COLUMN_EQ (column_of this) \\\"1\\\")\\n                        )\\n                    )\\n                    (and\\n                        (color_equals (color_of other) this)\\n                        (HEIGHT_EQ (height_of this) min)\\n                        (width_equals (width_of this) min)\\n                    )\\n                )\\n            )\\n        )\\n        (apply\\n            (update_color B)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) O)\\n                (or\\n                    (and\\n                        (COLUMN_EQ (column_of this) center)\\n                        (height_equals (height_of this) min)\\n                    )\\n                    (and\\n                        (color_equals (color_of other) this)\\n                        (HEIGHT_EQ (height_of this) max)\\n                        (width_equals (width_of this) max)\\n                    )\\n                )\\n            )\\n        )\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) O)\\n                (or\\n                    (and\\n                        (COLUMN_EQ (column_of this) even)\\n                        (height_equals (height_of this) max)\\n                    )\\n                    (and\\n                        (COLUMN_EQ (column_of this) max)\\n                        (color_equals (color_of other) X)\\n                        (NEIGHBOR_OF this other)\\n                    )\\n                )\\n            )\\n        )\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches 'N' in the current parser context, at line 10 col 26\n\n                        (NEIGHBOR_OF this other)\n                         ^\nExpected one of: \n\t* SHAPE_EQ\n\t* OP_OR\n\t* SIZE_EQ\n\t* NEIGHBOR_OF\n\t* WIDTH_EQ\n\t* COLUMN_EQ\n\t* OP_AND\n\t* HEIGHT_EQ\n\t* COLOR_EQ\n\t* OP_NOT\n\t* DEGREE_EQ\n"
    },
    {
        "response": "{\n    \"nl_description\": \"For all objects of size 2 that are neighbors of objects of color X, move them to the direction of X. If the moved object's initial position is below the object of color X, recolor it to R; if left to it, recolor it to B; if right to it, recolor it to G.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (size_equals (size_of this) 2)\\n                (neighbor_of this other)\\n                (color_equals (color_of other) X)\\n            )\\n        )\\n        (apply\\n            (move_node (direction_of other))\\n            (update_color (if (height_equals (height_of this) middle) R (if (column_equals (column_of this) min) B G)))\\n        )\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches '(' in the current parser context, at line 8 col 17\n\n                (color_equals (color_of other) X)\n                ^\nExpected one of: \n\t* RPAR\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Move all objects of size 3 that are neighbors of object 'x' blocks, and then recolor them as 'B', 'R' or 'G'.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (size_equals (size_of this) 3)\\n                (neighbor_of this other)\\n                (color_equals (color_of other) X)\\n            )\\n        )\\n        (apply\\n            (move_node_max (direction_of other))\\n            (update_color (color_of this))\\n        )\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches '(' in the current parser context, at line 8 col 17\n\n                (color_equals (color_of other) X)\n                ^\nExpected one of: \n\t* RPAR\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Move all objects of size 3 toward the object of size 1, and change their colors to B, R, and G for each section they move to respectively.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (size_equals (size_of this) 3)\\n                (size_equals (size_of other) 1)\\n                (neighbor_of this other)\\n            )\\n        )\\n        (apply\\n            (move_node (direction_of other))\\n            (update_color B)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (size_equals (size_of this) 3)\\n                (size_equals (size_of other) 1)\\n                (neighbor_of this other)\\n            )\\n        )\\n        (apply\\n            (move_node (direction_of other))\\n            (update_color R)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (size_equals (size_of this) 3)\\n                (size_equals (size_of other) 1)\\n                (neighbor_of this other)\\n            )\\n        )\\n        (apply\\n            (move_node (direction_of other))\\n            (update_color G)\\n        )\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches '(' in the current parser context, at line 8 col 17\n\n                (neighbor_of this other)\n                ^\nExpected one of: \n\t* RPAR\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Move all objects adjacent to rows of X's one step left and recolor them based on their initial row position.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (neighbor_of this other)\\n                (and\\n                    (color_equals (color_of other) X)\\n                    (or\\n                        (and\\n                            (column_equals (column_of this) 1)\\n                            (column_equals (column_of other) 2)\\n                        )\\n                        (and\\n                            (column_equals (column_of this) 2)\\n                            (column_equals (column_of other) 3)\\n                        )\\n                    )\\n                )\\n            )\\n        )\\n        (apply\\n            (move_node left)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (column_equals (column_of this) 1)\\n        )\\n        (apply\\n            (update_color B)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (column_equals (column_of this) 2)\\n                (color_equals (color_of (neighbor_of this)) X)\\n            )\\n        )\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (column_equals (column_of this) 2)\\n                (or\\n                    (neighbor_of (neighbor_of this) G)\\n                    (neighbor_of (neighbor_of this) X)\\n                )\\n            )\\n        )\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches '(' in the current parser context, at line 40 col 41\n\n                (color_equals (color_of (neighbor_of this)) X)\n                                        ^\nExpected one of: \n\t* VAR\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Recolor the objects next to the vertical line of X's to B at the top, R in the middle, and G at the bottom.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (neighbor_of this other)\\n                (color_equals (color_of other) X)\\n            )\\n        )\\n        (apply\\n            (update_color B)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (column_equals (column_of this) 6)\\n                (neighbor_of this other)\\n                (color_equals (color_of other) X)\\n            )\\n        )\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (column_equals (column_of this) max)\\n                (neighbor_of this other)\\n                (color_equals (color_of other) X)\\n            )\\n        )\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches '(' in the current parser context, at line 20 col 17\n\n                (color_equals (color_of other) X)\n                ^\nExpected one of: \n\t* RPAR\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Move all objects of color O towards the closest object of color X, and then recolor them based on their new position's column index.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) O)\\n                (neighbor_of this other)\\n            )\\n        )\\n        (apply\\n            (move_node (direction_of other))\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (color_equals (color_of this) O)\\n                (or \\n                    (column_equals (column_of this) (column_of (X)))\\n                    (column_equals (column_of this) (column_of (R)))\\n                    (column_equals (column_of this) (column_of (G)))\\n                )\\n            )\\n        )\\n        (apply\\n            (update_color (color_of (this)))\\n        )\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches '(' in the current parser context, at line 20 col 64\n\nlumn_equals (column_of this) (column_of (X)))\n                                        ^\nExpected one of: \n\t* VAR\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Recolor all objects that are left-neighbors of the objects of color X with the color B, recolor those that are bottom-neighbors with the color G, and recolor those that are top-neighbors with the color R.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (neighbor_of this other)\\n                (and\\n                    (color_equals (color_of other) X)\\n                    (direction_equals (direction_of this) left)\\n                )\\n            )\\n        )\\n        (apply\\n            (update_color B)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (neighbor_of this other)\\n                (and\\n                    (color_equals (color_of other) X)\\n                    (direction_equals (direction_of this) bottom)\\n                )\\n            )\\n        )\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (neighbor_of this other)\\n                (and\\n                    (color_equals (color_of other) X)\\n                    (direction_equals (direction_of this) top)\\n                )\\n            )\\n        )\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches 'd' in the current parser context, at line 9 col 22\n\n                    (direction_equals (direction_of this) lef\n                     ^\nExpected one of: \n\t* SHAPE_EQ\n\t* OP_OR\n\t* SIZE_EQ\n\t* NEIGHBOR_OF\n\t* WIDTH_EQ\n\t* COLUMN_EQ\n\t* OP_AND\n\t* HEIGHT_EQ\n\t* COLOR_EQ\n\t* OP_NOT\n\t* DEGREE_EQ\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Recolor all objects that are in the first three rows to color B, all objects that are in the middle three rows to color R, and all objects that are in the last three rows to color G, while leaving objects of color X unmodified.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (or\\n                    (or\\n                        (neighbor_of this this)\\n                        (neighbor_of this this)\\n                    )\\n                    (or\\n                        (height_equals (height_of this) 1)\\n                        (height_equals (height_of this) 2)\\n                    )\\n                )\\n                (not (color_equals (color_of this) X))\\n            )\\n        )\\n        (apply\\n            (update_color B)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (or\\n                    (neighbor_of this this)\\n                    (neighbor_of this this)\\n                )\\n                (and\\n                    (height_equals (height_of this) 4)\\n                    (height_equals (height_of this) 6)\\n                )\\n                (not (color_equals (color_of this) X))\\n            )\\n        )\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (or\\n                    (neighbor_of this this)\\n                    (neighbor_of this this)\\n                )\\n                (and\\n                    (height_equals (height_of this) 8)\\n                    (height_equals (height_of this) 10)\\n                )\\n                (not (color_equals (color_of this) X))\\n            )\\n        )\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches '(' in the current parser context, at line 35 col 17\n\n                (not (color_equals (color_of this) X))\n                ^\nExpected one of: \n\t* RPAR\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Move all objects of width 1 to the leftmost position, and then recolor them respectively to colors B, R, and G in different segments of the grid.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (width_equals (width_of this) 1)\\n        )\\n        (apply\\n            (move_node_max left)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) X)\\n                (neighbor_of this other)\\n            )\\n        )\\n        (apply\\n            (update_color (if (row_equals (row_of other) min) B (if (row_equals (row_of other) max) G R)))\\n        )\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches 'i' in the current parser context, at line 20 col 28\n\n            (update_color (if (row_equals (row_of other) min) B (if\n                           ^\nExpected one of: \n\t* COLOR_OF\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Move all objects of size 3 one step left, and then recolor them to color B. Move all objects of size 2 one step right, and then recolor them to color G.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (size_equals (size_of this) 3)\\n        )\\n        (apply\\n            (move_node left)\\n            (update_color B)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (size_equals (size_of this) 2)\\n        )\\n        (apply\\n            (move_node right)\\n            (update_color G)\\n        )\\n    )    \\n    (rule\\n        (vars (this))\\n        (filter\\n            (size_equals (size_of this) 4)\\n        )\\n        (apply\\n            (move_node_down)\\n            (update_color R)\\n        )\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches '_' in the current parser context, at line 28 col 23\n\n            (move_node_down)\n                      ^\nExpected one of: \n\t* LPAR\n\t* DIRECTION\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Update the color of the first three rows to B, the middle three rows to R and the last three rows to G, keeping the X-colored objects unchanged.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (not (color_equals (color_of this) X))\\n                (or\\n                    (and\\n                        (neighbor_of this other)\\n                        (column_equals (column_of this) even)\\n                    )\\n                    (and\\n                        (neighbor_of this other)\\n                        (column_equals (column_of this) odd)\\n                    )\\n                )\\n            )\\n        )\\n        (apply\\n            (update_color B)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (not (color_equals (color_of this) X))\\n                (or\\n                    (and\\n                        (neighbor_of this other)\\n                        (column_equals (column_of this) center)\\n                    )\\n                    (and\\n                        (neighbor_of this other)\\n                        (column_equals (column_of this) outside)\\n                    )\\n                )\\n            )\\n        )\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (not (color_equals (color_of this) X))\\n        )\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches 'o' in the current parser context, at line 35 col 57\n\n        (column_equals (column_of this) outside)\n                                        ^\nExpected one of: \n\t* LPAR\n\t* COLUMN\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Move all objects that are above an object of color X one step down and recolor them to color B. Move all objects that are below an object of color X one step up and recolor them to color G. Move all objects that are to the left of an object of color X one step right and recolor them to color R.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (neighbor_of this other)\\n                (color_equals (color_of other) X)\\n            )\\n        )\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (neighbor_of this other)\\n                (color_equals (color_of other) X)\\n                (column_equals (column_of this) (column_of other))\\n                (and\\n                    (not (color_equals (color_of this) X))\\n                    (not (color_equals (color_of this) R))\\n                )\\n            )\\n        )\\n        (apply\\n            (move_node (if (<= (row_of this) (row_of other)) down up))\\n            (update_color (if (<= (row_of this) (row_of other)) B G))\\n        )\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches '(' in the current parser context, at line 20 col 17\n\n                (column_equals (column_of this) (column_\n                ^\nExpected one of: \n\t* RPAR\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Move all objects of size 2 toward the object X, if they are neighbors of it. Recolor them in the direction specified, with B, G, or R.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (size_equals (size_of this) 2)\\n                (neighbor_of this other)\\n                (color_equals (color_of other) X)\\n            )\\n        )\\n        (apply\\n            (move_node_max (direction_of other))\\n            (update_color (color_of this))\\n        )\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches '(' in the current parser context, at line 8 col 17\n\n                (color_equals (color_of other) X)\n                ^\nExpected one of: \n\t* RPAR\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Recolor the top-left neighbors of the first X in each vertical stripe to B, the right neighbors to R, and the bottom neighbors to G.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (neighbor_of this other)\\n                (and\\n                    (color_equals (color_of other) X)\\n                    (and\\n                        (direction_of this) up\\n                        (column_equals (column_of this) (column_of other))\\n                    )\\n                )\\n            )\\n        )\\n        (apply\\n            (update_color B)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (neighbor_of this other)\\n                (and\\n                    (color_equals (color_of other) X)\\n                    (and\\n                        (direction_of this) right\\n                        (column_equals (column_of this) (column_of other))\\n                    )\\n                )\\n            )\\n        )\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (neighbor_of this other)\\n                (and\\n                    (color_equals (color_of other) X)\\n                    (and\\n                        (direction_of this) down\\n                        (column_equals (column_of this) (column_of other))\\n                    )\\n                )\\n            )\\n        )\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches 'd' in the current parser context, at line 10 col 26\n\n                        (direction_of this) up\n                         ^\nExpected one of: \n\t* SHAPE_EQ\n\t* OP_OR\n\t* SIZE_EQ\n\t* NEIGHBOR_OF\n\t* WIDTH_EQ\n\t* COLUMN_EQ\n\t* OP_AND\n\t* HEIGHT_EQ\n\t* COLOR_EQ\n\t* OP_NOT\n\t* DEGREE_EQ\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Recolor objects near columns of 'X' based on the object's position in the grid.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (neighbor_of this other)\\n                (color_equals (color_of other) X)\\n            )\\n        )\\n        (apply\\n            (update_color (color_of ROW_POSITION))\\n        )\\n    )\\n)\"\n}\n",
        "error_type": "parse_error",
        "error_message": "No terminal matches 'R' in the current parser context, at line 11 col 37\n\n            (update_color (color_of ROW_POSITION))\n                                    ^\nExpected one of: \n\t* VAR\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Color all objects in the left of the solid line to color B, all objects in the middle to color R, and all objects in the right to color G.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (column_equals (column_of this) left)\\n        )\\n        (apply\\n            (update_color B)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (column_equals (column_of this) middle)\\n        )\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (column_equals (column_of this) right)\\n        )\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches 'l' in the current parser context, at line 5 col 45\n\n        (column_equals (column_of this) left)\n                                        ^\nExpected one of: \n\t* LPAR\n\t* COLUMN\n"
    },
    {
        "response": "{\n    \"nl_description\": \"For all objects of size 3 positioned vertically, recolor them as follows: blue in the upper section, red in the middle, and green in the bottom.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (size_equals (size_of this) 3)\\n                (and\\n                    (column_equals (column_of this) (left))\\n                    (neighbor_of this other)\\n                )\\n            )\\n        )\\n        (apply\\n            (update_color B)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (size_equals (size_of this) 3)\\n                (and\\n                    (column_equals (column_of this) (mid))\\n                    (neighbor_of this other)\\n                )\\n            )\\n        )\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (size_equals (size_of this) 3)\\n                (and\\n                    (column_equals (column_of this) (right))\\n                    (neighbor_of this other)\\n                )\\n            )\\n        )\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches 'l' in the current parser context, at line 8 col 54\n\n       (column_equals (column_of this) (left))\n                                        ^\nExpected one of: \n\t* COLUMN_OF\n"
    }
]