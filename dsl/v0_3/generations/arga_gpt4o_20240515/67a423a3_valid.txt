[
    "{\n    \"nl_description\": \"Fill rectangles around the objects of color R and F with color Y.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (or\\n                (color_equals (color_of this) R)\\n                (color_equals (color_of this) F)\\n            )\\n        )\\n        (apply\\n            (fill_rectangle Y false)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"For all objects of shape enclosed, change their color to Y if they are neighbors of an object of color R.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (shape_equals (shape_of this) enclosed)\\n                (and\\n                    (neighbor_of this other)\\n                    (color_equals (color_of other) R)\\n                )\\n            )\\n        )\\n        (apply\\n            (update_color Y)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor the first row of each object containing the color R to color Y.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (not (color_equals (color_of this) O))\\n                (color_equals (color_of this) R)\\n            )\\n        )\\n        (apply\\n            (update_color Y)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Insert a yellow border around all objects of color R and F.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter (or (color_equals (color_of this) R) (color_equals (color_of this) F)))\\n        (apply (add_border Y))\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects that are neighbors of the object of color 'R' to color 'Y'.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (neighbor_of this other)\\n                (color_equals (color_of other) R)\\n            )\\n        )\\n        (apply\\n            (update_color Y)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor the leftmost and rightmost columns of a row to color Y if the row is fully filled with the same color.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (neighbor_of this other)\\n                (and\\n                    (size_equals (size_of this) (size_of other))\\n                    (color_equals (color_of this) (color_of other))\\n                )\\n            )\\n        )\\n        (apply\\n            (update_color Y)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects of width 1 to color Y\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (width_equals (width_of this) 1)\\n        )\\n        (apply\\n            (update_color Y)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of size 1 towards the object of maximum size without overlapping, and then recolor them to color Y.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (size_equals (size_of this) 1)\\n                (and\\n                    (neighbor_of this other)\\n                    (size_equals (size_of other) max)\\n                )\\n            )\\n        )\\n        (apply\\n            (extend_node (direction_of other) false)\\n            (update_color Y)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects of color G to Y.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) G)\\n        )\\n        (apply\\n            (update_color Y)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Add a yellow border to objects of the same color R or F, and larger than height 1, then change their color to yellow.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (height_equals (height_of this) 4)\\n                (or\\n                    (color_equals (color_of this) R)\\n                    (color_equals (color_of this) F)\\n                )\\n            )\\n        )\\n        (apply\\n            (add_border Y)\\n            (update_color Y)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects of width 1 in color Y\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (width_equals (width_of this) 1)\\n        )\\n        (apply\\n            (update_color Y)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Transform objects that vertically align with neighbors of different colors by changing their color and those of their respective immediate neighbors to Y.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (neighbor_of this other)\\n                (not (color_equals (color_of this) (color_of other)))\\n            )\\n        )\\n        (apply\\n            (update_color Y)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all the 2x2 squares at the center of the grids to color Y\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (size_equals (size_of this) 2)\\n                (and\\n                    (column_equals (column_of this) center)\\n                    (neighbor_of this other)\\n                )\\n            )\\n        )\\n        (apply\\n            (update_color Y)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Add a border of color Y around objects of color different from O that have a neighbor of color O.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (not (color_equals (color_of this) O))\\n                (neighbor_of this other)\\n            )\\n        )\\n        (apply\\n            (add_border Y)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects that are neighbors of an object of color R to color Y\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (neighbor_of this other)\\n                (color_equals (color_of other) R)\\n            )\\n        )\\n        (apply\\n            (update_color Y)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Change the color of the border of the row of objects containing more than two elements to the color Y, for only the objects that neighbor them.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (size_equals (size_of this) 4)\\n                (neighbor_of other this)\\n            )\\n        )\\n        (apply\\n            (update_color Y)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all rows that contain objects of color R to color Y.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (color_equals (color_of this) R)\\n        )\\n        (apply\\n            (update_color Y)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor the interior pixels of the square objects to Y.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (shape_equals (shape_of this) square)\\n        )\\n        (apply\\n            (hollow_rectangle Y)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all cells to Y, except when they are neighbors of a cell with the same color that is not Y.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (not (and\\n                (color_equals (color_of this) (color_of other))\\n                (neighbor_of this other)\\n            ))\\n        )\\n        (apply\\n            (update_color Y)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Change the color of the external border of the square objects to color Y\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter \\n            (shape_equals (shape_of this) square)\\n        )\\n        (apply\\n            (add_border Y)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor the objects adjacent to 'Y' to match 'Y'.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (neighbor_of this other)\\n                (color_equals (color_of other) Y)\\n            )\\n        )\\n        (apply\\n            (update_color Y)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects of size 4 to color Y.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (size_equals (size_of this) 4)\\n        )\\n        (apply\\n            (update_color Y)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Extend all objects of maximum size if they are neighbors of other objects, without overlapping, and recolor them to Y.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (size_equals (size_of this) max)\\n                (neighbor_of this other)\\n            )\\n        )\\n        (apply\\n            (extend_node (direction_of other) false)\\n            (update_color Y)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor the center row of each object to color Y\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (column_equals (column_of this) center)\\n                (size_equals (size_of this) 4)\\n            )\\n        )\\n        (apply\\n            (update_color Y)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Fill with color Y any cell such that there's at least one orthogonally adjacent cell in the same row or column with the same color.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) G)\\n                (and\\n                    (neighbor_of this other)\\n                    (color_equals (color_of other) G)\\n                )\\n            )\\n        )\\n        (apply\\n            (update_color Y)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) R)\\n                (and\\n                    (neighbor_of this other)\\n                    (color_equals (color_of other) R)\\n                )\\n            )\\n        )\\n        (apply\\n            (update_color Y)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) F)\\n                (and\\n                    (neighbor_of this other)\\n                    (color_equals (color_of other) F)\\n                )\\n            )\\n        )\\n        (apply\\n            (update_color Y)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor the neighbors of objects of color G to color Y.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of other) G)\\n                (neighbor_of this other)\\n            )\\n        )\\n        (apply\\n            (update_color Y)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor horizontal and vertical monochromatic stripes of width 2 to Y, and horizontal stripes of width 4 to Y, while leaving stripes of width 1 and 3 unchanged.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (or\\n                (and\\n                    (width_equals (width_of this) 2)\\n                    (shape_equals (shape_of this) square)\\n                )\\n                (width_equals (width_of this) 4)\\n            )\\n        )\\n        (apply\\n            (update_color Y)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Change the border of each rectangular object to color Y\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n            (apply\\n                (add_border Y)\\n            )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Form horizontal lines of color Y through the centers of vertical segments of color B.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (color_equals (color_of this) B)\\n                (size_equals (size_of this) max)\\n            )\\n        )\\n        (apply\\n            (fill_rectangle Y false)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor the rows where all elements are the same as color Y, except for rows with one different element in the middle.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (neighbor_of this other)\\n                (color_equals (color_of this) (color_of other))\\n            )\\n        )\\n        (apply\\n            (update_color Y)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all the objects enclosed by objects of the same color to color Y.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (degree_equals (degree_of this) 4)\\n                (and\\n                    (neighbor_of this other)\\n                    (color_equals (color_of this) (color_of other))\\n                )\\n            )\\n        )\\n        (apply\\n            (update_color Y)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Extend all vertical objects of width 1 and length of 4 cells.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (width_equals (width_of this) 1)\\n                (height_equals (height_of this) 4)\\n            )\\n        )\\n        (apply\\n            (extend_node down false)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects of size 3 to color Y.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (size_equals (size_of this) 3)\\n        )\\n        (apply\\n            (update_color Y)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor objects with color G, R, and C, if they are surrounded by objects of color O.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (color_equals (color_of this) G)\\n        )\\n        (apply\\n            (update_color Y)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (color_equals (color_of this) R)\\n        )\\n        (apply\\n            (update_color Y)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (color_equals (color_of this) C)\\n        )\\n        (apply\\n            (update_color Y)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects in columns shared by red or fuchsia objects to yellow.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (or\\n                    (color_equals (color_of other) R)\\n                    (color_equals (color_of other) F)\\n                )\\n                (column_equals (column_of this) (column_of other))\\n            )\\n        )\\n        (apply\\n            (update_color Y)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Add a new yellow border around objects of column center.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (column_equals (column_of this) center)\\n        )\\n        (apply\\n            (add_border Y)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Extend all objects of maximum size toward their neighbors.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (size_equals (size_of this) max)\\n                (neighbor_of this other)\\n            )\\n        )\\n        (apply\\n            (extend_node (direction_of other) false)\\n        )    \\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Add a border of color Y to objects of height 4\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (height_equals (height_of this) 4)\\n        )\\n        (apply\\n            (add_border Y)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all non-center objects to yellow Y if they are neighbors of non-square object.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (not (shape_equals (shape_of this) square))\\n                (neighbor_of this other)\\n            )\\n        )\\n        (apply\\n            (update_color Y)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor the rows that have objects of size 4 to color Y.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (width_equals (width_of this) 4)\\n        )\\n        (apply\\n            (update_color Y)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Color the objects in the same column as an object of color G and R to color Y\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (or\\n                (color_equals (color_of other) G)\\n                (color_equals (color_of other) R)\\n            )\\n        )\\n        (apply\\n            (update_color Y)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor objects of size 3 to color Y if they are neighbors of an object of size 4.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (size_equals (size_of this) 3)\\n                (and\\n                    (neighbor_of this other)\\n                    (size_equals (size_of other) 4)\\n                )\\n            )\\n        )\\n        (apply\\n            (update_color Y)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Extend all objects of size 1 horizontally without overlapping, and recolor the objects intersecting the left border to Y.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (size_equals (size_of this) 1)\\n        )\\n        (apply\\n            (extend_node right false)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (column_equals (column_of this) 0)\\n        )\\n        (apply\\n            (update_color Y)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Add a border of color Y around the largest middle object in each grid.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (size_equals (size_of this) max)\\n        )\\n        (apply\\n            (add_border Y)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Add a yellow border around objects of the maximum size.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (size_equals (size_of this) max)\\n        )\\n        (apply\\n            (add_border Y)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor the neighboring objects of color different than 'B' and 'F' to yellow, encapsulated by these objects.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (not (or (color_equals (color_of this) B) (color_equals (color_of this) F)))\\n                (neighbor_of this other)\\n            )\\n        )\\n        (apply\\n            (update_color Y)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor the interior vertical lines of objects to color Y.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (column_equals (column_of this) center)\\n                (color_equals (color_of this) R)\\n            )\\n        )\\n        (apply\\n            (update_color Y)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor the object with the greatest degree (connectivity) to color Y\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (degree_equals (degree_of this) max)\\n        )\\n        (apply\\n            (update_color Y)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects except the ones with color F to color Y.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (not (color_equals (color_of this) F))\\n        )\\n        (apply\\n            (update_color Y)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Add a yellow border of color Y to the central objects.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (neighbor_of this other)\\n                (size_equals (size_of other) max)\\n            )\\n        )\\n        (apply\\n            (add_border Y)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects of color G to Y, while replacing objects of color G that are neighbors of an object of color R and Y.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (or\\n                (color_equals (color_of this) G)\\n                (and\\n                    (neighbor_of this other)\\n                    (and\\n                        (color_equals (color_of this) Y)\\n                        (color_equals (color_of other) R)\\n                    )\\n                )\\n            )\\n        )\\n        (apply\\n            (update_color Y)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Change color to Y for all objects that are neighbors of an object of color 'B' or 'R' and change R to Y.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (neighbor_of this other)\\n                (or\\n                    (color_equals (color_of other) B)\\n                    (color_equals (color_of other) R)\\n                )\\n            )\\n        )\\n        (apply\\n            (update_color Y)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) R)\\n        )\\n        (apply\\n            (update_color Y)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects of size 3 to color Y.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (size_equals (size_of this) 3)\\n        )\\n        (apply\\n            (update_color Y)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Transform the objects of the maximum size by extending them in the given direction without overlapping, and then recolor them to color Y.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (size_equals (size_of this) max)\\n                (neighbor_of this other)\\n            )\\n        )\\n        (apply\\n            (extend_node (direction_of other) false)\\n            (update_color Y)\\n        )\\n    )\\n)\"\n}"
]