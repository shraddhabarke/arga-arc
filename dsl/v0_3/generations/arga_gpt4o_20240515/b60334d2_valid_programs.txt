(do
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) X)
        )
        (apply
            (extend_node right false)
            (extend_node left false)
            (extend_node up false)
            (extend_node down false)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) X)
        )
        (apply
            (update_color B)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter (color_equals (color_of this) X))
        (apply
            (extend_node up_left false)
            (update_color B)
            (extend_node up_right false)
            (update_color B)
            (extend_node down_left false)
            (update_color B)
            (extend_node down_right false)
            (update_color B)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) X)
        )
        (apply
            (move_node up)
            (update_color B)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) X)
        )
        (apply
            (move_node down)
            (update_color B)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) X)
        )
        (apply
            (move_node left)
            (update_color B)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) X)
        )
        (apply
            (move_node right)
            (update_color B)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) X)
        )
        (apply
            (move_node up)
            (extend_node left false)
            (extend_node right false)
            (update_color B)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) X)
        )
        (apply
            (extend_node left true)
            (update_color B)
            (extend_node right true)
            (update_color B)
        )
    )
)

(do (rule (vars (this)) (filter (color_equals (color_of this) X)) (apply (extend_node up false) (extend_node down false) (extend_node left false) (extend_node right false) (update_color B))))

(do
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) X)
        )
        (apply
            (extend_node left false)
            (extend_node right false)
        )
    )
    (rule
        (vars (this other))
        (filter
            (and
                (color_equals (color_of this) X)
                (neighbor_of other this)
            )
        )
        (apply
            (update_color B)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (neighbor_of this other)
        )
        (apply
            (update_color B)
                (insert 0 bottom source)
        )
    ))

(do
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) X)
        )
        (apply
            (extend_node down true)
            (extend_node up true)
            (extend_node left true)
            (extend_node right true)
            (update_color B)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (and
                (not (color_equals (color_of this) X))
                (and
                    (neighbor_of this other)
                    (color_equals (color_of other) X)
                )
            )
        )
        (apply
            (move_node_max (direction_of other))
            (update_color B)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) X)
        )
        (apply
            (extend_node up_left false)
            (update_color B)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) X)
        )
        (apply
            (move_node up_left)
            (move_node up_left)
            (update_color B)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (color_equals (color_of this) X)
        )
        (apply
            (extend_node right false)
            (extend_node left false)
            (extend_node up false)
            (extend_node down false)
            (update_color B)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) X)
        )
        (apply
            (extend_node right false)
            (update_color B)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) X)
        )
        (apply
            (extend_node left false)
            (update_color B)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) X)
        )
        (apply
            (extend_node up_left false)
            (extend_node up false)
            (extend_node up_right false)
            (extend_node right false)
            (extend_node down_right false)
            (extend_node down false)
            (extend_node down_left false)
            (extend_node left false)
            (update_color B)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (color_equals (color_of this) X)
        )
        (apply
            (move_node_max left)
            (update_color B)
        )
    )
    (rule
        (vars (this other))
        (filter
            (color_equals (color_of this) O)
        )
        (apply
            (move_node_max right)
            (update_color B)
        )
    )
)

(do (rule (vars (this)) (filter (color_equals (color_of this) X)) (apply (insert 3 top_left target) (insert 3 top_right target) (insert 3 bottom_left target) (insert 3 bottom_right target) (move_node_max left) (move_node_max right) (update_color B) (move_node_max down) (move_node_max up))))

(do
  (rule
    (vars (this other))
    (filter
      (and
        (neighbor_of this other)
        (color_equals (color_of other) X)
      )
    )
    (apply
      (update_color B)
    )
  )
)

(do
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) X)
        )
        (apply
            (move_node up)
        )
    )
    (rule
        (vars (this other))
        (filter
            (and
                (color_equals (color_of other) X)
                (neighbor_of this other)
            )
        )
        (apply
            (update_color B)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (and
                (neighbor_of this other)
                (color_equals (color_of other) X)
            )
        )
        (apply
            (update_color B)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) X)
        )
        (apply
            (move_node_max (direction_of this))
            (update_color B)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (and
                (color_equals (color_of this) X)
                (neighbor_of this other)
            )
        )
        (apply
            (move_node (direction_of other))
            (update_color B)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (and
                (color_equals (color_of this) O)
                (and
                    (neighbor_of this other)
                    (color_equals (color_of other) X)
                )
            )
        )
        (apply
            (move_node_max (direction_of other))
            (update_color B)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (color_equals (color_of this) X)
        )
        (apply
            (insert 1 top_left source)
            (insert 1 top source)
            (insert 1 top_right source)
            (insert 1 left source)
            (insert 1 right source)
            (insert 1 bottom_left source)
            (insert 1 bottom source)
            (insert 1 bottom_right source)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (and
                (color_equals (color_of this) X)
                (neighbor_of this other)
            )
        )
        (apply
            (fill_rectangle B false)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) X)
        )
        (apply
            (extend_node left false)
            (extend_node right false)
            (update_color B)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (color_equals (color_of this) X)
        )
        (apply
            (move_node_max (direction_of other))
            (update_color B)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (color_equals (color_of this) X)
        )
        (apply
            (extend_node up false)
            (extend_node down false)
            (extend_node left false)
            (extend_node right false)
            (update_color B)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (color_equals (color_of this) X)
        )
        (apply
            (insert 1 top_left target)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) X)
        )
        (apply
            (move_node_max down)
            (update_color B)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (or
                (color_equals (color_of this) X)
                (and
                    (neighbor_of this other)
                    (color_equals (color_of other) X)
                )
            )
        )
        (apply
            (move_node (direction_of other))
            (update_color B)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) X)
        )
        (apply
            (fill_rectangle B false)
            (add_border B)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) X)
        )
        (apply
            (extend_node up false)
            (extend_node down false)
            (extend_node left false)
            (extend_node right false)
        )
    )
)

(do
  (rule
    (vars (this))
    (filter
      (color_equals (color_of this) X)
    )
    (apply
      (extend_node up false)
      (extend_node down false)
      (extend_node left false)
      (extend_node right false)
      (update_color B)
    )
  )
)

(do
    (rule
        (vars (this other))
        (filter
            (color_equals (color_of this) X)
        )
        (apply
            (update_color B)
        )
    )
    (rule
        (vars (this other))
        (filter
            (neighbor_of this other)
        )
        (apply
            (update_color B)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) X)
        )
        (apply
            (add_border B)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) X)
        )
        (apply
            (move_node up)
        )
    )
    (rule
        (vars (this other))
        (filter
            (and
                (color_equals (color_of other) X)
                (neighbor_of this other)
            )
        )
        (apply
            (update_color B)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) X)
        )
        (apply
            (insert 0 top_left source)
            (insert 0 top_right source)
            (insert 0 bottom_left source)
            (insert 0 bottom_right source)
            (update_color B)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (and
                (color_equals (color_of this) O)
                (and
                    (neighbor_of this other)
                    (color_equals (color_of other) X)
                )
            )
        )
        (apply
            (update_color B)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) X)
        )
        (apply
            (extend_node (direction_of this) false)
            (update_color B)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) X)
        )
        (apply
            (extend_node left true)
            (extend_node right true)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (and
                (color_equals (color_of this) X)
                (and
                    (size_equals (size_of this) 1)
                    (neighbor_of this other)
                )
            )
        )
        (apply
            (move_node_max up)
            (update_color B)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) X)
        )
        (apply
            (move_node_max up)
        )
    )
    (rule
        (vars (this other))
        (filter
            (and
                (neighbor_of this other)
                (color_equals (color_of other) X)
            )
        )
        (apply
            (update_color B)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) X)
        )
        (apply
            (extend_node up_left false)
            (update_color B)
            (extend_node up_right false)
            (update_color B)
            (extend_node down_left false)
            (update_color B)
            (extend_node down_right false)
            (update_color B)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (color_equals (color_of this) X)
        )
        (apply
            (move_node_max (direction_of other))
        )
    )
    (rule
        (vars (this other))
        (filter
            (and
                (neighbor_of this other)
                (color_equals (color_of other) X)
            )
        )
        (apply
            (update_color B)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) X)
        )
        (apply
            (extend_node right false)
            (extend_node down false)
            (extend_node left false)
            (extend_node up false)
            (update_color B)
        )
    )
)