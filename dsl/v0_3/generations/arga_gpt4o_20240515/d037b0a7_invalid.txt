[
    {
        "response": "{\n    \"nl_description\": \"Recolor the bottom neighbor of each object to their respective color.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (neighbor_of this other)\\n        )\\n        (apply\\n            (do\\n                (rule\\n                    (vars (this))\\n                    (filter\\n                        (and\\n                            (color_equals (color_of other) R)\\n                            (neighbor_of this other)\\n                        )\\n                    )\\n                    (apply\\n                        (update_color R)\\n                    )\\n                )\\n                (rule\\n                    (vars (this))\\n                    (filter\\n                        (and\\n                            (color_equals (color_of other) Y)\\n                            (neighbor_of this other)\\n                        )\\n                    )\\n                    (apply\\n                        (update_color Y)\\n                    )\\n                )\\n                (rule\\n                    (vars (this))\\n                    (filter\\n                        (and\\n                            (color_equals (color_of other) A)\\n                            (neighbor_of this other)\\n                        )\\n                    )\\n                    (apply\\n                        (update_color A)\\n                    )\\n                )\\n            )\\n        )\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches 'd' in the current parser context, at line 8 col 14\n\n            (do\n             ^\nExpected one of: \n\t* TR_FLIP\n\t* TR_ADD_BORDER\n\t* TR_UPDATE_COLOR\n\t* TR_INSERT\n\t* TR_MIRROR\n\t* TR_NOOP\n\t* TR_HOLLOW_RECTANGLE\n\t* TR_EXTEND_NODE\n\t* TR_MOVE_NODE_MAX\n\t* TR_MOVE_NODE\n\t* TR_ROTATE_NODE\n\t* TR_FILL_RECTANGLE\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Move all objects of size 1 down and then recolor them to color of object Y.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (size_equals (size_of this) 1)\\n        )\\n        (apply\\n            (move_node down)\\n            (update_color (color_of Y))\\n        )\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches 'Y' in the current parser context, at line 9 col 37\n\n            (update_color (color_of Y))\n                                    ^\nExpected one of: \n\t* VAR\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Extend all objects of size 1 toward the object of color F and update their color to Y, without overlapping.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (size_equals (size_of this) 1)\\n                (color_equals (color_of other) F)\\n                (neighbor_of this other)\\n            )\\n        )\\n        (apply\\n            (extend_node (direction_of other) false)\\n            (update_color Y)\\n        )\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches '(' in the current parser context, at line 8 col 17\n\n                (neighbor_of this other)\n                ^\nExpected one of: \n\t* RPAR\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Extend all objects of size 1 towards the `F` colored object, without overlapping.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (size_equals (size_of this) 1)\\n                (color_equals (color_of other) F)\\n                (neighbor_of this other)\\n            )\\n        )\\n        (apply\\n            (extend_node (direction_of other) false)\\n        )\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches '(' in the current parser context, at line 8 col 17\n\n                (neighbor_of this other)\n                ^\nExpected one of: \n\t* RPAR\n"
    }
]