[
    "{\n    \"nl_description\": \"Recolor all objects to their corresponding distinct colors as follows: replace X with G, B with G, and G with B.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter (color_equals (color_of this) X))\\n        (apply (update_color G))\\n    )\\n    (rule\\n        (vars (this))\\n        (filter (color_equals (color_of this) G))\\n        (apply (update_color B))\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor objects to color B, G, or R based on their previous color.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) X)\\n        )\\n        (apply\\n            (update_color B)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) G)\\n        )\\n        (apply\\n            (update_color B)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) B)\\n        )\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects of color X: objects in the first grid get recolored to their random number corresponding to their position, but starting from top-left: B, G, R.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) X)\\n        )\\n        (apply\\n            (update_color B)\\n        )\\n    )\\n     (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) B)\\n        )\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n     (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) G)\\n        )\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Change the color of all 'X' objects in the input grids to 'B', all neighboring objects of 'X' in the first pair to 'G', and all fields in contact with 'X' on the diagonal in the extra pairs to 'R' and 'G'.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) X)\\n        )\\n        (apply\\n            (update_color B)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (neighbor_of this other)\\n                (color_equals (color_of other) X)\\n            )\\n        )\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (neighbor_of this other)\\n                (color_equals (color_of other) B)\\n            )\\n        )\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (neighbor_of this other)\\n                (color_equals (color_of other) G)\\n            )\\n        )\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects of color X with different colors.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (color_equals (color_of this) X)\\n        )\\n        (apply\\n            (update_color B)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (color_equals (color_of this) X)\\n        )\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (color_equals (color_of this) X)\\n        )\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n)\\n\"\n}",
    "{\n    \"nl_description\": \"Recolor objects of color X to different colors.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) X)\\n        )\\n        (apply\\n            (update_color B)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) B)\\n                (neighbor_of this other)\\n            )\\n        )\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) R)\\n                (neighbor_of this other)\\n            )\\n        )\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) G)\\n                (neighbor_of this other)\\n            )\\n        )\\n        (apply\\n            (update_color Y)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor objects in different colors based on their vertical position.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) X)\\n        )\\n        (apply\\n            (update_color B)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) G)\\n        )\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) B)\\n        )\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) R)\\n        )\\n        (apply\\n            (update_color O)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) O)\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects to different colors based on the quadrants in which they are located.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (column_equals (column_of this) even)\\n                (color_equals (color_of this) X)\\n            )\\n        )\\n        (apply\\n            (update_color B)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (column_equals (column_of this) odd)\\n                (color_equals (color_of this) X)\\n            )\\n        )\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (column_equals (column_of this) odd)\\n        )\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects to color matching their neighbors, when the color of the neighbor is X.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (neighbor_of this other)\\n                (color_equals (color_of other) X)\\n            )\\n        )\\n        (apply\\n            (update_color (color_of other))\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor objects by moving them up one step if their size equals 2, and changing their color to an adjacent object's color\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (size_equals (size_of this) 2)\\n                (neighbor_of this other)\\n            )\\n        )\\n        (apply\\n            (move_node up)\\n            (update_color (color_of other))\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects of color X to their own distinct new colors.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) X)\\n        )\\n        (apply\\n            (update_color B)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) B)\\n        )\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) G)\\n        )\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects to different colors: X to B, G to R, and Y to G.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) X)\\n        )\\n        (apply\\n            (update_color B)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) G)\\n        )\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) Y)\\n        )\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects to their unique color based on their initial positioning, with a sequence of predefined colors.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (color_equals (color_of this) X)\\n        )\\n        (apply\\n            (update_color B)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (color_equals (color_of this) G)\\n        )\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (color_equals (color_of this) R)\\n        )\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (color_equals (color_of this) X)\\n        )\\n        (apply\\n            (update_color B)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (color_equals (color_of this) B)\\n        )\\n        (apply\\n            (update_color B)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor objects of color X to different colors based on neighboring objects.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) X)\\n                (neighbor_of this other)\\n            )\\n        )\\n        (apply\\n            (update_color (color_of other))\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects from their current color to a new unique color.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter (color_equals (color_of this) X))\\n        (apply (update_color B))\\n    )\\n    (rule\\n        (vars (this))\\n        (filter (color_equals (color_of this) B))\\n        (apply (update_color R))\\n    )\\n    (rule\\n        (vars (this))\\n        (filter (color_equals (color_of this) R))\\n        (apply (update_color G))\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor objects of color X in each input grid to different colors.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) X)\\n        )\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) X)\\n        )\\n        (apply\\n            (update_color B)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) X)\\n        )\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects to colors G, B, or R for different instances of X objects.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) X)\\n                (neighbor_of this other)\\n            )\\n        )\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) G)\\n                (neighbor_of this other)\\n            )\\n        )\\n        (apply\\n            (update_color B)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) B)\\n                (neighbor_of this other)\\n            )\\n        )\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects to distinct colors: G, B, or R, while preserving their initial configuration.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter (neighbor_of this other))\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter (neighbor_of this other))\\n        (apply\\n            (update_color B)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter (neighbor_of this other))\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects of color X. First recolor the objects of size 4 to color B, then the objects of size 2 to color G, and finally the objects of size 1 to color R.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter (and (color_equals (color_of this) X) (size_equals (size_of this) 4)))\\n        (apply (update_color B)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter (and (color_equals (color_of this) X) (size_equals (size_of this) 2)))\\n        (apply (update_color G)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter (and (color_equals (color_of this) X) (size_equals (size_of this) 1)))\\n        (apply (update_color R))\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all X objects to one of the following colors based on the input grid: B, G, or R.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) X)\\n        )\\n        (apply\\n            (update_color B)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) X)\\n        )\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) X)\\n        )\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all the objects to different colors based on their size and position:\",\n    \"code\": \"(do\\n (rule\\n   (vars (this other))\\n   (filter\\n     (and\\n       (neighbor_of this other)\\n       (color_equals (color_of other) X)))\\n   (apply\\n     (update_color B)\\n     (move_node_max (direction_of other))\\n  )\\n )\\n (rule\\n   (vars (this))\\n   (filter)\\n   (apply\\n     (update_color R)))\\n (rule\\n   (vars (this))\\n   (filter)\\n   (apply\\n    (update_color G)\\n  )\\n )\\n (rule \\n    (vars (this))\\n    (filter)\\n    (apply\\n     (update_color B)\\n  )\\n ))\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects to color G if they are neighbors of an object of color X, otherwise recolor them to color R.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (neighbor_of this other)\\n        )\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (not (neighbor_of this other))\\n        )\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects of color X. If the object is in first pair grid, recolor to B, if it is in the second pair grid, recolor to R, and if it is in the third pair grid, recolor to G.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) X)\\n        )\\n        (apply\\n            (update_color B)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) X)\\n        )\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) X)\\n        )\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects of color X to G if they are part of the main diagonal, otherwise recolor them to B and neighbors of an X object with color R are recolored to R.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) X)\\n        )\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (neighbor_of this other)\\n                (color_equals (color_of other) X)\\n            )\\n        )\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (color_equals (color_of this) X)\\n                (not (color_equals (color_of this) G))\\n            )\\n        )\\n        (apply\\n            (update_color B)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects to color R, G, or B depending on their position relative to the maximum object.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (size_equals (size_of other) max)\\n                (neighbor_of this other)\\n            )\\n        )\\n        (apply\\n            (update_color (color_of other))\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all the objects of color X to different colors in a pattern.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) X)\\n        )\\n        (apply\\n            (update_color B)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) X)\\n        )\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) X)\\n        )\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects of color X to different colors.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) X)\\n        )\\n        (apply\\n            (update_color B)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and \\n                (color_equals (color_of this) B)\\n                (neighbor_of this other)\\n            )\\n        )\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and \\n                (color_equals (color_of this) G)\\n                (neighbor_of this other)\\n            )\\n        )\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor objects that are neighbors of grey objects. They should be colored in a sequence of B, G, R respectively.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (neighbor_of this other)\\n        )\\n        (apply\\n            (update_color B)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of other) B)\\n                (neighbor_of this other)\\n            )\\n        )\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of other) G)\\n                (neighbor_of this other)\\n            )\\n        )\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects to B if they are on the left, to G if they are on the top left, and to R if they are on the top right.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter (neighbor_of this other))\\n        (apply\\n            (update_color B)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter (and (neighbor_of this other) (color_equals (color_of other) X)))\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter (and (neighbor_of this other) (color_equals (color_of other) X)))\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects to color B, G, or R, moving objects one step up if needed.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter (size_equals (size_of this) 2))\\n        (apply (update_color B))\\n    )\\n    (rule\\n        (vars (this))\\n        (filter (size_equals (size_of this) 2))\\n        (apply (move_node up))\\n    )\\n    (rule\\n        (vars (this))\\n        (filter (size_equals (size_of this) 3))\\n        (apply (update_color G))\\n    )\\n    (rule\\n        (vars (this))\\n        (filter (size_equals (size_of this) 3))\\n        (apply (move_node up))\\n    )\\n    (rule\\n        (vars (this))\\n        (filter (size_equals (size_of this) 4))\\n        (apply (update_color R))\\n    )\\n    (rule\\n        (vars (this))\\n        (filter (size_equals (size_of this) 4))\\n        (apply (move_node up))\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects of color X to a different color from the list B, G, and R, based on their original position.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) X)\\n        )\\n        (apply\\n            (update_color B)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (color_equals (color_of this) B)\\n                (column_equals (column_of this) center)\\n            )\\n        )\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (color_equals (color_of this) B)\\n                (column_equals (column_of this) even)\\n            )\\n        )\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Change the color of all X objects to match the surrounding neighbors: top-left X to G, other Xs in the same rows/columns to their neighbor's colors, and the bottom-right X to R.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter (and (color_equals (color_of this) X) (neighbor_of this other)))\\n        (apply (update_color (color_of other)))\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor objects to B if partially bordered by X, G if X are fully connected horizontally, and R if vertically.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (neighbor_of this other)\\n        )\\n        (apply\\n            (update_color B)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of other) X)\\n                (column_equals (column_of this) (column_of other))\\n            )\\n        )\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of other) X)\\n                (not (column_equals (column_of this) (column_of other)))\\n            )\\n        )\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of color X on step towards up and then change color X objects into different colors based on size of objects in the grid.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n           (color_equals (color_of this) X)\\n        )\\n        (apply\\n            (move_node up)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n           (size_equals (size_of this) 2)\\n        )\\n        (apply\\n            (update_color B)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n           (size_equals (size_of this) 3)\\n        )\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n           (size_equals (size_of this) 4)\\n        )\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n           (size_equals (size_of this) 5)\\n        )\\n        (apply\\n            (update_color B)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects to a color matching the top-left most object in each connected component.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color (color_of this))\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects to different colors based on their size: size 2 to B, size 4 to R, size 5 to G.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (size_equals (size_of this) 2)\\n        )\\n        (apply\\n            (update_color B)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (size_equals (size_of this) 4)\\n        )\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (size_equals (size_of this) 5)\\n        )\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor objects in columns 3, 4, and 7 with colors B, R, and G respectively.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (column_equals (column_of this) 3)\\n        )\\n        (apply\\n            (update_color B)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (column_equals (column_of this) 4)\\n        )\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (column_equals (column_of this) 7)\\n        )\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of color X one step up, and then recolor them to colors from a sequence (B, R, G).\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) X)\\n        )\\n        (apply\\n            (move_node up)\\n            (update_color B)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) B)\\n        )\\n        (apply\\n            (move_node up)\\n            (update_color R)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) R)\\n        )\\n        (apply\\n            (move_node up)\\n            (update_color G)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects to the same color as their neighbors with a different color.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (neighbor_of this other)\\n                (not (color_equals (color_of this) (color_of other)))\\n            )\\n        )\\n        (apply\\n            (update_color (color_of other))\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects of color X to match the color of their neighboring objects.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) X)\\n                (neighbor_of this other)\\n            )\\n        )\\n        (apply\\n            (update_color (color_of other))\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor different clusters of 'X's with different colors: 'B', 'R', 'G', or 'B', starting from the top and following a right-down direction.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) X)\\n                (not (neighbor_of this other))\\n            )\\n        )\\n        (apply\\n            (update_color B)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) X)\\n                (and\\n                    (neighbor_of this other)\\n                    (color_equals (color_of other) B)\\n                )\\n            )\\n        )\\n        (apply\\n            (update_color B)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) X)\\n                (not (neighbor_of this other))\\n            )\\n        )\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) X)\\n                (and\\n                    (neighbor_of this other)\\n                    (color_equals (color_of other) R)\\n                )\\n            )\\n        )\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) X)\\n                (not (neighbor_of this other))\\n            )\\n        )\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) X)\\n                (and\\n                    (neighbor_of this other)\\n                    (color_equals (color_of other) G)\\n                )\\n            )\\n        )\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) X)\\n                (not (neighbor_of this other))\\n            )\\n        )\\n        (apply\\n            (update_color B)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) X)\\n                (and\\n                    (neighbor_of this other)\\n                    (color_equals (color_of other) B)\\n                )\\n            )\\n        )\\n        (apply\\n            (update_color B)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor objects of color X to color different based on input-output examples.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) X)\\n        )\\n        (apply\\n            (update_color B)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) G)\\n                (neighbor_of this other)\\n            )\\n        )\\n        (apply\\n            (update_color B)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) R)\\n                (neighbor_of this other)\\n            )\\n        )\\n        (apply\\n            (update_color X)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects of color X to their respective new colors based on groups.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) X)\\n        )\\n        (apply\\n            (update_color B)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) X)\\n        )\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) X)\\n        )\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects of color X to their respective object-specific color (orange, green, red, blue).\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) X)\\n        )\\n        (apply\\n            (update_color A)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) X)\\n        )\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) X)\\n        )\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) X)\\n        )\\n        (apply\\n            (update_color B)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects of color X to different colors in the order they appeared.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter (color_equals (color_of this) X))\\n        (apply\\n            (update_color B)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter (color_equals (color_of this) X))\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter (color_equals (color_of this) X))\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects to different colors based on their original color.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter (color_equals (color_of this) X))\\n        (apply (update_color B))\\n    )\\n    (rule\\n        (vars (this))\\n        (filter (color_equals (color_of this) B))\\n        (apply (update_color G))\\n    )\\n    (rule\\n        (vars (this))\\n        (filter (color_equals (color_of this) G))\\n        (apply (update_color R))\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects from X to different colors in a specific pattern for each grid.\",\n    \"code\": \"(do    \\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) X)\\n        )\\n        (apply\\n            (update_color B)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) X)\\n        )\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) X)\\n        )\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n)\\n\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects of color X to their respective unique colors: objects at the top-left are colored B, center objects are colored G, bottom-right objects are colored R.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) X)\\n        )\\n        (apply\\n            (update_color B)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) X)\\n        )\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) X)\\n        )\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects of color X to different colors according to their position: B for the top-left, G for the middle-left, and R for the bottom-right.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) X)\\n        )\\n        (apply\\n            (update_color B)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) X)\\n        )\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) X)\\n        )\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects of color X to various colors in repeated order G, R, B.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter (color_equals (color_of this) X))\\n        (apply \\n            (update_color G)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter (color_equals (color_of this) X))\\n        (apply \\n            (update_color R)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter (color_equals (color_of this) X))\\n        (apply \\n            (update_color B)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Change the color of all objects colored with X according to their placement in the grid. The color of objects in the top rows become B, middle rows become G, and bottom rows become R.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter (color_equals (color_of this) X))\\n        (apply\\n            (update_color B)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter (color_equals (color_of this) G))\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter (color_equals (color_of this) R))\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor objects of size 2 to color G, objects of size 3 to color B, and objects of size 4 to color R.\",\n    \"code\": \"(do \\n    (rule \\n        (vars (this)) \\n        (filter (size_equals (size_of this) 2)) \\n        (apply (update_color G)) \\n    )\\n    (rule \\n        (vars (this)) \\n        (filter (size_equals (size_of this) 3)) \\n        (apply (update_color B)) \\n    )\\n    (rule \\n        (vars (this)) \\n        (filter (size_equals (size_of this) 4)) \\n        (apply (update_color R)) \\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects with color X to alternating colors B, G, or R.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) X)\\n        )\\n        (apply\\n            (update_color B)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) B)\\n        )\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) G)\\n        )\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n)\"\n}"
]