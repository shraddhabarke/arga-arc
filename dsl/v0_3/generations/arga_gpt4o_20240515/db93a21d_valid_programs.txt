(do
    (rule
        (vars (this))
        (filter
            (shape_equals (shape_of this) enclosed)
        )
        (apply
            (update_color B)
        )
    )
    (rule
        (vars (this))
        (filter
            (shape_equals (shape_of this) square)
        )
        (apply
            (update_color G)
        )
    )
    (rule
        (vars (this))
        (filter
            (size_equals (size_of this) max)
        )
        (apply
            (add_border G)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (shape_equals (shape_of this) enclosed)
        )
        (apply
            (add_border G)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) W)
        )
        (apply
            (add_border B)
            (add_border G)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (size_equals (size_of this) 1)
        )
        (apply
            (update_color G)
        )
    )
    (rule
        (vars (this))
        (filter
            (size_equals (size_of this) 4)
        )
        (apply
            (update_color B)
        )
    )
    (rule
        (vars (this))
        (filter
            (size_equals (size_of this) 9)
        )
        (apply
            (update_color W)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color G)
        )
    )
    (rule
        (vars (this other))
        (filter
            (and
                (color_equals (color_of this) W)
                (neighbor_of this other)
            )
        )
        (apply
            (update_color B)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) B)
        )
        (apply
            (move_node up_left)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) B)
        )
        (apply
            (add_border G)
        )
    )    
)

(do (rule (vars (this other)) (filter (and (neighbor_of this other) (color_equals (color_of other) W))) (apply (update_color G))) (rule (vars (this other)) (filter (and (neighbor_of this other) (color_equals (color_of this) G))) (apply (update_color B))) (rule (vars (this other)) (filter (and (neighbor_of this other) (color_equals (color_of other) G))) (apply (update_color O))))

(do
    (rule
        (vars (this))
        (filter)
        (apply
            (add_border G)
        )
    )
    (rule
        (vars (this other))
        (filter
            (neighbor_of this other)
        )
        (apply
            (move_node (direction_of other))
            (add_border B)
        )
    )
)

(do
  (rule
    (vars (this other))
    (filter
      (and
        (color_equals (color_of this) W)
        (neighbor_of this other)
      )
    )
    (apply
      (extend_node (direction_of other) false)
    )
  )
)

(do
    (rule
        (vars (this other))
        (filter (and (color_equals (color_of this) W) (or (neighbor_of this other) (neighbor_of other this))))
        (apply
            (update_color G)
        )
    )
    (rule
        (vars (this other))
        (filter (and (color_equals (color_of this) W) (or (neighbor_of this other) (neighbor_of other this))))
        (apply
            (update_color B)
        )
    )
    (rule
        (vars (this other))
        (filter (and (color_equals (color_of this) O) (or (neighbor_of this other) (neighbor_of other this))))
        (apply
            (update_color G)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) W)
        )
        (apply
            (update_color G)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) O)
        )
        (apply
            (update_color B)
        )
    )
    (rule
        (vars (this other))
        (filter
            (and
                (color_equals (color_of this) G)
                (neighbor_of this other)
            )
        )
        (apply
            (move_node (direction_of other))
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) B)
        )
        (apply
            (move_node down)
            (extend_node down false)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (size_equals (size_of this) 4)
        )
        (apply
            (move_node_max up)
            (move_node_max down)
            (move_node_max left)
            (move_node_max right)
            (update_color G)
        )
    )
    (rule
        (vars (this))
        (filter
            (size_equals (size_of this) 12)
        )
        (apply
            (update_color B)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (and
                (color_equals (color_of this) W)
                (shape_equals (shape_of this) enclosed)
            )
        )
        (apply
            (update_color R)
        )
    )
    (rule
        (vars (this))
        (filter
            (size_equals (size_of this) max)
        )
        (apply
            (update_color B)
        )
    )
    (rule
        (vars (this))
        (filter
        )
        (apply
            (update_color G)
        )
    )
)

(do    
    (rule
        (vars (this other))
        (filter
            (and
                (neighbor_of this other)
                (color_equals (color_of other) W)
            )
        )
        (apply
            (update_color G)
        )
    )    
    (rule
        (vars (this other))
        (filter
            (and
                (neighbor_of this other)
                (color_equals (color_of other) W)
            )
        )
        (apply
            (update_color B)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (size_equals (size_of this) 4)
        )
        (apply
            (update_color B)
        )
    )
    (rule
        (vars (this))
        (filter
            (and
                (not (size_equals (size_of this) 4))
                (not (size_equals (size_of this) min))
            )
        )
        (apply
            (update_color G)
        )
    )
    (rule
        (vars (this))
        (filter
            (and
                (not (size_equals (size_of this) 4))
                (size_equals (size_of this) min)
            )
        )
        (apply
            (update_color B)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter (color_equals (color_of this) W))
        (apply (extend_node down false))
    )
    (rule
        (vars (this))
        (filter (color_equals (color_of this) W))
        (apply
            (update_color B)
        )
    )
    (rule
        (vars (this))
        (filter (and (size_equals (size_of this) max) (color_equals (color_of this) G)))
        (apply
            (update_color G)
        )
    )
    (rule
        (vars (this))
        (filter (and (size_equals (size_of this) min) (color_equals (color_of this) G)))
        (apply
            (update_color B)
        )
    )
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color (color_of this))
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (and
                (color_equals (color_of this) W)
                (neighbor_of this other)
            )
        )
        (apply
            (extend_node right true)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) G)
        )
        (apply
            (update_color B)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (and
                (color_equals (color_of this) W)
                (neighbor_of this this)
            )
        )
        (apply
            (add_border G)
        )
    )
    (rule
        (vars (this))
        (filter
            (and
                (color_equals (color_of this) W)
                (shape_equals (shape_of this) enclosed)
            )
        )
        (apply
            (fill_rectangle B false)
        )
    )
    (rule
        (vars (this))
        (filter
            (and
                (height_equals (height_of this) 2)
                (width_equals (width_of this) 2)
            )
        )
        (apply
            (fill_rectangle B false)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) W)
        )
        (apply
            (update_color G)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) B)
        )
        (apply
            (move_node down)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter)
        (apply
            (add_border G)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) W)
        )
        (apply
            (rotate_node 90)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (and
                (shape_equals (shape_of this) enclosed)
                (size_equals (size_of this) max)
            )
        )
        (apply
            (add_border G)
        )
    )
    (rule
        (vars (this))
        (filter
            (and
                (shape_equals (shape_of this) enclosed)
                (not (size_equals (size_of this) max))
            )
        )
        (apply
            (add_border B)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color G)
            (move_node up)
        )
    )
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color B)
            (move_node up)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter (column_equals (column_of this) 1))
        (apply (update_color G))
    )
    (rule
        (vars (this))
        (filter (and (column_equals (column_of this) 2) (not (column_equals (column_of this) 1))))
        (apply (update_color B))
    )
    (rule
        (vars (this))
        (filter (column_equals (column_of this) 2))
        (apply (update_color W))
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (and
                (not (size_equals (size_of this) 1))
                (not (neighbor_of this other))
            )
        )
        (apply
            (extend_node up_right true)
            (extend_node up_left true)
            (extend_node down_right true)
            (extend_node down_left true)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) W)
        )
        (apply
            (update_color G)
        )
    )
    (rule
        (vars (this))
        (filter
            (size_equals (size_of this) 4)
        )
        (apply
            (update_color B)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (color_equals (color_of other) W)
        )
        (apply
            (move_node_max (direction_of other))
            (update_color G)
        )
    )
    (rule
        (vars (this other))
        (filter
            (color_equals (color_of other) B)
        )
        (apply
            (move_node_max (direction_of other))
            (update_color B)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter)
        (apply
            (fill_rectangle G false)
            (add_border B)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (and
                (color_equals (color_of this) W)
                (neighbor_of this other)
            )
        )
        (apply
            (move_node_max down_left)
            (update_color B)
        )
    )
    (rule
        (vars (this))
        (filter
        )
        (apply
            (extend_node right false)
            (extend_node left false)
            (extend_node up false)
            (extend_node down false)
            (extend_node up_left false)
            (extend_node up_right false)
            (extend_node down_left false)
            (extend_node down_right false)
            (update_color G)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter)
        (apply
            (extend_node right false)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color G)
            (move_node up)
            (move_node down)
            (move_node left)
            (move_node right)
            (extend_node up false)
            (extend_node down false)
            (extend_node left false)
            (extend_node right false)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter)
        (apply
            (update_color G)
        )
    )
    (rule
        (vars (this other))
        (filter
            (neighbor_of this other)
        )
        (apply
            (update_color B)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (and
                (size_equals (size_of this) 2)
                (color_equals (color_of this) W)
            )
        )
        (apply
            (update_color G)
        )
    )
    (rule
        (vars (this))
        (filter
            (and
                (size_equals (size_of this) 4)
                (color_equals (color_of this) W)
            )
        )
        (apply
            (update_color B)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter)
        (apply
            (add_border G)
        )
    )
    (rule
        (vars (this))
        (filter
            (size_equals (size_of this) max)
        )
        (apply
            (extend_node right false)
            (extend_node left false)
            (extend_node down false)
        )
    )
    (rule
        (vars (this other))
        (filter
            (and
                (size_equals (size_of this) 1)
                (and
                    (neighbor_of this other)
                    (size_equals (size_of other) max)
                )
            )
        )
        (apply
            (update_color B)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (and
                (color_equals (color_of this) W)
                (neighbor_of this other)
            )
        )
        (apply
            (move_node_max (direction_of other))
        )
    )
    (rule
        (vars (this other))
        (filter
            (and
                (not (color_equals (color_of this) W))
                (and
                    (neighbor_of this other)
                    (color_equals (color_of other) W)
                )
            )
        )
        (apply
            (update_color (color_of other))
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) W)
        )
        (apply
            (extend_node up true)
            (update_color G)
        )
    )
    (rule
        (vars (this other))
        (filter
            (and
                (color_equals (color_of other) G)
                (neighbor_of this other)
            )
        )
        (apply
            (update_color B)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (size_equals (size_of this) 4)
        )
        (apply
            (update_color G)
        )
    )
    (rule
        (vars (this))
        (filter
            (size_equals (size_of this) 8)
        )
        (apply
            (update_color B)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (shape_equals (shape_of this) enclosed)
        )
        (apply
            (add_border G)
            (hollow_rectangle B)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (and
                (color_equals (color_of this) W)
                (or
                    (column_equals (column_of this) odd)
                    (column_equals (column_of this) even)
                )
            )
        )
        (apply
            (update_color G)
        )
    )
    (rule
        (vars (this))
        (filter
            (and
                (color_equals (color_of this) W)
                (not (or
                    (column_equals (column_of this) odd)
                    (column_equals (column_of this) even)
                ))
            )
        )
        (apply
            (update_color B)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter (and (column_equals (column_of this) even) (and (neighbor_of this this) (column_equals (column_of this) odd))))
        (apply (update_color G))
    )
    (rule
        (vars (this))
        (filter (and (column_equals (column_of this) even) (and (neighbor_of this this) (column_equals (column_of this) odd))))
        (apply (update_color B))
    )
)

(do
    (rule
        (vars (this))
        (filter)
        (apply
            (add_border Y)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter)
        (apply
            (fill_rectangle (color_of this) false)
        )
    )
)

(do
  (rule
    (vars (this other))
    (filter
        (and
            (color_equals (color_of other) X)
            (neighbor_of this other)
        )
    )
    (apply
        (extend_node (direction_of other) false)
    )
  )
  (rule
    (vars (this))
    (filter
        (color_equals (color_of this) B)
    )
    (apply
        (move_node down)
        (move_node up)
        (update_color B)
    )
  )
  (rule
    (vars (this))
    (filter
        (color_equals (color_of this) O)
    )
    (apply
        (update_color G)
    )
  )
)

(do
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) W)
        )
        (apply
            (move_node_max (direction_of this))
            (update_color G)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter)
            (apply
               (update_color G)
               (move_node down_right)
            )
    )
    (rule
        (vars (this))
        (filter)
            (apply
               (update_color B)
               (move_node down_right)
            )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) W)
        )
        (apply
            (update_color G)
        )
    )
    (rule
        (vars (this other))
        (filter
            (and
                (color_equals (color_of other) G)
                (neighbor_of this other)
            )
        )
        (apply
            (update_color W)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter (not (color_equals (color_of this) O)))
        (apply
            (add_border G)
            (hollow_rectangle B)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (column_equals (column_of this) center)
        )
        (apply
            (update_color G)
        )
    )
    (rule
        (vars (this other))
        (filter
            (and
                (neighbor_of this other)
                (color_equals (color_of other) B)
            )
        )
        (apply
            (update_color B)
        )
    )
    (rule
        (vars (this other))
        (filter
            (and
                (neighbor_of this other)
                (color_equals (color_of other) G)
            )
        )
        (apply
            (update_color G)
        )
    )
)