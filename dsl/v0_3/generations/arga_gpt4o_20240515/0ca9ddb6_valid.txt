[
    "{\n    \"nl_description\": \"Extend all objects of size 1 in all directions equally without overlapping.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (size_equals (size_of this) 1)\\n        )\\n        (apply\\n            (extend_node left false)\\n            (extend_node right false)\\n            (extend_node up false)\\n            (extend_node down false)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Insert object of color A around each object of size 1 that is not colored O.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (size_equals (size_of this) 1)\\n                (not (color_equals (color_of this) O))\\n            )\\n        )\\n        (apply\\n            (insert 1 top_left source)\\n            (insert 1 top_right source)\\n            (insert 1 bottom_left source)\\n            (insert 1 bottom_right source)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all empty spaces (color O) to A if they are at the middle of non-empty spaces.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (color_equals (color_of this) O)\\n                (and\\n                    (neighbor_of this other)\\n                    (not (color_equals (color_of other) O))\\n                )\\n            )\\n        )\\n        (apply\\n            (move_node_max (direction_of other))\\n            (update_color A)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move objects of size 1 to the top and add yellow borders to the neighboring cells of other red and blue\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (size_equals (size_of this) 1)\\n                (neighbor_of this other)\\n  )\\n        )\\n        (apply\\n            (update_color A)\\n            (add_border Y)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Insert objects of color A diagonally around every object of color different than O, enhancing larger objects.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter (not (color_equals (color_of this) O)))\\n        (apply\\n            (insert 1 top_left source)\\n            (insert 1 top_right source)\\n            (insert 1 bottom_left source)\\n            (insert 1 bottom_right source)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Extend all objects except those of color R, towards the object of color R, without overlapping.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (not (color_equals (color_of this) R))\\n                (and\\n                    (neighbor_of this other)\\n                    (color_equals (color_of other) R)\\n                )\\n            )\\n        )\\n        (apply\\n            (extend_node (direction_of other) false)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects of size 1 to color A and then recolor adjacent empty cells between objects of size 1 to color Y.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (size_equals (size_of this) 1)\\n        )\\n        (apply\\n            (update_color A)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) O)\\n                (and\\n                    (neighbor_of this other)\\n                    (color_equals (color_of other) A)\\n                )\\n            )\\n        )\\n        (apply\\n            (update_color Y)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Insert objects of color A around all objects of color different than O within a specific pattern.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (not (color_equals (color_of this) O))\\n        )\\n        (apply\\n            (insert 1 top_left source)\\n            (insert 1 top_right source)\\n            (insert 1 bottom_left source)\\n            (insert 1 bottom_right source)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Insert object A at all top-left corners around non-objectless areas.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (not (color_equals (color_of this) O))\\n                (neighbor_of this other)\\n            )\\n        )\\n        (apply\\n            (insert 1 top_left source)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move size 1 objects to each side and place A in the center.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (size_equals (size_of this) 1)\\n                (neighbor_of this other)\\n            )\\n        )\\n        (apply\\n            (move_node (direction_of other))\\n            (update_color A)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Insert objects of color A surrounding the existing objects in the grid.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (not (color_equals (color_of this) O))\\n        )\\n        (apply\\n            (insert 0 top_left target)\\n            (insert 0 top_right target)\\n            (insert 0 bottom_left target)\\n            (insert 0 bottom_right target)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Add objects of color Y around and between all objects of sizes 3 and 4.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter (or (size_equals (size_of this) 3) (size_equals (size_of this) 4)))\\n        (apply\\n            (insert 0 top_right source)\\n            (insert 0 top_left source)\\n            (insert 0 top source)\\n            (insert 0 bottom_right source)\\n            (insert 0 bottom_left source)\\n            (insert 0 bottom source)\\n            (insert 0 left source)\\n            (insert 0 right source)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Insert a yellow A at the diagonal positions of objects of size 1.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter (size_equals (size_of this) 1))\\n        (apply\\n            (insert 0 top_left source)\\n            (insert 0 top_right source)\\n            (insert 0 bottom_left source)\\n            (insert 0 bottom_right source)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Surround all objects with size 1 using the color A in all four directions, and fill the empty spaces between the surrounded objects with color Y.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (size_equals (size_of this) 1)\\n        )\\n        (apply\\n            (insert 1 top source)\\n            (insert 1 bottom source)\\n            (insert 1 left source)\\n            (insert 1 right source)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color Y)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Surround all objects of size 1 with objects of size 2 on the four orthogonal directions.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (size_equals (size_of this) 1)\\n                (size_equals (size_of other) 2)\\n            )\\n        )\\n        (apply\\n            (insert 2 top source)\\n            (insert 2 bottom source)\\n            (insert 2 left source)\\n            (insert 2 right source)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Insert 'A' nodes to surround nodes of color B, and add 'Y' nodes to surround nodes of color R.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) B)\\n        )\\n        (apply\\n            (insert 1 top_left source)\\n            (insert 1 top source)\\n            (insert 1 top_right source)\\n            (insert 1 left source)\\n            (insert 1 right source)\\n            (insert 1 bottom_left source)\\n            (insert 1 bottom source)\\n            (insert 1 bottom_right source)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) R)\\n        )\\n        (apply\\n            (insert 2 top_left source)\\n            (insert 2 top source)\\n            (insert 2 top_right source)\\n            (insert 2 left source)\\n            (insert 2 right source)\\n            (insert 2 bottom_left source)\\n            (insert 2 bottom source)\\n            (insert 2 bottom_right source)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Extend all objects of size 1 by one step in all directions and then recolor them to color A\",\n    \"code\": \"(do (rule (vars (this other)) (filter (and (size_equals (size_of this) 1) (neighbor_of this other))) (apply (extend_node (direction_of other) false) (update_color A))))\"\n}",
    "{\n    \"nl_description\": \"Insert objects of color A around all objects of size 1.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (size_equals (size_of this) 1)\\n        )\\n        (apply\\n            (insert 67 (img_pts_of this) source)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Insert objects of color Y around objects of size 1.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (size_equals (size_of this) 1)\\n        )\\n        (apply\\n            (insert 0 (img_pts_of this) source)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Add objects of color A adjacent to objects of color B and R, then extend these objects in all four cardinal directions.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (or\\n                (color_equals (color_of this) R)\\n                (color_equals (color_of this) B)\\n            )\\n        )\\n        (apply\\n            (insert 1 top source)\\n            (insert 1 bottom source)\\n            (insert 1 left source)\\n            (insert 1 right source)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) A)\\n        )\\n        (apply\\n            (extend_node up false)\\n            (extend_node down false)\\n            (extend_node left false)\\n            (extend_node right false)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Insert an 'A' object at each adjacent position where any residual edge exists after moving and updating the other objects.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter)\\n        (apply\\n            (update_color Y)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (not (color_equals (color_of this) R))\\n        )\\n        (apply\\n            (move_node left)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (not (color_equals (color_of this) B))\\n        )\\n        (apply\\n            (move_node right)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter (neighbor_of this other))\\n        (apply\\n            (insert 0 top_left target)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"For each object of size 1 that is neighboring an object of size 2, position an identical copy by adding one step to the direction towards the neighboring object, and color the bordered objects and the two neighboring cells yellow\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (size_equals (size_of this) 1)\\n                (size_equals (size_of other) 2)\\n            )\\n        )\\n        (apply\\n            (hollow_rectangle Y)\\n        )\\n    )\\n\\n    (rule\\n        (vars (this other))\\n        (filter\\n        (and\\n                (size_equals (size_of this) 1)\\n                (size_equals (size_of other) 3)\\n            ) \\n        )\\n        (apply\\n            (update_color A)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Insert objects of color A one step toward their neighbors of color different than O.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (neighbor_of this other)\\n                (not (color_equals (color_of other) O))\\n            )\\n        )\\n        (apply\\n            (insert 1 (img_pts_of this) target)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Insert objects of color A at the four diagonal positions around any object.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter (neighbor_of this other))\\n        (apply\\n            (insert 0 top_left source)\\n            (insert 0 top_right source)\\n            (insert 0 bottom_left source)\\n            (insert 0 bottom_right source)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of size 1 toward the nearest object, and then recolor them to color A if they are neighbors of the objects of different sizes.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (not (size_equals (size_of this) 1))\\n                (and\\n                    (neighbor_of this other)\\n                    (size_equals (size_of other) 1)\\n                )\\n            )\\n        )\\n        (apply\\n            (move_node_max (direction_of other))\\n            (update_color A)\\n        )\\n    )\\n)\"\n}\n",
    "{\n    \"nl_description\": \"Extend all objects without overlapping.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (extend_node up_left false)\\n            (extend_node up_right false)\\n            (extend_node down_left false)\\n            (extend_node down_right false)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Insert an object of color A at the position of each other object in the grid except for objects of color R.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (not (color_equals (color_of this) R))\\n                (neighbor_of this other)\\n            )\\n        )\\n        (apply\\n            (insert 1 (img_pts_of other) target)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"If there are objects of color R, A, C or F in the grid then move all the objects of size 1 and recolor them to color A and move them.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (not (color_equals (color_of this) X))\\n                (or\\n                    (color_equals (color_of other) R)\\n                    (or\\n                        (color_equals (color_of other) A)\\n                        (or\\n                            (color_equals (color_of other) C)\\n                            (color_equals (color_of other) F)\\n                        )\\n                    )\\n                )\\n            )\\n        )\\n        (apply\\n            (move_node_max (direction_of other))\\n            (update_color A)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Insert yellow color (Y) at the top, bottom, left, and right sides of red and blue objects, extending to outer edges.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (size_equals (size_of this) 1)\\n                (or\\n                    (color_equals (color_of this) R)\\n                    (color_equals (color_of this) B)\\n                )\\n            )\\n        )\\n        (apply\\n            (insert 1 top source)\\n            (insert 2 right source)\\n            (insert 4 left source)\\n            (insert 7 bottom source)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Insert an object of color Y to the top left and top right of all objects of color different than O if they are neighbors to an object of color O.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (not (color_equals (color_of this) O))\\n                (neighbor_of this other)\\n            )\\n        )\\n        (apply\\n            (insert 0 top_left source)\\n            (insert 0 top_right source)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Insert an object of color A at the diagonal positions of each object of color different than O.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (not (color_equals (color_of this) O))\\n        )\\n        (apply\\n            (insert 1 top_left source)\\n            (insert 1 top_right source)\\n            (insert 1 bottom_left source)\\n            (insert 1 bottom_right source)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Insert objects of size 1 around existing objects, and recolor them to color Y.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter)\\n        (apply\\n            (insert 1 (img_pts_of this) source)\\n            (update_color Y)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Add objects of color A at all the immediate neighbors (up, down, left, right) of existing objects, then move those new objects three steps in the direction of the existing object.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter (neighbor_of this other))\\n        (apply (insert 1 top source))\\n    )\\n    (rule\\n        (vars (this))\\n        (filter (color_equals (color_of this) A))\\n        (apply (move_node_max (direction_of other)))\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of size 1 to adjacent positions around them and recolor them to A if possible.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (size_equals (size_of this) 1)\\n                (neighbor_of this other)\\n            )\\n        )\\n        (apply\\n            (move_node (direction_of other))\\n            (update_color A)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Insert object A at the four corners of all objects of color, then recolor all objects to color Y.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (not (color_equals (color_of this) O))\\n        )\\n        (apply\\n            (insert 0 top_left target)\\n            (insert 0 top_right target)\\n            (insert 0 bottom_left target)\\n            (insert 0 bottom_right target)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (not (color_equals (color_of this) O))\\n        )\\n        (apply\\n            (update_color Y)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Add color A to all objects except for objects colored R, and add color Y around objects colored R.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter (not (color_equals (color_of this) R)))\\n        (apply\\n            (update_color A)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter (color_equals (color_of this) R))\\n        (apply\\n            (add_border Y)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Insert objects of color A in all empty adjacent spaces around the objects of color B, and then insert objects of color Y in all empty spaces at both sides of the objects of color R.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) B)\\n                (neighbor_of other this)\\n            )\\n        )\\n        (apply\\n            (insert 1 top_left source)\\n            (insert 1 top source)\\n            (insert 1 top_right source)\\n            (insert 1 left source)\\n            (insert 1 right source)\\n            (insert 1 bottom_left source)\\n            (insert 1 bottom source)\\n            (insert 1 bottom_right source)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) R)\\n                (or\\n                    (neighbor_of other this)\\n                    (neighbor_of this other)\\n                )\\n            )\\n        )\\n        (apply\\n            (insert 2 left middle)\\n            (insert 2 right middle)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Add objects of color A to all neighbors of objects of color R, then color all objects of color R to color Y.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (neighbor_of this other)\\n                (color_equals (color_of other) R)\\n            )\\n        )\\n        (apply\\n            (insert 1 (img_pts_of this) source)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) R)\\n        )\\n        (apply\\n            (update_color Y)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Add new object of color A to all neighboring rows and columns around each existing object except for the color R, and change color of neighboring objects to Y.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (not (color_equals (color_of this) R))\\n                (neighbor_of this other)\\n            )\\n        )\\n        (apply\\n            (move_node (direction_of other))\\n            (update_color Y)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color A)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Add object A at each side of the object of maximum size, except sides already containing another object, and then recolor all empty spaces between added objects A to color Y.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (size_equals (size_of this) max)\\n        )\\n        (apply\\n            (insert 1 top_left source)\\n            (insert 1 top_right source)\\n            (insert 1 bottom_left source)\\n            (insert 1 bottom_right source)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (size_equals (size_of this) 1)\\n        )\\n        (apply\\n            (update_color Y)\\n        )\\n    )\\n)\"\n}"
]