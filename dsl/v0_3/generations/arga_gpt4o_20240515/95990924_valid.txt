[
    "{\n    \"nl_description\": \"Insert diagonal sequence of colors B, R, G, Y starting at the corner of black (X) objects and moving outwards.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (size_equals (size_of this) 4)\\n        )\\n        (apply\\n            (insert 0 top_right source)\\n            (insert 0 top_left source)\\n            (insert 0 bottom_left source)\\n            (insert 0 bottom_right source)\\n            (update_color B)\\n            (update_color R)\\n            (update_color G)\\n            (update_color Y)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of size 1 to their nearest non-overlapping adjacent position, then recolor those objects.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (size_equals (size_of this) 1)\\n        )\\n        (apply\\n            (move_node_max (direction_of this))\\n            (update_color (color_of this))\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Insert colored objects randomly in the grid except inside the largest objects\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (size_equals (size_of this) max)\\n        )\\n        (apply\\n            (noop)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (not (size_equals (size_of this) max))\\n        )\\n        (apply\\n            (update_color B)\\n            (update_color R)\\n            (update_color G)\\n            (update_color Y)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Insert objects of size 1 at three different positions: bottom-left, top-left, and bottom-right of the largest X, in each grid.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (size_equals (size_of this) 1)\\n        )\\n        (apply\\n            (insert 0 top_left source)\\n            (insert 0 bottom_left source)\\n            (insert 0 bottom_right source)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Insert objects of color B, R, G, and Y at the corners of the grid.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (insert 0 top_left source)\\n            (insert 1 top_right source)\\n            (insert 2 bottom_left source)\\n            (insert 3 bottom_right source)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move and recolor all 1-size objects, from the borders to inside the mesh-like structure of 2x2 objects, in direction of their nearest neighbor (horizontal or vertical), if the neighbor is of a different color.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (size_equals (size_of this) 1)\\n                (neighbor_of this other)\\n            )\\n        )\\n        (apply\\n            (move_node_max (direction_of other))\\n            (update_color (color_of other))\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Color border points of X objects to color B G R and Y respectively, and repeat this in cycles.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) X)\\n        )\\n        (apply\\n            (add_border B)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) B)\\n        )\\n        (apply\\n            (add_border G)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) G)\\n        )\\n        (apply\\n            (add_border R)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) R)\\n        )\\n        (apply\\n            (add_border Y)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Insert multi-colored objects in specific empty slots near the object of color X.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (size_equals (size_of this) 1)\\n                (color_equals (color_of other) X)\\n            )\\n        )\\n        (apply\\n            (insert 0 top_left target)\\n            (insert 0 top_right target)\\n            (insert 0 bottom_left target)\\n            (insert 0 bottom_right target)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Insert objects of colors B, R, G, and Y diagonally in a checker pattern.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (insert 1 top_left source)\\n            (insert 2 top_left source)\\n            (insert 3 top_left source)\\n            (insert 4 top_left source)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Insert objects B, R, G, Y close to the borders of object X.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (color_equals (color_of other) X)\\n        )\\n        (apply\\n            (insert 100 top_left source)\\n            (insert 101 top_right source)\\n            (insert 102 bottom_left source)\\n            (insert 103 bottom_right source)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of size 2 toward the edges of the grid based on their position.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter (size_equals (size_of this) 2))\\n        (apply\\n            (move_node up)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Insert objects of different colors diagonally, avoiding objects with color X.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (not (color_equals (color_of this) X))\\n        )\\n        (apply\\n            (insert 0 bottom_left source)\\n        )\\n    )\\n)\"\n}",
    "{\n  \"nl_description\": \"Move all objects of color X downward such that a pair of X is split into two single cell X and other objects fill the vacated spaces with new colors.\",\n  \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) X)\\n                (color_equals (color_of other) X)\\n            )\\n        )\\n        (apply\\n            (move_node_max down)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (not (color_equals (color_of this) X))\\n        )\\n        (apply\\n            (update_color B)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color B)\\n            (update_color R)\\n            (update_color Y)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of size 1 to random positions\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (size_equals (size_of this) 1)\\n        )\\n        (apply\\n            (move_node up)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (size_equals (size_of this) 1)\\n        )\\n        (apply\\n            (move_node down)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (size_equals (size_of this) 1)\\n        )\\n        (apply\\n            (move_node left)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (size_equals (size_of this) 1)\\n        )\\n        (apply\\n            (move_node right)\\n        )\\n    ))\"\n}",
    "{\n    \"nl_description\": \"Insert new objects of size 1, in a pattern around each object of size 4.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (size_equals (size_of this) 4)\\n        )\\n        (apply\\n            (insert 7 top target)\\n            (insert 8 bottom target)\\n            (insert 9 left middle)\\n            (insert 10 right middle)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Randomly color positions in the grid with colors B, R, G, Y.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color B)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color Y)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move small objects (non-overlapping cells) toward the nearest larger object (X), and color them in random colors.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (not (color_equals (color_of this) X))\\n                (neighbor_of this other)\\n            )\\n        )\\n        (apply\\n            (move_node_max (direction_of other))\\n            (update_color (color_of other))\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Insert new objects of color B, R, G, and Y around all objects of color X.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of other) X)\\n                (or\\n                    (neighbor_of this other)\\n                    (neighbor_of this other)\\n                )\\n            )\\n        )\\n        (apply\\n            (update_color B)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of other) X)\\n                (or\\n                    (neighbor_of this other)\\n                    (neighbor_of this other)\\n                )\\n            )\\n        )\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of other) X)\\n                (or\\n                    (neighbor_of this other)\\n                    (neighbor_of this other)\\n                )\\n            )\\n        )\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of other) X)\\n                (or\\n                    (neighbor_of this other)\\n                    (neighbor_of this other)\\n                )\\n            )\\n        )\\n        (apply\\n            (update_color Y)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move objects of size 1 or 2, which are neighbors to an X object, in the direction away from the X object, if they are neighbors of it.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (neighbor_of this other)\\n                (and\\n                    (or (size_equals (size_of this) 1) (size_equals (size_of this) 2))\\n                    (color_equals (color_of other) X)\\n                )\\n            )\\n        )\\n        (apply\\n            (move_node_max (direction_of other))\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Insert objects B, R, G, Y near the primary diagonal of an object 'X'.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (color_equals (color_of this) X)\\n        )\\n        (apply\\n            (insert 1 top_right source)\\n            (insert 2 bottom_left source)\\n            (insert 3 bottom_right source)\\n            (insert 4 top_left source)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Surround all objects of color X with objects of different colors.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of other) X)\\n                (neighbor_of this other)\\n            )\\n        )\\n        (apply\\n            (update_color (color_of other))\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Insert objects of various colors at specific positions around the grid.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (size_equals (size_of this) 1)\\n        )\\n        (apply\\n            (insert 1 top_left middle)\\n            (insert 2 top_right middle)\\n            (insert 3 bottom_left middle)\\n            (insert 4 bottom_right middle)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move the objects of colors B, R, G, and Y to form a rectangle around the object of color X.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (or\\n                    (color_equals (color_of this) B)\\n                    (or\\n                        (color_equals (color_of this) R)\\n                        (or\\n                            (color_equals (color_of this) G)\\n                            (color_equals (color_of this) Y)\\n                        )\\n                    )\\n                )\\n                (neighbor_of this other)\\n            )\\n        )\\n        (apply\\n            (move_node_max (direction_of other))\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of size 1 to the respective closest X\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (size_equals (size_of this) 1)\\n                (and\\n                    (neighbor_of this other)\\n                    (color_equals (color_of other) X)\\n                )\\n            )\\n        )\\n        (apply\\n            (move_node (direction_of other))\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Insert color objects B, R, G, and Y in all empty spaces near the objects of color X, in clockwise order starting from the top left corner.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (neighbor_of this other)\\n        )\\n        (apply\\n            (update_color B)\\n            (update_color R)\\n            (update_color G)\\n            (update_color Y)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Insert new objects of size 1 in random locations in the grid.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (or\\n                (neighbor_of this other) \\n                (color_equals (color_of other) X)\\n            )\\n         )\\n        (apply\\n            (move_node_max (direction_of other))\\n         )\\n     )\\n)\"\n}",
    "{\n    \"nl_description\": \"Insert objects of colors B, R, G, and Y in the neighborhood of objects of color X.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (neighbor_of this other)\\n        )\\n        (apply\\n            (insert 1 top_left source)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Insert objects of size 1 in a checkerboard pattern.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (size_equals (size_of this) 1)\\n        )\\n        (apply\\n            (move_node_max (direction_of this))\\n            (update_color B)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (size_equals (size_of this) 2)\\n        )\\n        (apply\\n            (move_node_max (direction_of this))\\n            (update_color G)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Reposition objects of size 1 two cells away from the top and bottom rows.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (size_equals (size_of this) 1)\\n                (or \\n                    (column_equals (column_of this) 3)\\n                    (column_equals (column_of this) 2)\\n                )\\n            )\\n        )\\n        (apply\\n            (move_node down)\\n            (move_node right)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of size 1 to the bottom and recolor them to change color in sequence.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (size_equals (size_of this) 1)\\n        )\\n        (apply\\n            (move_node down)\\n            (update_color B)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Insert a shape of color B on the top left of each shape of color X, a shape of color R on the top right, a shape of color G at the bottom left, and a shape of color Y at the bottom right.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter (color_equals (color_of this) X))\\n        (apply\\n            (insert 1 top_left source)\\n            (insert 2 top_right source)\\n            (insert 3 bottom_left source)\\n            (insert 4 bottom_right source)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all empty cells to different colors based on their row or column.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color B)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) O)\\n                (neighbor_of this other)\\n            )\\n        )\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) O)\\n        )\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) O)\\n                (neighbor_of this other)\\n            )\\n        )\\n        (apply\\n            (update_color Y)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Insert the colored objects of size 1 at the outer corners of the grid in a symmetrical pattern.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter (size_equals (size_of this) 1))\\n        (apply\\n            (insert 2 bottom_left middle)\\n            (insert 2 bottom_right middle)\\n            (insert 2 top_left middle)\\n            (insert 2 top_right middle)\\n        )\\n    )\\n)\"\n}",
    "{\n  \"nl_description\": \"Insert four markers of different colors (B, R, G, Y) around objects of color X.\",\n  \"code\": \"(do\\n  (rule\\n    (vars (this other))\\n    (filter\\n      (and\\n        (color_equals (color_of this) X)\\n        (neighbor_of this other)\\n      )\\n    )\\n    (apply\\n      (insert 1 top_left source)\\n      (insert 2 top_right source)\\n      (insert 3 bottom_left source)\\n      (insert 4 bottom_right source)\\n    )\\n  )\\n)\"\n}",
    "{\n    \"nl_description\": \"Insert the objects B, R, G and Y around large squares without overlapping.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) X)\\n                (size_equals (size_of this) 4)\\n            )\\n        )\\n        (apply\\n            (insert 1 top_left target)\\n            (insert 2 top_right target)\\n            (insert 3 bottom_left target)\\n            (insert 4 bottom_right target)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Insert colored objects into the empty cells of the grid in such a way that the colors of the inserted objects form a colorful border around the existing objects.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (not (color_equals (color_of this) X))\\n                (neighbor_of this other)\\n            )\\n        )\\n        (apply\\n            (move_node_max (direction_of other))\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Insert colored objects diagonal to the X objects.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (color_equals (color_of this) X)\\n        )\\n        (apply\\n            (insert 1 top_left source)\\n            (insert 2 bottom_right source)\\n            (insert 3 bottom_left source)\\n            (insert 4 top_right source)\\n        )\\n    )\\n)\"\n}\n",
    "{\n    \"nl_description\": \"Move all objects of size 1 to a specified relative position in the grid, coloring them according to their final positions.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (size_equals (size_of this) 1)\\n        )\\n        (apply\\n            (move_node_max down)\\n            (update_color B)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (size_equals (size_of this) 1)\\n        )\\n        (apply\\n            (move_node_max right)\\n            (update_color R)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (size_equals (size_of this) 1)\\n        )\\n        (apply\\n            (move_node_max left)\\n            (update_color G)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (size_equals (size_of this) 1)\\n        )\\n        (apply\\n            (move_node_max up)\\n            (update_color Y)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Insert colored items in empty spaces in a diagonal pattern starting from top left.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n            (apply\\n                (insert 1 top_left target)\\n                (update_color B)\\n                (insert 2 top_right target)\\n                (update_color R)\\n                (insert 3 bottom_left target)\\n                (update_color G)\\n                (insert 4 bottom_right target)\\n                (update_color Y)\\n            )\\n       )\\n)\"\n}",
    "{\n    \"nl_description\": \"Insert new object of random colors in available spaces around the existing objects.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (insert 0 top_right source)\\n            (insert 0 bottom_left source)\\n            (insert 0 bottom_right source)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Insert new objects of size 1 and colors {B, R, G, Y} horizontally between the objects of color X and the border of the grid.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (size_equals (size_of this) 1)\\n                (and\\n                    (neighbor_of this other)\\n                    (color_equals (color_of other) X)\\n                )\\n            )\\n        )\\n        (apply\\n            (move_node_max (direction_of other))\\n        )\\n    )\\n)\"\n}"
]