{
    "model": "gpt-4o-2024-05-13",
    "usage": {
        "completion_tokens": 12230,
        "prompt_tokens": 5774,
        "total_tokens": 18004,
        "prompt_tokens_details": {
            "cached_tokens": 0
        },
        "completion_tokens_details": {
            "reasoning_tokens": 0
        }
    },
    "request_time": 13.293246507644653,
    "n_requested": 100,
    "prompt_messages": [
        {
            "role": "system",
            "content": "You are an assistant chatbot with human-like perception, reasoning and learning capabilities.\nYou can solve tasks concisely, efficiently, and moreover, correctly.\nLet's engage in perception- and logic-based tasks.\nYou only output source code.\nNo explanations or any other text.\nOnly code."
        },
        {
            "role": "user",
            "content": "You are an efficient assistant for logical reasoning and code generation.\nYou will help me solve a visual perception and reasoning task.\nI will first provide you with the definition of a Domain Specific Language you will use for writing a solution for the task.\nI will then present you with the description of the task that you will be tested in.\nYou will then respond the queries I make regarding the solution of the task.\n\n\nThis is the definition of the DSL you will use to solve the task.\nIt is given as a context-free grammar in the EBNF format used by the Lark parser generator, with some informative comments about the semantics.\nYou will return a string that is parseable by the `program` non-terminal of the grammar.\n\n```\nlibrary: \"(\" program* \")\"\n\n// Rules are executed one after another, in the order they appear.\n// There could be no rules, in which case the program does nothing.\nprogram: \"(\" \"do\" rule* \")\"\n\n// First, it declares the variables that will be used in the filter and transform expressions.\n// Second, it defines a filter expression that an object must satisfy in order to be transformed.\n// Then, it defines a list of transforms that will be applied objects that satisfy the filter expression.\nrule: \"(\" \"rule\" decl filter xform_list \")\"\n\n// The `vars` declaration specifies the names of the variables that will be used in the filter and transform expressions.\n// The `this` variable is always declared, and it refers to the object that is being transformed.\n// There could also be an additional optional variable `other` that refers to another object in the grid,\n// which is not being transformed, but is used in the filter expression.\ndecl: \"(\" \"vars\" \"(\" VAR_THIS VAR_OTHER? \")\" \")\"\n\n// A filter is a predicate over the objects in the grid.\n// If no filter is given, then all the objects are selected.\nfilter: \"(\" \"filter\" filter_expr? \")\"\n\n// It can be a primitive filter operation, or a boolean expression using the `and`, `or`, and `not` connectives.\n// IMPORTANT: The `and` and `or` connectives are strictly binary, so to take the conjunction or disjunction \n// of more than two expressions, the binary connectives must be nested.\n// AGAIN, the `and` and `or` connectives are not variadic, so the following is not allowed:\n// (and true true false)\n// Instead, the following must be used:\n// (and true (and true false))\n// The `not` connective is unary as expected.\n// The objects that are transformed are the ones that satisfy the filter expression.\nfilter_expr: filter_prim\n           | \"(\" OP_AND filter_expr filter_expr \")\"   \n           | \"(\" OP_OR filter_expr filter_expr \")\"\n           | \"(\" OP_NOT filter_expr \")\"\n\nfilter_prim: \"(\" COLOR_EQ fcolor_expr fcolor_expr \")\"           \n           | \"(\" SIZE_EQ size_expr size_expr \")\"                \n           | \"(\" HEIGHT_EQ height_expr height_expr \")\"          \n           | \"(\" WIDTH_EQ width_expr width_expr \")\"             \n           | \"(\" DEGREE_EQ degree_expr degree_expr \")\"          \n           | \"(\" SHAPE_EQ shape_expr shape_expr \")\"             \n           | \"(\" COLUMN_EQ column_expr column_expr \")\"         \n           | \"(\" NEIGHBOR_OF VAR VAR \")\"      // true if the two objects are neighbors\n\n\n// Transforms are applied one after another, in the order they appear.\nxform_list: \"(\" \"apply\" xform+ \")\"\n\n// A single transform is applied to all the objects that are bound to the `this` variable. \n// The transform is applied to each such object independently and simultaneously.\nxform:     \"(\" TR_UPDATE_COLOR color_expr \")\"                          // change this object color to the given color \n         | \"(\" TR_MOVE_NODE direction_expr \")\"                         // move this object in the given direction\n         | \"(\" TR_EXTEND_NODE direction_expr OVERLAP \")\"               // extend (move while leaving a trail) this object in the given direction\n                                                                  // if overlap is false, then the object is extended until it hits another object,\n                                                                  // otherwise it is extended until the edge of the grid.\n         | \"(\" TR_MOVE_NODE_MAX direction_expr \")\"                     // move this object until it hits another object, in the given direction\n         | \"(\" TR_ROTATE_NODE ROT_ANGLE \")\"                       // rotate this object by the given angle\n         | \"(\" TR_ADD_BORDER color_expr \")\"                            // color this exterior pixels of the object with the given color\n         | \"(\" TR_FILL_RECTANGLE color_expr OVERLAP \")\"                // color this interior of a hollow rectangle with the given color\n         | \"(\" TR_HOLLOW_RECTANGLE color_expr \")\"                      // color this interior of a solid rectangle with the given color\n         | \"(\" TR_MIRROR mirror_expr \")\"\n         | \"(\" TR_FLIP SYMMETRY_AXIS \")\"                          // flip this object with respect to the given axis\n         | \"(\" TR_INSERT OBJECT_ID img_pts_expr RELATIVE_POSITION \")\" // insert a copy of this object at the position of the given object\n         | \"(\" TR_NOOP \")\"                                        // do nothing\n\nfcolor_expr: FCOLOR\n           | \"(\" COLOR_OF VAR \")\"\n\ncolor_expr: COLOR\n          | \"(\" COLOR_OF VAR \")\"\n\nsize_expr: SIZE\n         | \"(\" SIZE_OF VAR \")\"\n\nheight_expr: HEIGHT\n           | \"(\" HEIGHT_OF VAR \")\"\n\nwidth_expr: WIDTH\n          | \"(\" WIDTH_OF VAR \")\"\n\ndegree_expr: DEGREE\n           | \"(\" DEGREE_OF VAR \")\" \n\nshape_expr: SHAPE\n          | \"(\" SHAPE_OF VAR \")\"\n\ncolumn_expr: COLUMN\n           | \"(\" COLUMN_OF VAR \")\"\n\ndirection_expr: DIRECTION\n              | \"(\" DIRECTION_OF VAR \")\"\n\nimg_pts_expr: IMAGE_POINTS\n            | \"(\" IMAGE_POINTS_OF VAR \")\"\n\nmirror_expr: \"(\" MIRROR_AXIS_OF VAR \")\"\n\nOBJECT_ID: /[0-9]+/\nFCOLOR: \"O\" // black\n      | \"B\" // blue\n      | \"R\" // red\n      | \"G\" // green\n      | \"Y\" // yellow\n      | \"X\" // grey\n      | \"F\" // fuchsia\n      | \"A\" // orange\n      | \"C\" // cyan  \n      | \"W\" // brown\n\nSIZE: \"min\" | \"max\" | \"even\" | \"odd\" | /[0-9]+/  // size of objects\nDEGREE: \"min\" | \"max\" | \"even\" | \"odd\" | /[0-9]+/  // degree of objects\nHEIGHT: \"min\" | \"max\" | \"even\" | \"odd\" | /[0-9]+/  // height of objects\nWIDTH: \"min\" | \"max\" | \"even\" | \"odd\" | /[0-9]+/  // width of objects\nCOLUMN: \"center\" | \"even\" | \"odd\" | /[0-9]+/  // column of objects\nSHAPE: \"square\" | \"enclosed\"  // shape of objects\n\nDIRECTION: \"up\"\n         | \"down\"\n         | \"left\"\n         | \"right\"\n         | \"up_left\"\n         | \"up_right\"\n         | \"down_left\"\n         | \"down_right\"\n\nSYMMETRY_AXIS: \"vertical\" | \"horizontal\" | \"diagonal_left\" | \"diagonal_right\"\n\n// The angle of clockwise rotation, in degrees.\nROT_ANGLE: \"0\" \n         | \"90\" \n         | \"180\" \n         | \"270\"\n\nCOLOR: \"O\" // black\n      | \"B\" // blue\n      | \"R\" // red\n      | \"G\" // green\n      | \"Y\" // yellow\n      | \"X\" // grey\n      | \"F\" // fuchsia\n      | \"A\" // orange\n      | \"C\" // cyan  \n      | \"W\" // brown\n\nOVERLAP: BOOL\n\nBOOL: \"true\" | \"false\"\n\nIMAGE_POINTS: \"top\" | \"bottom\" | \"left\" | \"right\" | \"top_left\" | \"top_right\" | \"bottom_left\" | \"bottom_right\" \n\nRELATIVE_POSITION: \"source\"\n                 | \"target\"\n                 | \"middle\"\n\nVAR: VAR_THIS | VAR_OTHER\nVAR_THIS: \"this\"\nVAR_OTHER: \"other\"\n\nOP_AND: \"and\"\nOP_OR: \"or\"\nOP_NOT: \"not\"\n\nCOLOR_OF: \"color_of\"\nSIZE_OF: \"size_of\"\nHEIGHT_OF: \"height_of\"\nWIDTH_OF: \"width_of\"\nDEGREE_OF: \"degree_of\"\nSHAPE_OF: \"shape_of\"\nCOLUMN_OF: \"column_of\"\nDIRECTION_OF: \"direction_of\"\nIMAGE_POINTS_OF: \"img_pts_of\"\nMIRROR_AXIS_OF: \"mirror_axis_of\"\n\nCOLOR_EQ: \"color_equals\"\nSIZE_EQ: \"size_equals\"\nDEGREE_EQ: \"degree_equals\"\nHEIGHT_EQ: \"height_equals\"\nWIDTH_EQ: \"width_equals\"\nSHAPE_EQ: \"shape_equals\"\nCOLUMN_EQ: \"column_equals\"\nNEIGHBOR_OF: \"neighbor_of\"\n\nTR_UPDATE_COLOR: \"update_color\"\nTR_MOVE_NODE: \"move_node\"\nTR_EXTEND_NODE: \"extend_node\"\nTR_MOVE_NODE_MAX: \"move_node_max\"\nTR_ROTATE_NODE: \"rotate_node\"\nTR_ADD_BORDER: \"add_border\"\nTR_FILL_RECTANGLE: \"fill_rectangle\"\nTR_HOLLOW_RECTANGLE: \"hollow_rectangle\"\nTR_MIRROR: \"mirror\"\nTR_FLIP: \"flip\"\nTR_INSERT: \"insert\"\nTR_NOOP: \"noop\"\n\nCOMMENT: /\\s*/ \";;\" /[^\\n]/*\n\n%import common.WS\n%import common.LCASE_LETTER\n%import common.INT\n%ignore WS\n%ignore COMMENT\n```\n\n\nNow we continue with the visual perception and reasoning task.\nThe input for the task is a small number of pairs of grids of characters.\nThe value of each of the cells of the grids are the colors defined in the DSL, so we can think of grids as images.\nEach pair of images correspond to an input-output example for an unknown program P.\nFor each pair, the program P is evaluated on the image grid and operates on the objects that appear in it.\nThe output of the program is then the output image.\nThe objects in the images are easy and natural to identify for humans, so there is no need to define them explicitly.\nHowever you are able to abstract them correctly, and the DSL is interpreted with the same correct abstraction.\n\n\nNow I will show you some demonstration tasks along with the output you would be expected to produce for each of them.\n\n## DEMONSTRATION TASK 1\n\n### INPUT\nPAIR 1\nINPUT GRID:\nO O O O O O O O\nO O O O O R O O\nO R O O O R O R\nO R R O O R O O\nO O O O O O O O\nO R R O O O O O\nO R R O R R O O\nO O O O O O O O\nOUTPUT GRID:\nO O O O O O O O\nO O O O O Y O O\nO Y O O O Y O Y\nO Y Y O O Y O O\nO O O O O O O O\nO Y Y O O O O O\nO Y Y O Y Y O O\nO O O O O O O O\n\nPAIR 2\nINPUT GRID:\nO O O O O O O O O O\nO O O O R O O O O O\nO G O O R O O W O O\nO O G O O O W W O O\nO O G O O O O O O O\nO O O O X O O O O O\nO O O O O O F F F O\nO B O O O O O O O O\nO B B B B O O C C O\nO O O O O O O C O O\nOUTPUT GRID:\nO O O O O O O O O O\nO O O O Y O O O O O\nO Y O O Y O O Y O O\nO O Y O O O Y Y O O\nO O Y O O O O O O O\nO O O O Y O O O O O\nO O O O O O Y Y Y O\nO Y O O O O O O O O\nO Y Y Y Y O O Y Y O\nO O O O O O O Y O O\n\n### EXPECTED OUTPUT\n{\n    \"nl_description\": \"Recolor all objects to color Y\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color Y)\\n        )\\n    )\\n)\"\n}\n\n\n## DEMONSTRATION TASK 2\n\n### INPUT\nPAIR 1\nINPUT GRID:\nO O O O O O O O\nO F F O O O R O\nO F F O O O O O\nO O O O O O O O\nO O O O O O O O\nO O O O O O O O\nO O A O O X X O\nO O O O O O O O\nOUTPUT GRID:\nO O O O O O O O\nO F F R R R R O\nO F F O O O O O\nO O A O O O O O\nO O A O O O O O\nO O A O O O O O\nO O A O O X X O\nO O O O O O O O\n\nPAIR 2\nINPUT GRID:\nO O O O O O O O O O\nO O O Y O G G G G O\nO O F O O G G G G O\nO O O O O O O O O O\nO O O O O O O O O O\nO O O O O O O O O O\nO C C C O O O O O O\nO C C C O O O O A O\nO C C C O O O X O O\nO O O O O O O O O O\nOUTPUT GRID:\nO O O O O O O O O O\nO O O Y O G G G G O\nO O F Y O G G G G O\nO O F Y O O O O O O\nO O F Y O O O O O O\nO O F Y O O O O O O\nO C C C O O O O O O\nO C C C A A A A A O\nO C C C X X X X O O\nO O O O O O O O O O\n\n### EXPECTED OUTPUT\n{\n    \"nl_description\": \"Extend all the objects of size 1 toward the object of maximum size, without overlapping.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (size_equals (size_of this) 1)\\n                (and\\n                    (neighbor_of this other)\\n                    (size_equals (size_of other) max)\\n                )\\n            )\\n        )\\n        (apply\\n            (extend_node (direction_of other) false)\\n        )    \\n    )\\n)\"\n}\n\n\n## DEMONSTRATION TASK 3\n\n### INPUT\nPAIR 1\nINPUT GRID:\nO O O O O O O O O O\nO O O O O O O G O O\nO O G O O O O G O O\nO O G G O O O G G O\nO O O O O O O O O O\nO G G O O O O O O O\nO G G O O G G G O O\nO O O O O O O O O O\nO O G G O O O G O O\nO O O O O O O O O O\nOUTPUT GRID:\nO O O O O O O O O O\nO O B O O O O G O O\nO O B B O O O G O O\nO O O O O O O G G O\nO O O O O O O O O O\nO G G O O B B B O O\nO G G O O O O O O O\nO O O O O O O O O O\nO O G G O O O G O O\nO O O O O O O O O O\n\nPAIR 2\nINPUT GRID:\nO O O O O O O O O O O O O O O O\nO O O O O O O O O O O O O G O O\nO B B O O O O O O C C C O G G O\nO O O O O F O O O O O O O O O O\nO O O O O F O O O O R R O O O O\nO O O O O F O O O O R R O O O O\nO O O O O O O O W O O O O O O O\nO O O A O O O W W O O O X O O O\nO O O A A O O W W O O O X X X O\nO O O O O O O O O O O O O O O O\nO O O O O O O O O O Y Y O O O O\nO O O O B O O O O O O O O O O O\nO Y O O B O O O G O O O O F F O\nO Y O O O O O O G O O O O F F O\nO Y Y Y O O O O G O O O O O O O\nO O O O O O O O O O O O O O O O\nOUTPUT GRID:\nO O O O O O O O O O O O O B O O\nO O O O O O O O O B B B O B B O\nO B B O O B O O O O O O O O O O\nO O O O O B O O O O O O O O O O\nO O O O O B O O O O R R O O O O\nO O O O O O O O O O R R O O O O\nO O O B O O O O W O O O O O O O\nO O O B B O O W W O O O X O O O\nO O O O O O O W W O O O X X X O\nO O O O O O O O O O O O O O O O\nO O O O O O O O O O Y Y O O O O\nO O O O B O O O B O O O O O O O\nO Y O O B O O O B O O O O F F O\nO Y O O O O O O B O O O O F F O\nO Y Y Y O O O O O O O O O O O O\nO O O O O O O O O O O O O O O O\n\n### EXPECTED OUTPUT\n{\n    \"nl_description\": \"Move all objects of size 3 one step up, and then recolor them to color B.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (size_equals (size_of this) 3)\\n        )\\n        (apply\\n            (move_node up)\\n            (update_color B)\\n        )\\n    )\\n)\"\n}\n\n\n## DEMONSTRATION TASK 4\n\n### INPUT\nPAIR 1\nINPUT GRID:\nO O O O R O O O A O\nO B O O O O B O O O\nO O O O O O O O O O\nO O O O X X X O O O\nO O O O X X X O O F\nW O O O O O O O O O\nO O F O O O Y O O O\nO O O O O O O O O O\nO O O O G O O O W O\nO O O O O O O O O O\nOUTPUT GRID:\nO O O O O O O O A O\nO B O O O O O O O O\nO O O O R O B O O O\nO O O O X X X O O O\nO O O O X X X F O O\nW O O O G O Y O O O\nO O F O O O O O O O\nO O O O O O O O O O\nO O O O O O O O W O\nO O O O O O O O O O\n\nPAIR 2\nINPUT GRID:\nO O O F O O O R O O O O\nO O O O O O O O O Y O O\nO O O O O B O O O O O O\nO O R O O O O O G O O O\nB O O O O G O O O O O A\nO O O O O O R O O O W O\nO O O O O O O O C O O O\nG O X X O O O O O O O R\nO O X X O O O O O O Y O\nO O X X O O A O O O O O\nO F X X O O O O O O O O\nO O O O O Y O O O O O O\nOUTPUT GRID:\nO O O O O O O R O O O O\nO O O O O O O O O Y O O\nO O O O O B O O O O O O\nO O O O O O O O G O O O\nB O O O O G O O O O O A\nO O O O O O R O O O W O\nO O R F O O O O C O O O\nO G X X R O O O O O O O\nO O X X Y O O O O O O O\nO O X X A O O O O O O O\nO F X X O O O O O O O O\nO O O O O Y O O O O O O\n\nPAIR 3\nINPUT GRID:\nO G O O O O O O\nO O O A O O A O\nW O O O W O O O\nO O O O O O O B\nO R O X O F O O\nO O O O O O O O\nO G O O F O O G\nO O B O O A O O\nOUTPUT GRID:\nO G O O O O O O\nO O O O O O A O\nW O O O W O O O\nO O O A O O O B\nO O R X F O O O\nO O O O O O O O\nO G O O F O O G\nO O B O O A O O\n\n### EXPECTED OUTPUT\n{\n    \"nl_description\": \"Move all objects of color different than X, toward the object of color X, if they are neighbors of it.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (not (color_equals (color_of this) X))\\n                (and\\n                    (neighbor_of this other)\\n                    (color_equals (color_of other) X)\\n                )\\n            )\\n        )\\n        (apply\\n            (move_node_max (direction_of other))\\n        )\\n    )\\n)\"\n}\n\n\nNow follows task you will be evaluated on.\nOutput the solution as a JSON object, which should contain both a natural language description of the solution and the solution written in the DSL.\nThe code should be parseable by the DSL grammar.\nThe JSON must have the following structure:\n\n{\n    \"nl_description\": \"TO_BE_FILLED\",\n    \"code\": \"TO_BE_FILLED\"\n}\n\n## TEST TASK\n\nPAIR 1\nINPUT GRID:\nO O O O O O O O A O\nO O O O O O O O O O\nO O O O O O O O O O\nO F O O O O O O O O\nO O O O C C O O O O\nO O O O C C O O O O\nO O O O O O O O O O\nO O O O O O O O O O\nO Y O O O O O O O O\nO O O O O O O O O W\nOUTPUT GRID:\nO O O O O O O O O O\nO O O O O O O O O O\nO O O O O O O O O O\nO O O O O O O O O O\nO O O O F A O O O O\nO O O O Y W O O O O\nO O O O O O O O O O\nO O O O O O O O O O\nO O O O O O O O O O\nO O O O O O O O O O\n\nPAIR 2\nINPUT GRID:\nO O X O O O O O O O\nO O O O O O O O W O\nO O O O O O O O O O\nO O O O O O O O O O\nO O O O C C O O O O\nO O O O C C O O O O\nO O O O O O O O O B\nO O O O O O O O O O\nO R O O O O O O O O\nO O O O O O O O O O\nOUTPUT GRID:\nO O O O O O O O O O\nO O O O O O O O O O\nO O O O O O O O O O\nO O O O O O O O O O\nO O O O X W O O O O\nO O O O R B O O O O\nO O O O O O O O O O\nO O O O O O O O O O\nO O O O O O O O O O\nO O O O O O O O O O\n\nPAIR 3\nINPUT GRID:\nO O O B O O O O O Y\nO O O O O O O O O O\nO O O O O C C O O O\nO O O O O C C O O O\nO O O O O O O O O O\nO O O O O O O O O O\nO O O O O O O O O F\nO O G O O O O O O O\nO O O O O O O O O O\nO O O O O O O O O O\nOUTPUT GRID:\nO O O O O O O O O O\nO O O O O O O O O O\nO O O O O B Y O O O\nO O O O O G F O O O\nO O O O O O O O O O\nO O O O O O O O O O\nO O O O O O O O O O\nO O O O O O O O O O\nO O O O O O O O O O\nO O O O O O O O O O\n"
        }
    ],
    "n_valid_json": 100,
    "n_can_parse": 74,
    "completions": [
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move the objects located at the bottom row of the grid, except those of color O, to their corresponding positions at the top row.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and \n                (not (color_equals (color_of this) O))\n                (and \n                    (neighbor_of this other)\n                    (color_equals (color_of other) O)\n                )\n            )\n        )\n        (apply\n            (move_node (direction_of this))\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all diagonally direct neighbors towards the middle of the overlapping cells from the objects",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (neighbor_of this other)\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects that are of color different than O, and in the topmost, leftmost, bottommost, or rightmost rows or columns toward the object of color O, recurring, if they are neighbors of it on the diagonals.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) O))\n                (and\n                    (or\n                        (column_equals (column_of this) 1)\n                        (column_equals (column_of this) max)\n                        (or\n                            (row_equals (row_of this) 1)\n                            (row_equals (row_of this) max)\n                        )\n                    )\n                    (and\n                        (neighbor_of this other)\n                        (and\n                            (not (color_equals (color_of other) O))\n                            (not\n                                (and\n                                    (or\n                                        (column_equals (column_of other) 1)\n                                        (column_equals (column_of other) max)\n                                        (or\n                                            (row_equals (row_of other) 1)\n                                            (row_equals (row_of other) max)\n                                        )\n                                    )\n                                )\n                            )\n                        )\n                    )\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches 'm' in the current parser context, at line 10 col 57\n\n        (column_equals (column_of this) max)\n                                        ^\nExpected one of: \n\t* LPAR\n\t* COLUMN\n"
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of size 1 toward other objects, without overlapping.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects color-wise along the object of color C, if they are neighbors of it.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) C))\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) C)\n                )\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color different than O, that are neighbors, to positions of color O and swap their colors.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) O))\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n            (update_color (color_of other))\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects in the cells occupied by any object in the initial grid towards the center column, while preserving their relative positions in terms of movement.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node center)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches 'c' in the current parser context, at line 6 col 24\n\n            (move_node center)\n                       ^\nExpected one of: \n\t* LPAR\n\t* DIRECTION\n"
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Swap the positions of all objects with the color of their neighboring objects of size 2 (without overlapping).",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of other) 2)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color (color_of other))\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects towards the object of maximum size, if they are neighbors and then recolor them with their prior color.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (size_equals (size_of other) max)\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n            (update_color (color_of this))\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move any object next to another object, swapping both their positions.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (neighbor_of this other)\n        )\n        (apply\n            (move_node (direction_of other))\n            (move_node (direction_of this))\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color different than O to the positions of the two smallest objects.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) O))\n                (and\n                    (neighbor_of this other)\n                    (or\n                        (size_equals (size_of other) min)\n                        (and\n                            (not (size_equals (size_of other) min))\n                            (not (color_equals (color_of this) (color_of other)))\n                            (not (color_equals (color_of other) B))\n                        )\n                    )\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 14 col 29\n\n                            (not (color_equals (color_of other) B))\n                            ^\nExpected one of: \n\t* RPAR\n"
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Swap colors and positions of pairs of objects that are neighbors of each other.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (neighbor_of this other)\n        )\n        (apply\n            (update_color (color_of other))\n            (move_node (direction_of other))\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects towards the objects of color O if they are neighbors, and update the colors of moved objects to the color of neighbors.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) O))\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n            (update_color (color_of other))\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects toward the object of color C, if they are neighbors of it.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) C)\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects towards the center of the grid.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) O))\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects toward the top half of the grid, preserving the layout of the objects in the bottom half.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node up)\n            (move_node up)\n            (move_node up)\n            (move_node up)\n            (move_node up)\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects to new random positions in the grid.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter)\n        (apply\n            (move_node this)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches 't' in the current parser context, at line 6 col 24\n\n            (move_node this)\n                       ^\nExpected one of: \n\t* LPAR\n\t* DIRECTION\n"
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Rotate by 90 degrees and then move all objects.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n            (move_node this)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches 't' in the current parser context, at line 7 col 24\n\n            (move_node this)\n                       ^\nExpected one of: \n\t* LPAR\n\t* DIRECTION\n"
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of size 1 toward the object of size 4, without overlapping.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (and\n                    (neighbor_of this other)\n                    (size_equals (size_of other) 4)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )    \n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects to the next neighbor along the diagonal, if they are adjacent to any other object.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (size_equals (size_of this) 1)\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of size 1 to adjacent empty cells, without overlapping.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (not (neighbor_of this other))\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of size 1 toward the nearest object with non-overlapping cells.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (extend_node (direction_of other) false)\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move objects of height 2 to the location of the object of different color in the same column.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (height_equals (height_of this) 2)\n                (and\n                    (column_equals (column_of this) (column_of other))\n                    (not (color_equals (color_of this) (color_of other)))\n                )\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects two steps down, then recolor them to the color of the neighboring object.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (neighbor_of this other)\n        )\n        (apply\n            (move_node down)\n            (move_node down)\n            (update_color (color_of other))\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color different than O upward, merging them while maintaining their color.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (not (color_equals (color_of this) O))\n        )\n        (apply\n            (move_node up)\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects present toward the position of other objects to the diagonally opposite corners.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter)\n        (apply\n            (insert_image_points top_right middle)\n        )\n    ))",
            "can_parse": false,
            "parse_error_message": "No terminal matches '_' in the current parser context, at line 6 col 20\n\n            (insert_image_points top_right middle)\n                   ^\nExpected one of: \n\t* OBJECT_ID\n"
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects that are vertically adjacent to an object located beside it to the adjacent positions in the grid.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (neighbor_of this other)\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects to the row below their original position, except for objects along the edges of the grid",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (not (neighbor_of this this))\n                (not (or (height_equals (height_of this) max) (width_equals (width_of this) max)))\n            )\n        )\n        (apply\n            (move_node down)\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of size 1 toward objects of size 2, if they are neighbors, and swap their colors.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (and\n                    (neighbor_of this other)\n                    (size_equals (size_of other) 2)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n            (update_color (color_of other))\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move each object toward the neighboring objects along their rows and recolor them.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (neighbor_of this other)\n        )\n        (apply\n            (move_node (direction_of other))\n            (update_color (color_of other))\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Swap pairs of colors within the boundaries of each object pair with an odd width and even height.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (width_equals (width_of this) odd)\n                (and\n                    (height_equals (height_of this) even)\n                    (neighbor_of this other)\n                )\n            )\n        )\n        (apply\n            (update_color (color_of other))\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color other than O to the first open space in column 5.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (not (color_equals (color_of this) O))\n        )\n        (apply\n            (move_node column (5))\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches 'c' in the current parser context, at line 8 col 24\n\n            (move_node column (5))\n                       ^\nExpected one of: \n\t* LPAR\n\t* DIRECTION\n"
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move objects of color F, Y, W, R, B, and G to the new positions in output grid as they appear sequentially from top to bottom, left to right in each row.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (or\n                (color_equals (color_of this) F)\n                (or\n                    (color_equals (color_of this) Y)\n                    (or\n                        (color_equals (color_of this) W)\n                        (or\n                            (color_equals (color_of this) R)\n                            (or\n                                (color_equals (color_of this) B)\n                                (color_equals (color_of this) G)\n                            )\n                        )\n                    )\n                )\n            )\n        )\n        (apply\n            ;; Subsequent transformations for individual object moves\n            (move_node (R)\n            (move_node (B)\n            (move_node (G)\n            (move_node (F)\n)\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches 'R' in the current parser context, at line 24 col 25\n\n            (move_node (R)\n                        ^\nExpected one of: \n\t* DIRECTION_OF\n"
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects and reorder them by colors towards their maximum size neighbor",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (size_equals (size_of other) max)\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color different than O, and then replace them with the color of the object they moved to.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (not (color_equals (color_of this) O))\n        )\n        (apply\n            (move_node_max (direction_of other))\n            (update_color (color_of other))\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color different than O, toward the object of color O if they are neighbors.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) O))\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) O)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects that are neighbors of objects of size 4 toward them.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (size_equals (size_of other) 4)\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move the objects that are neighbors to other objects in the 5th row to the position of the neighboring objects and swap their positions.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (column_equals (column_of this) (column_of (column_equals this 5)))\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 7 col 60\n\nlumn_equals (column_of this) (column_of (column_equals this 5)))\n                                        ^\nExpected one of: \n\t* VAR\n"
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color different than O, toward the center of their respective grids.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (not (color_equals (color_of this) O))\n        )\n        (apply\n            (move_node (column_equals center))\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches 'c' in the current parser context, at line 8 col 25\n\n            (move_node (column_equals center))\n                        ^\nExpected one of: \n\t* DIRECTION_OF\n"
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects toward the object of color F, if they are neighbors, and then recolor them to a different color.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (neighbor_of this other)\n            )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (neighbor_of this other)\n            (color_equals (color_of other) F)\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 15 col 13\n\n            (color_equals (color_of other) F)\n            ^\nExpected one of: \n\t* RPAR\n"
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Exchange all objects diagonally with their neighbor if they form a 2x2 square.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (or\n                    (and\n                        (column_equals (column_of this) 0)\n                        (column_equals (column_of other) 1)\n                    )\n                    (and\n                        (column_equals (column_of this) 1)\n                        (column_equals (column_of other) 0)\n                    )\n                )\n            )\n        )\n        (apply\n            (rotate_node 90)\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Swap the columns of all the objects one step to the right.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node right)\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move objects that are top/middle-left neighbors of any other object to the right.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (or\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (move_node right)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches ')' in the current parser context, at line 7 col 13\n\n            )\n            ^\nExpected one of: \n\t* LPAR\n"
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects to the position of their neighbor objects in the grid.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node_max right)\n            (move_node_max down)\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all single colored objects towards an adjacent pair of colored objects, always in columns.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (column_equals (column_of this) (column_of other))\n                (and\n                    (neighbor_of this other)\n                    (size_equals (size_of other) 4)\n                )\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 8 col 17\n\n                (and\n                ^\nExpected one of: \n\t* RPAR\n"
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects to form a vertical line on the 5th column from left.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (extend_node down false)\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color different than O if adjacent to another object, reordering them.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) O))\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color different than O to the position of objects of maximum size, one step per move if they are neighbors of it.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) O))\n                (and\n                    (neighbor_of this other)\n                    (size_equals (size_of other) max)\n                )\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects to the positions of other objects.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (neighbor_of this other)\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color different than 'O' to the position of an object of size 1, once max neighbors are reached, then reorder the positions.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) O))\n                (size_equals (size_of other) 1)\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n            (move_node_max (direction_of other))\n            (update_color (color_of other))\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects toward each other based on their colors, with the last neighbor's color overriding the earlier ones.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) (color_of this))\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move each object to its neighboring empty cell, applying this is repeated steps until no object can move.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (neighbor_of this other)\n                (color_equals (color_of other) O)\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 8 col 17\n\n                (color_equals (color_of other) O)\n                ^\nExpected one of: \n\t* RPAR\n"
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects to the position occupied by any other object, and leave a trail.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (neighbor_of this other)\n        )\n        (apply\n            (extend_node (direction_of other) true)\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects that are horizontally adjacent to another object towards it, while recoloring them with the color of the object they move towards, without overlapping.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (or\n                    (column_equals (column_of other) (+ (column_of this) 1))\n                    (column_equals (column_of other) (- (column_of this) 1))\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n            (update_color (color_of other))\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '+' in the current parser context, at line 8 col 55\n\n      (column_equals (column_of other) (+ (column_of this) 1))\n                                        ^\nExpected one of: \n\t* COLUMN_OF\n"
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects in the direction down-right.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node down_right)\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Swap the colors of the objects within smaller clusters with their corresponding neighboring larger cluster objects.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (and\n                    (or\n                        (size_equals (size_of this) 1)\n                        (size_equals (size_of this) 2)\n                    )\n                    (or\n                        (size_equals (size_of other) 4)\n                        (size_equals (size_of other) 6)\n                    )\n                )\n            )\n        )\n        (apply\n            (update_color (color_of other))\n            (update_color (color_of this))\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color different than O, toward the object of color O, if they are neighbors of it.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) O))\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) O)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects toward the three closest unoccupied positions.",
            "code": "(do (rule (vars (this)) (filter) (apply (move_node_max left) (move_node_max up) (move_node_max right) ) ) )",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects toward the center of the object in the diagonal opposite direction, without overlapping.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (or\n                    (and (not (color_equals (color_of this) F)) (color_equals (color_of other) W))\n                    (and (not (color_equals (color_of this) W)) (color_equals (color_of other) F))\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Swap the first two and last two values of columns 4, 5, and 6 without modifying the rest.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (or\n                (column_equals (column_of this) 4)\n                (or\n                    (column_equals (column_of this) 5)\n                    (column_equals (column_of this) 6))\n            )\n        )\n        (apply\n            (move_node up)\n            (move_node up)\n            (move_node down)\n            (move_node down)\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color to a new position forming new pairs.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter)\n        (apply\n            (move_node (direction_of other))\n            (update_color B)\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move objects that are neighbors of an even-sized object towards it until they hit another object, and then move the even-sized object downward to the bottom.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (size_equals (size_of other) even)\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) even)\n        )\n        (apply\n            (move_node_max down)\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects towards another object if they are neighbors, and then recolor them.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (neighbor_of this other)\n        )\n        (apply\n            (move_node (direction_of other))\n            (update_color (color_of other))\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects 4 steps down and 4 steps right.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node down)\n            (move_node down)\n            (move_node down)\n            (move_node down)\n            (move_node right)\n            (move_node right)\n            (move_node right)\n            (move_node right)\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Rotate the objects with color A, W, B, R, G, F 90 degrees clockwise.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (or\n                (color_equals (color_of this) A)\n                (or\n                    (color_equals (color_of this) W)\n                    (or\n                        (color_equals (color_of this) B)\n                        (or\n                            (color_equals (color_of this) R)\n                            (or\n                                (color_equals (color_of this) G)\n                                (color_equals (color_of this) F)\n                            )\n                        )\n                    )\n                )\n            )\n        )\n        (apply\n            (rotate_node 90)\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects to the position of the nearest non-black object in the grid, then recolor them to match the color of this non-black object.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) O))\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n            (update_color (color_of other))\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects not touching edges to the center of the grid.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (not (column_equals (column_of this) left))\n                (not (column_equals (column_of this) right))\n                (not (column_equals (column_of this) top))\n                (not (column_equals (column_of this) bottom))\n            )\n        )\n        (apply\n            (move_node center)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches 'l' in the current parser context, at line 6 col 54\n\n   (not (column_equals (column_of this) left))\n                                        ^\nExpected one of: \n\t* LPAR\n\t* COLUMN\n"
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Swap the positions of all objects on the grid",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter)\n        (apply\n            (move_node_min (direction_of other))\n            (swap_positions (direction_of other))\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '_' in the current parser context, at line 6 col 23\n\n            (move_node_min (direction_of other))\n                      ^\nExpected one of: \n\t* LPAR\n\t* DIRECTION\n"
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of size 2 down single step, and then recolor all objects to color O.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 2)\n        )\n        (apply\n            (move_node down)\n            (update_color O)\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects to the bottom right of the grid by swapping them with the existing object there.",
            "code": "(do \n    (rule\n        (vars (this other))\n        (filter\n            (neighbor_of this other)\n        )\n        (apply\n            (insert (color_of other) (img_pts_of this) source)\n            (insert (color_of this) (img_pts_of other) target)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 8 col 21\n\n            (insert (color_of other) (img_pts_of this) sourc\n                    ^\nExpected one of: \n\t* OBJECT_ID\n"
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects to ensure they are below or to the right of other objects they are neighbors of.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (neighbor_of this other)\n        )\n        (apply\n            (move_node_max down)\n            (move_node_max right)\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Reverse the order of vertical pairs of colors except the outermost ones in 2-row high columns.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (height_equals (height_of this) 2)\n                (shape_equals (shape_of this) enclosed)\n            )\n        )\n        (apply\n            (flip horizontal)\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move the objects in column 1, that are neighbors of any object located in columns 8 to 10 toward the corresponding neighbor and replace color of objects.",
            "code": "(do (rule (vars (this other)) (filter (and (column_equals (column_of this) 1) (and (neighbor_of this other) (or (or (column_equals (column_of other) 8) (column_equals (column_of other) 9)) (column_equals (column_of other) 10))))) (apply (move_node_max (direction_of other)) (update_color (color_of other)))))",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Swap the positions of the neighboring objects in the center of the grid, and recolor them sequentially.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) C)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color A)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) F)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color A)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) Y)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color A)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (neighbor_of this other)\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects toward the diagonal neighbor in the direction of up-right, up-left, down-right, or down-left.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (or\n                    (or\n                        (direction_equals (direction_of this) up_right)\n                        (direction_equals (direction_of this) up_left)\n                    )\n                    (or\n                        (direction_equals (direction_of this) down_right)\n                        (direction_equals (direction_of this) down_left)\n                    )\n                )\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches 'd' in the current parser context, at line 9 col 26\n\n                        (direction_equals (direction_of this) up_\n                         ^\nExpected one of: \n\t* SHAPE_EQ\n\t* OP_NOT\n\t* OP_AND\n\t* WIDTH_EQ\n\t* DEGREE_EQ\n\t* SIZE_EQ\n\t* COLUMN_EQ\n\t* COLOR_EQ\n\t* NEIGHBOR_OF\n\t* HEIGHT_EQ\n\t* OP_OR\n"
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects toward the object of maximum width, if they are neighbors of it.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (width_equals (width_of other) max)\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move the first two objects of each pair diagonally down-right, and move the rest diagonally up-right.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n              (and\n                (size_equals (size_of this) 2)\n                (neighbor_of this other)\n              )\n        )\n        (apply\n            (move_node down_right)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n              (and\n                (size_equals (size_of this) 2)\n                (neighbor_of this other)\n                (not (position_equals (relative_position_of this) (relative_position_of other))\n              )\n        )\n        (apply\n            (move_node up_right)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 20 col 17\n\n                (not (position_equals (relative_position\n                ^\nExpected one of: \n\t* RPAR\n"
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects downward by maximum steps.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node_max down)\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color different than O, toward the most bottom object they are neighbors of.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) O))\n                (and\n                    (neighbor_of this other)\n                    (and\n                        (neighbor_of other other)\n                        (color_equals (color_of other) B)\n                    )\n                )\n            )\n        )\n        (apply\n            (move_node_max down)\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of size 1 toward the center of the largest object, without overlapping.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (and\n                    (neighbor_of this other)\n                    (size_equals (size_of other) max)\n                )\n            )\n        )\n        (apply\n            (move_node center)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches 'c' in the current parser context, at line 14 col 24\n\n            (move_node center)\n                       ^\nExpected one of: \n\t* LPAR\n\t* DIRECTION\n"
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Rotate all objects 90 degrees clockwise.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects toward the center of the C C O O block.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) C)\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n            (move_node (direction_of other))\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects toward the nearest neighbour and recolor them based on the moved position.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (neighbor_of this other)\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of this) A)\n                (color_equals (color_of other) C)\n                (column_equals (column_of this) 8)\n            )\n        )\n        (apply\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of this) W)\n                (color_equals (color_of other) C)\n                (column_equals (column_of this) 8)\n            )\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of this) B)\n                (color_equals (color_of other) C)\n                (column_equals (column_of this) 8)\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 17 col 17\n\n                (color_equals (color_of other) C)\n                ^\nExpected one of: \n\t* RPAR\n"
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Rotate all objects 90 degrees clockwise.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all single-color objects toward each other such that they stack without overlapping.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects toward the center.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (neighbor_of this other)\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects to the center of each 2x2 square.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (neighbor_of this other)\n                (shape_equals (shape_of other) enclosed)\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 8 col 17\n\n                (shape_equals (shape_of other) enclosed)\n                ^\nExpected one of: \n\t* RPAR\n"
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all objects not equal to C by swapping their colors with their neighboring objects.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) C))\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color (color_of other))\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects to a position such that each object is adjacent to a previously non-adjacent neighbor.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter)\n        (apply\n            (move_node (direction_of other))\n            (move_node_max (direction_of other))\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects to the position of the previous row, while keeping their positions unchanged.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node up)\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of size 1 to their corresponding columns of objects of size 4, if they are neighbors of the latter.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (and\n                    (neighbor_of this other)\n                    (size_equals (size_of other) 4)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move the objects of size 1 towards neighboring objects of size greater than 1 and then in order recolor them.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (neighbor_of this other)\n                (not (size_equals (size_of other) 1))\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (neighbor_of this other)\n                (not (size_equals (size_of other) 1))\n            )\n        )\n        (apply\n            (update_color (color_of other))\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 8 col 17\n\n                (not (size_equals (size_of other) 1))\n                ^\nExpected one of: \n\t* RPAR\n"
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of size 1 that are neighbors of objects of size 4 towards the objects of size 4.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (and\n                    (neighbor_of this other)\n                    (size_equals (size_of other) 4)\n                )\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects toward the center, if they are neighbors of the center.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (column_equals (column_of other) center)\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color other than O to the location of the first object of color O they encounter.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) O))\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color different than O and X, towards each other.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) O))\n                (not (color_equals (color_of this) X))\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 8 col 17\n\n                (neighbor_of this other)\n                ^\nExpected one of: \n\t* RPAR\n"
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move the first two objects encountered in each column to the positions of the objects in the last two columns respectively.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (or\n                (and\n                    (column_equals (column_of this) 2)\n                    (not (column_equals (column_of other) 2))\n                )\n                (and\n                    (column_equals (column_of this) 3)\n                    (not (column_equals (column_of other) 3))\n                )\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move every object vertically to make the central objects disappear.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (neighbor_of this other)\n        )\n        (apply\n            (move_node_max down)\n            (move_node_max up)\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color different than O and W, to the former position of object of color W, and recolor them to R and G alternately.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) O))\n                (not (color_equals (color_of this) W))\n                (neighbor_of this other)\n                (color_equals (color_of other) W)\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n            (update_color R)\n            (move_node (direction_of other))\n            (update_color G)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 8 col 17\n\n                (neighbor_of this other)\n                ^\nExpected one of: \n\t* RPAR\n"
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects one step to the right and recolor them with the color of their right neighbor.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (neighbor_of this other)\n        )\n        (apply\n            (move_node right)\n            (update_color (color_of other))\n        )\n    )\n)",
            "can_parse": true
        }
    ],
    "task_id": "d89b689b"
}