{
    "model": "gpt-4o-2024-05-13",
    "usage": {
        "completion_tokens": 16319,
        "prompt_tokens": 6064,
        "total_tokens": 22383,
        "prompt_tokens_details": {
            "cached_tokens": 0
        },
        "completion_tokens_details": {
            "reasoning_tokens": 0
        }
    },
    "request_time": 10.609852313995361,
    "n_requested": 100,
    "prompt_messages": [
        {
            "role": "system",
            "content": "You are an assistant chatbot with human-like perception, reasoning and learning capabilities.\nYou can solve tasks concisely, efficiently, and moreover, correctly.\nLet's engage in perception- and logic-based tasks.\nYou only output source code.\nNo explanations or any other text.\nOnly code."
        },
        {
            "role": "user",
            "content": "You are an efficient assistant for logical reasoning and code generation.\nYou will help me solve a visual perception and reasoning task.\nI will first provide you with the definition of a Domain Specific Language you will use for writing a solution for the task.\nI will then present you with the description of the task that you will be tested in.\nYou will then respond the queries I make regarding the solution of the task.\n\n\nThis is the definition of the DSL you will use to solve the task.\nIt is given as a context-free grammar in the EBNF format used by the Lark parser generator, with some informative comments about the semantics.\nYou will return a string that is parseable by the `program` non-terminal of the grammar.\n\n```\nlibrary: \"(\" program* \")\"\n\n// Rules are executed one after another, in the order they appear.\n// There could be no rules, in which case the program does nothing.\nprogram: \"(\" \"do\" rule* \")\"\n\n// First, it declares the variables that will be used in the filter and transform expressions.\n// Second, it defines a filter expression that an object must satisfy in order to be transformed.\n// Then, it defines a list of transforms that will be applied objects that satisfy the filter expression.\nrule: \"(\" \"rule\" decl filter xform_list \")\"\n\n// The `vars` declaration specifies the names of the variables that will be used in the filter and transform expressions.\n// The `this` variable is always declared, and it refers to the object that is being transformed.\n// There could also be an additional optional variable `other` that refers to another object in the grid,\n// which is not being transformed, but is used in the filter expression.\ndecl: \"(\" \"vars\" \"(\" VAR_THIS VAR_OTHER? \")\" \")\"\n\n// A filter is a predicate over the objects in the grid.\n// If no filter is given, then all the objects are selected.\nfilter: \"(\" \"filter\" filter_expr? \")\"\n\n// It can be a primitive filter operation, or a boolean expression using the `and`, `or`, and `not` connectives.\n// IMPORTANT: The `and` and `or` connectives are strictly binary, so to take the conjunction or disjunction \n// of more than two expressions, the binary connectives must be nested.\n// AGAIN, the `and` and `or` connectives are not variadic, so the following is not allowed:\n// (and true true false)\n// Instead, the following must be used:\n// (and true (and true false))\n// The `not` connective is unary as expected.\n// The objects that are transformed are the ones that satisfy the filter expression.\nfilter_expr: filter_prim\n           | \"(\" OP_AND filter_expr filter_expr \")\"   \n           | \"(\" OP_OR filter_expr filter_expr \")\"\n           | \"(\" OP_NOT filter_expr \")\"\n\nfilter_prim: \"(\" COLOR_EQ fcolor_expr fcolor_expr \")\"           \n           | \"(\" SIZE_EQ size_expr size_expr \")\"                \n           | \"(\" HEIGHT_EQ height_expr height_expr \")\"          \n           | \"(\" WIDTH_EQ width_expr width_expr \")\"             \n           | \"(\" DEGREE_EQ degree_expr degree_expr \")\"          \n           | \"(\" SHAPE_EQ shape_expr shape_expr \")\"             \n           | \"(\" COLUMN_EQ column_expr column_expr \")\"         \n           | \"(\" NEIGHBOR_OF VAR VAR \")\"      // true if the two objects are neighbors\n\n\n// Transforms are applied one after another, in the order they appear.\nxform_list: \"(\" \"apply\" xform+ \")\"\n\n// A single transform is applied to all the objects that are bound to the `this` variable. \n// The transform is applied to each such object independently and simultaneously.\nxform:     \"(\" TR_UPDATE_COLOR color_expr \")\"                          // change this object color to the given color \n         | \"(\" TR_MOVE_NODE direction_expr \")\"                         // move this object in the given direction\n         | \"(\" TR_EXTEND_NODE direction_expr OVERLAP \")\"               // extend (move while leaving a trail) this object in the given direction\n                                                                  // if overlap is false, then the object is extended until it hits another object,\n                                                                  // otherwise it is extended until the edge of the grid.\n         | \"(\" TR_MOVE_NODE_MAX direction_expr \")\"                     // move this object until it hits another object, in the given direction\n         | \"(\" TR_ROTATE_NODE ROT_ANGLE \")\"                       // rotate this object by the given angle\n         | \"(\" TR_ADD_BORDER color_expr \")\"                            // color this exterior pixels of the object with the given color\n         | \"(\" TR_FILL_RECTANGLE color_expr OVERLAP \")\"                // color this interior of a hollow rectangle with the given color\n         | \"(\" TR_HOLLOW_RECTANGLE color_expr \")\"                      // color this interior of a solid rectangle with the given color\n         | \"(\" TR_MIRROR mirror_expr \")\"\n         | \"(\" TR_FLIP SYMMETRY_AXIS \")\"                          // flip this object with respect to the given axis\n         | \"(\" TR_INSERT OBJECT_ID img_pts_expr RELATIVE_POSITION \")\" // insert a copy of this object at the position of the given object\n         | \"(\" TR_NOOP \")\"                                        // do nothing\n\nfcolor_expr: FCOLOR\n           | \"(\" COLOR_OF VAR \")\"\n\ncolor_expr: COLOR\n          | \"(\" COLOR_OF VAR \")\"\n\nsize_expr: SIZE\n         | \"(\" SIZE_OF VAR \")\"\n\nheight_expr: HEIGHT\n           | \"(\" HEIGHT_OF VAR \")\"\n\nwidth_expr: WIDTH\n          | \"(\" WIDTH_OF VAR \")\"\n\ndegree_expr: DEGREE\n           | \"(\" DEGREE_OF VAR \")\" \n\nshape_expr: SHAPE\n          | \"(\" SHAPE_OF VAR \")\"\n\ncolumn_expr: COLUMN\n           | \"(\" COLUMN_OF VAR \")\"\n\ndirection_expr: DIRECTION\n              | \"(\" DIRECTION_OF VAR \")\"\n\nimg_pts_expr: IMAGE_POINTS\n            | \"(\" IMAGE_POINTS_OF VAR \")\"\n\nmirror_expr: \"(\" MIRROR_AXIS_OF VAR \")\"\n\nOBJECT_ID: /[0-9]+/\nFCOLOR: \"O\" // black\n      | \"B\" // blue\n      | \"R\" // red\n      | \"G\" // green\n      | \"Y\" // yellow\n      | \"X\" // grey\n      | \"F\" // fuchsia\n      | \"A\" // orange\n      | \"C\" // cyan  \n      | \"W\" // brown\n\nSIZE: \"min\" | \"max\" | \"even\" | \"odd\" | /[0-9]+/  // size of objects\nDEGREE: \"min\" | \"max\" | \"even\" | \"odd\" | /[0-9]+/  // degree of objects\nHEIGHT: \"min\" | \"max\" | \"even\" | \"odd\" | /[0-9]+/  // height of objects\nWIDTH: \"min\" | \"max\" | \"even\" | \"odd\" | /[0-9]+/  // width of objects\nCOLUMN: \"center\" | \"even\" | \"odd\" | /[0-9]+/  // column of objects\nSHAPE: \"square\" | \"enclosed\"  // shape of objects\n\nDIRECTION: \"up\"\n         | \"down\"\n         | \"left\"\n         | \"right\"\n         | \"up_left\"\n         | \"up_right\"\n         | \"down_left\"\n         | \"down_right\"\n\nSYMMETRY_AXIS: \"vertical\" | \"horizontal\" | \"diagonal_left\" | \"diagonal_right\"\n\n// The angle of clockwise rotation, in degrees.\nROT_ANGLE: \"0\" \n         | \"90\" \n         | \"180\" \n         | \"270\"\n\nCOLOR: \"O\" // black\n      | \"B\" // blue\n      | \"R\" // red\n      | \"G\" // green\n      | \"Y\" // yellow\n      | \"X\" // grey\n      | \"F\" // fuchsia\n      | \"A\" // orange\n      | \"C\" // cyan  \n      | \"W\" // brown\n\nOVERLAP: BOOL\n\nBOOL: \"true\" | \"false\"\n\nIMAGE_POINTS: \"top\" | \"bottom\" | \"left\" | \"right\" | \"top_left\" | \"top_right\" | \"bottom_left\" | \"bottom_right\" \n\nRELATIVE_POSITION: \"source\"\n                 | \"target\"\n                 | \"middle\"\n\nVAR: VAR_THIS | VAR_OTHER\nVAR_THIS: \"this\"\nVAR_OTHER: \"other\"\n\nOP_AND: \"and\"\nOP_OR: \"or\"\nOP_NOT: \"not\"\n\nCOLOR_OF: \"color_of\"\nSIZE_OF: \"size_of\"\nHEIGHT_OF: \"height_of\"\nWIDTH_OF: \"width_of\"\nDEGREE_OF: \"degree_of\"\nSHAPE_OF: \"shape_of\"\nCOLUMN_OF: \"column_of\"\nDIRECTION_OF: \"direction_of\"\nIMAGE_POINTS_OF: \"img_pts_of\"\nMIRROR_AXIS_OF: \"mirror_axis_of\"\n\nCOLOR_EQ: \"color_equals\"\nSIZE_EQ: \"size_equals\"\nDEGREE_EQ: \"degree_equals\"\nHEIGHT_EQ: \"height_equals\"\nWIDTH_EQ: \"width_equals\"\nSHAPE_EQ: \"shape_equals\"\nCOLUMN_EQ: \"column_equals\"\nNEIGHBOR_OF: \"neighbor_of\"\n\nTR_UPDATE_COLOR: \"update_color\"\nTR_MOVE_NODE: \"move_node\"\nTR_EXTEND_NODE: \"extend_node\"\nTR_MOVE_NODE_MAX: \"move_node_max\"\nTR_ROTATE_NODE: \"rotate_node\"\nTR_ADD_BORDER: \"add_border\"\nTR_FILL_RECTANGLE: \"fill_rectangle\"\nTR_HOLLOW_RECTANGLE: \"hollow_rectangle\"\nTR_MIRROR: \"mirror\"\nTR_FLIP: \"flip\"\nTR_INSERT: \"insert\"\nTR_NOOP: \"noop\"\n\nCOMMENT: /\\s*/ \";;\" /[^\\n]/*\n\n%import common.WS\n%import common.LCASE_LETTER\n%import common.INT\n%ignore WS\n%ignore COMMENT\n```\n\n\nNow we continue with the visual perception and reasoning task.\nThe input for the task is a small number of pairs of grids of characters.\nThe value of each of the cells of the grids are the colors defined in the DSL, so we can think of grids as images.\nEach pair of images correspond to an input-output example for an unknown program P.\nFor each pair, the program P is evaluated on the image grid and operates on the objects that appear in it.\nThe output of the program is then the output image.\nThe objects in the images are easy and natural to identify for humans, so there is no need to define them explicitly.\nHowever you are able to abstract them correctly, and the DSL is interpreted with the same correct abstraction.\n\n\nNow I will show you some demonstration tasks along with the output you would be expected to produce for each of them.\n\n## DEMONSTRATION TASK 1\n\n### INPUT\nPAIR 1\nINPUT GRID:\nO O O O O O O O\nO O O O O R O O\nO R O O O R O R\nO R R O O R O O\nO O O O O O O O\nO R R O O O O O\nO R R O R R O O\nO O O O O O O O\nOUTPUT GRID:\nO O O O O O O O\nO O O O O Y O O\nO Y O O O Y O Y\nO Y Y O O Y O O\nO O O O O O O O\nO Y Y O O O O O\nO Y Y O Y Y O O\nO O O O O O O O\n\nPAIR 2\nINPUT GRID:\nO O O O O O O O O O\nO O O O R O O O O O\nO G O O R O O W O O\nO O G O O O W W O O\nO O G O O O O O O O\nO O O O X O O O O O\nO O O O O O F F F O\nO B O O O O O O O O\nO B B B B O O C C O\nO O O O O O O C O O\nOUTPUT GRID:\nO O O O O O O O O O\nO O O O Y O O O O O\nO Y O O Y O O Y O O\nO O Y O O O Y Y O O\nO O Y O O O O O O O\nO O O O Y O O O O O\nO O O O O O Y Y Y O\nO Y O O O O O O O O\nO Y Y Y Y O O Y Y O\nO O O O O O O Y O O\n\n### EXPECTED OUTPUT\n{\n    \"nl_description\": \"Recolor all objects to color Y\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color Y)\\n        )\\n    )\\n)\"\n}\n\n\n## DEMONSTRATION TASK 2\n\n### INPUT\nPAIR 1\nINPUT GRID:\nO O O O O O O O\nO F F O O O R O\nO F F O O O O O\nO O O O O O O O\nO O O O O O O O\nO O O O O O O O\nO O A O O X X O\nO O O O O O O O\nOUTPUT GRID:\nO O O O O O O O\nO F F R R R R O\nO F F O O O O O\nO O A O O O O O\nO O A O O O O O\nO O A O O O O O\nO O A O O X X O\nO O O O O O O O\n\nPAIR 2\nINPUT GRID:\nO O O O O O O O O O\nO O O Y O G G G G O\nO O F O O G G G G O\nO O O O O O O O O O\nO O O O O O O O O O\nO O O O O O O O O O\nO C C C O O O O O O\nO C C C O O O O A O\nO C C C O O O X O O\nO O O O O O O O O O\nOUTPUT GRID:\nO O O O O O O O O O\nO O O Y O G G G G O\nO O F Y O G G G G O\nO O F Y O O O O O O\nO O F Y O O O O O O\nO O F Y O O O O O O\nO C C C O O O O O O\nO C C C A A A A A O\nO C C C X X X X O O\nO O O O O O O O O O\n\n### EXPECTED OUTPUT\n{\n    \"nl_description\": \"Extend all the objects of size 1 toward the object of maximum size, without overlapping.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (size_equals (size_of this) 1)\\n                (and\\n                    (neighbor_of this other)\\n                    (size_equals (size_of other) max)\\n                )\\n            )\\n        )\\n        (apply\\n            (extend_node (direction_of other) false)\\n        )    \\n    )\\n)\"\n}\n\n\n## DEMONSTRATION TASK 3\n\n### INPUT\nPAIR 1\nINPUT GRID:\nO O O O O O O O O O\nO O O O O O O G O O\nO O G O O O O G O O\nO O G G O O O G G O\nO O O O O O O O O O\nO G G O O O O O O O\nO G G O O G G G O O\nO O O O O O O O O O\nO O G G O O O G O O\nO O O O O O O O O O\nOUTPUT GRID:\nO O O O O O O O O O\nO O B O O O O G O O\nO O B B O O O G O O\nO O O O O O O G G O\nO O O O O O O O O O\nO G G O O B B B O O\nO G G O O O O O O O\nO O O O O O O O O O\nO O G G O O O G O O\nO O O O O O O O O O\n\nPAIR 2\nINPUT GRID:\nO O O O O O O O O O O O O O O O\nO O O O O O O O O O O O O G O O\nO B B O O O O O O C C C O G G O\nO O O O O F O O O O O O O O O O\nO O O O O F O O O O R R O O O O\nO O O O O F O O O O R R O O O O\nO O O O O O O O W O O O O O O O\nO O O A O O O W W O O O X O O O\nO O O A A O O W W O O O X X X O\nO O O O O O O O O O O O O O O O\nO O O O O O O O O O Y Y O O O O\nO O O O B O O O O O O O O O O O\nO Y O O B O O O G O O O O F F O\nO Y O O O O O O G O O O O F F O\nO Y Y Y O O O O G O O O O O O O\nO O O O O O O O O O O O O O O O\nOUTPUT GRID:\nO O O O O O O O O O O O O B O O\nO O O O O O O O O B B B O B B O\nO B B O O B O O O O O O O O O O\nO O O O O B O O O O O O O O O O\nO O O O O B O O O O R R O O O O\nO O O O O O O O O O R R O O O O\nO O O B O O O O W O O O O O O O\nO O O B B O O W W O O O X O O O\nO O O O O O O W W O O O X X X O\nO O O O O O O O O O O O O O O O\nO O O O O O O O O O Y Y O O O O\nO O O O B O O O B O O O O O O O\nO Y O O B O O O B O O O O F F O\nO Y O O O O O O B O O O O F F O\nO Y Y Y O O O O O O O O O O O O\nO O O O O O O O O O O O O O O O\n\n### EXPECTED OUTPUT\n{\n    \"nl_description\": \"Move all objects of size 3 one step up, and then recolor them to color B.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (size_equals (size_of this) 3)\\n        )\\n        (apply\\n            (move_node up)\\n            (update_color B)\\n        )\\n    )\\n)\"\n}\n\n\n## DEMONSTRATION TASK 4\n\n### INPUT\nPAIR 1\nINPUT GRID:\nO O O O R O O O A O\nO B O O O O B O O O\nO O O O O O O O O O\nO O O O X X X O O O\nO O O O X X X O O F\nW O O O O O O O O O\nO O F O O O Y O O O\nO O O O O O O O O O\nO O O O G O O O W O\nO O O O O O O O O O\nOUTPUT GRID:\nO O O O O O O O A O\nO B O O O O O O O O\nO O O O R O B O O O\nO O O O X X X O O O\nO O O O X X X F O O\nW O O O G O Y O O O\nO O F O O O O O O O\nO O O O O O O O O O\nO O O O O O O O W O\nO O O O O O O O O O\n\nPAIR 2\nINPUT GRID:\nO O O F O O O R O O O O\nO O O O O O O O O Y O O\nO O O O O B O O O O O O\nO O R O O O O O G O O O\nB O O O O G O O O O O A\nO O O O O O R O O O W O\nO O O O O O O O C O O O\nG O X X O O O O O O O R\nO O X X O O O O O O Y O\nO O X X O O A O O O O O\nO F X X O O O O O O O O\nO O O O O Y O O O O O O\nOUTPUT GRID:\nO O O O O O O R O O O O\nO O O O O O O O O Y O O\nO O O O O B O O O O O O\nO O O O O O O O G O O O\nB O O O O G O O O O O A\nO O O O O O R O O O W O\nO O R F O O O O C O O O\nO G X X R O O O O O O O\nO O X X Y O O O O O O O\nO O X X A O O O O O O O\nO F X X O O O O O O O O\nO O O O O Y O O O O O O\n\nPAIR 3\nINPUT GRID:\nO G O O O O O O\nO O O A O O A O\nW O O O W O O O\nO O O O O O O B\nO R O X O F O O\nO O O O O O O O\nO G O O F O O G\nO O B O O A O O\nOUTPUT GRID:\nO G O O O O O O\nO O O O O O A O\nW O O O W O O O\nO O O A O O O B\nO O R X F O O O\nO O O O O O O O\nO G O O F O O G\nO O B O O A O O\n\n### EXPECTED OUTPUT\n{\n    \"nl_description\": \"Move all objects of color different than X, toward the object of color X, if they are neighbors of it.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (not (color_equals (color_of this) X))\\n                (and\\n                    (neighbor_of this other)\\n                    (color_equals (color_of other) X)\\n                )\\n            )\\n        )\\n        (apply\\n            (move_node_max (direction_of other))\\n        )\\n    )\\n)\"\n}\n\n\nNow follows task you will be evaluated on.\nOutput the solution as a JSON object, which should contain both a natural language description of the solution and the solution written in the DSL.\nThe code should be parseable by the DSL grammar.\nThe JSON must have the following structure:\n\n{\n    \"nl_description\": \"TO_BE_FILLED\",\n    \"code\": \"TO_BE_FILLED\"\n}\n\n## TEST TASK\n\nPAIR 1\nINPUT GRID:\nC C C C C C C C C C C C C C C\nC C C C C C C C C C C C C C C\nC C C C C C C C F F F F C C C\nC C C C C C C C F C C F C C C\nC C C F F C C C F C C F C C C\nC C C F F C C C F C C F C C C\nC C C C C C C C F F F F C C C\nC C C C C C C C C C C C C C C\nC C C C C C C C C C C C C C C\nC C C C C C C C C C C C C C C\nC C C C C F F F F C C C C C C\nC C C C C F F F F C C C C C C\nC C C C C F F F F C C C C C C\nC C C C C F F F F C C C C C C\nC C C C C C C C C C C C C C C\nOUTPUT GRID:\nC C C C C C C C C C C C C C C\nC C C C C C C G G G G G G C C\nC C C C C C C G F F F F G C C\nC C G G G G C G F Y Y F G C C\nC C G F F G C G F Y Y F G C C\nC C G F F G C G F Y Y F G C C\nC C G G G G C G F F F F G C C\nC C C C C C C G G G G G G C C\nC C C C C C C C C C C C C C C\nC C C C G G G G G G C C C C C\nC C C C G F F F F G C C C C C\nC C C C G F F F F G C C C C C\nC C C C G F F F F G C C C C C\nC C C C G F F F F G C C C C C\nC C C C G G G G G G C C C C C\n\nPAIR 2\nINPUT GRID:\nC C C C C C C C C C C C C C C\nC C C C C C C C F F F C C C C\nC C C C C C C C F F F C C C C\nC C F F F F C C F F F C C C C\nC C F C F F C C C C C C C C C\nC C F C F F C C C C C C C C C\nC C F F F F C C C C C C C C C\nC C C C C C C C C C C C C C C\nC C C C C C C C F F F F F F C\nC C C C C C C C F C C C C F C\nC C C C C C C C F C C C C F C\nC C C C C C C C F C C C C F C\nC C C C C C C C F C C C C F C\nC C C C C C C C F F F F F F C\nC C C C C C C C C C C C C C C\nOUTPUT GRID:\nC C C C C C C G G G G G C C C\nC C C C C C C G F F F G C C C\nC G G G G G G G F F F G C C C\nC G F F F F G G F F F G C C C\nC G F Y F F G G G G G G C C C\nC G F Y F F G C C C C C C C C\nC G F F F F G C C C C C C C C\nC G G G G G G G G G G G G G G\nC C C C C C C G F F F F F F G\nC C C C C C C G F Y Y Y Y F G\nC C C C C C C G F Y Y Y Y F G\nC C C C C C C G F Y Y Y Y F G\nC C C C C C C G F Y Y Y Y F G\nC C C C C C C G F F F F F F G\nC C C C C C C G G G G G G G G\n"
        }
    ],
    "n_valid_json": 100,
    "n_can_parse": 69,
    "completions": [
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all the objects of color F to color Y when they are on the left side of a horizontal line of objects of color G.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) F)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) G)\n                )\n            )\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Insert or surround all objects of color 'F' with a border of color 'G', and change the color of the interior objects to 'Y'.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) F)\n        )\n        (apply\n            (add_border G)\n            (update_color Y)\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor each enclosed region to color G, and the cells adjacent to an enclosed F region to color Y",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (shape_equals (shape_of this) enclosed)\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (and\n                    (color_equals (color_of other) F)\n                    (shape_equals (shape_of other) enclosed)\n                )\n            )\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects until they hit another object. Then, recolor all objects of color F to color Y and add a border of color G to all objects.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node_max (direction_of this))\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) F)\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (add_border G)\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor the exterior border with color G and objects of different color in the center are transformed, changing their colors to G and F while nested objects inside are colored Y.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (add_border G)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (height_equals (height_of this) max)\n                (width_equals (width_of this) max)\n            )\n        )\n        (apply\n            (hollow_rectangle G)\n            (fill_rectangle F true)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) F)\n            )\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Add a green border around all objects of color F. Then recolor interior pixels of objects of color F to Y if they are not on the border.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) F)\n        )\n        (apply\n            (add_border G)\n            (fill_rectangle Y false)\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all objects of color F to color Y if they are part of a larger pattern (horizontal or vertical line), and encapsulate them with an object of color G.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) F)\n                (or\n                    (neighbor_of this other)\n                    (color_equals (color_of other) F)\n                )\n            )\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) max)\n        )\n        (apply\n            (add_border G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color G)\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all the boundary objects to color G, and recolor all 'F' objects which are neighbors of 'Y' objects.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (or\n                (and\n                    (or\n                        (column_equals (column_of this) 0)\n                        (column_equals (column_of this) 14)\n                    )\n                    (color_equals (color_of this) C)\n                )\n                (and\n                    (or\n                        (column_equals (column_of this) 8)\n                        (column_equals (column_of this) 9)\n                    )\n                    (color_equals (color_of this) C)\n                )\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) F)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) Y)\n                )\n            )\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "First, move all 'F' objects to have a 'G' border around them. After that, change some inner 'F' nodes to 'Y'.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) F)\n        )\n        (apply\n            (add_border G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) F)\n                (not\n                    (or\n                        (neighbor_of this this)\n                        (neighbor_of this this)\n                    )\n                )\n            )\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of size 4 one step toward the object of size 6, and then recolor intersecting objects to color Y.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 4)\n                (and\n                    (neighbor_of this other)\n                    (size_equals (size_of other) 6)\n                )\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n        )    \n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (and\n                    (size_equals (size_of this) 4)\n                    (size_equals (size_of other) 6)\n                )\n            )\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Extend all the segments of color F into the nearest areas and recolor the extended parts to color Y.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) F)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (extend_node (direction_of other) false)\n            (update_color Y)\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Surround the largest enclosed area with a border of color G, then recolor the inner area to color Y.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (shape_equals (shape_of this) enclosed)\n        )\n        (apply\n            (add_border G)\n            (fill_rectangle Y false)\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Extend all objects of color F that are not at the edge of the grid, towards the center and then recolor them to color Y.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) F)\n                (not (or\n                    (neighbor_of this (column_equals (column_of this) 0))\n                    (neighbor_of this (column_equals (column_of this) 14))\n                ))\n            )\n        )\n        (apply\n            (extend_node center false)\n            (update_color Y)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 8 col 39\n\n                    (neighbor_of this (column_equals (column_of this) 0))\n                                      ^\nExpected one of: \n\t* VAR\n"
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Extend all objects of color F to the maximum, without overlapping, and then change the color of the center objects to G and adjacent objects to Y.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) F)\n        )\n        (apply\n            (extend_node (size_of this) false)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) G))\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) G)\n                )\n            )\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches 's' in the current parser context, at line 8 col 27\n\n            (extend_node (size_of this) false)\n                          ^\nExpected one of: \n\t* DIRECTION_OF\n"
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Borders of the clusters are set to G, and interior F blocks are set to Y.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (size_equals (size_of this) 1))\n        (apply\n            (update_color Y)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (add_border G)\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor interior pixels of objects with shapes enclosed of color F to color Y, add border of color G to all objects.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (shape_equals (shape_of this) enclosed)\n                (color_equals (color_of this) F)\n            )\n        )\n        (apply\n            (fill_rectangle Y false)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (add_border G)\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor some objects and extend some others to create larger areas.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) C))\n                (color_equals (color_of other) C))\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node_max down)\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Surround all F objects with G and recolor the central F cells to Y.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) F)\n        )\n        (apply\n            (add_border G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) F)\n                (neighbor_of this other)\n                (color_equals (color_of other) G)\n            )\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 17 col 17\n\n                (color_equals (color_of other) G)\n                ^\nExpected one of: \n\t* RPAR\n"
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all F objects to be G objects, and extend the G objects horizontally and then change the color of some specific cells to Y.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) F)\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) G)\n        )        \n        (apply\n            (extend_node right false)\n            (update_color Y)\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Transform object F to G, then extend any F forms that do not neighbor another F towards the right and change inner cells to Y.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) F)\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) F)\n                (not (neighbor_of this other))\n            )\n        )\n        (apply\n            (extend_node right false)\n            (update_color Y)\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Surround all objects by a border of G, and then recolor 'F' objects to 'Y' if their size is less than '5'.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (add_border G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) F)\n                (size_equals (size_of this) (min 5))\n            )\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches 'm' in the current parser context, at line 14 col 46\n\n           (size_equals (size_of this) (min 5))\n                                        ^\nExpected one of: \n\t* SIZE_OF\n"
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects toward the nearest edge if they are of color F, then recolor blobs of F surrounded by C to green, and recolor the interior of blobs to yellow.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (and (color_equals (color_of this) F)))\n        (apply (move_node_max (direction_of this))\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter (and (color_equals (color_of this) F) (neighbor_of this other) (color_equals (color_of other) C)))\n        (apply (update_color G))\n    )\n    (rule\n        (vars (this))\n        (filter (and (color_equals (color_of this) F) (color_equals (color_of other) G)))\n        (apply (update_color Y))\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches ')' in the current parser context, at line 4 col 54\n\ner (and (color_equals (color_of this) F)))\n                                        ^\nExpected one of: \n\t* LPAR\n"
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Extend all F objects by one unit and recolor them to match the color corresponding to their rows and columns.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) F)\n        )\n        (apply\n            (extend_node right false)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) F)\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) C)\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Fill the region around the F objects with color G, and recolor the inner F objects to Y in the same column.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) F)\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) C)\n                (neighbor_of this other)\n                (color_equals (color_of other) F)\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 17 col 17\n\n                (color_equals (color_of other) F)\n                ^\nExpected one of: \n\t* RPAR\n"
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all objects of color C towards F to color G, and recolor interior objects of F to color Y.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) C)\n                (neighbor_of this other)\n                (color_equals (color_of other) F)\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) F)\n                (neighbor_of this other)\n                (color_equals (color_of other) F)\n            )\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 8 col 17\n\n                (color_equals (color_of other) F)\n                ^\nExpected one of: \n\t* RPAR\n"
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Extend all objects of color F towards each other without overlapping, and change their color to Y, then add a border of color G around the entire constructed structure.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of this) F)\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) Y)\n                (color_equals (color_of other) Y)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (extend_node (direction_of other) false)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n        )\n        (apply\n            (add_border G)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 17 col 17\n\n                (neighbor_of this other)\n                ^\nExpected one of: \n\t* RPAR\n"
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Transform all objects from color Y to G, extend or move them accordingly, and add a border to objects of size larger than 1.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 1)\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (not (size_equals (size_of this) 1))\n        )\n        (apply\n            (update_color G)\n            (add_border G)\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Add color G to the borders of all objects and change the interior color to Y for all objects.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (add_border G)\n            (update_color Y)\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Add a border of color G around the clusters of 'F' and change the color of the inner pixels of these clusters to 'Y'.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) F)\n        )\n        (apply\n            (add_border G)\n            (update_color Y)\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor the border and move 'F' and 'Y' separated regions to form single region.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (not (color_equals (color_of this) C))\n                (shape_equals (shape_of this) enclosed)\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) F)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) F)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n            (update_color Y)\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Extend the left and right borders of all objects colored F and turn their interior to color Y. Then, color the surrounding area with G, maintaining the previously filled Y area.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) F)\n        )\n        (apply\n            (extend_node left true)\n            (extend_node right true)\n            (fill_rectangle Y true)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) Y))\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) Y)\n                )\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Extend all the gray objects in all directions without overlap, filling the interior of the extended shape with yellow.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) C)\n        )\n        (apply\n            (extend_node up false)\n            (extend_node down false)\n            (extend_node left false)\n            (extend_node right false)\n            (fill_rectangle Y true)\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor and expand the boundary objects G towards the F objects without overlapping, and recolor the F objects in the inner grid to Y",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) G)\n        )\n        (apply\n            (extend_node down true)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) F)\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Extend all F objects by first adding a G border, then recolor bordering F objects to Y.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) F)\n        )\n        (apply\n            (add_border G)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) F)\n                (neighbor_of this other)\n                (color_equals (color_of other) G)\n            )\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 17 col 17\n\n                (color_equals (color_of other) G)\n                ^\nExpected one of: \n\t* RPAR\n"
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Outline the objects of color F with color G, and change some F cells surrounded by them to color Y.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) F)\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) F)\n        )\n        (apply\n            (add_border G)\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Extend the blue and yellow color borders to enclose all neighboring objects, transforming red objects to yellow.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (or\n                    (color_equals (color_of this) G)\n                    (color_equals (color_of this) Y)\n                )\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (extend_node (direction_of other) false)\n            (update_color Y)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) F)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor hollow rectangles to color G and fill the interior with color Y.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (shape_equals (shape_of this) enclosed)\n        )\n        (apply\n            (add_border G)\n            (fill_rectangle Y false)\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Extend all objects to 'G' and update their color to 'Y' without overlap.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (extend_node G false)\n            (update_color Y)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches 'G' in the current parser context, at line 6 col 26\n\n            (extend_node G false)\n                         ^\nExpected one of: \n\t* LPAR\n\t* DIRECTION\n"
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of size 6 toward the object of color G, if they are neighbors of it. Extend the neighboring objects to fill the gap if possible.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 6)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) G)\n                )\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of this) F)\n                (or\n                    (and (color_equals (color_of other) G) (size_equals (size_of this) 1))\n                    (and (color_equals (color_of other) 6))\n                )\n            )\n        )\n        (apply\n            (extend_node (direction_of other) false)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 23 col 17\n\n                (or\n                ^\nExpected one of: \n\t* RPAR\n"
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Expand all objects and recolor their borders.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n            (filter)\n        (apply\n            (add_border G)\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) F)\n                (color_equals (color_of other) G)\n            )\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches 'f' in the current parser context, at line 5 col 14\n\n            (filter)\n             ^\nExpected one of: \n\t* APPLY\n"
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Extend objects of color F by converting their border cells to color G and their inner cells to color Y.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) F)\n        )\n        (apply\n            (add_border G)\n            (fill_rectangle Y false)\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor the objects of color different from 'C' and surrounded by 'C' with different colors and patterns.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (not (color_equals (color_of this) C))\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) F)\n                (neighbor_of this other)\n                (color_equals (color_of other) G)\n            )\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 17 col 17\n\n                (color_equals (color_of other) G)\n                ^\nExpected one of: \n\t* RPAR\n"
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Extend all objects of color F to form a contiguous block of objects and recolor the interior to color Y, adding a border of color G.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) F)\n        )\n        (apply\n            (fill_rectangle Y false)\n            (add_border G)\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Expand and recolor objects in and around F shapes to create a Y diamond and G borders.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (or\n                (color_equals (color_of this) F)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (size_equals (size_of this) 4)\n                (color_equals (color_of this) F)\n            )\n        )\n        (apply\n            (extend_node up false)\n            (extend_node down false)\n            (extend_node left false)\n            (extend_node right false)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) F)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Paint a border of color G around the isolated objects of color F, and recolor the central part of the object to yellow.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) F)\n        )\n        (apply\n            (add_border G)\n            (update_color Y)\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Extend the objects of color F to enclose an area, recolor the enclosed area Y and then add a border of color G to all enclosed areas.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) F)\n        )\n        (apply\n            (extend_node (right) false)\n            (extend_node (down) false)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) C)\n                (neighbor_of this other)\n                (and\n                    (color_equals (color_of other) F)\n                    (neighbor_of other other2)\n                    (color_equals (color_of other2) F)\n                    (neighbor_of other other3)\n                    (color_equals (color_of other3) F)\n                    (neighbor_of other other4)\n                    (color_equals (color_of other4) F)\n                )\n            )\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) F)\n        )\n        (apply\n            (add_border G)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches 'r' in the current parser context, at line 8 col 27\n\n            (extend_node (right) false)\n                          ^\nExpected one of: \n\t* DIRECTION_OF\n"
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Transform the rows consisting of F to form a rectangle and recolor the rows and columns forming intersection to color G and internal spaces to color Y",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (and (color_equals (color_of this) F) (neighbor_of this this)))\n        (apply\n            (extend_node right false)\n            (update_color Y)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter (and (color_equals (color_of this) Y) (and (size_equals (size_of this) 1) (size_equals (size_of other) max))))\n        (apply\n            (extend_node down false)\n            (update_color Y)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter (and (color_equals (color_of this) F) (or (neighbor_of this other) (size_equals (size_of this) 4))))\n        (apply\n            (update_color G)\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color F toward the nearest object of color G without overlapping, and change their color to Y.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) F)\n                (neighbor_of this other)\n                (color_equals (color_of other) G)\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n            (update_color Y)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 8 col 17\n\n                (color_equals (color_of other) G)\n                ^\nExpected one of: \n\t* RPAR\n"
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Expand and re-color objects of size 5 with more than one color, expanding size 1 cells towards neighboring objects when possible.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (and\n                    (size_equals (size_of this) 1)\n                    (not (color_equals (color_of this) C))\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (size_equals (size_of this) 5)\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Extend the objects horizontally and fill with color Y if Y is neighbor, and add a border with G to the objects of color F.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) F)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (extend_node right false)\n            (extend_node left false)\n            (move_node down)\n            (add_border G)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) F))\n                (color_equals (color_of this) Y)\n                (neighbor_of this other)\n                (color_equals (color_of other) F)\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 23 col 17\n\n                (neighbor_of this other)\n                ^\nExpected one of: \n\t* RPAR\n"
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Extend all objects towards their neighboring `G` objects, ensuring they do not overlap.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) G)\n            )\n        )\n        (apply\n            (extend_node (direction_of other) false)\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Add a green border around all objects and change the inside color of the objects that were adjacent to a blue colored object.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) F)\n            )\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (add_border G)\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Extend all the objects of color F toward the object of color G, changing the color to Y during the extension, without overlapping. Add a border of color G around all G objects.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) F)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) G)\n                )\n            )\n        )\n        (apply\n            (extend_node (direction_of other) false)\n            (update_color Y)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) G)\n        )\n        (apply\n            (add_border G)\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Add a border of color G to the group of objects in the upper-left quadrant. Recolor a subset of the objects inside the border to color Y.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) F)\n                (or\n                    (size_equals (size_of this) 28)\n                    (size_equals (size_of this) 56)\n                )\n            )\n        )\n        (apply\n            (add_border G)\n            (update_color Y)\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Surround all objects with a border of color G, then change the color Y of neighboring objects to Y.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (add_border G)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) Y)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor some objects to color G, then recolor some parts of certain objects to color Y.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (or\n                (color_equals (color_of this) F)\n                (color_equals (color_of this) C)\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of this) F)\n                (color_equals (color_of other) F)\n            )\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 20 col 17\n\n                (color_equals (color_of other) F)\n                ^\nExpected one of: \n\t* RPAR\n"
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Extend all F objects in all directions without overlapping until they reach another object or boundary, then recolor F objects partially to Y in specific pattern, and finally add a border G around main combined objects structure.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) F)\n        )\n        (apply\n            (extend_node up false)\n            (extend_node down false)\n            (extend_node left false)\n            (extend_node right false)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) F)\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (add_border G)\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Expand and recolor grid components, forming a solid border with the color G, and filling the region inside with the color Y.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of this) F)\n        )\n        (apply\n            (extend_node up false)\n            (extend_node down false)\n            (extend_node left false)\n            (extend_node right false)\n            (update_color Y)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (not (color_equals (color_of this) G))\n                (color_equals (color_of this) C)\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) G)\n                (neighbor_of this other) \n                (or\n                    (color_equals (color_of other) Y)\n                    (color_equals (color_of other) G)\n                )\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 33 col 17\n\n                (or\n                ^\nExpected one of: \n\t* RPAR\n"
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Extend all objects to the nearest edge without overlapping and change some colors to G or Y.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (size_equals (size_of this) 4))\n        (apply (extend_node down false) (update_color G))\n    )\n    (rule\n        (vars (this))\n        (filter (size_equals (size_of this) 16))\n        (apply (extend_node right false))\n    )\n    (rule\n        (vars (this))\n        (filter (size_equals (size_of this) 1))\n        (apply (update_color Y))\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Add a border of color G around all the objects, then recolor the innermost pixels of the objects with size greater than 1 to color Y.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (add_border G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (not (size_equals (size_of this) 1))\n                (color_equals (color_of this) F)\n            )\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Extend the objects of color F and recolor their borders to G. Recolor internal pixels to Y.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) F)\n        )\n        (apply\n            (extend_node (direction_of this) false)\n            (add_border G)\n            (update_color Y)\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Expand the objects of color F to enclose Y within their borders, and surround these enclosed regions with the color G.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (and (color_equals (color_of this) F)\n                     (neighbor_of this this)))\n        (apply\n            (update_color Y)\n            (add_border G)\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Extend green border inwards, change internal objects' color to yellow, and add external border with color G",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (and (color_equals (color_of this) F) (or (neighbor_of this) (neighbor_of (color_of this) F))))\n        (apply\n            (update_color Y)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter (or (color_equals (color_of this) F) (color_equals (color_of this) O)))\n        (apply\n            (update_color G)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches ')' in the current parser context, at line 4 col 76\n\n(color_of this) F) (or (neighbor_of this) (neighbor_of (color_of this) F))))\n                                        ^\nExpected one of: \n\t* VAR\n"
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects to the boundary of the grid, then recolor the neighbor objects with same color to an intermediate color.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n        )\n        (apply\n            (move_node_max down)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of this) (color_of other))\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Change the color of the largest F-shaped objects to Y, add a green border around them and move G.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (shape_equals (shape_of this) enclosed)\n                (and\n                    (color_equals (color_of this) F)\n                    (and\n                        (size_equals (size_of this) max)\n                        (neighbor_of this other)\n                    )\n                )\n            )\n        )\n        (apply\n            (update_color Y)\n            (add_border G)\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Extend all yellow objects into a square of green objects and recolor contained objects yellow",
            "code": "(do \n    (rule \n        (vars (this other)) \n        (filter \n            (and \n                (color_equals (color_of this) F) \n                (neighbor_of this other) \n            ) \n        ) \n        (apply \n            (add_border G) \n            (update_color Y) \n        ) \n    ) \n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move objects adjacent to F to form a border around it, change the adjacent objects color to Y, then color objects excluding new and existing adjacent G to G.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) F))\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) F)\n                )\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n            (update_color Y)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) F))\n                (not (color_equals (color_of this) G))\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all border pixels of objects to G and recolor all inner F pixels of objects to Y.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (add_border G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) F)\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Add a green border around all objects of color 'F' and recolor the central part to 'Y' if it is an enclosed area.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of this) F)\n        )\n        (apply\n            (add_border G)\n            (fill_rectangle Y false)\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor certain objects to green and yellow, then recolor the borders of other objects to green.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) F)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) O)\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) C)\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color F to their respective positions according to the object of color maximum size in the input grids, while extending until they encounter any object or edge, and then recolor the objects of color F to color Y. Additionally, extend each object of size 4 with a border around the F objects and recolor it to G.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of this) F)\n        )\n        (apply\n            (extend_node (direction_of other) false)\n            (update_color Y)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 4)\n        )\n        (apply\n            (add_border G)\n            (update_color G)\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Extend all objects of color F towards the object of color G without overlap, recolor intermediate steps 'Y' if they pass through them",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) F)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) G)\n                )\n            )\n        )\n        (apply\n            (extend_node (direction_of other) false)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) Y)\n        )\n        (apply\n            (update_color F)\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Enclose regions of size greater than 1 and containing the color F with the color G and change the color of other color objects within these regions to Y.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) max)\n                (color_equals (color_of this) C)\n                (neighbor_of this other)\n                (color_equals (color_of other) F)\n            )\n        )\n        (apply\n            (add_border G)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) F)\n                (neighbor_of this other)\n                (not (color_equals (color_of other) C))\n                (not (color_equals (color_of other) F))\n            )\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 8 col 17\n\n                (neighbor_of this other)\n                ^\nExpected one of: \n\t* RPAR\n"
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color F toward the object of color Y if they are neighbors and recolor them to color G.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) F)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) Y)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n            (update_color G)\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Surround the objects of color F with columns of G, and recolor the second object near the top with Y.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) F)\n        )\n        (apply\n            (add_border G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) F)\n                (neighbor_of this (size_of max) (color_equals (color_of G) true))\n            )\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 16 col 35\n\n                (neighbor_of this (size_of max) (color_equals (color_of G)\n                                  ^\nExpected one of: \n\t* VAR\n"
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor the outer border of all objects to color G, and recolor the interior of all objects to color Y.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (add_border G)\n            (fill_rectangle Y false)\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Insert G shapes around all F shapes, then recolor top-left and bottom-right cells of F shapes to Y.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 12)\n        )\n        (apply\n            (insert F top_left source)\n            (insert F bottom_right source)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) F)\n        )\n        (apply\n            (add_border G)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches 'F' in the current parser context, at line 8 col 21\n\n            (insert F top_left source)\n                    ^\nExpected one of: \n\t* OBJECT_ID\n"
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Extend all clusters of F nodes by coloring the adjacent empty spaces (C) with G and recoloring interior nodes (excluding F) to Y.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) F)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (add_border G)\n            (fill_rectangle Y false)\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all the objects of color F towards the center column and recolor the interior of hollow objects to color Y, recolor the columns left to the central column to color G, and add a border with color G at the center column.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) F))\n        (apply\n            (move_node (right))\n        )\n    )\n    (rule\n        (vars (this))\n        (filter (SHAPE_EQ (shape_of this) hollow))\n        (apply\n            (fill_rectangle Y false)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (add_border G)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches 'r' in the current parser context, at line 6 col 25\n\n            (move_node (right))\n                        ^\nExpected one of: \n\t* DIRECTION_OF\n"
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Modify the objects touching the border, converting them into the object of maximum size, changing their color to G, and converting the interior objects of the F boundary to color Y.",
            "code": "(do\n     (rule\n         (vars (this))\n             (filter\n                (size_equals (size_of this) 6))\n            (apply\n             (update_color G))\n        )\n     (rule\n         (vars (this))\n             (filter\n                (color_equals (color_of this) F))\n            (apply\n             (update_color Y))\n        )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all the F objects towards the center to form a border around them and recolor their neighboring squares to color G.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of this) F)\n        )\n        (apply\n            (move_node center)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) F)\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches 'c' in the current parser context, at line 8 col 24\n\n            (move_node center)\n                       ^\nExpected one of: \n\t* LPAR\n\t* DIRECTION\n"
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Extend all F objects, and color their overlaps with Y, while adding a border of G around the new objects.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) F)\n        )\n        (apply\n            (fill_rectangle Y true)\n            (add_border G)\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects beside the ones of color F and extend them to create borders of G, then recolor specific regions to color Y",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) F))\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n            (add_border G)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (and\n                    (color_equals (color_of other) F)\n                    (or\n                        (color_equals (color_of this) C)\n                        (color_equals (color_of this) G)\n                    )\n                )\n            )\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Color the border of the largest objects with color G and change the color inside to Y where the color was F.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) F)\n                (or\n                    (neighbor_of this other)\n                    (size_equals (size_of this) max)\n                )\n            )\n        )\n        (apply\n            (add_border G)\n            (update_color Y)\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Extend all the objects of color F and recolor objects they encounter to Y, then add borders of color G to all objects",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) F)\n        )\n        (apply\n            (extend_node (right) true)\n            (extend_node (left) true)\n            (extend_node (up) true)\n            (extend_node (down) true)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (add_border G)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches 'r' in the current parser context, at line 8 col 27\n\n            (extend_node (right) true)\n                          ^\nExpected one of: \n\t* DIRECTION_OF\n"
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Surround the F objects with G objects, recolor inner F objects to Y.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of this) F)\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (add_border G)\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Extend all non-'C' colored objects towards the center of the grid.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (not (color_equals (color_of this) C))\n        )\n        (apply\n            (extend_node center false)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches 'c' in the current parser context, at line 8 col 26\n\n            (extend_node center false)\n                         ^\nExpected one of: \n\t* LPAR\n\t* DIRECTION\n"
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Extend all objects F in the direction of the neighboring object G, and change inner color of the extended objects to Y, with the surrounding area colored with G.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) F)\n                (neighbor_of this other)\n                (color_equals (color_of other) G)\n            )\n        )\n        (apply\n            (extend_node (direction_of other) true)\n            (add_border G)\n            (update_color Y)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 8 col 17\n\n                (color_equals (color_of other) G)\n                ^\nExpected one of: \n\t* RPAR\n"
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all objects of color F to Y and surround the initial cluster of objects with color G.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) F)\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) G)\n        )\n        (apply\n            (add_border G)\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Extend all objects of color F towards the objects of color G, without overlapping.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) F)\n                (neighbor_of this other)\n                (color_equals (color_of other) G)\n            )\n        )\n        (apply\n            (extend_node (direction_of other) false)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 8 col 17\n\n                (color_equals (color_of other) G)\n                ^\nExpected one of: \n\t* RPAR\n"
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Extend all objects of color F, fill them with color Y, and add a border of color G.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) F)\n        )\n        (apply\n            (extend_node left false)\n            (fill_rectangle Y false)\n            (add_border G)\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Extend the F objects to form a hollow rectangle surrounding them, filling the interior with Y.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of this) F)\n        )\n        (apply\n            (extend_node right false)\n            (extend_node left false)\n            (extend_node up false)\n            (extend_node down false)\n            (extend_node down_right false)\n            (extend_node down_left false)\n            (extend_node up_right false)\n            (extend_node up_left false)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) C)\n                (neighbor_of this other)\n                (color_equals (color_of other) F)\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (fill_rectangle Y false)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 24 col 17\n\n                (color_equals (color_of other) F)\n                ^\nExpected one of: \n\t* RPAR\n"
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Extend the fuchsia objects in all directions until they hit another object, and then recolor them. Move the cyan objects which are size 6 one step up, and then recolor them green.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) F)\n        )\n        (apply\n            (extend_node up true)\n            (extend_node down true)\n            (extend_node left true)\n            (extend_node right true)\n            (update_color Y)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) C)\n                (size_equals (size_of this) 6)\n            )\n        )\n        (apply\n            (move_node up)\n            (update_color G)\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor the borders of the objects of color F to G, and then update the color of the interior cells of the objects to Y.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) F)\n        )\n        (apply\n            (add_border G)\n            (update_color Y)\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Expand and change the color of all objects of color F to fit within a border of color G. The objects touching the original boundaries turn into Y.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) F)\n        )\n        (apply\n            (extend_node up_left false)\n            (extend_node up_right false)\n            (extend_node down_left false)\n            (extend_node down_right false)\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) G)\n                (neighbor_of this other)\n                (color_equals (color_of other) F)\n            )\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 21 col 17\n\n                (color_equals (color_of other) F)\n                ^\nExpected one of: \n\t* RPAR\n"
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Enclose groups of F with G, and recolor some cells near F to Y.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) F)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (not (color_equals (color_of this) F))\n                (not (color_equals (color_of this) G))\n            )\n        )\n        (apply\n            (add_border G)\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all internal 'F' objects to 'Y', add a 'G' border to all objects.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) F)\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (add_border G)\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "For each object in the grid, if it is enclosed by another object, apply a border of color G around the enclosing object and update the interior to include color Y where previously present.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (shape_equals (shape_of this) enclosed)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (add_border G)\n            (hollow_rectangle Y)\n        )\n    )\n)",
            "can_parse": true
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Border all enclosed areas and then recolor the centers of enclosed areas.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter)\n            (and\n                (shape_equals (shape_of this) enclosed)\n            )\n        (apply\n            (add_border G)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (shape_equals (shape_of this) enclosed)\n            )\n        (apply\n            (fill_rectangle Y false)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches 'a' in the current parser context, at line 5 col 14\n\n            (and\n             ^\nExpected one of: \n\t* APPLY\n"
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Surround objects of color F with G color and change the inner cells of these objects to color Y.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) F)\n        )\n        (apply\n            (add_border G)\n            (update_color Y)\n        )\n    )\n)",
            "can_parse": true
        }
    ],
    "task_id": "543a7ed5"
}