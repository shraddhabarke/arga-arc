[
    {
        "response": "{\n    \"nl_description\": \"Recolor all objects to color G, and then extend the objects of color R that are neighbors to objects of color G without overlapping.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) R)\\n                (neighbor_of this other)\\n                (color_equals (color_of other) G)\\n            )\\n        )\\n        (apply\\n            (extend_node (direction_of other) false)\\n        )\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches '(' in the current parser context, at line 15 col 17\n\n                (color_equals (color_of other) G)\n                ^\nExpected one of: \n\t* RPAR\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Move all objects of color different than C, toward the object of color C, if they are neighbors of it, and then recolor them to G.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (not (color_equals (color_of this) C))\\n                (neighbor_of this other)\\n                (color_equals (color_of other) C)\\n            )\\n        )\\n        (apply\\n            (move_node_max (direction_of other))\\n            (update_color G)\\n        )\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches '(' in the current parser context, at line 8 col 17\n\n                (color_equals (color_of other) C)\n                ^\nExpected one of: \n\t* RPAR\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Change the color of the background to G. For the C objects, if they are next to another object, change the color of the adjacent non-C object to R.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) C)\\n                (neighbor_of this other)\\n                (not (color_equals (color_of other) C))\\n            )\\n        )\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches '(' in the current parser context, at line 15 col 17\n\n                (not (color_equals (color_of other) C))\n                ^\nExpected one of: \n\t* RPAR\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Move all C colored objects that are neighbors of O colored objects as close as possible to their neighbors and then recolor everything to G, and recolor the remaining items to G and R.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) C)\\n                (neighbor_of this other)\\n                (color_equals (color_of other) O)\\n            )\\n        )\\n        (apply\\n            (move_node_max (direction_of other))\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter (neighbor_of this other))\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches '(' in the current parser context, at line 8 col 17\n\n                (color_equals (color_of other) O)\n                ^\nExpected one of: \n\t* RPAR\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Recolor all objects to color G and for the initial color 'C' add neighbors of color 'R' in one cell radius around the object.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (color_equals (color_of this) C)\\n        )\\n        (apply\\n            (extend_node (up) false)\\n            (extend_node (down) false)\\n            (extend_node (left) false)\\n            (extend_node (right) false)\\n            (update_color R)\\n        )\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches 'u' in the current parser context, at line 15 col 27\n\n            (extend_node (up) false)\n                          ^\nExpected one of: \n\t* DIRECTION_OF\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Color all objects except those of color C to color G. Change objects of color O that are next to C to color R.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter (not (color_equals (color_of this) C)))\\n        (apply (update_color G))\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter (and (color_equals (color_of this) O) (neighbor_of this other) (color_equals (color_of other) C)))\\n        (apply (update_color R))\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches '(' in the current parser context, at line 9 col 80\n\nor_of this) O) (neighbor_of this other) (color_equals (color_of other) C)))\n                                        ^\nExpected one of: \n\t* RPAR\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Recolor all objects to color G and recolor cells of size 3 to color R if they neighbor an object of color C\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter)\\n            (filter)\\n            (apply\\n                (update_color G)\\n            )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of other) C)\\n                (and\\n                    (neighbor_of this other)\\n                    (size_equals (size_of this) 3)\\n                )\\n            )\\n        )\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches 'f' in the current parser context, at line 5 col 14\n\n            (filter)\n             ^\nExpected one of: \n\t* APPLY\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Recolor all objects to color R if they are neighbors of the color C objects, else recolor them to color G.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (not (color_equals (color_of this) C))\\n                (neighbor_of this other)\\n                (color_equals (color_of other) C)\\n            )\\n        )\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches '(' in the current parser context, at line 8 col 17\n\n                (color_equals (color_of other) C)\n                ^\nExpected one of: \n\t* RPAR\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Change the color of objects of size greater than or equal to 15 to G, and then all the objects of size 3 to R.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (size_equals (size_of this) min))\\n        )\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (size_equals (size_of this) 3)\\n        )\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches ')' in the current parser context, at line 6 col 9\n\n        )\n        ^\nExpected one of: \n\t* LPAR\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Recolor all cells to color G. Then extend the objects of color B toward the objects of color C without overlapping.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) B)\\n                (color_equals (color_of other) C)\\n                (neighbor_of this other)\\n            )\\n        )\\n        (apply\\n            (extend_node (direction_of other) false)\\n        )\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches '(' in the current parser context, at line 15 col 17\n\n                (neighbor_of this other)\n                ^\nExpected one of: \n\t* RPAR\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Recolor the grid to G. For object of color C: Recolor to R if neighbors contain B, else retain color C.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) C)\\n                (neighbor_of this other)\\n                (color_equals (color_of other) B)\\n            )\\n        )\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches '(' in the current parser context, at line 15 col 17\n\n                (color_equals (color_of other) B)\n                ^\nExpected one of: \n\t* RPAR\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Move all objects of color other than C and of size greater than 1 towards the object of color C by one step, then recolor them to their respective color R or G based on the pair.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (not (color_equals (color_of this) C))\\n                (and\\n                    (size_equals (size_of this) max)\\n                    (neighbor_of this other)\\n                    (color_equals (color_of other) C)\\n                )\\n            )\\n        )\\n        (apply\\n            (move_node (direction_of other))\\n            (update_color (color_of this))\\n        )\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches '(' in the current parser context, at line 10 col 21\n\n                    (color_equals (color_of other) C)\n                    ^\nExpected one of: \n\t* RPAR\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Recolor all objects with color G and extend them with color R if they are neighbors of the color C.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) C)\\n            )\\n        )\\n        (apply\\n            (update_color C)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) G)\\n                (neighbor_of this other)\\n                (color_equals (color_of other) C)\\n            )\\n        )\\n        (apply\\n            (extend_node (direction_of other) false)\\n            (update_color R)\\n        )    \\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) O)\\n        )\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches ')' in the current parser context, at line 7 col 13\n\n            )\n            ^\nExpected one of: \n\t* LPAR\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Recolor all objects, and then repaint the initial objects of color F towards their G neighbors.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (color_equals (color_of this) F)\\n                (neighbor_of this other)\\n                (color_equals (color_of other) G)\\n            )\\n        )\\n        (apply\\n            (move_node_max (direction_of other))\\n        )\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches '(' in the current parser context, at line 15 col 17\n\n                (color_equals (color_of other) G)\n                ^\nExpected one of: \n\t* RPAR\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Recolor the backgrounds to G and extend R objects that are surrounded by B/C/Y inwards without overlapping.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) R)\\n                (or\\n                    (color_equals (color_of other) B)\\n                    (color_equals (color_of other) C)\\n                    (color_equals (color_of other) Y)\\n                )\\n                (neighbor_of this other)\\n            )\\n        )\\n        (apply\\n            (extend_node (direction_of other) false)\\n        )\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches '(' in the current parser context, at line 17 col 21\n\n                    (color_equals (color_of other) Y)\n                    ^\nExpected one of: \n\t* RPAR\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Recolor all 'G' objects to 'R' if they are neighbors of a 'C' object, then change all 'O' objects to 'G'.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) G)\\n                (neighbor_of this other)\\n                (color_equals (color_of other) C)\\n            )\\n        )\\n        (apply\\n            (update_color R)\\n        )    \\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) O)\\n        )\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches '(' in the current parser context, at line 8 col 17\n\n                (color_equals (color_of other) C)\n                ^\nExpected one of: \n\t* RPAR\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Recolor all non-C objects to G and extend the red objects towards surrounding C objects, without overlapping.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (not (color_equals (color_of this) C))\\n        )\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) R)\\n                (neighbor_of this other)\\n                (color_equals (color_of other) C)\\n            )\\n        )\\n        (apply\\n            (extend_node (direction_of other) false)\\n        )\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches '(' in the current parser context, at line 17 col 17\n\n                (color_equals (color_of other) C)\n                ^\nExpected one of: \n\t* RPAR\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Recolor the boundaries of objects to color G, and the central elements of objects to color R.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter (and (color_equals (color_of this) C)))\\n        (apply (update_color G)))\\n    (rule\\n        (vars (this other))\\n        (filter (and (color_equals (color_of this) R) (not (neighbor_of this other))))\\n        (apply (update_color R)))\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches ')' in the current parser context, at line 4 col 54\n\ner (and (color_equals (color_of this) C)))\n                                        ^\nExpected one of: \n\t* LPAR\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Move all objects of color different than C, to the direction away from the object of color C, if they are neighbors of it, and then recolor all objects to color G. For objects of color O, additionally recolor them to G\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (not (color_equals (color_of this) C))\\n                (neighbor_of this other)\\n                (color_equals (color_of other) C)\\n            )\\n        )\\n        (apply\\n            (move_node_max (direction_of other))\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches '(' in the current parser context, at line 8 col 17\n\n                (color_equals (color_of other) C)\n                ^\nExpected one of: \n\t* RPAR\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Recolor all objects to color G, and then recolor the interior objects of color B to R.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) B)\\n                (color_equals (color_of other) G)\\n                (neighbor_of this other)\\n            )\\n        )\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches '(' in the current parser context, at line 15 col 17\n\n                (neighbor_of this other)\n                ^\nExpected one of: \n\t* RPAR\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Change the color of all black tiles to green and extend objects made of blue tiles towards red tiles.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) O)\\n        )\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) B)\\n                (neighbor_of this other)\\n                (color_equals (color_of other) R)\\n            )\\n        )\\n        (apply\\n            (extend_node (direction_of other) true)\\n        )\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches '(' in the current parser context, at line 17 col 17\n\n                (color_equals (color_of other) R)\n                ^\nExpected one of: \n\t* RPAR\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Recolor all objects of color O to color G. Then, recolor all the objects of color C that are neighbors of the objects of color G to color R.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) O)\\n        )\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) C)\\n                (neighbor_of this other)\\n                (color_equals (color_of other) G)\\n            )\\n        )\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches '(' in the current parser context, at line 17 col 17\n\n                (color_equals (color_of other) G)\n                ^\nExpected one of: \n\t* RPAR\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Move all objects colored 'R' to the maximum extent towards the nearest object colored 'C', recolor them and all other objects to green, except for 'C' objects.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) R)\\n                (color_equals (color_of other) C)\\n                (neighbor_of this other)\\n            )\\n        )\\n        (apply\\n            (move_node_max (direction_of other))\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (not (color_equals (color_of this) C))\\n        )\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches '(' in the current parser context, at line 8 col 17\n\n                (neighbor_of this other)\n                ^\nExpected one of: \n\t* RPAR\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Move objects of color B and C towards each other and recolor them. Also, fill the centers of the objects of size 2 with color R and change the color of other objects to G.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (or\\n                (color_equals (color_of this) B)\\n                (color_equals (color_of this) C)\\n            )\\n        )\\n        (apply\\n            (move_node_max toward);\\n            (update_color G)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (size_equals (size_of this) 2)\\n        )\\n        (apply\\n            (fill_rectangle R false)\\n        )\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches 't' in the current parser context, at line 11 col 28\n\n            (move_node_max toward);\n                           ^\nExpected one of: \n\t* DIRECTION\n\t* LPAR\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Recolor all objects to color G. Then, extend all objects of size 3 toward the object of maximum size, without overlapping.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (size_equals (size_of this) 3)\\n                (and\\n                    (neighbor_of this other)\\n                    (size_equals (size_of other) max)\\n                )\\n            )\\n        )\\n        (apply\\n            (extend_node (direction_of other) false)\\n        )\\n    ))\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches ')' in the current parser context, at line 24 col 1\n\n)\n^\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Recolor objects of color 'O' to 'G' and all objects of color 'O' that are neighbors of objects of color 'C' to 'R'.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter (color_equals (color_of this) O))\\n        (apply (update_color G))\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) O)\\n                (neighbor_of this other)\\n                (color_equals (color_of other) C)\\n            )\\n        )\\n        (apply (update_color R))\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches '(' in the current parser context, at line 13 col 17\n\n                (color_equals (color_of other) C)\n                ^\nExpected one of: \n\t* RPAR\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Recolor all objects to color R if they are neighbors of an orthogonal edge object C, and then color all cells to G excluding C objects.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (not (color_equals (color_of this) C))\\n                (neighbor_of this other)\\n                (color_equals (color_of other) C)\\n            )\\n        )\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches '(' in the current parser context, at line 8 col 17\n\n                (color_equals (color_of other) C)\n                ^\nExpected one of: \n\t* RPAR\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Move all objects of size 10 towards the center, then color the objects G. Move all objects of size 3 towards the object of size 15, and then color the objects R.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this)\\n        )\\n        (filter\\n            (size_equals (size_of this) 3)\\n        )\\n        (apply\\n            (move_node_max center)\\n            (update_color G)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (size_equals (size_of this) 3)\\n                (size_equals (size_of other) 15)\\n                (neighbor_of this other)\\n            )\\n        )\\n        (apply\\n            (move_node (direction_of other))\\n            (update_color R)\\n        )\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches 'c' in the current parser context, at line 9 col 28\n\n            (move_node_max center)\n                           ^\nExpected one of: \n\t* DIRECTION\n\t* LPAR\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Recolor all cells to G, then extend the vertical column of size 24 by replacing R color cells with the color which is always the same as the columns.\",\n    \"code\": \"(do \\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (size_equals (size_of other) 24)\\n                (color_equals (color_of other) C)\\n                (neighbor_of this other)\\n            )\\n        )\\n        (apply\\n            (extend_node (direction_of other) true)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n             (and\\n                (size_equals (size_of other) 24)\\n                (neighbor_of this other)\\n                (color_equals (color_of other) C))\\n        )\\n        (apply\\n            (extend_node (direction_of other) false)\\n        )\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches '(' in the current parser context, at line 15 col 17\n\n                (neighbor_of this other)\n                ^\nExpected one of: \n\t* RPAR\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Recolor all objects to color G except for objects with color C which will remain unchanged, and extend all other objects of size 1 towards objects of max size and the third largest objects towards the second largest object without overlapping.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (not (color_equals (color_of this) C))\\n        )\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (size_equals (size_of this) 1)\\n                (size_equals (size_of other) max)\\n                (neighbor_of this other)\\n            )\\n        )\\n        (apply\\n            (extend_node (direction_of other) false)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (size_equals (size_of this) 3)\\n                (size_equals (size_of other) 2)\\n                (neighbor_of this other)\\n            )\\n        )\\n        (apply\\n            (move_node (direction_of other))\\n        )\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches '(' in the current parser context, at line 17 col 17\n\n                (neighbor_of this other)\n                ^\nExpected one of: \n\t* RPAR\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Move all objects of color different than C, toward the object of color C, if they are neighbors of it, and then recolor them G or R based on their previous color.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (not (color_equals (color_of this) C))\\n                (neighbor_of this other)\\n                (color_equals (color_of other) C)\\n            )\\n        )\\n        (apply\\n            (move_node_max (direction_of other))\\n            (or\\n                (update_color G)\\n                (and\\n                    (color_equals (color_of this) B)\\n                    (update_color R)\\n                )\\n            )\\n        )\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches '(' in the current parser context, at line 8 col 17\n\n                (color_equals (color_of other) C)\n                ^\nExpected one of: \n\t* RPAR\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Move all objects intersected by the main diagonal to column boundaries while moving inner objects right and upper objects down and the neighboring pattern of size 1 to the nearest side.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (neighbor_of this other)\\n                (size_equals (size_of this) 1)\\n                (size_equals (size_of other) 1)\\n            )\\n        )\\n        (apply\\n            (move_node (direction_of other))\\n            (update_color G)\\n            (extend_node (direction_of other) true)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (column_equals (column_of this) center)\\n        )\\n        (apply\\n            (move_node right)\\n            (update_color R)\\n            (move_node down)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (neighbor_of this other)\\n                (size_equals (size_of other) max)\\n            )\\n        )\\n        (apply\\n            (extend_node (direction_of other) false)\\n        )\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches '(' in the current parser context, at line 8 col 17\n\n                (size_equals (size_of other) 1)\n                ^\nExpected one of: \n\t* RPAR\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Color all objects and all empty spaces with color G except the already colored objects with color C. Change the color of small vertical objects of color O to R.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter (not (color_equals (color_of this) C)))\\n        (apply (update_color G))\\n    )\\n    (rule\\n        (vars (this))\\n        (filter (and (color_equals (color_of this) O) (or (height_equals 2) (height_equals 3))))\\n        (apply (update_color R))\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches ')' in the current parser context, at line 9 col 75\n\n (color_of this) O) (or (height_equals 2) (height_equals 3))))\n                                        ^\nExpected one of: \n\t* HEIGHT\n\t* LPAR\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Move all objects of color different than C, if they are neighbors of C, toward the object of color C, and recolor all objects of color O to color G and all objects of color R to color R.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (not (color_equals (color_of this) C))\\n                (neighbor_of this other)\\n                (color_equals (color_of other) C)\\n            )\\n        )\\n        (apply\\n            (move_node_max (direction_of other))\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter (color_equals (color_of this) O))\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches '(' in the current parser context, at line 8 col 17\n\n                (color_equals (color_of other) C)\n                ^\nExpected one of: \n\t* RPAR\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Recolor part of all objects to color G and intertwine them with color R\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter (neighd=or_of this other))\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches 'n' in the current parser context, at line 4 col 18\n\n        (filter (neighd=or_of this other))\n                 ^\nExpected one of: \n\t* OP_NOT\n\t* WIDTH_EQ\n\t* SIZE_EQ\n\t* COLOR_EQ\n\t* COLUMN_EQ\n\t* DEGREE_EQ\n\t* NEIGHBOR_OF\n\t* OP_OR\n\t* OP_AND\n\t* HEIGHT_EQ\n\t* SHAPE_EQ\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Recolor all objects to color Y, then color the rectangles with the largest dimensions to color R.\",\n    \"code\": \"(do (rule (vars (this)) (filter) (apply (update_color Y))) (rule (vars (this)) (filter (and (or (size_equals (width_of this) max) (size_equals (height_of this) max)) (not (color_equals (color_of this) Y)))) (apply (update_color R))))\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches 'w' in the current parser context, at line 1 col 111\n\n (this)) (filter (and (or (size_equals (width_of this) max) (size_equals (height\n                                        ^\nExpected one of: \n\t* SIZE_OF\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Change the color of all non-C objects to G. Then, extend all the objects of color B towards the nearest neighboring C object, without overlapping.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (not (color_equals (color_of this) C))\\n        )\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) B)\\n                (neighbor_of this other)\\n                (color_equals (color_of other) C)\\n            )\\n        )\\n        (apply\\n            (extend_node (direction_of other) false)\\n        )\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches '(' in the current parser context, at line 17 col 17\n\n                (color_equals (color_of other) C)\n                ^\nExpected one of: \n\t* RPAR\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Extend all objects of color O to their neighbors with a different color, then change all remaining cells of color O to color G.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) O)\\n                (not (color_equals (color_of other) O))\\n                (neighbor_of this other)\\n            )\\n        )\\n        (apply\\n            (extend_node (direction_of other) false)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) O)\\n        )\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches '(' in the current parser context, at line 8 col 17\n\n                (neighbor_of this other)\n                ^\nExpected one of: \n\t* RPAR\n"
    },
    {
        "response": "{\n  \"nl_description\": \"Recolor all objects to color G. If blue objects are neighbors of the largest red object, move them maximally towards the red object.\",\n  \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) B)\\n                (neighbor_of this other)\\n                (and\\n                    (color_equals (color_of other) R)\\n                    (size_equals (size_of other) max)\\n                )\\n            )\\n        )\\n        (apply\\n            (move_node_max (direction_of other))\\n        )\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches '(' in the current parser context, at line 15 col 17\n\n                (and\n                ^\nExpected one of: \n\t* RPAR\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Recolor all objects of size 1 to color R if they are neighbors to the object of color C, and then recolor all remaining objects to color G.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (size_equals (size_of this) 1)\\n                (neighbor_of this other)\\n                (color_equals (color_of other) C)\\n            )\\n        )\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches '(' in the current parser context, at line 8 col 17\n\n                (color_equals (color_of other) C)\n                ^\nExpected one of: \n\t* RPAR\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Move all objects of color different than C, toward the nearest object of color C, if they are neighbors of it, and then change their color to red. Finally, change the entire image background to color G.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (not (color_equals (color_of this) C))\\n                (neighbor_of this other)\\n                (color_equals (color_of other) C)\\n            )\\n        )\\n        (apply\\n            (move_node_max (direction_of other))\\n            (update_color R)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches '(' in the current parser context, at line 8 col 17\n\n                (color_equals (color_of other) C)\n                ^\nExpected one of: \n\t* RPAR\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Move line objects toward each other and recolor them.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (shape_equals (shape_of this) enclosed)\\n                (neighbor_of this other)\\n                (color_equals (color_of other) R)\\n            )\\n        )\\n        (apply\\n            (move_node_max (direction_of other))\\n        )\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches '(' in the current parser context, at line 8 col 17\n\n                (color_equals (color_of other) R)\n                ^\nExpected one of: \n\t* RPAR\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Select all the cells and change their color to G, and then select all the neighboring cells of color C and change their color to R.\",\n    \"code\": \"(do (rule (vars (this)) (filter ()) (apply (update_color G))) (rule (vars (this other)) (filter (and (neighbor_of this other) (color_equals (color_of other) C))) (apply (update_color R))))\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches ')' in the current parser context, at line 1 col 34\n\n(do (rule (vars (this)) (filter ()) (apply (update_color G))) (rule (vars\n                                 ^\nExpected one of: \n\t* OP_NOT\n\t* WIDTH_EQ\n\t* SIZE_EQ\n\t* COLOR_EQ\n\t* COLUMN_EQ\n\t* DEGREE_EQ\n\t* NEIGHBOR_OF\n\t* OP_OR\n\t* OP_AND\n\t* HEIGHT_EQ\n\t* SHAPE_EQ\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Recolor all objects not of color C to color G, and then extend objects of color R toward the object of color C, without overlapping.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (not (color_equals (color_of this) C))\\n        )\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) R)\\n                (neighbor_of this other)\\n                (color_equals (color_of other) C)\\n            )\\n        )\\n        (apply\\n            (extend_node (direction_of other) false)\\n        )\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches '(' in the current parser context, at line 17 col 17\n\n                (color_equals (color_of other) C)\n                ^\nExpected one of: \n\t* RPAR\n"
    },
    {
        "response": "{\n    \"nl_description\": \"Recolor all objects to color G and recolor all cells surrounded by objects to color R.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color G)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (color_equals (color_of this) O)\\n                (neighbor_of this (color_of this))\\n            )\\n        )\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n)\"\n}",
        "error_type": "parse_error",
        "error_message": "No terminal matches '(' in the current parser context, at line 14 col 35\n\n                (neighbor_of this (color_of this))\n                                  ^\nExpected one of: \n\t* VAR\n"
    }
]