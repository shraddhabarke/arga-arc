[
    "{\n    \"nl_description\": \"For each object of color Y, if it is at the start of a row or is an adjacent vertical neighbor of other objects of color Y, recolor it to F.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) Y)\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects of color Y on even rows and columns to color F.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (color_equals (color_of this) Y)\\n                (and\\n                    (column_equals (column_of this) even)\\n                    (neighbor_of this this)\\n                )\\n            )\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Transform all bottommost Y objects to F.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) Y)\\n                (not (neighbor_of this other))\\n            )\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all yellow (Y) objects to fuchsia (F) if they are above or below another object.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) Y)\\n                (or\\n                    (neighbor_of this other)\\n                    (color_equals (color_of other) Y)\\n                )\\n            )\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects of size 1 and color Y to color F\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (size_equals (size_of this) 1)\\n                (color_equals (color_of this) Y)\\n            )\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects of size 6 that are neighbors of an object of color Y to color F.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (size_equals (size_of this) 6)\\n                (and\\n                    (neighbor_of this other)\\n                    (color_equals (color_of other) Y)\\n                )\\n            )\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects of size 1 on the top and bottom rows to color F.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (size_equals (size_of this) 1)\\n                (or\\n                    (column_equals (column_of this) 0)\\n                    (column_equals (column_of this) 10)\\n                )\\n            )\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (size_equals (size_of this) 1)\\n                (column_equals (column_of this) 12)\\n            )\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (size_equals (size_of this) 1)\\n                (column_equals (column_of this) 14)\\n            )\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (size_equals (size_of this) 1)\\n                (or\\n                    (column_equals (column_of this) 3)\\n                    (column_equals (column_of this) 5)\\n                )\\n            )\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor the first and last element of each row to F\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (or\\n                (column_equals (column_of this) 1)\\n                (column_equals (column_of this) 12)\\n            )\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all vertical sequences of Y starting at the boundary with F, keeping other colors unchanged.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (color_equals (color_of this) Y)\\n                (or\\n                    (column_equals (column_of this) 1)\\n                    (neighbor_of this other)\\n                )\\n            )\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor every alternate Y objects to color F.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) Y)\\n                (neighbor_of this other)\\n            )\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all Y objects to F if they are at the boundary or next to an O object.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) Y)\\n                (or\\n                    (neighbor_of this other)\\n                    (and\\n                        (neighbor_of this other)\\n                        (color_equals (color_of other) O)\\n                    )\\n                )\\n            )\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects of size 1 to color F.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (size_equals (size_of this) 1)\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Transform every column of alternating pattern Y and O to F if the column contains Y and each neighboring column contains O.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (color_equals (color_of this) Y)\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Change the color of all yellow objects (Y) located in odd-numbered columns to fuchsia (F).\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (color_equals (color_of this) Y)\\n                (column_equals (column_of this) odd)\\n            )\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor the first column of each row to color F for all rows, and the last column in each row where the number of columns is even.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n  \"nl_description\": \"Recolor all objects of color Y to color F, but only if they are neighbors of an object of color Y.\",\n  \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) Y)\\n                (neighbor_of this other)\\n            )\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Transform all objects of color Y on columns 0 and 3 to F.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (color_equals (color_of this) Y)\\n                (or\\n                    (column_equals (column_of this) 0)\\n                    (column_equals (column_of this) 3)\\n                )\\n            )\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects of size 1 and color Y to color F.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (size_equals (size_of this) 1)\\n                (color_equals (color_of this) Y)\\n            )\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects of size 1 to color F.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (size_equals (size_of this) 1)\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor the leftmost column to color F and then recolor every second column starting from the rightmost column to color F.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (column_equals (column_of this) even)\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects of color Y that are adjacent to at least one object of color O to F.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) Y)\\n                (and\\n                    (neighbor_of this other)\\n                    (color_equals (color_of other) O)\\n                )\\n            )\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects of color Y that are in the top row to color F, and then move them one step down.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (color_equals (color_of this) Y)\\n                (height_equals (height_of this) 1)\\n            )\\n        )\\n        (apply\\n            (update_color F)\\n            (move_node down)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects of color Y to color F.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) Y)\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Change the color of all objects of size 1 from Y to F.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (color_equals (color_of this) Y)\\n                (size_equals (size_of this) 1)\\n            )\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all Y objects first to F and then to Y alternatively\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter (color_equals (color_of this) Y))\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter (color_equals (color_of this) F))\\n        (apply\\n            (move_node left)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects of size 1 to color F.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (size_equals (size_of this) 1)\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects of size 1 to color F.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (size_equals (size_of this) 1)\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects of color Y to color F.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) Y)\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Change the color of the first column to F\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (column_equals (column_of this) 0)\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor the first object of each row to F.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (column_equals (column_of this) odd)\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects of size 1 that neighbor yellow objects to fuchsia.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (size_equals (size_of this) 1)\\n                (and\\n                    (neighbor_of this other)\\n                    (color_equals (color_of other) Y)\\n                )\\n            )\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects of color Y to color F.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) Y)\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects of size 2 to color F, and if they are in row 1, color the right neighbors of those objects to color F as well.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (size_equals (size_of this) 2)\\n                (neighbor_of this other)\\n            )\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (size_equals (size_of this) 2)\\n                (and\\n                    (size_equals (size_of other) 1)\\n                    (neighbor_of this other)\\n                )\\n            )\\n        )\\n        (apply\\n            (update_color F)\\n       )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects of size 1 to color F.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (size_equals (size_of this) 1)\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects of size 1, that are neighbors of an object of color Y, to color F.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (size_equals (size_of this) 1)\\n                (and\\n                    (neighbor_of this other)\\n                    (color_equals (color_of other) Y)\\n                )\\n            )\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Update the color of all objects of size 1 to color F that are not in the same column with an identical object.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (size_equals (size_of this) 1)\\n                (not (column_equals (column_of this) (column_of other)))\\n            )\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Change the objects with only 'Y' to 'F'.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) Y)\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor objects of size 3 to color F where the color of the right adjacent object is Y.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (size_equals (size_of this) 3)\\n                (and\\n                    (neighbor_of this other)\\n                    (and\\n                        (column_equals (column_of other) (column_of this))\\n                        (color_equals (color_of other) Y)\\n                    )\\n                )\\n            )\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor the 'Y' objects located at the grid border and their neighbors to color 'F'.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) Y)\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (neighbor_of this other)\\n                (color_equals (color_of other) F)\\n            )\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Change all objects at the edge of the grid from Y to F.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (color_equals (color_of this) Y)\\n                (or\\n                    (column_equals (column_of this) 0)\\n                    (or\\n                        (column_equals (column_of this) 9)\\n                        (or\\n                            (column_equals (column_of this) 10)\\n                            (or\\n                                (column_equals (column_of this) 11)\\n                                (or\\n                                    (column_equals (column_of this) 12)\\n                                    (column_equals (column_of this) 13)\\n                                )\\n                            )\\n                        )\\n                    )\\n                )\\n            )\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects of size 2 to color F.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (size_equals (size_of this) 2)\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects of size 1 to color F.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (size_equals (size_of this) 1)\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects of size 1 to F if they are neighbors of objects of color different from O.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (size_equals (size_of this) 1)\\n                (and\\n                    (neighbor_of this other)\\n                    (not (color_equals (color_of other) O))\\n                )\\n            )\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor the first column of the last row and alternate odd columns of all rows with color F.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (column_equals (column_of this) 0)\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (column_equals (column_of this) even)\\n                (not (column_equals (column_of this) 0))\\n            )\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor the leftmost and rightmost Y objects in each row to F.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) Y)\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Replace the leftmost yellow (Y) objects in each row with fuchsia (F).\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) Y)\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all the yellow objects that have no yellow neighbors to fuchsia.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) Y)\\n                (not\\n                    (or\\n                        (neighbor_of this other)\\n                        (color_equals (color_of other) Y)\\n                    )\\n                )\\n            )\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects of color Y to color F.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) Y)\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects of size 2 and shape square to F.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (size_equals (size_of this) 2)\\n                (shape_equals (shape_of this) square)\\n            )\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all Y objects in every second column to F.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (color_equals (color_of this) Y)\\n                (column_equals (column_of this) odd)\\n            )\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all the objects of color Y in column 1 of their row to color F.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (color_equals (color_of this) Y)\\n                (column_equals (column_of this) 1)\\n            )\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Extend all objects of color F toward the nearest bottom-right corner, without overlapping.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (color_equals (color_of this) F)\\n        )\\n        (apply\\n            (extend_node down_right false)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects of size 2 that are not in odd columns to color F.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (size_equals (size_of this) 2)\\n                (not (column_equals (column_of this) odd))\\n            )\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor the objects of size 1 at the first and third rows to color F, while keeping their current color for the objects of size larger than 1.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter \\n            (and \\n                (or \\n                    (size_equals (size_of this) 1) \\n                    (size_equals (size_of this) min)\\n                ) \\n                (or \\n                    (size_equals (size_of this) 5) \\n                    (size_equals (size_of this) 7)\\n                )\\n            )\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects positioned in the leftmost column to color F\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (column_equals (column_of this) 0)\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor the yellow objects at the start and end of each row to fuchsia, except for the first row where only the start object is recolored.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) Y)\\n                (or\\n                    (and (neighbor_of this other) (column_equals (column_of other) 1))\\n                    (and (height_equals (height_of this) 1) (column_equals (column_of this) 1))\\n                )\\n            )\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor the objects in the first or last columns to color F if their original color is Y.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (color_equals (color_of this) Y)\\n                (or\\n                    (column_equals (column_of this) 0)\\n                    (column_equals (column_of this) 10)\\n                )\\n            )\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects of size 1 to F, if they are neighbors of an object of color Y.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (size_equals (size_of this) 1)\\n                (and\\n                    (neighbor_of this other)\\n                    (color_equals (color_of other) Y)\\n                )\\n            )\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor to F all objects of color Y at the same column.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (color_equals (color_of this) Y)\\n                (column_equals (column_of this) (column_of this))\\n            )\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all Y objects that are in an odd column to F if adjacent columns form a pattern [other, Y].\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (color_equals (color_of this) Y)\\n                (column_equals (column_of this) odd)\\n            )\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor objects with initial color Y to F if they are located one cell apart from each other in the vertical direction.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) Y)\\n                (and\\n                    (neighbor_of this other)\\n                    (and\\n                        (color_equals (color_of other) Y)\\n                        (not (neighbor_of this other))\\n                    )\\n                )\\n            )\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all leftmost Y objects to F while keeping the others unchanged.\",\n    \"code\": \"(do (rule (vars (this)) (filter (and (color_equals (color_of this) Y) (neighbor_of this other))) (apply (update_color F))))\"\n}",
    "{\n    \"nl_description\": \"Recolor all Y objects at even coordinates (both row and column indices are even) to color F\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (color_equals (color_of this) Y)\\n                (and\\n                    (column_equals (column_of this) even)\\n                    (size_equals (size_of this) even)\\n                )\\n            )\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor the first column of each row to color F.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (column_equals (column_of this) 0)\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects of size 1 of color Y to color F.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (size_equals (size_of this) 1)\\n                (color_equals (color_of this) Y)\\n            )\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor objects of color Y that are in the middle row or column, and are not neighbors of objects of color F, to color F.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) Y)\\n                (not\\n                    (neighbor_of this other)\\n                )\\n            )\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor the top and bottom rows of every second column with color F\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) Y)\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Change all objects of the color Y to F except those in the second row.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) Y)\\n                (not (neighbor_of this other))\\n            )\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects of size 1 and color Y to color F.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (color_equals (color_of this) Y)\\n                (size_equals (size_of this) 1)\\n            )\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects of color Y in the first row and every alternate object of the last row to color F.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) Y)\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor objects of color Y to color F if they are neighbors of objects of color O.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) Y)\\n                (neighbor_of this other))\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Transform the left object of color Y in each row to color F, without changing other Y objects in the same row.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) Y)\\n                (and\\n                    (neighbor_of this other)\\n                    (color_equals (color_of other) O)\\n                )\\n            )\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Change all Y objects to F if they are in odd columns\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (color_equals (color_of this) Y)\\n                (column_equals (column_of this) odd)\\n            )\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects of color Y in alternating pattern with color F\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) Y)\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Change all top-left adjacent Y objects to color F.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) Y)\\n                (and\\n                    (neighbor_of this other)\\n                    (color_equals (color_of other) O)\\n                )\\n            )\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor the top left Y object of each connected component to F.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) Y)\\n        )\\n        (apply\\n            (move_node_max up_left)\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor the leftmost object in each row of Y objects to color F.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) Y)\\n                (or\\n                    (not (neighbor_of this other))\\n                    (color_equals (color_of other) O)\\n                )\\n            )\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Change all the leftmost 'Y' of each row to color 'F'.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) Y)\\n                (column_equals (column_of this) 0)\\n            )\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all leftmost columns in the grid to color F\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (column_equals (column_of this) 0)\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects at the top and bottom edge cells that are yellow to fuchsia.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (color_equals (color_of this) Y)\\n                (or\\n                    (and (height_equals (height_of this) 1) (column_equals (column_of this) even))\\n                    (and (height_equals (height_of this) 1) (column_equals (column_of this) odd))\\n                )\\n            )\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Extend all objects of size 1 upwards, without overlapping, and then recolor them to color F.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (size_equals (size_of this) 1)\\n                (neighbor_of this other)\\n            )\\n        )\\n        (apply\\n            (extend_node (direction_of other) false)\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor yellow objects on the borders to fuchsia.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) Y)\\n                (or\\n                    (neighbor_of this other)\\n                    (or\\n                        (neighbor_of this other)\\n                        (or\\n                            (neighbor_of this other)\\n                            (neighbor_of this other)\\n                        )\\n                    )\\n                )\\n            )\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects of color Y, except those in the first column, to color F.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) Y)\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects of color Y to F only if they are neighbors of at least one object of color O\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) Y)\\n                (neighbor_of this other)\\n            )\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all the first columns to F in each row.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (column_equals (column_of this) 0)\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Change the color of the first object of each row to F.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (color_equals (color_of this) Y)\\n                (column_equals (column_of this) 0)\\n            )\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor the objects in column 0 of even rows (excluding the first column) after the first yellow object with color F.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) Y)\\n                (and\\n                    (color_equals (color_of other) Y)\\n                    (neighbor_of this other)\\n                )\\n            )\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Update the color of all objects of color Y at the borders to F.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) Y)\\n                (or \\n                    (neighbor_of this other) \\n                    (color_equals (color_of other) O)\\n                )\\n            )\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects of size 1 with the color F, if they are neighbors of objects of color Y.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (size_equals (size_of this) 1)\\n                (and\\n                    (neighbor_of this other)\\n                    (color_equals (color_of other) Y)\\n                )\\n            )\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Change the leftmost column and every two columns after it to color F.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (or\\n                (column_equals (column_of this) 0)\\n                (or\\n                    (column_equals (column_of this) 2)\\n                    (or\\n                        (column_equals (column_of this) 4)\\n                        (or\\n                            (column_equals (column_of this) 6)\\n                            (or\\n                                (column_equals (column_of this) 8)\\n                                (or\\n                                    (column_equals (column_of this) 10)\\n                                    (or\\n                                        (column_equals (column_of this) 12)\\n                                        (column_equals (column_of this) 14)\\n                                    )\\n                                )\\n                            )\\n                        )\\n                    )\\n                )\\n            )\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor the first column of objects to F and then turn the rest of 'Y' to 'F' diagonally\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter (and (column_equals (column_of this) 0) (color_equals (color_of this) Y)))\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n    (rule\\n        (vars (this other))\\n        (filter (and (color_equals (color_of this) Y) (neighbor_of this other)))\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Extend the objects of size 1 with color F, in such a way that they reach the edge of the grid or another object.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (size_equals (size_of this) 1)\\n                (color_equals (color_of this) O)\\n            )\\n        )\\n        (apply\\n            (extend_node down true)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects of color Y to color F at positions not in the center row, keeping their original positions.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) Y)\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects in the left column to color F\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (column_equals (column_of this) 0)\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects of size 1 to color F\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (size_equals (size_of this) 1)\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    ))\\n\"\n}",
    "{\n    \"nl_description\": \"Change the first element of each row to color F if the current element is Y.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (neighbor_of this other))\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all Y objects to F in a column pattern.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) Y)\\n                (or\\n                    (column_equals (column_of this) even)\\n                    (column_equals (column_of this) odd)\\n                )\\n            )\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor the color Y to the color F if the objects are at the columns with odd indices.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (color_equals (color_of this) Y)\\n                (column_equals (column_of this) odd)\\n            )\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects of size 1 to color F.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (size_equals (size_of this) 1)\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor every color Y to color F, while maintaining the rest of the structure.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) Y)\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Transform every object at odd columns to color F.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (column_equals (column_of this) odd)\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Change the color of all the left-most objects of color Y to F\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) Y)\\n                (and\\n                    (color_equals (color_of other) Y)\\n                    (neighbor_of this other)\\n                )\\n            )\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects of size 1 to color F if their neighbor is Y.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (size_equals (size_of this) 1)\\n                (and\\n                    (neighbor_of this other)\\n                    (color_equals (color_of other) Y)\\n                )\\n            )\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all Y objects which are in positions with odd row indices to color F.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (size_equals (size_of this) 1)\\n        )\\n        (apply\\n            (extend_node (direction_of other) false)\\n        )    \\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Change the color of the leftmost Y object in each row to F.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (color_equals (color_of this) Y)\\n                (not (neighbor_of this other))\\n            )\\n        )\\n        (apply\\n            (update_color F)\\n        )\\n    )\\n)\"\n}"
]