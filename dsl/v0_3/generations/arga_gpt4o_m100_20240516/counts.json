{
    "task_id": "f8a8fe49",
    "solutions_stats": [
        {
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) X)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) R)\n                )\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 2,
                "other": 4,
                "this": 3,
                "neighbor_of": 1,
                "color_equals": 2,
                "R": 1,
                "X": 1,
                "and": 2,
                "direction_of": 1,
                "move_node": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) X)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) R)\n                )\n            )\n        )\n        (apply\n            (move_node up)\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 2,
                "other": 3,
                "this": 3,
                "neighbor_of": 1,
                "color_equals": 2,
                "R": 1,
                "X": 1,
                "and": 2,
                "move_node": 1,
                "up": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (move_node_max up_left)\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 1,
                "this": 2,
                "color_equals": 1,
                "X": 1,
                "move_node_max": 1,
                "up_left": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) X)\n                (color_equals (color_of other) X)\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 2,
                "this": 2,
                "other": 3,
                "color_equals": 2,
                "X": 2,
                "direction_of": 1,
                "and": 1,
                "move_node": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) X)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 1,
                "this": 3,
                "color_equals": 1,
                "X": 1,
                "neighbor_of": 1,
                "other": 3,
                "direction_of": 1,
                "and": 1,
                "move_node_max": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) X)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 1,
                "this": 3,
                "color_equals": 1,
                "X": 1,
                "neighbor_of": 1,
                "other": 3,
                "direction_of": 1,
                "and": 1,
                "move_node_max": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 1,
                "this": 2,
                "direction_of": 1,
                "other": 2,
                "color_equals": 1,
                "X": 1,
                "move_node": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) X)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 1,
                "this": 3,
                "color_equals": 1,
                "X": 1,
                "neighbor_of": 1,
                "other": 3,
                "direction_of": 1,
                "and": 1,
                "move_node": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (move_node_max up)\n            (move_node_max left)\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 1,
                "this": 2,
                "color_equals": 1,
                "X": 1,
                "move_node_max": 2,
                "up": 1,
                "left": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) X))\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) X)\n                )\n            )\n        )\n        (apply\n            (move_node up)\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 2,
                "this": 3,
                "other": 3,
                "color_equals": 2,
                "X": 2,
                "neighbor_of": 1,
                "not": 1,
                "and": 2,
                "move_node": 1,
                "up": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (move_node up)\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 1,
                "this": 2,
                "color_equals": 1,
                "X": 1,
                "move_node": 1,
                "up": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) X)\n                )\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (update_color O)\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 2,
                "other": 4,
                "size_of": 1,
                "this": 5,
                "neighbor_of": 1,
                "color_equals": 2,
                "X": 2,
                "size_equals": 1,
                "1": 1,
                "and": 2,
                "direction_of": 1,
                "move_node": 1,
                "update_color": 1,
                "O": 1,
                "vars": 2,
                "filter": 2,
                "apply": 2,
                "rule": 2,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (move_node up)\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 1,
                "this": 2,
                "color_equals": 1,
                "X": 1,
                "move_node": 1,
                "up": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 1,
                "this": 2,
                "direction_of": 1,
                "other": 2,
                "color_equals": 1,
                "X": 1,
                "move_node": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (move_node up)\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 1,
                "this": 2,
                "color_equals": 1,
                "X": 1,
                "move_node": 1,
                "up": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) O)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) X)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 2,
                "other": 4,
                "this": 3,
                "neighbor_of": 1,
                "color_equals": 2,
                "X": 1,
                "O": 1,
                "and": 2,
                "direction_of": 1,
                "move_node_max": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) X)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) R)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 2,
                "other": 4,
                "this": 3,
                "neighbor_of": 1,
                "color_equals": 2,
                "R": 1,
                "X": 1,
                "and": 2,
                "direction_of": 1,
                "move_node_max": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (move_node_max up)\n            (move_node_max left)\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 1,
                "this": 2,
                "color_equals": 1,
                "X": 1,
                "move_node_max": 2,
                "up": 1,
                "left": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) X)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) R)\n                )\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 2,
                "other": 4,
                "this": 3,
                "neighbor_of": 1,
                "color_equals": 2,
                "R": 1,
                "X": 1,
                "and": 2,
                "direction_of": 1,
                "move_node": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (move_node up)\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 1,
                "this": 2,
                "color_equals": 1,
                "X": 1,
                "move_node": 1,
                "up": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) X)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) O)\n                )\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 2,
                "other": 4,
                "this": 3,
                "neighbor_of": 1,
                "color_equals": 2,
                "O": 1,
                "X": 1,
                "and": 2,
                "direction_of": 1,
                "move_node": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (move_node_max (direction_of this))\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 1,
                "this": 3,
                "direction_of": 1,
                "color_equals": 1,
                "X": 1,
                "move_node_max": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (move_node up)\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 1,
                "this": 2,
                "color_equals": 1,
                "X": 1,
                "move_node": 1,
                "up": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (move_node_max up)\n            (move_node_max down)\n            (move_node_max left)\n            (move_node_max right)\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 1,
                "this": 2,
                "color_equals": 1,
                "X": 1,
                "move_node_max": 4,
                "up": 1,
                "down": 1,
                "left": 1,
                "right": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) X)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 1,
                "this": 3,
                "color_equals": 1,
                "X": 1,
                "neighbor_of": 1,
                "other": 3,
                "direction_of": 1,
                "and": 1,
                "move_node_max": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (move_node_max up_left)\n            (move_node_max up)\n            (move_node_max up_right)\n            (move_node_max left)\n            (move_node_max right)\n            (move_node_max down_left)\n            (move_node_max down)\n            (move_node_max down_right)\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 1,
                "this": 2,
                "color_equals": 1,
                "X": 1,
                "move_node_max": 8,
                "up_left": 1,
                "up": 1,
                "up_right": 1,
                "left": 1,
                "right": 1,
                "down_left": 1,
                "down": 1,
                "down_right": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (move_node_max up)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (move_node_max left)\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 2,
                "this": 4,
                "color_equals": 2,
                "X": 2,
                "move_node_max": 2,
                "up": 1,
                "left": 1,
                "vars": 2,
                "filter": 2,
                "apply": 2,
                "rule": 2,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) X)\n                (or\n                    (column_equals (column_of this) even)\n                    (column_equals (column_of this) odd)\n                )\n            )\n        )\n        (apply\n            (move_node_max up)\n            (move_node_max down)\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "column_of": 2,
                "this": 4,
                "color_of": 1,
                "column_equals": 2,
                "even": 1,
                "odd": 1,
                "color_equals": 1,
                "X": 1,
                "or": 1,
                "and": 1,
                "move_node_max": 2,
                "up": 1,
                "down": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (update_color X)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 2,
                "this": 4,
                "color_equals": 2,
                "R": 2,
                "update_color": 2,
                "X": 2,
                "vars": 2,
                "filter": 2,
                "apply": 2,
                "rule": 2,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) X)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 1,
                "this": 3,
                "color_equals": 1,
                "X": 1,
                "neighbor_of": 1,
                "other": 3,
                "direction_of": 1,
                "and": 1,
                "move_node_max": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (move_node up)\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 1,
                "this": 2,
                "color_equals": 1,
                "X": 1,
                "move_node": 1,
                "up": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (move_node up)\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 1,
                "this": 2,
                "color_equals": 1,
                "X": 1,
                "move_node": 1,
                "up": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) R))\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) X)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 2,
                "this": 3,
                "other": 4,
                "color_equals": 2,
                "R": 1,
                "neighbor_of": 1,
                "X": 1,
                "not": 1,
                "and": 2,
                "direction_of": 1,
                "move_node_max": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (move_node left)\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 1,
                "this": 2,
                "color_equals": 1,
                "X": 1,
                "move_node": 1,
                "left": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (move_node up)\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 1,
                "this": 2,
                "color_equals": 1,
                "X": 1,
                "move_node": 1,
                "up": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (move_node up)\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 1,
                "this": 2,
                "color_equals": 1,
                "X": 1,
                "move_node": 1,
                "up": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (move_node up)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (move_node down)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (move_node left)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (move_node right)\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 4,
                "this": 8,
                "color_equals": 4,
                "X": 4,
                "move_node": 4,
                "up": 1,
                "down": 1,
                "left": 1,
                "right": 1,
                "vars": 4,
                "filter": 4,
                "apply": 4,
                "rule": 4,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) X)\n                )\n            )\n        )\n        (apply\n            (move_node (direction_of this))\n        ) \n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 1,
                "other": 3,
                "size_of": 1,
                "this": 4,
                "neighbor_of": 1,
                "color_equals": 1,
                "X": 1,
                "size_equals": 1,
                "1": 1,
                "and": 2,
                "direction_of": 1,
                "move_node": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 1,
                "this": 2,
                "direction_of": 1,
                "other": 2,
                "color_equals": 1,
                "X": 1,
                "move_node_max": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (move_node left)\n            (update_color (color_of this))\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 2,
                "this": 3,
                "color_equals": 1,
                "X": 1,
                "move_node": 1,
                "left": 1,
                "update_color": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) X)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) O)\n                )\n            )\n        )\n        (apply\n            (move_node up)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) O)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) X)\n                )\n            )\n        )\n        (apply\n            (move_node down)\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 4,
                "other": 6,
                "this": 6,
                "neighbor_of": 2,
                "color_equals": 4,
                "O": 2,
                "X": 2,
                "and": 4,
                "move_node": 2,
                "up": 1,
                "down": 1,
                "vars": 2,
                "filter": 2,
                "apply": 2,
                "rule": 2,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (move_node_max (direction_of this))\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 1,
                "this": 3,
                "direction_of": 1,
                "other": 1,
                "color_equals": 1,
                "X": 1,
                "move_node_max": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) X)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 1,
                "this": 3,
                "color_equals": 1,
                "X": 1,
                "neighbor_of": 1,
                "other": 3,
                "direction_of": 1,
                "and": 1,
                "move_node_max": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (move_node up)\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 1,
                "this": 2,
                "color_equals": 1,
                "X": 1,
                "move_node": 1,
                "up": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (move_node up)\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 1,
                "this": 2,
                "color_equals": 1,
                "X": 1,
                "move_node": 1,
                "up": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (move_node_max down)\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 1,
                "this": 2,
                "other": 1,
                "color_equals": 1,
                "X": 1,
                "move_node_max": 1,
                "down": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (move_node up)\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 1,
                "this": 2,
                "color_equals": 1,
                "X": 1,
                "move_node": 1,
                "up": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 3)\n        )\n        (apply\n            (move_node up)\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "size_of": 1,
                "this": 2,
                "size_equals": 1,
                "3": 1,
                "move_node": 1,
                "up": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (move_node_max up)\n            (move_node_max down)\n            (move_node_max left)\n            (move_node_max right)\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 1,
                "this": 2,
                "color_equals": 1,
                "X": 1,
                "move_node_max": 4,
                "up": 1,
                "down": 1,
                "left": 1,
                "right": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) X)\n                (and\n                    (neighbor_of this other)\n                    (not (size_equals (size_of other) 1))\n                )\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "size_of": 1,
                "other": 4,
                "size_equals": 1,
                "1": 1,
                "color_of": 1,
                "this": 3,
                "neighbor_of": 1,
                "not": 1,
                "color_equals": 1,
                "X": 1,
                "and": 2,
                "direction_of": 1,
                "move_node": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (move_node_max up)\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 1,
                "this": 2,
                "color_equals": 1,
                "X": 1,
                "move_node_max": 1,
                "up": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (extend_node up_right false)\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 1,
                "this": 2,
                "color_equals": 1,
                "X": 1,
                "extend_node": 1,
                "up_right": 1,
                "false": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (move_node up_right)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) X)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) B)\n                )\n            )\n        )\n        (apply\n            (move_node up_right)\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 3,
                "other": 3,
                "this": 5,
                "neighbor_of": 1,
                "color_equals": 3,
                "B": 1,
                "X": 2,
                "and": 2,
                "move_node": 2,
                "up_right": 2,
                "vars": 2,
                "filter": 2,
                "apply": 2,
                "rule": 2,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) X)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (move_node left)\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 1,
                "this": 3,
                "color_equals": 1,
                "X": 1,
                "neighbor_of": 1,
                "other": 2,
                "and": 1,
                "move_node": 1,
                "left": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (move_node_max up)\n            (move_node_max left)\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 1,
                "this": 2,
                "color_equals": 1,
                "X": 1,
                "move_node_max": 2,
                "up": 1,
                "left": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (move_node left)\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 1,
                "this": 2,
                "color_equals": 1,
                "X": 1,
                "move_node": 1,
                "left": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) X)\n                (and\n                    (neighbor_of this other)\n                    (not (color_equals (color_of other) X))\n                )\n            )\n        )\n        (apply\n            (move_node up)\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 2,
                "other": 3,
                "color_equals": 2,
                "X": 2,
                "this": 3,
                "neighbor_of": 1,
                "not": 1,
                "and": 2,
                "move_node": 1,
                "up": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (move_node_max up)\n            (move_node_max down)\n            (move_node_max left)\n            (move_node_max right)\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 1,
                "this": 2,
                "color_equals": 1,
                "X": 1,
                "move_node_max": 4,
                "up": 1,
                "down": 1,
                "left": 1,
                "right": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (color_equals (color_of this) X)\n            )\n        )\n        (apply\n            (move_node_max left)\n            (move_node_max up)\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "size_of": 1,
                "this": 3,
                "color_of": 1,
                "size_equals": 1,
                "1": 1,
                "color_equals": 1,
                "X": 1,
                "other": 1,
                "and": 1,
                "move_node_max": 2,
                "left": 1,
                "up": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (move_node_max up)\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 1,
                "this": 2,
                "color_equals": 1,
                "X": 1,
                "move_node_max": 1,
                "up": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (and\n                    (neighbor_of this other)\n                    (size_equals (size_of other) 1)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "size_of": 2,
                "other": 4,
                "this": 3,
                "neighbor_of": 1,
                "size_equals": 2,
                "1": 2,
                "and": 2,
                "direction_of": 1,
                "move_node_max": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 3)\n        )\n        (apply\n            (move_node up)\n            (update_color X)\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "size_of": 1,
                "this": 2,
                "size_equals": 1,
                "3": 1,
                "move_node": 1,
                "up": 1,
                "update_color": 1,
                "X": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (color_equals (color_of this) X)\n            )\n        )\n        (apply\n            (extend_node (direction_of other) false)\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "size_of": 1,
                "this": 3,
                "color_of": 1,
                "size_equals": 1,
                "1": 1,
                "color_equals": 1,
                "X": 1,
                "direction_of": 1,
                "other": 2,
                "and": 1,
                "extend_node": 1,
                "false": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (move_node up)\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 1,
                "this": 2,
                "other": 1,
                "color_equals": 1,
                "X": 1,
                "move_node": 1,
                "up": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (move_node_max left)\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 1,
                "this": 2,
                "color_equals": 1,
                "X": 1,
                "move_node_max": 1,
                "left": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node right)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) O)\n        )\n        (apply\n            (move_node left)\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 2,
                "this": 4,
                "color_equals": 2,
                "R": 1,
                "move_node": 2,
                "right": 1,
                "O": 1,
                "left": 1,
                "vars": 2,
                "filter": 2,
                "apply": 2,
                "rule": 2,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) X)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) R)\n                )\n            )\n        )\n        (apply\n            (move_node up)\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 2,
                "other": 3,
                "this": 3,
                "neighbor_of": 1,
                "color_equals": 2,
                "R": 1,
                "X": 1,
                "and": 2,
                "move_node": 1,
                "up": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 3)\n        )\n        (apply\n            (move_node_max right)\n            (move_node_max left)\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "size_of": 1,
                "this": 2,
                "size_equals": 1,
                "3": 1,
                "move_node_max": 2,
                "right": 1,
                "left": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter (color_equals (color_of this) X))\n        (apply\n            (move_node (direction_of other))\n            (update_color O)\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 1,
                "this": 2,
                "direction_of": 1,
                "other": 2,
                "color_equals": 1,
                "X": 1,
                "move_node": 1,
                "update_color": 1,
                "O": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) X)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) R)\n                )\n            )\n        )\n        (apply\n            (move_node up_left)\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 2,
                "other": 3,
                "this": 3,
                "neighbor_of": 1,
                "color_equals": 2,
                "R": 1,
                "X": 1,
                "and": 2,
                "move_node": 1,
                "up_left": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (move_node up)\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 1,
                "this": 2,
                "color_equals": 1,
                "X": 1,
                "move_node": 1,
                "up": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (move_node_max up)\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 1,
                "this": 2,
                "color_equals": 1,
                "X": 1,
                "move_node_max": 1,
                "up": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) X)\n                (color_equals (color_of other) O)\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n            (move_node_max (direction_of this))\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 2,
                "this": 3,
                "other": 3,
                "color_equals": 2,
                "X": 1,
                "O": 1,
                "direction_of": 2,
                "and": 1,
                "move_node_max": 2,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "size_of": 1,
                "this": 3,
                "size_equals": 1,
                "1": 1,
                "neighbor_of": 1,
                "other": 3,
                "direction_of": 1,
                "and": 1,
                "move_node_max": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) X))\n        (apply (move_node_max up))\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 1,
                "this": 2,
                "color_equals": 1,
                "X": 1,
                "move_node_max": 1,
                "up": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) X)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (move_node_max down)\n            (move_node_max up)\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 1,
                "this": 3,
                "color_equals": 1,
                "X": 1,
                "neighbor_of": 1,
                "other": 2,
                "and": 1,
                "move_node_max": 2,
                "down": 1,
                "up": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) X)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) R)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 2,
                "other": 4,
                "this": 3,
                "neighbor_of": 1,
                "color_equals": 2,
                "R": 1,
                "X": 1,
                "and": 2,
                "direction_of": 1,
                "move_node_max": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (move_node up)\n            (move_node left))\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 1,
                "this": 2,
                "color_equals": 1,
                "X": 1,
                "move_node": 2,
                "up": 1,
                "left": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (move_node left)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) X)\n                (neighbor_of this this)\n            )\n        )\n        (apply\n            (move_node up)\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 2,
                "this": 6,
                "color_equals": 2,
                "X": 2,
                "neighbor_of": 1,
                "move_node": 2,
                "left": 1,
                "and": 1,
                "up": 1,
                "vars": 2,
                "filter": 2,
                "apply": 2,
                "rule": 2,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 3)\n        )\n        (apply\n            (move_node up)\n            (update_color X)\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "size_of": 1,
                "this": 2,
                "size_equals": 1,
                "3": 1,
                "move_node": 1,
                "up": 1,
                "update_color": 1,
                "X": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (move_node_max up)\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 1,
                "this": 2,
                "color_equals": 1,
                "X": 1,
                "move_node_max": 1,
                "up": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 1,
                "this": 2,
                "direction_of": 1,
                "other": 1,
                "color_equals": 1,
                "X": 1,
                "move_node": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (move_node_max (direction_of this))\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 1,
                "this": 3,
                "direction_of": 1,
                "color_equals": 1,
                "X": 1,
                "move_node_max": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) X)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n            (update_color X)\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 1,
                "other": 4,
                "size_of": 1,
                "this": 3,
                "neighbor_of": 1,
                "color_equals": 1,
                "X": 2,
                "size_equals": 1,
                "1": 1,
                "and": 2,
                "direction_of": 1,
                "move_node_max": 1,
                "update_color": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (move_node up)\n            (move_node up_left)\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 1,
                "this": 2,
                "color_equals": 1,
                "X": 1,
                "move_node": 2,
                "up": 1,
                "up_left": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (move_node up)\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 1,
                "this": 2,
                "color_equals": 1,
                "X": 1,
                "move_node": 1,
                "up": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (move_node left)\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 1,
                "this": 2,
                "color_equals": 1,
                "X": 1,
                "move_node": 1,
                "left": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (move_node up)\n            (move_node left)\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 1,
                "this": 2,
                "color_equals": 1,
                "X": 1,
                "move_node": 2,
                "up": 1,
                "left": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) X)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) R)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 2,
                "other": 4,
                "this": 3,
                "neighbor_of": 1,
                "color_equals": 2,
                "R": 1,
                "X": 1,
                "and": 2,
                "direction_of": 1,
                "move_node_max": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (move_node_max up)\n            (move_node down_left)\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 1,
                "this": 2,
                "color_equals": 1,
                "X": 1,
                "move_node_max": 1,
                "up": 1,
                "move_node": 1,
                "down_left": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (move_node_max up)\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 1,
                "this": 2,
                "color_equals": 1,
                "X": 1,
                "move_node_max": 1,
                "up": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 1,
                "this": 2,
                "direction_of": 1,
                "other": 2,
                "color_equals": 1,
                "X": 1,
                "move_node_max": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) X)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) R)\n                )\n            )\n        )\n        (apply\n            (move_node down)\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 2,
                "other": 3,
                "this": 3,
                "neighbor_of": 1,
                "color_equals": 2,
                "R": 1,
                "X": 1,
                "and": 2,
                "move_node": 1,
                "down": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (move_node up)\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 1,
                "this": 2,
                "color_equals": 1,
                "X": 1,
                "move_node": 1,
                "up": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (move_node up)\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 1,
                "this": 2,
                "color_equals": 1,
                "X": 1,
                "move_node": 1,
                "up": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) X))\n        (apply (move_node_max up_right) (move_node_max down_left))\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 1,
                "this": 2,
                "color_equals": 1,
                "X": 1,
                "move_node_max": 2,
                "up_right": 1,
                "down_left": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) R)\n            )\n        )\n        (apply\n            (move_node (direction_of this))\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 1,
                "other": 3,
                "neighbor_of": 1,
                "this": 3,
                "color_equals": 1,
                "R": 1,
                "direction_of": 1,
                "and": 1,
                "move_node": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) X)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) X)\n                )\n            )\n        )\n        (apply\n            (move_node_max down)\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 2,
                "other": 3,
                "this": 3,
                "neighbor_of": 1,
                "color_equals": 2,
                "X": 2,
                "and": 2,
                "move_node_max": 1,
                "down": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (extend_node down false)\n            (extend_node up false)\n            (extend_node left false)\n            (extend_node right false)\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 1,
                "this": 2,
                "color_equals": 1,
                "X": 1,
                "extend_node": 4,
                "down": 1,
                "false": 4,
                "up": 1,
                "left": 1,
                "right": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (move_node up)\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 1,
                "this": 2,
                "color_equals": 1,
                "X": 1,
                "move_node": 1,
                "up": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (move_node_max down_left)\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 1,
                "this": 2,
                "color_equals": 1,
                "X": 1,
                "move_node_max": 1,
                "down_left": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) X)\n                (column_equals (column_of this) (column_of other))\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 1,
                "this": 3,
                "column_of": 2,
                "other": 3,
                "color_equals": 1,
                "X": 1,
                "column_equals": 1,
                "direction_of": 1,
                "and": 1,
                "move_node_max": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (or\n                    (color_equals (color_of this) R)\n                    (color_equals (color_of this) X)\n                ))\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) X)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 3,
                "this": 4,
                "color_equals": 3,
                "R": 1,
                "X": 2,
                "other": 4,
                "or": 1,
                "neighbor_of": 1,
                "not": 1,
                "and": 2,
                "direction_of": 1,
                "move_node_max": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (move_node up)\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 1,
                "this": 2,
                "color_equals": 1,
                "X": 1,
                "move_node": 1,
                "up": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (update_color O)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) O)\n        )\n        (apply\n            (update_color X)\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 2,
                "this": 4,
                "color_equals": 2,
                "X": 2,
                "update_color": 2,
                "O": 2,
                "vars": 2,
                "filter": 2,
                "apply": 2,
                "rule": 2,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) X)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 1,
                "this": 3,
                "color_equals": 1,
                "X": 1,
                "neighbor_of": 1,
                "other": 3,
                "direction_of": 1,
                "and": 1,
                "move_node": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (move_node up)\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 1,
                "this": 2,
                "color_equals": 1,
                "X": 1,
                "move_node": 1,
                "up": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (move_node up)\n            (move_node down)\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 1,
                "this": 2,
                "color_equals": 1,
                "X": 1,
                "move_node": 2,
                "up": 1,
                "down": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (move_node up)\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 1,
                "this": 2,
                "color_equals": 1,
                "X": 1,
                "move_node": 1,
                "up": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (move_node_max up)\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 1,
                "this": 2,
                "other": 1,
                "color_equals": 1,
                "X": 1,
                "move_node_max": 1,
                "up": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (move_node left)\n            (move_node left)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) O)\n        )\n        (apply\n            (move_node right)\n            (move_node right)\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 2,
                "this": 4,
                "color_equals": 2,
                "X": 1,
                "move_node": 4,
                "left": 2,
                "O": 1,
                "right": 2,
                "vars": 2,
                "filter": 2,
                "apply": 2,
                "rule": 2,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (move_node up)\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 1,
                "this": 2,
                "color_equals": 1,
                "X": 1,
                "move_node": 1,
                "up": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (move_node_max up)\n            (move_node_max left)\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 1,
                "this": 2,
                "color_equals": 1,
                "X": 1,
                "move_node_max": 2,
                "up": 1,
                "left": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (move_node (if (column_equals (column_of this) center) left right))\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "column_of": 1,
                "this": 3,
                "column_equals": 1,
                "center": 1,
                "color_of": 1,
                "if": 1,
                "left": 1,
                "right": 1,
                "color_equals": 1,
                "X": 1,
                "move_node": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (move_node_max (up))\n            (move_node_max (down))\n            (move_node_max (left))\n            (move_node_max (right))\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 1,
                "this": 2,
                "up": 1,
                "down": 1,
                "left": 1,
                "right": 1,
                "color_equals": 1,
                "X": 1,
                "move_node_max": 4,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) X)\n                (neighbor_of this other)\n                (color_equals (color_of other) R)\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 2,
                "this": 3,
                "other": 4,
                "color_equals": 2,
                "X": 1,
                "neighbor_of": 1,
                "R": 1,
                "direction_of": 1,
                "and": 1,
                "move_node_max": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) X)\n                (neighbor_of this other)\n                (color_equals (color_of other) R)\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 2,
                "this": 3,
                "other": 4,
                "color_equals": 2,
                "X": 1,
                "neighbor_of": 1,
                "R": 1,
                "direction_of": 1,
                "and": 1,
                "move_node": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) X)\n                (neighbor_of this other)\n                (color_equals (color_of other) R)\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 2,
                "this": 3,
                "other": 4,
                "color_equals": 2,
                "X": 1,
                "neighbor_of": 1,
                "R": 1,
                "direction_of": 1,
                "and": 1,
                "move_node": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) X)\n                (not (color_equals (color_of other) X))\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (move_node up)\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 2,
                "other": 3,
                "this": 3,
                "color_equals": 2,
                "X": 2,
                "not": 1,
                "neighbor_of": 1,
                "and": 1,
                "move_node": 1,
                "up": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) X)\n                (neighbor_of this other)\n                (color_equals (color_of other) R)\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 2,
                "this": 3,
                "other": 4,
                "color_equals": 2,
                "X": 1,
                "neighbor_of": 1,
                "R": 1,
                "direction_of": 1,
                "and": 1,
                "move_node_max": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (move_node (and down right))\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 1,
                "this": 2,
                "and": 1,
                "down": 1,
                "right": 1,
                "color_equals": 1,
                "X": 1,
                "move_node": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (move_node (left))\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 1,
                "this": 2,
                "left": 1,
                "color_equals": 1,
                "X": 1,
                "move_node": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (move_node_max (up))\n            (move_node_max (down))\n            (move_node_max (left))\n            (move_node_max (right))\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 1,
                "this": 2,
                "up": 1,
                "down": 1,
                "left": 1,
                "right": 1,
                "color_equals": 1,
                "X": 1,
                "move_node_max": 4,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (size_equals (size_of this) 3)\n                (or (column_equals (column_of this) left) (column_equals (column_of this) right))\n            )\n        )\n        (apply\n            (move_node up)\n            (update_color X)\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "column_of": 2,
                "this": 4,
                "size_of": 1,
                "column_equals": 2,
                "left": 1,
                "right": 1,
                "size_equals": 1,
                "3": 1,
                "or": 1,
                "and": 1,
                "move_node": 1,
                "up": 1,
                "update_color": 1,
                "X": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) X)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (move_node (column_of other))\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 1,
                "this": 3,
                "color_equals": 1,
                "X": 1,
                "neighbor_of": 1,
                "other": 3,
                "column_of": 1,
                "and": 1,
                "move_node": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) X)\n                (not (neighbor_of this other))\n                (color_equals (color_of other) R)\n            )\n        )\n        (apply\n            (move_node_max (direction_of (this)))\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 2,
                "this": 4,
                "neighbor_of": 1,
                "other": 3,
                "color_equals": 2,
                "X": 1,
                "not": 1,
                "R": 1,
                "direction_of": 1,
                "and": 1,
                "move_node_max": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (move_node_max (down))\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 1,
                "this": 2,
                "down": 1,
                "color_equals": 1,
                "X": 1,
                "move_node_max": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (or (size_equals (size_of this) 3) (size_equals (size_of this) 6)))\n        (apply\n            (move_node vertical)\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X))\n        (apply\n            (move_node right)\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "size_of": 2,
                "this": 5,
                "size_equals": 2,
                "3": 1,
                "6": 1,
                "color_of": 1,
                "or": 1,
                "move_node": 2,
                "vertical": 1,
                "update_color": 1,
                "R": 1,
                "color_equals": 1,
                "X": 1,
                "right": 1,
                "vars": 2,
                "filter": 2,
                "apply": 2,
                "rule": 2,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) X)\n                (neighbor_of this other)\n                (color_equals (color_of other) R)\n            )\n        )\n        (apply\n            (move_node up)\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 2,
                "this": 3,
                "other": 3,
                "color_equals": 2,
                "X": 1,
                "neighbor_of": 1,
                "R": 1,
                "and": 1,
                "move_node": 1,
                "up": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) X)\n                (and\n                    (not (column_equals (column_of this) center))\n                    (neighbor_of this other)\n                )\n            )\n        )\n        (apply\n            (move_node_max (if (less_than (column_of this) (column_of other)) right left))\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "column_of": 3,
                "this": 5,
                "column_equals": 1,
                "center": 1,
                "other": 3,
                "color_of": 1,
                "not": 1,
                "neighbor_of": 1,
                "less_than": 1,
                "color_equals": 1,
                "X": 1,
                "and": 2,
                "if": 1,
                "right": 1,
                "left": 1,
                "move_node_max": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and \n                (color_equals (color_of this) X)\n                (neighbor_of this other)\n                (color_equals (color_of other) B)\n            )\n        )\n        (apply\n            (move_node (direction_of this))\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 2,
                "this": 4,
                "other": 3,
                "color_equals": 2,
                "X": 1,
                "neighbor_of": 1,
                "B": 1,
                "direction_of": 1,
                "and": 1,
                "move_node": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (move_node_max center)\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 1,
                "this": 2,
                "color_equals": 1,
                "X": 1,
                "move_node_max": 1,
                "center": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (neighbor_of this other)\n            (color_equals (color_of other) X)\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 1,
                "other": 4,
                "direction_of": 1,
                "this": 2,
                "neighbor_of": 1,
                "color_equals": 1,
                "X": 1,
                "move_node_max": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (move_node down)\n            (move_node_up (size_equals (size_of this) 3))\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "size_of": 1,
                "this": 3,
                "color_of": 1,
                "size_equals": 1,
                "3": 1,
                "color_equals": 1,
                "X": 1,
                "move_node": 1,
                "down": 1,
                "move_node_up": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) X)\n                (neighbor_of this other)\n                (color_equals (color_of other) R)\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 2,
                "this": 3,
                "other": 4,
                "color_equals": 2,
                "X": 1,
                "neighbor_of": 1,
                "R": 1,
                "direction_of": 1,
                "and": 1,
                "move_node_max": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 3)\n        )\n        (apply\n            (move_node source)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (move_node_max down)\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "size_of": 1,
                "this": 4,
                "color_of": 1,
                "size_equals": 1,
                "3": 1,
                "move_node": 1,
                "source": 1,
                "color_equals": 1,
                "X": 1,
                "move_node_max": 1,
                "down": 1,
                "vars": 2,
                "filter": 2,
                "apply": 2,
                "rule": 2,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (move_node (case (column_equals (column_of this) even) left right))\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "column_of": 1,
                "this": 3,
                "column_equals": 1,
                "even": 1,
                "color_of": 1,
                "case": 1,
                "left": 1,
                "right": 1,
                "color_equals": 1,
                "X": 1,
                "move_node": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 2)\n                (neighbor_of this other)\n                (and\n                    (size_equals (size_of other) 2)\n                    (column_equals (column_of this) (column_of other))\n                )\n            )\n        )\n        (apply\n            (move_node down)\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "size_of": 2,
                "other": 4,
                "column_of": 2,
                "this": 4,
                "size_equals": 2,
                "2": 2,
                "column_equals": 1,
                "neighbor_of": 1,
                "and": 2,
                "move_node": 1,
                "down": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter \n            (and\n                (color_equals (color_of this) X)\n                (neighbor_of this other)\n                (color_equals (color_of other) O)\n            )\n        )\n        (apply\n            (move_node up)\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 2,
                "this": 3,
                "other": 3,
                "color_equals": 2,
                "X": 1,
                "neighbor_of": 1,
                "O": 1,
                "and": 1,
                "move_node": 1,
                "up": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (move_node_max (down_left))\n            (move_node_max (down_right))\n            (move_node_max (up_left))\n            (move_node_max (up_right))\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 1,
                "this": 2,
                "down_left": 1,
                "down_right": 1,
                "up_left": 1,
                "up_right": 1,
                "color_equals": 1,
                "X": 1,
                "move_node_max": 4,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 1)\n        )\n        (apply\n            (move_node center)\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "size_of": 1,
                "this": 2,
                "size_equals": 1,
                "1": 1,
                "move_node": 1,
                "center": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 2)\n        )\n        (apply\n            (move_node_max up)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (size_equals (size_of this) 2)\n                (not (neighbor_of this center))\n            )\n        )\n        (apply\n            (move_node_max down)\n         )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "size_of": 2,
                "this": 5,
                "neighbor_of": 1,
                "center": 1,
                "size_equals": 2,
                "2": 2,
                "not": 1,
                "move_node_max": 2,
                "up": 1,
                "and": 1,
                "down": 1,
                "vars": 2,
                "filter": 2,
                "apply": 2,
                "rule": 2,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (move_node_max (up))\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (move_node_max (down))\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (move_node_max (left))\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (move_node_max (right))\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 4,
                "this": 8,
                "up": 1,
                "down": 1,
                "left": 1,
                "right": 1,
                "color_equals": 4,
                "X": 4,
                "move_node_max": 4,
                "vars": 4,
                "filter": 4,
                "apply": 4,
                "rule": 4,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (or\n                    (color_equals (color_of this) R)\n                    (color_equals (color_of this) X)\n                )\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (swap_position (direction_of other) false)\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 2,
                "this": 4,
                "color_equals": 2,
                "R": 1,
                "X": 1,
                "or": 1,
                "neighbor_of": 1,
                "other": 3,
                "direction_of": 1,
                "and": 1,
                "swap_position": 1,
                "false": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) X)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) O)\n                (neighbor_of this other)\n                (color_equals (color_of other) X)\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 3,
                "this": 6,
                "other": 7,
                "color_equals": 3,
                "X": 2,
                "neighbor_of": 2,
                "direction_of": 2,
                "O": 1,
                "and": 2,
                "move_node_max": 2,
                "vars": 2,
                "filter": 2,
                "apply": 2,
                "rule": 2,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (update_color O)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node max (direction_of this))\n            (move_node max (direction_of this))\n            (update_color X)\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 1,
                "this": 5,
                "direction_of": 2,
                "other": 1,
                "color_equals": 1,
                "X": 2,
                "update_color": 2,
                "O": 1,
                "move_node": 2,
                "max": 2,
                "vars": 2,
                "filter": 2,
                "apply": 2,
                "rule": 2,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) X)\n                (neighbor_of this other)\n                (color_equals (color_of other) R)\n            )\n        )\n        (apply\n            (move_node (direction_of this))\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 2,
                "this": 4,
                "other": 3,
                "color_equals": 2,
                "X": 1,
                "neighbor_of": 1,
                "R": 1,
                "direction_of": 1,
                "and": 1,
                "move_node": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (or\n                    (color_equals (color_of this) X)\n                    (color_equals (color_of this) O)\n                )\n                (neighbor_of this other)\n                (color_equals (color_of other) R)\n            )\n        )\n        (apply\n            (move_node (color_of other))\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 4,
                "this": 4,
                "color_equals": 3,
                "X": 1,
                "O": 1,
                "other": 4,
                "or": 1,
                "neighbor_of": 1,
                "R": 1,
                "and": 1,
                "move_node": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) X))\n        (apply\n            (move_node center)\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "color_of": 1,
                "this": 2,
                "color_equals": 1,
                "X": 1,
                "move_node": 1,
                "center": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        },
        {
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (move_node (if (column_equals (column_of this) odd) right left))\n        )\n    )\n)",
            "parse_status": "valid",
            "counts": {
                "column_of": 1,
                "this": 3,
                "column_equals": 1,
                "odd": 1,
                "color_of": 1,
                "if": 1,
                "right": 1,
                "left": 1,
                "color_equals": 1,
                "X": 1,
                "move_node": 1,
                "vars": 1,
                "filter": 1,
                "apply": 1,
                "rule": 1,
                "do": 1
            }
        }
    ],
    "global_counter": {
        "color_of": 195,
        "other": 210,
        "this": 424,
        "neighbor_of": 56,
        "color_equals": 193,
        "R": 26,
        "X": 163,
        "and": 89,
        "direction_of": 51,
        "move_node": 99,
        "vars": 170,
        "filter": 170,
        "apply": 170,
        "rule": 170,
        "do": 150,
        "up": 65,
        "move_node_max": 104,
        "up_left": 5,
        "left": 34,
        "not": 9,
        "size_of": 23,
        "size_equals": 23,
        "1": 10,
        "update_color": 14,
        "O": 15,
        "down": 22,
        "right": 20,
        "up_right": 6,
        "down_left": 5,
        "down_right": 2,
        "column_of": 15,
        "column_equals": 10,
        "even": 2,
        "odd": 2,
        "or": 6,
        "3": 8,
        "extend_node": 6,
        "false": 7,
        "B": 2,
        "center": 6,
        "if": 3,
        "6": 1,
        "vertical": 1,
        "less_than": 1,
        "move_node_up": 1,
        "source": 1,
        "case": 1,
        "2": 4,
        "swap_position": 1,
        "max": 2
    }
}