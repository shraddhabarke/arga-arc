[
    "{\n    \"nl_description\": \"Rotate all objects by 90 degrees clockwise.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (rotate_node 90)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects in the first column one step to the right.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (column_equals (column_of this) 0)\\n        )\\n        (apply\\n            (move_node right)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of color W or O one step up.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (or\\n                (color_equals (color_of this) W)\\n                (color_equals (color_of this) O)\\n            )\\n        )\\n        (apply\\n            (move_node up)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Rotate all the objects of color O by 90 degrees.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) O)\\n        )\\n        (apply\\n            (rotate_node 90)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects on the left edge one step to the right.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (column_equals (column_of this) even)\\n        )\\n        (apply\\n            (move_node right)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of color O one step up.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) O)\\n        )\\n        (apply\\n            (move_node up)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of color O downward.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) O)\\n        )\\n        (apply\\n            (move_node down)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Rotate all square objects by 90 degrees.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (shape_equals (shape_of this) square)\\n        )\\n        (apply\\n            (rotate_node 90)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of size 2 or more to the left.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (or\\n                (size_equals (size_of this) 2)\\n                (size_equals (size_of this) 3)\\n            )\\n        )\\n        (apply\\n            (move_node left)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of color O, one step up.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) O)\\n        )\\n        (apply\\n            (move_node up)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all the objects of size 2 (shape lines) one step to the left.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (size_equals (size_of this) 2)\\n        )\\n        (apply\\n            (move_node left)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of color 'O' one step to the right\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) O)\\n        )\\n        (apply\\n            (move_node right)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of color different than O one step to the right.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (not (color_equals (color_of this) O))\\n        )\\n        (apply\\n            (move_node right)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move objects of width 1 towards the object of maximum height.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (width_equals (width_of this) 1)\\n                (and\\n                    (neighbor_of this other)\\n                    (height_equals (height_of other) max)\\n                )\\n            )\\n        )\\n        (apply\\n            (move_node (direction_of other))\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all edge objects inward, replacing the color of the original positions with the color of the neighboring objects.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (move_node right)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (move_node down)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects one step up.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (move_node up)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move objects of color different than O downward, if they are neighbors of O.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (not (color_equals (color_of this) O))\\n                (and\\n                    (neighbor_of this other)\\n                    (color_equals (color_of other) O)\\n                )\\n            )\\n        )\\n        (apply\\n            (move_node down)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Rotate all objects by 90 degrees.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (rotate_node 90)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all the leftmost objects one step left.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (column_equals (column_of this) 0)\\n        )\\n        (apply\\n            (move_node left)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move the object located at the top left corner to the right.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (column_equals (column_of this) 1)\\n                (and\\n                    (height_equals (height_of this) 3)\\n                    (and\\n                        (width_equals (width_of this) 1)\\n                        (color_equals (color_of this) O)\\n                    )\\n                )\\n            )\\n        )\\n        (apply\\n            (move_node right)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of color O one step up.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) O)\\n        )\\n        (apply\\n            (move_node up)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Flip all objects vertically.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (flip vertical)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of color O to the leftmost empty cell within the same row.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) O)\\n        )\\n        (apply\\n            (move_node_max left)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of color 'O' one step to the right.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) O)\\n        )\\n        (apply\\n            (move_node right)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of color W or R in the direction up, and then recolor all O objects to W.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (or\\n                (color_equals (color_of this) W)\\n                (color_equals (color_of this) R)\\n            )\\n        )\\n        (apply\\n            (move_node up)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) O)\\n        )\\n        (apply\\n            (update_color W)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of color O one step to the left.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) O)\\n        )\\n        (apply\\n            (move_node left)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Rotate all objects of color W 90 degrees clockwise.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) W)\\n        )\\n        (apply\\n            (rotate_node 90)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all the objects of size 1 by 1 step up.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (size_equals (size_of this) 1)\\n        )\\n        (apply\\n            (move_node up)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of color different than W downward one step.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (not (color_equals (color_of this) W))\\n                (neighbor_of this other)\\n            )\\n        )\\n        (apply\\n            (move_node down)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Swap the colors O and W in all neighbor pairs of objects.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (neighbor_of this other)\\n                (or\\n                    (and (color_equals (color_of this) O) (color_equals (color_of other) W))\\n                    (and (color_equals (color_of this) W) (color_equals (color_of other) O))\\n                )\\n            )\\n        )\\n        (apply\\n            (update_color (color_of other))\\n            (update_color (color_of this))\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of color O one step down.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) O)\\n        )\\n        (apply\\n            (move_node down)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of size 1 one step up.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (size_equals (size_of this) 1)\\n        )\\n        (apply\\n            (move_node up)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move the leftmost part of all objects with width greater than 1 to the bottom and fill the empty space with 'O'.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (width_equals (width_of this) 3)\\n        )\\n        (apply\\n            (move_node down)\\n            (update_color O)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of size 2 one step to the left.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (size_equals (size_of this) 2)\\n        )\\n        (apply\\n            (move_node left)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects of color O to color W, and all objects of color W to color O.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) O)\\n        )\\n        (apply\\n            (update_color W)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) W)\\n        )\\n        (apply\\n            (update_color O)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move the leftmost block of color O one step to the bottom side.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) O)\\n                (column_equals (column_of this) 0)\\n            )\\n        )\\n        (apply\\n            (move_node down)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Rotate objects of color W 90 degrees clockwise.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) W)\\n        )\\n        (apply\\n            (rotate_node 90)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Flip objects along the vertical axis.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (flip vertical)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of color different than O, toward the object of color O, if they are neighbors of it, and then recolor them to color O.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (not (color_equals (color_of this) O))\\n                (and\\n                    (neighbor_of this other)\\n                    (color_equals (color_of other) O)\\n                )\\n            )\\n        )\\n        (apply\\n            (move_node_max (direction_of other))\\n            (update_color O)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Flip all objects along the vertical axis.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (flip vertical)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Rotate all objects of color 'O' 90 degrees clockwise.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) O)\\n        )\\n        (apply\\n            (rotate_node 90)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move the top object of column 1 to the left.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (column_equals (column_of this) 1)\\n                (neighbor_of this other)\\n            )\\n        )\\n        (apply\\n            (move_node left)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of color different than O, one step to the left.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (not (color_equals (color_of this) O))\\n        )\\n        (apply\\n            (move_node left)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move the objects with size 2 to the left and change their color to W.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter (size_equals (size_of this) 2))\\n        (apply\\n            (move_node left)\\n            (update_color W)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Shift the leftmost object toward the right and recolor its original position to the color of the rightmost object.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter (column_equals (column_of this) 1))\\n        (apply\\n            (move_node right)\\n            (update_color (color_of this))\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move the leftmost column to the rightmost column.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (column_equals (column_of this) 0)\\n        )\\n        (apply\\n            (move_node right)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of color different than O, one step to the right.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (not (color_equals (color_of this) O))\\n        )\\n        (apply\\n            (move_node right)\\n        )    \\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects in the first column one step to the right.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (column_equals (column_of this) 0)\\n        )\\n        (apply\\n            (move_node right)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of color different than O and F to the left if they are neighbors of O\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (not (or\\n                    (color_equals (color_of this) O)\\n                    (color_equals (color_of this) F)\\n                ))\\n                (and\\n                    (neighbor_of this other)\\n                    (color_equals (color_of other) O)\\n                )\\n            )\\n        )\\n        (apply\\n            (move_node left)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects with neighbors of color O one step to the left.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (neighbor_of this other)\\n                (color_equals (color_of other) O)\\n            )\\n        )\\n        (apply\\n            (move_node left)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all vertical lines of objects one step left.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (width_equals (width_of this) 1)\\n                (height_equals (height_of this) max)\\n            )\\n        )\\n        (apply\\n            (move_node left)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of color different than O, one step up\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (not (color_equals (color_of this) O))\\n        )\\n        (apply\\n            (move_node up)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of color other than O toward the closest O object.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (not (color_equals (color_of this) O))\\n                (neighbor_of this other)\\n            )\\n        )\\n        (apply\\n            (move_node (direction_of other))\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of color O one step up.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) O)\\n        )\\n        (apply\\n            (move_node up)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of color O to the top-left corner of each object, without changing their relative order.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) O)\\n        )\\n        (apply\\n            (move_node up_left)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of color O one step left.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) O)\\n        )\\n        (apply\\n            (move_node left)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move the object at the top-left corner to the bottom-right corner, wherever it exists.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (neighbor_of this this)\\n        )\\n        (apply\\n            (move_node_max down_right)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move the top-left object of each color to the left.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (not (color_equals (color_of this) O))\\n                (neighbor_of this other)\\n            )\\n        )\\n        (apply\\n            (move_node left)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of size 1 downward.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (size_equals (size_of this) 1)\\n        )\\n        (apply\\n            (move_node down)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of color W or O one step up.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (or\\n                (color_equals (color_of this) W)\\n                (color_equals (color_of this) O)\\n            )\\n        )\\n        (apply\\n            (move_node up)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move to the left all objects of color different than O, without overlapping.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (not (color_equals (color_of this) O))\\n        )\\n        (apply\\n            (move_node left)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move the top-left object to the bottom-left cell in each grid.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (column_equals (column_of this) 0)\\n                (neighbor_of this other)\\n            )\\n        )\\n        (apply\\n            (move_node down)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Invert all objects horizontally.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (flip horizontal)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Rotate all objects to 90 degrees\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (rotate_node 90)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move the leftmost vertical object to the leftmost column, except if it is already in the leftmost column.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (column_equals (column_of this) 1)\\n                (not (column_equals (column_of this) 0))\\n            )\\n        )\\n        (apply\\n            (move_node left)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move the single object of another color inside an object of color W, to the top-left corner.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (neighbor_of this other)\\n                (and\\n                    (color_equals (color_of this) O)\\n                    (color_equals (color_of other) W)\\n                )\\n            )\\n        )\\n        (apply\\n            (move_node up_left)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Rotate all objects by 90 degrees clockwise.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (rotate_node 90)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move the objects of color O to the top row while preserving their relative order.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) O)\\n        )\\n        (apply\\n            (move_node up)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of size 1 one step towards left, except the objects of color O.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (size_equals (size_of this) 1)\\n                (not (color_equals (color_of this) O))\\n            )\\n        )\\n        (apply\\n            (move_node left)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Shift all objects of color O left if possible, stopping at obstacles.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) O)\\n        )\\n        (apply\\n            (move_node left)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move the top-left object up, if there is an adjacent object of different color, and recolor it to O.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (neighbor_of this other)\\n                (not (color_equals (color_of this) (color_of other)))\\n            )\\n        )\\n        (apply\\n            (move_node up)\\n            (update_color O)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of color O one step to the right.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) O)\\n        )\\n        (apply\\n            (move_node right)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move objects on the edge to the opposite edge if they share the same color with the adjacent cell.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (neighbor_of this other)\\n        )\\n        (apply\\n            (move_node (direction_of other))\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move the object with color O in each row to the left column.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) O)\\n                (not (color_equals (color_of other) O))\\n            )\\n        )\\n        (apply\\n            (move_node left)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move the upper-left cell color to the color of the bottom-right cell and move the bottom-right cell color to the color of the bottom-left cell.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (neighbor_of this other)\\n                (or\\n                    (and (column_equals (column_of this) 0) (column_equals (column_of other) 2))\\n                    (and (column_equals (column_of this) 2) (column_equals (column_of other) 0))\\n                )\\n            )\\n        )\\n        (apply\\n            (move_node (direction_of other))\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Rotate all objects by 90 degrees.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (rotate_node 90)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects at the center column down if they are not already at the bottom, otherwise move them up.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (column_equals (column_of this) center)\\n        )\\n        (apply\\n            (move_node down)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (column_equals (column_of this) center)\\n                (neighbor_of this this)\\n            )\\n        )\\n        (apply\\n            (move_node up)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Rotate all objects 90 degrees.\",\n    \"code\": \"(do    (rule        (vars (this))        (filter)        (apply            (rotate_node 90)        )    ))\"\n}",
    "{\n    \"nl_description\": \"Move the top-left corner (diagonal neighbor) object of each input grid to the bottom, and then recolor it to color O.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (neighbor_of this other)\\n                (and\\n                    (color_equals (color_of this) O)\\n                    (color_equals (color_of other) X)\\n                )\\n            )\\n        )\\n        (apply\\n            (move_node down)\\n            (update_color O)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of color W one step to the left.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) W)\\n        )\\n        (apply\\n            (move_node left)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of color W one step up.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) W)\\n        )\\n        (apply\\n            (move_node up)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move objects of color O to the top edge of the grid.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) O)\\n        )\\n        (apply\\n            (move_node up)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move the topmost adjacent object of color different from O one step left and recolor it to W.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (not (color_equals (color_of this) O))\\n        )\\n        (apply\\n            (move_node left)\\n            (update_color W)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of color O north, if they are neighbors of other objects.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) O)\\n                (neighbor_of this other)\\n            )\\n        )\\n        (apply\\n            (move_node up)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Flip all objects vertically.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (flip vertical)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of color O to the right one step.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) O)\\n        )\\n        (apply\\n            (move_node right)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Flip all objects vertically.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (flip vertical)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of color O down.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) O)\\n        )\\n        (apply\\n            (move_node down)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move object in the first column to the second column, switching positions diagonally.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (column_equals (column_of this) 0)\\n        )\\n        (apply\\n            (move_node down_right)\\n        )    \\n    )\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (move_node down)\\n        )    \\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of color X up.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter \\n            (color_equals (color_of this) O)\\n        )\\n        (apply\\n            (move_node up)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Rotate all objects 90 degrees clockwise.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (rotate_node 90)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of color W one step up.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) W)\\n        )\\n        (apply\\n            (move_node up)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor the leftmost column to color O if it is not already O and its elements are not empty.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (not (color_equals (color_of this) O))\\n                (column_equals (column_of this) 0)\\n            )\\n        )\\n        (apply\\n            (update_color O)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of color other than O one step to the left.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (not (color_equals (color_of this) O))\\n        )\\n        (apply\\n            (move_node left)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of the left border toward the right direction by one step and recolor them to match the color of the adjacent object.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (column_equals (column_of this) 0)\\n                (neighbor_of this other)\\n            )\\n        )\\n        (apply\\n            (move_node right)\\n            (update_color (color_of other))\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Change any instance of color O to W and any instance of color W to O\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) O)\\n        )\\n        (apply\\n            (update_color W)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) W)\\n        )\\n        (apply\\n            (update_color O)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of color O one step to the right.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) O)\\n        )\\n        (apply\\n            (move_node right)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all the objects of color O one step to the left.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) O)\\n        )\\n        (apply\\n            (move_node left)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Rotate all objects by 90 degrees clockwise.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (rotate_node 90)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Flip all objects horizontally.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (flip horizontal)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of size 1 one step left.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (size_equals (size_of this) 1)\\n        )\\n        (apply\\n            (move_node left)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move the leftmost object one step to the right.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (column_equals (column_of this) 0)\\n        )\\n        (apply\\n            (move_node right)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move the leftmost objects of color W and O one step to the right.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (or\\n                (color_equals (color_of this) W)\\n                (color_equals (color_of this) O)\\n            )\\n        )\\n        (apply\\n            (move_node right)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor the top row of all objects to the color of the adjacent cells immediately below them.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (neighbor_of this other)\\n                (and\\n                    (color_equals (color_of other) (color_of this))\\n                    (and\\n                        (column_equals (column_of other) (column_of this))\\n                        (or\\n                            (and\\n                                (size_equals (size_of this) 1)\\n                                (size_equals (size_of other) 1)\\n                            )\\n                            (size_equals (size_of this) 1)\\n                        )\\n                    )\\n                )\\n            )\\n        )\\n        (apply\\n            (update_color (color_of other))\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Rotate all objects with color O by 90 degrees.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) O)\\n        )\\n        (apply\\n            (rotate_node 90)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Rotate all the objects by 90 degrees.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (rotate_node 90)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of color O one step to the right.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) O)\\n        )\\n        (apply\\n            (move_node right)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move the leftmost object of each color to the left side of the grid.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter \\n            (column_equals (column_of this) 0)\\n        )\\n        (apply \\n            (move_node left)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move the left-most object of each row one step to the left.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (column_equals (column_of this) 0)\\n        )\\n        (apply\\n            (move_node left)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Rotate all 2x2 blocks within the grid by 90 degrees clockwise.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (height_equals (height_of this) 2)\\n                (width_equals (width_of this) 2)\\n            )\\n        )\\n        (apply\\n            (rotate_node 90)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Swap the colors O and W in the grid.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) O)\\n        )\\n        (apply\\n            (update_color W)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) W)\\n        )\\n        (apply\\n            (update_color O)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move first the object then switch its color to the color of its neighbor.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (neighbor_of this other)\\n        )\\n        (apply\\n            (move_node_max (direction_of other))\\n            (update_color (color_of other))\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of color O one step to the right.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) O)\\n        )\\n        (apply\\n            (move_node right)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move the object in the first column toward the right direction by one cell.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (column_equals (column_of this) 0)\\n        )\\n        (apply\\n            (move_node right)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of color O to position up.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) O)\\n        )\\n        (apply\\n            (move_node up)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor the top-left object to color O\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (and\\n                (column_equals (column_of this) 0)\\n                (and\\n                    (not (color_equals (color_of this) O))\\n                    (column_equals (column_of this) 0)\\n                )\\n            )\\n        )\\n        (apply\\n            (update_color O)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Flip the color of all border cells.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (flip horizontal)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move the leftmost pixel of color 'O' to color 'W'.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) O)\\n                (neighbor_of this other)\\n            )\\n        )\\n        (apply\\n            (move_node right)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of color 'O' one step to the right.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) O)\\n        )\\n        (apply\\n            (move_node right)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor the top-most column of each object to follow the color of the second from top column.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (column_equals (column_of this) 0)\\n        )\\n        (apply\\n            (update_color (color_of other))\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move the objects in the center column down by one step\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (column_equals (column_of this) center)\\n        )\\n        (apply\\n            (move_node down)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects located on the first column to the right\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (column_equals (column_of this) 0)\\n        )\\n        (apply\\n            (move_node right)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Rotate all objects of color O by 90 degrees clockwise.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) O)\\n        )\\n        (apply\\n            (rotate_node 90)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of color O one step to the right.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) O)\\n        )\\n        (apply\\n            (move_node right)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of color O one step to the left.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) O)\\n        )\\n        (apply\\n            (move_node left)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move the objects of the minimum height toward the direction of the neighboring object.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (height_equals (height_of this) min)\\n                (neighbor_of this other)\\n            )\\n        )\\n        (apply\\n            (move_node (direction_of other))\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move the objects with color O one step to the left.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) O)\\n        )\\n        (apply\\n            (move_node left)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects on the left column one step to the right.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (column_equals (column_of this) 0)\\n        )\\n        (apply\\n            (move_node right)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of color different than O one step to the left.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (not (color_equals (color_of this) O))\\n        )\\n        (apply\\n            (move_node left)\\n        )\\n    )\\n)\"\n}"
]