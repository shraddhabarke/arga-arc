(do
    (rule
        (vars (this))
        (filter
            (shape_equals (shape_of this) enclosed)
        )
        (apply
            (update_color B)
            (update_color Y)
            (update_color R)
            (update_color Y)
            (update_color B)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) X)
        )
        (apply
            (update_color B)
            (update_color Y)
            (update_color R)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter (color_equals (color_of this) X))
        (apply
            (update_color B)
        )
    )
    (rule
        (vars (this))
        (filter (and (color_equals (color_of this) B) (column_equals (column_of this) even)))
        (apply
            (update_color Y)
        )
    )
    (rule
        (vars (this))
        (filter (and (color_equals (color_of this) B) (column_equals (column_of this) odd)))
        (apply
            (update_color R)
        )
    )
    (rule
        (vars (this))
        (filter (and (color_equals (color_of this) Y) (column_equals (column_of this) odd)))
        (apply
            (update_color B)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) X)
        )
        (apply
            (add_border B)
            (update_color Y)
            (update_color Y)
            (update_color B)
            (update_color R)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter (color_equals (color_of this) X))
        (apply
            (update_color B)
            (update_color Y)
            (update_color R)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) X)
        )
        (apply
            (add_border B)
            (rotate_node 90)
            (rotate_node 90)
            (rotate_node 90)
            (rotate_node 90)
            (add_border Y)
            (rotate_node 90)
            (rotate_node 90)
            (rotate_node 90)
            (rotate_node 90)
            (add_border R)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter)
        (apply
            (add_border B)
        )
    )
    (rule
        (vars (this))
        (filter)
        (apply
            (fill_rectangle Y false)
        )
    )
    (rule
        (vars (this))
        (filter)
        (apply
            (hollow_rectangle R)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) X)
        )
        (apply
            (update_color R)
        )
    )
    (rule
        (vars (this other))
        (filter
            (and
                (neighbor_of this other)
                (color_equals (color_of other) R)
            )
        )
        (apply
            (update_color Y)
        )
    )
    (rule
        (vars (this other))
        (filter
            (and
                (neighbor_of this other)
                (color_equals (color_of other) Y)
            )
        )
        (apply
            (update_color B)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter)
        (apply
            (add_border B)
            (extend_node (direction_of this) false)
            (update_color Y)
            (add_border Y)
            (update_color R)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) X)
        )
        (apply
            (add_border B)
            (fill_rectangle Y true)
            (hollow_rectangle R)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (shape_equals (shape_of this) square)
        )
        (apply
            (update_color B)
        )
    )
    (rule
        (vars (this))
        (filter
            (not (shape_equals (shape_of this) square))
        )
        (apply
            (update_color Y)
        )
    )
    (rule
        (vars (this other))
        (filter
            (and
                (neighbor_of this other)
                (color_equals (color_of this) B)
            )
        )
        (apply
            (update_color Y)
        )
    )
    (rule
        (vars (this other))
        (filter
            (and
                (neighbor_of this other)
                (color_equals (color_of this) Y)
            )
        )
        (apply
            (update_color R)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter (color_equals (color_of this) X))
        (apply
            (add_border B)
            (extend_node down false)
            (update_color Y)
            (move_node_max down)
            (update_color R)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter)
        (apply
            (add_border B)
            (hollow_rectangle R)
            (mirror (mirror_axis_of this))
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) X)
        )
        (apply
            (update_color B)
        )
    )
    (rule
        (vars (this other))
        (filter
            (and
                (neighbor_of this other)
                (color_equals (color_of other) B)
            )
        )
        (apply
            (update_color Y)
        )
    )
    (rule
        (vars (this other))
        (filter
            (and
                (neighbor_of this other)
                (and
                    (neighbor_of this other)
                    (color_equals (color_of other) Y)
                )
            )
        )
        (apply
            (update_color R)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) X)
        )
        (apply
            (add_border B)
            (add_border Y)
            (add_border R)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) X)
        )
        (apply
            (update_color B)
        )
    )
    (rule
        (vars (this other))
        (filter
            (and
                (color_equals (color_of this) X)
                (neighbor_of this other)
            )
        )
        (apply
            (update_color Y)
        )
    )
    (rule
        (vars (this))
        (filter
            (and
                (color_equals (color_of this) X)
                (not (neighbor_of this other))
            )
        )
        (apply
            (update_color R)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) X)
        )
        (apply
            (update_color B)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) B)
        )
        (apply
            (update_color Y)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) Y)
        )
        (apply
            (update_color R)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) X)
        )
        (apply
            (update_color B)
        )
    )
    (rule
        (vars (this))
        (filter
            (and
                (color_equals (color_of this) B)
                (or
                    (and (column_equals (column_of this) odd) (size_equals (size_of this) even))
                    (and (column_equals (column_of this) even) (size_equals (size_of this) even))
                )
            )
        )
        (apply
            (update_color Y)
        )
    )
    (rule
        (vars (this))
        (filter
            (and
                (color_equals (color_of this) B)
                (or
                    (and (column_equals (column_of this) even) (size_equals (size_of this) odd))
                    (and (column_equals (column_of this) odd) (size_equals (size_of this) odd))
                )
            )
        )
        (apply
            (update_color R)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter (color_equals (color_of this) X))
        (apply
            (add_border B)
        )
    )
    (rule
        (vars (this))
        (filter (color_equals (color_of this) X))
        (apply
            (hollow_rectangle Y)
        )
    )
    (rule
        (vars (this))
        (filter (color_equals (color_of this) X))
        (apply
            (fill_rectangle R false)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (neighbor_of this this)
        )
        (apply
            (update_color B)
        )
    )
    (rule
        (vars (this other))
        (filter
            (and
                (color_equals (color_of this) X)
                (neighbor_of this other)
            )
        )
        (apply
            (update_color R)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) X)
        )
        (apply
            (update_color Y)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) X)
        )
        (apply
            (update_color B)
            (update_color Y)
            (update_color R)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) X)
        )
        (apply
            (update_color B)
        )
    )
    (rule
        (vars (this))
        (filter
            (and
                (color_equals (color_of this) B)
                (neighbor_of this this)
            )
        )
        (apply
            (update_color Y)
        )
    )
    (rule
        (vars (this))
        (filter
            (and
                (color_equals (color_of this) Y)
                (neighbor_of this this)
            )
        )
        (apply
            (update_color R)
        )
    )
    (rule
        (vars (this))
        (filter
            (and
                (color_equals (color_of this) R)
                (neighbor_of this this)
            )
        )
        (apply
            (update_color Y)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (and (size_equals (size_of this) 5) (color_equals (color_of this) X))
        )
        (apply (update_color B))
    )
    (rule
        (vars (this))
        (filter
            (and (size_equals (size_of this) 4) (color_equals (color_of this) X))
        )
        (apply (update_color Y))
    )
    (rule
        (vars (this))
        (filter
            (and (size_equals (size_of this) 1) (color_equals (color_of this) X))
        )
        (apply (update_color R))
    )
)

(do
    (rule
        (vars (this))
        (filter
            (and
                (color_equals (color_of this) X)
                (and
                    (size_equals (size_of this) 16)
                    (shape_equals (shape_of this) square)
                )
            )
        )
        (apply
            (update_color R)
            (extend_node right false)
            (extend_node down false)
            (update_color B)
            (move_node up_left)
            (move_node up)
            (move_node right)
            (update_color Y)
            (extend_node down_left false)
            (rotate_node 180)
            (extend_node down_left false)
            (move_node right)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter (neighbor_of this other))
        (apply
            (update_color Y)
        )
    )
    (rule
        (vars (this other))
        (filter (and (color_equals (color_of this) Y) (neighbor_of this other)))
        (apply
            (update_color R)
        )
    )
    (rule
        (vars (this other))
        (filter (and (color_equals (color_of this) R) (neighbor_of this other)))
        (apply
            (update_color B)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) X)
        )
        (apply
            (add_border B)
            (fill_rectangle R false)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) X)
        )
        (apply
            (insert 0 top_left source)
            (update_color Y)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) X)
        )
        (apply
            (insert 0 top_right source)
            (update_color Y)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) X)
        )
        (apply
            (insert 0 bottom_left source)
            (update_color Y)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) X)
        )
        (apply
            (insert 0 bottom_right source)
            (update_color Y)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (column_equals (column_of this) even)
        )
        (apply
            (update_color Y)
        )
    )
    (rule
        (vars (this))
        (filter
            (column_equals (column_of this) odd)
        )
        (apply
            (update_color R)
        )
    )
    (rule
        (vars (this other))
        (filter
            (and
                (color_equals (color_of this) R)
                (neighbor_of this other)
            )
        )
        (apply
            (update_color Y)
        )
    )
    (rule
        (vars (this other))
        (filter
            (and
                (color_equals (color_of this) Y)
                (neighbor_of this other)
            )
        )
        (apply
            (update_color B)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (shape_equals (shape_of this) square)
        )
        (apply
            (hollow_rectangle B)
            (fill_rectangle Y false)
            (fill_rectangle R false)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter (height_equals (height_of this) 1))
        (apply
            (update_color B)
        )
    )
    (rule
        (vars (this other))
        (filter (neighbor_of this other))
        (apply
            (update_color (color_of other))
        )
    )
    (rule
        (vars (this other))
        (filter
            (and
                (neighbor_of this other)
                (color_equals (color_of this) B)
            )
        )
        (apply
            (update_color Y)
        )
    )
    (rule
        (vars (this other))
        (filter
            (and
                (neighbor_of this other)
                (color_equals (color_of this) Y)
            )
        )
        (apply
            (update_color R)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (and
                (color_equals (color_of this) X)
                (neighbor_of this other)
            )
        )
        (apply
            (update_color B)
            (update_color Y)
            (update_color R)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter (color_equals (color_of this) X))
        (apply
            (update_color B)
            (update_color Y)
            (update_color R)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (size_equals (size_of this) max)
        )
        (apply
            (hollow_rectangle R)
        )
    )
    (rule
        (vars (this))
        (filter
            (size_equals (size_of this) max)
        )
        (apply
            (add_border B)
        )
    )
    (rule
        (vars (this))
        (filter
            (and
                (size_equals (size_of this) max)
                (color_equals (color_of this) B)
            )
        )
        (apply
            (update_color Y)
        )
    )
    (rule
        (vars (this))
        (filter
            (and
                (size_equals (size_of this) max)
                (color_equals (color_of this) Y)
            )
        )
        (apply
            (update_color B)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter (color_equals (color_of this) X))
        (apply
            (update_color B)
            (update_color Y)
            (update_color R)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) X)
        )
        (apply
            (update_color B)
            (update_color Y)
            (update_color R)
            (update_color R)
            (update_color Y)
            (update_color B)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) X)
        )
        (apply
            (hollow_rectangle R)
            (add_border Y)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) X)
        )
        (apply
            (update_color B)
            (update_color Y)
            (update_color R)
            (update_color R)
            (update_color Y)
            (update_color B)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) X)
        )
        (apply
            (update_color Y)
        )
    )
    (rule
        (vars (this other))
        (filter
            (and
                (color_equals (color_of this) Y)
                (and
                    (neighbor_of this other)
                    (color_equals (color_of other) Y)
                )
            )
        )
        (apply
            (update_color R)
        )
    )
    (rule
        (vars (this other))
        (filter
            (and
                (color_equals (color_of this) Y)
                (not (color_equals (color_of other) Y))
            )
        )
        (apply
            (update_color B)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) X)
        )
        (apply
            (add_border B)
            (rotate_node 90)
            (add_border Y)
            (rotate_node 90)
            (add_border R)
            (rotate_node 90)
            (add_border Y)
            (rotate_node 90)
            (add_border B)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (color_equals (color_of this) X)
        )
        (apply
            (add_border B)
        )
    )
    (rule
        (vars (this other))
        (filter
            (neighbor_of this other)
        )
        (apply
            (update_color Y)
        )
    )
    (rule
        (vars (this other))
        (filter
            (neighbor_of this other)
        )
        (apply
            (update_color R)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) X)
        )
        (apply
            (update_color R)
        )
    )
    (rule
        (vars (this))
        (filter
            (and
                (neighbor_of this other)
                (color_equals (color_of other) X)
            )
        )
        (apply
            (update_color Y)
        )
    )
    (rule
        (vars (this))
        (filter
            (neighbor_of this other)
        )
        (apply
            (update_color B)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) X)
        )
        (apply
            (update_color Y)
        )
    )
    (rule
        (vars (this other))
        (filter
            (and
                (color_equals (color_of this) Y)
                (neighbor_of this other)
            )
        )
        (apply
            (update_color R)
        )
    )
    (rule
        (vars (this other))
        (filter
            (and
                (color_equals (color_of this) R)
                (neighbor_of this other)
            )
        )
        (apply
            (update_color B)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) X)
        )
        (apply
            (update_color Y)
        )
    )
    (rule
        (vars (this))
        (filter
            (and
                (color_equals (color_of this) Y)
                (column_equals (column_of this) even)
            )
        )
        (apply
            (update_color R)
        )
    )
    (rule
        (vars (this))
        (filter
            (and
                (color_equals (color_of this) Y)
                (column_equals (column_of this) odd)
            )
        )
        (apply
            (update_color B)
        )
    )
    (rule
        (vars (this))
        (filter
            (and
                (color_equals (color_of this) R)
                (size_equals (size_of this) min)
            )
        )
        (apply
            (update_color Y)
        )
    )
    (rule
        (vars (this))
        (filter
            (and
                (color_equals (color_of this) B)
                (size_equals (size_of this) min)
            )
        )
        (apply
            (update_color Y)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) X)
        )
        (apply
            (update_color Y)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter)
        (apply
            (update_color Y)
        )
    )
    (rule
        (vars (this other))
        (filter (and (neighbor_of this other) (color_equals (color_of this) Y)))
        (apply
            (update_color R)
        )
    )
    (rule
        (vars (this other))
        (filter (and (neighbor_of this other) (color_equals (color_of other) R)))
        (apply
            (update_color Y)
        )
    )
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color B)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) X)
        )
        (apply
            (add_border R)
            (update_color Y)
            (fill_rectangle B false)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter (color_equals (color_of this) X))
        (apply
            (hollow_rectangle B)
            (add_border Y)
            (fill_rectangle R false)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) X)
        )
        (apply
            (add_border B)
            (rotate_node 90)
            (add_border R)
            (rotate_node 90)
            (rotate_node 90)
            (rotate_node 90)
            (add_border Y)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) X)
        )
        (apply
            (add_border B)
            (extend_node up false)
            (add_border Y)
            (fill_rectangle R false)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (and
                (color_equals (color_of this) X)
                (size_equals (size_of this) max)
            )
        )
        (apply
            (update_color B)
            (move_node right)
            (update_color Y)
            (move_node right)
            (update_color Y)
            (move_node right)
            (update_color B)
            (move_node right)
            (update_color Y)
            (move_node right)
            (update_color R)
            (move_node right)
            (update_color R)
            (move_node right)
            (update_color Y)
            (move_node right)
            (update_color Y)
            (move_node right)
            (update_color B)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) X)
        )
        (apply
            (update_color B)
            (update_color Y)
            (update_color R)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter (color_equals (color_of this) X))
        (apply
            (update_color Y)
        )
    )
    (rule
        (vars (this other))
        (filter (neighbor_of this other))
        (apply
            (update_color R)
        )
    )
    (rule
        (vars (this))
        (filter (color_equals (color_of this) Y))
        (apply
            (move_node_max up_left)
            (update_color B)
        )
    )
    (rule
        (vars (this))
        (filter (color_equals (color_of this) Y))
        (apply
            (move_node_max down_right)
            (update_color B)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (color_equals (color_of this) X)
        )
        (apply
            (update_color Y)
        )
    )
    (rule
        (vars (this other))
        (filter
            (and
                (neighbor_of this other)
                (color_equals (color_of other) Y)
            )
        )
        (apply
            (update_color R)
        )
    )
    (rule
        (vars (this other))
        (filter
            (and
                (neighbor_of this other)
                (color_equals (color_of other) R)
            )
        )
        (apply
            (update_color B)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter (shape_equals (shape_of this) square))
        (apply
            (hollow_rectangle R)
            (fill_rectangle Y false)
        )
    )
    (rule
        (vars (this))
        (filter (shape_equals (shape_of this) enclosed))
        (apply
            (add_border B)
            (hollow_rectangle Y)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (color_equals (color_of this) X)
        )
        (apply
            (add_border B)
        )
    )
    (rule
        (vars (this other))
        (filter
            (and
                (color_equals (color_of this) B)
                (or
                    (color_equals (color_of other) X)
                    (color_equals (color_of other) X)
                )
            )
        )
        (apply
            (update_color Y)
        )
    )
    (rule
        (vars (this other))
        (filter
            (and
                (color_equals (color_of this) Y)
                (or
                    (color_equals (color_of other) B)
                    (color_equals (color_of other) X)
                )
            )
        )
        (apply
            (update_color R)
        )
    )
)

(do (rule (vars (this)) (filter (not (color_equals (color_of this) X))) (apply (update_color B) (update_color Y) (update_color R) (update_color Y) (update_color B))))

(do
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) X)
        )
        (apply
            (update_color B)
        )
    )
    (rule
        (vars (this other))
        (filter
            (and
                (color_equals (color_of this) B)
                (neighbor_of this other)
            )
        )
        (apply
            (update_color Y)
            (move_node right)
            (update_color R)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) X)
        )
        (apply
            (update_color Y)
        )
    )
    (rule
        (vars (this))
        (filter
            (and
                (color_equals (color_of this) Y)
                (height_equals (height_of this) max)
            )
        )
        (apply
            (add_border B)
            (hollow_rectangle Y)
            (extend_node down false)
        )
    )
    (rule
        (vars (this other))
        (filter
            (and
                (color_equals (color_of this) Y)
                (and
                    (neighbor_of this other)
                    (color_equals (color_of other) Y)
                )
            )
        )
        (apply
            (update_color R)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (color_equals (color_of this) X)
        )
        (apply
            (update_color B)
        )
    )
    (rule
        (vars (this))
        (filter
            (and
                (color_equals (color_of this) B)
                (neighbor_of this other)
            )
        )
        (apply
            (update_color Y)
        )
    )
    (rule
        (vars (this))
        (filter
            (and
                (color_equals (color_of this) Y)
                (neighbor_of this other)
            )
        )
        (apply
            (update_color R)
        )
    )
    (rule
        (vars (this))
        (filter
            (and
                (color_equals (color_of this) R)
                (neighbor_of this other)
            )
        )
        (apply
            (update_color Y)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (shape_equals (shape_of this) square)
        )
        (apply
            (hollow_rectangle Y)
            (add_border B)
        )
    )
    (rule
        (vars (this))
        (filter
            (shape_equals (shape_of this) enclosed)
        )
        (apply
            (hollow_rectangle R)
            (add_border Y)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (color_equals (color_of this) X)
        )
        (apply
            (update_color B)
        )
    )
    (rule
        (vars (this))
        (filter
            (and (color_equals (color_of this) B) (not (neighbor_of this this)))
        )
        (apply
            (update_color Y)
        )
    )
    (rule
        (vars (this))
        (filter
            (and (color_equals (color_of this) Y) (not (neighbor_of this this)))
        )
        (apply
            (update_color R)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter)
        (apply
            (add_border B)
            (hollow_rectangle R)
            (fill_rectangle Y false)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter)
        (apply
            (add_border B)
            (add_border Y)
            (hollow_rectangle R)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter)
        (apply
            (add_border B)
            (extend_node up_left false)
            (update_color Y)
            (extend_node down_right false)
            (update_color Y)
            (move_node down_right)
            (move_node down_right)
            (move_node down_right)
            (move_node down_right)
            (update_color R)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) X)
        )
        (apply
            (update_color R)
        )
    )
    (rule
        (vars (this other))
        (filter
            (and
                (color_equals (color_of this) X)
                (neighbor_of this other)
            )
        )
        (apply
            (update_color Y)
        )
    )
    (rule
        (vars (this other))
        (filter
            (and
                (color_equals (color_of this) Y)
                (neighbor_of this other)
            )
        )
        (apply
            (update_color B)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter (color_equals (color_of this) X))
        (apply
            (add_border B)
            (fill_rectangle Y false)
            (hollow_rectangle R)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) X)
        )
        (apply
            (add_border B)
            (hollow_rectangle Y)
            (fill_rectangle R false)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) X)
        )
        (apply
            (add_border B)
            (fill_rectangle Y false)
            (hollow_rectangle R)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter)
        (apply
            (add_border B)
            (mirror (mirror_axis_of this))
            (fill_rectangle Y false)
            (hollow_rectangle R)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter)
        (apply
            (add_border B)
            (hollow_rectangle Y)
        )
    )
    (rule
        (vars (this other))
        (filter
            (neighbor_of this other)
        )
        (apply
            (hollow_rectangle R)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) X)
        )
        (apply
            (move_node down)
            (update_color B)
            (update_color Y)
            (update_color R)
            (update_color Y)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (and (color_equals (color_of this) X) (neighbor_of this other))
        )
        (apply
            (update_color B)
            (update_color Y)
            (update_color R)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter (color_equals (color_of this) X))
        (apply
            (add_border B)
            (hollow_rectangle Y)
        )
    )
    (rule
        (vars (this))
        (filter (color_equals (color_of this) X))
        (apply
            (fill_rectangle R false)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (and
                (color_equals (color_of this) X)
                (shape_equals (shape_of this) enclosed)
            )
        )
        (apply
            (add_border B)
            (update_color R)
        )
    )
    (rule
        (vars (this))
        (filter
            (column_equals (column_of this) even)
        )
        (apply
            (update_color Y)
        )
    )
    (rule
        (vars (this other))
        (filter
            (and
                (color_equals (color_of this) Y)
                (neighbor_of this other)
            )
        )
        (apply
            (update_color R)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) X)
        )
        (apply
            (update_color B)
        )
    )
    (rule
        (vars (this other))
        (filter
            (and
                (color_equals (color_of other) B)
                (neighbor_of this other)
            )
        )
        (apply
            (update_color Y)
        )
    )
    (rule
        (vars (this other))
        (filter
            (and
                (color_equals (color_of this) Y)
                (neighbor_of this other)
            )
        )
        (apply
            (update_color R)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) X)
        )
        (apply
            (update_color R)
            (add_border Y)
            (add_border B)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) X)
        )
        (apply
            (update_color Y)
            (update_color R)
            (update_color B)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) X)
        )
        (apply
            (add_border B)
        )
    )
    (rule
         (vars (this))
        (filter
            (and
                (color_equals (color_of this) X)
                (neighbor_of this this)
            )
        )
        (apply
            (add_border Y)
        )
    )
    (rule
         (vars (this))
        (filter
            (and
                (color_equals (color_of this) X)
                (neighbor_of this this)
            )
        )
        (apply
            (add_border R)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (size_equals (size_of this) max)
        )
        (apply
            (add_border B)
        )
    )
    (rule
        (vars (this))
        (filter
            (size_equals (size_of this) even)
        )
        (apply
            (update_color Y)
        )
    )
    (rule
        (vars (this))
        (filter
            (size_equals (size_of this) odd)
        )
        (apply
            (update_color R)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (and
                (not (color_equals (color_of this) O))
                (not (color_equals (color_of this) X))
            )
        )
        (apply
            (update_color Y)
        )
    )
    (rule
        (vars (this other))
        (filter
            (and
                (color_equals (color_of this) Y)
                (and
                    (neighbor_of this other)
                    (color_equals (color_of other) Y)
                )
            )
        )
        (apply
            (update_color R)
        )
    )
    (rule
        (vars (this other))
        (filter
            (and
                (color_equals (color_of this) X)
                (color_equals (color_of other) R)
            )
        )
        (apply
            (update_color B)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter)
        (apply
            (add_border B)
            (fill_rectangle Y false)
            (hollow_rectangle R)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (and
                (color_equals (color_of this) X)
                (and
                    (neighbor_of this other)
                    (color_equals (color_of other) X)
                )
            )
        )
        (apply
            (update_color R)
        )
    )
    (rule
        (vars (this other))
        (filter
            (and
                (color_equals (color_of this) X)
                (not
                    (neighbor_of this other)
                )
            )
        )
        (apply
            (update_color B)
        )
    )
    (rule
        (vars (this))
        (filter
            (and
                (color_equals (color_of this) B)
                (neighbor_of this other)
            )
        )
        (apply
            (update_color Y)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter)
        (apply
            (hollow_rectangle B)
            (fill_rectangle Y false)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter (color_equals (color_of this) X))
        (apply
            (add_border B)
            (fill_rectangle Y true)
            (hollow_rectangle R)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (and
                (color_equals (color_of this) X)
                (or
                    (and
                        (not (neighbor_of this this))
                        (or
                            (column_equals (column_of this) 0)
                            (or
                                (column_equals (column_of this) 9)
                                (or
                                    (neighbor_of this other)
                                    (color_equals (color_of other) O)
                                )
                            )
                        )
                    )
                    (column_equals (column_of this) 5)
                )
            )
        )
        (apply
            (update_color Y)
        )
    )
    (rule
        (vars (this other))
        (filter
            (and
                (color_equals (color_of this) X)
                (and
                    (or
                        (column_equals (column_of this) 0)
                        (column_equals (column_of this) 9)
                    )
                    (neighbor_of this other)
                )
            )
        )
        (apply
            (update_color B)
        )
    )
    (rule
        (vars (this other))
        (filter
            (and
                (color_equals (color_of this) X)
                (and
                    (column_equals (column_of this) 5)
                    (neighbor_of this other)
                )
            )
        )
        (apply
            (update_color R)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) X)
        )
        (apply
            (add_border B)
            (update_color R)
            (update_color Y)
        ))
)

(do
    (rule
        (vars (this))
        (filter (height_equals (height_of this) 1))
        (apply
            (update_color B)
            (update_color Y)
            (update_color R)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) X)
        )
        (apply
            (update_color B)
            (update_color Y)
            (update_color R)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter)
        (apply
            (add_border B)
            (fill_rectangle Y false)
            (fill_rectangle R false)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (and
                (color_equals (color_of this) X)
                (size_equals (size_of this) 4)
            )
        )
        (apply
            (update_color Y)
        )
    )
    (rule
        (vars (this))
        (filter
            (and
                (color_equals (color_of this) X)
                (size_equals (size_of this) 4)
            )
        )
        (apply
            (update_color R)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) X)
        )
        (apply
            (update_color B)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) X)
        )
        (apply
            (add_border B)
            (fill_rectangle Y false)
            (fill_rectangle R false)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter)
        (apply
            (add_border B)
            (fill_rectangle Y false)
            (fill_rectangle R true)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter (color_equals (color_of this) X))
        (apply
            (update_color R)
        )
    )
    (rule
        (vars (this other))
        (filter (neighbor_of this other))
        (apply
            (update_color Y)
        )
    )
    (rule
        (vars (this))
        (filter (and
            (color_equals (color_of this) O)
            (neighbor_of this other)))
        (apply
            (update_color B)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (shape_equals (shape_of this) enclosed)
        )
        (apply
            (update_color B)
        )
    )
    (rule
        (vars (this))
        (filter
            (shape_equals (shape_of this) square)
        )
        (apply
            (update_color Y)
        )
    )
    (rule
        (vars (this))
        (filter
            (and
                (not (color_equals (color_of this) B))
                (not (color_equals (color_of this) Y))
            )
        )
        (apply
            (update_color R)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (size_equals (size_of this) max)
        )
        (apply
            (update_color B)
        )
    )
    (rule
        (vars (this other))
        (filter
            (neighbor_of this other)
        )
        (apply
            (update_color Y)
        )
    )
    (rule
        (vars (this other))
        (filter
            (neighbor_of this other)
        )
        (apply
            (update_color R)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) X)
        )
        (apply
            (add_border B)
            (hollow_rectangle Y)
            (update_color R)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (height_equals (height_of this) 5)
        )
        (apply
            (update_color B)
            (update_color Y)
            (update_color R)
            (update_color Y)
            (update_color B)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) X)
        )
        (apply
            (add_border B)
            (hollow_rectangle Y)
            (fill_rectangle R false)
            (hollow_rectangle Y)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (or (column_equals (column_of this) 1) (column_equals (column_of this) 10))
        )
        (apply
            (update_color B)
        )
    )
    (rule
        (vars (this))
        (filter
            (or (column_equals (column_of this) 2) (column_equals (column_of this) 9))
        )
        (apply
            (update_color Y)
        )
    )
    (rule
        (vars (this))
        (filter
            (or (column_equals (column_of this) 3) (column_equals (column_of this) 8))
        )
        (apply
            (update_color R)
        )
    )
    (rule
        (vars (this))
        (filter
            (or (column_equals (column_of this) 4) (column_equals (column_of this) 7))
        )
        (apply
            (update_color Y)
        )
    )
    (rule
        (vars (this))
        (filter
            (or (column_equals (column_of this) 5) (column_equals (column_of this) 6))
        )
        (apply
            (update_color B)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (color_equals (color_of this) X)
        )
        (apply
            (add_border B)
            (add_border Y)
            (add_border R)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) X)
        )
        (apply
            (update_color B)
            (update_color Y)
            (update_color R)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (shape_equals (shape_of this) square)
        )
        (apply
            (rotate_node 90)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (width_equals (width_of this) max)
        )
        (apply
            (update_color B)
        )
    )
    (rule
        (vars (this))
        (filter
            (width_equals (width_of this) even)
        )
        (apply
            (update_color Y)
        )
    )
    (rule
        (vars (this))
        (filter
            (width_equals (width_of this) odd)
        )
        (apply
            (update_color R)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) X)
        )
        (apply
            (update_color B)
        )
    )
    (rule
        (vars (this other))
        (filter
            (and
                (color_equals (color_of this) B)
                (neighbor_of this other)
            )
        )
        (apply
            (update_color Y)
        )
    )
    (rule
        (vars (this other))
        (filter
            (and
                (color_equals (color_of this) Y)
                (neighbor_of this other)
            )
        )
        (apply
            (update_color R)
        )
    )
    (rule
        (vars (this other))
        (filter
            (and
                (color_equals (color_of this) R)
                (neighbor_of this other)
            )
        )
        (apply
            (update_color Y)
        )
    )
    (rule
        (vars (this other))
        (filter
            (and
                (color_equals (color_of this) Y)
                (neighbor_of this other)
            )
        )
        (apply
            (update_color B)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter (and (color_equals (color_of this) X) (neighbor_of this other)))
        (apply
            (update_color (color_of other))
        )
    )
    (rule
        (vars (this))
        (filter (color_equals (color_of this) X))
        (apply
            (update_color B)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter (color_equals (color_of this) X))
        (apply
            (add_border B)
            (fill_rectangle Y true)
            (hollow_rectangle R)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (shape_equals (shape_of this) square)
        )
        (apply
            (update_color B)
        )
    )
    (rule
        (vars (this))
        (filter
            (and
                (color_equals (color_of this) O)
                (size_equals (size_of this) 9)
            )
        )
        (apply
            (update_color B)
        )
    )
    (rule
        (vars (this))
        (filter
            (and
                (color_equals (color_of this) X)
                (size_equals (size_of this) 4)
            )
        )
        (apply
            (update_color Y)
        )
    )
    (rule
        (vars (this))
        (filter
            (and
                (color_equals (color_of this) X)
                (size_equals (size_of this) 2)
            )
        )
        (apply
            (update_color R)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter)
        (apply
            (add_border B)
            (update_color B)
            (move_node down)
            (move_node up)
            (flip vertical)
            (flip horizontal)
        )
    )
    (rule
        (vars (this))
        (filter
            (or
                (color_equals (color_of this) O)
                (color_equals (color_of this) F)
            )
        )
        (apply
            (update_color Y)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) X)
        )
        (apply
            (update_color R)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) X)
        )
        (apply
            (update_color B)
            (extend_node right false)
            (update_color Y)
            (extend_node right false)
            (update_color R)
            (extend_node right false)
            (update_color Y)
            (extend_node right false)
            (update_color R)
            (extend_node right false)
            (update_color B)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter (color_equals (color_of this) X))
        (apply
            (update_color B)
            (update_color Y)
            (update_color R)
            (update_color Y)
            (update_color R)
            (update_color Y)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color B)
            (update_color Y)
            (update_color R)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) X)
        )
        (apply
            (add_border B)
        )
    )
    (rule
        (vars (this))
        (filter
            (and
                (color_equals (color_of this) X)
                (not (neighbor_of this this))
            )
        )
        (apply
            (update_color Y)
        )
    )
    (rule
        (vars (this))
        (filter
            (and
                (color_equals (color_of this) X)
                (or
                    (neighbor_of this this)
                    (neighbor_of this this)
                )
            )
        )
        (apply
            (update_color R)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) X)
        )
        (apply
            (add_border B)
            (mirror (mirror_axis_of this))
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) X)
        )
        (apply
            (add_border B)
            (hollow_rectangle Y)
            (fill_rectangle R false)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (size_equals (size_of this) max)
        )
        (apply
            (add_border B)
            (hollow_rectangle Y)
            (fill_rectangle R false)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (color_equals (color_of this) X)
        )
        (apply
            (update_color R)
        )
    )
    (rule
        (vars (this))
        (filter (height_equals (height_of this) 2))
        (apply
            (update_color Y)
        )
    )
    (rule
        (vars (this))
        (filter (height_equals (height_of this) 1))
        (apply
            (update_color B)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) X)
        )
        (apply
            (update_color B)
            (move_node right)
            (update_color Y)
            (move_node right)
            (update_color R)
            (move_node right)
            (update_color B)
            (move_node right)
        )
    )
)