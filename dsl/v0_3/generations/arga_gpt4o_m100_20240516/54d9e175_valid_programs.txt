(do
    (rule
        (vars (this other))
        (filter
            (neighbor_of this other)
        )
        (apply
            (update_color (color_of other))
        )
    )
)

(do
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color A)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (and
                (size_equals (size_of this) 1)
                (not (color_equals (color_of this) X))
            )
        )
        (apply
            (update_color F)
        )
    )
    (rule
        (vars (this))
        (filter
            (and
                (size_equals (size_of this) 1)
                (color_equals (color_of this) R)
            )
        )
        (apply
            (update_color A)
        )
    )
    (rule
        (vars (this))
        (filter
            (and
                (size_equals (size_of this) 1)
                (color_equals (color_of this) G)
            )
        )
        (apply
            (update_color C)
        )
    )
    (rule
        (vars (this))
        (filter
            (and
                (size_equals (size_of this) 1)
                (color_equals (color_of this) B)
            )
        )
        (apply
            (update_color W)
        )
    )
    (rule
        (vars (this))
        (filter
            (and
                (size_equals (size_of this) 1)
                (color_equals (color_of this) Y)
            )
        )
        (apply
            (update_color A)
        )
    )
)


(do
    (rule
        (vars (this))
        (filter
            (not (color_equals (color_of this) X))
        )
        (apply
            (fill_rectangle (color_of this) false)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (size_equals (size_of this) 1)
        )
        (apply
            (update_color A)
        )
    )
    (rule
        (vars (this))
        (filter
            (size_equals (size_of this) 3)
        )
        (apply
            (update_color F)
        )
    )
    (rule
        (vars (this))
        (filter
            (size_equals (size_of this) 2)
        )
        (apply
            (update_color C)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (and
                (not (color_equals (color_of this) X))
                (not (neighbor_of this other))
            )
        )
        (apply
            (update_color F)
        )    
    )
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color A)
        )
    )    
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color C)
        )
    )    
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color W)
        )
    )    
)

(do
    (rule
        (vars (this))
        (filter
            (not (color_equals (color_of this) X))
        )
        (apply
            (update_color F)
        )
    )
    (rule
        (vars (this other))
        (filter
            (and
                (neighbor_of this other)
                (color_equals (color_of other) X)
            )
        )
        (apply
            (update_color (color_of other))
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (and
                (column_equals (column_of this) odd)
                (neighbor_of this this)
            )
        )
        (apply
            (update_color A)
        )
    )
    (rule
        (vars (this))
        (filter
            (and
                (column_equals (column_of this) 2)
                (neighbor_of this this)
            )
        )
        (apply
            (update_color C)
        )
    )
    (rule
        (vars (this))
        (filter
            (and
                (column_equals (column_of this) 3)
                (neighbor_of this this)
            )
        )
        (apply
            (update_color F)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter (column_equals (column_of this) 0))
        (apply (update_color F))
    )
    (rule
        (vars (this))
        (filter (column_equals (column_of this) 1))
        (apply (update_color F))
    )
    (rule
        (vars (this))
        (filter (column_equals (column_of this) 2))
        (apply (update_color F))
    )
    (rule
        (vars (this))
        (filter (column_equals (column_of this) 4))
        (apply (update_color A))
    )
    (rule
        (vars (this))
        (filter (column_equals (column_of this) 5))
        (apply (update_color A))
    )
    (rule
        (vars (this))
        (filter (column_equals (column_of this) 6))
        (apply (update_color A))
    )
    (rule
        (vars (this))
        (filter (column_equals (column_of this) 8))
        (apply (update_color F))
    )
    (rule
        (vars (this))
        (filter (column_equals (column_of this) 9))
        (apply (update_color F))
    )
    (rule
        (vars (this))
        (filter (column_equals (column_of this) 10))
        (apply (update_color F))
    )
)

(do
    (rule
        (vars (this))
        (filter
            (not (color_equals (color_of this) X))
        )
        (apply
            (fill_rectangle (color_of this) true)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) X)
        )
        (apply
            (fill_rectangle F false)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color A)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (not (color_equals (color_of this) O))
        )
        (apply
            (update_color (color_of this))
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) O)
        )
        (apply
            (update_color (color_of this))
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (not (color_equals (color_of this) X))
        )
        (apply
            (update_color A)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (column_equals (column_of this) (column_of other))
        )
        (apply
            (update_color (color_of other))
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (size_equals (size_of this) 1)
        )
        (apply
            (extend_node down true)
            (update_color A)
        )
    )
    (rule
        (vars (this other))
        (filter
            (and
                (size_equals (size_of this) 3)
                (neighbor_of this other)
            )
        )
        (apply
            (update_color (color_of other))
        )
    )
)

(do
    (rule
        (vars (this))
        (filter (not (color_equals (color_of this) X)))
        (apply
            (update_color F)
        )
    )
    (rule
        (vars (this other))
        (filter
            (and
                (neighbor_of this other)
                (color_equals (color_of other) X)
            )
        )
        (apply
            (update_color A)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter (not (color_equals (color_of this) X)))
        (apply (update_color F))
    )
    (rule
        (vars (this))
        (filter (neighbor_of this other))
        (apply (update_color A) (move_node down))
    )
    (rule
        (vars (this))
        (filter (neighbor_of this other))
        (apply (update_color C) (move_node up))
    )
)

(do
    (rule
        (vars (this))
        (filter
            (size_equals (size_of this) 1)
        )
        (apply
            (fill_rectangle (color_of this) true)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (not (color_equals (color_of this) X))
        )
        (apply
            (update_color (color_of this))
        )
    )
)

(do
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color F)
        )
    )
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color A)
        )
    )
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color C)
        )
    )
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color W)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color F)
        )
    )
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color A)
        )
    )
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color C)
        )
    )
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color W)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color C)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter)
        (apply
            (fill_rectangle F false)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color F)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter
        )
        (apply
            (fill_rectangle C false)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter)
        (apply (update_color F))
    )
    (rule
        (vars (this))
        (filter (neighbor_of this this))
        (apply
            (move_node down)
            (update_color A)
        )
    )
    (rule
        (vars (this))
        (filter (neighbor_of this this))
        (apply
            (move_node down)
            (update_color F)
        )
    )
    (rule
        (vars (this))
        (filter (neighbor_of this this))
        (apply
            (move_node down)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter)
        (apply
            (fill_rectangle F false)
        )
    )
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color A)
        )
    )
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color C)
        )
    )
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color F)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color A)
        )
    )
    (rule
        (vars (this other))
        (filter
            (and
                (not (color_equals (color_of other) O))
                (and
                    (neighbor_of this other)
                    (size_equals (size_of other) 1)
                )
            )
        )
        (apply
            (update_color F)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) A)
        )
        (apply
            (update_color C)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (not (color_equals (color_of this) X))
        )
        (apply
            (move_node up)
            (move_node up)
            (update_color F)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (and
                (size_equals (size_of this) 1)
                (not (color_equals (color_of this) X))
            )
        )
        (apply
            (update_color (color_of other))
        )
    )
)

(do
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color F)
        )
    )
    (rule
        (vars (this other))
        (filter
            (color_equals (color_of this) B)
        )
        (apply
            (update_color W)
        )
    )
    (rule
        (vars (this other))
        (filter
            (color_equals (color_of this) R)
        )
        (apply
            (update_color A)
        )
    )
    (rule
        (vars (this other))
        (filter
            (color_equals (color_of this) G)
        )
        (apply
            (update_color C)
        )
    )
    (rule
        (vars (this other))
        (filter
            (color_equals (color_of this) Y)
        )
        (apply
            (update_color F)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (size_equals (size_of this) 1)
        )
        (apply
            (move_node right)
            (extend_node down true)
            (extend_node left true)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (and
                (color_equals (color_of this) O)
                (neighbor_of this other)
            )
        )
        (apply
            (update_color (color_of other))
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (and
                (not (color_equals (color_of this) X))
                (neighbor_of this other)
            )
        )
        (apply
            (update_color C)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (not (color_equals (color_of this) X))
        )
        (apply
            (fill_rectangle (color_of this) true)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color A)
        )
    )
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color C)
        )
    )
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color F)
        )
    )
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color W)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (not (color_equals (color_of this) X))
        )
        (apply
            (update_color (color_of this))
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) B)
        )
        (apply
            (update_color F)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) R)
        )
        (apply
            (update_color A)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) G)
        )
        (apply
            (update_color C)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) Y)
        )
        (apply
            (update_color W)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color F)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) R)
        )
        (apply
            (update_color A)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) G)
        )
        (apply
            (update_color C)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) B)
        )
        (apply
            (update_color F)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) Y)
        )
        (apply
            (update_color W)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (and
                (not (color_equals (color_of this) X))
                (neighbor_of this other)
            )
        )
        (apply
            (update_color (color_of other))
        )
    )
)

(do
    (rule
        (vars (this))
        (filter (not (color_equals (color_of this) X)))
        (apply (fill_rectangle (color_of this) false)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (not (color_equals (color_of this) X))
        )
        (apply
            (update_color A)
        )
    )
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color C)
        )
    )
    (rule
        (vars (this))
        (filter
            (not (color_equals (color_of this) X))
        )
        (apply
            (update_color F)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (not (color_equals (color_of this) X))
        )
        (apply
            (update_color F)
        )
    )
    (rule
        (vars (this))
        (filter
            (not (color_equals (color_of this) X))
        )
        (apply
            (update_color C)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (and
                (not (color_equals (color_of this) X))
                (and
                    (neighbor_of this other)
                    (and
                        (neighbor_of other other)
                        (color_equals (color_of other) X)
                    )
                )
            )
        )
        (apply
            (update_color (color_of other))
        )
    )
)


(do
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color A)
        )
    )
    (rule
        (vars (this))
        (filter (column_equals (column_of this) 4))
        (apply
            (update_color X)
        )
    )
    (rule
        (vars (this))
        (filter (neighbor_of this other))
        (apply
            (update_color F)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (or
                (neighbor_of this other)
                (neighbor_of other this)
            )
        )
        (apply
            (update_color F)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (color_equals (color_of this) (color_of other))
        )
        (apply
            (update_color (color_of other))
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (size_equals (size_of this) 1)
        )
        (apply
            (update_color A)
        )
    )
    (rule
        (vars (this))
        (filter
            (size_equals (size_of this) 1)
        )
        (apply
            (update_color C)
        )
    )
    (rule
        (vars (this))
        (filter
            (size_equals (size_of this) 1)
        )
        (apply
            (update_color F)
        )
    )
    (rule
        (vars (this))
        (filter
            (and
                (not (size_equals (size_of this) 1))
                (not (color_equals (color_of this) X))
            )
        )
        (apply
            (update_color F)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (not (color_equals (color_of this) X))
        )
        (apply
            (fill_rectangle (color_of other) false)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (and
                (height_equals (height_of this) 1)
                (neighbor_of this this)
            )
        )
        (apply
            (update_color F)
        )
    )
    (rule
        (vars (this))
        (filter
            (and
                (height_equals (height_of this) 2)
                (neighbor_of this this)
            )
        )
        (apply
            (update_color A)
        )
    )
    (rule
        (vars (this))
        (filter
            (and
                (height_equals (height_of this) 3)
                (neighbor_of this this)
            )
        )
        (apply
            (update_color F)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter 
            (color_equals (color_of this) B)
        )
        (apply
            (update_color F)
        )
    )
    (rule
        (vars (this))
        (filter 
            (color_equals (color_of this) R)
        )
        (apply
            (update_color A)
        )
    )
    (rule
        (vars (this))
        (filter 
            (color_equals (color_of this) G)
        )
        (apply
            (update_color C)
        )
    )
    (rule
        (vars (this))
        (filter 
            (color_equals (color_of this) Y)
        )
        (apply
            (update_color W)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter (color_equals (color_of this) O))
        (apply (update_color F))
    )
    (rule
        (vars (this))
        (filter (color_equals (color_of this) B))
        (apply (update_color A))
    )
    (rule
        (vars (this))
        (filter (color_equals (color_of this) R))
        (apply (update_color A))
    )
    (rule
        (vars (this))
        (filter (color_equals (color_of this) G))
        (apply (update_color C))
    )
    (rule
        (vars (this))
        (filter (color_equals (color_of this) Y))
        (apply (update_color W))
    )
    (rule
        (vars (this))
        (filter (color_equals (color_of this) W))
        (apply (update_color A))
    )
    (rule
        (vars (this))
        (filter (color_equals (color_of this) X))
        (apply (update_color X))
    )
    (rule
        (vars (this))
        (filter (color_equals (color_of this) F))
        (apply (update_color C))
    )
    (rule
        (vars (this))
        (filter (color_equals (color_of this) C))
        (apply (update_color F))
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (and
                (not (color_equals (color_of this) X))
                (not (neighbor_of this other))
            )
        )
        (apply
            (update_color F)
        )
    )
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color (color_of this))
        )    
    )
)

(do
    (rule
        (vars (this))
        (filter
            (not (color_equals (color_of this) X))
        )
        (apply
            (update_color (color_of this))
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (not (color_equals (color_of other) X))
        )
        (apply
            (update_color (color_of this))
        )
    )
)

(do
    (rule
        (vars (this))
        (filter (color_equals (color_of this) O))
        (apply (update_color F))
    )
    (rule
        (vars (this))
        (filter (color_equals (color_of this) B))
        (apply (update_color F))
    )
    (rule
        (vars (this))
        (filter (color_equals (color_of this) R))
        (apply (update_color A))
    )
    (rule
        (vars (this))
        (filter (color_equals (color_of this) G))
        (apply (update_color C))
    )
    (rule
        (vars (this))
        (filter (color_equals (color_of this) Y))
        (apply (update_color W))
    )
)

(do
    (rule
        (vars (this))
        (filter
            (or
                (column_equals (column_of this) 0)
                (or
                    (column_equals (column_of this) 1)
                    (or
                        (column_equals (column_of this) 2)
                        (or
                            (column_equals (column_of this) 8)
                            (column_equals (column_of this) 10)
                        )
                    )
                )
            )
        )
        (apply
            (update_color F)
        )
    )
    (rule
        (vars (this))
        (filter
            (or
                (column_equals (column_of this) 4)
                (or
                    (column_equals (column_of this) 5)
                    (column_equals (column_of this) 6)
                )
            )
        )
        (apply
            (update_color A)
        )
    )
    (rule
        (vars (this))
        (filter
            (column_equals (column_of this) 11)
        )
        (apply
            (update_color A)
        )
    )
    (rule
        (vars (this))
        (filter
            (column_equals (column_of this) 3)
        )
        (apply
            (update_color X)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color (color_of this))
        )
    )
    (rule
        (vars (this other))
        (filter
            (and
                (not (color_equals (color_of this) X))
                (neighbor_of this other)
            )
        )
        (apply
            (update_color (color_of other))
        )
    )
)

(do
    (rule
        (vars (this))
        (filter)
        (apply
            (insert 0 top_left source)
            (update_color F)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color A)
        )
    )
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color C)
        )
    )
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color F)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color (color_of this))
        )
    )
    (rule
        (vars (this))
        (filter
            (not (color_equals (color_of this) X))
        )
        (apply
            (update_color F)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter (not (color_equals (color_of this) X)))
        (apply
            (update_color (color_of other))
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (not (color_equals (color_of this) X))
        )
        (apply
            (update_color (color_of other))
        )
    )
)

(do
    (rule
        (vars (this))
        (filter (not (color_equals (color_of this) X)))
        (apply
            (update_color F)
        )
    )
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color A)
        )
    )
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color C)
        )
    )
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color W)
        )
    )
)

(do
    (rule
        (vars (this) )
        (filter)
        (apply
            (update_color F)
        )
    )
    (rule
        (vars (this other) )
        (filter
            (and
                (color_equals (color_of this) O)
                ( neighbor_of this other )
            )
        )
        (apply
            (update_color F)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color F)
        )
    )
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color A)
        )
    )
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color C)
        )
    )
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color W)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter (not (color_equals (color_of this) X)))
        (apply
            (update_color F)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter (size_equals (size_of this) 1))
        (apply
            (update_color A)
        )
    )
    (rule
        (vars (this))
        (filter)
        (apply
            (fill_rectangle (color_of this) false)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color F)
        )
    )
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color A)
        )
    )
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color C)
        )
    )
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color W)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color F)
        )
    )
    (rule
        (vars (this other))
        (filter
            (color_equals (color_of this) B)
        )
        (apply
            (update_color F)
        )
    )
    (rule
        (vars (this other))
        (filter
            (color_equals (color_of this) R)
        )
        (apply
            (update_color A)
        )
    )
    (rule
        (vars (this other))
        (filter
            (color_equals (color_of this) G)
        )
        (apply
            (update_color C)
        )
    )
    (rule
        (vars (this other))
        (filter
            (color_equals (color_of this) Y)
        )
        (apply
            (update_color W)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (not (color_equals (color_of this) X))
        )
        (apply
            (update_color F)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) F)
        )
        (apply
            (update_color A)
            (extend_node up true)
            (extend_node down true)
            (extend_node left true)
            (extend_node right true)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color F)
        )
    )
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color A)
        )
    )
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color F)
        )
    )
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color R)
        )
    )
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color C)
        )
    )
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color F)
        )
    )
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color B)
        )
    )
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color F)
        )
    )
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color F)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter (color_equals (color_of this) O))
        (apply (update_color F))
    )
    (rule
        (vars (this other))
        (filter (color_equals (color_of this) R))
        (apply (update_color C))
    )
    (rule
        (vars (this other))
        (filter (color_equals (color_of this) G))
        (apply (update_color F))
    )
    (rule
        (vars (this other))
        (filter (color_equals (color_of this) B))
        (apply (update_color A))
    )
    (rule
        (vars (this other))
        (filter (color_equals (color_of this) Y))
        (apply (update_color W))
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (and
                (column_equals (column_of this) even)
                (column_equals (column_of other) odd)
            )
        )
        (apply
            (update_color (color_of other))
        )
    )
)

(do
    (rule
        (vars (this))
        (filter (color_equals (color_of this) B))
        (apply (update_color F))
    )
    (rule
        (vars (this))
        (filter (color_equals (color_of this) R))
        (apply (update_color A))
    )
    (rule
        (vars (this))
        (filter (color_equals (color_of this) G))
        (apply (update_color C))
    )
    (rule
        (vars (this))
        (filter (color_equals (color_of this) Y))
        (apply (update_color W))
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (and
                (not (color_equals (color_of this) X))
                (not (neighbor_of this other))
            )
        )
        (apply
            (update_color A)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color F)
        )
    )
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color W)
        )
    )
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color A)
        )
    )
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color C)
        )
    )
)

(do
    (rule
         (vars (this other))
         (filter
             (not (color_equals (color_of this) X))
         )
         (apply
             (update_color F)
         )
    )
    (rule
         (vars (this other))
         (filter
             (size_equals (size_of this) 1)
         )
         (apply
             (update_color A)
             (update_color C)
             (update_color W)
         )
    )
)

(do
    (rule
        (vars (this other))
        (filter (column_equals (column_of this) (column_of other)))
        (apply
            (update_color F)
        )
    )
    (rule
        (vars (this))
        (filter (color_equals (color_of this) R))
        (apply (update_color A))
    )
    (rule
        (vars (this))
        (filter (color_equals (color_of this) G))
        (apply (update_color C))
    )
    (rule
        (vars (this))
        (filter (color_equals (color_of this) B))
        (apply (update_color F))
    )
    (rule
        (vars (this))
        (filter (color_equals (color_of this) Y))
        (apply (update_color W))
    )
)

(do
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color F)
        )
    )
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color A)
        )
    )
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color C)
        )
    )
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color F)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (column_equals (column_of this) 0)
        )
        (apply
            (update_color F)
        )
    )
    (rule
        (vars (this))
        (filter
            (column_equals (column_of this) 2)
        )
        (apply
            (update_color F)
        )
    )
    (rule
        (vars (this))
        (filter
            (column_equals (column_of this) 1)
        )
        (apply
            (update_color F)
        )
    )
    (rule
        (vars (this))
        (filter
            (column_equals (column_of this) 3)
        )
        (apply
            (update_color A)
        )
    )
    (rule
        (vars (this))
        (filter
            (column_equals (column_of this) 4)
        )
        (apply
            (update_color A)
        )
    )
    (rule
        (vars (this))
        (filter
            (column_equals (column_of this) 5)
        )
        (apply
            (update_color A)
        )
    )
    (rule
        (vars (this))
        (filter
            (column_equals (column_of this) 6)
        )
        (apply
            (update_color A)
        )
    )
    (rule
        (vars (this))
        (filter
            (column_equals (column_of this) 7)
        )
        (apply
            (update_color C)
        )
    )
    (rule
        (vars (this))
        (filter
            (column_equals (column_of this) 8)
        )
        (apply
            (update_color C)
        )
    )
    (rule
        (vars (this))
        (filter
            (column_equals (column_of this) 9)
        )
        (apply
            (update_color C)
        )
    )
    (rule
        (vars (this))
        (filter
            (column_equals (column_of this) 10)
        )
        (apply
            (update_color F)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (neighbor_of this this)
        )
        (apply
            (fill_rectangle F false)
            (fill_rectangle A false)
            (fill_rectangle F false)
            (fill_rectangle C false)
            (fill_rectangle F false)
            (fill_rectangle W false)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter (color_equals (color_of this) B))
        (apply (update_color F))
    )
    (rule
        (vars (this))
        (filter (color_equals (color_of this) R))
        (apply (update_color A))
    )
    (rule
        (vars (this))
        (filter (color_equals (color_of this) G))
        (apply (update_color C))
    )
    (rule
        (vars (this))
        (filter (color_equals (color_of this) Y))
        (apply (update_color W))
    )
)

(do
    (rule
        (vars (this))
        (filter
            (or
                (column_equals (column_of this) 1)
                (column_equals (column_of this) 3)
            )
        )
        (apply
            (update_color F)
        )
    )
    (rule
        (vars (this))
        (filter
            (or
                (column_equals (column_of this) 5)
                (column_equals (column_of this) 7)
            )
        )
        (apply
            (update_color A)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (not (color_equals (color_of this) X))
        )
        (apply
            (fill_rectangle (color_of this) false)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color F)
        )
    )
    (rule
        (vars (this other))
        (filter
            (and
                (neighbor_of this other)
                (color_equals (color_of other) X)
            )
        )
        (apply
            (update_color A)
            (extend_node right false)
        )
    )
    (rule
        (vars (this))
        (filter
            (and
                (color_equals (color_of this) R)
                (size_equals (size_of this) 1)
            )
        )
        (apply
            (update_color C)
            (extend_node left false)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) B)
        )
        (apply
            (update_color W)
            (extend_node down false)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) G)
        )
        (apply
            (update_color F)
            (extend_node up false)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter)
        (apply
            (update_color F)
            (update_color A)
            (update_color C)
            (update_color W)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (not (color_equals (color_of this) X))
        )
        (apply
            (update_color F)
        )
    )
    (rule
        (vars (this other))
        (filter
            (and
                (neighbor_of this other)
                (color_equals (color_of other) F)
            )
        )
        (apply
            (update_color A)
        )
    )
    (rule
        (vars (this other))
        (filter
            (and
                (neighbor_of this other)
                (color_equals (color_of other) A)
            )
        )
        (apply
            (update_color C)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (not (color_equals (color_of this) X))
        )
        (apply
            (update_color (color_of other))
        )
    )
)

(do (rule (vars (this)) (filter (not (color_equals (color_of this) X))) (apply (update_color F))) (rule (vars (this)) (filter (not (color_equals (color_of this) X))) (apply (update_color A))) (rule (vars (this)) (filter (not (color_equals (color_of this) X))) (apply (update_color F))))

(do
    (rule
        (vars (this))
        (filter
            (not (color_equals (color_of this) X))
        )
        (apply
            (insert 1 top_left source)
            (insert 1 top source)
            (insert 1 top_right source)
            (insert 1 left source)
            (insert 1 right source)
            (insert 1 bottom_left source)
            (insert 1 bottom source)
            (insert 1 bottom_right source)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter (not (color_equals (color_of this) X)))
        (apply
            (insert 1 top_left source)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (neighbor_of this other)
        )
        (apply
            (fill_rectangle F false)
        )
    )
    (rule
        (vars (this other))
        (filter
            (and
                (neighbor_of this other)
                (color_equals (color_of other) F)
            )
        )
        (apply
            (fill_rectangle A false)
        )
    )
    (rule
        (vars (this other))
        (filter
            (and
                (neighbor_of this other)
                (color_equals (color_of other) A)
            )
        )
        (apply
            (fill_rectangle W false)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (and
                (not (color_equals (color_of this) X))
                (neighbor_of this other)
            )
        )
        (apply
            (update_color (color_of other))
        )
    )
)

(do
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color (color_of this))
        )
    )
)

(do
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color F)
        )
    )
    (rule
        (vars (this other))
        (filter
            (and
                (color_equals (color_of this) X)
                (neighbor_of this other)
            )
        )
        (apply
            (fill_rectangle A false)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (not (color_equals (color_of this) X))
        )
        (apply
            (update_color (color_of this))
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (not (color_equals (color_of this) X))
        )
        (apply
            (update_color (color_of this))
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (neighbor_of this other)
        )
        (apply
            (update_color F)
        )
    )
    (rule
        (vars (this other))
        (filter
            (and
                (color_equals (color_of this) F)
                (and
                    (neighbor_of this other)
                    (color_equals (color_of other) X)
                )
            )
        )
        (apply
            (extend_node right false)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (not (color_equals (color_of this) X))
        )
        (apply
            (update_color B)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter)
        (apply
            (update_color (color_of other))
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) O)
        )
        (apply
            (update_color F)
        )
    )
    (rule
        (vars (this other))
        (filter
            (and
                (color_equals (color_of this) F)
                (neighbor_of this other)
            )
        )
        (apply
            (update_color C)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (not (color_equals (color_of this) X))
        )
        (apply
            (update_color (color_of other))
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (size_equals (size_of this) 1)
        )
        (apply
            (update_color A)
        )
    )
    (rule
        (vars (this))
        (filter
            (size_equals (size_of this) 2)
        )
        (apply
            (update_color C)
        )
    )
    (rule
        (vars (this))
        (filter
            (size_equals (size_of this) 3)
        )
        (apply
            (update_color F)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (column_equals (column_of this) (column_of other))
        )
        (apply
            (update_color (color_of other))
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (and
                (not (color_equals (color_of this) X))
                (not (color_equals (color_of this) O))
            )
        )
        (apply
            (extend_node right true)
            (update_color W)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) O)
        )
        (apply
            (update_color F)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) B)
        )
        (apply
            (update_color A)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) G)
        )
        (apply
            (update_color C)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) R))
        (apply
            (update_color F)
          )
        )
)

(do
    (rule
        (vars (this))
        (filter
            (not (color_equals (color_of this) X))
        )
        (apply
            (update_color F)
        )
    )
    (rule
        (vars (this other))
        (filter
            (and
                (not (color_equals (color_of this) X))
                (neighbor_of this other)
            )
        )
        (apply
            (update_color (color_of other))
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (and
                (size_equals (size_of this) 1)
                (not (column_equals (column_of this) 4))
            )
        )
        (apply
            (update_color W)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter (color_equals (color_of this) O))
        (apply (update_color F))
    )
    (rule
        (vars (this other))
        (filter (color_equals (color_of this) B))
        (apply (update_color A))
    )
    (rule
        (vars (this other))
        (filter (color_equals (color_of this) R))
        (apply (update_color C))
    )
    (rule
        (vars (this other))
        (filter (color_equals (color_of this) G))
        (apply (update_color F))
    )
    (rule
        (vars (this other))
        (filter (color_equals (color_of this) Y))
        (apply (update_color W))
    )
)

(do
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color F)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter (color_equals (color_of other) X))
        (apply
            (update_color F)
        )
    )
    (rule
        (vars (this other))
        (filter (color_equals (color_of other) R))
        (apply
            (update_color A)
        )
    )
    (rule
        (vars (this other))
        (filter (color_equals (color_of other) G))
        (apply
            (update_color C)
        )
    )
    (rule
        (vars (this other))
        (filter (color_equals (color_of other) Y))
        (apply
            (update_color W)
        )
    )
    (rule
        (vars (this other))
        (filter (color_equals (color_of other) B))
        (apply
            (update_color F)
        )
    )
    (rule
        (vars (this))
        (filter (color_equals (color_of this) O))
        (apply
            (update_color F)
        )
    )
)