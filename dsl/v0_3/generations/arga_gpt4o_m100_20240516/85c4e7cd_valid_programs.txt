(do
    (rule
        (vars (this))
        (filter (color_equals (color_of this) R))
        (apply (update_color B))
    )
    (rule
        (vars (this))
        (filter (color_equals (color_of this) B))
        (apply (update_color G))
    )
    (rule
        (vars (this))
        (filter (color_equals (color_of this) G))
        (apply (update_color C))
    )
    (rule
        (vars (this))
        (filter (color_equals (color_of this) Y))
        (apply (update_color F))
    )
)

(do
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color C)
        )
    )
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color F)
        )
    )
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color Y)
        )
    )
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color G)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter (and (neighbor_of this other) (shape_equals (shape_of other) enclosed)))
        (apply (update_color (color_of other)))
    )
)

(do
    (rule
        (vars (this))
        (filter (color_equals (color_of this) Y))
        (apply (update_color C))
    )
    (rule
        (vars (this))
        (filter (color_equals (color_of this) R))
        (apply (update_color X))
    )
    (rule
        (vars (this))
        (filter (color_equals (color_of this) B))
        (apply (update_color G))
    )
    (rule
        (vars (this))
        (filter (color_equals (color_of this) G))
        (apply (update_color B))
    )
    (rule
        (vars (this))
        (filter (color_equals (color_of this) C))
        (apply (update_color Y))
    )
    (rule
        (vars (this))
        (filter (color_equals (color_of this) F))
        (apply (update_color R))
    )
    (rule
        (vars (this))
        (filter (color_equals (color_of this) A))
        (apply (update_color G))
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (neighbor_of this other)
        )
        (apply
            (update_color (color_of other))
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (or
                (color_equals (color_of this) X)
                (color_equals (color_of this) G)
            )
        )
        (apply
            (extend_node (direction_of other) false)
        )    
    )
    (rule
        (vars (this))
        (filter)
        (apply
            (add_border C)
        )    
    )
    (rule
        (vars (this other))
        (filter
            (and
                (shape_equals (shape_of this) square)
                (shape_equals (shape_of other) square)
            )
        )
        (apply
            (mirror (mirror_axis_of other))
        )    
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (neighbor_of other this)
        )
        (apply
            (update_color (color_of this))
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (not (color_equals (color_of this) (color_of other)))
        )
        (apply
            (update_color (color_of other))
            (update_color (color_of this))
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter)
        (apply
            (add_border C)
        )
    )
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color X)
        )
    )
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color G)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter (color_equals (color_of this) R))
        (apply
            (update_color Y)
        )
    )
    (rule
        (vars (this))
        (filter (color_equals (color_of this) B))
        (apply
            (update_color G)
        )
    )
    (rule
        (vars (this))
        (filter (color_equals (color_of this) Y))
        (apply
            (update_color B)
        )
    )
    (rule
        (vars (this))
        (filter (color_equals (color_of this) C))
        (apply
            (update_color F)
        )
    )
    (rule
        (vars (this))
        (filter (color_equals (color_of this) A))
        (apply
            (update_color G)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter (size_equals (size_of this) max))
        (apply
            (update_color (color_of this))
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (and
                (not (color_equals (color_of this) (color_of other)))
                (neighbor_of this other)
            )
        )
        (apply
            (update_color (color_of other))
        )
    )
)

(do 
    (rule 
        (vars (this)) 
        (filter)
        (apply
            (add_border C)
        )
    ) 
    (rule 
        (vars (this other)) 
        (filter (and (color_equals (color_of this) R) (neighbor_of this other)))
        (apply
            (update_color R)
        )
    ) 
    (rule 
        (vars (this other)) 
        (filter (and (color_equals (color_of this) Y) (neighbor_of this other)))
        (apply
            (update_color Y)
        )
    ) 
    (rule 
        (vars (this other)) 
        (filter (and (color_equals (color_of this) G) (neighbor_of this other)))
        (apply
            (update_color G)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) R)
        )
        (apply
            (update_color B)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) B)
        )
        (apply
            (update_color R)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter)
        (apply
            (mirror (mirror_axis_of this))
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter)
        (apply
            (update_color (color_of other))
            (add_border C)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) R)
        )
        (apply
            (update_color X)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) X)
        )
        (apply
            (update_color G)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) G)
        )
        (apply
            (update_color B)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) B)
        )
        (apply
            (update_color Y)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter)
        (apply
            (add_border (color_of this))
            (update_color (color_of other))
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) R)
        )
        (apply
            (update_color X)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) B)
        )
        (apply
            (update_color G)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) Y)
        )
        (apply
            (update_color C)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (and
                (not (color_equals (color_of this) B))
                (and
                    (neighbor_of this other)
                    (color_equals (color_of other) B)
                )
            )
        )
        (apply
            (move_node (direction_of other))
            (update_color (color_of this))
        )
    )
)

(do
    (rule
        (vars (this))
        (filter (color_equals (color_of this) G))
        (apply (update_color C))
    )
    (rule
        (vars (this))
        (filter (color_equals (color_of this) Y))
        (apply (update_color R))
    )
    (rule
        (vars (this))
        (filter (color_equals (color_of this) R))
        (apply (update_color Y))
    )
    (rule
        (vars (this))
        (filter (color_equals (color_of this) X))
        (apply (update_color G))
    )
)

(do
    (rule
        (vars (this))
        (filter (color_equals (color_of this) R))
        (apply (update_color G))
    )
    (rule
        (vars (this))
        (filter (color_equals (color_of this) B))
        (apply (update_color R))
    )
    (rule
        (vars (this))
        (filter (color_equals (color_of this) G))
        (apply (update_color B))
    )
    (rule
        (vars (this))
        (filter (color_equals (color_of this) Y))
        (apply (update_color C))
    )
    (rule
        (vars (this))
        (filter (color_equals (color_of this) C))
        (apply (update_color Y))
    )
    (rule
        (vars (this))
        (filter (color_equals (color_of this) A))
        (apply (update_color F))
    )
    (rule
        (vars (this))
        (filter (color_equals (color_of this) F))
        (apply (update_color A))
    )
)

(do
    (rule
        (vars (this))
        (filter
            (or (column_equals (column_of this) 0)
                (or (column_equals (column_of this) 11)
                    (or (column_equals (column_of this) 5)
                        (column_equals (column_of this) 7)
                    )
                )
            )
        )
        (apply
            (update_color C)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) R)
        )
        (apply
            (update_color C)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) Y)
        )
        (apply
            (update_color X)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) G)
        )
        (apply
            (update_color R)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (neighbor_of this other)
        )
        (apply
            (update_color (color_of other))
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (neighbor_of this other)
        )
        (apply
            (update_color (color_of other))
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (and
                (color_equals (color_of other) C)
                (neighbor_of this other)
            )
        )
        (apply
            (update_color C)
        )
    )
    (rule
        (vars (this other))
        (filter
            (and
                (not (color_equals (color_of this) C))
                (color_equals (color_of other) C)
            )
        )
        (apply
            (move_node_max (direction_of other))
            (update_color C)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter)
        (apply
            (rotate_node 90)
            (update_color (color_of this))
        )
    )
)

(do
    (rule
        (vars (this))
        (filter)
        (apply
            (add_border C)
        )
    )
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color G)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) X)
        )
        (apply
            (update_color X)
        )
    )
    (rule
        (vars (this other))
        (filter
            (not (color_equals (color_of this) C))
        )
        (apply
            (update_color G)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) B)
        )
        (apply
            (update_color R)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) F)
        )
        (apply
            (update_color R)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) R)
        )
        (apply
            (update_color Y)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) Y)
        )
        (apply
            (update_color C)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter (color_equals (color_of this) Y))
        (apply
            (update_color C)
        )
    )
    (rule
        (vars (this))
        (filter (color_equals (color_of this) R))
        (apply
            (update_color X)
        )
    )
    (rule
        (vars (this))
        (filter (color_equals (color_of this) B))
        (apply
            (update_color G)
        )
    )
    (rule
        (vars (this))
        (filter (color_equals (color_of this) G))
        (apply
            (update_color B)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (neighbor_of this other)
        )
        (apply
            (update_color (color_of other))
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) G)
        )
        (apply
            (update_color C)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) R)
        )
        (apply
            (update_color X)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) B)
        )
        (apply
            (update_color G)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) Y)
        )
        (apply
            (update_color R)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter)
        (apply
            (add_border (color_of this))
            (fill_rectangle (color_of this) true)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter (color_equals (color_of this) Y))
        (apply (update_color F))
    )
    (rule
        (vars (this))
        (filter (color_equals (color_of this) R))
        (apply (update_color X))
    )
    (rule
        (vars (this))
        (filter (color_equals (color_of this) B))
        (apply (update_color G))
    )
    (rule
        (vars (this))
        (filter (color_equals (color_of this) G))
        (apply (update_color B))
    )
    (rule
        (vars (this))
        (filter (color_equals (color_of this) X))
        (apply (update_color R))
    )
    (rule
        (vars (this))
        (filter (color_equals (color_of this) C))
        (apply (update_color Y))
    )
)

(do
    (rule
        (vars (this))
        (filter
            (shape_equals (shape_of this) enclosed)
        )
        (apply
            (update_color C)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) R)
        )
        (apply
            (update_color Y)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) B)
        )
        (apply
            (update_color R)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) Y)
        )
        (apply
            (update_color R)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) R)
        )
        (apply
            (update_color X)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) Y)
        )
        (apply
            (update_color C)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) B)
        )
        (apply
            (update_color R)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) G)
        )
        (apply
            (update_color B)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) C)
        )
        (apply
            (update_color Y)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) Y)
        )
        (apply
            (update_color C)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) R)
        )
        (apply
            (update_color X)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) B)
        )
        (apply
            (update_color G)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) G)
        )
        (apply
            (update_color B)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) X)
        )
        (apply
            (update_color R)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) A)
        )
        (apply
            (update_color Y)
        )
    )
)


(do
    (rule
        (vars (this other))
        (filter
            (and
                (not (size_equals (size_of this) min))
                (neighbor_of this other)
            )
        )
        (apply
            (update_color (color_of other))
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (color_equals (color_of this) R)
        )
        (apply
            (add_border C)
            (hollow_rectangle X)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color C)
        )
    )
    (rule
        (vars (this))
        (filter
            (size_equals (size_of this) 1)
        )
        (apply
            (move_node (direction_of other))
        )
    )
)

(do
    (rule
        (vars (this))
        (filter (color_equals (color_of this) R))
        (apply (update_color X))
    )
    (rule
        (vars (this))
        (filter (color_equals (color_of this) B))
        (apply (update_color G))
    )
    (rule
        (vars (this))
        (filter (color_equals (color_of this) Y))
        (apply (update_color C))
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (neighbor_of this other)
        )
        (apply
            (update_color (color_of other))
        )
    )
)

(do
    (rule
        (vars (this))
        (filter (color_equals (color_of this) B))
        (apply (update_color G))
    )
    (rule
        (vars (this))
        (filter (color_equals (color_of this) G))
        (apply (update_color B))
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (not (color_equals (color_of this) (color_of other)))
        )
        (apply
            (update_color (color_of other))
        )
    )
)

(do
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color X)
        )
    )
    (rule
        (vars (this))
        (filter)
        (apply
            (add_border C)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) X)
        )
        (apply
            (update_color C)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) R)
        )
        (apply
            (update_color B)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter)
        (apply
            (add_border C)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) Y)
        )
        (apply
            (update_color R)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) R)
        )
        (apply
            (update_color F)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) F)
        )
        (apply
            (update_color Y)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter)
        (apply
            (add_border F)
            (hollow_rectangle G)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter)
        (apply
            (add_border (color_of this))
            (update_color C)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (size_equals (size_of this) 12)
        )
        (apply
            (rotate_node 180)
            (update_color C)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color C)
        )
    )
    (rule
        (vars (this))
        (filter
            (and
                (color_equals (color_of this) R)
                (size_equals (size_of this) 24)
            )
        )
        (apply
            (update_color B)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) Y)
        )
        (apply
            (update_color R)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) B)
        )
        (apply
            (update_color Y)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (neighbor_of this other)
        )
        (apply
            (update_color (color_of other))
        )
    )
)

(do (rule (vars (this)) (filter (color_equals (color_of this) Y)) (apply (update_color C))) (rule (vars (this)) (filter (color_equals (color_of this) R)) (apply (update_color X))) (rule (vars (this)) (filter (color_equals (color_of this) B)) (apply (update_color G))) (rule (vars (this)) (filter (color_equals (color_of this) G)) (apply (update_color B))) (rule (vars (this)) (filter (color_equals (color_of this) F)) (apply (update_color R))) (rule (vars (this)) (filter (color_equals (color_of this) C)) (apply (update_color Y))) (rule (vars (this)) (filter (color_equals (color_of this) A)) (apply (update_color B))))

(do
    (rule
        (vars (this))
        (filter (or (color_equals (color_of this) Y) (color_equals (color_of this) R)))
        (apply (update_color G))
    )
    (rule
        (vars (this other))
        (filter (color_equals (color_of this) B))
        (apply (update_color B) (move_node_max (direction_of other)))
    )
)

(do
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color C)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) R)
        )
        (apply
            (update_color X)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) B)
        )
        (apply
            (update_color G)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) G)
        )
        (apply
            (update_color R)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) Y)
        )
        (apply
            (update_color B)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter)
        (apply
            (move_node (direction_of other))
            (update_color X)
        )
    )
    (rule
        (vars (this other))
        (filter
            (color_equals (color_of other) R)
        )
        (apply
            (update_color X)
        )
    )
    (rule
        (vars (this))
        (filter
            (and
                (not (color_equals (color_of this) X))
                (not (color_equals (color_of this) B))
            )
        )
        (apply
            (update_color C)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (neighbor_of this other)
        )
        (apply
            (update_color X)
        )
    )
    (rule
        (vars (this other))
        (filter
            (neighbor_of this other)
        )
        (apply
            (update_color G)
        )
    )
    (rule
        (vars (this other))
        (filter
            (neighbor_of this other)
        )
        (apply
            (update_color F)
        )
    )
    (rule
        (vars (this other))
        (filter
            (neighbor_of this other)
        )
        (apply
            (update_color R)
        )
    )
    (rule
        (vars (this other))
        (filter
            (neighbor_of this other)
        )
        (apply
            (update_color Y)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter (shape_equals (shape_of this) enclosed))
        (apply (add_border C) (move_node up) (update_color (color_of this)))
    )
)

(do
    (rule
        (vars (this))
        (filter (and (column_equals (column_of this) even) (not (color_equals (color_of this) O))))
        (apply 
            (update_color C)
        )
    )
    (rule
        (vars (this))
        (filter (column_equals (column_of this) odd))
        (apply 
            (update_color X)
        )
    )
    (rule
        (vars (this))
        (filter (size_equals (size_of this) even))
        (apply 
            (update_color G)
        )
    )
    (rule
        (vars (this))
        (filter (and (size_equals (size_of this) odd) (not (color_equals (color_of this) O))))
        (apply 
            (update_color B)
        )
    )
    (rule
        (vars (this))
        (filter (and (color_equals (color_of this) O) (not (neighbor_of this other))))
        (apply 
            (update_color Y)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter (color_equals (color_of this) Y))
        (apply (update_color C))
    )
    (rule
        (vars (this other))
        (filter (color_equals (color_of this) R))
        (apply (update_color X))
    )
    (rule
        (vars (this other))
        (filter (color_equals (color_of this) B))
        (apply (update_color G))
    )
    (rule
        (vars (this other))
        (filter (color_equals (color_of this) G))
        (apply (update_color B))
    )
    (rule
        (vars (this other))
        (filter (color_equals (color_of this) X))
        (apply (update_color R))
    )
    (rule
        (vars (this other))
        (filter (color_equals (color_of this) C))
        (apply (update_color Y))
    )
    (rule
        (vars (this other))
        (filter (color_equals (color_of this) A))
        (apply (update_color G))
    )
    (rule
        (vars (this other))
        (filter (color_equals (color_of this) F))
        (apply (update_color B))
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (and
                (neighbor_of this other)
                (color_equals (color_of this) (color_of other))
            )
        )
        (apply
            (update_color (color_of other))
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (and
                (neighbor_of this other)
                (size_equals (size_of other) max)
            )
        )
        (apply
            (move_node (direction_of other))
            (update_color (color_of other))
        )
    )
)

(do
    (rule
        (vars (this))
        (filter (and (color_equals (color_of this) Y) (shape_equals (shape_of this) enclosed)))
        (apply (update_color C))
    )
    (rule
        (vars (this))
        (filter (color_equals (color_of this) R))
        (apply (update_color X))
    )
    (rule
        (vars (this))
        (filter (color_equals (color_of this) X))
        (apply (update_color B))
    )
    (rule
        (vars (this))
        (filter (color_equals (color_of this) B))
        (apply (update_color G))
    )
    (rule
        (vars (this))
        (filter (color_equals (color_of this) G))
        (apply (update_color R))
    )
    (rule
        (vars (this))
        (filter (color_equals (color_of this) A))
        (apply (update_color Y))
    )
    (rule
        (vars (this))
        (filter (color_equals (color_of this) F))
        (apply (update_color B))
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (color_equals (color_of this) R)
        )
        (apply
            (update_color X)
        )
    )
    (rule
        (vars (this other))
        (filter
            (color_equals (color_of this) B)
        )
        (apply
            (update_color G)
        )
    )
    (rule
        (vars (this other))
        (filter
            (color_equals (color_of this) G)
        )
        (apply
            (update_color B)
        )
    )
    (rule
        (vars (this other))
        (filter
            (color_equals (color_of this) Y)
        )
        (apply
            (update_color R)
        )
    )
    (rule
        (vars (this other))
        (filter
            (color_equals (color_of this) B)
        )
        (apply
            (update_color F)
        )
    )
    (rule
        (vars (this other))
        (filter
            (color_equals (color_of this) F)
        )
        (apply
            (update_color R)
        )
    )
    (rule
        (vars (this other))
        (filter
            (color_equals (color_of this) X)
        )
        (apply
            (update_color B)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color (color_of other))
        )
    )
    (rule
        (vars (this))
        (filter)
        (apply
            (add_border G)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (or
                (and
                    (color_equals (color_of this) R)
                    (color_equals (color_of other) Y)
                )
                (and
                    (color_equals (color_of this) Y)
                    (color_equals (color_of other) R)
                )
            )
        )
        (apply
            (update_color C)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) B)
        )
        (apply
            (update_color X)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (neighbor_of this other)
        )
        (apply
            (update_color (color_of other))
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) Y)
        )
        (apply
            (update_color C)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) R)
        )
        (apply
            (update_color X)
        )
    )
    (rule
        (vars (this other))
        (filter
            (and
                (neighbor_of this other)
                (color_equals (color_of other) R)
            )
        )
        (apply
            (update_color R)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) R)
        )
        (apply
            (update_color X)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) B)
        )
        (apply
            (update_color G)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) G)
        )
        (apply
            (update_color B)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) Y)
        )
        (apply
            (update_color C)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) C)
        )
        (apply
            (update_color Y)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) A)
        )
        (apply
            (update_color B)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) F)
        )
        (apply
            (update_color B)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) B)
        )
        (apply
            (update_color F)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter (color_equals (color_of this) Y))
        (apply
            (update_color C)
        )
    )
    (rule
        (vars (this))
        (filter (color_equals (color_of this) C))
        (apply
            (update_color X)
        )
    )
    (rule
        (vars (this))
        (filter (color_equals (color_of this) B))
        (apply
            (update_color G)
        )
    )
    (rule
        (vars (this))
        (filter (color_equals (color_of this) G))
        (apply
            (update_color B)
        )
    )
    (rule
        (vars (this))
        (filter (color_equals (color_of this) X))
        (apply
            (update_color R)
        )
    )
    (rule
        (vars (this))
        (filter (color_equals (color_of this) R))
        (apply
            (update_color Y)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color C)
        )
    )
    (rule
        (vars (this other))
        (filter (and (neighbor_of this other) (color_equals (color_of other) R)))
        (apply
            (update_color X)
        )
    )
    (rule
        (vars (this other))
        (filter (and (neighbor_of this other) (color_equals (color_of other) B)))
        (apply
            (update_color G)
        )
    )
    (rule
        (vars (this other))
        (filter (and (neighbor_of this other) (color_equals (color_of other) G)))
        (apply
            (update_color B)
        )
    )
    (rule
        (vars (this other))
        (filter (and (neighbor_of this other) (color_equals (color_of other) Y)))
        (apply
            (update_color R)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) R)
        )
        (apply
            (update_color B)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) B)
        )
        (apply
            (update_color G)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) G)
        )
        (apply
            (update_color R)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color (color_of other))
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) Y)
        )
        (apply
            (update_color C)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) R)
        )
        (apply
            (update_color X)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) B)
        )
        (apply
            (update_color G)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) G)
        )
        (apply
            (update_color B)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) Y)
        )
        (apply
            (update_color C)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) R)
        )
        (apply
            (update_color X)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) B)
        )
        (apply
            (update_color G)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) G)
        )
        (apply
            (update_color B)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) F)
        )
        (apply
            (update_color R)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
        )
        (apply
            (add_border C)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) R)
        )
        (apply
            (update_color X)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) B)
        )
        (apply
            (update_color G)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) G)
        )
        (apply
            (update_color B)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) F)
        )
        (apply
            (update_color R)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) R)
        )
        (apply
            (update_color Y)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (neighbor_of this other)
        )
        (apply
            (update_color (color_of other))
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (neighbor_of this other)
        )
        (apply
            (update_color (color_of other))
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter (neighbor_of this other))
        (apply
            (update_color (color_of other))
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (degree_equals (degree_of this) min)
        )
        (apply
            (update_color C)
        )
    )
    (rule
        (vars (this))
        (filter
            (size_equals (size_of this) max)
        )
        (apply
            (update_color R)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter)
        (apply
            (add_border C)
            (update_color X)
        )
    )
    (rule
        (vars (this))
        (filter (color_equals (color_of this) B))
        (apply
            (update_color F)
        )
    )
    (rule
        (vars (this))
        (filter (color_equals (color_of this) Y))
        (apply
            (update_color R)
        )
    )
    (rule
        (vars (this))
        (filter (color_equals (color_of this) R))
        (apply
            (update_color Y)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (and
                (neighbor_of this other)
                (color_equals (color_of other) R)
            )
        )
        (apply
            (update_color Y)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter)
        (apply
            (add_border Y)
            (update_color C)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter)
        (apply
            (add_border C)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) X))
        (apply
            (update_color R)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) R))
        (apply
            (update_color B)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) B))
        (apply
            (update_color G)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) G))
        (apply
            (update_color Y)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (neighbor_of this other)
        )
        (apply
            (update_color (color_of other))
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (and
                (or
                    (color_equals (color_of this) Y)
                    (color_equals (color_of this) R)
                )
                (or
                    (color_equals (color_of this) B)
                    (color_equals (color_of this) X)
                )
            )
        )
        (apply
            (update_color G)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) G)
        )
        (apply
            (update_color Y)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) B)
        )
        (apply
            (update_color G)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) R)
        )
        (apply
            (update_color B)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) Y)
        )
        (apply
            (update_color C)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) X)
        )
        (apply
            (update_color R)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (and
                (neighbor_of this other)
                (color_equals (color_of this) Y)
            )
        )
        (apply
            (update_color C)
        )    
    )
    (rule
        (vars (this other))
        (filter
            (and
                (neighbor_of this other)
                (color_equals (color_of this) R)
            )
        )
        (apply
            (update_color X)
        )    
    )
    (rule
        (vars (this other))
        (filter
            (and
                (neighbor_of this other)
                (color_equals (color_of this) B)
            )
        )
        (apply
            (update_color G)
        )    
    )
    (rule
        (vars (this other))
        (filter
            (and
                (neighbor_of this other)
                (color_equals (color_of this) G)
            )
        )
        (apply
            (update_color B)
        )    
    )
    (rule
        (vars (this other))
        (filter
            (and
                (neighbor_of this other)
                (color_equals (color_of this) A)
            )
        )
        (apply
            (update_color F)
        )    
    )
)

(do
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color Y)
        )
    )
    (rule
        (vars (this))
        (filter)
        (apply
            (move_node_max up)
            (move_node_max down)
            (move_node_max left)
            (move_node_max right)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color Y)
        )
    )
    (rule
        (vars (this other))
        (filter
            (and
                (size_equals (size_of this) max)
                (neighbor_of this other)
            )
        )
        (apply
            (update_color R)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter (color_equals (color_of this) Y))
        (apply
            (update_color C)
        )
    )
    (rule
        (vars (this))
        (filter (color_equals (color_of this) R))
        (apply
            (update_color X)
        )
    )
    (rule
        (vars (this))
        (filter (color_equals (color_of this) B))
        (apply
            (update_color G)
        )
    )
    (rule
        (vars (this))
        (filter (color_equals (color_of this) G))
        (apply
            (update_color B)
        )
    )
    (rule
        (vars (this))
        (filter (color_equals (color_of this) C))
        (apply
            (update_color R)
        )
    )
    (rule
        (vars (this))
        (filter (color_equals (color_of this) F))
        (apply
            (update_color Y)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter (neighbor_of this other))
        (apply
            (update_color (color_of other))
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (shape_equals (shape_of this) square)
        )
        (apply
            (add_border C)
        )
    )
    (rule
        (vars (this other))
        (filter
            (and
                (size_equals (size_of this) 2)
                (size_equals (size_of other) max)
            )
        )
        (apply
            (update_color (color_of other))
        )
    )
    (rule
        (vars (this other))
        (filter
            (and
                (size_equals (size_of this) max)
                (size_equals (size_of other) 2)
            )
        )
        (apply
            (update_color (color_of other))
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) Y)
        )
        (apply
            (update_color C)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) R)
        )
        (apply
            (update_color X)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) B)
        )
        (apply
            (update_color G)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) G)
        )
        (apply
            (update_color B)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) C)
        )
        (apply
            (update_color R)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) F)
        )
        (apply
            (update_color Y)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter (neighbor_of this other))
        (apply (move_node_max (direction_of other)) (update_color (color_of other)))
    )
)

(do
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) Y)
        )
        (apply
            (update_color C)
        )
    )
    (rule
        (vars (this other))
        (filter
            (color_equals (color_of this) R)
        )
        (apply
            (update_color X)
        )
    )
    (rule
        (vars (this other))
        (filter
            (color_equals (color_of this) B)
        )
        (apply
            (update_color G)
        )
    )
    (rule
        (vars (this other))
        (filter
            (color_equals (color_of this) G)
        )
        (apply
            (update_color B)
        )
    )
    (rule
        (vars (this other))
        (filter
            (color_equals (color_of this) X)
        )
        (apply
            (update_color R)
        )
    )
    (rule
        (vars (this other))
        (filter
            (color_equals (color_of this) A)
        )
        (apply
            (update_color Y)
        )
    )
    (rule
        (vars (this other))
        (filter
            (color_equals (color_of this) F)
        )
        (apply
            (update_color R)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) R)
        )
        (apply
            (update_color X)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) Y)
        )
        (apply
            (update_color R)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) B)
        )
        (apply
            (update_color G)
        )
    )
    (rule
        (vars (this))
        (filter)
        (apply
            (add_border C)
        )
    )
)

(do 
    (rule
        (vars (this))
        (filter)
        (apply
            (add_border C)
        )
    )
    (rule
        (vars (this))
        (filter (color_equals (color_of this) R))
        (apply
            (update_color G)
        )
    )
    (rule
        (vars (this))
        (filter (color_equals (color_of this) Y))
        (apply
            (update_color C)
        )
    )
    (rule
        (vars (this))
        (filter (color_equals (color_of this) B))
        (apply
            (update_color Y)
        )
    )
    (rule
        (vars (this))
        (filter (color_equals (color_of this) G))
        (apply
            (update_color B)
        )
    )
    (rule
        (vars (this))
        (filter (color_equals (color_of this) F))
        (apply
            (update_color R)
        )
    )
    (rule
        (vars (this))
        (filter (color_equals (color_of this) C))
        (apply
            (update_color F)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (or
                (color_equals (color_of this) Y)
                (color_equals (color_of this) R)
            )
        )
        (apply
            (update_color C)
        )
    )
    (rule
        (vars (this))
        (filter
            (and
                (color_equals (color_of this) B)
                (neighbor_of this other)
            )
        )
        (apply
            (update_color X)
        )
    )
    (rule
        (vars (this other))
        (filter
            (color_equals (color_of other) X)
        )
        (apply
            (update_color (color_of other))
        )
    )
)

(do
    (rule
        (vars (this))
        (filter)
        (apply
            (move_node up)
        )
    )
    (rule
        (vars (this other))
        (filter
            (and
                (not (color_equals (color_of this) Y))
                (neighbor_of this other)
            )
        )
        (apply
            (update_color (color_of other))
        )
    )
)

(do
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color C)
        )
    )
    (rule
        (vars (this))
        (filter
            (or
                (color_equals (color_of this) R)
                (color_equals (color_of this) Y)
            )
        )
        (apply
            (update_color X)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) B)
        )
        (apply
            (update_color G)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) G)
        )
        (apply
            (update_color B)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) F)
        )
        (apply
            (update_color R)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color (color_of this))
        )
    )
)

(do
  (rule
    (vars (this other))
    (filter (color_equals (color_of this) Y))
    (apply (update_color (color_of other))))
  (rule
    (vars (this other))
    (filter (color_equals (color_of other) Y))
    (apply (update_color Y)
  )
))

(do
    (rule
        (vars (this other))
        (filter
            (and
                (not (color_equals (color_of this) Y))
                (and
                    (neighbor_of this other)
                    (color_equals (color_of other) Y)
                )
            )
        )
        (apply
            (update_color Y)
        )
    )
    (rule
        (vars (this))
        (filter
            (and
                (color_equals (color_of this) Y)
                (not (neighbor_of this this))
            )
        )
        (apply
            (update_color X)
        )
    )
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color C)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (and
                (neighbor_of this other)
                (not (color_equals (color_of this) (color_of other)))
            )
        )
        (apply
            (update_color (color_of other))
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (neighbor_of this other)
        )
        (apply
            (update_color (color_of other))
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (neighbor_of this other)
        )
        (apply
            (update_color (color_of other))
        )
    )
)