{
    "completions": [
        {
            "nl_description": "Recolor all the objects of height 5 with a pattern of alternating colors.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (height_equals (height_of this) 5)\n        )\n        (apply\n            (update_color B)\n            (update_color Y)\n            (update_color R)\n            (update_color Y)\n            (update_color B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the border of all objects with a gradient of colors B and Y, and the interior with color R.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (add_border B)\n            (add_border Y)\n            (hollow_rectangle R)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor objects of color X in the following pattern: corners to B, edges to Y, and center to R.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) X)\n                (or\n                    (and\n                        (not (neighbor_of this this))\n                        (or\n                            (column_equals (column_of this) 0)\n                            (or\n                                (column_equals (column_of this) 9)\n                                (or\n                                    (neighbor_of this other)\n                                    (color_equals (color_of other) O)\n                                )\n                            )\n                        )\n                    )\n                    (column_equals (column_of this) 5)\n                )\n            )\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) X)\n                (and\n                    (or\n                        (column_equals (column_of this) 0)\n                        (column_equals (column_of this) 9)\n                    )\n                    (neighbor_of this other)\n                )\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) X)\n                (and\n                    (column_equals (column_of this) 5)\n                    (neighbor_of this other)\n                )\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor objects of color X with size 4 to follow a pattern with colors B, Y, and R",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) X)\n                (size_equals (size_of this) 4)\n            )\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) X)\n                (size_equals (size_of this) 4)\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (update_color B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the exterior border of the largest object with color B, the interior border with color Y, and fill the innermost part with color R.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) max)\n        )\n        (apply\n            (add_border B)\n            (hollow_rectangle Y)\n            (fill_rectangle R false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all pixels as follows: 'X' to alternate 'B' and 'Y' rows, 'B' to 'Y', and 'Y' to 'R'.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) Y)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor objects touching the edges to alternate B and Y, and recolor internal objects on a set pattern",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) X)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) Y)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Change the color of the edges of the rectangles and fill the interior with different colors.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) X)\n            )\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (neighbor_of this other)\n        )\n        (apply\n            (update_color B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Transform the border of objects of color X to B, with the inner part to be in a checkerboard pattern of Y and R.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) X))\n        (apply\n            (add_border B)\n            (fill_rectangle Y false)\n            (hollow_rectangle R)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor each segment of objects of color X with different colors in a pattern.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (update_color B)\n            (update_color Y)\n            (update_color R)\n            (update_color R)\n            (update_color Y)\n            (update_color B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the edges of all objects to color B, interior plus shape to color Y, and center to color R.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) X))\n        (apply\n            (add_border B)\n            (fill_rectangle Y true)\n            (hollow_rectangle R)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the boundary objects to color B, recolor the four corner objects inside the boundary to color Y, and recolor the rest of the objects inside the boundary to color R or leave unchanged.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (shape_equals (shape_of this) square)\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) O)\n                (size_equals (size_of this) 9)\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) X)\n                (size_equals (size_of this) 4)\n            )\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) X)\n                (size_equals (size_of this) 2)\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor alternating rows and columns of a grid containing objects of color X with colors B, Y, and R.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) X))\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter (and (color_equals (color_of this) B) (column_equals (column_of this) even)))\n        (apply\n            (update_color Y)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter (and (color_equals (color_of this) B) (column_equals (column_of this) odd)))\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter (and (color_equals (color_of this) Y) (column_equals (column_of this) odd)))\n        (apply\n            (update_color B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the outermost objects to colors in a specified pattern.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (neighbor_of this other))\n        (apply\n            (update_color Y)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter (and (color_equals (color_of this) Y) (neighbor_of this other)))\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter (and (color_equals (color_of this) R) (neighbor_of this other)))\n        (apply\n            (update_color B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor objects colored X to a specific pattern.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) R)\n            )\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) Y)\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor each row of blocks alternating between B, Y and R, starting with B at the boundaries, Y as the second color, then R, and repeating in each row.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (height_equals (height_of this) 1))\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter (neighbor_of this other))\n        (apply\n            (update_color (color_of other))\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of this) B)\n            )\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of this) Y)\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects of color X.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the color X objects in a specific 4x4 pattern from top-left B, top-right and bottom-left Y, and the center R.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) X))\n        (apply\n            (update_color B)\n            (update_color Y)\n            (update_color R)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the boundary cells of the large 'X' objects, using a pattern of alternating 'B' and 'Y' for corner cells, and 'Y' and 'R' for the sides.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (add_border B)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) B)\n                (or\n                    (color_equals (color_of other) X)\n                    (color_equals (color_of other) X)\n                )\n            )\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) Y)\n                (or\n                    (color_equals (color_of other) B)\n                    (color_equals (color_of other) X)\n                )\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the border and fill the interior of all objects of color X with two different colors.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) X))\n        (apply\n            (add_border B)\n            (hollow_rectangle Y)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) X))\n        (apply\n            (fill_rectangle R false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the borders of all objects to color B, their centers to color R, and their adjacent cells to color Y.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (add_border B)\n            (extend_node up_left false)\n            (update_color Y)\n            (extend_node down_right false)\n            (update_color Y)\n            (move_node down_right)\n            (move_node down_right)\n            (move_node down_right)\n            (move_node down_right)\n            (update_color R)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects of color X into a checkerboard pattern with colors B, Y, and R.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) Y)\n                (column_equals (column_of this) even)\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) Y)\n                (column_equals (column_of this) odd)\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (size_equals (size_of this) min)\n            )\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) B)\n                (size_equals (size_of this) min)\n            )\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the border of the objects to color B, their interior to color Y, and the interior of their neighboring objects to color R.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (add_border B)\n            (hollow_rectangle Y)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (neighbor_of this other)\n        )\n        (apply\n            (hollow_rectangle R)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the edges of each object to B and the inner parts alternately to Y and R.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (add_border B)\n            (fill_rectangle Y false)\n            (fill_rectangle R false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the border of all objects to color B, recolor the inner cells of the border to color Y, and the rest inner cells of the objects to color R.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (add_border B)\n            (mirror (mirror_axis_of this))\n            (fill_rectangle Y false)\n            (hollow_rectangle R)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects of size 5 as follows: corners to color B, edges to color Y, and center to color R.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and (size_equals (size_of this) 5) (color_equals (color_of this) X))\n        )\n        (apply (update_color B))\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and (size_equals (size_of this) 4) (color_equals (color_of this) X))\n        )\n        (apply (update_color Y))\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and (size_equals (size_of this) 1) (color_equals (color_of this) X))\n        )\n        (apply (update_color R))\n    )\n)"
        },
        {
            "nl_description": "Recolor all the objects of color X based on their relative positions: objects at the corners to B, at the edges to Y, and at the center to R.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (update_color B)\n            (update_color Y)\n            (update_color R)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects of color X in a checkerboard pattern with colors B, Y and R.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) B)\n                (or\n                    (and (column_equals (column_of this) odd) (size_equals (size_of this) even))\n                    (and (column_equals (column_of this) even) (size_equals (size_of this) even))\n                )\n            )\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) B)\n                (or\n                    (and (column_equals (column_of this) even) (size_equals (size_of this) odd))\n                    (and (column_equals (column_of this) odd) (size_equals (size_of this) odd))\n                )\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n)"
        },
        {
            "nl_description": "Color the border of all maximum size objects with color B, color all other objects with color Y if they are even-sized and R if they are odd-sized.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) max)\n        )\n        (apply\n            (add_border B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) even)\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) odd)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n)"
        },
        {
            "nl_description": "Fill the interior and exterior of solid rectangles with alternating colors",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (shape_equals (shape_of this) square))\n        (apply\n            (hollow_rectangle R)\n            (fill_rectangle Y false)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter (shape_equals (shape_of this) enclosed))\n        (apply\n            (add_border B)\n            (hollow_rectangle Y)\n        )\n    )\n)"
        },
        {
            "nl_description": "Change the colors of individual sub-components of the maximum-sized object according to the following pattern: red regions become yellow, enclosed regions become red, bordered regions become blue.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter (height_equals (height_of this) 2))\n        (apply\n            (update_color Y)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter (height_equals (height_of this) 1))\n        (apply\n            (update_color B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all the squares of color X into a specific pattern.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) Y)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the boundary of all objects of color X to color B, their interior to color Y, and add a border of color R.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (add_border R)\n            (update_color Y)\n            (fill_rectangle B false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Change the color of the border objects to B, inner square objects to Y, and the center objects to R.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (not (color_equals (color_of this) O))\n                (not (color_equals (color_of this) X))\n            )\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) Y)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) Y)\n                )\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) X)\n                (color_equals (color_of other) R)\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the border cells of objects of color X to color B, the adjacent cells to color Y, the next inner cells to color R, and the central cells (if any) to color Y.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (add_border B)\n            (hollow_rectangle Y)\n            (fill_rectangle R false)\n            (hollow_rectangle Y)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor objects of color X to form a pattern with colors B, Y, and R.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter (color_equals (color_of this) X))\n        (apply\n            (update_color B)\n            (update_color Y)\n            (update_color R)\n            (update_color Y)\n            (update_color R)\n            (update_color Y)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the borders of objects of color X in color B, and recolor the interior of the objects in a checkerboard pattern of colors Y and R.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (add_border B)\n            (fill_rectangle Y false)\n            (fill_rectangle R false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the top and bottom edges of the largest rectangles to B and interior to Y, except the central cells which should be colored R.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) Y)\n                (height_equals (height_of this) max)\n            )\n        )\n        (apply\n            (add_border B)\n            (hollow_rectangle Y)\n            (extend_node down false)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) Y)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) Y)\n                )\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the border objects first, and then recolor the inner objects separately for two different shapes.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (shape_equals (shape_of this) enclosed)\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (shape_equals (shape_of this) square)\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (not (color_equals (color_of this) B))\n                (not (color_equals (color_of this) Y))\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor rows to create a pattern with colors B, Y, R. Rows starting from the first row with objects switch colors in the order: B, Y, R, Y, B.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) even)\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) odd)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) Y)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the corners, edges, and interior objects of the object with color 'X' with different colors.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) X)\n                (shape_equals (shape_of this) enclosed)\n            )\n        )\n        (apply\n            (add_border B)\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) even)\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) Y)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the borders of all objects to B, the corners to B, the left and right edges to Y, and the top and bottom edges to Y. Set the interiors to R, except for objects of size 2.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (add_border B)\n            (update_color B)\n            (move_node down)\n            (move_node up)\n            (flip vertical)\n            (flip horizontal)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (or\n                (color_equals (color_of this) O)\n                (color_equals (color_of this) F)\n            )\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the corners of the objects of color X to color B, the adjacent pixels to the corners to color Y, and the center pixels to color R.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) X)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) X)\n                (not (neighbor_of this other))\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects on the left half to form a pattern, with a center of red, and yellow and blue on the edges.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color B)\n            (update_color Y)\n            (update_color R)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the exterior border of the X objects to B and the interior grid to Y for non-corner cells and R for corner cells.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (add_border B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) X)\n                (not (neighbor_of this this))\n            )\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) X)\n                (or\n                    (neighbor_of this this)\n                    (neighbor_of this this)\n                )\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all X objects: the outer boundary to B, the middle boundary to Y, and the innermost cells to R.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (add_border B)\n            (rotate_node 90)\n            (rotate_node 90)\n            (rotate_node 90)\n            (rotate_node 90)\n            (add_border Y)\n            (rotate_node 90)\n            (rotate_node 90)\n            (rotate_node 90)\n            (rotate_node 90)\n            (add_border R)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the surfaces of the 'X' objects with three alternating colors in the order: B, Y, R.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (update_color B)\n            (move_node right)\n            (update_color Y)\n            (move_node right)\n            (update_color R)\n            (move_node right)\n            (update_color B)\n            (move_node right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor boundaries of objects of color X to color B, corners to Y, and remaining cells to color R.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (add_border B)\n            (hollow_rectangle Y)\n            (fill_rectangle R false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the corners of each object with color B, the sides with color Y, and the center with color R.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (add_border B)\n            (fill_rectangle Y false)\n            (hollow_rectangle R)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects of color X with a checkerboard pattern of colors in the sequence B, Y, R.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (update_color B)\n            (update_color Y)\n            (update_color R)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the edges of the object of color X using the sequence: B, Y, Y, B, and the interior with R.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (add_border B)\n            (update_color Y)\n            (update_color Y)\n            (update_color B)\n            (update_color R)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the top and bottom rows to B and the second top and bottom rows to R, and alternate Y and B from the second top bottom rows inward.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (or (column_equals (column_of this) 1) (column_equals (column_of this) 10))\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (or (column_equals (column_of this) 2) (column_equals (column_of this) 9))\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (or (column_equals (column_of this) 3) (column_equals (column_of this) 8))\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (or (column_equals (column_of this) 4) (column_equals (column_of this) 7))\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (or (column_equals (column_of this) 5) (column_equals (column_of this) 6))\n        )\n        (apply\n            (update_color B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the squares such that the border becomes B, an internal layer becomes Y, and the innermost layer becomes R. Apply this transformation to each square in the grid.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (shape_equals (shape_of this) square)\n        )\n        (apply\n            (hollow_rectangle B)\n            (fill_rectangle Y false)\n            (fill_rectangle R false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the perimeter of each object of color X to B and the interior to Y, and fill the central part with R.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (add_border B)\n            (fill_rectangle Y true)\n            (hollow_rectangle R)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the border of objects of color X into color B, recolor the second inner border to color Y, and recolor the rest of the object to color R.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (add_border B)\n            (extend_node up false)\n            (add_border Y)\n            (fill_rectangle R false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects of color X to a pattern of B, Y, and R.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (update_color B)\n            (update_color Y)\n            (update_color R)\n        )\n    )\n)"
        },
        {
            "nl_description": "Update the colors of the objects as follows: Change 'X' to 'R' if it is surrounded by 'X' horizontally and vertically. Change 'X' to 'Y' if it is surrounded by 'X' horizontally. Change 'X' to 'B' otherwise.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) X)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) X)\n                )\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) X)\n                (not\n                    (neighbor_of this other)\n                )\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) B)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the top border of the object of color X to B, the next to it to Y, and the rest to R.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) X))\n        (apply\n            (add_border B)\n            (extend_node down false)\n            (update_color Y)\n            (move_node_max down)\n            (update_color R)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the border of each object with color B, the inner pixels adjacent to the border with color Y, and the rest with color R.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (add_border B)\n            (extend_node (direction_of this) false)\n            (update_color Y)\n            (add_border Y)\n            (update_color R)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects of color X to a different color scheme where corners are Blue (B), edges bordering corners are Yellow (Y), and center is Red (R).",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of other) B)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) Y)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the border of each 'X' object to 'B', the corners to 'Y', and the inner parts to 'R'.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (add_border B)\n            (fill_rectangle R false)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (insert 0 top_left source)\n            (update_color Y)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (insert 0 top_right source)\n            (update_color Y)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (insert 0 bottom_left source)\n            (update_color Y)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (insert 0 bottom_right source)\n            (update_color Y)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the border of object X with color B, the next inner part with color Y, and the core with color R.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (add_border B)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (neighbor_of this other)\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (neighbor_of this other)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the border of all objects of color X with color B, and recolor the rest of the object using a checkerboard pattern with colors Y and R.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (add_border B)\n            (fill_rectangle Y false)\n            (hollow_rectangle R)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the first and last columns of the object of color X to B and the rest of its columns to alternate between Y and R.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (update_color B)\n            (extend_node right false)\n            (update_color Y)\n            (extend_node right false)\n            (update_color R)\n            (extend_node right false)\n            (update_color Y)\n            (extend_node right false)\n            (update_color R)\n            (extend_node right false)\n            (update_color B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the objects of color X to a repeating pattern of B, Y, R, Y, B for each row and column intersection.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) B)\n                (neighbor_of this this)\n            )\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) Y)\n                (neighbor_of this this)\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (neighbor_of this this)\n            )\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n)"
        },
        {
            "nl_description": "Apply a checkered pattern of colors B, Y, and R to objects of color X, forming rectangles.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (update_color B)\n            (update_color Y)\n            (update_color R)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the border of each X-object with B, and the cells that are not on the border with alternating colors Y and R.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (add_border B)\n            (mirror (mirror_axis_of this))\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the interior of the largest rectangles to R. Recolor the border of the largest rectangles using alternating patterns of B and Y.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) max)\n        )\n        (apply\n            (hollow_rectangle R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) max)\n        )\n        (apply\n            (add_border B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (size_equals (size_of this) max)\n                (color_equals (color_of this) B)\n            )\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (size_equals (size_of this) max)\n                (color_equals (color_of this) Y)\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the border of objects of color X to color B and the inner part to different colors based on the position.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (add_border B)\n            (update_color R)\n            (update_color Y)\n        ))\n)"
        },
        {
            "nl_description": "Color the border pixels of all objects of color X with color B, the interior pixels with color R, and the pixels adjacent to the border with color Y.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (add_border B)\n            (hollow_rectangle Y)\n            (fill_rectangle R false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the grid to create a pattern. X's become B, their neighbors become Y or R.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) B)\n            )\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) Y)\n                )\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the borders of all objects to color B, recolor the corners to color Y, and the rest of the interior to color R.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (add_border B)\n            (hollow_rectangle R)\n            (mirror (mirror_axis_of this))\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the corners of all X objects to B, edge cells to Y, and the inner cells to R.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (neighbor_of this this)\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) X)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all border segments of objects to color B, all enclosed segments to color R, and the remaining central segments to color Y.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (add_border B)\n            (hollow_rectangle R)\n            (fill_rectangle Y false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects of color X by alternating colors in the pattern: B, Y, R, R, Y, and B, while maintaining their shape and size.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (update_color B)\n            (update_color Y)\n            (update_color R)\n            (update_color R)\n            (update_color Y)\n            (update_color B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color X one step down, and then recolor them in a pattern of sequences alternating between B, Y, R, Y.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (move_node down)\n            (update_color B)\n            (update_color Y)\n            (update_color R)\n            (update_color Y)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects of color X that are in the same row to alternate between colors B, Y, and R.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) B)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) Y)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n)"
        },
        {
            "nl_description": "For each neighbor pair of objects, if their color is X, change their color to form a pattern of B, Y, R.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and (color_equals (color_of this) X) (neighbor_of this other))\n        )\n        (apply\n            (update_color B)\n            (update_color Y)\n            (update_color R)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects of color X to a checkerboard pattern using the colors Y, R, and B.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (update_color Y)\n            (update_color R)\n            (update_color B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor enclosed objects with a pattern of colors B, Y, R, Y, B in a striped manner.",
            "code": "(do\r\n    (rule\r\n        (vars (this))\r\n        (filter\r\n            (shape_equals (shape_of this) enclosed)\r\n        )\r\n        (apply\r\n            (update_color B)\r\n            (update_color Y)\r\n            (update_color R)\r\n            (update_color Y)\r\n            (update_color B)\r\n        )\r\n    )\r\n)"
        },
        {
            "nl_description": "Fill rectangles with alternating colors Y and R (from top to bottom and left to right), bordered by color B.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter (and (color_equals (color_of this) X) (neighbor_of this other)))\n        (apply\n            (update_color (color_of other))\n        )\n    )\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) X))\n        (apply\n            (update_color B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the border of objects with color X to color B and the interior to color Y for bottom objects and R for central objects.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (width_equals (width_of this) max)\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (width_equals (width_of this) even)\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (width_equals (width_of this) odd)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor objects 'X' into a specified pattern of alternating colors B, Y, and R.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) B)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) Y)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) Y)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects to color Y, with specific patterns based on position in the grid. The corners are B, inner parts are R, and adjacent cells to inner parts are Y.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) X))\n        (apply\n            (update_color Y)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter (neighbor_of this other))\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) Y))\n        (apply\n            (move_node_max up_left)\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) Y))\n        (apply\n            (move_node_max down_right)\n            (update_color B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects of color X with a specific pattern, changing X to B at the corners and Y, R inside.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) Y)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) Y)\n                )\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) Y)\n                (not (color_equals (color_of other) Y))\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor each 4x4 square of color X in a pattern: corners to color B, edges to color Y and inner cells to color R.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) X)\n                (and\n                    (size_equals (size_of this) 16)\n                    (shape_equals (shape_of this) square)\n                )\n            )\n        )\n        (apply\n            (update_color R)\n            (extend_node right false)\n            (extend_node down false)\n            (update_color B)\n            (move_node up_left)\n            (move_node up)\n            (move_node right)\n            (update_color Y)\n            (extend_node down_left false)\n            (rotate_node 180)\n            (extend_node down_left false)\n            (move_node right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor objects of color X to create a checkerboard pattern where 4 cells of the same color group together.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) X)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color B)\n            (update_color Y)\n            (update_color R)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects to colors B, Y, and R, following a specific pattern.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter)\n        (apply\n            (update_color Y)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter (and (neighbor_of this other) (color_equals (color_of this) Y)))\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter (and (neighbor_of this other) (color_equals (color_of other) R)))\n        (apply\n            (update_color Y)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the border of the object with color X to B, the interior border to Y, and the most inner part to R.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (add_border B)\n            (add_border Y)\n            (add_border R)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor objects based on their shape into alternating colors.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (shape_equals (shape_of this) square)\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (not (shape_equals (shape_of this) square))\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of this) B)\n            )\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of this) Y)\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects of color X with a new pattern where the corners are B and the edges are Y or R.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and (color_equals (color_of this) B) (not (neighbor_of this this)))\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and (color_equals (color_of this) Y) (not (neighbor_of this this)))\n        )\n        (apply\n            (update_color R)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the borders of all objects to B and the interior cells of all objects to Y and R.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (hollow_rectangle B)\n            (fill_rectangle Y false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Change the color of objects 'X' to alternate colors in a specific pattern: first row and column have colors B, Y, and R in sequence, second row and column have colors Y and R.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) X))\n        (apply\n            (update_color B)\n            (update_color Y)\n            (update_color R)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the perimeter of objects of color X to B, interior border to Y, and innermost cells to R.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (add_border B)\n            (rotate_node 90)\n            (add_border R)\n            (rotate_node 90)\n            (rotate_node 90)\n            (rotate_node 90)\n            (add_border Y)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the borders and interior of the objects of color X to different colors.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (hollow_rectangle R)\n            (add_border Y)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the edges of the black-colored objects to a sequence of Blue, Yellow and Red colors.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (add_border B)\n            (add_border Y)\n            (add_border R)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor objects of color X with a pattern: boundary to B, edges to Y, and center to R.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) X))\n        (apply\n            (add_border B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) X))\n        (apply\n            (hollow_rectangle Y)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) X))\n        (apply\n            (fill_rectangle R false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects of color X with colors B, Y, and R in a specific pattern.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) B)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color Y)\n            (move_node right)\n            (update_color R)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the border pixels of the X objects to B, and the corner pixels to Y, then recolor the inner pixels to R.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) X))\n        (apply\n            (add_border B)\n            (fill_rectangle Y true)\n            (hollow_rectangle R)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the outer edges of the objects of color X to B, the next inner edges to Y, and the innermost part Y to R.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (add_border B)\n            (hollow_rectangle Y)\n            (update_color R)\n        )\n    )\n)"
        }
    ]
}