{
    "completions": [
        {
            "nl_description": "Extend all objects towards the object of color R (or F), leaving a trail of the same color.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (or\n                (neighbor_of this other)\n                (and\n                    (color_equals (color_of other) R)\n                    (color_equals (color_of other) F)\n                )\n            )\n        )\n        (apply\n            (extend_node (direction_of other) true)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move upward all objects with the same size as the object in the same column as the largest object and recolor them.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (column_equals (column_of this) (column_of other))\n                (size_equals (size_of this) (size_of other))\n            )\n        )\n        (apply\n            (move_node up)\n            (update_color R)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of size 6 one step right, and then recolor them to color R, G, or F.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 6)\n        )\n        (apply\n            (move_node right)\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 5)\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 5)\n        )\n        (apply\n            (update_color F)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of size 3 one step to the right, and then recolor them to the color of the nearest object of color other than 'O'.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (size_equals (size_of this) 3)\n        )\n        (apply\n            (move_node right)\n            (update_color (color_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "For all objects with color R or F, move these objects upward over nearby objects in the grid, and then recolor them to color R in the first two pairs and to color F in the third pair.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (or\n                (color_equals (color_of this) R)\n                (color_equals (color_of this) F)\n            )\n        )\n        (apply\n            (move_node up)\n            (update_color (color_of this))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of size greater than 1 to the right, and recolor them to the color of the neighboring object.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) odd)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (move_node right)\n            (update_color (color_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend all objects in the grid to the color of the neighboring object at the start of the grid without overlapping.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (neighbor_of this other)\n        )\n        (apply\n            (extend_node (direction_of other) false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend all the objects of color different than O toward the top of the grid, and recolor the object interior to the maximum neighboring object color if they are neighbors with it.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) O))\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (extend_node up false)\n            (update_color (color_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color different from B and recolor them to the color of R/F/C, if they are neighbors of it.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) B))\n                (and\n                    (neighbor_of this other)\n                    (or\n                        (color_equals (color_of other) R)\n                        (or\n                            (color_equals (color_of other) F)\n                            (color_equals (color_of other) C)\n                        )\n                    )\n                )\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n            (update_color (color_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects that are neighbors of an object with color R max towards the R, and update their color to R.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) R)\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n            (update_color R)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move the objects neighboring at least one 'R' or 'F' cell down and color them with the color of the neighboring cells.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (or\n                    (color_equals (color_of other) R)\n                    (color_equals (color_of other) F)\n                )\n            )\n        )\n        (apply\n            (move_node down)\n            (update_color (color_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color different from the target color to the closest target color object and then recolor them to match the target color. The target color changes across pairs.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) (color_of other)))\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) R)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) (color_of other)))\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) G)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) (color_of other)))\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) F)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n            (update_color F)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color different than B and size greater than 1 toward the object of color B, and recolor them to the color of the object being moved.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) B))\n                (and\n                    (neighbor_of this other)\n                    (and\n                        (color_equals (color_of other) B)\n                        (size_equals (size_of this) max)\n                    )\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n            (update_color (color_of this))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move the objects adjacent to the shape object to the right till they are no longer adjacent to it. Then, change their color to the color of the shape object.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (shape_equals (shape_of other) enclosed)\n            )\n        )\n        (apply\n            (move_node_max right)\n            (update_color (color_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of size 1 to the right and recolor them to match the neighboring objects they are moving towards.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (move_node right)\n            (update_color (color_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects one step to the right, and then recolor them to color of the object adjacent to the right.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (neighbor_of this other)\n        )\n        (apply\n            (move_node right)\n            (update_color (color_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects to the color of the central object in the grid.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (neighbor_of this other)\n        )\n        (apply\n            (update_color (color_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move the object containing color R (or F in pair 3) one step up, and then recolor all the cells it contains to the color of the initial top-left cell.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node up)\n            (update_color (color_of this))\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) F)\n        )\n        (apply\n            (move_node up)\n            (update_color F)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all outer boundary objects of the input pattern one step to the right and then recolor them to the neighboring color.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n            (update_color R)\n        )\n   )\n)"
        },
        {
            "nl_description": "Move all objects of size 1 towards the object column, then update their color to the object's color.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n            (update_color (color_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects to color of the neighboring object with maximum size and move them towards it.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (neighbor_of this other)\n        )\n        (apply\n            (update_color (color_of other))\n            (move_node_max (direction_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "For all objects that are neighbors to the object of different color R or F, extend them in the direction of the R or F object without overlapping.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (or\n                    (color_equals (color_of other) R)\n                    (color_equals (color_of other) F)\n                )\n            )\n        )\n        (apply\n            (extend_node (direction_of other) false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of size 1 toward the object of color R, and change its color to that of the object R.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) R)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n            (update_color (color_of other))\n        )    \n    )\n)"
        },
        {
            "nl_description": "Move all objects of color different than B towards the object of color B, if they are neighbors of it. Then, recolor them to the color of their new position.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) B))\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) B)\n                )\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n            (update_color (color_of this))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color adjacent to color R to color R, and all objects of color adjacent to color F to color F.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of other) R)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of other) F)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color F)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all 'R' and 'F' to the first row to form a continuous line, and the rest to the last row to form a continuous line, and recolor them all.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node_max up)\n        )    \n    )\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of this) F)\n        )\n        (apply\n            (move_node_max up)\n            (update_color F)\n        )    \n    )\n    (rule\n        (vars (this other))\n        (filter\n            (not (or\n                (color_equals (color_of this) R)\n                (color_equals (color_of this) F)\n            ))\n        )\n        (apply\n            (move_node_max down)\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects neighboring a red object one step to the right, and then recolor them to the color of the neighboring red object.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) R)\n            )\n        )\n        (apply\n            (move_node right)\n            (update_color (color_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of size 1 step down and color in red.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 1)\n        )\n        (apply\n            (move_node up)\n            (update_color R)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects to match the color of the object of color R, if they are neighbors of it.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) R)\n            )\n        )\n        (apply\n            (update_color (color_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Transform the pixels in the central column of each object to a different color, R in the first column and another color in two subsequent columns.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) center)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all the cells surrounding the objects of color different than O with color of the object.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) O))\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color (color_of this))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move rows of size 5 to the rightmost position, except when they intersect with object columns.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 5)\n        )\n        (apply\n            (move_node right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color R or F and their neighboring rows or columns to the edge of the grid and then recolor.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (or\n                (color_equals (color_of this) R)\n                (color_equals (color_of this) F)\n            )\n        )\n        (apply\n            (move_node_max up)\n            (update_color (color_of this))\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the internal parts of the zigzag shapes to the color of the internal part.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of other) R)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color R)\n        )    \n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of other) G)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color R)\n        )    \n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of other) F)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color F)\n        )    \n    )\n)"
        },
        {
            "nl_description": "Move the objects towards the object of a certain color derived from the middle neighbor, and then recolor all objects adjacent.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter (not (color_equals (color_of this) (color_of other))))\n        (apply\n            (move_node (direction_of other))\n            (update_color (color_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of the color R or F to the object's top side, then recolor them to match the object's color.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (or\n                    (color_equals (color_of this) R)\n                    (color_equals (color_of this) F)\n                )\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (move_node up)\n            (update_color (color_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects adjacent to the object of color R or F one step right and recolor them to R or F respectively.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (or\n                    (color_equals (color_of other) R)\n                    (color_equals (color_of other) F)\n                )\n            )\n        )\n        (apply\n            (move_node right)\n            (update_color (color_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects adjacent to black objects one step to the right and then change their color to that of the adjacent black object.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) B)\n            )\n        )\n        (apply\n            (move_node right)\n            (update_color (color_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color different than 'O' to the position of 'O' objects in the same row and recolor them.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter (and (not (color_equals (color_of this) O)) (neighbor_of this other)))\n        (apply\n            (move_node (direction_of other))\n            (update_color (color_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move the objects of size 2 leftward, and then recolor them to the color of the neighboring object",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 2)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (move_node left)\n            (update_color (color_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color different than the maximum size object color, towards the maximum size object, if they are neighbors of it, and set their color to R.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) (color_of other)))\n                (and\n                    (neighbor_of this other)\n                    (size_equals (size_of other) max)\n                )\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n            (update_color R)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects to form a vertical line and then change their color to match the color of the central object.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node right)\n            (move_node right)\n            (move_node right)\n            (move_node down)\n            (move_node down)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color R)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color different than B, if they are neighbors of color B, toward the center, and then recolor them to color that occupies the center.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) B))\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n            (update_color (color_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects with color different from O to the color R (or F) if they are neighbors of an object with color R (or F).",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) O))\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) R)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) O))\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) F)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move the smallest object to the leftmost edge and color it the same as object R's color, and color all G objects to C.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of other) R)\n                (size_equals (size_of this) min)\n            )\n        )\n        (apply\n            (move_node_max left)\n            (update_color (color_of other))\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) G)\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move the topmost row of objects and the leftmost column of objects with any color towards object of specific color, and then recolor them.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (column_equals (column_of this) center)\n                (color_equals (color_of other) R)\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n            (update_color R)\n        )    \n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (column_equals (column_of this) center)\n                (color_equals (color_of other) F)\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n            (update_color F)\n        )    \n    )\n)"
        },
        {
            "nl_description": "Move all objects of color different than B, toward the object of color B, if they are neighbors of it, and recolor the moved objects to the color of the object they moved toward.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) B))\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) B)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n            (update_color (color_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all the objects of size 1 towards the neighbor of maximum size, and recolor them.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n            (update_color (color_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move the objects of size 6 with color O to overlap with the smallest object neighboring it which has color R, and change their color to the one of that neighboring object",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and \n                (size_equals (size_of this) 6)\n                (and \n                    (color_equals (color_of this) O) \n                    (neighbor_of this other)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n            (update_color (color_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects that are neighbors of the R object in the first example to the right and recolor them with the color of the object they're being moved towards.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) R)\n            )\n        )\n        (apply\n            (move_node right)\n            (update_color (color_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of size 5 to replace neighbor object of color R or F, then recolor the moved objects to color R or F respectively.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 5)\n                (or\n                    (neighbor_of this other)\n                    (color_equals (color_of other) R)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 5)\n                (or\n                    (neighbor_of this other)\n                    (color_equals (color_of other) F)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n            (update_color F)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects to the color of center object.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (column_equals (column_of other) center)\n            )\n        )\n        (apply\n            (update_color (color_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all the objects of color different than B towards the objects of color B if they are neighbors, and recolor them with the same color as B.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) B))\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) B)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n            (update_color (color_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all red objects one step up and change their color to red.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node up)\n            (update_color R)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor objects of size 6, 5, 7 and 4, replacing color of every cell in these objects with the color of bottommost cell in next lower object.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 6)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 5)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 7)\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 4)\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all the red colored objects vertically up such that they encounter no other objects.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node_max up)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all the objects of size 1 toward the object R or F, recolor intermediate cells to the object's original colors.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter (and\n                       (size_equals (size_of this) 1)\n                       (color_equals (color_of other) R)\n                ))\n        (apply (move_node_max (direction_of other)))\n    )\n    (rule\n        (vars (this other))\n        (filter (and\n                       (size_equals (size_of this) 1)\n                       (color_equals (color_of other) F)\n                ))\n        (apply (move_node_max (direction_of other)))\n    )\n)"
        },
        {
            "nl_description": "Move all objects of size 1 towards the object of color R (or F or G or C in pairs 2 and 3 respectively) and then recolor them to the color R (or F or G or C in pairs 2 and 3 respectively).",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (or\n                    (color_equals (color_of other) R)\n                    (or\n                        (color_equals (color_of other) F)\n                        (or\n                            (color_equals (color_of other) G)\n                            (color_equals (color_of other) C)\n                        )\n                    )\n                )\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n            (update_color (color_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of size 1 to the border of the object of maximum size, and then recolor them to the color of R.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (and\n                    (neighbor_of this other)\n                    (size_equals (size_of other) max)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n            (update_color (color_of other))\n        )    \n    )\n)"
        },
        {
            "nl_description": "Move all inner objects one step to the right, then recolor them to match the color of the rightmost object in the group.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (neighbor_of this other)\n        )\n        (apply\n            (move_node right)\n            (update_color (color_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all the non-yellow objects towards the north and repaint them yellow.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) W))\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (move_node_max up)\n            (update_color W)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all R objects to the topmost row without overlapping, then change their color to the adjacent horizontal object's color.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node_max up)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color (color_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects that are neighbors to the object of different color in their row",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (and\n                    (not (color_equals (color_of this) (color_of other)))\n                    (column_equals (column_of this) (column_of other))\n                )\n            )\n        )\n        (apply\n            (update_color (color_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects towards the red object if they are neighbors and then recolor the objects to match the color of the red object.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) R)\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n            (update_color (color_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects adjacent to the red cell to new position toward the red cell and change their color to red.",
            "code": "(do (rule (vars (this other)) (filter (and (neighbor_of this other) (color_equals (color_of other) R))) (apply (move_node (direction_of other)) (update_color R))))"
        },
        {
            "nl_description": "Move all objects of size 1 to the nearest border cell and change their color to the color of the object in the same cell.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n            (update_color (color_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move the object with color R or F to the top row and recolor it to R or F respectively.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (or\n                (color_equals (color_of this) R)\n                (color_equals (color_of this) F)\n            )\n        )\n        (apply\n            (move_node up)\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend the largest object in the grid in all directions and recolor its boundary with the color of the overlapped object.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) max)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (extend_node up true)\n            (extend_node down true)\n            (extend_node left true)\n            (extend_node right true)\n            (add_border (color_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects that are neighbors of a red object to color R.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) R)\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the top row of the objects of color B to R.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (neighbor_of this other)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects with at least one neighbor R towards the object R and change their color to R.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) R) \n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n            (update_color R)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of size 6 one step right, and then recolor them to color R.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 6)\n        )\n        (apply\n            (move_node right)\n            (update_color R)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move the red objects to the nearest neighbor position, and recolor them to the same color as the neighbor. The red object center within and around it remains unchanged.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n            (update_color (color_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all horizontal objects one step to the right, and then color each of them entirely with the first color found in each row.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (width_equals (width_of this) max)\n        )\n        (apply\n            (move_node right)\n            (update_color (color_of this))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects with color different from O to the row or column of the object R if they are neighbors of it, then recolor them to R or G respectively.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (neighbor_of this other)\n        )\n        (apply\n            (move_node_max (direction_of other))\n            (update_color (color_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects that share a column with a red-colored object to color R, and those that share a column with a green-colored object to color G, and those that share a column with an orange-colored object to color F.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) R)\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) G)\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) F)\n            )\n        )\n        (apply\n            (update_color F)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move the middle objects one step up and recolor them the same as the neighboring diagonally up-right, if exists.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (neighbor_of this other)\n        )\n        (apply\n            (move_node up)\n            (update_color (color_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend all objects of size 1 in the direction of the red object while overlapping.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) R)\n                )\n            )\n        )\n        (apply\n            (extend_node (direction_of other) true)\n        )    \n    )\n)"
        },
        {
            "nl_description": "Extend the red colored objects to the left with color R, green colored objects to right with color G and cyan colored objects to right with color C, without overlapping.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (extend_node left false)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) G)\n        )\n        (apply\n            (extend_node right false)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) C)\n        )\n        (apply\n            (extend_node right false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor to R or F all objects that are neighbors of the object of color R or F.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (or\n                    (color_equals (color_of other) R)\n                    (color_equals (color_of other) F)\n                )\n            )\n        )\n        (apply\n            (update_color (color_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend all objects to color R, moving toward another specific applied color until full coverage",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color R)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects in the third row to the rightmost column, and then recolor them to color R for the first pair, move the objects to the third row and recolor them to color G in the second pair.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 6)\n        )\n        (apply\n            (move_node right)\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 1)\n        )\n        (apply\n            (move_node right)\n            (update_color G)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color different than B, toward the object of color B if they are neighbors of it, and recolor them to the same color as the object of color B.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) B))\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) B)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n            (update_color (color_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of size 1 towards the object of color R, if they are neighbors of it, and then recolor the object R to color G.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) R)\n                )\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of size 1 and color them R.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 1)\n        )\n        (apply\n            (move_node up)\n            (update_color R)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the row of objects that include the object of a different color to color of the different object",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter (and (neighbor_of this other) (not (color_equals (color_of this) (color_of other)))))\n        (apply (update_color (color_of other)))\n    )\n)"
        },
        {
            "nl_description": "Move all objects of size 1 to the top-left of the grid, and then recolor them to the color at position (5, 1) in the grid.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (size_equals (size_of this) 1)\n        )\n        (apply\n            (move_node up_left)\n            (update_color (color_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all red-colored objects one step up, then move all green-colored objects to the rightmost column and update their color to G, then move all fuchsia-colored objects down to the bottommost row and update their color to F.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node up)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) G)\n        )\n        (apply\n            (move_node_max right)\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) F)\n        )\n        (apply\n            (move_node_max down)\n            (update_color F)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move the row of objects that contain the red color towards the top, and then update its color to match the target row.",
            "code": "(do (rule (vars (this other)) (filter (and (size_equals (size_of this) max) (neighbor_of this other) )) (apply (move_node_max up) (update_color (color_of other)) )))"
        },
        {
            "nl_description": "Move all rows of objects up such that they align with the top-most object in the column, then recolor all objects in the first row to match the color of the top object in their respective columns.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node_max up)\n            (update_color (color_of this))\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects of size 1 to color R, then recolor all objects of size 3 to color G or F.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 1)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 3)\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 3)\n        )\n        (apply\n            (update_color F)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all red objects to the position of the first blue object without changing the positions of the other blue objects, and then recolor the red objects using their original positions.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (update_color (color_of this))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of size 1 toward one of the objects of color B, then recolor these objects to match the color of B.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n            (update_color (color_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects of size 6 to the color of their neighbor.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 6)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color (color_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects to color of the object at the top left of each grid row.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) O))\n                (column_equals (column_of other) 0)\n            )\n        )\n        (apply\n            (update_color (color_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend all objects towards any existing R, vertically overlapping.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (neighbor_of this other)\n        )\n        (apply\n            (extend_node down true)\n            (extend_node up true)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move the object towards color R and replace R's color to object's color.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of other) R)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n            (update_color (color_of this))\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects of size 5 to the color of the pixel next to the topmost pixel.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 5)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color (color_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of size 1 to the first empty space upwards and recolor them to the color of the object of maximum size.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)              \n                (and\n                    (size_equals (size_of this) 1)\n                    (size_equals (size_of other) max)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of this))\n            (update_color (color_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of size 1 toward the object row by row until they hit another object, then recolor them to the same color as the first object they hit.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node_max left)\n            (update_color (color_of this))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move and recolor all objects of size 5 one step to the right, then update the color to the color of the neighbor if different.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 5)\n        )\n        (apply\n            (move_node right)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (not (color_equals (color_of this) (color_of other)))\n            )\n        )\n        (apply\n            (update_color (color_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of size 1 toward the object of maximum size, and recolor them to color R (or G, or F) if they are neighbors of the object of maximum size.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (and\n                    (neighbor_of this other)\n                    (size_equals (size_of other) max)\n                )\n            )\n        )\n        (apply\n            (extend_node (direction_of other) false)\n            (update_color R)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the row containing the object of color R with color R or if object of color R not present, with color G or F.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) G)\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) F)\n        )\n        (apply\n            (update_color F)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all rows of objects upward until they reach the first row of objects. Recolor the rows of objects to the color of the uppermost row.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (not (color_equals (color_of this) O))\n        )\n        (apply\n            (move_node up)\n            (update_color (color_of this))\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the first row with the color of the object located at (4, 3), and recolor the seventh row with the color of the object located at (8, 5).",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (height_equals (height_of this) 1)\n                (column_equals (column_of this) even)\n            )\n        )\n        (apply\n            (update_color (color_of other))\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (height_equals (height_of this) 1)\n                (column_equals (column_of this) odd)\n            )\n        )\n        (apply\n            (update_color (color_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects that are neighbors of an object in the last row to the color of that object.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (neighbor_of this other)\n        )\n        (apply\n            (update_color (color_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move the R or F colored object to the top row and recolor the space around it to R or F respectively.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (or\n                (color_equals (color_of other) R)\n                (color_equals (color_of other) F)\n            )\n        )\n        (apply\n            (move_node_max up)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (or\n                (color_equals (color_of this) R)\n                (color_equals (color_of this) F)\n            )\n        )\n        (apply \n            (move_node_max left)\n            (move_node_max right)\n        )\n    )\n)"
        }
    ]
}