{
    "completions": [
        {
            "nl_description": "Recolor all vertical chains of red objects to alternate between red and cyan starting from the fifth row.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (and\n                    (neighbor_of this other)\n                    (and\n                        (color_equals (color_of other) R)\n                        (and\n                            (column_equals (column_of this) (column_of other))\n                            (height_equals (height_of other) 1)\n                        )\n                    )\n                )\n            )\n        )\n        (apply\n            (update_color C)\n            (move_node up)\n        )    \n    )\n)"
        },
        {
            "nl_description": "Extend all the red-colored objects until they hit other objects or the grid edge, then recolor them to color C.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (extend_node down false)\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all consecutive R objects in the vertical direction to C starting from the third row, leaving alternating rows.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (shape_equals (shape_of this) enclosed)\n                (column_equals (column_of this) center)\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects of minimum size to color C.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) min)\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor every other row of columns containing color R to color C, starting from the fifth row.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (column_equals (column_of this) odd)\n                (color_equals (color_of this) R)\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects in the leftmost column to C",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (column_equals (column_of this) 2))\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the objects immediately below the red columns to color C.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of other) R)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects that are to the right and adjacent to another object to color C. If there are multiple adjacent objects, only the last set of such adjacent objects will be updated.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (neighbor_of this other)\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor objects in the first column that are neighbors of a red object to color C.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (column_equals (column_of this) 0)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) R)\n                )\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects of color R situated below row 3 to color C, keeping others intact.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (height_equals (height_of this) odd)\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the cells in the first column of the row containing the rightmost cell colored R and all subsequent rows to color C.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (and\n                    (color_equals (color_of other) R)\n                    (column_equals (column_of this) 0)\n                )\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Change the color of red objects that are larger than length 5 to color C.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (size_equals (size_of this) max)\n                (color_equals (color_of this) R)\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Change the color of all objects in the middle column to color C.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) center)\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor objects of color R to color C, beginning from the bottom of the grid upwards.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Change the color of all red objects to cyan, starting from the bottom to the top, one at a time.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Change color of every second R object vertically to C.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (and\n                    (neighbor_of this other)\n                    (and\n                        (color_equals (color_of other) R)\n                        (neighbor_of this other)\n                    )\n                )\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects of color R, that are located in the rightmost third of the grid, to color C.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (column_equals (column_of this) odd)\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor objects along a diagonal to color C",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (shape_equals (shape_of this) enclosed)\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the objects in the last two rows, keeping the color of the right-most object intact.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (or \n                    (column_equals (column_of this) odd)\n                    (column_equals (column_of this) even)\n                )\n                (size_equals (size_of this) 1)\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the objects of color R, located at the last three rows, into color C.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (column_equals (column_of this) odd)\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Change the color of R to C for the bottommost half of any vertical object that is of color R and has more than 4 occurrences.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (height_equals (height_of this) max)\n            )\n        )\n        (apply\n            (move_node down)\n            (move_node down)\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Change the color of the objects in column 1 to C if the object in column 2 is R.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (column_equals (column_of this) 1)\n                (and\n                    (neighbor_of this other)\n                    (and\n                        (column_equals (column_of other) 2)\n                        (color_equals (color_of other) R)\n                    )\n                )\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the objects that intersect with the object at column 2 (treating column indexing as starting from 0) to color C.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (column_equals (column_of other) 2)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the section from the bottommost edge where a column of R intersects with another column of R to color C.",
            "code": "(do \n    (rule \n        (vars (this other)) \n        (filter \n            (and \n                (color_equals (color_of this) R) \n                (and \n                    (neighbor_of this other) \n                    (color_equals (color_of other) R) \n                ) \n            ) \n        ) \n        (apply \n            (update_color C) \n        ) \n    ) \n)"
        },
        {
            "nl_description": "Recolor all vertical chains of objects of color R to color C starting from the second last R in each chain downwards.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (and\n                    (neighbor_of this other)\n                    (and\n                        (color_equals (color_of other) R)\n                        (size_equals (size_of this) 2)\n                    )\n                )\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects of color R to color C, starting from the bottom and moving upwards.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Change all 'R' objects to 'C' starting from the bottom up, only when they are directly adjacent to other 'R' objects or already changed 'C' objects.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (or\n                    (neighbor_of this other)\n                    (and\n                        (neighbor_of this other)\n                        (color_equals (color_of other) C)\n                    )\n                )\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the longest vertical line of objects to color C.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (column_equals (column_of this) (column_of other))\n                (size_equals (size_of other) max)\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor objects of color R located in the bottom half of the grid, column-wise, to color C.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (or\n                    (column_equals (column_of this) 0)\n                    (or\n                        (column_equals (column_of this) 1)\n                        (or\n                            (column_equals (column_of this) 2)\n                            (or\n                                (column_equals (column_of this) 3)\n                                (or\n                                    (column_equals (column_of this) 4)\n                                    (or\n                                        (column_equals (column_of this) 5)\n                                        (or\n                                            (column_equals (column_of this) 6)\n                                            (or\n                                                (column_equals (column_of this) 7)\n                                                (column_equals (column_of this) 8)\n                                            )\n                                        )\n                                    )\n                                )\n                            )\n                        )\n                    )\n                )\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the vertical bands of alternating colors R to C starting from the bottom.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (and (color_equals (color_of this) R) (height_equals (height_of this) 1)))\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color R down, if they are neighbors with another object of color R, then recolor them to color C.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) R)\n                )\n            )\n        )\n        (apply\n            (move_node down)\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the object with odd column to color C.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) odd)\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the middle object in each column to color C starting from the object located at row 6.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (column_equals (column_of this) even)\n                (height_equals (height_of this) 1)\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor vertical sections to C to form a repeating pattern starting from the bottom.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 1)\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects that have color R in alternating columns, starting from the center column, to color C.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (or\n                    (column_equals (column_of this) center)\n                    (column_equals (column_of other) odd)\n                )\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor objects beneath the diagonal to color C",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) R)\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the last segment of objects having color R to color C.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (not (neighbor_of this this))\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the bottom half of the R objects to color C",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (or\n                    (column_equals (column_of this) odd)\n                    (column_equals (column_of this) even)\n                )\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the objects in the input grid column-wise in a zigzag pattern starting from the bottom with color C.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) R)\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color R downward, then recolor them to color C.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node down)\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "All R-colored objects that are neighbors of other R-colored objects: recolor to C down from the second last R object to the end of the column.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) R)\n                )\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the leftmost red object in each row to color C.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor columns of objects with alternating colors R and C starting from the bottom of each column.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects of color R that are neighbors of an object of color R to color C.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) R)\n                )\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Change the color of the leftmost object in rows with multiple objects to color C.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (column_equals (column_of this) odd)\n                (size_equals (size_of this) 9)\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Change the color of all objects of color R that are aligned in a vertical sequence from the middle of the grid downwards to color C.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all R objects in column 2 to C starting from the row where there is an R object and there is no R object above it.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (column_equals (column_of this) 2)\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor objects vertically below each other to color C starting from the row before the last horizontal R, and stop coloring when there are no more horizontal R.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (height_equals (height_of this) max)\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the objects of size 1 and in column 0 to color C, and then the objects of size 1 and in column 2 to color C.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (column_equals (column_of this) 0)\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (column_equals (column_of this) 2)\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the bottom half of vertical red lines to color C.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (neighbor_of this this) ;; filter out red objects with at least one neighbor above (making them part of a vertical line's bottom half)\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Change the color of every second object in the vertical column from bottom to top to color C, starting from the second last row.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of this) R)\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor every second R to C starting from the third row.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (or\n                    (neighbor_of this other)\n                    (not (neighbor_of this other))\n                )\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects of color R, that are neighbors of another object of color R, to color C, keeping their positions unchanged.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) R)\n                )\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color R and then recolor them to color C.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node down)\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor every other column in rows that contain a red object, starting from the last red object.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (size_equals (size_of this) max)\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all red vertical lines such that every alternating cell starting from the bottom is recolored with color C.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (update_color C)\n        )    \n    )\n)"
        },
        {
            "nl_description": "Recolor sections of objects that form vertical lines of size greater than 1 with color C, only starting from the fourth row.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (size_equals (size_of this) 2)\n                (and\n                    (column_equals (column_of this) even)\n                    (and\n                        (height_equals (height_of this) odd)\n                        (and\n                            (width_equals (width_of this) odd)\n                            (and\n                                (degree_equals (degree_of this) odd)\n                                (column_equals (column_of this) even)\n                            )\n                        )\n                    )\n                )\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all odd columns of red objects to cyan.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (column_equals (column_of this) odd)\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the object of color R that are not in the same column and in the bottom half of the grid to color C.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (column_equals (column_of this) center)\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend all red (R) objects down while leaving a trail of new objects and changing their color to cyan (C), without overlapping.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (extend_node down false)\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all red objects to color C in a staggered pattern starting from the bottom row.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (update_color C)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) C)\n                (and\n                    (size_equals (size_of this) 1)\n                    (and\n                        (neighbor_of this other)\n                        (color_equals (color_of other) R)\n                    )\n                )\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the middle node and every other node in the alternating columns from R to C.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (column_equals (column_of this) even) \n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Change the color of all cells in the same row as an R object to C, but only after the midpoint of the row.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of other) R)\n                (and\n                    (neighbor_of this other)\n                    (column_equals (column_of this) (column_of other))\n                )\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor objects of shape 'enclosed' from R to C.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (shape_equals (shape_of this) enclosed)\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects of color R that are neighbors of an object R to color C.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) R)\n                )\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Change the color of every second column in the alternating rows to color C.",
            "code": "(do (rule (vars (this)) (filter (and (column_equals (column_of this) odd) (and (neighbor_of this other) (color_equals (color_of other) R)))) (apply (update_color C))))"
        },
        {
            "nl_description": "Change the color of the objects in every odd row after the first row to color C.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (column_equals (column_of this) odd)\n                (not (column_equals (column_of this) 1))\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor columns of objects that alternate between colors R and C.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (and (column_equals (column_of this) odd) (color_equals (color_of this) R)))\n        (apply (update_color C))\n    )\n)"
        },
        {
            "nl_description": "Change objects from color R to C if they are at the bottom of a column of R objects.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (and\n                    (neighbor_of this other)\n                    (and\n                        (color_equals (color_of other) R)\n                        (column_equals (column_of this) (column_of other))\n                    )\n                )\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor objects of size 1 that are neighbors of objects of color R to color C.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) R)\n                )\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all red objects alternately with color C where the row index is greater than or equal to 5, starting from column 1.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (or\n                    (column_equals (column_of this) even)\n                    (column_equals (column_of this) odd)\n                )\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor columns of R alternating with C and R.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) odd)\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the column objects of color R to color C where another column of R intersects.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (color_equals (color_of other) R)\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor alternate red objects to cyan starting from the bottom.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (or\n                    (neighbor_of this this)\n                    (neighbor_of this this)\n                )\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "In each column, starting from the topmost red cell, change every other (even indexed, 0-based) red cell to color C",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (and\n                    (neighbor_of this other)\n                    (column_equals (column_of this) (column_of other))\n                )\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor one of the repeating objects in each column from row 6 or higher to color C.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (not (column_equals (column_of this) center))\n                (column_equals (column_of this) even)\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Change the color of the bottom half of columns of red objects to color C.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (and\n                    (not (neighbor_of this other))\n                    (color_equals (color_of other) R)\n                )\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the neighbors of the middle row of objects that have the color R to C.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (and\n                    (neighbor_of this other)\n                    (and\n                        (color_equals (color_of other) R)\n                        (column_equals (column_of this) even)\n                    )\n                )\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects of size 7 to color C.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 7)\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the objects of size 1 to color C if they are neighbors of vertical red lines.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) R)\n                )\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the rightmost vertical sequence of R to C.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor objects of shape 'enclosed' to color C",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (shape_equals (shape_of this) enclosed)\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects of color R that are in the bottom half of the grid to color C.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (or\n                    (neighbor_of this this)\n                    (or\n                        (height_equals (height_of this) 3)\n                        (or\n                            (height_equals (height_of this) 4)\n                            (or\n                                (height_equals (height_of this) 5)\n                                (height_equals (height_of this) 6)\n                            )\n                        )\n                    )\n                )\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the tallest vertical red line to color C.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (height_equals (height_of this) max)\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "For each column with size greater than 1, change every cell of color R in row > column until the last cell to color C.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (and\n                    (size_equals (size_of this) odd)\n                    (neighbor_of this this)\n                )\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor objects in column 2 to C starting from row 5.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (column_equals (column_of this) 2)\n                (not (degree_equals (degree_of this) 1))\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Change the color of bottom connected parts of each vertical column from R to C.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (or\n                    (neighbor_of this other)\n                    (color_equals (color_of other) C)\n                )\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Change color to C for edges of all vertical lines of R",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (add_border C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Change the color of the bottommost R nodes to C.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Change the color of every second R object in each diagonal to C.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) R)\n                )\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Change color of all 'R' adjacent to an 'R' below to 'C'.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (and\n                    (neighbor_of this other)\n                    (and\n                        (color_equals (color_of other) R)\n                        (column_equals (column_of this) (column_of other))\n                    )\n                )\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Change the color of the object of color R, which is at the extreme left and vertical column at the bottom, to C. Additionally, change the color of all the neighboring cells above that column to C.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) R)\n                )\n            )\n        )\n        (apply\n            (update_color C)\n        )    \n    )\n)"
        },
        {
            "nl_description": "Recolor all objects of color R in the outermost columns, including their respective columns when adjacent, to color C.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (or\n                    (column_equals (column_of this) 2)\n                    (column_equals (column_of this) 4)\n                )\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects in the center straight line to color C without changing the rest.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (column_equals (column_of this) center)\n                (not (color_equals (color_of this) O))\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Change the color of the neighbors of R objects in the same column to C, starting from the bottom.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of other) R)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the first object of each column that is colored R, starting from the bottom of the grid, to color C.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the rightmost cells of objects of color R to color C",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) O)\n                )\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Change the color of the R objects at the end of each vertical sequence to color C.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (and\n                    (neighbor_of this other)\n                    (and\n                        (not (color_equals (color_of other) R))\n                        (color_equals (color_of other) O)\n                    )\n                )\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor objects in the same column as object R from bottom up starting from object directly above R, with C",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (column_equals (column_of this) (column_of other))\n                (color_equals (color_of other) R)\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Change objects in the same column and same size, but in different rows, to color C from the midpoint to the bottommost occurrence of R.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of other) R)\n                (and\n                    (not (color_equals (color_of this) R))\n                    (column_equals (column_of this) (column_of other))\n                )\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects of size 1 and width even, or height even to color C.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (or\n                (and\n                    (size_equals (size_of this) 1)\n                    (width_equals (width_of this) even)\n                )\n                (height_equals (height_of this) even)\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor objects of size 1 to color C if they are on the left side of an object of color R.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) R)\n                )\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Change the color of the vertical segments in columns 1, 3, 5, and 7 to C from the fourth row onwards.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (column_equals (column_of this) 1)\n                (and\n                    (neighbor_of this other)\n                    (height_equals (height_of other) even)\n                )\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (column_equals (column_of this) 3)\n                (and\n                    (neighbor_of this other)\n                    (height_equals (height_of other) even)\n                )\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (column_equals (column_of this) 5)\n                (and\n                    (neighbor_of this other)\n                    (height_equals (height_of other) even)\n                )\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (column_equals (column_of this) 7)\n                (and\n                    (neighbor_of this other)\n                    (height_equals (height_of other) even)\n                )\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        }
    ]
}