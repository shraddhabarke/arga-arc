{
    "completions": [
        {
            "nl_description": "Recolor all objects that are red in color to green.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor some inner pixels of all red objects to green.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color R one step up, then recolor them to color G.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node up)\n            (update_color G)\n        )\n    )\n)"
        },
        {
            "nl_description": "Replace all R objects with G objects.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the object with color R to G and reduce its size by removing its outer pixels.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (update_color G)\n            (add_border O)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the middle part of the 'R' shaped objects to color G.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (or\n                    (neighbor_of this other)\n                    (and\n                        (color_equals (color_of other) O)\n                        (color_equals (color_of other) O)\n                    )\n                )\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the smallest enclosed object with color G.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (shape_equals (shape_of this) enclosed)\n                (size_equals (size_of this) min)\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)"
        },
        {
            "nl_description": "Replace the central cell of all objects with color G.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (size_equals (size_of this) 5)\n                (column_equals (column_of this) 2)\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)"
        },
        {
            "nl_description": "Remove all objects of color R of size greater than 1",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (not (size_equals (size_of this) 1))\n            )\n        )\n        (apply\n            (update_color O)\n        )\n    )\n)"
        },
        {
            "nl_description": "Remove all objects of color R if they are not connected to other R objects",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (not (neighbor_of this other))\n            )\n        )\n        (apply\n            (update_color O)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects to color G, except for the smallest and the largest objects.",
            "code": "(do\n  (rule\n    (vars (this other))\n    (filter\n      (and\n        (not (size_equals (size_of this) min))\n        (not (size_equals (size_of this) max))\n      )\n    )\n    (apply\n      (update_color G)\n    )\n  )\n)"
        },
        {
            "nl_description": "Recolor the objects made up of internal Rs to G.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (neighbor_of this other)\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects of color R to G",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)"
        },
        {
            "nl_description": "Remove all objects of color R and replace them with color G.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)"
        },
        {
            "nl_description": "Remove all objects of color R and then extend the remaining G objects in both vertical directions until they hit the edge of the grid.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (update_color O)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) G)\n        )\n        (apply\n            (extend_node up false)\n            (extend_node down false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects of color R to G.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the inner parts of enclosed objects to G.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (shape_equals (shape_of this) enclosed)\n        )\n        (apply\n            (hollow_rectangle G)\n        )\n    )\n)"
        },
        {
            "nl_description": "Remove all objects of color R, and then color the positions that they occupied with color G if they were enclosed.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node_max up)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (shape_equals (shape_of this) enclosed)\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)"
        },
        {
            "nl_description": "Remove red-colored cells that are neighbors of another red-colored cell, and repaint the central cells to green.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color O)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)"
        },
        {
            "nl_description": "Remove all objects of color R",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (update_color O)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color R one step to the right, and color them green.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node right)\n            (update_color G)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor objects of color R with size 4 to color G.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (size_equals (size_of this) 4)\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)"
        },
        {
            "nl_description": "Remove all objects of color R.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (update_color O)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all red objects toward the center, if they are not already there, and recolor them to green.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node (direction_of other))\n            (update_color G)\n        )\n    )\n)"
        },
        {
            "nl_description": "Remove all objects of color R and replace the color of their occupied spaces with color G.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (update_color O)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) O)\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)"
        },
        {
            "nl_description": "Remove all enclosed objects and recolor some cells inside remaining objects to color G.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (shape_equals (shape_of this) enclosed)\n        )\n        (apply\n            (move_node (direction_of this))\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color G)\n        )\n    )\n)"
        },
        {
            "nl_description": "Remove all objects of color R.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (update_color O)\n        )\n    )\n)"
        },
        {
            "nl_description": "Remove all objects of color R, and recolor any remaining isolated objects smaller than size 3 to G.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (update_color O)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (not (neighbor_of this other))\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)"
        },
        {
            "nl_description": "Clear red objects in the grid, then place green objects at the original locations of single red objects.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (update_color O)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) O)\n                (and\n                    (color_equals (color_of other) R)\n                    (neighbor_of this other)\n                )\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)"
        },
        {
            "nl_description": "Change the color of all enclosed objects to color G.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (shape_equals (shape_of this) enclosed)\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects of color R to color G in their interior pixels.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (fill_rectangle G false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the central object of color R to color G.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (column_equals (column_of this) center)\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)"
        },
        {
            "nl_description": "Remove all objects of size 3",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 3)\n        )\n        (apply\n            (update_color O)\n        )\n    )\n)"
        },
        {
            "nl_description": "Change the color of the center pixel in each object of color R to G.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)"
        },
        {
            "nl_description": "Remove all objects of color R, then update all 3x3 objects to color G",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (update_color O)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (width_equals (width_of this) 3)\n                (height_equals (height_of this) 3)\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the inner pixels of all objects of size greater than 3 to color G.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (not (size_equals (size_of this) 3))\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color R to the north-east corner of the grid, and then recolor them to color G.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node up_left)\n            (update_color G)\n        )\n    )\n)"
        },
        {
            "nl_description": "Remove all the red objects, except those replaced with green color.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) R))\n        (apply (update_color O))\n    )\n    (rule\n        (vars (this other))\n        (filter (neighbor_of this other))\n        (apply (update_color G))\n    )\n)"
        },
        {
            "nl_description": "Remove all red objects of size 9 from the grid and turn red objects of size 6 into green.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (size_equals (size_of this) 9)\n            )\n        )\n        (apply\n            (update_color O)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (size_equals (size_of this) 6)\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color R to the boundaries of their groups and recolor them to G.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node_max up)\n            (update_color G)\n        )\n    )\n)"
        },
        {
            "nl_description": "Delete all objects of color R and recolor certain objects to color G",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (update_color O)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 1)\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)"
        },
        {
            "nl_description": "Remove all objects of color R, and replace with objects of color G.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)"
        },
        {
            "nl_description": "Change color 'R' in the center of the largest cluster to 'G'",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (neighbor_of this this)\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all the objects of color R to color G",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all the R objects which are not enclosed to color G",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (not (shape_equals (shape_of this) enclosed))\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the center object of color R to color G",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) center)\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color R toward the top edge, and then recolor them to color G.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node_max up)\n            (update_color G)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor objects of size 9 (3x3 with center cell empty) to G, if they are neighbors of other objects of at most size 2.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 9)\n                (and\n                    (neighbor_of this other)\n                    (size_equals (size_of other) max)\n                )\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)"
        },
        {
            "nl_description": "Change the color of the center to G in all cross-shaped objects of color R.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) R)\n                )\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects of color R, changing their color to G.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects of color R to color G, and objects of size 3 and above should have only their outer pixels recolored.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 1)\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 3)\n        )\n        (apply\n            (add_border G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 18)\n        )\n        (apply\n            (add_border G)\n        )\n    )\n)"
        },
        {
            "nl_description": "Change the color of all objects of color R to G, then remove those that are isolated",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) G)\n                (not (neighbor_of this other))\n            )\n        )\n        (apply\n            (update_color O)\n        )\n    )\n)"
        },
        {
            "nl_description": "Remove specific objects from the grid of color 'R' and size corresponding to unconnected clumps of cells.",
            "code": "(do\n    (rule \n        (vars (this)) \n        (filter \n            (neighbor_of this other) \n        ) \n        (apply \n            (update_color O) \n        ) \n    )\n)"
        },
        {
            "nl_description": "Recolor the center cell of all enclosed objects to color G",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (shape_equals (shape_of this) enclosed)\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)"
        },
        {
            "nl_description": "Change the color of the center cell of all 3x3 blocks to green.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (and\n                    (neighbor_of this other)\n                    (size_equals (size_of other) 9)\n                )\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)"
        },
        {
            "nl_description": "Remove objects of color R from the grid.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (update_color O)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the center pixel of all 3x3 objects to color G.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (size_equals (size_of this) 9)\n                (and\n                    (column_equals (column_of this) center)\n                    (and\n                        (color_equals (color_of this) R)\n                        (and\n                            (height_equals (height_of this) 3)\n                            (width_equals (width_of this) 3)\n                        )\n                    )\n                )\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)"
        },
        {
            "nl_description": "Remove all objects of color R in the grid.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (update_color O)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the center cell of each R object to G",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects of size 9 to color G",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 9)\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color R one step up, and recolor the ones of maximum size to color G.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node up)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (size_equals (size_of this) max)\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects of color R to color G",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)"
        },
        {
            "nl_description": "Change the color of the center 'R' objects to 'G'.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (or\n                    (neighbor_of this other)\n                    (color_equals (color_of other) R)\n                )\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)"
        },
        {
            "nl_description": "Remove all objects of color R except for those in column 5.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (not (column_equals (column_of this) 5 ))\n            )\n        )\n        (apply\n            (update_color O)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the interior of all enclosed shapes with color G",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (shape_equals (shape_of this) enclosed)\n        )\n        (apply\n            (hollow_rectangle G)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all red objects down into a vertical line and change their color to green.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node down)\n            (update_color G)\n        )\n    )\n)"
        },
        {
            "nl_description": "Remove some inner parts of the objects of color R, and recolor them to color G.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node up)\n            (move_node left)\n            (update_color G)\n        )\n    )\n)"
        },
        {
            "nl_description": "Remove all objects of color R and swap places with objects of color G if found inside the removed object.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (update_color O)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) G) \n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (move_node_max up)\n        )\n    )\n)"
        },
        {
            "nl_description": "Remove all objects of red color.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (update_color O)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects of color R located at edges to color G.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (or\n                    (neighbor_of this other)\n                    (neighbor_of this other)\n                )\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the center cell to 'G' and all size 3 objects to color 'G'.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 3)\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color G)\n        )\n    )\n)"
        },
        {
            "nl_description": "Remove all objects of color R and replace the cell of their centers with color G.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (update_color O)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) O)\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all U-shaped objects to color G",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and \n                (color_equals (color_of this) R)\n                (or\n                    (and \n                        (neighbor_of this this) \n                        (and \n                            (height_equals (height_of this) 3) \n                            (width_equals (width_of this) 3)\n                        )\n                    )\n                    (and \n                        (height_equals (height_of this) 5)\n                        (width_equals (width_of this) 7)\n                    )\n                )\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor a single object located at column 3 to color G.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 3)\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)"
        },
        {
            "nl_description": "Remove objects of shape enclosed and color R, and change their color to G",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (shape_equals (shape_of this) enclosed)\n                (color_equals (color_of this) R)\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)"
        },
        {
            "nl_description": "Remove all objects of color R.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (update_color O)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all red objects to color green.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)"
        },
        {
            "nl_description": "Change the color of R objects that are squares to color G.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (shape_equals (shape_of this) square)\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the innermost cells of all enclosed regions to color G.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (shape_equals (shape_of this) enclosed)\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)"
        },
        {
            "nl_description": "For all the objects with color G, move them three steps up.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) G)\n        )\n        (apply\n            (move_node up)\n            (move_node up)\n            (move_node up)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color R towards the center of the object, then recolor them to G.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node up)\n            (move_node_max (direction_of other))\n            (update_color G)\n        )\n    )\n)"
        },
        {
            "nl_description": "Remove all objects of color R",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (update_color O)\n        )\n    )\n)"
        },
        {
            "nl_description": "Green color any square object if one or more of its neighboring objects is not Green colored.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (shape_equals (shape_of this) square)\n                (and\n                    (neighbor_of this other)\n                    (not (color_equals (color_of other) G))\n                )\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)"
        },
        {
            "nl_description": "Remove all objects of color R, but keep only one object of color G in their place.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node_max up)\n        )\n    )\n)"
        },
        {
            "nl_description": "Remove all objects of color R.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (update_color O)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all 'R' objects to 'G' that are located at the center of the grid.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (and\n                    (column_equals (column_of this) center)\n                    (not (size_equals (size_of this) 1))\n                )\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)"
        },
        {
            "nl_description": "Change the color to green for the center pixel of objects with a red border.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (size_equals (size_of this) 9)\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)"
        },
        {
            "nl_description": "Remove all objects of color R except for objects of size 1, and recolor remaining objects of color R to G.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (not (size_equals (size_of this) 1))\n            )\n        )\n        (apply\n            (update_color O)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the center cell of square-shaped objects to color G.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (shape_equals (shape_of this) square)\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)"
        },
        {
            "nl_description": "Change all 'R' objects to 'G'",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color R one step to the right, and then recolor them to color G.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node right)\n            (update_color G)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects of color R to color G, intersecting smaller objects in rows or columns alternatingly",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)"
        },
        {
            "nl_description": "Change the color of the center pixel of all objects to color G.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) R)\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)"
        },
        {
            "nl_description": "Update the center pixel of all enclosed objects of size 9 to color G.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (size_equals (size_of this) 9)\n                (shape_equals (shape_of this) enclosed)\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color R toward the object of color different from R, if they are neighbors of it, then recolor them to color G.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (and\n                    (neighbor_of this other)\n                    (not (color_equals (color_of other) R))\n                )\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n            (update_color G)\n        )\n    )\n)"
        },
        {
            "nl_description": "Remove all objects of color R from the grid.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (update_color O)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all the red objects of width 3 to one step up and change their color to green.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (width_equals (width_of this) 3)\n            )\n        )\n        (apply\n            (move_node up)\n            (update_color G)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color R one step to the right, and update their color to G.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node right)\n            (update_color G)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the middle pixel of each red block to green.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (and\n                    (neighbor_of this this)\n                    (size_equals (size_of this) 9)\n                )\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)"
        },
        {
            "nl_description": "Remove all objects of color R, and then update color of objects of size 3 to color G.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (update_color O)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 3)\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)"
        }
    ]
}