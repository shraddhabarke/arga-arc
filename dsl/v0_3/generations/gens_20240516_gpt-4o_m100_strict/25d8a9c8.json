{
    "completions": [
        {
            "nl_description": "Recolor the first row to O, second row to X and third row to X.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (height_equals (height_of this) 1)\n        )\n        (apply\n            (update_color O)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (height_equals (height_of this) 2)\n        )\n        (apply\n            (update_color X)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (height_equals (height_of this) 3)\n        )\n        (apply\n            (update_color X)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all rows to have the first two rows be color O and the last row be color X.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (column_equals (column_of this) even)\n                (column_equals (column_of this) odd)\n            )\n        )\n        (apply\n            (update_color O)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (column_equals (column_of this) even)\n                (column_equals (column_of this) odd)\n            )\n        )\n        (apply\n            (update_color X)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the first row to color X, the second row to color O, and the third row to color X.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (not (color_equals (color_of this) X))\n                (column_equals (column_of this) 0)\n            )\n        )\n        (apply\n            (update_color X)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (not (color_equals (color_of this) O))\n                (column_equals (column_of this) 1)\n            )\n        )\n        (apply\n            (update_color O)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (not (color_equals (color_of this) X))\n                (column_equals (column_of this) 2)\n            )\n        )\n        (apply\n            (update_color X)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the first row to color X, the second row to color O, and the third row to color X.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color X)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) F))\n        (apply\n            (update_color X)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) G))\n        (apply\n            (update_color O)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) Y))\n        (apply\n            (update_color O)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the top half of the grid to color O and the bottom half to color X",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (height_equals (height_of this) 1)\n                (or\n                    (column_equals (column_of this) odd)\n                    (column_equals (column_of this) even)\n                )\n            )\n        )\n        (apply\n            (update_color O)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (height_equals (height_of this) 1)\n                (or\n                    (column_equals (column_of this) odd)\n                    (column_equals (column_of this) even)\n                )\n            )\n        )\n        (apply\n            (update_color X)\n        )\n    )\n)"
        },
        {
            "nl_description": "For each row, change the color of the first object to O and the remaining objects in the row to X.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (column_equals (column_of this) 0)\n        )\n        (apply\n            (update_color O)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (not (column_equals (column_of this) 0))\n        )\n        (apply\n            (update_color X)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the first row to O, the second row to X, and the third row to O or X depending on column.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 0)\n        )\n        (apply\n            (update_color O)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 1)\n        )\n        (apply\n            (update_color X)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 2)\n        )\n        (apply\n            (update_color O)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the top row of each input grid to color X, the second row to color O, and the third row to color X.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 0)\n        )\n        (apply\n            (update_color X)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 1)\n        )\n        (apply\n            (update_color O)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 2)\n        )\n        (apply\n            (update_color X)\n        )\n    )\n)"
        },
        {
            "nl_description": "Transform the colors of all rows to O for the first row, X for the second row, and O for the third row.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 0)\n        )\n        (apply\n            (update_color O)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 1)\n        )\n        (apply\n            (update_color X)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 2)\n        )\n        (apply\n            (update_color O)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the top row to X, the middle row to O, and the bottom row to X.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (column_equals (column_of this) 0))\n        (apply\n            (update_color X)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter (column_equals (column_of this) 1))\n        (apply\n            (update_color O)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter (column_equals (column_of this) 2))\n        (apply\n            (update_color X)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor rows to X in the second row and rows to O in the first row.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 1)\n        )\n        (apply\n            (update_color O)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 2)\n        )\n        (apply\n            (update_color X)\n        )\n    )\n)"
        },
        {
            "nl_description": "Change the color of all objects in the first row to X, second row to O, and third row to X.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 0)\n        )\n        (apply\n            (update_color X)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 1)\n        )\n        (apply\n            (update_color O)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 2)\n        )\n        (apply\n            (update_color X)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor objects in the top two rows to O and in the bottom row to X",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (or\n                (column_equals (column_of this) even)\n                (column_equals (column_of this) odd)\n            )\n        )\n        (apply\n            (update_color O)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (column_equals (column_of this) even)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color X)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the shapes located on the bottom rows with the color X, and all other objects with the color O.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (shape_equals (shape_of this) enclosed)\n        )\n        (apply\n            (update_color X)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (not (color_equals (color_of this) X))\n                (not (shape_equals (shape_of this) enclosed))\n            )\n        )\n        (apply\n            (update_color O)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the first row to X, the second row to O, and the third row to X",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (and (color_equals (color_of this) Y) (column_equals (column_of this) center)))\n        (apply\n            (update_color X)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter (column_equals (column_of this) even))\n        (apply\n            (update_color Y)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter (column_equals (column_of this) odd))\n        (apply\n            (update_color O)\n        )\n    )\n)"
        },
        {
            "nl_description": "Change all colors to X in the bottom row. Change all colors to O in the first and second rows.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 0)\n        )\n        (apply\n            (update_color O)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 1)\n        )\n        (apply\n            (update_color O)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 2)\n        )\n        (apply\n            (update_color X)\n        )\n    )\n)"
        },
        {
            "nl_description": "Change the color of the top row to X, middle row to O, and bottom row to X.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (neighbor_of this other)\n                (and\n                    (color_equals (color_of this) R)\n                    (color_equals (color_of other) G)\n                )\n            )\n        )\n        (apply\n            (update_color X)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 3)\n        )\n        (apply\n            (update_color O)\n        )\n    )\n)"
        },
        {
            "nl_description": "Change the color of the first row to X, the color of the second row to O, and the color of the third row to X.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 0)\n        )\n        (apply\n            (update_color X)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 1)\n        )\n        (apply\n            (update_color O)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 2)\n        )\n        (apply\n            (update_color X)\n        )\n    )\n)"
        },
        {
            "nl_description": "Update color of objects to O if their original color is Y or A, and to X if color is G.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) Y)\n        )\n        (apply\n            (update_color O)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) A)\n        )\n        (apply\n            (update_color O)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) G)\n        )\n        (apply\n            (update_color X)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the top row to X, the middle row to O, and the bottom row to X.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 0)\n        )\n        (apply\n            (update_color X)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 1)\n        )\n        (apply\n            (update_color O)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 2)\n        )\n        (apply\n            (update_color X)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the objects in the first row to color X and the objects in the second row to color O, and then color the row below to color X.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 0)\n        )\n        (apply\n            (update_color X)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 1)\n        )\n        (apply\n            (update_color O)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 2)\n        )\n        (apply\n            (update_color X)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the first row to X, the second row to O, and the third row to X.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (column_equals (column_of this) 0))\n        (apply (update_color X))\n    )\n    (rule\n        (vars (this))\n        (filter (column_equals (column_of this) 1))\n        (apply (update_color O))\n    )\n    (rule\n        (vars (this))\n        (filter (column_equals (column_of this) 2))\n        (apply (update_color X))\n    )\n)"
        },
        {
            "nl_description": "Recolor objects in the top and middle rows to O and bottom row to X.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (or\n                (neighbor_of this other)\n                (neighbor_of other this)\n            )\n        )\n        (apply\n            (update_color O)\n        )\n    )\n\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (neighbor_of this other)\n                (neighbor_of other this)\n            )\n        )\n        (apply\n            (update_color X)\n        )\n    )\n)"
        },
        {
            "nl_description": "Change the color of the first row to 'X', second row to 'O', and third row to 'X'.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter (column_equals (column_of this) 0))\n        (apply\n            (update_color X)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter (column_equals (column_of this) 1))\n        (apply\n            (update_color O)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter (column_equals (column_of this) 2))\n        (apply\n            (update_color X)\n        )\n    )\n)"
        },
        {
            "nl_description": "Change color of the top row to X, second row to O, and third row to X.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (column_equals (column_of this) even))\n        (apply (update_color X))\n    )\n    (rule\n        (vars (this))\n        (filter (column_equals (column_of this) odd))\n        (apply (update_color O))\n    )\n)"
        },
        {
            "nl_description": "Recolor the first row of all grid cells to O, the second row to X, and the third row to O or X depending on the content of the input cell.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (column_equals (column_of this) 0))\n        (apply\n            (update_color O)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter (column_equals (column_of this) 1))\n        (apply\n            (update_color X)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter (column_equals (column_of this) 2))\n        (apply\n            (update_color (color_of this))\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects in the first row to color X and all objects in the second row to color O.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 0)\n        )\n        (apply\n            (update_color X)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 1)\n        )\n        (apply\n            (update_color O)\n        )\n    )\n)"
        },
        {
            "nl_description": "Transform the entire input grid. Change the color of the first row to X, second row to O, and third row to X.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (height_equals (height_of this) 1))\n        (apply\n            (update_color X)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter (height_equals (height_of this) 2))\n        (apply\n            (update_color O)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter (height_equals (height_of this) 3))\n        (apply\n            (update_color X)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all cells in the first row to X, cells in the second row to O, and cells in the third row to X.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 0)\n        )\n        (apply\n            (update_color X)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 1)\n        )\n        (apply\n            (update_color O)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 2)\n        )\n        (apply\n            (update_color X)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects in the first and second rows to color O, and all objects in the third row to color X.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (or\n                (column_equals (column_of this) 0)\n                (column_equals (column_of this) 1)\n            )\n        )\n        (apply\n            (update_color O)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 2)\n        )\n        (apply\n            (update_color X)\n        )\n    )\n)"
        },
        {
            "nl_description": "Set all elements to color O and add a border with color X",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color O)\n            (add_border X)\n        )\n    )\n)"
        },
        {
            "nl_description": "Change the color of the entire grid according to a given pattern: top row to O, middle row to X, and bottom row to O if original color was G or W, otherwise to X.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color O)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (not (color_equals (color_of this) X))\n                (and\n                    (neighbor_of this this)\n                    (color_equals (color_of this) X)\n                )\n            )\n        )\n        (apply\n            (update_color X)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the top row to color X, the middle row to color O, and the bottom row to color X with second grid.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 0)\n        )\n        (apply\n            (update_color X)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 1)\n        )\n        (apply\n            (update_color O)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 2)\n        )\n        (apply\n            (update_color X)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the first row to all O's, the second row to all X's, and the third row to all O's or X's depending on the color.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) Y))\n        (apply (update_color O))\n    )\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) G))\n        (apply (update_color O))\n    )\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) R))\n        (apply (update_color O))\n    )\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) F))\n        (apply (update_color X))\n    )\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) W))\n        (apply (update_color X))\n    )\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) A))\n        (apply (update_color O))\n    )\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) B))\n        (apply (update_color X))\n    )\n)"
        },
        {
            "nl_description": "Recolor all rows to be O for the first, X for the second, and O for the third, alternating.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (column_equals (column_of this) even))\n        (apply\n            (update_color O)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter (column_equals (column_of this) odd))\n        (apply\n            (update_color X)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects in the first row to color X, objects in the second row to color O, and objects in the third row to color X",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 0)\n        )\n        (apply\n            (update_color X)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 1)\n        )\n        (apply\n            (update_color O)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 2)\n        )\n        (apply\n            (update_color X)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all rows where the cells in each row have distinct colors. Recolor them with O for the first row, X for the second row and so on.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color O)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color X)\n        )\n    )\n)"
        },
        {
            "nl_description": "Update the topmost row to color X and the other rows to color O, except the last row which is updated to color X.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (neighbor_of this this)\n        )\n        (apply\n            (update_color X)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (not (neighbor_of this this))\n        )\n        (apply\n            (update_color O)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects in the first row to color X, the objects in the second row to color O, and the objects in the third row to color X.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 1)\n        )\n        (apply\n            (update_color X)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 2)\n        )\n        (apply\n            (update_color O)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 3)\n        )\n        (apply\n            (update_color X)\n        )\n    )\n)"
        },
        {
            "nl_description": "Change the color of objects in the first column to O, and objects in the second and third columns to X.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 0)\n        )\n        (apply\n            (update_color O)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (or\n                (column_equals (column_of this) 1)\n                (column_equals (column_of this) 2)\n            )\n        )\n        (apply\n            (update_color X)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor objects based on their size: objects of size 2 to color O and objects of size 3 to color X.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 2)\n        )\n        (apply\n            (update_color O)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 3)\n        )\n        (apply\n            (update_color X)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the first row to color X, the second row to color O, and the third row to color X",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 0)\n        )\n        (apply\n            (update_color X)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 1)\n        )\n        (apply\n            (update_color O)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 2)\n        )\n        (apply\n            (update_color X)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects in the first row to color X, the second row to color O, and the third row to color X.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 0)\n        )\n        (apply\n            (update_color X)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (not\n                (column_equals (column_of this) 0)\n            )\n        )\n        (apply\n            (update_color O)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 2)\n        )\n        (apply\n            (update_color X)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the first row of each grid to color X, the second row to color O, and the third row to color X.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 1)\n        )\n        (apply\n            (update_color X)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 2)\n        )\n        (apply\n            (update_color O)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 3)\n        )\n        (apply\n            (update_color X)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all rows of columns to O if they are equal. Recolor the last row to X.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (not (column_equals (column_of this) odd)))\n        (apply\n            (update_color O)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter (size_equals (size_of this) max))\n        (apply\n            (update_color X)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects in the first column to O, and all other objects to X",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 0)\n        )\n        (apply\n            (update_color O)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (not (column_equals (column_of this) 0))\n        )\n        (apply\n            (update_color X)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the first row objects to color O, the second row objects to color X, and leave the third row objects unchanged.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 1)\n        )\n        (apply\n            (update_color O)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 2)\n        )\n        (apply\n            (update_color X)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the first row to X, the second row to O, and the third row to X.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (and (height_equals (height_of this) 1) (column_equals (column_of this) even)))\n        (apply\n            (update_color X)\n            (update_color O)\n            (update_color X)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the first row of any grid to X, the second row to O, and the third row to X.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 1)\n        )\n        (apply\n            (update_color X)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 2)\n        )\n        (apply\n            (update_color O)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 3)\n        )\n        (apply\n            (update_color X)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the top row objects to color X, the middle row objects to color O, and the bottom row objects to color X.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (and (column_equals (column_of this) odd) (height_equals (height_of this) min)))\n        (apply (update_color X))\n    )\n    (rule\n        (vars (this))\n        (filter (and (column_equals (column_of this) even) (height_equals (height_of this) min)))\n        (apply (update_color O))\n    )\n)"
        },
        {
            "nl_description": "Change the color of all objects on the first row to X, the second row to O, and the third row to X.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (column_equals (column_of this) 1))\n        (apply\n            (update_color X)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter (column_equals (column_of this) 2))\n        (apply\n            (update_color O)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter (column_equals (column_of this) 3))\n        (apply\n            (update_color X)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all rows based on their index; first row becomes O, second row becomes X.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) even)\n        )\n        (apply\n            (update_color O)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) odd)\n        )\n        (apply\n            (update_color X)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the objects in the first row to O, the objects in the second row to X, and the objects in the third row to X in one transformation step each.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 1)\n        )\n        (apply\n            (update_color O)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 2)\n        )\n        (apply\n            (update_color X)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 3)\n        )\n        (apply\n            (update_color X)\n        )\n    )\n)"
        },
        {
            "nl_description": "Change the color of all rows alternatively into colors (O and X), where the first row is recolored to O and the second row is recolored to X and so on.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (column_equals (column_of this) even))\n        (apply (update_color O))\n    )\n    (rule\n        (vars (this))\n        (filter (column_equals (column_of this) odd))\n        (apply (update_color X))\n    )\n)"
        },
        {
            "nl_description": "Recolor all second column objects to color X and recolor all other objects to color O.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 1)\n        )\n        (apply\n            (update_color X)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (not (column_equals (column_of this) 1))\n        )\n        (apply\n            (update_color O)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects of height 1 to color X and all objects of height greater than 1 to color O.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (height_equals (height_of this) 1)\n        )\n        (apply\n            (update_color X)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (not (height_equals (height_of this) 1))\n        )\n        (apply\n            (update_color O)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the top row to X, the middle row to O, and the bottom row to X.",
            "code": "(do \n    (rule \n        (vars (this)) \n        (filter (column_equals (column_of this) 1)) \n        (apply \n            (update_color X) \n        ) \n    ) \n    (rule \n        (vars (this)) \n        (filter (column_equals (column_of this) 2)) \n        (apply \n            (update_color O) \n        ) \n    ) \n    (rule \n        (vars (this)) \n        (filter (column_equals (column_of this) 3)) \n        (apply \n            (update_color X) \n        ) \n    ) \n)"
        },
        {
            "nl_description": "Recolor all objects of size 3 to X and all objects of size less than 3 to O.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 3)\n        )\n        (apply\n            (update_color X)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (not (size_equals (size_of this) 3))\n        )\n        (apply\n            (update_color O)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the first row to X and the rest to O and X alternately for each pair of rows.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (column_equals (column_of this) 0))\n        (apply (update_color X))\n    )\n    (rule\n        (vars (this))\n        (filter (or (column_equals (column_of this) 1) (column_equals (column_of this) 2)))\n        (apply (update_color O))\n    )\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) O))\n        (apply (update_color X))\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects in the first row to color X, second row to color O, and third row to color X.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 1)\n        )\n        (apply\n            (update_color X)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 2)\n        )\n        (apply\n            (update_color O)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 3)\n        )\n        (apply\n            (update_color X)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor topmost row objects to 'X', the middle row objects to 'O', and bottommost row objects to 'X'.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (neighbor_of this this)\n        )\n        (apply\n            (update_color O)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) O))\n                (and\n                    (neighbor_of this other)\n                    (size_equals (size_of this) 2)\n                )\n            )\n        )\n        (apply\n            (update_color X)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the first row of each grid to all O, second row to all X, and third row to all O, if there is a fourth row, it is recolored to all X.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) even)\n        )\n        (apply\n            (update_color O)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) odd)\n        )\n        (apply\n            (update_color X)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the first row of each grid to X, second row to O, and third row to X.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 0)\n        )\n        (apply\n            (update_color X)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 1)\n        )\n        (apply\n            (update_color O)\n        )\n    )\n        (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 2)\n        )\n        (apply\n            (update_color X)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the first row of objects to color X, the second row of objects to color O, and the third row of objects to color X.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 0)\n        )\n        (apply\n            (update_color X)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 1)\n        )\n        (apply\n            (update_color O)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 2)\n        )\n        (apply\n            (update_color X)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all cells in the first row to color X, and all cells in the second and third rows to color O and X respectively.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 1)\n        )\n        (apply\n            (update_color X)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 2)\n        )\n        (apply\n            (update_color O)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 3)\n        )\n        (apply\n            (update_color X)\n        )\n    )\n)"
        },
        {
            "nl_description": "Color all rows at the end of the grid with X, and the rest of the rows with O.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (column_equals (column_of this) odd))\n        (apply\n            (update_color X)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color O)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor objects based on their color, changing rows of G to O and rows of W or B to X.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) G))\n        (apply (update_color O))\n    )\n    (rule\n        (vars (this))\n        (filter\n            (or (color_equals (color_of this) W) (color_equals (color_of this) B))\n        )\n        (apply (update_color X))\n    )\n)"
        },
        {
            "nl_description": "Change the color of all objects in the top row to X, and the color of all objects in the second and third rows to O and X respectively.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (column_equals (column_of this) 0))\n        (apply\n            (update_color X)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter (column_equals (column_of this) 1))\n        (apply\n            (update_color O)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter (column_equals (column_of this) 2))\n        (apply\n            (update_color X)\n        )\n    )\n)"
        },
        {
            "nl_description": "Change the color of the first row to color X, the second row to color O, and the third row to color X.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 0)\n        )\n        (apply\n            (update_color X)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 1)\n        )\n        (apply\n            (update_color O)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 2)\n        )\n        (apply\n            (update_color X)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the first row to X, the second row to O, and the third row to X.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 0)\n        )\n        (apply\n            (update_color X)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 1)\n        )\n        (apply\n            (update_color O)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 2)\n        )\n        (apply\n            (update_color X)\n        )\n    )\n)"
        },
        {
            "nl_description": "Change all objects in the first row to color 'X', all objects in the second row to color 'O', and all objects in the third row to color 'X'.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (column_equals (column_of this) 0))\n        (apply (update_color X))\n    )\n    (rule\n        (vars (this))\n        (filter (column_equals (column_of this) 1))\n        (apply (update_color O))\n    )\n    (rule\n        (vars (this))\n        (filter (column_equals (column_of this) 2))\n        (apply (update_color X))\n    )\n)"
        },
        {
            "nl_description": "Recolor the top row to X, the middle row to O, and the bottom row to X.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (column_equals (column_of this) 0))\n        (apply (update_color X))\n    )\n    (rule\n        (vars (this))\n        (filter (column_equals (column_of this) 1))\n        (apply (update_color O))\n    )\n    (rule\n        (vars (this))\n        (filter (column_equals (column_of this) 2))\n        (apply (update_color X))\n    )\n)"
        },
        {
            "nl_description": "Change the color of the objects in the top row to X, in the middle row to O, and in the bottom row to X.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 0)\n        )\n        (apply\n            (update_color X)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 1)\n        )\n        (apply\n            (update_color O)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 2)\n        )\n        (apply\n            (update_color X)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the first row of all objects with color X, the second row with color O, and the third row with color X.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (column_equals (column_of this) 1))\n        (apply (update_color X))\n    )\n    (rule\n        (vars (this))\n        (filter (column_equals (column_of this) 2))\n        (apply (update_color O))\n    )\n    (rule\n        (vars (this))\n        (filter (column_equals (column_of this) 3))\n        (apply (update_color X))\n    )\n)"
        },
        {
            "nl_description": "Recolor the top row to X, the middle row to O, and the bottom row to X.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) Y)\n        )\n        (apply\n            (update_color X)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) G)\n        )\n        (apply\n            (update_color O)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) W)\n        )\n        (apply\n            (update_color X)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all rows in the grid. The top row is recolored to X, the second row to O, and the third row to X.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 1)\n        )\n        (apply\n            (update_color X)\n        )\n    )\n    (rule\n          (vars (this))\n          (filter\n                (column_equals (column_of this) 2)\n          )\n          (apply\n                (update_color O)\n          )\n    )\n    (rule\n          (vars (this))\n          (filter\n                (column_equals (column_of this) 3)\n          )\n          (apply\n                (update_color X)\n          )\n    )\n)"
        },
        {
            "nl_description": "Recolor the top row of all objects to color O, the middle row to color X, and the bottom row to color O. Then color the third row to X.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 0)\n        )\n        (apply\n            (update_color O)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 1)\n        )\n        (apply\n            (update_color X)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 2)\n        )\n        (apply\n            (update_color O)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 3)\n        )\n        (apply\n            (update_color X)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the top two rows of the grid. The first row becomes completely black, and the second row becomes completely grey.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (or\n                (and (column_equals (column_of this) even) (neighbor_of this other))\n                (column_equals (column_of this) odd)\n            )\n        )\n        (apply\n            (update_color X)\n            (update_color O)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the first row with O, second row with X, and third row with O if any content in cell is different from previous row.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (column_equals (column_of this) 0)\n        )\n        (apply\n            (move_node down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor row 1 to color O and row 2 to color X.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 1)\n        )\n        (apply\n            (update_color O)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 2)\n        )\n        (apply\n            (update_color X)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor rows based on their original positions: The first row into O's, and the second row into X's.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 0)\n        )\n        (apply\n            (update_color O)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 1)\n        )\n        (apply\n            (update_color X)\n        )\n    )\n)"
        },
        {
            "nl_description": "Transform the objects in the lower half to the color X, and the objects in the upper half to the color O.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (or\n                    (or\n                        (height_equals (height_of this) even)\n                        (height_equals (height_of this) odd)\n                    )\n                    (or\n                        (height_equals (height_of this) min)\n                        (height_equals (height_of this) max)\n                    )\n                )\n                (or\n                    (or\n                        (width_equals (width_of this) even)\n                        (width_equals (width_of this) odd)\n                    )\n                    (or\n                        (width_equals (width_of this) min)\n                        (width_equals (width_of this) max)\n                    )\n                )\n            )\n        )\n        (apply\n            (update_color O)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (or\n                (or\n                    (height_equals (height_of this) even)\n                    (height_equals (height_of this) odd)\n                )\n                (or\n                    (height_equals (height_of this) min)\n                    (height_equals (height_of this) max)\n                )\n            )\n        )\n        (apply\n            (update_color X)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the grid rows based on their position: first row to color O, second row to color X, and the third row to color X.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 1)\n        )\n        (apply\n            (update_color O)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 2)\n        )\n        (apply\n            (update_color X)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor objects of color G, F, W, and B to color X, and objects of color Y, A, and R to color O.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (or\n                (color_equals (color_of this) G)\n                (or\n                    (color_equals (color_of this) F)\n                    (or\n                        (color_equals (color_of this) W)\n                        (color_equals (color_of this) B)\n                    )\n                )\n            )\n        )\n        (apply\n            (update_color X)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (or\n                (color_equals (color_of this) Y)\n                (or\n                    (color_equals (color_of this) A)\n                    (color_equals (color_of this) R)\n                )\n            )\n        )\n        (apply\n            (update_color O)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects on the first row to color X, objects on the second row to color O, and objects on the third row to color X.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (column_equals (column_of this) even))\n        (apply (update_color X))\n    )\n    (rule\n        (vars (this))\n        (filter (column_equals (column_of this) odd))\n        (apply (update_color O))\n    )\n    (rule\n        (vars (this))\n        (filter (column_equals (column_of this) odd))\n        (apply (update_color X))\n    )\n)"
        },
        {
            "nl_description": "Recolor objects in the first and last rows to color X and those in the second row to color O.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (or\n                (column_equals (column_of this) 1)\n                (column_equals (column_of this) 3)\n            )\n        )\n        (apply\n            (update_color X)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 2)\n        )\n        (apply\n            (update_color O)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects to color O and then color objects of size 3 to color X",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color O)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 3)\n        )\n        (apply\n            (update_color X)\n        )\n    )\n)"
        },
        {
            "nl_description": "Change all colors of objects in the top two rows to O and colors of objects in the last row to X.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) even)\n        )\n        (apply\n            (update_color O)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) odd)\n        )\n        (apply\n            (update_color X)\n        )\n    )\n)"
        },
        {
            "nl_description": "Change all objects on the top row to color X and those on the middle row to color O, and then change the color of objects on the bottom row to X.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (column_equals (column_of this) 0))\n        (apply\n            (update_color X)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter (column_equals (column_of this) 1))\n        (apply\n            (update_color O)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter (column_equals (column_of this) 2))\n        (apply\n            (update_color X)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects in the first half rows to O and in the second half rows to X",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (height_equals (height_of this) min)\n        )\n        (apply\n            (update_color O)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (height_equals (height_of this) max)\n        )\n        (apply\n            (update_color X)\n        )\n    )\n)"
        },
        {
            "nl_description": "Replace each row's color with O in the first row, X in the second row, and O in the third row",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (column_equals (column_of this) 1))\n        (apply (update_color O))\n    )\n    (rule\n        (vars (this))\n        (filter (column_equals (column_of this) 2))\n        (apply (update_color X))\n    )\n    (rule\n        (vars (this))\n        (filter (column_equals (column_of this) 3))\n        (apply (update_color O))\n    )\n)"
        },
        {
            "nl_description": "Change all objects on the first and second rows to 'O', and objects on the third row to 'X'.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 1)\n        )\n        (apply\n            (update_color O)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 2)\n        )\n        (apply\n            (update_color O)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 3)\n        )\n        (apply\n            (update_color X)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the top half of objects to color O and the bottom half of objects to color X.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color O)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n        )\n        (apply\n            (extend_node down true)\n            (update_color X)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the top two-most rows to O and the bottom-most row to X.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (or\n                (or (column_equals (column_of this) 0) (column_equals (column_of this) 1))\n                (column_equals (column_of this) 2)\n            )\n        )\n        (apply\n            (update_color O)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 2)\n        )\n        (apply\n            (update_color X)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the top two rows to a fixed pattern with O (black) and bottom row to X (grey)",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (or\n                (column_equals (column_of this) 0)\n                (column_equals (column_of this) 1)\n            )\n        )\n        (apply\n            (update_color O)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 2)\n        )\n        (apply\n            (update_color X)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the objects based on their color in a checkerboard pattern where the first row is alternated with O and X.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color X)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) X))\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color O)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the first row to X. Recolor the second row to O. Recolor the third row to X.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 1)\n        )\n        (apply\n            (update_color X)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 2)\n        )\n        (apply\n            (update_color O)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 3)\n        )\n        (apply\n            (update_color X)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects to alternating rows of colors O and X.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color O)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (height_equals (height_of this) 1)\n                (degree_equals (degree_of this) 2)\n            )\n        )\n        (apply\n            (update_color X)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the first row to X, the second row to O, and the third row to X.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (and (column_equals (column_of this) 1) (color_equals (color_of this) X)))\n        (apply (update_color X))\n    )\n    (rule\n        (vars (this))\n        (filter (and (column_equals (column_of this) 2) (color_equals (color_of this) X)))\n        (apply (update_color O))\n    )\n    (rule\n        (vars (this))\n        (filter (and (column_equals (column_of this) 3) (color_equals (color_of this) X)))\n        (apply (update_color X))\n    )\n)"
        },
        {
            "nl_description": "Recolor all rows: first row to color X, second row to color O, and third row to color X.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (column_equals (column_of this) 1))\n        (apply (update_color X))\n    )\n    (rule\n        (vars (this))\n        (filter (column_equals (column_of this) 2))\n        (apply (update_color O))\n    )\n    (rule\n        (vars (this))\n        (filter (column_equals (column_of this) 3))\n        (apply (update_color X))\n    )\n)"
        },
        {
            "nl_description": "Recolor all the objects on each row with the colors O and X alternatively starting from the top row.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color O)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color X)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the first row to color X, the second row to color O, and the third row to color X.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 0)\n        )\n        (apply\n            (update_color X)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 1)\n        )\n        (apply\n            (update_color O)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 2)\n        )\n        (apply\n            (update_color X)\n        )\n    )\n)"
        },
        {
            "nl_description": "Change the color of the first row to O, the second row to X.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (update_color O)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) G)\n        )\n        (apply\n            (update_color O)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (or (color_equals (color_of this) Y) (color_equals (color_of this) B))\n        )\n        (apply\n            (update_color X)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the first row to color O and the other rows to color X",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (column_equals (column_of this) 0))\n        (apply (update_color O))\n    )\n    (rule\n        (vars (this))\n        (filter (column_equals (column_of this) 1))\n        (apply (update_color X))\n    )\n)"
        },
        {
            "nl_description": "Recolor the first row to O, the second row to X, and the third row to X.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (column_equals (column_of this) odd))\n        (apply\n            (update_color X)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter (column_equals (column_of this) even))\n        (apply\n            (update_color O)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the first row all to O and the second row all to X.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 0)\n        )\n        (apply\n            (update_color O)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 1)\n        )\n        (apply\n            (update_color X)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the first row to color O and the second row to color X.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) center)\n        )\n        (apply\n            (update_color O)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (not (column_equals (column_of this) center))\n                (size_equals (size_of this) 3)\n            )\n        )\n        (apply\n            (update_color X)\n        )\n    )\n)"
        }
    ]
}