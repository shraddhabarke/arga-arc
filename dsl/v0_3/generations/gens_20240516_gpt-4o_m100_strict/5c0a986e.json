{
    "completions": [
        {
            "nl_description": "Move all objects to the one step towards the edge in a direction such that the topmost object is moved to the bottommost row, and recolor them.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node up)\n            (update_color R)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color B one step up.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (move_node up)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of size 4 towards the edge of the grid based on their current position.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 4)\n        )\n        (apply\n            (move_node_max (direction_of this))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of size 2 towards the edges of the grid in the possible directions respectively.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 2)\n        )\n        (apply\n            (move_node_max (direction_of this))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of size 2 of the same color one step vertically, and recolor them to another color.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (size_equals (size_of this) 2)\n                (not (shape_equals (shape_of this) enclosed))\n            )\n        )\n        (apply\n            (move_node up)\n            (update_color B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color B one step up, and then recolor them to color B.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (move_node up)\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (move_node up)\n            (update_color B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color different than O one step up.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (not (color_equals (color_of this) O))\n        )\n        (apply\n            (move_node up)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color B one step up, and then recolor them to color B.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (move_node up)\n            (update_color B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all B objects along the diagonal towards the top-left corner.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (move_node up_left)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color B one step up, and move all objects of color R one step right.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (move_node up)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color B or R one step in a direction where there are no adjacent objects.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (or\n                (color_equals (color_of this) B)\n                (color_equals (color_of this) R)\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color B one step up, and then recolor them to color B.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (move_node up)\n            (update_color B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all the objects of color B one step up.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (move_node up)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move every object of color B upward and every object of color R downward only if they are not adjacent to any object of their own color.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) B)\n                (not (neighbor_of this other))\n            )\n        )\n        (apply\n            (move_node up)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (not (neighbor_of this other))\n            )\n        )\n        (apply\n            (move_node down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects one step up and then move them one step right.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node up)\n            (move_node right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color B and R toward the edges of the grid, stopping at the grid boundary.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (or\n                (color_equals (color_of this) B)\n                (color_equals (color_of this) R)\n            )\n        )\n        (apply\n            (move_node_max (direction_of this))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color B one step up, and then move R object toward their rightmost neighbor.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (move_node up)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (move_node_max right)\n        )\n    )\n)"
        },
        {
            "nl_description": "For the topmost or leftmost object of colors B or R, move them toward the top-left corner.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (or\n                (color_equals (color_of this) B)\n                (color_equals (color_of this) R)\n            )\n        )\n        (apply\n            (move_node_max up_left)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of size 2 to the closest top left corner without overlapping.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 2)\n        )\n        (apply\n            (move_node_max up_left)\n        )\n    ))"
        },
        {
            "nl_description": "Move any object of color B to the leftmost position and objects of color R to the rightmost position.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (move_node_max left)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node_max right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color B and R one step towards column 1.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (or (color_equals (color_of this) B) (color_equals (color_of this) R))\n        )\n        (apply\n            (move_node left)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move the objects of color B, towards the top-left corner and the objects of color R, towards the bottom-right corner.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (move_node_max up_left)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node_max down_right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color B one step to the left, and all objects of color R one step to the right.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (move_node left)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of size 4 toward the top-left corner and then recolor them to color B.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 4)\n        )\n        (apply\n            (move_node up_left)\n            (update_color B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move the leftmost object towards the top-left corner.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node_max up)\n            (move_node_max left)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color B to the top left, and objects of color R to the bottom right.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) B))\n        (apply\n            (move_node_max up)\n            (move_node_max left)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) R))\n        (apply\n            (move_node_max down)\n            (move_node_max right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Objects of color B in the top and bottom regions are moved diagonally to the next empty cell and recolored to B. Objects adjacent to the right of the objects are also moved diagonally and recolored.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (or\n                (and (color_equals (color_of this) B) (neighbor_of this other))\n                (color_equals (color_of this) R)\n            )\n        )\n        (apply\n            (move_node up_left)\n            (update_color B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all blue objects to the left.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (move_node left)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of minimum size one step in every possible direction.",
            "code": "(do \n    (rule \n        (vars (this)) \n        (filter (size_equals (size_of this) min)) \n        (apply \n            (move_node up) \n            (move_node down) \n            (move_node left) \n            (move_node right) \n            (move_node up_left) \n            (move_node up_right) \n            (move_node down_left) \n            (move_node down_right) \n        ) \n    ) \n)"
        },
        {
            "nl_description": "Move all objects of color B one step upward, and then change their color to B.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (move_node up)\n            (update_color B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all blue (B) objects one step up.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (move_node up)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color B and R one step up, leaving a trail behind.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (or\n                (color_equals (color_of this) B)\n                (color_equals (color_of this) R)\n            )\n        )\n        (apply\n            (extend_node up false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color B one step up.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (move_node up)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color B one step up, and then add an object of color B at the initial position.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (move_node up)\n            (insert 1 (img_pts_of this) source)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color B and R one step to the top left direction.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (or\n                (color_equals (color_of this) B)\n                (color_equals (color_of this) R)\n            )\n        )\n        (apply\n            (move_node up_left)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all the objects of size 2x2 upward, and color the top-left cell of each of them with their color.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (width_equals (width_of this) 2)\n                (height_equals (height_of this) 2)\n            )\n        )\n        (apply\n            (move_node up)\n            (update_color (color_of this))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of size 2 one step up, and then recolor the first object to color B and the second object to color R.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 2)\n        )\n        (apply\n            (move_node up)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (size_equals (size_of this) 2)\n                (color_equals (color_of this) O)\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (size_equals (size_of this) 2)\n                (color_equals (color_of this) B)\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects to the leftmost empty column.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node_max left)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of size 2 one step toward the top-left corner, and then recolor them to color B.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 2)\n        )\n        (apply\n            (move_node down_left)\n            (update_color B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color B or R one step in the following directions: B up, R down_right.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (move_node up)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node down_right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color B or R toward the topmost or bottommost position respectively, while keeping their columns intact.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) B))\n        (apply (move_node_max up))\n    )\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) R))\n        (apply (move_node_max down))\n    )\n)"
        },
        {
            "nl_description": "Move all objects one step up and recolor them in a specific manner starting from the top left",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node up)\n            (update_color B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color B one step up, and then recolor the first cell of each moved object to color B.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (move_node up)\n            (update_color B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all blue objects one step diagonally towards the top-left direction.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (move_node up_left)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move objects of size 4 to the edge of the grid based on their current position.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 4)\n        )\n        (apply\n            (move_node_max up)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 4)\n        )\n        (apply\n            (move_node_max right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color B or R one step up, sequentially.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (or\n                (color_equals (color_of this) B)\n                (color_equals (color_of this) R)\n            )\n        )\n        (apply\n            (move_node up)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color B or R one step upwards.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (or\n                (color_equals (color_of this) B)\n                (color_equals (color_of this) R)\n            )\n        )\n        (apply\n            (move_node up)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color B one step to the left.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (move_node left)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move the block squares toward the closest border in the respective direction.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (shape_equals (shape_of this) square)\n        )\n        (apply\n            (move_node_max (direction_of this))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color B one step up",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (move_node up)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color B one step up, and all objects of color R one step down.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (move_node up)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color B one step up, and then recolor them to color B.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (move_node up)\n            (update_color B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all the objects of size 4 toward the top-left direction.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 4)\n        )\n        (apply\n            (move_node up_left)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color B to the left edge, and all objects of color R to the right edge.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (move_node_max left)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node_max right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color B or R one step up, and then recolor them to color B.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (or\n                (color_equals (color_of this) B)\n                (color_equals (color_of this) R)\n            )\n        )\n        (apply\n            (move_node up)\n            (update_color B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend all objects of color B and R, except the ones that are neighbors.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (not (neighbor_of this other))\n        )\n        (apply\n            (extend_node down false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color B toward the top edge and objects of color R toward the right edge.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (move_node up)\n        )\n    )    \n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects in a column one step up.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node up)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of size 2 toward the top if they are in the top half of the grid, otherwise toward the bottom.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (size_equals (size_of this) 2)\n                (column_equals (column_of this) even)\n            )\n        )\n        (apply\n            (move_node up)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (size_equals (size_of this) 2)\n                (column_equals (column_of this) odd)\n            )\n        )\n        (apply\n            (move_node down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Shift all rows up, and then recolor the first column to B.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node up)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 0)\n        )\n        (apply\n            (update_color B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color B or R one step up.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (or\n                (color_equals (color_of this) B)\n                (color_equals (color_of this) R)\n            ) \n        )\n        (apply\n            (move_node up)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color B towards the top edge without overlapping any objects.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (move_node_max up)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color 'B' one step up, and then recolor them to color B.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (move_node up)\n            (update_color B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of size 4 to the top-left corner, while maintaining their color and shape, and leaving a trail.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (size_equals (size_of this) 4)\n                (not (color_equals (color_of this) O))\n            )\n        )\n        (apply\n            (extend_node up_left false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Colour all objects at the top-left corner with color B, and then move one step diagonally down right.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color B)\n            (move_node down_right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of size 2 diagonally up-left and update their color to B.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 2)\n        )\n        (apply\n            (move_node up_left)\n            (update_color B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of size 4 one step up, and then recolor them to color B.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 4)\n        )\n        (apply\n            (move_node up)\n            (update_color B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of size 2 towards the top edge of grid, and then change their topmost cell color to the color of the center object's of the initial position.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 2)\n        )\n        (apply\n            (move_node up)\n            (update_color\n                (color_of other)\n            )\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 2)\n        )\n        (apply\n            (move_node up)\n            (update_color\n                (color_of other)\n            )\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color B and R to the upper left, one object at a time",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (or\n                (color_equals (color_of this) B)\n                (color_equals (color_of this) R)\n            )\n        )\n        (apply\n            (move_node up)\n            (move_node left)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of size 4 one step up, and then recolor them to color B.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 4)\n        )\n        (apply\n            (move_node up)\n            (update_color B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move the leftmost object of color B to the top and the topmost object of color R to the right.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (move_node up)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color B one step up, and then one object of color O to the right.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (move_node up)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move the leftmost blue object upward on the path without overlapping.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) B))\n        (apply\n            (move_node up)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of size 2 diagonally, and recolor them to B.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 2)\n        )\n        (apply\n            (move_node up_left)\n            (update_color B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move the first object in the first row towards the object to its right if they have the same color.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (column_equals (column_of this) 0)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all blue objects downward and all red objects rightward.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (move_node down)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of size 4 one step towards the top or left of the grid if R and one step down or right otherwise.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (size_equals (size_of this) 4)\n                (color_equals (color_of this) R)\n            )\n        )\n        (apply\n            (move_node up)\n            (move_node left)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (size_equals (size_of this) 4)\n                (not (color_equals (color_of this) R))\n            )\n        )\n        (apply\n            (move_node down)\n            (move_node right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move the first objects in top rows to one step right, one step to up and recolor right-most and top-most cells to color B",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node_max right)\n            (move_node_max up)\n            (update_color B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move the first object to the first row and the last object to the last column near the object of same color.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) B)\n                (size_equals (size_of this) 4)\n            )\n        )\n        (apply\n            (move_node up)        \n        )\n    )\n   (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (size_equals (size_of this) 2)\n            )\n        )\n        (apply\n            (move_node down_right)        \n        )\n    )\n\n)"
        },
        {
            "nl_description": "Move all objects of color B or R one step towards the top-left corner.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (or\n                (color_equals (color_of this) B)\n                (color_equals (color_of this) R)\n            )\n        )\n        (apply\n            (move_node up_left)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color B one step up",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (move_node up)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color B one step up.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (move_node up)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move the objects of minimum size toward the objects of size 4 along their rows keeping their initial positions, then recolor them to the color they used to be.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) min)\n                (and\n                    (neighbor_of this other)\n                    (size_equals (size_of other) 4)\n                )\n            )\n        )\n        (apply\n            (move_node (direction_of this))\n            (update_color (color_of this))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color B or R, one step up and one step left.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (move_node up)\n            (move_node left)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node up)\n            (move_node left)\n        )\n    )\n)"
        },
        {
            "nl_description": "Transform the top-left corner of all objects of size 4 to color B.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 4)\n        )\n        (apply\n            (move_node up_left)\n            (update_color B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects one step up and recolor the first object found at the new position of each",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node up)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (neighbor_of this other)\n        )\n        (apply\n            (update_color (color_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color B one step up, and then recolor them to color B.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (move_node up)\n            (update_color B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color B or R one step up and into the first row, depending on their respective initial positions.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (or\n                (color_equals (color_of this) B)\n                (color_equals (color_of this) R)\n            )\n        )\n        (apply\n            (move_node up)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of size 2 one step toward the top left corner.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (or\n                (size_equals (size_of this) 2)\n                (size_equals (size_of this) 4)\n            )\n        )\n        (apply\n            (move_node up_left)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of size 2 diagonally to the top-left position if possible, or otherwise move them to the bottom-right position.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 2)\n        )\n        (apply\n            (move_node up_left)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color B and R starting from the top left corner one step in a diagonal direction (up-left for color B and down-right for color R).",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) B))\n        (apply (move_node up_left))\n    )\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) R))\n        (apply (move_node down_right))\n    )\n)"
        },
        {
            "nl_description": "Move all blue objects one step up, and then move all red objects one step diagonally down-right.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (move_node up)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node down_right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of size 2 toward the edge of the grid, one step at a time.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 2)\n        )\n        (apply\n            (move_node_max (direction_of this))\n            (move_node (direction_of this))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of size 2 one step to the right.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 2)\n        )\n        (apply\n            (move_node right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move the leftmost block object one step to the right and then recolor it to blue.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 1)\n        )\n        (apply\n            (move_node right)\n            (update_color B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move the blue objects and the red objects diagonally. Blue objects are moved up to the top-left and red objects are moved down to the bottom-right.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (move_node up_left)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node down_right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move the leftmost column of blue and red objects diagonally outwards",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (or\n                (color_equals (color_of this) B)\n                (color_equals (color_of this) R)\n            )\n        )\n        (apply\n            (move_node_max down_right)\n            (move_node_max down_right)\n            (move_node_max down_right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all squares of blue color to their maximum possible positions.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (move_node_max (direction_of this))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of size 2 as far as possible toward the top-left.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 2)\n        )\n        (apply\n            (move_node_max up_left)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects one step up, change their color to B, and extend one unit their node space.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node up)\n            (update_color B)\n            (extend_node up false)\n        )\n    )\n)"
        }
    ]
}