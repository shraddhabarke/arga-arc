{
    "completions": [
        {
            "nl_description": "Extend all B-colored objects down without overlapping, transforming them to occupy the maximum available space.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (extend_node down false)\n        )    \n    )\n)"
        },
        {
            "nl_description": "Extend all 'B' objects by moving them to the maximum extent toward the bottom direction, without overlapping with other objects.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (move_node_max down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend all the objects of size 2 toward the object of color B, without overlapping.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 2)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) B)\n                )\n            )\n        )\n        (apply\n            (extend_node (direction_of other) false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend all objects of color B downward without overlapping.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (extend_node down false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend all blue objects downwards until they cannot extend further, without overlapping.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (extend_node down false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend all objects of size 2 downwards without overlap.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 2)\n        )\n        (apply\n            (extend_node down false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend all red objects to the right without overlapping and color them blue.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (extend_node right false)\n            (update_color B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects to the bottom until they meet another object or the edge of the grid.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node_max down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend all large objects as far as possible without overlap.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) max)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (extend_node (direction_of other) false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend all objects of color B downward until they hit another object, without overlapping.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (extend_node down false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all blue objects down to the next available cell.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (move_node_max down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend all objects of color B downwards, without overlapping.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (extend_node down false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all blocks of size 2 towards the bottom, then combine and extend the blocks towards the bottom without overlapping.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 2)\n        )\n        (apply\n            (move_node down)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 2)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (extend_node down false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of size 2 and recolor them to blue.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 2)\n        )\n        (apply\n            (move_node_max down)\n            (update_color B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend all objects of color B downwards without overlapping.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (extend_node down false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend all objects of color B downward without overlapping.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (extend_node down false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend all the blue objects downward until they hit another object.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (extend_node down false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color B to the largest row as per the number of objects and extend the color B without overlapping.",
            "code": "(do\n(rule\n(vars (this other))\n(filter (color_equals (color_of this) B))\n(apply\n(move_node down)\n(extend_node right false)\n)\n)\n)"
        },
        {
            "nl_description": "Extend all objects of size 2 towards the bottom, without overlapping.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (size_equals (size_of this) 2))\n        (apply\n            (extend_node down false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend all the objects of size 2 toward the bottom, without overlapping.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 2)\n        )\n        (apply\n            (extend_node down false)\n        )    \n    )\n)"
        },
        {
            "nl_description": "Extend all blue objects towards the boundary without overlapping.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (extend_node (direction_of this) false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend all objects colored B downwards without overlapping.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (extend_node down false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all the objects one step down and extend them towards the bottom without overlapping.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node down)\n            (extend_node down false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend all the blue objects until they hit another object or the edge of the grid.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (extend_node (direction_of this) true)\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend all objects of color B, without overlapping.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (extend_node down false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend all objects of size 4 horizontally for the given direction, without overlapping.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 4)\n        )\n        (apply\n            (extend_node right false)\n            (extend_node left false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend all objects of width 2, towards the bottom and without overlapping, filling until it hits another object or the edge of the grid.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (width_equals (width_of this) 2)\n        )\n        (apply\n            (extend_node down false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend all blue objects without overlapping",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (extend_node down false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend all objects of color B down, without overlapping.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (extend_node down false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend all objects next to the B object towards the direction of the B object, without overlapping.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) B)\n            )\n        )\n        (apply\n            (extend_node (direction_of other) false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend all objects of color B downwards towards the edge of the grid, overlapping with other objects.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (extend_node down true)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of size 2 by one step down, and then recolor them to color B.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 2)\n        )\n        (apply\n            (move_node down)\n            (update_color B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Incrementally move nodes horizontally downwards, place new nodes in the next row down. Repeat the process for further transformations while selecting neighboring nodes correctly.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n            (apply\n                (update_color B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend the objects of size 6 downward.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 6)\n        )\n        (apply\n            (extend_node down false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend objects of color B in size towards the bottom, without overlapping.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (extend_node down false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend objects B towards the bottom without overlapping.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (extend_node down false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all B-colored objects to extend their size downward until they hit another object.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (move_node_max down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend all the B objects to the bottom edge, without overlapping.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (extend_node down false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend all the objects of color B toward the bottom edge, without overlapping.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (extend_node down false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend all objects of color B downward without overlapping.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (extend_node down false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend all objects with color B downward, without overlapping.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (extend_node down false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend all Blue objects downward without overlapping.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (extend_node down false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend all B objects downward without overlap.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (extend_node down false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend nodes of size 1 to form a border without overlapping.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 1)\n        )\n        (apply\n            (extend_node down true)\n            (extend_node right true)\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend all blue objects until they hit another object or the edge of the grid.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (extend_node down true)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color B to the maximum extent downwards until they hit another object, then expand at the same time to the left and right.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (move_node_max down)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (extend_node left false)\n            (extend_node right false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend all objects of color B to the right without overlapping.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (extend_node right false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend all objects of size 2 toward the nearest object of maximum size, overlapping allowed.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 2)\n                (size_equals (size_of other) max)\n            )\n        )\n        (apply\n            (extend_node (direction_of other) true)\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend all objects of color B downwards without overlapping.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (extend_node down false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend the objects colored B downwards.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (extend_node down false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend red objects while leaving a trail, in all possible directions, without overlapping.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (extend_node up false)\n            (extend_node down false)\n            (extend_node left false)\n            (extend_node right false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend all the blue 'B' objects in all directions until they overlap with another object or hit the grid boundary.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (extend_node up false)\n            (extend_node down false)\n            (extend_node left false)\n            (extend_node right false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend blue objects downward, without overlapping.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) B))\n        (apply (extend_node down false))\n    )\n)"
        },
        {
            "nl_description": "Extend all the blue objects downward without overlapping.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (extend_node down false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend all objects toward the bottom of the grid, without overlapping.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (extend_node down false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend all the contiguous objects of size 1, of any color, in the direction of the objects of color B, without overlapping.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) B)\n                )\n            )\n        )\n        (apply\n            (extend_node (direction_of other) false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend all objects of color B to the bottom edge of the grid, while overlapping.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (extend_node down true)\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend all blue objects of size 3 vertically downward until they hit another object, without overlapping.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) B)\n                (size_equals (size_of this) 3)\n            )\n        )\n        (apply\n            (extend_node down false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend all blue objects downward until they hit another object, without overlapping.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (extend_node down false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend all objects of color B toward the bottom edge without overlapping.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (extend_node down false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend all the objects of color B downwards, without overlapping.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (extend_node down false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend all objects towards the bottom without overlapping.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (extend_node down false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend all objects of color B downwards, without overlapping.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (extend_node down false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend all objects of size 2 to the bottom, without overlapping.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 2)\n        )\n        (apply\n            (extend_node down false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend the blue objects to the bottom without overlap.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (extend_node down false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend all objects with color B downwards without overlapping.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (extend_node down false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend all objects of size 2 towards the bottom, without overlapping.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 2)\n        )\n        (apply\n            (extend_node down false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend all the blue objects to the bottom-right, without overlapping.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (extend_node down_right false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend all objects of color B, without overlapping.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (extend_node down false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend all the objects of non-black color towards the bottom edge of the grid, allowing overlap.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (not (color_equals (color_of this) O))\n        )\n        (apply\n            (extend_node down true)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of size 2 one step down, then recolor them to color B.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 2)\n        )\n        (apply\n            (move_node down)\n            (update_color B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend all the blue objects towards the bottom edge of the grid, without overlapping with other objects.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (extend_node down false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all the objects of height 2 and width 2 to the bottom of the grid.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (height_equals (height_of this) 2)\n                (width_equals (width_of this) 2)\n            )\n        )\n        (apply\n            (move_node_max down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend all objects with color B toward the bottom of the grid, without overlapping.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (extend_node down false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend all objects of color B vertically downward, without overlapping.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (extend_node down false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend all objects of color B downward until they hit another object, without overlapping.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (extend_node down false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend all objects of color B downward, until the edge of the grid or another object is hit, and without overlapping.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (extend_node down false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend all blue objects to the right, without overlapping.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (extend_node right false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend all objects of color B towards the bottom edge without overlapping.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (extend_node down false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend all the objects of color B downward until it hits another object without overlapping.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (extend_node down false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend all B objects downwards, without overlapping",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (extend_node down false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of size 6 one step down",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 6)\n        )\n        (apply\n            (move_node down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend the size of all yellow objects in all directions.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) Y))\n        (apply\n            (extend_node up true)\n            (extend_node down true)\n            (extend_node left true)\n            (extend_node right true)\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend all objects of color B downward until they hit another object, without overlapping.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (extend_node down false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend all objects of size 2 downwards, without overlapping.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 2)\n        )\n        (apply\n            (extend_node down false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend the objects of initially size 2 towards the bottom while maintaining their position relative to each other.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (size_equals (size_of this) 2)\n                (color_equals (color_of this) B)\n            )\n        )\n        (apply\n            (extend_node down false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend all objects of size 2 towards the object of size 20, overlapping.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 2)\n                (and\n                    (neighbor_of this other)\n                    (size_equals (size_of other) 20)\n                )\n            )\n        )\n        (apply\n            (extend_node (direction_of other) true)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of size 4 to the bottom-right direction.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 4)\n        )\n        (apply\n            (move_node down_right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color B to the bottommost position possible, without overlapping.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) B))\n        (apply (move_node_max down))\n    )\n)"
        },
        {
            "nl_description": "Extend all objects of size 2, except those of color R, downward until they hit another object.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 2)\n                (not (color_equals (color_of this) R))\n            )\n        )\n        (apply\n            (extend_node down false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend all objects of color B downwards without overlapping.",
            "code": "(do (rule (vars (this)) (filter (color_equals (color_of this) B)) (apply (extend_node down false))))"
        },
        {
            "nl_description": "Extend all objects of color B towards the bottom without overlapping.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (extend_node down false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Add a border of color B to all objects of color B.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) B) \n                (color_equals (color_of other) B)\n            )\n        )\n        (apply\n            (add_border B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend all objects of size 2 towards the object of size 4, without overlapping.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 2)\n                (and\n                    (neighbor_of this other)\n                    (size_equals (size_of other) 4)\n                )\n            )\n        )\n        (apply\n            (extend_node (direction_of other) false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend all objects of size 2 towards the bottom, stopping when they reach another object or the edge of the grid.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 2)\n        )\n        (apply\n            (extend_node down false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of size 3 toward the largest object and recolor them to color B.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 3)\n                (size_equals (size_of other) max)\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n            (update_color B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend all objects of size 2 towards the edge of the grid while overlapping.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 2)\n        )\n        (apply\n            (extend_node (direction_of this) true)\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend all objects of color B downward and recolor them B, overlapping other objects.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (extend_node down true)\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend all the horizontal sequences of color B downwards until they hit another object.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (extend_node down false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend all objects of color B downward, without overlapping.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (extend_node down false)\n        )    \n    )\n)"
        }
    ]
}