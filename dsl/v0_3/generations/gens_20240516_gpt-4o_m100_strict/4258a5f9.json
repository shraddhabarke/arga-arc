{
    "completions": [
        {
            "nl_description": "Add a blue border around each object, except the objects of color X",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (not (color_equals (color_of this) X))\n        )\n        (apply\n            (add_border B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend all objects of color X to form a cross shape with color B, without overlapping.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (neighbor_of this other)\n        )\n        (apply\n            (extend_node up false)\n            (extend_node down false)\n            (extend_node left false)\n            (extend_node right false)\n            (update_color B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all cells adjacent to cells of color X to color B.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) X)\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Add a blue border around all 'X' objects.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (add_border B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Surround all objects with color X by color B.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (add_border B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Add a blue border around each black 'X' and all other black cells.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (or\n                (color_equals (color_of this) X)\n                (color_equals (color_of this) O)\n            )\n        )\n        (apply\n            (add_border B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend all the objects of color X with a border of color B.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (add_border B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Surround all objects of color X with a border of color B.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (add_border B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Fill the grid forming vertical and diagonal stripes of color B originating from objects of color X",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (extend_node left false)\n            (extend_node right false)\n            (extend_node up_left false)\n            (extend_node down_right false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Add a B colored border around all objects.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (add_border B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Add a border of color B around all objects of color X.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (add_border B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Surround the objects with color X by the border of color B.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (add_border B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects that are not of color X to color B",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (not (color_equals (color_of this) X))\n        )\n        (apply\n            (update_color B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend each 'X' object in all directions while overlapping to form a larger pattern.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (extend_node left true)\n            (extend_node right true)\n            (extend_node up true)\n            (extend_node down true)\n        )\n    )\n)"
        },
        {
            "nl_description": "Add a border of color B to all instances of color X.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (add_border B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Add borders of color B around all the objects of color X.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter \n            (color_equals (color_of this) X)\n        )\n        (apply\n            (add_border B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects close to objects of color X to color B",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) X)\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Add a blue border around each object of color X.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (add_border B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Add a border of color B to each object, irrespective of its color.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (add_border B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects to color B.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Draw a blue border around all objects of color X.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (add_border B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Add a blue border around all objects of color X.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (add_border B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Color the border of grid with `B` and fill the border of any `X` with `B`",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (add_border B)\n        )\n    ))"
        },
        {
            "nl_description": "Change the color of all pixels except X to B and extend the color B around X.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (not (color_equals (color_of this) X))\n        )\n        (apply\n            (update_color B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects to color B, excluding the objects of color X.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (not (color_equals (color_of this) X))\n        )\n        (apply\n            (update_color B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend the borders of all nodes to blue",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (add_border B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all the objects in the grid with color B.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Replace surrounding cells of each 'X' object with 'B' color, forming a 3x3 block.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (fill_rectangle B false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Fill all rows and columns that contain objects of color X with color B.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (fill_rectangle B false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Add a B border to all the objects.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (add_border B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Add a blue border to all objects of color X",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (add_border B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Add a border of color B to all the objects.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (add_border B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Add a blue border to the objects of color X.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (add_border B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Add a blue border around all objects.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (add_border B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Add a blue border around each object of color X.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (add_border B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Add a border of color B to all objects with color X",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (add_border B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend the horizontal range of each object, by adding border with color B.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (add_border B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend all objects of color X in all directions, overlapping with other objects.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (extend_node up true)\n            (extend_node down true)\n            (extend_node left true)\n            (extend_node right true)\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend all objects of color X in all directions while leaving a trail with color B.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (extend_node up true)\n            (extend_node down true)\n            (extend_node left true)\n            (extend_node right true)\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend the object of color B to form a border around the grid.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (extend_node left false)\n            (extend_node right false)\n            (extend_node up false)\n            (extend_node down false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend all objects towards all directions until they hit another object, then color them to B",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (neighbor_of this other)\n        )\n        (apply\n            (update_color B)\n            (extend_node up false)\n            (extend_node down false)\n            (extend_node left false)\n            (extend_node right false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the grid to B, leaving the X colored object intact.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (not\n                (color_equals\n                    (color_of this)\n                    X\n                )\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Add a blue border to all objects of color X.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (add_border B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects that neighbor X to color B",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) X)\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Add a B border around each of the objects.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (add_border B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all the cells of each 3x3 square containing an object of color X to color B, except the cell that contains X.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (insert 1 (img_pts_of this) target)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of other) X)\n        )\n        (apply\n            (update_color B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Add a border of color B to all objects of color X",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (add_border B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Add a border of color B to all the objects of color X",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (add_border B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend all objects of color X in all directions. Color the region with B before it.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter (color_equals (color_of this) X))\n        (apply\n            (extend_node left false)\n            (extend_node right false)\n            (extend_node up false)\n            (extend_node down false)\n            (update_color B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Add a border of color B around all objects of color X",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (add_border B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Add a blue border to all the objects with color X.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (add_border B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Add a blue border around the entire grid.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (add_border B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Add a B border around all objects, maintaining the internal structure.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (add_border B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects to color B and extend them while overlapping.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color B)\n            (extend_node down true)\n            (extend_node right true)\n            (extend_node left true)\n            (extend_node up true)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all rows, containing the object of color X, to color B.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (update_color B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the entire grid with color B except for the objects of color X.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (not (color_equals (color_of this) X)))\n        (apply\n            (update_color B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the surroundings of all objects of color X to color B.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 1)\n        )\n        (apply\n            (update_color B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Color the surroundings of all X objects to B.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) X)\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Insert object of color B, in a 3x3 configuration, around the objects of color X, without overlapping.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (insert 1 top_left source)\n            (insert 1 top source)\n            (insert 1 top_right source)\n            (insert 1 left source)\n            (insert 1 right source)\n            (insert 1 bottom_left source)\n            (insert 1 bottom source)\n            (insert 1 bottom_right source)\n        )\n    )\n)"
        },
        {
            "nl_description": "Add a border of color B around all objects in the grid.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (add_border B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Add a blue border to all X objects.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (add_border B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all cells to color B, except those with color X and their surrounding cells.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of this) O)\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) B)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color O)\n        )\n    )\n)"
        },
        {
            "nl_description": "Add a blue border around every group of objects.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (add_border B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Add a border of color B to all objects",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (add_border B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Add border of color B to all objects.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (add_border B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend the objects of color X in all four cardinal directions, and update the newly extended parts to color B, overlapping.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (extend_node up true)\n            (update_color B)\n            (extend_node down true)\n            (update_color B)\n            (extend_node left true)\n            (update_color B)\n            (extend_node right true)\n            (update_color B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Add a blue border around the entire grid and preserve the original structure of the objects.",
            "code": "(do\n  (rule\n    (vars (this))\n    (filter)\n    (apply\n      (add_border B)\n    )\n  )\n)"
        },
        {
            "nl_description": "Add a border with color B to all objects of color X",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (add_border B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Add a border of color B to all objects of color X.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (add_border B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Add a border of color B around all objects of color X",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (add_border B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the border cells of the grid to color B while keeping the unchanged internal structure.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (add_border B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects to color B and all X objects' neighbors to color B.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter (color_equals (color_of this) X))\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter (neighbor_of this other))\n        (apply\n            (update_color B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Add a Blue border around all objects.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (add_border B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Add a blue border around all objects.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (add_border B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Add a blue border around all objects by recoloring the grid cells adjacent to the objects.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (add_border B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend the object of color X in all directions to form a cross, without overlapping, and recolor the entire cross to color B.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) X))\n        (apply\n            (extend_node up false)\n            (extend_node down false)\n            (extend_node left false)\n            (extend_node right false)\n            (update_color B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Add a border to all objects of color X.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (add_border B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Add a border of color B to all objects with color X.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (add_border B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color X to the edge of the grid, then color all the cells surrounding these objects in color B.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (move_node_max up)\n            (move_node_max down)\n            (move_node_max left)\n            (move_node_max right)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of other) X)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all cells adjacent to X with color B",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) X)\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Surround all objects of color X with color B.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of other) X)\n        )\n        (apply\n            (add_border B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Border all squares of size 1 with color B.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 1)\n        )\n        (apply\n            (add_border B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Add a blue border around all objects with a color different than X.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (not (color_equals (color_of this) X))\n        )\n        (apply\n            (add_border B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Fill 3x3 squares around each X with color B.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (fill_rectangle B false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Add a blue border to all objects of color X.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (add_border B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Add a blue border around all X objects.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (add_border B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Add a blue border around the grid and around each 'X' object.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (add_border B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (add_border B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend all the objects of color X in all four diagonal directions filling the color B and stopping at the grid edges.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (extend_node up_left false)\n            (extend_node up_right false)\n            (extend_node down_left false)\n            (extend_node down_right false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Add a border of color B around all objects of color X.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (add_border B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Add a blue border to all objects of color X",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (add_border B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Add a blue border around all X objects.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (add_border B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects other than X to color B",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (not (color_equals (color_of this) X))\n        )\n        (apply\n            (update_color B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all cells neighboring an X to color B, forming a 3x3 square around each X.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (neighbor_of this other)\n        )\n        (apply\n            (update_color B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Add a border of color B to each object of color X.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (add_border B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Add a border of color B around each object of color X.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (add_border B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all cells to B, except those containing the color X.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (not (color_equals (color_of this) X))\n        )\n        (apply\n            (update_color B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all border objects to color B, without modifying X.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (or\n                    (color_equals (color_of this) O)\n                    (color_equals (color_of this) O)\n                )\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) X)\n                )\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Add a border of color B around all objects of color X.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (add_border B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Surround all objects of color X with color B.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of other) X)\n        )\n        (apply\n            (update_color B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of size 1 toward the object of color X, and recolor them to color B.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) X)\n                )\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n            (update_color B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Add blue borders around all objects with color X.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (add_border B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Add a blue border around the entire grid.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (add_border B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend all objects of color X until the grid edge.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (extend_node up true)\n            (extend_node down true)\n            (extend_node left true)\n            (extend_node right true)\n        )\n    )\n)"
        },
        {
            "nl_description": "Add blue borders around all objects of color X.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (add_border B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all the objects to color B",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Add a blue border around the grid while preserving the positions and colors of 'X' cells.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (update_color X)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (add_border B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend all the objects of color X and enclose them with color B.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (add_border B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects, except for the ones with color X, to color B and extend them.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (not (color_equals (color_of this) X)))\n        (apply\n            (update_color B)\n            (extend_node right false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Add a blue border around each object, including objects of color X.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (add_border B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Add a border of color B to all objects.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (add_border B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Add a border of color B to all objects of color X",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (add_border B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all the objects to color B, except for objects that are colored X.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (not (color_equals (color_of this) X))\n        )\n        (apply\n            (update_color B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Add a border of color B around all objects of color X.",
            "code": "(do (rule (vars (this)) (filter (color_equals (color_of this) X)) (apply (add_border B) ) ))"
        },
        {
            "nl_description": "Change the color of all objects to B, then extend all objects in all four directions without overlapping.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (extend_node up false)\n            (extend_node down false)\n            (extend_node left false)\n            (extend_node right false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Add a blue border around all objects.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (add_border B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Add a border of color B around all objects.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (add_border B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Add a border of color B to all objects of color X.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (add_border B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Add blue border around all objects of color X.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (add_border B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the second row to second last row and second column to second last column (forming a border inside the grid) with color B, without changing the objects already present there.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (add_border B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Add a border of color B around the objects of color X.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (add_border B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects to color B and extend them to form a border around each cell with an object of color X.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (neighbor_of this other)\n        )\n        (apply\n            (update_color B)\n            (extend_node (direction_of other) false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Add a blue border around each X object.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (add_border B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Add a blue border to the objects of color X.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (add_border B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Add a border of color B to objects that are not neighbors of other objects.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (not (neighbor_of this other))\n        )\n        (apply\n            (add_border B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend all objects of color 'X' in all directions, covering the entire grid.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) X))\n        (apply\n            (extend_node up true)\n            (extend_node down true)\n            (extend_node left true)\n            (extend_node right true)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all non-X objects to B",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (not (color_equals (color_of this) X))\n        )\n        (apply\n            (update_color B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects neighboring color X to color B.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (neighbor_of this other)\n        )\n        (apply\n            (update_color B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects of color 'O' to color 'B'.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) O)\n        )\n        (apply\n            (update_color B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Add a border around all objects of color X with color B.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (add_border B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects of any color adjacent to any object of color X to color B.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) X)\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Add a border of B around each object and the grid",
            "code": "(do (rule (vars (this)) (filter) (apply (add_border B))))"
        },
        {
            "nl_description": "Add a blue border to all objects.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (add_border B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Add a blue border around all objects of color X.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (add_border B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend all X objects to all directions, without overlapping, then recolor all objects to color B.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (extend_node up false)\n            (extend_node down false)\n            (extend_node left false)\n            (extend_node right false)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects of size 1 to color B",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 1)\n        )\n        (apply\n            (update_color B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend all objects of color X towards the nearest edge, while coloring the background in color B.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) X))\n        (apply\n            (extend_node up false)\n            (extend_node down false)\n            (extend_node left false)\n            (extend_node right false)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) O))\n        (apply (update_color B))\n    )\n)"
        },
        {
            "nl_description": "Extend all objects of color 'X' in all directions, with overlapping.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (extend_node left true)\n            (extend_node right true)\n            (extend_node up true)\n            (extend_node down true)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all non-X objects to color B, ensuring they form a border around X objects.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (not (color_equals (color_of this) X))\n        )\n        (apply\n            (add_border B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects of color X and their neighbors to color B.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (or\n                (color_equals (color_of this) X)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Add a border of color B to both all objects and the grid itself.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (add_border B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend each of the blue border from the location of each X.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (extend_node up true)\n            (extend_node down true)\n            (extend_node left true)\n            (extend_node right true)\n        )\n    )\n)"
        },
        {
            "nl_description": "Add border of color B to all the objects, and extend the border untill they hit any object or edge of the grid.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (add_border B)\n            (extend_node right false)\n            (extend_node left false)\n            (extend_node up false)\n            (extend_node down false)\n        )\n    )\n)"
        }
    ]
}