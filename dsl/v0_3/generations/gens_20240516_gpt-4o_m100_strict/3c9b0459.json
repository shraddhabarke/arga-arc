{
    "completions": [
        {
            "nl_description": "Swap color of all neighbors that are of different colors.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (not (color_equals (color_of this) (color_of other)))\n            )\n        )\n        (apply\n            (update_color (color_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Rotate all objects by 90 degrees.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
        },
        {
            "nl_description": "Rotate all objects by 90 degrees clockwise",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
        },
        {
            "nl_description": "Rotate all objects by 90 degrees clockwise.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
        },
        {
            "nl_description": "Rotate all objects 90 degrees clockwise.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects along the main diagonal of the grid, into the same row and same column.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (column_equals (column_of this) center)\n                (column_equals (column_of other) center)\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Rotate all objects by 90 degrees.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
        },
        {
            "nl_description": "Rotate all objects 90 degrees clockwise",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
        },
        {
            "nl_description": "Rotate all the square-shaped objects by 90 degrees clockwise.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (shape_equals (shape_of this) square)\n        )\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
        },
        {
            "nl_description": "Rotate all objects to 90 degrees clockwise.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects diagonally to the opposite corner if they are not in the corners already.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (not (or\n                (neighbor_of this other)\n                (neighbor_of other this)))\n        )\n        (apply\n            (move_node up_left)\n            (move_node up_right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Flip all grids along the diagonal left axis.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (flip diagonal_left)\n        )\n    )\n)"
        },
        {
            "nl_description": "Rotate all objects by 90 degrees.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
        },
        {
            "nl_description": "Rotate all objects 90 degrees clockwise.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
        },
        {
            "nl_description": "Rotate the grid 90 degrees clockwise.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
        },
        {
            "nl_description": "Rotate the grids 90 degrees clockwise.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
        },
        {
            "nl_description": "Rotate all objects by 90 degrees.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
        },
        {
            "nl_description": "Rotate all objects by 90 degrees.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
        },
        {
            "nl_description": "Rotate all square-shaped objects by 90 degrees.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (shape_equals (shape_of this) square)\n        )\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
        },
        {
            "nl_description": "Rotate the grid 90 degrees clockwise.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
        },
        {
            "nl_description": "Rotate all objects 90 degrees.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
        },
        {
            "nl_description": "Mirror all objects horizontally.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (mirror (mirror_axis_of this))\n        )\n    )\n)"
        },
        {
            "nl_description": "Rotate all objects by 90 degrees.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
        },
        {
            "nl_description": "Swap the color of all objects with the colors of their diagonally adjacent objects in the top-right direction.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (neighbor_of this other)\n        )\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
        },
        {
            "nl_description": "Rotate all objects by 90 degrees clockwise.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
        },
        {
            "nl_description": "Flip all grids horizontally.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (flip horizontal)\n        )\n    )\n)"
        },
        {
            "nl_description": "Rotate all square-shaped objects by 90 degrees.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (shape_equals (shape_of this) square)\n        )\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
        },
        {
            "nl_description": "Rotate all objects by 90 degrees clockwise",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
        },
        {
            "nl_description": "Rotate 90 degrees clockwise all objects of size 3.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 3)\n        )\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
        },
        {
            "nl_description": "Mirror each object along the vertical axis.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (mirror (mirror_axis_of this))\n        )\n    )\n)"
        },
        {
            "nl_description": "Rotate all square-shaped objects by 90 degrees.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (shape_equals (shape_of this) square)\n        )\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
        },
        {
            "nl_description": "Flip all objects along the diagonal right axis.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (flip diagonal_right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Rotate all square objects by 90 degrees",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (shape_equals (shape_of this) square)\n        )\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
        },
        {
            "nl_description": "Rotate all objects by 90 degrees clockwise.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
        },
        {
            "nl_description": "Rotate the entire grid 90 degrees clockwise",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
        },
        {
            "nl_description": "Rotate all objects in the grid 90 degrees clockwise.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
        },
        {
            "nl_description": "Mirror all the grids along the vertical axis.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (mirror (mirror_axis_of this))\n        )\n    )\n)"
        },
        {
            "nl_description": "Rearrange the grid such that the diagonal elements become the first column and previous first column elements form a diagonal",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (or\n                (color_equals (color_of this) R)\n                (or\n                    (color_equals (color_of this) W)\n                    (or\n                        (color_equals (color_of this) B)\n                        (or\n                            (color_equals (color_of this) Y)\n                            (or\n                                (color_equals (color_of this) C)\n                                (color_equals (color_of this) G)\n                            )\n                        )\n                    )\n                )\n            )\n        )\n        (apply\n            (move_node_max down_right)\n            (update_color X)\n        )\n    )\n)"
        },
        {
            "nl_description": "Rotate all objects by 90 degrees.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
        },
        {
            "nl_description": "Rotate each 3x3 grid 90 degrees clockwise.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
        },
        {
            "nl_description": "Rotate all objects 90 degrees clockwise.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color B, W, or C one step in any direction towards an object of color different than theirs",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (or \n                    (color_equals (color_of this) B)\n                    (or\n                        (color_equals (color_of this) W)\n                        (color_equals (color_of this) C)\n                    )\n                )\n                (and\n                    (neighbor_of this other)\n                    (not (color_equals (color_of other) (color_of this)))\n                )\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Rotate all objects that are squares by 90 degrees clockwise.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (shape_equals (shape_of this) square)\n        )\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
        },
        {
            "nl_description": "Rotate all square-shaped objects by 90 degrees clockwise.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (shape_equals (shape_of this) square)\n        )\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color along the diagonal until they hit another object or the edge of the grid, then rotate each object by 90 degrees.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node_max down_right)\n            (rotate_node 90)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move the diagonal objects to the swapped positions.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (flip diagonal_right)\n            (flip diagonal_left)\n        )\n    )\n)"
        },
        {
            "nl_description": "Rotate all objects by 90 degrees clockwise.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
        },
        {
            "nl_description": "Rotate each color present on the grid 90 degrees clockwise.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
        },
        {
            "nl_description": "Rotate all objects of size 1 by 90 degrees.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 1)\n        )\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
        },
        {
            "nl_description": "Mirror all objects along their vertical axis.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (mirror (mirror_axis_of this))\n        )\n    )\n)"
        },
        {
            "nl_description": "Rotate all square objects by 90 degrees clockwise.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (shape_equals (shape_of this) square)\n        )\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
        },
        {
            "nl_description": "Rotate all objects 90 degrees clockwise.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move diagonal objects to the opposite diagonal position",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter)\n        (apply\n            (move_node down_right)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter)\n        (apply\n            (move_node up_left)\n        )\n    )\n)"
        },
        {
            "nl_description": "Rotate all non-square objects 90 degrees clockwise.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (not (shape_equals (shape_of this) square))\n        )\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
        },
        {
            "nl_description": "Rotate all objects by 90 degrees.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
        },
        {
            "nl_description": "Flip the entire grid along the diagonal axis from top-left to bottom-right.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (flip diagonal_right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Rotate all objects by 90 degrees.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
        },
        {
            "nl_description": "Rotate all objects by 90 degrees clockwise.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
        },
        {
            "nl_description": "Rotate all 3x3 grids by 90 degrees clockwise.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
        },
        {
            "nl_description": "Rotate all objects of size 3 by 90 degrees.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 3)\n        )\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
        },
        {
            "nl_description": "Rotate all the objects 90 degrees clockwise.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
        },
        {
            "nl_description": "Rotate all objects by 90 degrees.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move the objects diagonally to the opposite direction.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) R))\n        (apply (move_node down_right)))\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) B))\n        (apply (move_node down_left)))\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) G))\n        (apply (move_node up_right)))\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) W))\n        (apply (move_node up_left)))\n)"
        },
        {
            "nl_description": "Move all objects of color different than B, toward the object of color B, if they are neighbors of it, and rotate it 90 degrees clockwise.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) B))\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n            (rotate_node 90)\n        )\n    )\n)"
        },
        {
            "nl_description": "Rotate all objects 90 degrees clockwise.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
        },
        {
            "nl_description": "Rotate objects by 90 degrees clockwise.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
        },
        {
            "nl_description": "Rotate all objects by 90 degrees.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
        },
        {
            "nl_description": "Rotate all objects 90 degrees clockwise.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
        },
        {
            "nl_description": "Rotate all objects 90 degrees clockwise.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
        },
        {
            "nl_description": "Rotate each object by 90 degrees.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
        },
        {
            "nl_description": "Rotate all objects by 90 degrees.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
        },
        {
            "nl_description": "Rotate all objects by 90 degrees clockwise.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move the objects of color B, Y, and X to the top-left adjacent position whenever possible.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (or (color_equals (color_of this) B) (or (color_equals (color_of this) Y) (color_equals (color_of this) X))))\n        (apply (move_node up_left))\n    )\n)"
        },
        {
            "nl_description": "Transpose the grid; exchange the rows and columns of each grid.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter)\n        (apply\n            (mirror (mirror_axis_of this))\n        )\n    )\n)"
        },
        {
            "nl_description": "Rotate the objects by 90 degrees.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
        },
        {
            "nl_description": "Rotate all objects by 90 degrees.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
        },
        {
            "nl_description": "Rotate all objects by 90 degrees clockwise.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
        },
        {
            "nl_description": "Rotate all objects by 90 degrees clockwise.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
        },
        {
            "nl_description": "Rotate all square objects by 90 degrees.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (shape_equals (shape_of this) square)\n        )\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
        },
        {
            "nl_description": "Rotate all objects by 90 degrees.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
        },
        {
            "nl_description": "Rotate all non-symmetric objects 90 degrees clockwise.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter \n            (not (shape_equals (shape_of this) square))\n        )\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
        },
        {
            "nl_description": "Rotate all objects 90 degrees clockwise.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
        },
        {
            "nl_description": "Rotate the elements of the grid by 90 degrees clockwise.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
        },
        {
            "nl_description": "Rotate all objects 90 degrees clockwise.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects diagonally down and right.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node down_right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Rotate all square-shaped objects 90 degrees.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (shape_equals (shape_of this) square)\n        )\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
        },
        {
            "nl_description": "Rotate all square-shaped objects by 90 degrees.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (shape_equals (shape_of this) square)\n        )\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move objects with different adjacent color to the adjacent cell with that color",
            "code": "(do\n  (rule\n    (vars (this other))\n    (filter\n      (and\n        (neighbor_of this other)\n        (not (color_equals (color_of this) (color_of other)))\n      )\n    )\n    (apply\n      (move_node (direction_of other))\n    )\n  )\n)"
        },
        {
            "nl_description": "Rotate the grids 90 degrees clockwise.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
        },
        {
            "nl_description": "Reflect the grid across its vertical axis.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (mirror (mirror_axis_of this))\n        )\n    )\n)"
        },
        {
            "nl_description": "Rotate all objects by 90 degrees.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
        },
        {
            "nl_description": "Rotate all objects by 90 degrees to the right.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
        },
        {
            "nl_description": "Rotate all the objects 90 degrees clockwise.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
        },
        {
            "nl_description": "Rotate all objects 90 degrees clockwise.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
        },
        {
            "nl_description": "Rotate all objects by 90 degrees.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
        },
        {
            "nl_description": "Rotate all objects 90 degrees clockwise.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
        },
        {
            "nl_description": "Rotate each object by 90 degrees.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
        },
        {
            "nl_description": "Rotate all grids 90 degrees clockwise",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move objects in diagonally opposite directions clockwise.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (column_equals (column_of this) even))\n        (apply (move_node down_right))\n    )\n    (rule\n        (vars (this))\n        (filter (column_equals (column_of this) odd))\n        (apply (move_node up_left))\n    )\n)"
        },
        {
            "nl_description": "Move objects in the grid towards the empty positions indicated in each column.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of other) O)\n                (column_equals (column_of this) (column_of other))\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n)"
        }
    ]
}