{
    "completions": [
        {
            "nl_description": "Move all objects of size 5 one step to the right.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 5)\n        )\n        (apply\n            (move_node right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of size 7 of color R one step up",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (size_equals (size_of this) 7)\n                (color_equals (color_of this) R)\n            )\n        )\n        (apply\n            (move_node up)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color R one step right.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color R toward the left and then recolor them to R.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node left)\n            (update_color R)\n        )\n    )\n)"
        },
        {
            "nl_description": "Shift all the objects of color R one step down.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color R one step up.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node up)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color R toward the object of color G, if they are neighbors of it.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) G)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color R one step right.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move the R objects downward and group them together.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all line objects of color R towards other R objects that are neighbors.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) R)\n                )\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Replace all objects of color R with objects of color R shifted downward, considering objects of color R in different positions.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color R 1 step downwards",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of size 3 one step to the right and then recolor them to color R.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 3)\n        )\n        (apply\n            (move_node right)\n            (update_color R)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color R towards the direction up until they hit another object.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node_max up)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color R to their right if there are no objects blocking their path.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node_max right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all horizontal rows of non-X objects one column to the right, only if no object of color R exists in the adjoining column.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and \n                (not (color_equals (color_of this) R))\n                (neighbor_of this this)\n            )\n        )\n        (apply\n            (move_node right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move the object of size 6 toward the center, and replace it with a red colored object",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 6)\n                (and\n                    (neighbor_of this other)\n                    (size_equals (size_of other) 5)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n            (update_color R)\n        )    \n    )\n)"
        },
        {
            "nl_description": "Move all R objects toward the O objects that they are neighbors with.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all red objects one step to the right.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color R toward the top-left direction.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node up_left)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color R right, then move the resulting objects down",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node right)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all R objects to the right until they form a vertical line and move the objects placed in the vertical line to the right until they form a vertical line again.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) R))\n        (apply (move_node right))\n    )\n)"
        },
        {
            "nl_description": "Move objects of color R one step to the right if their column index is even.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (column_equals (column_of this) even)\n            )\n        )\n        (apply\n            (move_node right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color R one step down.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color R and size at least 2 toward the right.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (size_equals (size_of this) 2)\n            )\n        )\n        (apply\n            (move_node right)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (not (size_equals (size_of this) 2))\n            )\n        )\n        (apply\n            (move_node right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all red objects toward the object of maximum size if they are neighbors of it.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (and\n                    (neighbor_of this other)\n                    (size_equals (size_of other) max)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all the R colored objects one step to the right.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color R one step to the right.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all red (R) objects toward each other until they form a larger connected component.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color R one row down.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color R toward the right and recolor them to R.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all red objects one step to the right.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color R one step right.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of size 3 one step to the left.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 3)\n        )\n        (apply\n            (move_node left)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color R to the left if they are neighbors but do not overlap.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (move_node left)\n            (update_color O)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color R one step right.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color R one step right, then change their color to O.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node right)\n            (update_color O)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all R objects 1 step to the right.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color R one step to the right.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move R-colored objects from the current position sequentially up while keeping horizontal or vertical connections intact.",
            "code": "(do (rule (vars (this)) (filter (color_equals (color_of this) R)) (apply (move_node up))))"
        },
        {
            "nl_description": "Invert the color and move all 'R' objects to the right one step, if they are adjacent to another 'R' object.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) R)\n                )\n            )\n        )\n        (apply\n            (move_node right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all red objects one step to the right.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color R one step to the right.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Transform all objects of maximum size, moving them one step to the right.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) max)\n        )\n        (apply\n            (move_node right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color R one step to the right if it creates no overlap.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (extend_node right false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all red (R) objects to the right by one step.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all horizontal rows of objects of size 3",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 3)\n                (shape_equals (shape_of this) enclosed)\n            )\n        )\n        (apply\n            (move_node right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move the object of maximum size towards the object of color R.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) max)\n                (color_equals (color_of other) R)\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color R inside a cluster formed by more than one object, one step to the right.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (not (size_equals (size_of this) 1))\n            )\n        )\n        (apply\n            (move_node right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move objects of color R one step down and recolor them to color O.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node down)\n            (update_color O)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color R to their right neighbors.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (move_node right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color R toward the center column, merging them, until they form a vertical line.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color R one step right. If they form an enclosed area, leave the enclosed objects unchanged.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color R one step to the right.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color R one step to the right if possible.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color R one step to the right.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color R one step rightwards.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color R from the edge inward, keeping their relative positions.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color R to their right, if possible.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (move_node right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color R one step up.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node up)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color R one step down.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color R one step to the right.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of size 3, towards the object of color R, if they are neighbors of it.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 3)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) R)\n                )\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color R one step right, except those that would collide with another R object.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n                (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color R to adjacent locations if they're forming a line and without creating overlaps.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all the red objects one step right while maintaining their connectivity.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all R objects to the right.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color R, one step right.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color R toward the midline of the grid if they are grouped vertically.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node_max left)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color R to the right, till they hit a non-R object.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (not (color_equals (color_of other) R))\n            )\n        )\n        (apply\n            (move_node_max right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color R one step to the right.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color R (red) one step to the right.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color R one step to the right.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move R-colored objects such that they stay in contact forming a horizontal line, without overlapping.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color R toward the primary diagonal if they are part of a vertical line.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (shape_equals (shape_of this) enclosed)\n            )\n        )\n        (apply\n            (move_node up)\n        )\n    )\n)"
        },
        {
            "nl_description": "Rotate column objects of size 6 that have color R by 90 degrees.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (size_equals (size_of this) 6)\n                (color_equals (color_of this) R)\n            )\n        )\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color R toward the object of color O, if they are neighbors of it, then recolor them to the nearest object color.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) O)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n            (update_color (color_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move the smallest red objects to their neighbors.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) R)\n                )\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color R towards the neighboring object of color R, excluding the center object, if they are neighbors of it.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color R one step to the right.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color R one step to the right.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Shift all objects of color R downwards by one position.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color R one step to the right.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color R one step to the right.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all the red colored objects one step towards the left.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node left)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all R objects to the right by one cell, considering only the boundary of each object.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color R one step right.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of the maximum size in the grid, one step to the right",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) max)\n        )\n        (apply\n            (move_node right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Rotate all objects of color R by 270 degrees.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (rotate_node 270)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects with color R downward in the grid.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color R one step down, and then recolor them to color R.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node down)\n            (update_color R)\n        )\n    )\n)"
        },
        {
            "nl_description": "Shift the central mass of red objects downward and rightward",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node down)\n            (move_node right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all the objects of size 7, one step up",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (size_equals (size_of this) 7))\n        (apply\n            (move_node up)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color R one step to the right.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color R one step right.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color R downward by one position.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color R one step to the right.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color R towards the rightmost object for each object, independently.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of size 1 toward objects of size 5, one step if neighboring.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (and\n                    (neighbor_of this other)\n                    (size_equals (size_of other) 5)\n                )\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color R three steps to the right.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node right)\n            (move_node right)\n            (move_node right)\n        )\n    )\n)"
        }
    ]
}