{
    "completions": [
        {
            "nl_description": "Rotate the diagonal of objects from top-left to bottom-right by 90 degrees clockwise, forming multiple stripes in the process.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all the colored objects to form a pattern of repeated sequences horizontally on the middle row.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (not (color_equals (color_of this) O))\n        )\n        (apply\n            (move_node_max right)\n            (move_node down)\n            (move_node down)\n            (move_node down)\n            (move_node down)\n            (move_node down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all vertically aligned sequence groups left or right to fit within the grid boundaries, repeating the sequence in each row until the grid is filled.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node_max left)\n            (move_node_max right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Columns of objects C, G, and R are repeated every three rows.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) C)\n                (or\n                    (color_equals (color_of other) G)\n                    (color_equals (color_of other) R)\n                )\n            )\n        )\n        (apply\n            (move_node_max down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Repeatedly move all objects of size 1 to form a repeated pattern in the middle row.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 1)\n        )\n        (apply\n            (move_node down)\n        )\n    ) (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 1)\n        )\n        (apply\n            (move_node down)\n        )\n    ) (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 1)\n        )\n        (apply\n            (move_node down)\n        )\n    ) (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 1)\n        )\n        (apply\n            (move_node down)\n        )\n    ) (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 1)\n        )\n        (apply\n            (move_node down)\n        )\n    ) )"
        },
        {
            "nl_description": "Rotate every object of color G, C, or R by 90 degrees.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (or\n                (color_equals (color_of this) G)\n                (or\n                    (color_equals (color_of this) C)\n                    (color_equals (color_of this) R)\n                )\n            )\n        )\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move the cyan, green, and red objects to form a row at the center. Repeat this process for every third row.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (or (color_equals (color_of this) C) (or (color_equals (color_of this) G) (color_equals (color_of this) R)))\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Rotate the grid 90 degrees clockwise.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
        },
        {
            "nl_description": "Rotate the diagonal objects at the center of each grid cell and form a repeating pattern along the rows.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) C))\n        (apply (move_node right))\n    )\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) G))\n        (apply (move_node right))\n    )\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) R))\n        (apply (move_node right))\n    )\n)"
        },
        {
            "nl_description": "Reorder objects G, R, and C in a specific repetitive pattern along the middle row in a sequential manner.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (or\n                (color_equals (color_of this) G)\n                (or\n                    (color_equals (color_of this) R)\n                    (color_equals (color_of this) C)\n                )\n            )\n        )\n        (apply\n            (move_node (direction_of this))\n            (update_color G)\n            (move_node (direction_of this))\n            (update_color R)\n            (move_node (direction_of this))\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move objects of colors G and R one step up.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (or\n                (color_equals (color_of this) G)\n                (color_equals (color_of this) R)\n            )\n        )\n        (apply\n            (move_node up)\n        )\n    )\n)"
        },
        {
            "nl_description": "For specific columns, repeat the objects of colors G, R, C in a row within that column.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (or\n                (column_equals (column_of this) 2)\n                (or\n                    (column_equals (column_of this) 8)\n                    (column_equals (column_of this) 10)\n                )\n            )\n        )\n        (apply\n            (move_node down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Rearrange all objects by moving them cyclically in a vertical direction.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move color sequences to different positions along the columns to create alternating patterns.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) G)\n        )\n        (apply\n            (move_node up)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node up)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) C)\n        )\n        (apply\n            (move_node up)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) Y)\n        )\n        (apply\n            (move_node up)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects to a specific row, preserving their order.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of colors G, C, and R one step up, as long as they do not align into a row of colors G, C, R.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (or\n                (color_equals (color_of this) G)\n                (or\n                    (color_equals (color_of this) C)\n                    (color_equals (color_of this) R)\n                )\n            )\n        )\n        (apply\n            (move_node up)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all the objects in the vertical middle column to the middle row, preserving their colors.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) center)\n        )\n        (apply\n            (move_node down)\n            (move_node down)\n            (move_node down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of colors C, G, and R to the first row and fourth row of the grid, respectively.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (or\n                (color_equals (color_of this) C)\n                (or\n                    (color_equals (color_of this) G)\n                    (color_equals (color_of this) R)\n                )\n            )\n        )\n        (apply\n            (move_node up)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move objects of color G, R, C cyclically in sequence.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter (or (color_equals (color_of this) G) (or (color_equals (color_of this) R) (color_equals (color_of this) C))))\n        (apply\n            (move_node down)\n            (move_node right)\n            (move_node right)\n            (move_node down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Objects of size 1 appear in a row at the bottom, and are then repeated every four steps upwards. When object reach the top, they appear from the beginning.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (not (color_equals (color_of this) O))\n        )\n        (apply\n            (move_node down)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (neighbor_of this other)\n        )\n        (apply\n            (move_node left)\n            (move_node_max down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move and organize the objects of colors C, G, and R into the middle horizontal row.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (or\n                (color_equals (color_of this) C)\n                (or\n                    (color_equals (color_of this) G)\n                    (color_equals (color_of this) R)\n                )\n            )\n        )\n        (apply\n            (move_node_max down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Rotate all the objects in the grid by 90 degrees clockwise",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
        },
        {
            "nl_description": "Transpose each row such that it cycles through different colors.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n            (rotate_node 90)\n            (rotate_node 90)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move the objects (cycle) G-R-C repeatedly in the fifth row and seventh column, as well as seventh row and seventh column.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (or\n                (and\n                    (column_equals (column_of this) 4)\n                    (and\n                        (neighbor_of this other)\n                        (column_equals (column_of other) 4)\n                    )\n                )\n                (and\n                    (column_equals (column_of this) 6)\n                    (and\n                        (neighbor_of this other)\n                        (column_equals (column_of other) 6)\n                    )\n                )\n            )\n        )\n        (apply\n            (move_node down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move objects of size 1 towards the object of size 3, and repeat from the bottom row.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (and\n                    (size_equals (size_of this) 1)\n                    (neighbor_of this other)\n                )\n                (size_equals (size_of other) 3)\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of size 1 to the first row.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 1)\n        )\n        (apply\n            (move_node up)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects diagonally towards the bottom right corner and place each type of object in a repeating sequence.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter (size_equals (size_of this) 1))\n        (apply\n            (extend_node down_right true)\n        )\n    )\n)"
        },
        {
            "nl_description": "Reconstruct rows of objects by repeating the unique pattern of C, G, and R horizontally.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) C)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (move_node right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Rearrange the objects in a repeating pattern of colors C, G, and R, in descending order.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter)\n        (apply\n            (update_color G)\n            (update_color R)\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move the row that has objects towards the first empty row available, starting from the top.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) C)\n                (and\n                    (color_equals (color_of other) O)\n                    (neighbor_of this other)\n                )\n            )\n        )\n        (apply\n            (move_node_max up)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move each row of colored objects to the middle row, then repeat the row.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (not (color_equals (color_of this) O)))\n        (apply\n            (move_node down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move objects of color C, G, and R one step down if R is at the current level, then move them one step up if G is at the current level.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node down)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of this) G)\n        )\n        (apply\n            (move_node up)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move specific color objects downwards to form a pattern of C, G, R repeatedly in a column.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (or\n                (color_equals (color_of this) C)\n                (or\n                    (color_equals (color_of this) G)\n                    (color_equals (color_of this) R)\n)\n)\n)\n        (apply\n            (move_node down)\n)\n)\n)"
        },
        {
            "nl_description": "Move all objects of color C, G, and R one step up.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (or\n                (color_equals (color_of this) C)\n                (or\n                    (color_equals (color_of this) G)\n                    (color_equals (color_of this) R)\n                )\n            )\n        )\n        (apply\n            (move_node up)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move the Color G, R and C every other 2 rows.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (or\n                (color_equals (color_of this) G)\n                (or\n                    (color_equals (color_of this) R)\n                    (color_equals (color_of this) C)\n                )\n            )\n        )\n        (apply\n            (move_node_max down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Rotate all the objects by 90 degrees clockwise.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all the objects of color different than C, G, and R to the column occupied by one of C, G, or R respectively if they share the same row, and recolor them as C, G, or R in sequence.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (or\n                    (color_equals (color_of this) C)\n                    (or\n                        (color_equals (color_of this) G)\n                        (color_equals (color_of this) R)\n                    )\n                ))\n                (and\n                    (neighbor_of this other)\n                    (or\n                        (color_equals (color_of other) C)\n                        (or\n                            (color_equals (color_of other) G)\n                            (color_equals (color_of other) R)\n                        )\n                    )\n                )\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n            (update_color (color_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Cycle vertically within the same column all objects with colors: C, G, R.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter \n            (or\n                (or\n                    (color_equals (color_of this) C)\n                    (color_equals (color_of this) G)\n                )\n                (color_equals (color_of this) R)\n            )\n        )\n        (apply\n            (move_node down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move the objects C, G, and R around the column space provided by an object C and G in a row, and then replicate this pattern row by row.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter (or (color_equals (color_of this) C) (or (color_equals (color_of this) G) (color_equals (color_of this) R))))\n        (apply\n            (move_node_max right)\n            (extend_node right true)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move objects in the middle row up, one by one, and copy the middle row to each row below it.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (column_equals (column_of this) center)\n                (not (color_equals (color_of this) O))\n            )\n        )\n        (apply\n            (move_node up)\n        )\n    )\n)"
        },
        {
            "nl_description": "Stack the bottom row of the objects vertically at a regular interval of three columns.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (column_equals (column_of this) 4)\n                (not (color_equals (color_of this) O))\n            )\n        )\n        (apply\n            (move_node_max up)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (column_equals (column_of this) 7)\n                (not (color_equals (color_of this) O))\n            )\n        )\n        (apply\n            (move_node_max up)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (column_equals (column_of this) 10)\n                (not (color_equals (color_of this) O))\n            )\n        )\n        (apply\n            (move_node_max up)\n        )\n    )\n)"
        },
        {
            "nl_description": "Rotate all objects of color C, G, and R by 90 degrees.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (or\n                (or\n                    (color_equals (color_of this) C)\n                    (color_equals (color_of this) G)\n                )\n                (color_equals (color_of this) R)\n            )\n        )\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
        },
        {
            "nl_description": "Swap the colors of adjacent objects in the 2 middle rows with their corresponding counterparts along the diagonal, and create patterns along the middle column.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (neighbor_of this other)\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color (color_of this))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move the color pattern G-R-C to fill the entire grid in a vertical manner, repeating the pattern down the grid.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (or\n                (color_equals (color_of this) G)\n                (or\n                    (color_equals (color_of this) R)\n                    (color_equals (color_of this) C)\n                )\n            )\n        )\n        (apply\n            (move_node down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move the objects of shape square line by line with repetition across the grid vertically.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (shape_equals (shape_of this) square)\n        )\n        (apply\n            (move_node down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color C, G or R towards the center row, and repeat them in the row",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (or\n                (color_equals (color_of this) C)\n                (or\n                    (color_equals (color_of this) G)\n                    (color_equals (color_of this) R)\n                )\n            )\n        )\n        (apply\n            (move_node down)\n            (move_node down)\n            (move_node down)\n            (move_node down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move objects of color G and R to the left by one step, then move objects of color C to the right by one step.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (or\n                (color_equals (color_of this) G)\n                (color_equals (color_of this) R)\n            )\n        )\n        (apply\n            (move_node left)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) C)\n        )\n        (apply\n            (move_node right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Rotate objects with color G 90 degrees, objects with color R 180 degrees, and objects with color C 270 degrees.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) G)\n        )\n        (apply\n            (rotate_node 90)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (rotate_node 180)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) C)\n        )\n        (apply\n            (rotate_node 270)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of colors C, G, and R towards each other, if they are neighbors, then repeat this action till all move towards each other.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) C)\n        )\n        (apply\n            (move_node down)\n            (move_node right)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) G)\n        )\n        (apply\n            (move_node left)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node up)\n        )\n    )\n)"
        },
        {
            "nl_description": "Rotate all objects by 90 degrees.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
        },
        {
            "nl_description": "Spread all objects to fill the entire grid by duplicating their rows horizontally.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color (color_of this))\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects to color G, R, and C in a repeating sequence.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color G)\n            (update_color R)\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move and repeat the same row for all rows, following the initial pattern found in any row.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move the bottom row objects to the top and repeat them in an alternate pattern.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (and (neighbor_of this other) (size_equals (size_of other) 1)))\n        (apply\n            (move_node up_left)\n            (move_node down_right)\n            (move_node up)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move objects of colors C, G, and R to the first row if their column has any of these colors.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (or\n                (color_equals (color_of this) C)\n                (or\n                    (color_equals (color_of this) G)\n                    (color_equals (color_of this) R)\n                )\n            )\n        )\n        (apply\n            (move_node up)\n        )\n    )\n)"
        },
        {
            "nl_description": "Rearrange all objects in a pattern of 'C G R' repeated vertically through the grid.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node right)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node right)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Create a sequence of repeating patterns from bottom to top with the colors of the present objects.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of this) G)\n        )\n        (apply\n            (move_node_max up)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node_max up)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of this) C)\n        )\n        (apply\n            (move_node_max up)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move the row containing the objects vertically to the middle row of the grid, and then repeat them horizontally.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (mirror (mirror_axis_of this))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects one step down, then repeat the first row to fill every fourth row.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node down)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node down)\n            (move_node down)\n            (move_node down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects to the bottom center row while preserving their order.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node down)\n            (move_node down)\n            (move_node down)\n            (move_node down)\n            (move_node down)\n            (move_node down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of colors C, G, and R towards each other, while keeping their relative positions, to form horizontal patterns alternating in those colors.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (or\n                (color_equals (color_of this) C)\n                (or\n                    (color_equals (color_of this) G)\n                    (color_equals (color_of this) R)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects vertically back and forth to build horizontal sequences.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (size_equals (size_of this) 1))\n        (apply\n            (move_node down)\n            (move_node up)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move objects of colors C, G, and R in a repeating sequence from left to right.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (or\n                (or\n                    (color_equals (color_of this) C)\n                    (color_equals (color_of this) G)\n                )\n                (color_equals (color_of this) R)\n            )\n        )\n        (apply\n            (move_node right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of colors G, R, and C to be positioned in a repeated pattern in the same row or column.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (or\n                    (color_equals (color_of this) G)\n                    (or\n                        (color_equals (color_of this) R)\n                        (color_equals (color_of this) C)\n                    )\n                )\n                (or\n                    (color_equals (color_of other) G)\n                    (or\n                        (color_equals (color_of other) R)\n                        (color_equals (color_of other) C)\n                    )\n                )\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move every row with a repetitive color pattern G followed by R followed by C to the middle of the grid, alternating in a sequential manner.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (or\n                (or\n                    (and (color_equals (color_of this) G) (neighbor_of this other))\n                    (and (color_equals (color_of this) R) (neighbor_of this other))\n                )\n                (and (color_equals (color_of this) C) (neighbor_of this other))\n            )\n        )\n        (apply\n            (move_node down_right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all object columns to the center column with the pattern G-R-C.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (or\n                (color_equals (color_of this) G)\n                (or\n                    (color_equals (color_of this) R)\n                    (color_equals (color_of this) C)\n                )\n            )\n        )\n        (apply\n            (move_node_max right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Repeatedly place the groups (C, G, R) vertically in the center row.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter)\n        (apply\n            (move_node_max down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Rearrange specific colored objects (C, G, R) in a repeated pattern in the middle row of the grid.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (or\n                (color_equals (color_of this) C)\n                (or\n                    (color_equals (color_of this) G)\n                    (color_equals (color_of this) R)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of this))\n        )\n    )\n)"
        },
        {
            "nl_description": "Shift the rows of cells vertically downward, with each row repeating three times.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node down)\n            (move_node down)\n            (move_node down)\n            (move_node down)\n            (move_node down)\n            (move_node down)\n            (move_node down)\n            (move_node down)\n            (move_node down)\n            (move_node down)\n            (move_node down)\n            (move_node down)\n            (move_node down)\n            (move_node down)\n            (move_node down)\n            (move_node down)\n            (move_node down)\n            (move_node down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Rotate all the objects of the colors G and R by 90 degrees.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (or\n                (color_equals (color_of this) G)\n                (color_equals (color_of this) R)\n            )\n        )\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
        },
        {
            "nl_description": "Rearrange alternating rows of colors horizontally: G, R, C, starting from the 1st row and repeating every 4 rows.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (fill_rectangle G false)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node right)\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node right)\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Rearrange rows: Copy the row containing the sequence R-G-C and G-C and Y, repeated three times, to the middle of the grid.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) G)\n                )\n            )\n        )\n        (apply\n            (insert 1 (img_pts_of this) middle)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all columns containing G, C, and R objects to the end of the grid.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (or\n                (color_equals (color_of this) G)\n                (or\n                    (color_equals (color_of this) C)\n                    (color_equals (color_of this) R)\n                )\n            )\n        )\n        (apply\n            (move_node right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move cyclically objects with color order C -> G -> R where each of these objects are neighbors with each other.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (neighbor_of this other)\n        )\n        (apply\n            (update_color (color_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Reorganize the grid to form repeating patterns of C G R vertically.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node down)\n            (move_node down)\n            (move_node down)\n            (move_node down)\n            (move_node down)\n            (move_node down)\n            (move_node down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move down every object of size 1, maintaining their relative positions in columns.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 1)\n        )\n        (apply\n            (move_node down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Align all objects to the center row of the grid.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (not (column_equals (column_of this) center)))\n        (apply\n            (move_node down)\n            (move_node down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move columns of objects with colors C, G, and R up or down alternatively to form a vertical pattern.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (or\n                (color_equals (color_of this) C)\n                (or\n                    (color_equals (color_of this) G)\n                    (color_equals (color_of this) R)\n                )\n            )\n        )\n        (apply\n            (move_node up)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (or\n                (color_equals (color_of this) C)\n                (or\n                    (color_equals (color_of this) G)\n                    (color_equals (color_of this) R)\n                )\n            )\n        )\n        (apply\n            (move_node down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Create repeating patterns of objects R, G, C in the middle row while maintaining the input object positions and colors.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node up)\n        )\n    )\n)"
        },
        {
            "nl_description": "Align all objects into columns based on their row positions, without changing their colors.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node_max down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Reorder specific columns by repeating the sequence of values.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (or\n                (column_equals (column_of this) 1)\n                (or\n                    (column_equals (column_of this) 2)\n                    (column_equals (column_of this) 3)\n                )\n            )\n        )\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color C and G toward the object of color R, if they are neighbors of it, and then shift the middle column objects right and color them in a repeating pattern of 'C G R'.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (or\n                    (color_equals (color_of this) C)\n                    (color_equals (color_of this) G)\n                )\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) R)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n        )\n        (apply\n            (insert 0 top source)\n            (insert 1 bottom source)\n            (insert 2 top source)\n            (insert 3 bottom source)\n            (insert 4 top source)\n            (insert 5 bottom source)\n            (insert 6 top source)\n            (insert 7 bottom source)\n        )\n    )\n)"
        },
        {
            "nl_description": "Separate each row into individual objects and rearrange the objects by repeating a pattern of C, G, R in every column.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color C)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node_max down)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) C))\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) G))\n        (apply\n            (move_node_max down)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) G))\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) R))\n        (apply\n            (move_node_max down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move each object of color C after the objects of colors G and R.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of this) C)\n        )\n        (apply\n            (move_node down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move objects to the object of shape 'square' and align them vertically if they are neighbors of it.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (shape_equals (shape_of other) square)\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move each row of objects vertically until they form a diagonal pattern of repeating sequences.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node_max down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move the objects in column 3 towards the first row and create a repeating pattern of the objects (C, G, R).",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 3)\n        )\n        (apply\n            (move_node up)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (column_equals (column_of this) 3)\n                (color_equals (color_of this) G)\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (column_equals (column_of this) 3)\n                (color_equals (color_of this) R)\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Reorder objects to repeat pattern of C G R vertically, starting from column 3",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n        )\n        (apply\n            (move_node up)\n            (move_node up)\n            (move_node up)\n            (move_node up)\n            (move_node up)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all columns of objects upwards row by row until the fifth row, and repeat the initial sequence over and over.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (column_equals (column_of this) (column_of other))\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (move_node_max up)\n        )\n    )\n)"
        },
        {
            "nl_description": "Rearrange the columns so that each sequence of colors from top to bottom within the column is repeated multiple times.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (or\n                (neighbor_of this other)\n                (color_equals (color_of this) (color_of other))\n            )\n        )\n        (apply\n            (move_node_max down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Rearrange objects vertically in a repeating sequence G, R, C.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Rearrange vertical stripes of color in the center row, by repeating the pattern of 3 objects in a cyclic manner.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (neighbor_of this this))\n        (apply\n            (move_node down)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter (neighbor_of this this))\n        (apply\n            (move_node down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move the objects diagonally in an alternating pattern.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node down_right)\n            (move_node down_left)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move and group specific objects (G, R, C) into a repeated pattern in the grid.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (or\n                (or\n                    (color_equals (color_of this) G)\n                    (color_equals (color_of this) R)\n                )\n                (color_equals (color_of this) C)\n            )\n        )\n        (apply\n            (move_node down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move each column object of any color in a pattern: G R C, until hitting the grid edge.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node_max down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Reorder objects in columns starting from row 1, repeating the sequence of the colors of the initial objects in the grid.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Rearrange the objects in a repeated sequence of 'C, G, R' horizontally across the grid.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (or\n            (color_equals (color_of this) C)\n            (or (color_equals (color_of this) G)\n                (color_equals (color_of this) R))))\n        (apply (move_node right))\n    )\n)"
        },
        {
            "nl_description": "Repeating blocks of objects with colors G, R, and C horizontally and vertically.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter (and (color_equals (color_of this) G) (or (neighbor_of this other) (neighbor_of other this))))\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
        },
        {
            "nl_description": "Create horizontal lines by moving objects to color positions repeatedly.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Rotate each object in the left column by 90 degrees clockwise.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 2)\n        )\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
        },
        {
            "nl_description": "Rotate all objects of size 1 by 90 degrees.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 1)\n        )\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
        },
        {
            "nl_description": "Shift all the objects to the middle of the grid to form a repeating pattern.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node down)\n            (move_node right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Create continuous rows of objects C, G, and R starting from the 5th row and repeating every 4 rows.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (or\n                    (color_equals (color_of this) C)\n                    (or\n                        (color_equals (color_of this) G)\n                        (color_equals (color_of this) R)\n                    )\n                )\n                (and\n                    (or\n                        (color_equals (color_of this) Y)\n                        (or\n                            (color_equals (color_of this) G)\n                            (color_equals (color_of this) C)\n                        )\n                    )\n                    (color_equals (color_of this) R)\n                )\n            )\n        )\n        (apply\n            (move_node_max right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Reorganize the grid to place all rows containing C, G, and R alternatively.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) C))\n        (apply (move_node_max down))\n    )\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) G))\n        (apply (move_node_max up))\n    )\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) R))\n        (apply (move_node_max left))\n    )\n)"
        },
        {
            "nl_description": "Reposition objects of colors G, R, and C in a repeating vertical pattern.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (or\n                (color_equals (color_of this) G)\n                (or\n                    (color_equals (color_of this) R)\n                    (color_equals (color_of this) C)\n                )\n            )\n        )\n        (apply\n            (move_node_max down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of size 1 to create a horizontal repeating pattern.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (size_equals (size_of this) 1)\n        )\n        (apply\n            (move_node right)\n        )\n    )\n)"
        }
    ]
}