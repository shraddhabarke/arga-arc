{
    "completions": [
        {
            "nl_description": "Move all objects of color R to the position of the objects of color Y, and replace the objects originally at that position.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (color_equals (color_of other) Y)\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of size 2 toward the neighboring objects of color Y.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 2)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) Y)\n                )\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of size 2 toward each other if they are neighbors, then recolor them to the color Y.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 2)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n            (update_color Y)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move the objects of size 2 towards the objects of size 4 if they are neighbors and swap their colors.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 2)\n                (and\n                    (neighbor_of this other)\n                    (size_equals (size_of other) 4)\n                )\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n            (update_color (color_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects in the bottom row up, making room for the objects directly above them, and forming a new bottom row.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (or\n                    (and (size_equals (size_of this) 3) (shape_equals (shape_of this) square))\n                    (and (size_equals (size_of other) 2) (shape_equals (shape_of other) square))\n                )\n            )\n        )\n        (apply\n            (move_node up)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of size 2 downward, if they are neighbors of an object of size 4.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 2)\n                (and\n                    (neighbor_of this other)\n                    (size_equals (size_of other) 4)\n                )\n            )\n        )\n        (apply\n            (move_node down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects to fill the gaps within columns that have objects.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) O)\n            )\n        )\n        (apply\n            (move_node down)\n        )\n    )\n)"
        },
        {
            "nl_description": "If an object is in the same row or column as an object of color Y, move it one step towards it.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) O))\n                (color_equals (color_of other) Y)\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects to the bottom of grid.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node_max down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of size 2 one step up, and then recolor them to color R.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 2)\n        )\n        (apply\n            (move_node up)\n            (update_color R)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color Y or B toward the object of color R if they are neighbors, then change their color to R.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (or\n                    (color_equals (color_of this) Y)\n                    (color_equals (color_of this) B)\n                )\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) R)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n            (update_color R)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of size 4 towards the nearest object of the same color, then move all red objects one step down.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (size_equals (size_of this) 4)\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color R and Y from the top-left quadrant to the bottom-right quadrant, retaining their colors.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (or\n                (color_equals (color_of this) R)\n                (color_equals (color_of this) Y)\n            )\n        )\n        (apply\n            (move_node down_right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move and swap the positions of all objects of the same size.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (size_equals (size_of this) (size_of other))\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n            (move_node (direction_of this))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move objects of color R to the maximum column where the size is equal to 2.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (size_equals (size_of this) 2)\n            )\n        )\n        (apply\n            (move_node_max right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of size 2 to the position of the largest object, and then recolor them based on neighboring objects with matching colors.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (size_equals (size_of this) 2)\n        )\n        (apply\n            (move_node_max (direction_of other))\n            (update_color (color_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of size 2 towards the object of size 4.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 2)\n                (size_equals (size_of other) 4)\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of size 2 towards another non-black object they neighbor, without overlapping.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 2)\n                (and\n                    (neighbor_of this other)\n                    (not (color_equals (color_of other) O))\n                )\n            )\n        )\n        (apply\n            (extend_node (direction_of other) false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color R towards the nearest object of color Y.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (color_equals (color_of other) Y)\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color other than O to the bottom row without overlapping.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (not (color_equals (color_of this) O))\n        )\n        (apply\n            (move_node_max down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects to the boundary of the grid",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node_max up)\n            (move_node_max down)\n            (move_node_max left)\n            (move_node_max right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of size 2 toward the object of the same color that is closest to the center.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 2)\n                (and\n                    (neighbor_of this other)\n                    (and\n                        (color_equals (color_of this) (color_of other))\n                        (column_equals (column_of other) center)\n                    )\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of more than one color toward the object bordering a Y.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) Y))\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) Y)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of size 2 adjacent to any object of size 2 towards the larger object and merge them.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 2)\n                (and\n                    (neighbor_of this other)\n                    (size_equals (size_of other) 2)\n                )\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of size 2 toward the nearest object of an equal size, and then recolor them to the same colors enabling merging into one combined shape.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 2)\n                (and\n                    (neighbor_of this other)\n                    (size_equals (size_of other) 2)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n            (update_color (color_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects to swap positions so that objects initially positioned on even rows end up in the odd rows and vice versa.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node down)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node up)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of size 2 down.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 2)\n        )\n        (apply\n            (move_node down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of size 4 towards each other if they are not neighbors.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 4)\n                (not (neighbor_of this other))\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects with color R to the bottom-most position possible, and then move all objects with color Y to the top-most position possible.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node_max down)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of this) Y)\n        )\n        (apply\n            (move_node_max up)\n        )\n    )\n)"
        },
        {
            "nl_description": "Reposition the objects of size 2 by swapping their positions with the objects of size 1, if they are neighbors.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 2)\n                (and\n                    (neighbor_of this other)\n                    (size_equals (size_of other) 1)\n                )\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (and\n                    (neighbor_of this other)\n                    (size_equals (size_of other) 2)\n                )\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of size 4 to the bottommost row.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 4)\n        )\n        (apply\n            (move_node down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all red objects one step down.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node down)\n        )\n    )\n)"
        },
        {
            "nl_description": "For objects of color R and B, move them one step up. For objects of color Y, move them one step down.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node up)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (move_node up)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) Y)\n        )\n        (apply\n            (move_node down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move objects of size 2 towards objects of size 1 if they are neighbors, and recolor both after the movement so that all objects of size 2 have the same color and all objects of size 1 have the same color.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 2)\n                (and\n                    (neighbor_of this other)\n                    (size_equals (size_of other) 1)\n                )\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n    (rule\n        (vars (this))\n        (filter (size_equals (size_of this) 1))\n        (apply\n            (update_color Y)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter (size_equals (size_of this) 2))\n        (apply\n            (update_color R)\n        )\n    )\n)"
        },
        {
            "nl_description": "Swap the positions of objects of different colors (other than O) if they are neighbors.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) O))\n                (and\n                    (not (color_equals (color_of other) O))\n                    (neighbor_of this other)\n                )\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n            (move_node (direction_of this))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of size 2 toward the object of size 4, and recolor them with the color of the interacting object.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 2)\n                (and\n                    (neighbor_of this other)\n                    (size_equals (size_of other) 4)\n                )\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 2)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color (color_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move objects of color from left to right and right to left to fill gaps based on neighboring colors.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and (neighbor_of this other) (not (color_equals (color_of this) O)))\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of size 2 towards the closest object of size 3 until they hit another object, and change the color of the objects of size 2 to match the color of the object of size 3.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 2)\n                (and\n                    (neighbor_of this other)\n                    (size_equals (size_of other) 3)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n            (update_color (color_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of size 2 one step down.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 2)\n        )\n        (apply\n            (move_node down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color R one step down.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move the first and the third shapes to the left-most and right-most sides of the grid respectively, recoloring them to their corresponding adjacent shape's color.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 4)\n                (color_equals (color_of other) R)\n            )\n        )\n        (apply\n            (move_node left)\n            (update_color (color_of other))\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 4)\n                (color_equals (color_of other) Y)\n            )\n        )\n        (apply\n            (move_node right)\n            (update_color (color_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of size 2 toward each other if they are neighbors.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 2)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of size 2 and color R downward.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (size_equals (size_of this) 2)\n                (color_equals (color_of this) R)\n            )\n        )\n        (apply\n            (move_node down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects with color Y to the position of the same size object with color R.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) Y)\n                (and\n                    (size_equals (size_of this) (size_of other))\n                    (color_equals (color_of other) R)\n                )\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all the objects of color R or Y, one step down.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (or\n                (color_equals (color_of this) R)\n                (color_equals (color_of this) Y)\n            )\n        )\n        (apply\n            (move_node down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all the objects to occupy the positions of all objects of color Y by preserving their relative position.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of other) Y)\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all Y objects one step up, and replace their previous positions with objects R.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) Y)\n        )\n        (apply\n            (move_node up)\n            (update_color R)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all cornered red objects to fill in existing yellow sections.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (color_equals (color_of other) Y)\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "BMove all objects to match neighbor's rows and columns.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all 2x2 objects to the position of their neighboring 2x2 objects of a different color, one step towards them.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 4)\n                (and\n                    (neighbor_of this other)\n                    (and\n                        (size_equals (size_of other) 4)\n                        (not (color_equals (color_of this) (color_of other)))\n                    )\n                )\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of size 2 into the position of an object of size 4, and then clear the entire grid afterward.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 2)\n                (size_equals (size_of other) 4)\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color O)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the specific region of objects using the colors of neighboring objects.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) O)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color (color_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move objects towards adjacent objects of different colors until all objects of a single color are grouped together.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) (color_of other)))\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all the objects one step to align with others of the same color and the maximum size, then recolor to match.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (and\n                    (color_equals (color_of this) (color_of other))\n                    (size_equals (size_of other) max)\n                )\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n            (update_color (color_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color R one step down.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of size 1 one step downward, if there is a space below them.",
            "code": "(do\n  (rule\n    (vars (this))\n    (filter\n      (size_equals (size_of this) 1)\n    )\n    (apply\n      (move_node down)\n    )\n  )\n)"
        },
        {
            "nl_description": "Move each object toward the object of color Y if they are neighbors and different color from Y.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) Y))\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) Y)\n                )\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n        )    \n    )\n)"
        },
        {
            "nl_description": "Swap the positions of the largest objects in each grid.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (size_equals (size_of this) max)\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (size_equals (size_of other) max)\n        )\n        (apply\n            (move_node (direction_of this))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color R, Y, and B to the same positions in the center and keep the same structure.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node down)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) Y)\n        )\n        (apply\n            (move_node up)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (move_node up)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of size 2 towards the object of size 4, if they are neighbors, and then erase the trailing pixels.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 2)\n                (and\n                    (neighbor_of this other)\n                    (size_equals (size_of other) 4)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all squares of size 2 to other squares of size 2 they are neighbors of, towards their direction.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 2)\n                (and\n                    (neighbor_of this other)\n                    (size_equals (size_of other) 2)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Swap the rows containing the 'Y' objects with the rows that are located in the middle of the existing objects.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (or\n                (and\n                    (color_equals (color_of this) B)\n                    (column_equals (column_of this) center)\n                )\n                (color_equals (color_of this) Y)\n            )\n        )\n        (apply\n            (move_node down)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) Y)\n        )\n        (apply\n            (move_node up)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects except color O, one step down.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (not (color_equals (color_of this) O))\n        )\n        (apply\n            (move_node down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move the smallest objects to the location that maximizes their contact with adjacent objects of the same color.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) min)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of size greater than 1 to the bottom center of the grid.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (not (size_equals (size_of this) 1))\n        )\n        (apply\n            (move_node_max down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects one step down",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move objects of size 2 to the positions of objects of size 3, then recolor them to match the color of the destination.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 2)\n                (size_equals (size_of other) 3)\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n            (update_color (color_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend all objects of size 2 towards each other without overlapping.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 2)\n                (and\n                    (neighbor_of this other)\n                    (size_equals (size_of other) 2)\n                )\n            )\n        )\n        (apply\n            (extend_node (direction_of other) false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color R toward the objects of color Y, if they are neighbors of it.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) Y)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of size 2 to the adjacent locations of the largest objects.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 2)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects to the rows containing other objects of the same color, creating two rows for each color.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) (color_of other))\n                (not (neighbor_of this other))\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of size 2 to the positions of the objects of size 4.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 2)\n                (size_equals (size_of other) 4)\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n            (move_node (direction_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of size 4 towards other objects of size 4 until they are adjacent.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 4)\n                (size_equals (size_of other) 4)\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of size 2 towards neighboring objects of size 4",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 2)\n                (and\n                    (neighbor_of this other)\n                    (size_equals (size_of other) 4)\n                )\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Swap the positions of objects of color R and Y, and then replace their original positions with O.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) Y)\n                )\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n            (update_color O)\n        )    \n    )\n)"
        },
        {
            "nl_description": "Move all objects of color Y to the location of objects of color R, if they are neighbors of it.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) Y)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) R)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Swap the position of the minimum sized objects towards the maximum sized objects.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) min)\n                (size_equals (size_of other) max)\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Switch the positions of all pairs of objects that are next to each other but not aligned horizontally or vertically.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (not\n                    (or\n                        (and\n                            (column_equals (column_of this) (column_of other))\n                            (size_equals (size_of this) (size_of other))\n                        )\n                        (and\n                            (column_equals (column_of this) (column_of other))\n                            (height_equals (height_of this) (height_of other))\n                        )\n                    )\n                )\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n            (move_node (direction_of this))\n        )\n    )\n)"
        },
        {
            "nl_description": "Swap positions of objects to bring color blocks together in the grid.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (neighbor_of this other)\n        )\n        (apply\n            (move_node right)\n            (move_node down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color R to another object of color Y and recolor objects adjacent to them in the same way.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n            (update_color (color_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move objects of color R to the position of objects of color Y.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (color_equals (color_of other) Y)\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of size 2 one step towards the nearest neighbor horizontally aligned object with size 2, and swap colors.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 2)\n                (and\n                    (neighbor_of this other)\n                    (size_equals (size_of other) 2)\n                )\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n            (update_color (color_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move the objects with size 2 and color different than 'O' to the location of objects of the same size and color.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (size_equals (size_of this) 2)\n                (not (color_equals (color_of this) O))\n            )\n        )\n        (apply\n            (move_node down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all rectangular objects to the nearest corner.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (shape_equals (shape_of this) enclosed)\n        )\n        (apply\n            (move_node_max (direction_of this))\n        )\n    )\n)"
        },
        {
            "nl_description": "Swap the positions of the objects of color R and Y.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) Y)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all 2x2 square objects towards each other until they touch.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 4)\n                (and\n                    (neighbor_of this other)\n                    (size_equals (size_of other) 4)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )    \n    )\n)"
        },
        {
            "nl_description": "Move all objects of size 2 vertically centered with an object of the same color, and then recolor the original position to color O.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 2)\n                (and\n                    (color_equals (color_of this) (color_of other))\n                    (column_equals (column_of this) center)\n                )\n            )\n        )\n        (apply\n            (move_node down)\n            (update_color O)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color different than O one step up.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (not (color_equals (color_of this) O))\n        )\n        (apply\n            (move_node up)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move red and yellow objects towards each other, then merge the overlapping objects together.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (color_equals (color_of other) Y)\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) Y)\n                (color_equals (color_of other) R)\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all 2x2 square objects one step down.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (shape_equals (shape_of this) square)\n                (size_equals (size_of this) 4)\n            )\n        )\n        (apply\n            (move_node down)\n        )\n    )\n)"
        },
        {
            "nl_description": "For all objects of size 2, move them downwards and match their columns with those of neighboring objects, without overlapping.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 2)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (move_node down)\n            (move_node (direction_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of size 4 one step up.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 4)\n        )\n        (apply\n            (move_node up)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all the 'Y'-colored objects one step up, and move all the 'R'-colored objects one step down.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) Y)\n        )\n        (apply\n            (move_node up)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all 2x2 objects containing color R towards each other such that each row and column together form a single 2x2 object.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 2)\n                (and\n                    (neighbor_of this other)\n                    (size_equals (size_of other) 2)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )        \n    )\n)"
        },
        {
            "nl_description": "Move all objects that are neighbors of a Y object to match the position of the Y object, unless the object is already in that position.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) Y))\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) Y)\n                )\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects one step up",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node up)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all the objects of color R and Y to the positions of adjacent O objects, and then move all B objects to the adjacent positions",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (or\n                    (color_equals (color_of this) R)\n                    (color_equals (color_of this) Y)\n                )\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) O)\n                )\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) B)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) R)\n                )\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of size 2 one step up.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 2)\n        )\n        (apply\n            (move_node up)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of size 2 to each other's positions.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 2)\n        )\n        (apply\n            (move_node_max (direction_of this))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move objects of color Y and R towards each other if they are neighbors.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (or\n                    (color_equals (color_of this) Y)\n                    (color_equals (color_of this) R)\n                )\n                (and\n                    (neighbor_of this other)\n                    (or\n                        (color_equals (color_of other) Y)\n                        (color_equals (color_of other) R)\n                    )\n                )\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n)"
        }
    ]
}