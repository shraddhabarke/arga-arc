{
    "completions": [
        {
            "nl_description": "Move all objects to specified positions in the output grids where they appear in a Tetris-like falling order.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all rows to their columns in ascending order from bottom to top.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects vertically such that the ordering of rows is reversed.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter)\n        (apply\n            (move_node_max down)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter)\n        (apply\n            (move_node_max up)\n        )\n    )\n)"
        },
        {
            "nl_description": "Rotate all objects 90 degrees clockwise.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects in a downward shifted pattern. Each object at (x, y) is moved to (x, y+1) and recolored to the color of the object that was originally below it, if any.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (neighbor_of this other)\n        )\n        (apply\n            (move_node down)\n            (update_color (color_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move each object one step towards the bottom and to the right, wrapping it around the grid as needed.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node down)\n            (move_node right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move each object to the row below its original row. If the shift pushes it beyond the grid, wrap it to the top.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects to the bottom of the grid.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node_max down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move each object one row down in the grid, maintaining their colors and shapes.",
            "code": "(do\n  (rule\n    (vars (this))\n    (filter)\n    (apply\n      (move_node down)\n    )\n  )\n)"
        },
        {
            "nl_description": "Move all objects, except those of color C, one step down.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (not (color_equals (color_of this) C))\n        )\n        (apply\n            (move_node down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects downward preserving their order to make the grid more compact vertically.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all single-color objects to the row just below the row occupied by the object.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (not (color_equals (color_of this) O))\n            )\n        )\n        (apply\n            (move_node down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Rotate all objects 270 degrees clockwise.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 270)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects, except those of color C, one step down.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (not (color_equals (color_of this) C))\n        )\n        (apply\n            (move_node down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects to the bottom of the grid and swap their positions accordingly.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Rotate all the objects by 90 degrees clockwise",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects one step down.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Rotate each object 90 degrees clockwise.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of shape enclosed to the next row.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (shape_equals (shape_of this) enclosed)\n        )\n        (apply\n            (move_node down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects in the grid one step down, maintaining their original colors.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects one step down.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Rotate all objects 90 degrees clockwise.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
        },
        {
            "nl_description": "Shift each row down by one row to the next row.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Rotate all objects by 90 degrees clockwise.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
        },
        {
            "nl_description": "Rotate all objects by 90 degrees.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
        },
        {
            "nl_description": "Rotate all objects by 90 degrees clockwise.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects diagonally down-right.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node down_right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects horizontally until they hit another object without overlapping.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node_max right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects in the grid one step down.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects to the right following a specific pattern.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Rotate all objects 90 degrees clockwise.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
        },
        {
            "nl_description": "Rotate all objects clockwise by 90 degrees",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
        },
        {
            "nl_description": "Rotate all objects 90 degrees clockwise.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects upright so that the object at the top of each column will occupy the bottom rows in the same column in reverse order",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 270)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (mirror (mirror_axis_of this))\n        )\n    )\n)"
        },
        {
            "nl_description": "Shift all rows of objects upwards.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node up)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of different colors in a circular manner in the counter-clockwise direction.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node down)\n            (move_node right)\n            (move_node up)\n            (move_node left)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects downwards until they hit another object or the edge of the grid.",
            "code": "(do (rule (vars (this)) (filter) (apply (move_node_max down))))"
        },
        {
            "nl_description": "Rotate all objects 90 degrees clockwise in sequence.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move each row of objects one place down cyclically.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects one step down.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Rotate all objects 90 degrees clockwise.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects one step down.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects in reverse alphabetic order while keeping other properties same",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 270)\n        )\n    )\n)"
        },
        {
            "nl_description": "Rotate the grid by 90 degrees clockwise.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects while maintaining their relative positions until they occupy the cells previously occupied by the object right below them, if such object exists.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (move_node down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects except for those of color C and X, one step down.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (not (color_equals (color_of this) C))\n                (not (color_equals (color_of this) X))\n            )\n        )\n        (apply\n            (move_node down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Rotate all objects 90 degrees clockwise.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of size 3 one step down.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 3)\n        )\n        (apply\n            (move_node down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects up one row.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node up)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects to one step above their initial position.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node up)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects with no neighbors to the first available position in the last even row.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (not (neighbor_of this other))\n        )\n        (apply\n            (move_node down)\n            (move_node down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects that are not cyan down until they hit another object",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (not (color_equals (color_of this) C))\n        )\n        (apply\n            (move_node_max down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of size 3 one step down if there's no object below them.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 3)\n        )\n        (apply\n            (move_node down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Rotate all objects 90 degrees clockwise.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of size greater than 1 one step down.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 1)\n        )\n        (apply\n            (move_node down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects clockwise and swap the colors of adjacent rows.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node down)\n            (move_node left)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all rows down except the bottommost one.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects to the next available row below them.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Rotate all objects counterclockwise by 90 degrees.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
        },
        {
            "nl_description": "Rotate all objects 90 degrees clockwise.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of each row one row downward, without changing their horizontal positions.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects to the bottom row, keeping their relative vertical order.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move objects to the right horizontally without overlapping, preserving their vertical order.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter)\n        (apply\n            (move_node right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Shift all objects downwards while maintaining their order until their bottom edge touches the bottom of the grid or another object.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node_max down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects toward the bottom, aligning them column by column in the order of appearance from top to bottom.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node_max down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects to their original vertical position minus the same amount of rows as they had in their height, if the result is a valid position in the grid.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node up)\n        )\n    )\n)"
        },
        {
            "nl_description": "Rotate all objects 90 degrees clockwise, in such a way that they move to the right and wrap around.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
        },
        {
            "nl_description": "Rotate all objects 90 degrees clockwise.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects one step down",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Rotate all objects by 90 degrees clockwise.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
        },
        {
            "nl_description": "Rotate all objects 90 degrees clockwise.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects one step down, except the object with size of 7.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (not (size_equals (size_of this) 7))\n        )\n        (apply\n            (move_node down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Rotate each column down one position.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Rotate all objects 90 degrees",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects that are not C one step downwards.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (not (color_equals (color_of this) C))\n        )\n        (apply\n            (move_node down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Rotate all objects 90 degree clockwise.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
        },
        {
            "nl_description": "Shift each row of objects to the right, wrapping around to the next row.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects to a position one spot down.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of size 2 down, and then move all objects of size 3 up.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 2)\n        )\n        (apply\n            (move_node down)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 3)\n        )\n        (apply\n            (move_node up)\n        )\n    )\n)"
        },
        {
            "nl_description": "Rotate all objects 90 degrees clockwise if they are in the top half of the grid.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (or\n                (and\n                    (column_equals (column_of this) even)\n                    (column_equals (column_of this) odd)\n                )\n                (and\n                    (column_equals (column_of this) even)\n                    (column_equals (column_of this) center)\n                )\n            )\n        )\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects one row down until they hit another object.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node_max down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Rotate each row to the left by the position of the first non-black object in that row.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter (neighbor_of this other))\n        (apply\n            (move_node left)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of this) O)\n            )\n        )\n        (apply\n            (move_node left)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) O)\n        )\n        (apply\n            (noop)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (noop)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects to the row where they fit starting from the top, through a permutation.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move each object to the place of the next object of similar size.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (size_equals (size_of this) 2))\n        (apply\n            (move_node down_right)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter (size_equals (size_of this) 3))\n        (apply\n            (move_node down)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter (size_equals (size_of this) 4))\n        (apply\n            (move_node down_right)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter (size_equals (size_of this) 6))\n        (apply\n            (move_node up)\n        )\n    )\n)"
        },
        {
            "nl_description": "Rotate all objects 90 degrees clockwise.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects to the last empty row of the grid in reverse order they appear.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects towards the bottom right without overlapping.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node down_right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects one row down.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Rotate all objects to align their horizontal base with the bottom row of the grid.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Shift all objects one step down.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Rotate all objects 90 degrees clockwise.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
        },
        {
            "nl_description": "Rotate all objects 90 degrees clockwise.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects one step down",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Rotate each neighbor of the object located at the bottom of any upper object by 90 degrees clockwise.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (neighbor_of other this)\n        )\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects in a counter-clockwise rotation to the next object's original position.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter)\n        (apply\n            (move_node right)\n            (move_node down)\n            (move_node left)\n            (move_node up)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move objects towards their neighbor if their color is G, R, B or Y.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (or\n                (color_equals (color_of this) G)\n                (or\n                    (color_equals (color_of this) R)\n                    (or\n                        (color_equals (color_of this) B)\n                        (color_equals (color_of this) Y)\n                    )\n                )\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects one step down.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor each object, moving each object one step down in reverse vertical order of their initial vertical positions (topmost objects become the lowest layer and vice versa in the final vertical order).",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node down)\n            (update_color (color_of this))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects one step down, in the order they appear in the first non-empty row.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) O))\n                (or\n                    (neighbor_of this other)\n                    (color_equals (color_of other) B))\n            )\n        )\n        (apply\n            (move_node down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all the objects one step down.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node down)\n        )\n    )\n)"
        }
    ]
}