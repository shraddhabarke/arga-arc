{
    "completions": [
        {
            "nl_description": "Extend all yellow objects towards red objects without overlapping.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) C)\n                (color_equals (color_of other) R)\n            )\n        )\n        (apply\n            (extend_node (direction_of other) false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects of color C to color C.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of this) C)\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Change the color of all neighbors of color R to color C.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of this) R)\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Transform adjacent Rs in columns into Cs.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) R)\n                )\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Change the color of all contiguous squares of color X to C.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects of size 1 to color C",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 1)\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend the red objects toward the cyan cell and update the color of the extended cyan objects to red.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (color_equals (color_of other) C)\n            )\n        )\n        (apply\n            (extend_node (direction_of other) false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Change the color of fuchsia object neighbors to cyan.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of other) R)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the objects adjacent to objects other than 'R' to color 'C'.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (not (color_equals (color_of other) R))\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend the objects of size 1 towards the objects of color X, without overlapping.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) X)\n                )\n            )\n        )\n        (apply\n            (extend_node (direction_of other) false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects of color X to color C.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor object of color X in input pairs to color C.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Color objects of size 2 that are neighbors of objects of color R to color C.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 2)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) R)\n                )\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend objects adjacent to colored objects (excluding X) vertically until they intersect.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) X))\n                (and\n                    (neighbor_of this other)\n                    (not (color_equals (color_of other) X))\n                )\n            )\n        )\n        (apply\n            (extend_node (direction_of other) true)\n        )\n    )\n)"
        },
        {
            "nl_description": "Change the color of all 'X' objects directly to the right of 'R' objects to 'C'.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) X)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) R)\n                )\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend all objects of color X by 1 step towards the object of color R, without overlapping.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) X)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) R)\n                )\n            )\n        )\n        (apply\n            (extend_node (direction_of other) false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend all objects of color R towards the object of color X, without overlapping.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) X)\n                )\n            )\n        )\n        (apply\n            (extend_node (direction_of other) false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Color the objects that are neighbors of C color with C color.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) C))\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects adjacent to an object of color R in the direction of the R object, and recolor both those objects and the adjacent R objects to color C.",
            "code": "(do\n  (rule\n    (vars (this other))\n    (filter\n      (and\n        (neighbor_of this other)\n        (or\n          (color_equals (color_of this) R)\n          (color_equals (color_of other) R)\n          )\n        )\n      )\n    (apply\n      (move_node (direction_of other))\n      (update_color C)\n      )\n    )\n  )\n"
        },
        {
            "nl_description": "Extend all R objects, without overlapping, along the line of maximum length, then change the color of R to C.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (extend_node (direction_of other) false)\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Change color of all X objects that are neighbors of R to color C.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) X)\n                (and\n                    (color_equals (color_of other) R)\n                    (neighbor_of this other)\n                )\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Change the color of the neighbors of the objects of color R to color C.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) R)\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend all objects of color R to the size of the object with maximum size in the grid, without overlapping.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (size_equals (size_of other) max)\n            )\n        )\n        (apply\n            (extend_node (direction_of other) false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Change color of the smallest object to color C.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) min)\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the immediate neighboring objects of color R to color C.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) R)\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all 'C' objects to color C.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of other) C)\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Change the color of all objects containing color 'C' to color 'C'.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) C)\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects of size 1 towards their neighboring object of maximum size to color C",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (and\n                    (neighbor_of this other)\n                    (size_equals (size_of other) max)\n                )\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects of color X to color C.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor objects of size 4 and 5 with color C.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (or\n                (size_equals (size_of this) 4)\n                (size_equals (size_of this) 5)\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend all orange objects towards red objects without overlapping.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) A)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) R)\n                )\n            )\n        )\n        (apply\n            (extend_node (direction_of other) false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend all objects of color R towards the object of color X, if they are neighbors of it, without overlapping.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) X)\n                )\n            )\n        )\n        (apply\n            (extend_node (direction_of other) false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend all objects of color R to the nearest object of color C without overlapping.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (color_equals (color_of other) C)\n            )\n        )\n        (apply\n            (extend_node (direction_of other) false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all neighbors of the object of color 'R' to color 'C'.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of other) R)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend all objects of size 1 that are neighbors of an object colored R and recolor them to color C, without overlapping.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) R)\n                )\n            )\n        )\n        (apply\n            (extend_node (direction_of other) false)\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Change the color of the objects next to a R object to color C, while keeping R objects unchanged.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of other) R)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color C)\n        )    \n    )\n)"
        },
        {
            "nl_description": "Recolor the object that is exactly between the two objects of size 1 to color C.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (and\n                    (neighbor_of this other)\n                    (neighbor_of other this)\n                )\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects neighboring R to color C.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) R)\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend node of color R, size 1 toward neighbor in direction.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (and\n                    (color_equals (color_of this) R)\n                    (neighbor_of this other)\n                )\n            )\n        )\n        (apply\n            (extend_node (direction_of other) false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects of color X to color C in all positions.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor objects of size 3 to color C",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 3)\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of size 1 toward the object of color R if they are neighbors of it.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) R)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects of size 1 to color C when they are neighbors to objects of color R.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) R)\n                )\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend all objects of color R towards the object of color C, without overlapping.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) C)\n                )\n            )\n        )\n        (apply\n            (extend_node (direction_of other) false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the longest vertical object of color R to color C.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects of size 1 to color C.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 1)\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects of color X that are neighbors of objects colored R to color C.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) X)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) R)\n                )\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Change the color of any isolated object from X to C if a neighboring object is red.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) X)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) R)\n                )\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the X-colored objects with size count 1 to color C",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) X)\n                (size_equals (size_of this) 1)\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects to color C if they are neighbors of objects of color R.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) R)\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Wherever an object, besides those of color 'R', is in contact with an object of color 'R', change the color of the object to 'C'.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) R))\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) R)\n                )\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects of size 1 to color C.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 1)\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Change objects colored in X to color C if they neighbor an object that is colored R.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) X)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) R)\n                )\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects adjacent to an object of color R to color C.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) R)\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend all objects of size 1 towards the nearest object of size greater than 1, without overlapping, and recolor them to color C.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (and\n                    (neighbor_of this other)\n                    (not (size_equals (size_of other) 1))\n                )\n            )\n        )\n        (apply\n            (extend_node (direction_of other) false)\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Change the color of the smallest neighboring object of R to C.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (and (color_equals (color_of other) R) (size_equals (size_of this) min))\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Change the color of all objects that are neighbors of a red object and are connected to at least one red object to C.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (and\n                    (neighbor_of this other)\n                    (not (color_equals (color_of other) R))\n                )\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend objects of color R towards the nearest object of color C, without overlapping.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (extend_node (direction_of other) false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend objects of color R by moving them horizontally until they encounter another object or edge of the grid, filling the space with color C.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (extend_node left false)\n            (extend_node right false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor object of size three of color X to C.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (size_equals (size_of this) 3)\n                (color_equals (color_of this) X)\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of size 2 or smaller toward the object of color R if they are neighbors of it.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 2)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) R)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) R)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Change the color of all 'O' cells that are next to 'R' cells to 'C'.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) O)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) R)\n                )\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Change the color of all objects to C if they are neighbors of an object of color R, or if they are neighbors of C.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (or\n                (neighbor_of this other)\n                (or\n                    (color_equals (color_of other) R)\n                    (color_equals (color_of other) C)\n                )\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Change color of all Cs and Rs in size 1 objects to C.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (or\n                    (color_equals (color_of this) R)\n                    (color_equals (color_of this) C)\n                )\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color R horizontally towards the object of color X if they are neighbors, then change color to C.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) X)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend all the objects of size 1 toward the object of color R, without overlapping.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) R)\n                )\n            )\n        )\n        (apply\n            (extend_node (direction_of other) false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Change the color of objects with color 'X' to 'C' if they are neighbors to an object of color 'R'.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) X)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) R)\n                )\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Change the color of all objects from X to C if they are neighbors to the object R.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) X)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) R)\n                )\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Change color of objects R to C if they are neighbors of any object X.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) X)\n                )\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects of size 1 and neighbors of an object R to color C.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) R)\n                )\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects that are neighbors of an object colored 'R' to 'C'.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) R)\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects, that are adjacent to an object of color R, to color C.",
            "code": "(do\n    (rule\n         (vars (this other))\n         (filter\n             (and\n                 (neighbor_of this other)\n                 (color_equals (color_of other) R)\n              )\n         )\n         (apply\n             (update_color C)\n         )\n    )\n)"
        },
        {
            "nl_description": "Add a border of color C to the largest object of color R.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (size_equals (size_of this) max)\n            )\n        )\n        (apply\n            (add_border C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor objects of size 1 that are neighbors of object R to color C.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) R)\n                )\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all cells next to cells with color R to color C",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) R)\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "For all objects of color R, change the color of all their neighbor object(s) of maximum size to color C.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (and\n                    (neighbor_of other this)\n                    (size_equals (size_of other) max)\n                )\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor to color C the columns of objects X between columns containing objects R.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (and\n                    (color_equals (color_of this) X)\n                    (color_equals (color_of other) R)\n                )\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the columns of objects made of contiguous X characters to C if they are in the same neighborhood with an object of color R.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) X)\n                (and\n                    (color_equals (color_of other) R)\n                    (neighbor_of this other)\n                )\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects of color C from color X.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and (color_equals (color_of this) C) (color_equals (color_of other) X))\n        )\n        (apply\n            (update_color X)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects of color X with color C while preserving the rest of the objects.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Change the color of objects of color X to color C if they are neighbors of objects of color R.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) X)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) R)\n                )\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects of minimum size with color C",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) min)\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects of color X to color C",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend all objects colored R horizontally in both directions, until they hit another object or the grid edge.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (extend_node left false)\n            (extend_node right false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend all red 'R' objects to cyan 'C' horizontally.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (extend_node right false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor object neighbors of X with color C.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) X)\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor objects close to R in the grid to color C.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) R)\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Identify all objects made of X, and fill the common intersections of these objects with color C.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) X)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (fill_rectangle C false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Change the objects that share the same row as an object of color R to color C.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of other) R)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all the C-shaped objects to color C",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 6)\n                (not (color_equals (color_of this) X))\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Change color of objects of size 4 to color C",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 4)\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects of color X to color C",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Change the color of objects adjacent to red objects to cyan.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) R)\n            )\n        )\n        (apply\n            (update_color C)\n        )    \n    )\n)"
        },
        {
            "nl_description": "Recolor all objects of size 1 to color C.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 1)\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Change the color of all objects neighboring 'R' to 'C'.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) R)\n            )\n        )\n        (apply\n            (update_color C)\n        )    \n    )\n)"
        },
        {
            "nl_description": "Recolor objects of size 1 to color C, if they are neighbors to an object of color R.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) R)\n                )\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend all objects of color R horizontally to the left until they hit another object, and recolor objects of color R to color C.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (extend_node left false)\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Update color to C for all objects of size 1 that are neighbors to an object of color R.",
            "code": "(do (rule (vars (this other)) (filter (and (size_equals (size_of this) 1) (and (neighbor_of this other) (color_equals (color_of other) R)))) (apply (update_color C))))"
        },
        {
            "nl_description": "Change color of the objects of color C to the one of neighboring object R.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) C)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) R)\n                )\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n)"
        },
        {
            "nl_description": "Change the color of neighboring objects of maximum size, towards the object of color R, if they are neighbors of it.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (and\n                    (color_equals (color_of other) R)\n                    (size_equals (size_of this) max)\n                )\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        }
    ]
}