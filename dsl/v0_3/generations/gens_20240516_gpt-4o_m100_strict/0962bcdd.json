{
    "completions": [
        {
            "nl_description": "Move all objects of color R or F diagonally by multiple steps to follow a checker pattern",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (or\n                (color_equals (color_of this) R)\n                (color_equals (color_of this) F)\n            )\n        )\n        (apply\n            (move_node_max down_right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects not of color O towards the nearest object of color O and recolor them to R.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) O))\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n            (update_color R)\n        )\n    )\n)"
        },
        {
            "nl_description": "Change the colors of objects that are neighbors of objects of color 'R' to 'R'.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (neighbor_of this other)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color different than O, in a checkerboard pattern, if they are neighbors of another object, with color changing in a checkerboard pattern.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) O))\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n            (update_color (color_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move objects of color different than O and neighbors of color O towards the objects of color O with maximum step around them.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) O))\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Insert color R at the diagonals of each object, while changing the color of object F, to form symmetric patterns.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (or\n                (color_equals (color_of this) R)\n                (color_equals (color_of this) F)\n            )\n        )\n        (apply\n            (insert 1 top_left source)\n            (insert 1 bottom_left source)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects that are neighbors of an object of color A towards the object of color A, up to the edge of the grid.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) A)\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of size 1 one step outward from the central object and then recolor them to color R.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (and\n                    (neighbor_of this other)\n                    (and\n                        (color_equals (color_of other) A)\n                        (size_equals (size_of other) max)\n                    )\n                )\n            )\n        )\n        (apply\n            (move_node (direction_of this))\n            (update_color R)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color different than O, toward the object of color O, if they are neighbors of it.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) O))\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color different than O, toward the object of color O, if they are neighbors of it.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) O))\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) O)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color different than O by one step towards their neighboring objects and recolor them to R and F alternatively.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) O))\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n            (update_color R)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects with color other than O towards the nearest object of color O that they are neighbors to.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) O))\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) O)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects that are neighbors of an object of color R or F one step outward from the grid's center.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (or\n                    (color_equals (color_of other) R)\n                    (color_equals (color_of other) F)\n                )\n            )\n        )\n        (apply\n            (move_node (direction_of this))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects adjacent to 'R' or 'F' at distance 1 towards it, then extend the objects outward.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (or\n                (neighbor_of this other)\n                (color_equals (color_of other) R)\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n            (extend_node (direction_of this) false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color different than O towards the grid borders, then recolor all objects in the grid to R.",
            "code": "(do \n    (rule \n        (vars (this)) \n        (filter \n            (not (color_equals (color_of this) O)) \n        ) \n        (apply \n            (move_node_max up) \n            (move_node_max down) \n            (move_node_max left) \n            (move_node_max right) \n        ) \n    ) \n    (rule \n        (vars (this)) \n        (filter) \n        (apply \n            (update_color R) \n        ) \n    ) \n)"
        },
        {
            "nl_description": "Move all objects to shift all the grid rows down cyclically and extending all multicolored objects.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node down)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) max)\n                (degree_equals (degree_of other) max)\n            )\n        )\n        (apply\n            (extend_node (direction_of this) false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color different than O one step in a diagonal direction, and then recolor them to color R.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (not (color_equals (color_of this) O))\n        )\n        (apply\n            (move_node down_right)\n            (update_color R)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move the objects of color A one step away from objects of color R or C, and then recolor them to color R or F respectively.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) A)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) A)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) F)\n        )\n        (apply\n            (update_color F)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects one step towards their neighbors, if their neighbor is a different color, then recolor all objects of color A and C to R and F respectively.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (not (color_equals (color_of this) (color_of other)))\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) A)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) C)\n        )\n        (apply\n            (update_color F)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects one step in the direction of the object of color R if they are neighbors of it, and then extend all objects of color R upwards, without overlapping.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of other) R)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (extend_node up false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color R toward the nearest object of color A.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move objects of color F toward objects of color A or C if they are neighbors, and then rotate them 90 degrees.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) F)\n                (or\n                    (color_equals (color_of other) A)\n                    (color_equals (color_of other) C)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n            (rotate_node 90)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects with color R to fill gaps in the object of color A and change color of moved objects to R.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) A)\n                )\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color R or F to the direction of the nearest A or C respectively, without overlapping.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (or\n                    (color_equals (color_of this) R)\n                    (color_equals (color_of this) F)\n                )\n                (and\n                    (neighbor_of this other)\n                    (or\n                        (color_equals (color_of other) A)\n                        (color_equals (color_of other) C)\n                    )\n                )\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color different than O, one step toward any other object, changing color of moved objects to R. Also, move objects adjacent to C diagonally outward and color them F.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (not (color_equals (color_of this) O))\n        )\n        (apply\n            (move_node (direction_of other))\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) C)\n            )\n        )\n        (apply\n            (move_node up_left)\n            (move_node up_right)\n            (move_node down_left)\n            (move_node down_right)\n            (update_color F)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color A towards the nearest object of color R if they are neighbors.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) A)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) R)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all adjacent objects perpendicular to their positions around the central object in each group to form a cross shape.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node up)\n            (move_node down)\n            (move_node left)\n            (move_node right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all neighbors of objects of color R to color R.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) R)\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects that are neighbors of objects of color different than O, until they hit another object, then recolor them to color R.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) O)\n                (and\n                    (neighbor_of this other)\n                    (not (color_equals (color_of other) O))\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n            (update_color R)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of size 1 toward objects of color F, without overlapping.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) F)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend all objects of color A in the direction of adjacent objects of color R, without overlapping, and then extend all objects of color C in the direction of adjacent objects of color F, without overlapping.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) A)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) R)\n                )\n            )\n        )\n        (apply\n            (extend_node (direction_of other) false)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) C)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) F)\n                )\n            )\n        )\n        (apply\n            (extend_node (direction_of other) false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Insert the color R in-between each adjacent pair of objects of color A.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) A)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (insert 0 (img_pts_of this) middle)\n            (update_color R)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color different than O one step up, if they are surrounded by objects of color O.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) O))\n                (and\n                    (not (neighbor_of this other))\n                    (color_equals (color_of other) O)\n                )\n            )\n        )\n        (apply\n            (move_node up)\n        )\n    )\n)"
        },
        {
            "nl_description": "Change the color of all neighbors of the objects colored 'R' to 'R', and move them in the direction of 'R'. Then, change the color of all remaining 'A' objects to 'R'.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (neighbor_of this other)\n        )\n        (apply\n            (update_color (color_of other))\n            (move_node (direction_of other))\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) A)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects with size 1 towards the object of color 'R' if they are neighbors of it.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) R)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend all objects horizontally twice if size equals 1.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (size_equals (size_of this) 1)\n        )\n        (apply\n            (extend_node right false)\n            (extend_node left false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of size 1 toward their neighbors, and recolor the resulting position to R if neighbor was R, and F if neighbor was F",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n            (update_color (color_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "For each object, move it one step in each direction, and then recolor them to alternate between R and F.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node up)\n            (move_node down)\n            (move_node left)\n            (move_node right)\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node up)\n            (move_node down)\n            (move_node left)\n            (move_node right)\n            (update_color F)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color different than O one step in all 8 possible directions (up, down, left, right, up_right, up_left, down_right, down_left), leaving a trail.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (not (color_equals (color_of this) O))\n        )\n        (apply\n            (extend_node up false)\n            (extend_node down false)\n            (extend_node left false)\n            (extend_node right false)\n            (extend_node up_right false)\n            (extend_node up_left false)\n            (extend_node down_right false)\n            (extend_node down_left false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color different than O, toward the nearest object of color O, if they are neighbors of it, then recolor them to color R.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) O))\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) O)\n                )\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n            (update_color R)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all R objects to the positions where they are neighbours of the input grid. Also, F objects move to the positions where they are neighbors of the input grid.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) F)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n            (update_color F)\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend all the objects of size 1 toward the object of maximum size, including overlapping.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (and\n                    (neighbor_of this other)\n                    (size_equals (size_of other) max)\n                )\n            )\n        )\n        (apply\n            (extend_node (direction_of other) true)\n        )    \n    )\n)"
        },
        {
            "nl_description": "Move all objects of color different than O, towards the neighboring object of the same color, extending a path, without overlapping.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) O))\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (extend_node (direction_of other) false)\n        )\n    )\n)"
        },
        {
            "nl_description": "For objects with alternate color neighbors, move them to all empty neighboring spaces, then recolor all empty spaces to R.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) A)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (not (color_equals (color_of this) A))\n                (not (color_equals (color_of this) R))\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects different than 'O' towards the neighboring 'O' object to their right and then recolor them if they are neighbors of an 'R' object.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (neighbor_of this other)\n        )\n        (apply\n            (move_node (direction_of other))\n            (update_color R)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color different than O, towards up or down alternatively if they are adjacent to another object.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (not (color_equals (color_of this) O))\n        )\n        (apply\n            (move_node up)\n            (move_node down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color different than O (black) one step toward the closest neighbor of a different color, and recolor them to color R.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) O))\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n            (update_color R)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects one step diagonally if they are neighbors of their own color.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of this) (color_of other))\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Objects move towards their neighboring 'A' or 'F' objects and then change their colors to 'R' or 'F'.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (or\n                    (color_equals (color_of other) A)\n                    (color_equals (color_of other) F)\n                )\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n            (update_color (color_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of size 1 towards the object of color closest to their initial position, and recolor them R.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n            (update_color R)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects of color 'O' and that are neighbors of objects of color 'R' to color 'R'.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) O)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) R)\n                )\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color different than O, one step towards the edge of the grid, recoloring them to F if they reach an edge.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) O))\n                (not (neighbor_of this other))\n            )\n        )\n        (apply\n            (move_node_max up)\n            (move_node_max down)\n            (move_node_max left)\n            (move_node_max right)\n            (update_color F)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color different than O, toward the nearest object of color O if they are neighbors, and recolor them to R and F alternately.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) O))\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) O)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) O))\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) O)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n            (update_color F)\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend all objects of color A and C toward the object of color R and F respectively, without overlapping.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (or\n                    (color_equals (color_of this) A)\n                    (color_equals (color_of this) C)\n                )\n                (and\n                    (neighbor_of this other)\n                    (or\n                        (color_equals (color_of other) R)\n                        (color_equals (color_of other) F)\n                    )\n                )\n            )\n        )\n        (apply\n            (extend_node (direction_of other) false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color F toward the nearest object of color R, then recolor to R",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) F)\n                (color_equals (color_of other) R)\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n            (update_color R)\n        )\n    )\n)"
        },
        {
            "nl_description": "Insert red objects in adjacent cells around objects of color A or C.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (or\n                (color_equals (color_of this) A)\n                (color_equals (color_of this) C)\n            )\n        )\n        (apply\n            (insert 1 top source)\n            (update_color R)\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend objects of color A and C in all directions, and change their colors to the color of the adjacent object.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (or\n                (color_equals (color_of this) A)\n                (color_equals (color_of this) C)\n            )\n        )\n        (apply\n            (extend_node (direction_of other) false)\n            (update_color (color_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects horizontally and vertically toward objects of color different than O, if they are neighbors of them.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of other) O))\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of size 1 one step towards the object of size 5",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (and\n                    (neighbor_of this other)\n                    (size_equals (size_of other) 5)\n                )\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n        )    \n    )\n)"
        },
        {
            "nl_description": "Move all neighboring objects towards R or F diagonally, and then recolor them to R or F respectively.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (or\n                    (color_equals (color_of other) R)\n                    (color_equals (color_of other) F)\n                )\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n            (update_color (color_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color different than O, one step right if they are neighbors of an object of color R or C.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) O))\n                (or\n                    (neighbor_of this other)\n                    (or\n                        (color_equals (color_of other) R)\n                        (color_equals (color_of other) C)\n                    )\n                )\n            )\n        )\n        (apply\n            (move_node right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects towards the object of a different color, then recolor.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (not (color_equals (color_of this) (color_of other)))\n        )\n        (apply\n            (move_node (direction_of other))\n            (update_color (color_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Add a border of the color R to all objects of color A.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) A)\n        )\n        (apply\n            (add_border R)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all red objects to positions adjacent to the nearest object of color A or C, while recoloring them to R if they overlap with another object.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (or\n                    (color_equals (color_of other) A)\n                    (color_equals (color_of other) C)\n                )\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n            (update_color R)\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend all objects of color different from O toward the object of color O, overlapping.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) O))\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (extend_node (direction_of other) true)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color different than O one step in a diagonal direction and recolor them to color R.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (not (color_equals (color_of this) O))\n        )\n        (apply\n            (move_node down_right)\n            (update_color R)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all non-black objects toward the center of the grid, as far as possible, and then recolor them to color 'F'.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (not (color_equals (color_of this) O))\n        )\n        (apply\n            (move_node_max down)\n            (move_node_max right)\n            (update_color F)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color different than O, in the direction of color O, if they are neighbors of it, and recolor them to color R.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) O))\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n            (update_color R)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color 'R' toward the object of color 'A', if they are neighbors of it.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) A)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color other than O one step to their right and then recolor them to R or F depending on their initial color.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (not (color_equals (color_of this) O)))\n        (apply\n            (move_node right)\n            (update_color (color_of this))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects one step away from the object of color A and recolor them to R, if they are neighbors of it",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) A)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n            (update_color R)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of size 1 in all directions until they form neighbors, keeping their positions fixed.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 1)\n        )\n        (apply\n            (move_node_max up)\n            (move_node_max down)\n            (move_node_max left)\n            (move_node_max right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move any object towards R if it is neighboring R. Recolor objects to R if they become neighbors of A. Move any object towards F if it is neighboring F.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) R)\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) A)\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) F)\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Change the color of all neighbors of color A to color R.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) A)\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move objects of color R towards the diagonally neighboring A objects, then move objects of color F towards the diagonally neighboring C objects.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) A)\n                )\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) F)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) C)\n                )\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects of size 1 to color R, objects of size 2 to color F, and objects of size 3 to color C",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 1)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 2)\n        )\n        (apply\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 3)\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color different than O one step towards right, left, up, and down if they can. Recolor moved objects to color R.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) O))\n                (and\n                    (neighbor_of this other)\n                    (or\n                        (column_equals (column_of this) (column_of other))\n                        (not (column_equals (column_of this) (column_of other)))\n                    )\n                )\n            )\n        )\n        (apply\n            (move_node right)\n            (move_node left)\n            (move_node up)\n            (move_node down)\n            (update_color R)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects to a new color in their neighborhood and form a cross pattern if their current color is A or C.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (or\n                (color_equals (color_of this) A)\n                (color_equals (color_of this) C)\n            )\n        )\n        (apply\n            (move_node (direction_of this))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color different than O to the positions where they will form a cross pattern.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (not (color_equals (color_of this) O))\n        )\n        (apply\n            (move_node down)\n            (move_node left)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all the objects up if they are neighbors of an object of size one, and recolor them to R.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (size_equals (size_of other) 1)\n            )\n        )\n        (apply\n            (move_node up)\n            (update_color R)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color R and F toward the center in a checkerboard pattern, if they are neighbors of objects A and C respectively.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) A)\n                )\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) F)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) C)\n                )\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all neighbors of objects of color R or F to color R or F respectively.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of other) R)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of other) F)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color F)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects towards the center object and color the center object along its path.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node up)\n            (update_color R)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects that are neighbors of the object color A, in the direction of the object of color A.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) A)\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of size 1 to the neighboring position of the object of color R or F, and then recolor them to the color R or F respectively.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (or\n                    (neighbor_of this other)\n                    (color_equals (color_of other) R)\n                )\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (or\n                    (neighbor_of this other)\n                    (color_equals (color_of other) F)\n                )\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n            (update_color F)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects with color A to color R.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) A)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n)"
        },
        {
            "nl_description": "Alternate the color of adjacent neighbors of each object.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (neighbor_of this other)\n        )\n        (apply\n            (update_color (color_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of size 1 one step towards each neighboring object of size 3 and recolor them to R.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (size_equals (size_of other) 3)\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n            (update_color R)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color F towards the nearest object of the same size, and recolor them to R",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) F)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n            (update_color R)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects to one step in direction of objects of color R or F, if they are their neighbors.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and (neighbor_of this other) (or (color_equals (color_of other) R) (color_equals (color_of other) F)))\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color different than O towards the object of color O, if they are neighbors of it.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) O))\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) O)\n                )\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color R to their diagonal position and recolor them, then move all objects of color F to their diagonal position and recolor them.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node up_right)\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) F)\n        )\n        (apply\n            (move_node down_right)\n            (update_color F)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the objects of size 1 to color R. For all other objects, alternate their color between F and O, starting with F.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 1)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (size_equals (size_of this) 3)\n        )\n        (apply\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (size_equals (size_of this) 5)\n        )\n        (apply\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (size_equals (size_of this) 3)\n                (color_equals (color_of this) F)\n            )\n        )\n        (apply\n            (update_color O)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color R and F to the neighbor's position until they hit another object or the edge.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (or\n                (color_equals (color_of this) R)\n                (color_equals (color_of this) F)\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color different than O, alternately towards left and right, for up to 2 steps.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (not (color_equals (color_of this) O))\n        )\n        (apply\n            (move_node left)\n            (move_node right)\n            (move_node left)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all R and F objects to positions forming a border with R and F and recolor the objects to match the border color in checkerboard style",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (or\n                (color_equals (color_of this) R)\n                (color_equals (color_of this) F)\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n            (update_color (color_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color different than O, toward the object of color O, if they are neighbors of it.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) O))\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) O)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend all objects of color R or F from their respective position without overlapping.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (or\n                (color_equals (color_of this) R)\n                (color_equals (color_of this) F)\n            )\n        )\n        (apply\n            (extend_node (direction_of this) false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color different than O, toward the object of color O, if they are neighbors of it.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) O))\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of size 1 one step to the right and then recolor them to R.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 1)\n        )\n        (apply\n            (move_node right)\n            (update_color R)\n        )\n    )\n)"
        }
    ]
}