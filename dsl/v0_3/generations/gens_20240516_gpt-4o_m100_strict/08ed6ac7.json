{
    "completions": [
        {
            "nl_description": "Recolor each column of objects separately with colors R, G, B, and Y.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (column_equals (column_of this) 2))\n        (apply (update_color R))\n    )\n    (rule\n        (vars (this))\n        (filter (column_equals (column_of this) 4))\n        (apply (update_color G))\n    )\n    (rule\n        (vars (this))\n        (filter (column_equals (column_of this) 6))\n        (apply (update_color B))\n    )\n    (rule\n        (vars (this))\n        (filter (column_equals (column_of this) 8))\n        (apply (update_color Y))\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects of color X to different colors in a vertical pattern: R, G, B, and Y.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (neighbor_of this this)\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) G)\n                (neighbor_of this this)\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) B)\n                (neighbor_of this this)\n            )\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor each column of the objects with distinct colors.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) O))\n                (column_equals (column_of this) (column_of other))\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) O))\n                (column_equals (column_of this) (column_of other))\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) O))\n                (column_equals (column_of this) (column_of other))\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) O))\n                (column_equals (column_of this) (column_of other))\n            )\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor each column of objects that have 'X' color, into different colors in sequence.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) X)\n                (column_equals (column_of this) 1)\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) X)\n                (column_equals (column_of this) 2)\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) X)\n                (column_equals (column_of this) 3)\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) X)\n                (column_equals (column_of this) 4)\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) X)\n                (column_equals (column_of this) 5)\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) X)\n                (column_equals (column_of this) 6)\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) X)\n                (column_equals (column_of this) 7)\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) X)\n                (column_equals (column_of this) 8)\n            )\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (size_equals (size_of this) 3)\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the objects in the left column to R, then recolor the objects in the second column from the left to G, and recolor the objects in the rightmost column to Y. Finally, color the objects in the middle column to B.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 1)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 2)\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 9)\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 4)\n        )\n        (apply\n            (update_color B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor each column of objects with different colors.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 1)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 3)\n        )\n        (apply\n            (update_color G)\n        )\n    )\n\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 6)\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 7)\n        )\n        (apply\n            (update_color B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor each column of objects with alternating colors starting from R at the second column of Xs and B at the third column of Xs.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (column_equals (column_of this) 1)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (column_equals (column_of this) 2)\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (column_equals (column_of this) 3)\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (column_equals (column_of this) 4)\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects in the first column one step to the right, then recolor them to the colors red, green, blue and yellow from top to bottom.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 1)\n        )\n        (apply\n            (move_node right)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (column_equals (column_of this) 2)\n                (neighbor_of this this)\n            )\n        )\n        (apply\n            (update_color R)\n            (update_color G)\n            (update_color B)\n            (update_color Y)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the neighboring objects of each column of width 1 in different colors in a sequence.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (width_equals (width_of this) 1)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color (color_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor objects of color X to respective colors: first column to R, second column to G, third column to B, and so on until the last column which is recolored to Y.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 1)\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 2)\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 3)\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor column of objects to a different color.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n            (apply\n                (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n                (column_equals (column_of this) 2)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n                (column_equals (column_of this) 4)\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n                (column_equals (column_of this) 8)\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor X objects to different colors row by row starting from the top.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) X)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color (color_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor each column of objects alternately to colors R, G, B, Y starting from the second column.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 1)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 3)\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 5)\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 7)\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n)"
        },
        {
            "nl_description": "Change the color of objects in vertical columns to different colors.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (column_equals (column_of this) even)\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (column_equals (column_of this) odd)\n                (not (color_equals (color_of this) X))\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (column_equals (column_of this) odd)\n                (color_equals (color_of this) R)\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (column_equals (column_of this) odd)\n                (color_equals (color_of this) G)\n            )\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects column-wise each column to a different color (in sequence: B -> R -> G -> Y)",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (column_equals (column_of this) 6))\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter (column_equals (column_of this) 2))\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter (column_equals (column_of this) 4))\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter (column_equals (column_of this) 8))\n        (apply\n            (update_color Y)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the neighbors of the object of color X sequentially in the order R, G, B, Y.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of other) X)\n        )\n        (apply\n            (update_color R)\n            (update_color G)\n            (update_color B)\n            (update_color Y)\n        )\n    )\n)"
        },
        {
            "nl_description": "Sequentially recolor each odd column of the object of maximum height with the colors R, G, B, and Y",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 1)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 3)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 5)\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 7)\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 9)\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the column blocks to different colors from top to bottom.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) X)\n            )\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) Y)\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) G)\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) B)\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor each occurrence of X to the following sequence of colors: B, R, G, Y.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) X))\n        (apply\n            (update_color B)\n            (update_color R)\n            (update_color G)\n            (update_color Y)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all vertical lines first to R, then to G, B, and lastly to Y.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter (and (color_equals (color_of this) X) (column_equals (column_of this) (column_of other))))\n        (apply (update_color R))\n    )\n    (rule\n        (vars (this other))\n        (filter (and (color_equals (color_of this) R) (column_equals (column_of this) (column_of other))))\n        (apply (update_color G))\n    )\n    (rule\n        (vars (this other))\n        (filter (and (color_equals (color_of this) G) (column_equals (column_of this) (column_of other))))\n        (apply (update_color B))\n    )\n    (rule\n        (vars (this other))\n        (filter (and (color_equals (color_of this) B) (column_equals (column_of this) (column_of other))))\n        (apply (update_color Y))\n    )\n)"
        },
        {
            "nl_description": "Recolor the column next to each object of color X with specific colors, starting from R up to Y from top to bottom.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node up)\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node down)\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node down_right)\n            (update_color Y)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor objects in each column in an alternating pattern.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color B)\n            (update_color R)\n            (update_color G)\n            (update_color Y)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color X towards the bottom end of the grid and recolor them following a pattern: B, then R, G, Y, repeating.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (move_node_max down)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) X)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color B)\n            (move_node down)\n            (update_color R)\n            (move_node down)\n            (update_color G)\n            (move_node down)\n            (update_color Y)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor columns of size 9 to different colors in sequence.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (column_equals (column_of this) 9)\n                (size_equals (size_of this) 9)\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (column_equals (column_of this) 8)\n                (size_equals (size_of this) 9)\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (column_equals (column_of this) 7)\n                (size_equals (size_of this) 9)\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (column_equals (column_of this) 6)\n                (size_equals (size_of this) 9)\n            )\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the parts of the vertical lines one color at a time, from top to bottom, to different colors (R, G, B, Y).",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) X)\n                (and\n                    (column_equals (column_of this) (column_of this))\n                    (not (neighbor_of this this))\n                )\n            )\n        )\n        (apply\n            (update_color R)\n            (update_color G)\n            (update_color B)\n            (update_color Y)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor objects based on the column they are in: `R` for column 2, `G` for column 4, `B` for column 6, and `Y` for column 8",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 2)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 4)\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 6)\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 8)\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the columns of color X from top to bottom in the order of B, R, G, Y.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) B)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) G)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor columns of objects to alternate between colors R, B, G, and Y in order.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (column_equals (column_of this) 1))\n        (apply (update_color R))\n    )\n    (rule\n        (vars (this))\n        (filter (column_equals (column_of this) 4))\n        (apply (update_color G))\n    )\n    (rule\n        (vars (this))\n        (filter (column_equals (column_of this) 2))\n        (apply (update_color B))\n    )\n    (rule\n        (vars (this))\n        (filter (column_equals (column_of this) 6))\n        (apply (update_color B))\n    )\n    (rule\n        (vars (this))\n        (filter (column_equals (column_of this) 7))\n        (apply (update_color Y))\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color X one step to the right, and recolor them to alternating colors R, G, B, Y.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (move_node right)\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) G)\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the objects to red, green, blue, and yellow in sequence that are in the same column as the object X.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) X)\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) R)\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) G)\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) B)\n            )\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor objects in each row to distinct colors: R, G, B, and Y.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color Y)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects in each column to different predefined colors: first column to R, second column to G, and third column to B.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 1)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 4)\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 7)\n        )\n        (apply\n            (update_color B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects in the second column to R, third column to G, and eighth column to Y",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 1)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 3)\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 7)\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor each row of black objects into a unique sequence of colors (B, R, G, Y).",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) B)\n                (degree_equals (degree_of this) 1)\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (degree_equals (degree_of this) 2)\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) G)\n                (degree_equals (degree_of this) 3)\n            )\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n)"
        },
        {
            "nl_description": "Change the color of the leftmost object to R, the object to its right to B, the object to the right of that one to G, and the bottom one to Y.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of other) B)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of other) G)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color R)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor vertical stripes of objects. Objects at even columns are recolored starting from B followed by R, G, and Y, while objects at vertical odd columns are recolored to B.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) even)\n        )\n        (apply\n            (update_color B)\n            (update_color R)\n            (update_color G)\n            (update_color Y)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) odd)\n        )\n        (apply\n            (update_color B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor different columns of objects starting from left-most occurrence of object X.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of other) B)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of other) R)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of other) G)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the first column to R, the fourth column to G, the seventh column to Y, and the middle column to B.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 1)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 4)\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 7)\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 8)\n        )\n        (apply\n            (update_color B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the objects of color X column by column to different colors descending RGBY.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (move_node down)\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of this) G)\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor each non-X cell column-wise from top to bottom with colors R, G, Y, and B, cycling through the colors.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node down)\n            (update_color R)\n            (move_node down)\n            (update_color R)\n            (move_node down)\n            (update_color G)\n            (move_node down)\n            (update_color G)\n            (move_node down)\n            (update_color G)\n            (move_node down)\n            (update_color Y)\n            (move_node down)\n            (update_color Y)\n            (move_node down)\n            (update_color Y)\n            (move_node down)\n            (update_color B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the column of objects starting from the top to the bottom by a sequence of colors (R, G, B, Y).",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) X)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color R)\n            (update_color G)\n            (update_color B)\n            (update_color Y)\n        )\n    )\n)"
        },
        {
            "nl_description": "Change the color of all color X objects in a column-wise alternating pattern.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) B)\n                (column_equals (column_of this) even)\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) B)\n                (column_equals (column_of this) odd)\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) G)\n                (neighbor_of this this)\n            )\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor each column with a distinct color, except for the first two columns.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (column_equals (column_of this) 2))\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter (column_equals (column_of this) 4))\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter (column_equals (column_of this) 6))\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter (column_equals (column_of this) 8))\n        (apply\n            (update_color Y)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor each vertical line of objects with different colors, from top to bottom.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color Y)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the first column of neighbors of color X to R, the second column to G, the third to B, and the fourth to Y.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) X)\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) R)\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) G)\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) B)\n            )\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the rows to alternating colors for the object of color X, starting with B and continuing with Red, Green, and Yellow respectively.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) X))\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) O)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) G)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor each column of objects to a different color.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (column_equals (column_of this) 1)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (column_equals (column_of this) 3)\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (column_equals (column_of this) 5)\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (column_equals (column_of this) 7)\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n)"
        },
        {
            "nl_description": "Change the color of each column of black objects to a different, specified color.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (and (color_equals (color_of this) X) (column_equals (column_of this) 2)))\n        (apply (update_color R))\n    )\n    (rule\n        (vars (this))\n        (filter (and (color_equals (color_of this) X) (column_equals (column_of this) 5)))\n        (apply (update_color G))\n    )\n    (rule\n        (vars (this))\n        (filter (and (color_equals (color_of this) X) (column_equals (column_of this) 8)))\n        (apply (update_color Y))\n    )\n    (rule\n        (vars (this))\n        (filter (and (color_equals (color_of this) X) (column_equals (column_of this) 6)))\n        (apply (update_color B))\n    )\n)"
        },
        {
            "nl_description": "Recolor the vertical columns of X objects in the following manner: the first column is recolored to R, the second to G, the third to Y, and the last to B.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (neighbor_of this other)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of other) R)\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of other) G)\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)        \n        (apply\n            (update_color B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor each vertical segment of color X to different colors, in the following order from top to bottom: B, R, G, Y.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 6)\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 7)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 7)\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 8)\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the vertical columns of different colors sequentially: to R, G, B, Y for objects that are in the same column position as X",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (column_equals (column_of this) (column_of other)))\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter (column_equals (column_of this) 3))\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter (column_equals (column_of this) 4))\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter (column_equals (column_of this) 5))\n        (apply\n            (update_color Y)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move each segment of color X one step to the right and recolor each to a different color.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (move_node right)\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) B)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color (color_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor each object in column 2 to R, each object in column 4 to G, each object in column 6 to B, and each object in column 8 to Y.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 2)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 4)\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 6)\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 8)\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor each column of objects to a different color.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 1)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 4)\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 7)\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 8)\n        )\n        (apply\n            (update_color B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor each column of objects vertically in the sequence R, G, B, Y for columns that contain the color X.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (move_node down)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color R)\n            (update_color G)\n            (update_color B)\n            (update_color Y)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor vertical segments in the input grid, assigning colors bottom to top rows: Red, Green, Yellow, and Blue.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor each neighbor of the object with color X, starting from the rightmost side, using a different sequential color for each column.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (neighbor_of this other)\n        )\n        (apply\n            (update_color R)\n            (move_node right)\n        )\n    )\n     (rule\n        (vars (this other))\n        (filter\n            (neighbor_of this other)\n        )\n        (apply\n            (update_color G)\n            (move_node right)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (neighbor_of this other)\n        )\n        (apply\n            (update_color Y)\n            (move_node right)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (neighbor_of this other)\n        )\n        (apply\n            (update_color B)\n            (move_node right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor columns of vertical lines with different colors",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) X)\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) R)\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) G)\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) B)\n            )\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor different segments of the vertical structures of color X to varying colors.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) X)\n                (size_equals (size_of this) 2)\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) X)\n                (size_equals (size_of this) 5)\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) X)\n                (size_equals (size_of this) 3)\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) X)\n                (size_equals (size_of this) 1)\n            )\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the objects in the first column to red, the objects in the second column to green, and the objects in the last column to yellow, while recoloring the objects in other columns to blue.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (column_equals (column_of this) 1))\n        (apply (update_color R))\n    )\n    (rule\n        (vars (this))\n        (filter (column_equals (column_of this) 2))\n        (apply (update_color G))\n    )\n    (rule\n        (vars (this))\n        (filter (column_equals (column_of this) 9))\n        (apply (update_color Y))\n    )\n    (rule\n        (vars (this))\n        (filter (and (not (column_equals (column_of this) 1)) (and (not (column_equals (column_of this) 2)) (not (column_equals (column_of this) 9)))))\n        (apply (update_color B))\n    )\n)"
        },
        {
            "nl_description": "Recolor vertical neighboring objects of color X to unique gradient colors.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) X)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) X)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) X)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) X)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects in the same column with different colors starting from the second row in the input grid.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color B)\n            (update_color R)\n            (update_color G)\n            (update_color Y)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects of color X to appropriate RGB colors based on their position.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) B)\n                (size_equals (size_of this) 1)\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) B)\n                (size_equals (size_of this) 5)\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) B)\n                (size_equals (size_of this) 4)\n            )\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor each column of contiguous X's to a different color.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor each column of X objects with its own unique color.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 1)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 6)\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 3)\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 8)\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor each X object to a specific color based on its row position: B for the topmost, R for the second, G for the third, and Y for the bottommost X object.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) X))\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter (and (color_equals (color_of this) X) (size_equals (size_of this) 2)))\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter (and (color_equals (color_of this) X) (size_equals (size_of this) 3)))\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter (and (color_equals (color_of this) X) (size_equals (size_of this) max)))\n        (apply\n            (update_color Y)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the objects of color X. Start with color R for the first, then alternate between R and other colors.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the first column of neighboring identical objects in decreasing order with colors R, G, B, Y.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (neighbor_of this other)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (neighbor_of this other)\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (neighbor_of this other)\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (neighbor_of this other)\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor every segment of objects of color X, alternating between colors R, G, B, and Y.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) X))\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) R))\n        (apply\n            (move_node down)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) X))\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) G))\n        (apply\n            (move_node down)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) X))\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) B))\n        (apply\n            (move_node down)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) X))\n        (apply\n            (update_color Y)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) Y))\n        (apply\n            (move_node down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color X one step up and recolor them based on their position.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (move_node up)\n            (update_color (color_of this))\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the odd columns of the X objects to R, the even columns to G, except the last column which is recolored to Y.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (move_node left)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) X)\n                (column_equals (column_of this) odd)\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) X)\n                (column_equals (column_of this) even)\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) X)\n                (size_equals (size_of this) 1)\n            )\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor each object that is vertically aligned with another object to a specific series of colors.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (and\n                    (color_equals (color_of other) X)\n                    (column_equals (column_of this) (column_of other))\n                )\n            )\n        )\n        (apply\n            (update_color (color_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor columns of objects of color X with distinct colors for each column.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 1)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 4)\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 8)\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 6)\n        )\n        (apply\n            (update_color B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor objects in each column to different colors. Recolor the leftmost object in each column to R, the second leftmost to B, and so on.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) O))\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color (color_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor objects in alternating columns to different colors following a vertical pattern.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (column_equals (column_of this) even))\n        (apply (update_color B))\n    )\n    (rule\n        (vars (this))\n        (filter (column_equals (column_of this) odd))\n        (apply (update_color R))\n    )\n    (rule\n        (vars (this))\n        (filter (and (column_equals (column_of this) odd) (size_equals (size_of this) max)))\n        (apply (update_color G))\n    )\n    (rule\n        (vars (this))\n        (filter (and (column_equals (column_of this) even) (size_equals (size_of this) 1)))\n        (apply (update_color Y))\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects in red that neighbor the X objects.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) X)\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor each vertical object of color X, such that each row is colored with a different color.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (update_color (color_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color X, one step up; Change their color based on their neighbor.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (move_node up)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) X)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color (color_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor each vertical column to a different color in sequence",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (column_equals (column_of this) (column_of other))\n        )\n        (apply\n            (update_color (color_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all vertical lines with alternating colors based on their position.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (and (column_equals (column_of this) even) (color_equals (color_of this) X)))\n        (apply (update_color B))\n    )\n    (rule\n        (vars (this))\n        (filter (and (column_equals (column_of this) odd) (color_equals (color_of this) X)))\n        (apply (update_color R))\n    )\n    (rule\n        (vars (this other))\n        (filter (and (neighbor_of this other) (color_equals (color_of other) B)))\n        (apply (update_color G))\n    )\n    (rule\n        (vars (this other))\n        (filter (and (neighbor_of this other) (color_equals (color_of other) G)))\n        (apply (update_color Y))\n    )\n)"
        },
        {
            "nl_description": "Color the bottom half of all columns with alternating colors starting from the second row from the bottom in repeated fashion until the top of the grid.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color R)\n            (update_color G)\n            (update_color Y)\n            (update_color B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor each X object based on its column position: R for second column, G for fifth column, B for sixth column, and Y for eighth column.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (and\n                    (color_equals (color_of this) X)\n                    (column_equals (column_of this) 1)\n                )\n        )\n        (apply (update_color R)))\n    (rule\n        (vars (this))\n        (filter (and\n                    (color_equals (color_of this) X)\n                    (column_equals (column_of this) 4)\n                )\n        )\n        (apply (update_color G)))\n    (rule\n        (vars (this))\n        (filter (and\n                    (color_equals (color_of this) X)\n                    (column_equals (column_of this) 5)\n                )\n        )\n        (apply (update_color B)))\n    (rule\n        (vars (this))\n        (filter (and\n                    (color_equals (color_of this) X)\n                    (column_equals (column_of this) 7)\n                )\n        )\n        (apply (update_color Y)))\n)"
        },
        {
            "nl_description": "Recolor columns of objects with X to a sequence of colors from R to Y",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) G)\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) G)\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) Y)\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) Y)\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all the objects toward the object of color X, if they are neighbors of it, and recolor them based on their new positions.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) X)\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n            (update_color (color_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor objects based on their column position: first column to Red, second column to Green, and third column to Yellow.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 1)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 2)\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 3)\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor objects of height 3 to color R, objects of height 4 to color G, objects of height 5 to color Y, and others to color B.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (height_equals (height_of this) 3))\n        (apply (update_color R))\n    )\n    (rule\n        (vars (this))\n        (filter (height_equals (height_of this) 4))\n        (apply (update_color G))\n    )\n    (rule\n        (vars (this))\n        (filter (height_equals (height_of this) 5))\n        (apply (update_color Y))\n    )\n    (rule\n        (vars (this))\n        (filter (not (or (height_equals (height_of this) 3) (or (height_equals (height_of this) 4) (height_equals (height_of this) 5)))))\n        (apply (update_color B))\n    )\n)"
        },
        {
            "nl_description": "Recolor each column separately with a different pattern of colors.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter)\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (column_equals (column_of this) 1)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (column_equals (column_of this) 2)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (column_equals (column_of this) 3)\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (column_equals (column_of this) 7)\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the column objects with different colors.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter (and (neighbor_of this other) (column_equals (column_of this) (column_of other))))\n        (apply (update_color B) (update_color R) (update_color G) (update_color Y))\n    ))"
        },
        {
            "nl_description": "Recolor each column of objects of color X different colors from top to bottom.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) X)\n                (column_equals (column_of this) 1)\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) X)\n                (column_equals (column_of this) 6)\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) X)\n                (column_equals (column_of this) 2)\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) X)\n                (column_equals (column_of this) 7)\n            )\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor objects of color X using colors R, G, B, Y in increasing order from top to bottom.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) X)\n                (and\n                    (column_equals (column_of this) (column_of other))\n                    (color_equals (color_of other) X)\n                )\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) X)\n                (and\n                    (column_equals (column_of this) (column_of other))\n                    (color_equals (color_of other) R)\n                )\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) X)\n                (and\n                    (column_equals (column_of this) (column_of other))\n                    (color_equals (color_of other) G)\n                )\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) X)\n                (and\n                    (column_equals (column_of this) (column_of other))\n                    (color_equals (color_of other) B)\n                )\n            )\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor each column of objects in a different color.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 1)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 3)\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 5)\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 7)\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor vertical strips of objects from top to bottom alternately using colors R, G and B, and add Y to the last three rows.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (column_equals (column_of this) 2))\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter (column_equals (column_of this) 4))\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter (column_equals (column_of this) 8))\n        (apply\n            (update_color Y)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter (not (column_equals (column_of this) 2)))\n        (apply\n            (update_color B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor objects in each column to different colors, starting from the second column from the left.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and (color_equals (color_of this) X) (column_equals (column_of this) 1))\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and (color_equals (color_of this) X) (column_equals (column_of this) 2))\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and (color_equals (color_of this) X) (column_equals (column_of this) 3))\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and (color_equals (color_of this) X) (column_equals (column_of this) 4))\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor each object that is neighbor of multiple objects of color X with different colors in the given sequence.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (neighbor_of this other)\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and (color_equals (color_of other) B) (neighbor_of this other))\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and (color_equals (color_of other) R) (neighbor_of this other))\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and (color_equals (color_of other) G) (neighbor_of this other))\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the objects from left to right as R, G, B, and Y, replacing color X with R.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) X))\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) R))\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) R))\n        (apply\n            (update_color G)\n            (move_node right)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) G))\n        (apply\n            (update_color B)\n            (move_node right)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) B))\n        (apply\n            (update_color Y)\n            (move_node right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor each column of X's starting from the left to R, B, then G, then Y.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) X))\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter (and (color_equals (color_of this) X) (neighbor_of this other)))\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter (and (color_equals (color_of this) X) (neighbor_of this other)))\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter (and (color_equals (color_of this) X) (neighbor_of this other)))\n        (apply\n            (update_color Y)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor every even neighbor of color X with B, and odd neighbors of X with alternating colors R, G, and Y by rows.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (neighbor_of this other)\n        )\n        (apply\n            (update_color (color_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Change color of objects in a repeating vertical pattern to alternate between colors R, G, B, and Y vertically.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color Y)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor each neighboring pair of vertical objects. The left object becomes red, and the right object becomes green.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter (neighbor_of this other))\n        (apply\n            (update_color R)\n            (update_color G)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all columns of color X with alternating colors in each row.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) B)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) B)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) B)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color Y)\n        )\n    )\n)"
        }
    ]
}