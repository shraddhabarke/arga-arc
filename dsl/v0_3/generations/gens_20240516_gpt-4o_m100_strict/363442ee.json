{
    "completions": [
        {
            "nl_description": "Move all objects of color different than X, one step to the right, and then recolor them to their previous color.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (not (color_equals (color_of this) X))\n        )\n        (apply\n            (move_node right)\n            (update_color (color_of this))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color not equal to X one step to the right.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (not (color_equals (color_of this) X))\n        )\n        (apply\n            (move_node right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Copy the first 3 rows of objects to the adjacent 3 rows below them, avoiding the X columns.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (not (column_equals (column_of this) 4))\n                (or\n                    (and\n                        (column_equals (column_of this) 1)\n                        (or\n                            (size_equals (size_of this) 3)\n                            (size_equals (size_of this) 9)\n                        )\n                    )\n                    (and\n                        (not (column_equals (column_of this) 1))\n                        (size_equals (size_of this) 3)\n                    )\n                )\n            )\n        )\n        (apply\n            (move_node down)\n            (move_node down)\n            (move_node down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color different than X toward the object of color X, if they are neighbors of it.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) X))\n                (and\n                    (neighbor_of this this)\n                    (color_equals (color_of other) X)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )    \n    )\n)"
        },
        {
            "nl_description": "Move all objects horizontally until they hit an obstacle (non-O character).",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node_max right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects one step to the right, unless they are of color X.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (not (color_equals (color_of this) X))\n        )\n        (apply\n            (move_node right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects to the left of the vertical bar of Xs, on each row.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (column_equals (column_of this) even)\n        )\n        (apply\n            (move_node left)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color different than X to the edges of the grid while maintaining their pattern.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (not (color_equals (color_of this) X))\n        )\n        (apply\n            (move_node_max right)\n            (move_node_max down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color different than X to the leftmost unoccupied cells, respecting their row orders.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (not (color_equals (color_of this) X))\n        )\n        (apply\n            (move_node_max left)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects towards the object of color X, then recolor them based on their initial color pattern.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (neighbor_of this other)\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n        )\n        (apply\n            (update_color (color_of this))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color different than X, horizontally toward the object of color X, if they are in the same row as it.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) X))\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) X)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of size 3 to the top of their columns.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 3)\n        )\n        (apply\n            (move_node_max up)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects vertically downward until they hit another object or the edge of the grid, and then replicate them.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node_max down)\n            (insert 0 bottom source)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects next to objects colored X to a new row above each X, maintaining their initial horizontal alignment.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (neighbor_of this other)\n        )\n        (apply\n            (move_node up)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all the rows up by one step except the row containing X, and duplicate the moved rows to fill the rows below X.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (not (and (color_equals (color_of this) X) (neighbor_of this this))))\n        (apply\n            (move_node up)\n            (move_node up)\n        )\n    )\n)"
        },
        {
            "nl_description": "Mirror the color pattern in front of the object of color X along the X-axis direction.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of other) X)\n        )\n        (apply\n            (mirror (mirror_axis_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects to the first row if their right neighbor is X.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) X)\n            )\n        )\n        (apply\n            (move_node up)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects towards the object of color X in their row, up to one step.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) X)\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects towards the object of color X.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of other) X)\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects to the right of the grid if they are neighbors of an X colored object.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) X)\n            )\n        )\n        (apply\n            (move_node right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Mirror all objects to the columns of the object of color X.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of other) X)\n        )\n        (apply\n            (mirror (mirror_axis_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects horizontally right, wrapping around the rows and keeping the objects in the same columns relative to each other.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Copy each row and paste it to the right side of the object of color X in the same row.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (move_node_max right)\n            (insert 1 (img_pts_of this) target)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects horizontally from their current positions to form 3-cell wide rows starting from the left edge.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node right)\n            (move_node right)\n            (move_node right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects to the right of the last column of color 'X', and then insert them at the beginning of each row.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node left)\n            (insert 0 top_left target)        )\n    )\n)"
        },
        {
            "nl_description": "Copy each object of size 3 to the location of the object of color X, retaining the original objects.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 3)\n                (color_equals (color_of other) X)\n            )\n        )\n        (apply\n            (insert 0 (img_pts_of this) target)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color different than X, toward the object of color X, if they are neighbors of it.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) X))\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) X)\n                )\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color different than X, to the right side of each X column, maintaining their initial arrangement.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) X))\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) X)\n                )\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects one step to the right.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects one step to the right, only if they are not of color X.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (not (color_equals (color_of this) X))\n        )\n        (apply\n            (move_node right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects to the left of the vertical line of Xs, preserving the order and orientation within each row.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (not (column_equals (column_of other) odd))\n            )\n        )\n        (apply\n            (move_node left)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects towards the object with color X, and match the original object pattern vertically below X.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of other) X)\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects in the same row as the object of color X towards it",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (neighbor_of this other)\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects to the right, wrapping around the obstacles marked with 'X'.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) X))\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (move_node right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects one step to the right, and then recolor them to their original color.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node right)\n            (update_color (color_of this))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects to the first column and then extend them to the right until they reach X.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node left)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (neighbor_of this other)\n        )\n        (apply\n            (extend_node right false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color different than X to the right, while maintaining their relative positions.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) X))\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) X)\n                )\n            )\n        )\n        (apply\n            (extend_node right false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color different than X toward the object of color X if they are neighbors, and duplicate their patterns.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (and\n                    (not (color_equals (color_of this) X))\n                    (color_equals (color_of other) X)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (insert 1 bottom_right middle)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects toward the object of color X, if they are neighbors of it.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) X)\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color different than X, toward the object of color X, if they are neighbors of it. Stop once the object is not a neighbor of X; then recolor the object to its original color in a pattern where they originally were.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) X))\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) X)\n                )\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n            (update_color (color_of this))\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the neighbors of object X to the color of the objects above X in their respective columns.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (neighbor_of this other)\n        )\n        (apply\n            (update_color (color_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects towards the object of color X if there are neighbors and recolor them the same as their original color.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) X)\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color (color_of this))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects left, if they are neighbors of the object with color X.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) X)\n            )\n        )\n        (apply\n            (move_node left)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects neighboring the 'X' object away from the 'X' object, then recolor the moved objects to their neighboring objects' colors.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (neighbor_of this other)\n        )\n        (apply\n            (move_node_max down)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (neighbor_of this other)\n        )\n        (apply\n            (update_color (color_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects except objects of color X to the right, aligning them in each row, as if pushing them from the left edge of the grid.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (not (color_equals (color_of this) X))\n        )\n        (apply\n            (move_node right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects to the right of objects of color X to the rightmost non-X column.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (neighbor_of this other)\n        )\n        (apply\n            (move_node_max right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move objects of size 3 to the left if they are neighbors of the object of size max, and beyond the object of size max, if they are neighbors to it horizontally, replicating the segment.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 3)\n                (and\n                    (neighbor_of this other)\n                    (size_equals (size_of other) max)\n                )\n            )\n        )\n        (apply\n            (move_node left)\n            (insert 1 (img_pts_of this) target)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects, except the one with color X, to the top-left empty position of the grid while maintaining their relative positions.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (not (color_equals (color_of this) X))\n        )\n        (apply\n            (move_node_max up_left)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color different than X to the first non-X column, preserving their row position.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (not (color_equals (color_of this) X))\n        )\n        (apply\n            (move_node up)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (not (color_equals (color_of this) X))\n        )\n        (apply\n            (move_node left)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects to the adjacent position to their right, without overlapping. Then, if the cell directly above it is an object, color it accordingly.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node right)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (neighbor_of this other)\n        )\n        (apply\n            (update_color (color_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color different than X towards the leftmost X.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) X))\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) X)\n                )\n            )\n        )\n        (apply\n            (move_node_max left)\n        )\n    )\n)"
        },
        {
            "nl_description": "Mirror all objects to the left of the column with color X using the diagonal_right axis.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (column_equals (column_of this) (column_of other)))\n                (color_equals (color_of other) X)\n            )\n        )\n        (apply\n            (mirror (mirror_axis_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all rows of objects towards the first column if there is an X in that column, without overlapping.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (column_equals (column_of other) 3)\n                (color_equals (color_of other) X)\n            )\n        )\n        (apply\n            (move_node left)\n        )\n    )\n)"
        },
        {
            "nl_description": "Mirror objects of any color except 'X' to the beginning of each row where they appear.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) X))\n                (column_equals (column_of this) (column_of other))\n            )\n        )\n        (apply\n            (mirror (mirror_axis_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects with different color than X one step towards the left multiple times.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (not (color_equals (color_of this) X))\n        )\n        (apply\n            (move_node left)\n            (move_node left)\n            (move_node left)\n            (move_node left)\n            (move_node left)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color different than X, toward the object of color X, and then recolor them to match their initial colors in the input grid.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) X))\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color (color_of this))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color different than X towards the object of color X if they are neighbors of it, until they form a horizontal sequence next to the X line.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) X))\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) X)\n                )\n            )\n        )\n        (apply\n            (move_node_max right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects left, to the grid that starts with an X strip of cells.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (column_equals (column_of this) 4)\n        )\n        (apply\n            (move_node left)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects to the first available row of color X.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (neighbor_of this other)\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color different than X, three grid cells to the right.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (not (color_equals (color_of this) X))\n        )\n        (apply\n            (move_node right)\n            (move_node right)\n            (move_node right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects except the X-colored objects to the top-left of the grid while maintaining their sub-grid placements.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (not (color_equals (color_of this) X))\n        )\n        (apply\n            (move_node left)\n            (move_node up)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects that are not of color X to the right of their counterpart neighbor and repeat rows of the objects below",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) X))\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (move_node right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color different than X, toward the object of color X, if they are neighbors of it.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) X))\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) X)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color different than X toward the object of color X, if they are neighbors of it.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) X))\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) X)\n                )\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move groups of objects with color other than X to the left, and then recolor them to their original color.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) X))\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (move_node left)\n            (update_color (color_of this))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects to the right of the object of color X to the first position of their row, and then repeat each row three times.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) X)\n            )\n        )\n        (apply\n            (move_node left)\n        )\n    )\n)"
        },
        {
            "nl_description": "Copy all objects to the right of the object of color X.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (neighbor_of other this)\n        )\n        (apply\n            (move_node right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recreate the pattern of objects above color X across the grid.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (not (color_equals (color_of this) X))\n        )\n        (apply\n            (move_node up_right)\n        )\n    )\n)"
        },
        {
            "nl_description": "For all objects, extend them towards the top-left from the nearest instance of the 'X' colored object.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (neighbor_of other this)\n        )\n        (apply\n            (extend_node up_left false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects not colored X to the right of objects colored X, and preserve their original positions, to the extent possible.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) X))\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (move_node right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects toward the rightmost column, without overlapping.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (column_equals (column_of this) 12))\n                (and\n                    (neighbor_of this other)\n                    (column_equals (column_of other) 12)\n                )\n            )\n        )\n        (apply\n            (move_node_max right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects, except for objects of color X, to the left and recolor them to match their initial cells for second row and onwards.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (not (color_equals (color_of this) X))\n        )\n        (apply\n            (move_node left)\n            (update_color (color_of this))\n        )\n    )\n)"
        },
        {
            "nl_description": "All objects are mapped onto the empty cells of the rows where the object of color X is located, preserving their structure.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) X))\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) X)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects toward the object of color X. Then, insert a copy of the original pattern to the right side of the grid.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of other) X)\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter)\n        (apply\n            (insert 1 (img_pts_of this) target)\n        )\n    )\n)"
        },
        {
            "nl_description": "Copy all objects except those with color X, and place them at the first open row to the right, preserving their row order.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (not (color_equals (color_of this) X))\n        )\n        (apply\n            (insert 0 bottom source)\n        )\n    )\n)"
        },
        {
            "nl_description": "Crop out all the regions that are to the left or right of the column of Xs, and move them to the top left empty regions.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) X))\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (move_node_max up)\n        )    \n    )\n)"
        },
        {
            "nl_description": "Copy all objects towards the right of the object of color X.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) X)\n            )\n        )\n        (apply\n            (insert 1 (img_pts_of this) target)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects towards the left side of the object of color X and then recolor them based on their original colors.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) X))\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (move_node left)\n            (update_color (color_of this))\n        )\n    )\n)"
        },
        {
            "nl_description": "Mirror all objects of different color than X, across their vertical axis.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) X))\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (mirror (mirror_axis_of this))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects adjacent to the object of color X and not of color O toward a new instance of the grid and replicate them.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (and\n                    (not (color_equals (color_of this) O))\n                    (color_equals (color_of other) X)\n                )\n            )\n        )\n        (apply\n            (move_node right)\n            (move_node up)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects to the right of object X, retaining their original order.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of other) X)\n        )\n        (apply\n            (move_node right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects to their right, without overlapping.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects towards the object of color X, filling the left-side columns with the repeating pattern of the original row.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of other) X)\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all the objects of color different than X toward the object of color X if they are neighbors, then recolor to the original color.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) X))\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) X)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n            (update_color (color_of this))\n        )\n    )\n)"
        },
        {
            "nl_description": "Mirror all objects along the column of objects of color X.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of other) X)\n        )\n        (apply\n            (mirror (mirror_axis_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move each segment of objects one step to the left in the same row with the same order.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter (and (neighbor_of this other) (column_equals (column_of other) 0)))\n        (apply (move_node right)))\n)"
        },
        {
            "nl_description": "Move all objects located immediately above an object of color X one step up, and then recolor them to match the color of the object they were moved above.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (and\n                    (column_equals (column_of this) (column_of other))\n                    (color_equals (color_of other) X)\n                )\n            )\n        )\n        (apply\n            (move_node up)\n            (update_color (color_of this))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move each row of objects left towards the leftmost 'X' in each respective row, then recolor each moved row as per their respective columns until reaching 'X'.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) X)\n            )\n        )\n        (apply\n            (move_node_max left)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of this) O)\n            )\n        )\n        (apply\n            (update_color (color_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color different than X, toward the object of color X, if they are neighbors of it. Once moved, replicate the rows/columns of the objects to fill the grid.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) X))\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) X)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color different than X to the nearest three consecutive X tiles and color the nearest neighboring objects the same.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) X))\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) X)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) X))\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color (color_of this))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of size 3 toward the object of color X.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 3)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all row objects up by one row until they no longer share a row with the X object.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (neighbor_of this other)\n        )\n        (apply\n            (move_node up)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects one step left, only if they are directly to the right of an X object, then replicate the moved objects three times to the right.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (neighbor_of this other)\n        )\n        (apply\n            (move_node left)\n            (move_node right)\n            (move_node right)\n            (move_node right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects upward and then recolor them with the color they originally had.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node up)\n            (update_color (color_of this))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of size 3 one step to the left, and then recolor them to their initial colors.",
            "code": "(do\n (rule\n  (vars (this))\n  (filter\n   (size_equals (size_of this) 3)\n  )\n  (apply\n   (move_node left)\n   (update_color (color_of this))\n  )\n )\n)"
        },
        {
            "nl_description": "Move all objects of color different than X, and recolor the grid in blocks according to the position of the original objects to reform the pattern with colors as they were.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) X))\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects to the top left corner and then repeat the objects for every consecutive NxN block.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node up_left)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects to occupy the positions occupied by objects of color X, without moving the X objects.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (neighbor_of this other)\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects towards the object with color X.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of other) X)\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects to the first available empty row starting from the top, preserving their relative position within the row.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (not (color_equals (color_of this) X))\n        )\n        (apply\n            (move_node_max up)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color different than X, to the top-left empty corner if they are neighbors of X.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) X))\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) X)\n                )\n            )\n        )\n        (apply\n            (move_node_max up_left)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of size 3 within the row, to align with their same colored counterparts below.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 3)\n        )\n        (apply\n            (move_node_max right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color different than X, toward the object of color X, if they are neighbors of it.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) X))\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) X)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects in the columns with the object of color X up to the top of the grid.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) (column_of other))\n        )\n        (apply\n            (move_node up)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects that are neighbors of X towards the rightmost column, repeating objects in the direction moving towards the right.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (neighbor_of this other)\n        )\n        (apply\n            (move_node right)\n            (move_node right)\n            (move_node right)\n            (move_node right)\n            (move_node right)\n            (move_node right)\n            (move_node right)\n            (move_node right)\n            (move_node right)\n            (move_node right)\n            (move_node right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all rows with objects toward the closest row with unique color X and extend them.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) X))\n                (column_equals (column_of other) center)\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color different than X, towards the object of color X, if they are neighbors of it.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) X))\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) X)\n                )\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects towards the object of color X, aligning them with their rows.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter (and (not (color_equals (color_of this) X)) (neighbor_of this other)))\n        (apply (move_node_max (direction_of other)))\n    )\n)"
        },
        {
            "nl_description": "Move all objects of color different than X, toward the object of color X, if they are neighbors of it and duplicate the moved objects.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) X))\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) X)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )    \n    )\n)"
        },
        {
            "nl_description": "Move all objects except X one step to the right.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (not (color_equals (color_of this) X))\n        )\n        (apply\n            (move_node right)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects one step to the left if they are not of color X.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (not (color_equals (color_of this) X))\n        )\n        (apply\n            (move_node left)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects to the right of X to their positions in the left-most section of the grid before X.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (neighbor_of this other)\n        )\n        (apply\n            (move_node left)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects of any color except X and extend them downwards to form groups of three, without overlapping.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) X))\n                (and\n                    (not (size_equals (size_of this) 3))\n                    (neighbor_of this other)\n                )\n            )\n        )\n        (apply\n            (move_node down)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (not (color_equals (color_of this) X))\n        )\n        (apply\n            (extend_node down false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Move all objects to the right of objects with color X, maximal twice.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) X)\n            )\n        )\n        (apply\n            (move_node right)\n            (move_node right)\n        )\n    )\n)"
        }
    ]
}