{
    "completions": [
        {
            "nl_description": "Recolor all objects to color of neighbor object X",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (neighbor_of this other)\n        )\n        (apply\n            (update_color (color_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the objects and fill the grid.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color A)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects of size 1 to a given color, except those that are already colored X.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (not (color_equals (color_of this) X))\n            )\n        )\n        (apply\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (color_equals (color_of this) R)\n            )\n        )\n        (apply\n            (update_color A)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (color_equals (color_of this) G)\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (color_equals (color_of this) B)\n            )\n        )\n        (apply\n            (update_color W)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (color_equals (color_of this) Y)\n            )\n        )\n        (apply\n            (update_color A)\n        )\n    )\n)\n"
        },
        {
            "nl_description": "For all objects in the grid except those with color X, replace them with a 3x3 filled square of varying colors based on their original color.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (not (color_equals (color_of this) X))\n        )\n        (apply\n            (fill_rectangle (color_of this) false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects of size 1 to color A, recolor all objects of size 3 to color F, and recolor all objects of size 2 to color C.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 1)\n        )\n        (apply\n            (update_color A)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 3)\n        )\n        (apply\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 2)\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Replace color of all objects with F in the rows where there is no X, and with A, C, and W respectively in the rows with an X, in columns where an X is present.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) X))\n                (not (neighbor_of this other))\n            )\n        )\n        (apply\n            (update_color F)\n        )    \n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color A)\n        )\n    )    \n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color C)\n        )\n    )    \n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color W)\n        )\n    )    \n)"
        },
        {
            "nl_description": "Recolor all objects, except objects with color X, and then recolor objects if they neighbor the object with color X.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (not (color_equals (color_of this) X))\n        )\n        (apply\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) X)\n            )\n        )\n        (apply\n            (update_color (color_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Change the color of all objects in the horizontal middle row of the grid. Each object gets a unique, constant replacement color.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (column_equals (column_of this) odd)\n                (neighbor_of this this)\n            )\n        )\n        (apply\n            (update_color A)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (column_equals (column_of this) 2)\n                (neighbor_of this this)\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (column_equals (column_of this) 3)\n                (neighbor_of this this)\n            )\n        )\n        (apply\n            (update_color F)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all vertical strips of objects to different colors.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (column_equals (column_of this) 0))\n        (apply (update_color F))\n    )\n    (rule\n        (vars (this))\n        (filter (column_equals (column_of this) 1))\n        (apply (update_color F))\n    )\n    (rule\n        (vars (this))\n        (filter (column_equals (column_of this) 2))\n        (apply (update_color F))\n    )\n    (rule\n        (vars (this))\n        (filter (column_equals (column_of this) 4))\n        (apply (update_color A))\n    )\n    (rule\n        (vars (this))\n        (filter (column_equals (column_of this) 5))\n        (apply (update_color A))\n    )\n    (rule\n        (vars (this))\n        (filter (column_equals (column_of this) 6))\n        (apply (update_color A))\n    )\n    (rule\n        (vars (this))\n        (filter (column_equals (column_of this) 8))\n        (apply (update_color F))\n    )\n    (rule\n        (vars (this))\n        (filter (column_equals (column_of this) 9))\n        (apply (update_color F))\n    )\n    (rule\n        (vars (this))\n        (filter (column_equals (column_of this) 10))\n        (apply (update_color F))\n    )\n)"
        },
        {
            "nl_description": "Replace all objects with 3x3 blocks of their respective colors, except for the objects of color X which stay unchanged.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (not (color_equals (color_of this) X))\n        )\n        (apply\n            (fill_rectangle (color_of this) true)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all rows and columns that pass through the object of color X to their corresponding colors in order.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (fill_rectangle F false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects in three rows of the input grid.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color A)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all entire rows to their respective colored objects, except X, then replace every O with a random different color and every X remains the same.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (not (color_equals (color_of this) O))\n        )\n        (apply\n            (update_color (color_of this))\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) O)\n        )\n        (apply\n            (update_color (color_of this))\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects except those of color X to a new color, varying for each object.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (not (color_equals (color_of this) X))\n        )\n        (apply\n            (update_color A)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects into the object they are in the same column with.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (column_equals (column_of this) (column_of other))\n        )\n        (apply\n            (update_color (color_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Extend all objects of size 1 to size 3, and recolor each of them according to their initial positions.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 1)\n        )\n        (apply\n            (extend_node down true)\n            (update_color A)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 3)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color (color_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects except X with a color gradient, then fill the middle region with a fixed color.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (not (color_equals (color_of this) X)))\n        (apply\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) X)\n            )\n        )\n        (apply\n            (update_color A)\n        )\n    )\n)"
        },
        {
            "nl_description": "Change all colors to horizontal bands of colors where band below `X` row gets the color 'F', band above `X` row gets 'A' and color 'C' excluding 'X'.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (not (color_equals (color_of this) X)))\n        (apply (update_color F))\n    )\n    (rule\n        (vars (this))\n        (filter (neighbor_of this other))\n        (apply (update_color A) (move_node down))\n    )\n    (rule\n        (vars (this))\n        (filter (neighbor_of this other))\n        (apply (update_color C) (move_node up))\n    )\n)"
        },
        {
            "nl_description": "Transform all 1x1 objects to 3x3 squares, update their color to match that of the original object centered in the new square, preserving the columns of 'X'.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 1)\n        )\n        (apply\n            (fill_rectangle (color_of this) true)\n        )\n    )\n)"
        },
        {
            "nl_description": "Change the color of all objects to different specified colors while ignoring objects of color X.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (not (color_equals (color_of this) X))\n        )\n        (apply\n            (update_color (color_of this))\n        )\n    )\n)"
        },
        {
            "nl_description": "Change the color of all objects to the respective colors specified in the output",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color A)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color C)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color W)\n        )\n    )\n)"
        },
        {
            "nl_description": "Change all colors of objects to progressively lighter color tones.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color A)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color C)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color W)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects in the grid to match certain patterns",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Fill all rows between the first and last rows with an intermediate color between the initial colors and 'X', from left to right, starting from 'F' at the leftmost cell.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (fill_rectangle F false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects to an incremented palette, keeping the color X static.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color F)\n        )\n    )\n)"
        },
        {
            "nl_description": "Fill all grids with three different colors: first row and columns with the first color, second row and columns with the second color, and the remaining part with the third color, except where there is X.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n        )\n        (apply\n            (fill_rectangle C false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor rows of objects as follows: first row to color F, second row to color A, third row to color F; and in grid pairs with more than 3 rows, repeat this pattern.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply (update_color F))\n    )\n    (rule\n        (vars (this))\n        (filter (neighbor_of this this))\n        (apply\n            (move_node down)\n            (update_color A)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter (neighbor_of this this))\n        (apply\n            (move_node down)\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter (neighbor_of this this))\n        (apply\n            (move_node down)\n        )\n    )\n)"
        },
        {
            "nl_description": "Fill with color F the first row of cells, then with color A the second row of cells and so on for each different row in the grid. Ignore the X columns.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (fill_rectangle F false)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color A)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color C)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color F)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects to alternate colors in each grid row.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color A)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of other) O))\n                (and\n                    (neighbor_of this other)\n                    (size_equals (size_of other) 1)\n                )\n            )\n        )\n        (apply\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) A)\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects to color F after moving them to the top row, except objects of color X",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (not (color_equals (color_of this) X))\n        )\n        (apply\n            (move_node up)\n            (move_node up)\n            (update_color F)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the objects of size 1 to the row colors, ensuring to maintain the border X intact.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (not (color_equals (color_of this) X))\n            )\n        )\n        (apply\n            (update_color (color_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects to specific colors based on their original colors, preserving color X and forming a pattern.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (update_color W)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (update_color A)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of this) G)\n        )\n        (apply\n            (update_color C)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of this) Y)\n        )\n        (apply\n            (update_color F)\n        )\n    )\n)"
        },
        {
            "nl_description": "Transform all the objects of size 1 to form a solid 3x3 block of different colors around each X column.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 1)\n        )\n        (apply\n            (move_node right)\n            (extend_node down true)\n            (extend_node left true)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all cells to color of the nearest non-background color on the same row.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) O)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color (color_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Transform all neighboring non-X objects into a 3x3 grid following a specific pattern.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) X))\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Transform all colored objects (not X) into 3x3 squares of the same color.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (not (color_equals (color_of this) X))\n        )\n        (apply\n            (fill_rectangle (color_of this) true)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects first to A, second to C, third to F, fourth to W in sequence",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color A)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color C)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color W)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects other than X with a different color for each row.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (not (color_equals (color_of this) X))\n        )\n        (apply\n            (update_color (color_of this))\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects to different colors based on their original color.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (update_color A)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) G)\n        )\n        (apply\n            (update_color C)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) Y)\n        )\n        (apply\n            (update_color W)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects to different colors based on their locations relative to X columns.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (update_color A)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) G)\n        )\n        (apply\n            (update_color C)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) Y)\n        )\n        (apply\n            (update_color W)\n        )\n    )\n)"
        },
        {
            "nl_description": "For each row, color all objects the same color except the objects colored X",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) X))\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color (color_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Transform all objects to size 3 squares where the row the Xs are located remains unchanged and recolor each square to one color only.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (not (color_equals (color_of this) X)))\n        (apply (fill_rectangle (color_of this) false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all segmented objects to unique colors, preserving the X segments as they are.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (not (color_equals (color_of this) X))\n        )\n        (apply\n            (update_color A)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color C)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (not (color_equals (color_of this) X))\n        )\n        (apply\n            (update_color F)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the first and last rows of the grid, excluding cells that contain 'X'.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (not (color_equals (color_of this) X))\n        )\n        (apply\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (not (color_equals (color_of this) X))\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Change the color of all objects to match the objects on the same row to the right of them before a vertical thin object of color 'X'.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) X))\n                (and\n                    (neighbor_of this other)\n                    (and\n                        (neighbor_of other other)\n                        (color_equals (color_of other) X)\n                    )\n                )\n            )\n        )\n        (apply\n            (update_color (color_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all the objects to distinct colors in different rows, except those in column 4 which remain as X.",
            "code": "\n(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color A)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter (column_equals (column_of this) 4))\n        (apply\n            (update_color X)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter (neighbor_of this other))\n        (apply\n            (update_color F)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects surrounded (left and right) by Xs.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (or\n                (neighbor_of this other)\n                (neighbor_of other this)\n            )\n        )\n        (apply\n            (update_color F)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects to match the color of the center object in the grid.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of this) (color_of other))\n        )\n        (apply\n            (update_color (color_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the objects of size 1 to specific colors, then recolor the remaining objects to a single color.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 1)\n        )\n        (apply\n            (update_color A)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 1)\n        )\n        (apply\n            (update_color C)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 1)\n        )\n        (apply\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (not (size_equals (size_of this) 1))\n                (not (color_equals (color_of this) X))\n            )\n        )\n        (apply\n            (update_color F)\n        )\n    )\n)"
        },
        {
            "nl_description": "Fill all cells not occupied by X with a new 3x3 color square centered around the middle cell that is not an X.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (not (color_equals (color_of this) X))\n        )\n        (apply\n            (fill_rectangle (color_of other) false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor rows with different specific colors, from top to bottom.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (height_equals (height_of this) 1)\n                (neighbor_of this this)\n            )\n        )\n        (apply\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (height_equals (height_of this) 2)\n                (neighbor_of this this)\n            )\n        )\n        (apply\n            (update_color A)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (height_equals (height_of this) 3)\n                (neighbor_of this this)\n            )\n        )\n        (apply\n            (update_color F)\n        )\n    )\n)"
        },
        {
            "nl_description": "Transform row objects such that each row object is recolored to a unique color pattern.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter \n            (color_equals (color_of this) B)\n        )\n        (apply\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter \n            (color_equals (color_of this) R)\n        )\n        (apply\n            (update_color A)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter \n            (color_equals (color_of this) G)\n        )\n        (apply\n            (update_color C)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter \n            (color_equals (color_of this) Y)\n        )\n        (apply\n            (update_color W)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all the objects to different colors sequentially.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) O))\n        (apply (update_color F))\n    )\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) B))\n        (apply (update_color A))\n    )\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) R))\n        (apply (update_color A))\n    )\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) G))\n        (apply (update_color C))\n    )\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) Y))\n        (apply (update_color W))\n    )\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) W))\n        (apply (update_color A))\n    )\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) X))\n        (apply (update_color X))\n    )\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) F))\n        (apply (update_color C))\n    )\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) C))\n        (apply (update_color F))\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects that are not X nor neighbors of X to a different color, according to their initial color.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) X))\n                (not (neighbor_of this other))\n            )\n        )\n        (apply\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color (color_of this))\n        )    \n    )\n)"
        },
        {
            "nl_description": "Recolor all objects except those with color X with a new color.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (not (color_equals (color_of this) X))\n        )\n        (apply\n            (update_color (color_of this))\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all rows except those containing object X to the new colors in the corresponding rows of the original grid.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (not (color_equals (color_of other) X))\n        )\n        (apply\n            (update_color (color_of this))\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects to specific colors based on their original colors.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) O))\n        (apply (update_color F))\n    )\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) B))\n        (apply (update_color F))\n    )\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) R))\n        (apply (update_color A))\n    )\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) G))\n        (apply (update_color C))\n    )\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) Y))\n        (apply (update_color W))\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects in the columns with no 'X' elements to specific colors.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (or\n                (column_equals (column_of this) 0)\n                (or\n                    (column_equals (column_of this) 1)\n                    (or\n                        (column_equals (column_of this) 2)\n                        (or\n                            (column_equals (column_of this) 8)\n                            (column_equals (column_of this) 10)\n                        )\n                    )\n                )\n            )\n        )\n        (apply\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (or\n                (column_equals (column_of this) 4)\n                (or\n                    (column_equals (column_of this) 5)\n                    (column_equals (column_of this) 6)\n                )\n            )\n        )\n        (apply\n            (update_color A)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 11)\n        )\n        (apply\n            (update_color A)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 3)\n        )\n        (apply\n            (update_color X)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all the non-X objects to match the color of the nearest object on an X column.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color (color_of this))\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) X))\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color (color_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Replace each object in the grid with a 3x3 block, with a specific color pattern.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (insert 0 top_left source)\n            (update_color F)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the three rows to form a 3x3 square of the same color for each row.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color A)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color C)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color F)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects to specific colors without changing objects of color X.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color (color_of this))\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (not (color_equals (color_of this) X))\n        )\n        (apply\n            (update_color F)\n        )\n    )\n)"
        },
        {
            "nl_description": "Change all colors in the grid to different specific colors, except the cells colored X.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (not (color_equals (color_of this) X)))\n        (apply\n            (update_color (color_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects except X to respective colors matching their vertical position, then recolor the entire top and bottom rows of the grid.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (not (color_equals (color_of this) X))\n        )\n        (apply\n            (update_color (color_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects with color different than X to specified new colors in corresponding positions.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (not (color_equals (color_of this) X)))\n        (apply\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color A)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color C)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color W)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all the objects to the specified colors in the output grid.",
            "code": "(do\n    (rule\n        (vars (this) )\n        (filter)\n        (apply\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this other) )\n        (filter\n            (and\n                (color_equals (color_of this) O)\n                ( neighbor_of this other )\n            )\n        )\n        (apply\n            (update_color F)\n        )\n    )\n)"
        },
        {
            "nl_description": "Change the color of all objects to a preset color palette.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color A)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color C)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color W)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all the objects to unique colors while keeping the color X unchanged.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (not (color_equals (color_of this) X)))\n        (apply\n            (update_color F)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the entire grid to contain size 3 colored squares in each section, separated by X columns.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter (size_equals (size_of this) 1))\n        (apply\n            (update_color A)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (fill_rectangle (color_of this) false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects into different colors in order of appearance by row: F, A for first row; F, A for second row; F for third row and so on.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color A)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color C)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color W)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects to a predefined pattern of colors.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (update_color A)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of this) G)\n        )\n        (apply\n            (update_color C)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of this) Y)\n        )\n        (apply\n            (update_color W)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects that are not X to make a 3x3 square of different colors in the original object positions.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (not (color_equals (color_of this) X))\n        )\n        (apply\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) F)\n        )\n        (apply\n            (update_color A)\n            (extend_node up true)\n            (extend_node down true)\n            (extend_node left true)\n            (extend_node right true)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects to create three horizontal rows of colors: first F, second A, and third F, for the first three columns; repeat for colors R, C, and F, then B, F, and F.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color A)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color C)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color F)\n        )\n    )\n)"
        },
        {
            "nl_description": "Change the color of all objects to form a vertically striped pattern.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter (color_equals (color_of this) O))\n        (apply (update_color F))\n    )\n    (rule\n        (vars (this other))\n        (filter (color_equals (color_of this) R))\n        (apply (update_color C))\n    )\n    (rule\n        (vars (this other))\n        (filter (color_equals (color_of this) G))\n        (apply (update_color F))\n    )\n    (rule\n        (vars (this other))\n        (filter (color_equals (color_of this) B))\n        (apply (update_color A))\n    )\n    (rule\n        (vars (this other))\n        (filter (color_equals (color_of this) Y))\n        (apply (update_color W))\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects to form vertical stripes of 3x3 color fills between columns of X.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (column_equals (column_of this) even)\n                (column_equals (column_of other) odd)\n            )\n        )\n        (apply\n            (update_color (color_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects to random colors based on their initial color.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) B))\n        (apply (update_color F))\n    )\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) R))\n        (apply (update_color A))\n    )\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) G))\n        (apply (update_color C))\n    )\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) Y))\n        (apply (update_color W))\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects with color other than X and not an edge object to arbitrary colors.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) X))\n                (not (neighbor_of this other))\n            )\n        )\n        (apply\n            (update_color A)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects to the specified color pattern.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color W)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color A)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects that are not X to F, then recolor alternating objects to different colors.",
            "code": "(do\n    (rule\n         (vars (this other))\n         (filter\n             (not (color_equals (color_of this) X))\n         )\n         (apply\n             (update_color F)\n         )\n    )\n    (rule\n         (vars (this other))\n         (filter\n             (size_equals (size_of this) 1)\n         )\n         (apply\n             (update_color A)\n             (update_color C)\n             (update_color W)\n         )\n    )\n)"
        },
        {
            "nl_description": "Recolor all rows to a single color based on the given mappings.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter (column_equals (column_of this) (column_of other)))\n        (apply\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) R))\n        (apply (update_color A))\n    )\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) G))\n        (apply (update_color C))\n    )\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) B))\n        (apply (update_color F))\n    )\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) Y))\n        (apply (update_color W))\n    )\n)"
        },
        {
            "nl_description": "Change the color of each object in the first row and first column to the specified colors, skip the changed one.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color A)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color C)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color F)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the grid by dividing it into columns three cells wide, then assign the respective colors to each column in their order.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 0)\n        )\n        (apply\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 2)\n        )\n        (apply\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 1)\n        )\n        (apply\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 3)\n        )\n        (apply\n            (update_color A)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 4)\n        )\n        (apply\n            (update_color A)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 5)\n        )\n        (apply\n            (update_color A)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 6)\n        )\n        (apply\n            (update_color A)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 7)\n        )\n        (apply\n            (update_color C)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 8)\n        )\n        (apply\n            (update_color C)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 9)\n        )\n        (apply\n            (update_color C)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 10)\n        )\n        (apply\n            (update_color F)\n        )\n    )\n)"
        },
        {
            "nl_description": "Fill regions left and right of columns of X and color them transitioning vertically from top to bottom.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (neighbor_of this this)\n        )\n        (apply\n            (fill_rectangle F false)\n            (fill_rectangle A false)\n            (fill_rectangle F false)\n            (fill_rectangle C false)\n            (fill_rectangle F false)\n            (fill_rectangle W false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects to a specific new color for each object.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) B))\n        (apply (update_color F))\n    )\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) R))\n        (apply (update_color A))\n    )\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) G))\n        (apply (update_color C))\n    )\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) Y))\n        (apply (update_color W))\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects in the first and third columns to color F, and recolor all objects in the fifth and seventh columns to color A.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (or\n                (column_equals (column_of this) 1)\n                (column_equals (column_of this) 3)\n            )\n        )\n        (apply\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (or\n                (column_equals (column_of this) 5)\n                (column_equals (column_of this) 7)\n            )\n        )\n        (apply\n            (update_color A)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects not equal to 'X' to their respective colors and fill the grid with it.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (not (color_equals (color_of this) X))\n        )\n        (apply\n            (fill_rectangle (color_of this) false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects to different colors and extend them to form a pattern around objects of color X.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) X)\n            )\n        )\n        (apply\n            (update_color A)\n            (extend_node right false)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (size_equals (size_of this) 1)\n            )\n        )\n        (apply\n            (update_color C)\n            (extend_node left false)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (update_color W)\n            (extend_node down false)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) G)\n        )\n        (apply\n            (update_color F)\n            (extend_node up false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects to fully cover the grid with new colors",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter)\n        (apply\n            (update_color F)\n            (update_color A)\n            (update_color C)\n            (update_color W)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects to different colors in each row, ignoring objects with color X.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (not (color_equals (color_of this) X))\n        )\n        (apply\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) F)\n            )\n        )\n        (apply\n            (update_color A)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) A)\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects different than X to a new color based on their relative positions in the new object grid.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (not (color_equals (color_of this) X))\n        )\n        (apply\n            (update_color (color_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor the entire grid by sections: top row to F, middle row to A, and bottom row to F in place of the previous object colors.",
            "code": "(do (rule (vars (this)) (filter (not (color_equals (color_of this) X))) (apply (update_color F))) (rule (vars (this)) (filter (not (color_equals (color_of this) X))) (apply (update_color A))) (rule (vars (this)) (filter (not (color_equals (color_of this) X))) (apply (update_color F))))"
        },
        {
            "nl_description": "Replace all non-X objects with a 3x3 grid filled with other colors based on the original object color.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (not (color_equals (color_of this) X))\n        )\n        (apply\n            (insert 1 top_left source)\n            (insert 1 top source)\n            (insert 1 top_right source)\n            (insert 1 left source)\n            (insert 1 right source)\n            (insert 1 bottom_left source)\n            (insert 1 bottom source)\n            (insert 1 bottom_right source)\n        )\n    )\n)"
        },
        {
            "nl_description": "Create a 3x3 block around each object, recoloring it and its surrounding blocks to specific colors.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter (not (color_equals (color_of this) X)))\n        (apply\n            (insert 1 top_left source)\n        )\n    )\n)"
        },
        {
            "nl_description": "Fill all objects with color according to their vertical position relative to the neighboring object of color X. The colors used are F, A, and W for top, middle, and bottom respectively.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (neighbor_of this other)\n        )\n        (apply\n            (fill_rectangle F false)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) F)\n            )\n        )\n        (apply\n            (fill_rectangle A false)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) A)\n            )\n        )\n        (apply\n            (fill_rectangle W false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Replace all objects with a shape enclosed by X and recolor to match the output pattern.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) X))\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color (color_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects to completely cover the grid with the colors of the objects.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color (color_of this))\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all the objects to F, then fill a 3x3 block around each X with alternating colors for rows.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) X)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (fill_rectangle A false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects except those of color X, and fill the entire grid with the recolored objects.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (not (color_equals (color_of this) X))\n        )\n        (apply\n            (update_color (color_of this))\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects to match the rest of the row they belong to, ensuring each row is uniformly colored (excluding rows with the color X).",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (not (color_equals (color_of this) X))\n        )\n        (apply\n            (update_color (color_of this))\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects to distinct colors on each side of the objects of color X.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (neighbor_of this other)\n        )\n        (apply\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) F)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) X)\n                )\n            )\n        )\n        (apply\n            (extend_node right false)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects to unique colors over different pairs",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (not (color_equals (color_of this) X))\n        )\n        (apply\n            (update_color B)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects to a new random color.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter)\n        (apply\n            (update_color (color_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all the objects in the borders of color O to C, and in the middle to F.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) O)\n        )\n        (apply\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) F)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects to different colors, including the background.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (not (color_equals (color_of this) X))\n        )\n        (apply\n            (update_color (color_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects of size 1 to A, objects of size 2 to C, and objects of size 3 to F.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 1)\n        )\n        (apply\n            (update_color A)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 2)\n        )\n        (apply\n            (update_color C)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 3)\n        )\n        (apply\n            (update_color F)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects in the same column as the objects of color X, preserving the color X.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (column_equals (column_of this) (column_of other))\n        )\n        (apply\n            (update_color (color_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects with color different than X and O while leaving a trail while overlapping.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (not (color_equals (color_of this) X))\n                (not (color_equals (color_of this) O))\n            )\n        )\n        (apply\n            (extend_node right true)\n            (update_color W)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) O)\n        )\n        (apply\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (update_color A)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) G)\n        )\n        (apply\n            (update_color C)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R))\n        (apply\n            (update_color F)\n          )\n        )\n)"
        },
        {
            "nl_description": "Recolor all objects to distinct colors in their respective rows, without changing the color of X.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (not (color_equals (color_of this) X))\n        )\n        (apply\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) X))\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color (color_of other))\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects of size 1, not including the ones on the X column with coordinate 4.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (not (column_equals (column_of this) 4))\n            )\n        )\n        (apply\n            (update_color W)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects to form a colorful pattern.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter (color_equals (color_of this) O))\n        (apply (update_color F))\n    )\n    (rule\n        (vars (this other))\n        (filter (color_equals (color_of this) B))\n        (apply (update_color A))\n    )\n    (rule\n        (vars (this other))\n        (filter (color_equals (color_of this) R))\n        (apply (update_color C))\n    )\n    (rule\n        (vars (this other))\n        (filter (color_equals (color_of this) G))\n        (apply (update_color F))\n    )\n    (rule\n        (vars (this other))\n        (filter (color_equals (color_of this) Y))\n        (apply (update_color W))\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects to color F",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color F)\n        )\n    )\n)"
        },
        {
            "nl_description": "Recolor all objects to different colors and shapes on each side of the column with color X",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter (color_equals (color_of other) X))\n        (apply\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter (color_equals (color_of other) R))\n        (apply\n            (update_color A)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter (color_equals (color_of other) G))\n        (apply\n            (update_color C)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter (color_equals (color_of other) Y))\n        (apply\n            (update_color W)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter (color_equals (color_of other) B))\n        (apply\n            (update_color F)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) O))\n        (apply\n            (update_color F)\n        )\n    )\n)"
        }
    ]
}