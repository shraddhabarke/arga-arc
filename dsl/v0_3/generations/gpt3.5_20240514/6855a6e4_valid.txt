[
    "{\n    \"nl_description\": \"Extend all objects of color R or X towards the object of color R, and then fill the interior of the extended objects with color X.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (or\\n                (color_equals (color_of this) R)\\n                (color_equals (color_of this) X)\\n            )\\n        )\\n        (apply\\n            (move_node_max (direction_of other))\\n            (fill_rectangle X false)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of color blue one step down, and then fill a hollow rectangle in the image with color cyan.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) B)\\n        )\\n        (apply\\n            (move_node down)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (hollow_rectangle C)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of color R one step down, and then recolor them to color X.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) R)\\n        )\\n        (apply\\n            (move_node down)\\n            (update_color X)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of color different than X, toward the object of color X, if they are neighbors of it.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (not (color_equals (color_of this) X))\\n                (and\\n                    (neighbor_of this other)\\n                    (color_equals (color_of other) X)\\n                )\\n            )\\n        )\\n        (apply\\n            (move_node_max (direction_of other))\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Extend all the objects of color different than X, towards the nearest neighbor object of color X, without overlapping.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (not (color_equals (color_of this) X))\\n                (and\\n                    (neighbor_of this other)\\n                    (color_equals (color_of other) X)\\n                )\\n            )\\n        )\\n        (apply\\n            (extend_node (direction_of other) false)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Rotate all objects by 90 degrees clockwise.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (rotate_node 90)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Extend all objects of size 1 to the maximum size without overlapping, and color them with color X.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (size_equals (size_of this) 1)\\n        )\\n        (apply\\n            (extend_node (direction_of other) false)\\n            (update_color X)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Transition the objects in specified direction, while extending the objects until they hit another object or edge of the grid.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (move_node_max (direction_of this))\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects to X color.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color X)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Extend all objects in the direction opposite to the center of mass of the objects.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (extend_node (direction_of this) false)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Extend all the objects of color R, keeping the same direction, without overlapping.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) R)\\n        )\\n        (apply\\n            (extend_node (direction_of this) false)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all red objects one step toward the nearest red  X object.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) R)\\n                (and\\n                    (neighbor_of this other)\\n                    (color_equals (color_of other) R)\\n                )\\n            )\\n        )\\n        (apply\\n            (move_node_max (direction_of other))\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Increase the size of objects with color R by one unit.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) R)\\n        )\\n        (apply\\n            (extend_node (direction_of this) true)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Extend all objects to cover the area of the object of maximum size.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (neighbor_of this other)\\n                (size_equals (size_of this) max)\\n            )\\n        )\\n        (apply\\n            (extend_node (direction_of other) true)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects of color R to color O and move the objects to the left.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) R)\\n        )\\n        (apply\\n            (update_color O)\\n            (move_node left)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Extend all objects of the color R one step down.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) R)\\n        )\\n        (apply\\n            (move_node down)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects to color O.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color O)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Rotate all objects with color R clockwise by 90 degrees.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) R)\\n        )\\n        (apply\\n            (rotate_node 90)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Extend all objects of color X one step in all directions, independently for each object.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) X)\\n        )\\n        (apply\\n            (extend_node up false)\\n            (extend_node down false)\\n            (extend_node left false)\\n            (extend_node right false)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of color R or X up if they have a neighbor of color O, while maintaining the grid structure.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (or\\n                (color_equals (color_of this) R)\\n                (color_equals (color_of this) X)\\n            )\\n        )\\n        (apply\\n            (move_node_max up)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of color R one step down, and then extend them to the right without overlapping.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) R)\\n        )\\n        (apply\\n            (move_node down)\\n            (extend_node right false)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects to color X that are of size 1 and above the object of color R.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (size_equals (size_of this) 1)\\n                (and\\n                    (neighbor_of this other)\\n                    (color_equals (color_of other) R)\\n                )\\n            )\\n        )\\n        (apply\\n            (update_color X)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Fill in all empty spaces with color X.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) O)\\n        )\\n        (apply\\n            (update_color X)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of color X one step down until they reach another object or the edge of the grid.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) X)\\n        )\\n        (apply\\n            (move_node down)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Extend all the objects of size 1 in the direction of their adjacent objects of maximum size, without overlapping.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (size_equals (size_of this) 1)\\n                (and\\n                    (neighbor_of this other)\\n                    (size_equals (size_of other) max)\\n                )\\n            )\\n        )\\n        (apply\\n            (extend_node (direction_of other) false)\\n        )    \\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Extend all objects of size max toward the object of max size, without overlapping.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (size_equals (size_of this) max)\\n                (and\\n                    (neighbor_of this other)\\n                    (size_equals (size_of other) max)\\n                )\\n            )\\n        )\\n        (apply\\n            (extend_node (direction_of other) false)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of color different than X, toward the object of color X, if they are neighbors of it.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (not (color_equals (color_of this) X))\\n                (and\\n                    (neighbor_of this other)\\n                    (color_equals (color_of other) X)\\n                )\\n            )\\n        )\\n        (apply\\n            (move_node_max (direction_of other))\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of color different than X, toward the object of color X, if they are neighbors of it.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (not (color_equals (color_of this) X))\\n                (and\\n                    (neighbor_of this other)\\n                    (color_equals (color_of other) X)\\n                )\\n            )\\n        )\\n        (apply\\n            (move_node_max (direction_of other))\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Extend all objects of size 1 towards the R objects.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (size_equals (size_of this) 1)\\n                (and\\n                    (neighbor_of this other)\\n                    (color_equals (color_of other) R)\\n                )\\n            )\\n        )\\n        (apply\\n            (extend_node (direction_of other) false)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of color different than R towards the object of color R, if they are neighbors of it.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (not (color_equals (color_of this) R))\\n                (and\\n                    (neighbor_of this other)\\n                    (color_equals (color_of other) R)\\n                )\\n            )\\n        )\\n        (apply\\n            (move_node_max (direction_of other))\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of color R one step down, and then extend them to the right until they hit an object.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) R)\\n        )\\n        (apply\\n            (move_node down)\\n            (extend_node right false)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Extend all the objects of color R two steps towards the object of color X, without overlapping.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (color_equals (color_of this) R)\\n                (and\\n                    (neighbor_of this other)\\n                    (color_equals (color_of other) X)\\n                )\\n            )\\n        )\\n        (apply\\n            (extend_node (direction_of other) false)\\n            (extend_node (direction_of other) false)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects of color R to X.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) R)\\n        )\\n        (apply\\n            (update_color X)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects except X to color X.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (not (color_equals (color_of this) X))\\n        )\\n        (apply\\n            (update_color X)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Fill the hollow rectangles of each object that has a neighbor, and recolor their borders to color Y.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (neighbor_of this other)\\n        )\\n        (apply\\n            (fill_rectangle Y true)\\n            (add_border Y)\\n        )    \\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Move all objects of color R to the leftmost position, without overlapping.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (color_equals (color_of this) R)\\n        )\\n        (apply\\n            (move_node_max left)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Recolor all objects to color R.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color R)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Extend all objects towards the object of color O, until they hit another object.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (neighbor_of this other)\\n        )\\n        (apply\\n            (extend_node (direction_of other) false)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Rotate all objects of even degree by 90 degrees clockwise.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (degree_equals (degree_of this) even)\\n        )\\n        (apply\\n            (rotate_node 90)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Extend all objects, then flip all objects with respect to the horizontal axis.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (extend_node down_right true)\\n        )\\n    )\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (flip horizontal)\\n        )\\n    )\\n)\"\n}",
    "{\n    \"nl_description\": \"Extend all X-shaped objects until they hit another object in the given direction.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (shape_equals (shape_of this) enclosed)\\n        )\\n        (apply\\n            (move_node_max (direction_of this))\\n        )\\n    )\\n)\"\n}"
]