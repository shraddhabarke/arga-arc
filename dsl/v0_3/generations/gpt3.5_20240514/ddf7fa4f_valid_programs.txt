(do
    (rule
        (vars (this))
        (filter
            (not (color_equals (color_of this) O))
        )
        (apply
            (update_color F)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter)
        (apply
            (mirror (mirror_axis_of this))
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (shape_equals (shape_of this) enclosed)
        )
        (apply
            (fill_rectangle A false)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (and
                (size_equals (size_of this) 1)
                (and
                    (neighbor_of this other)
                    (size_equals (size_of other) max)
                )
            )
        )
        (apply
            (extend_node (direction_of other) false)
        )    
    )
)

(do
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) F)
        )
        (apply
            (move_node_max right)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color F)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (and
                (color_equals (color_of this) F)
                (or
                    (neighbor_of this other)
                    (not (color_equals (color_of other) F))
                )
            )
        )
        (apply
            (update_color B)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (and
                (not (color_equals (color_of this) X))
                (neighbor_of this other)
            )
        )
        (apply
            (extend_node (direction_of other) false)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (and
                (not (color_equals (color_of this) F))
                (and
                    (neighbor_of this other)
                    (color_equals (color_of other) F)
                )
            )
        )
        (apply
            (move_node_max (direction_of other))
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (not (color_equals (color_of this) O))
        )
        (apply
            (update_color F)
            (extend_node (direction_of other) false)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) A)
        )
        (apply
            (move_node_max up)
        )
    )
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) X)
        )
        (apply
            (add_border C)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (and
                (color_equals (color_of this) A)
                (and
                    (neighbor_of this other)
                    (color_equals (color_of other) B)
                )
            )
        )
        (apply
            (move_node_max (direction_of other))
        )
    )
)

(do
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color A)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (not (color_equals (color_of this) F))
        )
        (apply
            (move_node_max up)
            (update_color B)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (neighbor_of this other)
        )
        (apply
            (update_color A)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (not (color_equals (color_of this) X))
        )
        (apply
            (update_color F)
        )
    )
    (rule
        (vars (this other))
        (filter
            (and
                (color_equals (color_of this) X)
                (neighbor_of this other)
            )
        )
        (apply
            (extend_node down false)
        )    
    )
)

(do
    (rule
        (vars (this))
        (filter
            (degree_equals (degree_of this) even)
        )
        (apply
            (rotate_node 90)
        )    
    )
)

(do
    (rule
        (vars (this))
        (filter
            (size_equals (size_of this) 1)
        )
        (apply
            (update_color F)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (color_equals (color_of this) F)
        )
        (apply
            (extend_node (direction_of other) false)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (and
                (not (color_equals (color_of this) X))
                (and
                    (neighbor_of this other)
                    (color_equals (color_of other) X)
                )
            )
        )
        (apply
            (update_color F)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (neighbor_of this other)
        )
        (apply
            (extend_node (direction_of other) false)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (neighbor_of this other)
        )
        (apply
            (extend_node (direction_of other) false)
        )    
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (neighbor_of this other)
        )
        (apply
            (extend_node (direction_of other) false)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (not (color_equals (color_of this) O))
        )
        (apply
            (update_color A)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter)
        (apply
            (move_node_max right)
            (update_color A)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (shape_equals (shape_of this) enclosed)
        )
        (apply
            (fill_rectangle A false)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter)
        (apply
            (update_color F)
        )
    )
)

(do
    (rule
        (vars (this other))
        (filter
            (and
                (color_equals (color_of this) F)
                (and
                    (neighbor_of this other)
                    (size_equals (size_of other) max)
                )
            )
        )
        (apply
            (move_node_max (direction_of other))
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (not (color_equals (color_of this) O))
        )
        (apply
            (update_color F)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (size_equals (size_of this) 2)
        )
        (apply
            (move_node_max up)
            (update_color A)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (column_equals (column_of this) center)
        )
        (apply
            (fill_rectangle A false)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) X)
        )
        (apply
            (fill_rectangle A false)
            (add_border A)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (size_equals (size_of this) 4)
        )
        (apply
            (rotate_node 180)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (not (color_equals (color_of this) O))
        )
        (apply
            (update_color F)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (size_equals (size_of this) 1)
        )
        (apply
            (update_color F)
            (move_node up)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter)
        (apply
            (extend_node right true)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (color_equals (color_of this) R)
        )
        (apply
            (move_node_max up)
        )
    )
)

(do
    (rule
        (vars (this))
        (filter
            (and
                (color_equals (color_of this) F)
                (size_equals (size_of this) 1)
            )
        )
        (apply
            (extend_node (direction_of this) true)
        )
    )
)