{
    "nl_description": "Extend all objects toward the top of the grid, until they hit another object, without overlapping.",
    "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node_max up)\n        )\n    )\n)"
}

{
    "nl_description": "Fill all hollow rectangles with color Y.",
    "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (fill_rectangle Y false)\n        )\n    )\n)"
}

{
    "nl_description": "Move all objects of color Y one step up, and then recolor them to color O.",
    "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) Y)\n        )\n        (apply\n            (move_node up)\n            (update_color O)\n        )\n    )\n)"
}

{
    "nl_description": "Rotate all objects clockwise by 90 degrees if they are of color Y and have a bottom neighbor of color Y.",
    "code": "(do\n    (rule\n        (vars (this nb))\n        (filter\n            (and\n                (color_equals (color_of this) Y)\n                (and\n                    (neighbor_of this nb)\n                    (color_equals (color_of nb) Y)\n                )\n            )\n        )\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
}

{
    "nl_description": "Extend all the objects of maximum size towards an object of the same color, without overlapping.",
    "code": "(do\n    (rule\n        (vars (this x))\n        (filter\n            (and\n                (size_equals (size_of this) max)\n                (and\n                    (neighbor_of this x)\n                    (color_equals (color_of this) (color_of x))\n                )\n            )\n        )\n        (apply\n            (extend_node (direction_of x) false)\n        )\n    )\n)"
}

{
    "nl_description": "Flip all objects vertically with respect to the center axis.",
    "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (flip vertical)\n        )\n    )\n)"
}

{
    "nl_description": "Extend all objects of size 1 towards the object of color Y, without overlapping.",
    "code": "(do\n    (rule\n        (vars (this x))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (and\n                    (neighbor_of this x)\n                    (color_equals (color_of x) Y)\n                )\n            )\n        )\n        (apply\n            (extend_node (direction_of x) false)\n        )\n    )\n)"
}

{
    "nl_description": "Move all the objects of size maximum one step down, and then recolor them to color R.",
    "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) max)\n        )\n        (apply\n            (move_node down)\n            (update_color R)\n        )\n    )\n)"
}

{
    "nl_description": "Move all objects of color Y to the right until they hit another object, then recolor them to color O.",
    "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) Y)\n        )\n        (apply\n            (move_node_max right)\n            (update_color O)\n        )\n    )\n)"
}

{
    "nl_description": "Move all objects of size 2 towards the nearest object of color Y without overlapping.",
    "code": "(do\n    (rule\n        (vars (this x))\n        (filter\n            (size_equals (size_of this) 2)\n        )\n        (apply\n            (move_node_max (direction_of x))\n        )\n    )\n)"
}

{
    "nl_description": "Recolor all the objects except the ones of color Y to color O.",
    "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (not (color_equals (color_of this) Y))\n        )\n        (apply\n            (update_color O)\n        )\n    )\n)"
}

{
    "nl_description": "Move all objects that have the color Y, one step towards the top of the grid.",
    "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) Y)\n        )\n        (apply\n            (move_node up)\n        )\n    )\n)"
}

{
    "nl_description": "Mirror all objects with respect to the horizontal axis.",
    "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (mirror vertical)\n        )\n    )\n)"
}

{
    "nl_description": "For each object of color Y, mirror it with respect to the horizontal axis.",
    "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) Y)\n        )\n        (apply\n            (mirror vertical)\n        )\n    )\n)"
}

{
    "nl_description": "Move all objects of color different than Y, to the right, until they hit another object.",
    "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (not (color_equals (color_of this) Y))\n        )\n        (apply\n            (move_node_max right)\n        )\n    )\n)"
}

{
    "nl_description": "Move all yellow colored objects one step right and then rotate them by 90 degrees.",
    "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) Y)\n        )\n        (apply\n            (move_node right)\n            (rotate_node 90)\n        )\n    )\n)"
}

{
    "nl_description": "Recolor all objects to color Y",
    "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color Y)\n        )\n    )\n)"
}

{
    "nl_description": "Recolor all blue objects to color green.",
    "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (update_color G)\n        )    \n    )\n)"
}

{
    "nl_description": "Extend all objects of the same color to the border of the grid without overlapping.",
    "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) max)\n        )\n        (apply\n            (extend_node (direction_of this) true)\n        )    \n    )\n)"
}

{
    "nl_description": "Rotate all objects of color Y by 180 degrees clockwise.",
    "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) Y)\n        )\n        (apply\n            (rotate_node 180)\n        )\n    )\n)"
}

{
    "nl_description": "For objects of color Y, rotate them by 90 degrees clockwise.",
    "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) Y)\n        )\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
}

{
    "nl_description": "Move all the objects of color Y one step down, without extending.",
    "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) Y)\n        )\n        (apply\n            (move_node down)\n        )\n    )\n)"
}

{
    "nl_description": "Fill the hollow rectangles with color Y.",
    "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (shape_equals (shape_of this) enclosed)\n        )\n        (apply\n            (fill_rectangle Y false)\n        )\n    )\n)"
}

{
    "nl_description": "Move all objects of color different than Y, toward the object of color Y, if they are neighbors of it, without overlapping.",
    "code": "(do\n    (rule\n        (vars (this x))\n        (filter\n            (and\n                (not (color_equals (color_of this) Y))\n                (and\n                    (neighbor_of this x)\n                    (color_equals (color_of x) Y)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of x))\n        )\n    )\n)"
}

{
    "nl_description": "Rotate all objects by 90 degrees clockwise.",
    "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
}

{
    "nl_description": "Extend all the objects to the left, without overlapping.",
    "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (extend_node left false)\n        )\n    )\n)"
}

{
    "nl_description": "Extend all objects to the max size, fill hollow rectangles with color Y.",
    "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (extend_node (direction_of this) true)\n            (fill_rectangle Y true)\n        )\n    )\n)"
}