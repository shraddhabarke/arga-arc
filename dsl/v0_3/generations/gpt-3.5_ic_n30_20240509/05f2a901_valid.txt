{
    "nl_description": "Change the color of all objects of color R to color O.",
    "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (update_color O)\n        )\n    )\n)"
}

{
    "nl_description": "Move all objects of color different than C towards the object of color C if they are neighbors of it.",
    "code": "(do\n    (rule\n        (vars (this x))\n        (filter\n            (and\n                (not (color_equals (color_of this) C))\n                (and\n                    (neighbor_of this x)\n                    (color_equals (color_of x) C)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of x))\n        )\n    )\n)"
}

{
    "nl_description": "Extend all the objects of color R one step to the right and then recolor them all to color R.",
    "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node right)\n            (update_color R)\n        )\n    )\n)"
}

{
    "nl_description": "Extend all objects in the input grid towards the object of color C, without overlapping.",
    "code": "(do\n    (rule\n        (vars (this x))\n        (filter\n            (neighbor_of this x)\n        )\n        (apply\n            (extend_node (direction_of x) false)\n        )\n    )\n)"
}

{
    "nl_description": "Fill all enclosed objects with color R.",
    "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (shape_equals (shape_of this) enclosed)\n        )\n        (apply\n            (fill_rectangle R true)\n        )\n    )\n)"
}

{
    "nl_description": "Recolor all objects to color O.",
    "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color O)\n        )\n    )\n)"
}

{
    "nl_description": "Color all objects of color R to color O",
    "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (update_color O)\n        )\n    )\n)"
}

{
    "nl_description": "Recolor all objects to color O.",
    "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color O)\n        )\n    )\n)"
}

{
    "nl_description": "Extend all the objects to the right until they hit another object.",
    "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node_max right)\n        )\n    )\n)"
}

{
    "nl_description": "Move all objects containing the color C toward the rightmost object containing the color R, without overlapping.",
    "code": "(do\n    (rule\n        (vars (this x))\n        (filter\n            (and\n                (color_equals (color_of this) C)\n                (and\n                    (neighbor_of this x)\n                    (color_equals (color_of x) R)\n                )\n            )\n        )\n        (apply\n            (move_node_max right)\n        )\n    )\n)"
}

{
    "nl_description": "Recolor all objects of color C to color R",
    "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) C)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n)"
}

{
    "nl_description": "Extend all the objects in the grid until they reach the edge of the grid, without overlapping.",
    "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (extend_node (direction_of this) true)\n        )\n    )\n)"
}

{
    "nl_description": "Extend all objects to the right edge of the grid without overlapping.",
    "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (extend_node right false)\n        )\n    )\n)"
}

{
    "nl_description": "Move all red objects to the leftmost position in the grid.",
    "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node_max left)\n        )\n    )\n)"
}

{
    "nl_description": "Recolor all objects to color R.",
    "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color R)\n        )\n    )\n)"
}

{
    "nl_description": "Rotate all objects that are part of a column with a height of 3 to the right by 90 degrees.",
    "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (column_equals (column_of this) 3)\n                (height_equals (height_of this) 3)\n            )\n        )\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
}

{
    "nl_description": "Move all objects that have neighbors of the color C to the adjacent position towards the object of color C.",
    "code": "(do\n    (rule\n        (vars (this x))\n        (filter\n            (neighbor_of this x)\n        )\n        (apply\n            (move_node_max (direction_of x))\n        )\n    )\n)"
}

{
    "nl_description": "Recolor all objects of color C to color R.",
    "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) C)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n)"
}

{
    "nl_description": "Change the color of all 'R' objects to 'C' if they are neighbors of an 'O' object.",
    "code": "(do\n    (rule\n        (vars (this x))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (and\n                    (neighbor_of this x)\n                    (color_equals (color_of x) O)\n                )\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
}

{
    "nl_description": "Extend all the objects of size 1 toward the object of color R, without overlapping.",
    "code": "(do\n    (rule\n        (vars (this x))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (and\n                    (neighbor_of this x)\n                    (color_equals (color_of x) R)\n                )\n            )\n        )\n        (apply\n            (extend_node (direction_of x) false)\n        )    \n    )\n)"
}

{
    "nl_description": "Recolor all objects to color R.",
    "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color R)\n        )\n    )\n)"
}

{
    "nl_description": "Move all red objects to the bottom of the grid.",
    "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node down)\n        )\n    )\n)"
}

{
    "nl_description": "Move all objects of color C to the right border of the grid.",
    "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) C)\n        )\n        (apply\n            (move_node_max right)\n        )\n    )\n)"
}

{
    "nl_description": "Extend all objects that are not blue until overlapping with a blue object.",
    "code": "(do\n    (rule\n        (vars (this x))\n        (filter\n            (not (color_equals (color_of this) B))\n        )\n        (apply\n            (extend_node (direction_of x) false)\n        )\n    )\n)"
}

{
    "nl_description": "Recolor all cells of color R to O.",
    "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (update_color O)\n        )\n    )\n)"
}