{
    "nl_description": "Move all the green objects one step down and recolor them to color B.",
    "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) G)\n        )\n        (apply\n            (move_node down)\n            (update_color B)\n        )\n    )\n)"
}

{
    "nl_description": "Extend objects of size 2 towards the object of color X without overlapping.",
    "code": "(do\n    (rule\n        (vars (this x))\n        (filter\n            (and\n                (size_equals (size_of this) 2)\n                (and\n                    (neighbor_of this x)\n                    (color_equals (color_of x) X)\n                )\n            )\n        )\n        (apply\n            (extend_node (direction_of x) false)\n        )\n    )\n)"
}

{
    "nl_description": "Recolor all objects of color F to color B.",
    "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) F)\n        )\n        (apply\n            (update_color B)\n        )\n    )\n)"
}

{
    "nl_description": "Extend all the objects of color G towards the object of color A, if they are neighbors of it.",
    "code": "(do\n    (rule\n        (vars (this x))\n        (filter\n            (and\n                (color_equals (color_of this) G)\n                (and\n                    (neighbor_of this x)\n                    (color_equals (color_of x) A)\n                )\n            )\n        )\n        (apply\n            (extend_node (direction_of x) false)\n        )\n    )\n)"
}

{
    "nl_description": "Extend all objects in the grid by one step with overlapping.",
    "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (extend_node up true)\n        )\n    )\n)"
}

{
    "nl_description": "Recolor all objects to color O and move all objects to the left.",
    "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color O)\n            (move_node left)\n        )\n    )\n)"
}

{
    "nl_description": "Recolor all objects of color R to color O, and then move all remaining objects of color G one step down.",
    "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (update_color O)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) G)\n        )\n        (apply\n            (move_node down)\n        )\n    )\n)"
}

{
    "nl_description": "Rotate all objects by 90 degrees clockwise.",
    "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
}

{
    "nl_description": "Rotate all objects by 90 degrees clockwise.",
    "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
}

{
    "nl_description": "Recolor all objects with color B to color O and extend all objects of size 9 towards the left without overlapping.",
    "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (update_color O)\n            (extend_node left false)\n        )\n    )\n)"
}

{
    "nl_description": "Move all objects of color other than A or G toward the object of color A or G, if they are neighbors of it, up to the maximum possible.",
    "code": "(do\n    (rule\n        (vars (this x))\n        (filter\n            (and\n                (not (or (color_equals (color_of this) A) (color_equals (color_of this) G)))\n                (and\n                    (neighbor_of this x)\n                    (or (color_equals (color_of x) A) (color_equals (color_of x) G))\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of x))\n        )\n    )\n)"
}

{
    "nl_description": "Move all objects of color different than o color to their right, then recolor them to color B.",
    "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (not (color_equals (color_of this) O))\n        )\n        (apply\n            (move_node right)\n            (update_color B)\n        )\n    )\n)"
}

{
    "nl_description": "Move all objects towards the center of the grid.",
    "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node_max (direction_of this))\n        )    \n    )\n)"
}

{
    "nl_description": "Move all objects with color A to the bottom of the grid.",
    "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) A)\n        )\n        (apply\n            (move_node_max down)\n        )\n    )\n)"
}

{
    "nl_description": "Extend all objects of color G towards the object of color R, without overlapping.",
    "code": "(do\n    (rule\n        (vars (this x))\n        (filter\n            (and\n                (color_equals (color_of this) G)\n                (and\n                    (neighbor_of this x)\n                    (color_equals (color_of x) R)\n                )\n            )\n        )\n        (apply\n            (extend_node (direction_of x) false)\n        )\n    )\n)"
}

{
    "nl_description": "Extend all objects of color R towards the object of color G, rotate them by 180 degrees, and then recolor them to color B.",
    "code": "(do\n    (rule\n        (vars (this x))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (and\n                    (neighbor_of this x)\n                    (color_equals (color_of x) G)\n                )\n            )\n        )\n        (apply\n            (extend_node (direction_of x) false)\n            (rotate_node 180)\n            (update_color B)\n        )\n    )\n)"
}

{
    "nl_description": "Move all objects of odd height down one step.",
    "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (height_equals (height_of this) odd)\n        )\n        (apply\n            (move_node down)\n        )\n    )\n)"
}

{
    "nl_description": "Extend all the objects of size max which are neighbors of an object of color G and color Y, and recolor them to color A.",
    "code": "(do\n    (rule\n        (vars (this x))\n        (filter\n            (and\n                (size_equals (size_of this) max)\n                (or\n                    (and (neighbor_of this x) (color_equals (color_of x) G))\n                    (and (neighbor_of this x) (color_equals (color_of x) Y))\n                )\n            )\n        )\n        (apply\n            (extend_node (direction_of x) false)\n            (update_color A)\n        )\n    )\n)"
}

{
    "nl_description": "Extend all objects towards the object with the maximum degree without overlapping.",
    "code": "(do\n    (rule\n        (vars (this x))\n        (filter)\n        (apply\n            (extend_node (direction_of x) false)\n        )\n    )\n)"
}

{
    "nl_description": "Move all objects of color different than G toward the object of color G, if they are neighbors of it.",
    "code": "(do\n    (rule\n        (vars (this x))\n        (filter\n            (and\n                (not (color_equals (color_of this) G))\n                (and\n                    (neighbor_of this x)\n                    (color_equals (color_of x) G)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of x))\n        )\n    )\n)"
}

{
    "nl_description": "Move all objects of color different than G, towards the object of color G, and recolor them to color G if they are neighbors of it.",
    "code": "(do\n    (rule\n        (vars (this x))\n        (filter\n            (and\n                (not (color_equals (color_of this) G))\n                (and\n                    (neighbor_of this x)\n                    (color_equals (color_of x) G)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of x))\n            (update_color G)\n        )    \n    )\n)"
}

{
    "nl_description": "Move all the objects of color different than W, toward the object of color W, if they are neighbors of it.",
    "code": "(do\n    (rule\n        (vars (this x))\n        (filter\n            (and\n                (not (color_equals (color_of this) W))\n                (and\n                    (neighbor_of this x)\n                    (color_equals (color_of x) W)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of x))\n        )\n    )\n)"
}

{
    "nl_description": "Move all objects of color B towards the object of color R, without overlapping.",
    "code": "(do\n    (rule\n        (vars (this x))\n        (filter\n            (and\n                (color_equals (color_of this) B)\n                (and\n                    (neighbor_of this x)\n                    (color_equals (color_of x) R)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of x))\n        )\n    )\n)"
}

{
    "nl_description": "Move all objects of color A towards the object of maximum size, without overlapping.",
    "code": "(do\n    (rule\n        (vars (this x))\n        (filter\n            (and\n                (color_equals (color_of this) A)\n                (and\n                    (neighbor_of this x)\n                    (size_equals (size_of x) max)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of x))\n        )    \n    )\n)"
}