{
    "nl_description": "Add a border of color B to all objects that are not at the border of the grid.",
    "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (not (neighbor_of this VAR_THIS))\n        )\n        (apply\n            (add_border B)\n        )\n    )\n)"
}

{
    "nl_description": "Extend all blue objects to the right until they hit another object, then recolor them to color B.",
    "code": "(do\n    (rule\n        (vars (this x))\n        (filter\n            (and\n                (color_equals (color_of this) B)\n            )\n        )\n        (apply\n            (extend_node right false)\n            (update_color B)\n        )\n    )\n)"
}

{
    "nl_description": "Move all objects of color different than B, to the closest object of color B.",
    "code": "(do\n    (rule\n        (vars (this x))\n        (filter\n            (and\n                (not (color_equals (color_of this) B))\n                (neighbor_of this x)\n                (color_equals (color_of x) B)\n            )\n        )\n        (apply\n            (move_node_max (direction_of x))\n        )\n    )\n)"
}

{
    "nl_description": "Recolor all objects to color B and extend every object until it hits another object.",
    "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color B)\n            (extend_node (direction 0) false)\n        )\n    )\n)"
}

{
    "nl_description": "Color all objects to black (color B) if their color is different from the object on the right side of them.",
    "code": "(do\n    (rule\n        (vars (this right))\n        (filter\n            (column_equals (column_of this) (column_of right))\n        )\n        (apply\n            (if\n                (not (color_equals (color_of this) (color_of right)))\n                (update_color B)\n            )\n        )\n    )\n)"
}

{
    "nl_description": "Fill all the exterior objects with color B. If the object is neighbors with a B-colored object, fill the interior with B as well.",
    "code": "(do\n    (rule\n        (vars (this x))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (add_border B)\n        )\n    )\n    (rule\n        (vars (this x))\n        (filter\n            (and\n                (not (color_equals (color_of this) B))\n                (neighbor_of this x)\n                (color_equals (color_of x) B)\n            )\n        )\n        (apply\n            (hollow_rectangle B)\n        )\n    )\n)"
}