{
    "nl_description": "Extend all objects that are not of color W or R towards objects with color C, if such objects are present.",
    "code": "(do\n    (rule\n        (vars (this x))\n        (filter\n            (not (or (color_equals (color_of this) W) (color_equals (color_of this) R)))\n        )\n        (apply\n            (move_node_max (direction_of x))\n        )\n    )\n)"
}

{
    "nl_description": "Rotate all objects by 180 degrees.",
    "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 180)\n        )\n    )\n)"
}

{
    "nl_description": "Rotate all objects that have an odd degree by 180 degrees.",
    "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (degree_equals (degree_of this) odd)\n        )\n        (apply\n            (rotate_node 180)\n        )\n    )\n)"
}

{
    "nl_description": "Extend the red object towards the black object, without overlapping.",
    "code": "(do\n    (rule\n        (vars (this x))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (and\n                    (neighbor_of this x)\n                    (color_equals (color_of x) B)\n                )\n            )\n        )\n        (apply\n            (extend_node (direction_of x) false)\n        )\n    )\n)"
}

{
    "nl_description": "Move all blue objects to the rightmost position of the grid.",
    "code": "(do\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) B))\n        (apply (move_node_max right))\n    )\n)"
}

{
    "nl_description": "Rotate all objects clockwise by 180 degrees",
    "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 180)\n        )\n    )\n)"
}

{
    "nl_description": "Recolor all green objects to color O.",
    "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) G)\n        )\n        (apply\n            (update_color O)\n        )\n    )\n)"
}

{
    "nl_description": "Extend all objects to a higher maximum degree if the object is a neighbor of an object with the maximum degree.",
    "code": "(do\n    (rule\n        (vars (this x))\n        (filter\n            (neighbor_of this x)\n        )\n        (apply\n            (extend_node (direction_of x) false)\n        )\n    )\n)"
}

{
    "nl_description": "Move all objects of color different than Y, toward the object of maximum size, and recolor them to color Y.",
    "code": "(do\n    (rule\n        (vars (this x))\n        (filter\n            (and\n                (not (color_equals (color_of this) Y))\n                (and\n                    (neighbor_of this x)\n                    (size_equals (size_of x) max)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of x))\n            (update_color Y)\n        )\n    )\n)"
}

{
    "nl_description": "Extend all objects towards the object with color W, without overlapping.",
    "code": "(do\n    (rule\n        (vars (this x))\n        (filter\n            (neighbor_of this x)\n        )\n        (apply\n            (extend_node (direction_of x) false)\n        )    \n    )\n)"
}

{
    "nl_description": "Extend all objects that touch the border of the grid in the bottom and right directions.",
    "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 1)\n        )\n        (apply\n            (extend_node down false)\n            (extend_node right false)\n        )\n    )\n)"
}

{
    "nl_description": "Move the blue objects to where the red object is.",
    "code": "(do\n    (rule\n        (vars (this x))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (move_node_max (direction_of x))\n        )\n    )\n)"
}

{
    "nl_description": "Move all objects to the rightmost column of the grid.",
    "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node_max right)\n        )\n    )\n)"
}

{
    "nl_description": "Extend all objects of size 1 towards the object of maximum size without overlapping.",
    "code": "(do\n    (rule\n        (vars (this x))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (and\n                    (neighbor_of this x)\n                    (size_equals (size_of x) max)\n                )\n            )\n        )\n        (apply\n            (extend_node (direction_of x) false)\n        )\n    )\n)"
}

{
    "nl_description": "Rotate all objects by 90 degrees clockwise.",
    "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
}

{
    "nl_description": "Move all the objects to the right until they hit another object or reach the edge of the grid.",
    "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node_max right)\n        )    \n    )\n)"
}

{
    "nl_description": "Move all objects of color F one step towards the object of color W.",
    "code": "(do\n    (rule\n        (vars (this x))\n        (filter\n            (color_equals (color_of this) F)\n        )\n        (apply\n            (move_node_max (direction_of x))\n        )\n    )\n)"
}

{
    "nl_description": "Color all black objects to color blue and all orange objects to color white",
    "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) O)\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) A)\n        )\n        (apply\n            (update_color W)\n        )\n    )\n)"
}

{
    "nl_description": "Change the color of all objects that have color F to color W.",
    "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) F)\n        )\n        (apply\n            (update_color W)\n        )\n    )\n)"
}

{
    "nl_description": "Move all objects of color different than F, towards the blue object, if they are neighbors of it.",
    "code": "(do\n    (rule\n        (vars (this x))\n        (filter\n            (and\n                (not (color_equals (color_of this) F))\n                (and\n                    (neighbor_of this x)\n                    (color_equals (color_of x) B)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of x))\n        )\n    )\n)"
}

{
    "nl_description": "Move each blue object to the right-most position in the row.",
    "code": "(do\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) B))\n        (apply (move_node_max right))\n    )\n)"
}

{
    "nl_description": "Move all objects of size 1 one step left, and then recolor them to color W.",
    "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 1)\n        )\n        (apply\n            (move_node left)\n            (update_color W)\n        )\n    )\n)"
}

{
    "nl_description": "Move all objects of color different than F toward the object of color F if they are neighbors of it.",
    "code": "(do\n    (rule\n        (vars (this x))\n        (filter\n            (and\n                (not (color_equals (color_of this) F))\n                (and\n                    (neighbor_of this x)\n                    (color_equals (color_of x) F)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of x))\n        )\n    )\n)"
}

{
    "nl_description": "Recolor object color Y to color W.",
    "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) Y)\n        )\n        (apply\n            (update_color W)\n        )\n    )\n)"
}

{
    "nl_description": "Move all objects of color Y one step down without overlapping.",
    "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) Y)\n        )\n        (apply\n            (move_node down)\n        )\n    )\n)"
}

{
    "nl_description": "Extend all objects toward the object of color W, without overlapping.",
    "code": "(do\n    (rule\n        (vars (this x))\n        (filter\n            (color_equals (color_of x) W)\n        )\n        (apply\n            (extend_node (direction_of x) false)\n        )\n    )\n)"
}