{
    "nl_description": "Move all objects of color different than G towards the object of color G, if they are neighbors of it, then recolor them to color R.",
    "code": "(do\n    (rule\n        (vars (this x))\n        (filter\n            (and\n                (not (color_equals (color_of this) G))\n                (and\n                    (neighbor_of this x)\n                    (color_equals (color_of x) G)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of x))\n            (update_color R)\n        )\n    )\n)"
}

{
    "nl_description": "Recolor all objects of color R to color G, and extend objects of color B one step down without overlapping.",
    "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (update_color G)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (move_node down)\n        )\n    )\n)"
}

{
    "nl_description": "Extend all objects towards the object of color G without overlapping.",
    "code": "(do\n    (rule\n        (vars (this x))\n        (filter\n            (and\n                (neighbor_of this x)\n                (color_equals (color_of x) G)\n            )\n        )\n        (apply\n            (extend_node (direction_of x) false)\n        )\n    )\n)"
}

{
    "nl_description": "Rotate all objects by 180 degrees.",
    "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 180)\n        )\n    )\n)"
}

{
    "nl_description": "Rotate all objects of color different than G by 180 degrees.",
    "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (not (color_equals (color_of this) G))\n        )\n        (apply\n            (rotate_node 180)\n        )\n    )\n)"
}

{
    "nl_description": "Extend all diagonal objects to the left and color them to blue.",
    "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) G)\n        )\n        (apply\n            (move_node_max up_left)\n            (update_color B)\n        )\n    )\n)"
}

{
    "nl_description": "Extend all objects having color R to the left until they reach the object with color G.",
    "code": "(do\n    (rule\n        (vars (this x))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (and\n                    (neighbor_of this x)\n                    (color_equals (color_of x) G)\n                )\n            )\n        )\n        (apply\n            (extend_node left false)\n        )\n    )\n)"
}

{
    "nl_description": "Fill all the enclosed objects with color R.",
    "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (shape_equals (shape_of this) enclosed)\n        )\n        (apply\n            (fill_rectangle R false)\n        )\n    )\n)"
}

{
    "nl_description": "Rotate all objects of color different than G by 90 degrees clockwise.",
    "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (not (color_equals (color_of this) G))\n        )\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
}

{
    "nl_description": "Color all objects adjacent to the object of color R with color G.",
    "code": "(do\n    (rule\n        (vars (this x))\n        (filter\n            (neighbor_of this x)\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)"
}

{
    "nl_description": "Flip all objects with respect to the vertical axis.",
    "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (flip vertical)\n        )\n    )\n)"
}

{
    "nl_description": "Extend objects of size max towards the right until they reach an object and color them with color A.",
    "code": "(do\n    (rule\n        (vars (this x))\n        (filter\n            (and\n                (size_equals (size_of this) max)\n                (not (color_equals (color_of this) A))\n            )\n        )\n        (apply\n            (extend_node right false)\n            (update_color A)\n        )\n    )\n)"
}

{
    "nl_description": "Recolor all objects of color different than G to color G.",
    "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (not (color_equals (color_of this) G))\n        )\n        (apply\n            (update_color G)\n        )\n    )\n)"
}

{
    "nl_description": "Fill all enclosed objects with color B.",
    "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (shape_equals (shape_of this) enclosed)\n        )\n        (apply\n            (fill_rectangle B false)\n        )\n    )\n)"
}

{
    "nl_description": "Extend all objects of color G towards the object of color R, without overlapping.",
    "code": "(do\n    (rule\n        (vars (this x))\n        (filter\n            (and\n                (color_equals (color_of this) G)\n                (and\n                    (neighbor_of this x)\n                    (color_equals (color_of x) R)\n                )\n            )\n        )\n        (apply\n            (extend_node (direction_of x) false)\n        )\n    )\n)"
}

{
    "nl_description": "Recolor all objects to color G.",
    "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color G)\n        )\n    )\n)"
}

{
    "nl_description": "Move all green objects one step down.",
    "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) G)\n        )\n        (apply\n            (move_node down)\n        )\n    )\n)"
}

{
    "nl_description": "Fill all enclosed areas in the image with color B without overlapping.",
    "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (fill_rectangle B false)\n        )\n    )\n)"
}

{
    "nl_description": "Move each object one step to the right if it is of color G.",
    "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) G)\n        )\n        (apply\n            (move_node right)\n        )\n    )\n)"
}

{
    "nl_description": "Extend all the objects to the maximum size, if they are neighbors of an object with color G.",
    "code": "(do\n    (rule\n        (vars (this x))\n        (filter\n            (neighbor_of this x)\n        )\n        (apply\n            (extend_node (direction_of x) false)\n        )\n    )\n)"
}

{
    "nl_description": "Recolor all objects of color G to color R.",
    "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) G)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n)"
}

{
    "nl_description": "Move all objects of color G one step right until hitting another object or the edge of the grid.",
    "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) G)\n        )\n        (apply\n            (move_node_max right)\n        )\n    )\n)"
}

{
    "nl_description": "Extend all objects of color R to the left, then mirror those objects vertically.",
    "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (extend_node left false)\n            (mirror vertical)\n        )\n    )\n)"
}

{
    "nl_description": "Flip all objects horizontally.",
    "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (flip horizontal)\n        )\n    )\n)"
}