library: "(" program* ")"

// Rules are executed one after another, in the order they appear.
// There could be no rules, in which case the program does nothing.
program: "(" KW_DO rule* ")"

// A rule first selects the subset of objects for which `filter` is true,
// then applies the transformations in `transform_list`, one after another,
// to the selected objects.
rule: "(" KW_RULE filter transform_list ")"

// A filter is a predicate over the objects in the grid.
// It can be a primitive filter operation, or a boolean expression using the 
// `and`, `or`, and `not` connectives.
filter: filter_prim
      | "(" OP_AND filter filter+ ")"
      | "(" OP_OR filter filter+ ")"
      | "(" OP_NOT filter ")"

             // select all objects
filter_prim: "(" ")"
             // select all objects with the given color.
           | "(" FL_COLOR color_expr ")"
             // select all objects that contain the given number of pixels.
           | "(" FL_SIZE int_expr ")"
             // select the objects of min/max size
           | "(" FL_SIZE ORD_STAT ")"
             // select all objects that can see the given number of neighbors.
           | "(" FL_DEGREE int_expr ")"
             // select all objects that have a neighbor of the given color.
           | "(" FL_NEIGHBOR_COLOR color_expr ")"
             // select all objects that have a neighbor of the given size.
           | "(" FL_NEIGHBOR_SIZE int_expr ")"
             // select all objects that have a neighbor of min/max size.
           | "(" FL_NEIGHBOR_SIZE STAT ")"
             // select all objects that have a neighbor of the given degree.
           | "(" FL_NEIGHBOR_DEGREE int_expr ")"

// Transforms are applied one after another, in the order they appear.
transform_list: "(" KW_APPLY transform+ ")"

// A single transforma is applied to all the selected objects simultaneously,
// so we can think of the transformation as applying to a single object.
           // change the color of the object to the given color.
transform: "(" TR_UPDATE_COLOR color_expr ")"
           // move the object in the given direction.
         | "(" TR_MOVE_NODE DIRECTION ")"
           // extend (move while leaving a trail) the object in the given direction.
         | "(" TR_EXTEND_NODE DIRECTION tr_extend_node_params*")"
           // move the object in the given direction until it hits another object.
         | "(" TR_MOVE_NODE_MAX DIRECTION ")"
           // rotate the object by the given angle.
         | "(" TR_ROTATE_NODE ROT_ANGLE ")"
           // color the exterior pixels of the object with the given color.
         | "(" TR_ADD_BORDER color_expr ")"
           // color the interior of a hollow rectangle with the given color.
         | "(" TR_FILL_RECTANGLE color_expr ")"
           // color the interior of a solid rectangle with the given color.
         | "(" TR_HOLLOW_RECTANGLE color_expr ")"
         | "(" TR_MIRROR mirror_axis ")"
         | "(" TR_FLIP SYMM_AXIS ")"
                       // if overlap is false, then the object is extended until it hits
                       // another object, otherwise it is extended until the edge of the grid.
tr_extend_node_params: "overlap=" bool_expr

int_expr: INT

            // black (this the letter o, not the number 0)
color_expr: "O"
            // blue
          | "B"
            // red
          | "R"
            // green
          | "G"
            // yellow
          | "Y"
            // grey
          | "X"
            // fuchsia
          | "F"
            // orange
          | "A"
            // cyan
          | "C"
            // brown
          | "W"

bool_expr: "T"
         | "F"

           // reflection over x = c
mirror_axis: "(" int_expr KW_NULL ")"
           // reflection over y = c
           | "(" KW_NULL int_expr ")"
           // reflection over point (x, y)
           | "(" int_expr int_expr ")"

ORD_STAT: "MIN"
        | "MAX"
        
      // Most popular value
STAT: "MODE"
      // Least popular value
    | "ANTIMODE"

DIRECTION: "U"
         | "D"
         | "L"
         | "R"
         | "UL"
         | "UR"
         | "DL"
         | "DR"

// The angle of clockwise rotation, in degrees.
ROT_ANGLE: "0" 
         | "90" 
         | "180" 
         | "270"

         // Horizontal
SYMM_AXIS: "H" 
         // Vertical
         | "Y"
         // Diagonal
         | "D"
         // Anti-diagonal
         | "AD"


KW_NULL: "null"
KW_DO: "do"
KW_RULE: "rule"
KW_APPLY: "apply"

OP_AND: "and"
OP_OR: "or"
OP_NOT: "not"

FL_COLOR: "filter_by_color"
FL_SIZE: "filter_by_size"
FL_DEGREE: "filter_by_degree"
FL_NEIGHBOR_SIZE: "filter_by_neighbor_size"
FL_NEIGHBOR_COLOR: "filter_by_neighbor_color"
FL_NEIGHBOR_DEGREE: "filter_by_neighbor_degree"

TR_UPDATE_COLOR: "update_color"
TR_MOVE_NODE: "move_node"
TR_EXTEND_NODE: "extend_node"
TR_MOVE_NODE_MAX: "move_node_max"
TR_ROTATE_NODE: "rotate_node"
TR_ADD_BORDER: "add_border"
TR_FILL_RECTANGLE: "fill_rectangle"
TR_HOLLOW_RECTANGLE: "hollow_rectangle"
TR_MIRROR: "mirror"
TR_FLIP: "flip"
TR_INSERT: "insert"

COMMENT: /\s*/ ";;" /[^\n]/*

%import common.WS
%import common.LCASE_LETTER
%import common.INT
%ignore WS
%ignore COMMENT