[
    {
        "name": "google_01",
        "description": "Convert index tensor into pairs for SparseTensor indexing",
        "target_program": "tf.cast(tf.where(tf.sequence_mask(tf.math.bincount(in1))), tf.int32)",
        "source": "From an internal Google chat room, 09/07/2018",
        "constants": "[]",
        "examples": {
            "inputs": "[[0, 0, 0, 1, 3, 3],]",
            "outputs": "[[0, 0], [0, 1], [0, 2], [1, 0], [3, 0], [3, 1]]"
        },
        "completions": [
            "```python\n    return tf.stack([in1, tf.range(tf.size(in1)) % 2], axis=1)\n```",
            "```python\n    return tf.stack([in1, tf.range(tf.size(in1)) % 2], axis=1)\n```",
            "```python\n    return tf.expand_dims(tf.range(tf.reduce_max(in1) + 1), 0) + tf.expand_dims(in1, 1)\n```",
            "```python\n    return tf.stack([in1, tf.range(tf.size(in1)) % 2], axis=1)\n```",
            "```python\n    return tf.expand_dims(in1, axis=-1) + tf.expand_dims(tf.range(tf.reduce_max(in1)+1), axis=0)\n```",
            "```python\n    return tf.stack([in1 // 3, in1 % 3], axis=1)\n```",
            "def transform(in1):\n    return tf.stack([in1, tf.math.floormod(tf.range(tf.size(in1)), 2)], axis=1)",
            "```python\n    return tf.stack([in1 // 3, in1 % 3], axis=1)\n```",
            "```python\n    return tf.stack([in1, tf.concat([tf.range(tf.math.count_nonzero(in1[:i])) for i in range(tf.shape(in1)[0])], axis=0)], axis=1)\n```",
            "```python\n    return tf.stack([in1 // 3, tf.range(tf.shape(in1)[0]) % 3], axis=1)\n```",
            "```python\n    return tf.transpose(tf.stack([in1 // 3, in1 % 3]))\n```",
            "```python\n    return tf.stack([in1, tf.range(tf.shape(in1)[0])], axis=1)\n```",
            "```python\n    return tf.transpose(tf.stack([tf.range(tf.reduce_max(in1) + 1), tf.math.bincount(in1)]))\n```",
            "```python\n    return tf.stack([in1, tf.tile(tf.range(2), [3])], axis=1)\n```",
            "```python\n    return tf.stack([in1, tf.range(tf.size(in1)) % 2], axis=1)\n```",
            "def transform(in1):\n    return tf.expand_dims(in1, 1) + tf.cast(tf.range(2), tf.int64)",
            "```python\n    return tf.transpose(tf.stack([in1, tf.range(tf.math.count_nonzero(in1, axis=0))]))\n```",
            "```python\ndef transform(in1):\n    return tf.stack([in1 // 2, in1 % 2], axis=1)\n```",
            "```python\n    return tf.stack([in1, tf.range(tf.size(in1)) % 2], axis=1)\n```",
            "```python\n    return tf.stack([in1, tf.range(tf.reduce_sum(tf.minimum(in1, 1)))], axis=1)\n```",
            "```python\n    return tf.stack([in1 // 3, in1 % 3], axis=1)\n```",
            "```python\n    return tf.stack([in1, tf.range(tf.size(in1)) % 2], axis=1)\n```",
            "```python\n    return tf.stack([in1 // 3, in1 % 3], axis=1)\n```",
            "```python\n    return tf.stack([in1, tf.range(tf.size(in1)) % 2], axis=1)\n```",
            "```python\n    return tf.stack([tf.repeat(tf.range(tf.reduce_max(in1) + 1), in1), tf.range(tf.reduce_sum(in1))], axis=1)\n```",
            "```python\n    return tf.stack([tf.range(tf.shape(in1)[0]) // 3, tf.range(tf.shape(in1)[0]) % 3], axis=1)\n```",
            "```python\n    return tf.stack([in1 // 3, in1 % 3], axis=1)\n```",
            "```python\n    return tf.stack([in1 // 2, in1 % 2], axis=1)\n```",
            "```python\n    return tf.stack([tf.repeat(tf.range(tf.reduce_max(in1) + 1), tf.bincount(in1)), tf.range(tf.size(in1))], axis=1)\n```",
            "```python\n    return tf.stack([in1 // 2, in1 % 2], axis=1)\n```"
        ],
        "normalized_completions": [
            "def transform(in1):\n    return tf.stack([in1, tf.range(tf.size(in1)) % 2], axis=1)",
            "def transform(in1):\n    return tf.stack([in1, tf.range(tf.size(in1)) % 2], axis=1)",
            "def transform(in1):\n    return tf.expand_dims(tf.range(tf.reduce_max(in1) + 1), 0) + tf.expand_dims(in1, 1)",
            "def transform(in1):\n    return tf.stack([in1, tf.range(tf.size(in1)) % 2], axis=1)",
            "def transform(in1):\n    return tf.expand_dims(in1, axis=-1) + tf.expand_dims(tf.range(tf.reduce_max(in1)+1), axis=0)",
            "def transform(in1):\n    return tf.stack([in1 // 3, in1 % 3], axis=1)",
            "def transform(in1):\n    return tf.stack([in1, tf.math.floormod(tf.range(tf.size(in1)), 2)], axis=1)",
            "def transform(in1):\n    return tf.stack([in1 // 3, in1 % 3], axis=1)",
            "def transform(in1):\n    return tf.stack([in1, tf.concat([tf.range(tf.math.count_nonzero(in1[:i])) for i in range(tf.shape(in1)[0])], axis=0)], axis=1)",
            "def transform(in1):\n    return tf.stack([in1 // 3, tf.range(tf.shape(in1)[0]) % 3], axis=1)",
            "def transform(in1):\n    return tf.transpose(tf.stack([in1 // 3, in1 % 3]))",
            "def transform(in1):\n    return tf.stack([in1, tf.range(tf.shape(in1)[0])], axis=1)",
            "def transform(in1):\n    return tf.transpose(tf.stack([tf.range(tf.reduce_max(in1) + 1), tf.math.bincount(in1)]))",
            "def transform(in1):\n    return tf.stack([in1, tf.tile(tf.range(2), [3])], axis=1)",
            "def transform(in1):\n    return tf.stack([in1, tf.range(tf.size(in1)) % 2], axis=1)",
            "def transform(in1):\n    return tf.expand_dims(in1, 1) + tf.cast(tf.range(2), tf.int64)",
            "def transform(in1):\n    return tf.transpose(tf.stack([in1, tf.range(tf.math.count_nonzero(in1, axis=0))]))",
            "def transform(in1):\n    return tf.stack([in1 // 2, in1 % 2], axis=1)",
            "def transform(in1):\n    return tf.stack([in1, tf.range(tf.size(in1)) % 2], axis=1)",
            "def transform(in1):\n    return tf.stack([in1, tf.range(tf.reduce_sum(tf.minimum(in1, 1)))], axis=1)",
            "def transform(in1):\n    return tf.stack([in1 // 3, in1 % 3], axis=1)",
            "def transform(in1):\n    return tf.stack([in1, tf.range(tf.size(in1)) % 2], axis=1)",
            "def transform(in1):\n    return tf.stack([in1 // 3, in1 % 3], axis=1)",
            "def transform(in1):\n    return tf.stack([in1, tf.range(tf.size(in1)) % 2], axis=1)",
            "def transform(in1):\n    return tf.stack([tf.repeat(tf.range(tf.reduce_max(in1) + 1), in1), tf.range(tf.reduce_sum(in1))], axis=1)",
            "def transform(in1):\n    return tf.stack([tf.range(tf.shape(in1)[0]) // 3, tf.range(tf.shape(in1)[0]) % 3], axis=1)",
            "def transform(in1):\n    return tf.stack([in1 // 3, in1 % 3], axis=1)",
            "def transform(in1):\n    return tf.stack([in1 // 2, in1 % 2], axis=1)",
            "def transform(in1):\n    return tf.stack([tf.repeat(tf.range(tf.reduce_max(in1) + 1), tf.bincount(in1)), tf.range(tf.size(in1))], axis=1)",
            "def transform(in1):\n    return tf.stack([in1 // 2, in1 % 2], axis=1)"
        ],
        "tf_operators": {
            "tf.size": 9,
            "tf.range": 21,
            "tf.stack": 27,
            "tf.expand_dims": 3,
            "tf.reduce_max": 5,
            "tf.math.floormod": 1,
            "tf.shape": 4,
            "tf.math.count_nonzero": 2,
            "tf.concat": 1,
            "tf.transpose": 3,
            "tf.math.bincount": 1,
            "tf.tile": 1,
            "tf.cast": 1,
            "tf.int64": 1,
            "tf.minimum": 1,
            "tf.reduce_sum": 2,
            "tf.repeat": 2,
            "tf.bincount": 1
        },
        "coverage_percentage": 40.0,
        "total_covered": 2,
        "total_in_target": 5,
        "parsed_constants": [
            [
                2,
                1
            ],
            [
                2,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                2,
                1
            ],
            [
                -1,
                1,
                0
            ],
            [
                3,
                3,
                1
            ],
            [
                2,
                1
            ],
            [
                3,
                3,
                1
            ],
            [
                0,
                0,
                1
            ],
            [
                3,
                0,
                3,
                1
            ],
            [
                3,
                3
            ],
            [
                0,
                1
            ],
            [
                1
            ],
            [
                2,
                3,
                1
            ],
            [
                2,
                1
            ],
            [
                1,
                2
            ],
            [
                0
            ],
            [
                2,
                2,
                1
            ],
            [
                2,
                1
            ],
            [
                1,
                1
            ],
            [
                3,
                3,
                1
            ],
            [
                2,
                1
            ],
            [
                3,
                3,
                1
            ],
            [
                2,
                1
            ],
            [
                1,
                1
            ],
            [
                0,
                3,
                0,
                3,
                1
            ],
            [
                3,
                3,
                1
            ],
            [
                2,
                2,
                1
            ],
            [
                1,
                1
            ],
            [
                2,
                2,
                1
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            3,
            -1
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 1,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 0,
            "tf_bool": 0,
            "axis": 0,
            "common": 42,
            "tf_float32": 0,
            "shape_tuple": 0,
            "shape": 0,
            "tf_int64": 1,
            "provided": 33,
            "input_var": 61
        }
    },
    {
        "name": "google_03",
        "description": "Slice the first dimension of a SparseTensor",
        "target_program": "tf.divide(in1, tf.expand_dims(tf.reduce_sum(in1, axis=1), 1))",
        "source": "Real task encountered by Googler, 11/01/2018",
        "constants": "[]",
        "examples": {
            "inputs": "tf.SparseTensor(indices=[[0, 0, 0], [0, 1, 1], [1, 1, 1], [1, 1, 2]], values=[1., 1., 1., 1.], dense_shape=[2, 2, 800])",
            "outputs": "tf.SparseTensor(indices=[[0, 0, 0], [0, 1, 1]], values=[1., 1.], dense_shape=[1, 2, 800])"
        },
        "completions": [
            "```python\n    return tf.sparse.slice(in1, [0, 0, 0], [1, in1.dense_shape[1], in1.dense_shape[2]])\n```",
            "```python\n    return tf.sparse.slice(in1, [0, 0, 0], [1, in1.dense_shape[1], in1.dense_shape[2]])\n```",
            "```python\n    return tf.sparse.slice(in1, [0, 0, 0], [1, in1.dense_shape[1], in1.dense_shape[2]])\n```",
            "```python\n    return tf.sparse.slice(in1, [0, 0, 0], [1, in1.dense_shape[1], in1.dense_shape[2]])\n```",
            "```python\n    return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])\n```",
            "```python\n    return tf.sparse.slice(in1, [0, 0, 0], [1, in1.dense_shape[1], in1.dense_shape[2]])\n```",
            "```python\n    return tf.sparse.slice(in1, [0, 0, 0], [1, in1.dense_shape[1], in1.dense_shape[2]])\n```",
            "```python\n    return tf.sparse.slice(in1, start=[0, 0, 0], size=[1, -1, -1])\n```",
            "```python\n    return tf.sparse.slice(in1, [0, 0, 0], [1, in1.dense_shape[1], in1.dense_shape[2]])\n```",
            "```python\n    return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])\n```",
            "```python\n    return tf.sparse.slice(in1, [0, 0, 0], [1, in1.dense_shape[1], in1.dense_shape[2]])\n```",
            "```python\n   return tf.sparse.slice(in1, [0, 0, 0], [1, in1.dense_shape[1], in1.dense_shape[2]])\n```",
            "```python\n    return tf.sparse.slice(in1, [0, 0, 0], [1, in1.dense_shape[1], in1.dense_shape[2]])\n```",
            "```python\n    return tf.sparse.slice(in1, start=[0, 0, 0], size=[1, -1, -1])\n```",
            "```python\n    return tf.sparse.slice(in1, [0, 0, 0], [1, in1.dense_shape[1], in1.dense_shape[2]])\n```",
            "```python\n    return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])\n```",
            "```python\n    return tf.sparse.slice(in1, [0, 0, 0], [1, in1.dense_shape[1], in1.dense_shape[2]])\n```",
            "```python\n    return tf.sparse.slice(in1, [0, 0, 0], [1, in1.dense_shape[1], in1.dense_shape[2]])\n```",
            "```python\n    return tf.sparse.slice(in1, [0, 0, 0], [1, tf.shape(in1.dense_shape)[1], tf.shape(in1.dense_shape)[2]])\n```",
            "```python\n    return tf.sparse.slice(in1, start=[0], size=[1])\n```",
            "```python\n    return tf.sparse.slice(in1, [0, 0, 0], [1, in1.dense_shape[1], in1.dense_shape[2]])\n```",
            "```python\n    return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])\n```",
            "```python\n    return tf.sparse.slice(in1, [0, 0, 0], [1, in1.dense_shape[1], in1.dense_shape[2]])\n```",
            "```python\n    return tf.sparse.slice(in1, tf.constant([0, 0, 0], tf.int64), tf.constant([1, in1.dense_shape[1], in1.dense_shape[2]], tf.int64))\n```",
            "```python\n    return tf.sparse.slice(in1, [0, 0, 0], [1, 2, in1.dense_shape[2]])\n```",
            "```python\n    return tf.sparse.slice(in1, [0, 0, 0], [1, in1.dense_shape[1], in1.dense_shape[2]])\n```",
            "```python\n    return tf.sparse.slice(in1, [0, 0, 0], [1, in1.dense_shape[1], in1.dense_shape[2]])\n```",
            "```python\n    return tf.sparse.slice(in1, [0, 0, 0], [1, tf.cast(tf.shape(in1)[1], tf.int64), tf.cast(tf.shape(in1)[2], tf.int64)])\n```",
            "```python\n    return tf.sparse.slice(in1, [0, 0, 0], [1, in1.dense_shape[1], in1.dense_shape[2]])\n```",
            "```python\n    return tf.sparse.slice(in1, [0, 0, 0], [1, in1.dense_shape[1], in1.dense_shape[2]])\n```"
        ],
        "normalized_completions": [
            "def transform(in1):\n    return tf.sparse.slice(in1, [0, 0, 0], [1, in1.dense_shape[1], in1.dense_shape[2]])",
            "def transform(in1):\n    return tf.sparse.slice(in1, [0, 0, 0], [1, in1.dense_shape[1], in1.dense_shape[2]])",
            "def transform(in1):\n    return tf.sparse.slice(in1, [0, 0, 0], [1, in1.dense_shape[1], in1.dense_shape[2]])",
            "def transform(in1):\n    return tf.sparse.slice(in1, [0, 0, 0], [1, in1.dense_shape[1], in1.dense_shape[2]])",
            "def transform(in1):\n    return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])",
            "def transform(in1):\n    return tf.sparse.slice(in1, [0, 0, 0], [1, in1.dense_shape[1], in1.dense_shape[2]])",
            "def transform(in1):\n    return tf.sparse.slice(in1, [0, 0, 0], [1, in1.dense_shape[1], in1.dense_shape[2]])",
            "def transform(in1):\n    return tf.sparse.slice(in1, start=[0, 0, 0], size=[1, -1, -1])",
            "def transform(in1):\n    return tf.sparse.slice(in1, [0, 0, 0], [1, in1.dense_shape[1], in1.dense_shape[2]])",
            "def transform(in1):\n    return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])",
            "def transform(in1):\n    return tf.sparse.slice(in1, [0, 0, 0], [1, in1.dense_shape[1], in1.dense_shape[2]])",
            "def transform(in1):\n   return tf.sparse.slice(in1, [0, 0, 0], [1, in1.dense_shape[1], in1.dense_shape[2]])",
            "def transform(in1):\n    return tf.sparse.slice(in1, [0, 0, 0], [1, in1.dense_shape[1], in1.dense_shape[2]])",
            "def transform(in1):\n    return tf.sparse.slice(in1, start=[0, 0, 0], size=[1, -1, -1])",
            "def transform(in1):\n    return tf.sparse.slice(in1, [0, 0, 0], [1, in1.dense_shape[1], in1.dense_shape[2]])",
            "def transform(in1):\n    return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])",
            "def transform(in1):\n    return tf.sparse.slice(in1, [0, 0, 0], [1, in1.dense_shape[1], in1.dense_shape[2]])",
            "def transform(in1):\n    return tf.sparse.slice(in1, [0, 0, 0], [1, in1.dense_shape[1], in1.dense_shape[2]])",
            "def transform(in1):\n    return tf.sparse.slice(in1, [0, 0, 0], [1, tf.shape(in1.dense_shape)[1], tf.shape(in1.dense_shape)[2]])",
            "def transform(in1):\n    return tf.sparse.slice(in1, start=[0], size=[1])",
            "def transform(in1):\n    return tf.sparse.slice(in1, [0, 0, 0], [1, in1.dense_shape[1], in1.dense_shape[2]])",
            "def transform(in1):\n    return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])",
            "def transform(in1):\n    return tf.sparse.slice(in1, [0, 0, 0], [1, in1.dense_shape[1], in1.dense_shape[2]])",
            "def transform(in1):\n    return tf.sparse.slice(in1, tf.constant([0, 0, 0], tf.int64), tf.constant([1, in1.dense_shape[1], in1.dense_shape[2]], tf.int64))",
            "def transform(in1):\n    return tf.sparse.slice(in1, [0, 0, 0], [1, 2, in1.dense_shape[2]])",
            "def transform(in1):\n    return tf.sparse.slice(in1, [0, 0, 0], [1, in1.dense_shape[1], in1.dense_shape[2]])",
            "def transform(in1):\n    return tf.sparse.slice(in1, [0, 0, 0], [1, in1.dense_shape[1], in1.dense_shape[2]])",
            "def transform(in1):\n    return tf.sparse.slice(in1, [0, 0, 0], [1, tf.cast(tf.shape(in1)[1], tf.int64), tf.cast(tf.shape(in1)[2], tf.int64)])",
            "def transform(in1):\n    return tf.sparse.slice(in1, [0, 0, 0], [1, in1.dense_shape[1], in1.dense_shape[2]])",
            "def transform(in1):\n    return tf.sparse.slice(in1, [0, 0, 0], [1, in1.dense_shape[1], in1.dense_shape[2]])"
        ],
        "tf_operators": {
            "tf.sparse.slice": 30,
            "tf.shape": 2,
            "tf.constant": 1,
            "tf.int64": 2,
            "tf.cast": 1
        },
        "coverage_percentage": 0.0,
        "total_covered": 0,
        "total_in_target": 3,
        "parsed_constants": [
            [
                0,
                0,
                0,
                1,
                1,
                2
            ],
            [
                0,
                0,
                0,
                1,
                1,
                2
            ],
            [
                0,
                0,
                0,
                1,
                1,
                2
            ],
            [
                0,
                0,
                0,
                1,
                1,
                2
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                1,
                2
            ],
            [
                0,
                0,
                0,
                1,
                1,
                2
            ],
            [
                0,
                0,
                0,
                1,
                -1,
                -1
            ],
            [
                0,
                0,
                0,
                1,
                1,
                2
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                1,
                2
            ],
            [
                0,
                0,
                0,
                1,
                1,
                2
            ],
            [
                0,
                0,
                0,
                1,
                1,
                2
            ],
            [
                0,
                0,
                0,
                1,
                -1,
                -1
            ],
            [
                0,
                0,
                0,
                1,
                1,
                2
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                1,
                2
            ],
            [
                0,
                0,
                0,
                1,
                1,
                2
            ],
            [
                0,
                0,
                0,
                1,
                1,
                2
            ],
            [
                0,
                1
            ],
            [
                0,
                0,
                0,
                1,
                1,
                2
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                1,
                2
            ],
            [
                0,
                0,
                0,
                1,
                1,
                2
            ],
            [
                0,
                0,
                0,
                1,
                2,
                2
            ],
            [
                0,
                0,
                0,
                1,
                1,
                2
            ],
            [
                0,
                0,
                0,
                1,
                1,
                2
            ],
            [
                0,
                0,
                0,
                1,
                1,
                2
            ],
            [
                0,
                0,
                0,
                1,
                1,
                2
            ],
            [
                0,
                0,
                0,
                1,
                1,
                2
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            800,
            -1
        ],
        "constant_counts": [
            {
                "common": 5,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 6,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 6,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 2,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 2,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 0,
            "tf_bool": 0,
            "axis": 28,
            "common": 144,
            "tf_float32": 0,
            "shape_tuple": 0,
            "shape": 4,
            "tf_int64": 4,
            "provided": 0,
            "input_var": 32
        }
    },
    {
        "name": "google_04",
        "description": "Reshape a flat array into a rank 3 tensor",
        "target_program": "tf.reshape(in1, shape=(4, 3, 2))",
        "source": "Real task encountered by Googler, 3/21/2019",
        "constants": "[]",
        "examples": {
            "inputs": "[[111, 112, 121, 122, 131, 132, 211, 212, 221, 222, 231, 232, 311, 312, 321, 322, 331, 332, 411, 412, 421, 422, 431, 432],]",
            "outputs": "[[[111, 112], [121, 122], [131, 132]],    [[211, 212], [221, 222], [231, 232]],    [[311, 312], [321, 322], [331, 332]],    [[411, 412], [421, 422], [431, 432]]]"
        },
        "completions": [
            "```python\n    return tf.reshape(in1, [4, 3, 2])\n```",
            "```python\n    return tf.reshape(in1, [4, 3, 2])\n```",
            "```python\n    return tf.reshape(in1, [4, 3, 2])\n```",
            "```python\n    return tf.reshape(in1, (4, 3, 2))\n```",
            "```python\n    return tf.reshape(in1, (4, 3, 2))\n```",
            "```python\n    return tf.reshape(in1, [4, 3, 2])\n```",
            "```python\n    return tf.reshape(in1, [4, 3, 2])\n```",
            "```python\n    return tf.reshape(in1, [4, 3, 2])\n```",
            "```\n    return tf.reshape(in1, [4, 3, 2])\n```",
            "```python\n    return tf.reshape(in1, [4, 3, 2])\n```",
            "```python\n    return tf.reshape(in1, [4, 3, 2])\n```",
            "```python\n    return tf.reshape(in1, [4, 3, 2])\n```",
            "```python\n    return tf.reshape(in1, [4, 3, 2])\n```",
            "```python\n    return tf.reshape(in1, [4, 3, 2])\n```",
            "```python\n    return tf.reshape(in1, [4, 3, 2])\n```",
            "```python\n    return tf.reshape(in1, [4, 3, 2])\n```",
            "```python\n    return tf.reshape(in1, [4, 3, 2])\n```",
            "```python\n    return tf.reshape(in1, [4, 3, 2])\n```",
            "```python\n    return tf.reshape(in1, [4, 3, 2])\n```",
            "```python\n    return tf.reshape(in1, [4, 3, 2])\n```",
            "```python\n    return tf.reshape(in1, [4, 3, 2])\n```",
            "```python\n    return tf.reshape(in1, [4, 3, 2])\n```",
            "```python\n    return tf.reshape(in1, [4, 3, 2])\n```",
            "```python\n    return tf.reshape(in1, [4, 3, 2])\n```",
            "```python\n    return tf.reshape(in1, [4, 3, 2])\n```",
            "```python\n    return tf.reshape(in1, [4, 3, 2])\n```",
            "```python\n    return tf.reshape(in1, [4, 3, 2])\n```",
            "```python\n    return tf.reshape(in1, [4, 3, 2])\n```",
            "```python\n    return tf.reshape(in1, (4, 3, 2))\n```",
            "```python\n    return tf.reshape(in1, [4, 3, 2])\n```"
        ],
        "normalized_completions": [
            "def transform(in1):\n    return tf.reshape(in1, [4, 3, 2])",
            "def transform(in1):\n    return tf.reshape(in1, [4, 3, 2])",
            "def transform(in1):\n    return tf.reshape(in1, [4, 3, 2])",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))",
            "def transform(in1):\n    return tf.reshape(in1, [4, 3, 2])",
            "def transform(in1):\n    return tf.reshape(in1, [4, 3, 2])",
            "def transform(in1):\n    return tf.reshape(in1, [4, 3, 2])",
            "def transform(in1):\n    return tf.reshape(in1, [4, 3, 2])",
            "def transform(in1):\n    return tf.reshape(in1, [4, 3, 2])",
            "def transform(in1):\n    return tf.reshape(in1, [4, 3, 2])",
            "def transform(in1):\n    return tf.reshape(in1, [4, 3, 2])",
            "def transform(in1):\n    return tf.reshape(in1, [4, 3, 2])",
            "def transform(in1):\n    return tf.reshape(in1, [4, 3, 2])",
            "def transform(in1):\n    return tf.reshape(in1, [4, 3, 2])",
            "def transform(in1):\n    return tf.reshape(in1, [4, 3, 2])",
            "def transform(in1):\n    return tf.reshape(in1, [4, 3, 2])",
            "def transform(in1):\n    return tf.reshape(in1, [4, 3, 2])",
            "def transform(in1):\n    return tf.reshape(in1, [4, 3, 2])",
            "def transform(in1):\n    return tf.reshape(in1, [4, 3, 2])",
            "def transform(in1):\n    return tf.reshape(in1, [4, 3, 2])",
            "def transform(in1):\n    return tf.reshape(in1, [4, 3, 2])",
            "def transform(in1):\n    return tf.reshape(in1, [4, 3, 2])",
            "def transform(in1):\n    return tf.reshape(in1, [4, 3, 2])",
            "def transform(in1):\n    return tf.reshape(in1, [4, 3, 2])",
            "def transform(in1):\n    return tf.reshape(in1, [4, 3, 2])",
            "def transform(in1):\n    return tf.reshape(in1, [4, 3, 2])",
            "def transform(in1):\n    return tf.reshape(in1, [4, 3, 2])",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))",
            "def transform(in1):\n    return tf.reshape(in1, [4, 3, 2])"
        ],
        "tf_operators": {
            "tf.reshape": 30
        },
        "coverage_percentage": 100.0,
        "total_covered": 1,
        "total_in_target": 1,
        "parsed_constants": [
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ]
        ],
        "all_constants": [
            2,
            3,
            4
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 3,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 3,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 3,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 3,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 3,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 3,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 3,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 3,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 3,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 3,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 3,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 3,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 3,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 3,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 3,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 3,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 3,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 3,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 3,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 3,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 3,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 3,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 3,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 3,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 3,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 3,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 3,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 0,
            "tf_bool": 0,
            "axis": 0,
            "common": 0,
            "tf_float32": 0,
            "shape_tuple": 3,
            "shape": 0,
            "tf_int64": 0,
            "provided": 81,
            "input_var": 30
        }
    },
    {
        "name": "google_05",
        "description": "Repeat each input entry 6 times",
        "target_program": "tf.tile(tf.expand_dims(in1, 1), (1, 6, 1))",
        "source": "Real task encountered by Googler, 3/22/2019",
        "constants": "[6]",
        "examples": {
            "inputs": "[[[1, 2, 3, 4], [5, 6, 7, 8]],]",
            "outputs": "[[[1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4],     [1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4]],    [[5, 6, 7, 8], [5, 6, 7, 8], [5, 6, 7, 8],     [5, 6, 7, 8], [5, 6, 7, 8], [5, 6, 7, 8]]]"
        },
        "completions": [
            "```python\n    return tf.tile(tf.expand_dims(in1, 1), [1, 6, 1])\n```",
            "```python\n    return tf.tile(tf.expand_dims(in1, 1), [1, 6, 1])\n```",
            "```python\n    return tf.tile(tf.expand_dims(in1, 1), [1, 6, 1])\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 6, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 6, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), repeats=6, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 6, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, axis=1), 6, axis=1)\n```",
            "```python\n    return tf.tile(tf.expand_dims(in1, axis=1), [1, 6, 1])\n```",
            "```python\n    return tf.tile(tf.expand_dims(in1, 1), [1, 6, 1])\n```",
            "```python\n    return tf.tile(tf.expand_dims(in1, 1), [1, 6, 1])\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 6, axis=1)\n```",
            "```python\n    return tf.tile(tf.expand_dims(in1, 1), [1, 6, 1])\n```",
            "```python\n    return tf.repeat(in1[:, tf.newaxis, :], 6, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 6, axis=1)\n```",
            "```python\n    return tf.tile(tf.expand_dims(in1, 1), [1, 6, 1])\n```",
            "```python\n    return tf.tile(tf.expand_dims(in1, 1), [1, 6, 1])\n```",
            "```python\n    return tf.tile(tf.expand_dims(in1, 1), [1, 6, 1])\n```",
            "```python\n    return tf.tile(tf.expand_dims(in1, 1), [1, 6, 1])\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 6, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 6, axis=1)\n```",
            "```python\n    return tf.tile(tf.expand_dims(in1, 1), [1, 6, 1])\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 6, axis=1)\n```",
            "```python\n    return tf.tile(tf.expand_dims(in1, 1), [1, 6, 1])\n```",
            "```python\n    return tf.tile(tf.expand_dims(in1, axis=1), [1, 6, 1])\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, axis=1), repeats=6, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 6, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 6, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), repeats=6, axis=1)\n```",
            "```python\n    return tf.repeat(in1[:, tf.newaxis, :], 6, axis=1)\n```"
        ],
        "normalized_completions": [
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, 1), [1, 6, 1])",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, 1), [1, 6, 1])",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, 1), [1, 6, 1])",
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(in1, 1), 6, axis=1)",
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(in1, 1), 6, axis=1)",
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(in1, 1), repeats=6, axis=1)",
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(in1, 1), 6, axis=1)",
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(in1, axis=1), 6, axis=1)",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, axis=1), [1, 6, 1])",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, 1), [1, 6, 1])",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, 1), [1, 6, 1])",
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(in1, 1), 6, axis=1)",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, 1), [1, 6, 1])",
            "def transform(in1):\n    return tf.repeat(in1[:, tf.newaxis, :], 6, axis=1)",
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(in1, 1), 6, axis=1)",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, 1), [1, 6, 1])",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, 1), [1, 6, 1])",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, 1), [1, 6, 1])",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, 1), [1, 6, 1])",
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(in1, 1), 6, axis=1)",
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(in1, 1), 6, axis=1)",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, 1), [1, 6, 1])",
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(in1, 1), 6, axis=1)",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, 1), [1, 6, 1])",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, axis=1), [1, 6, 1])",
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(in1, axis=1), repeats=6, axis=1)",
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(in1, 1), 6, axis=1)",
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(in1, 1), 6, axis=1)",
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(in1, 1), repeats=6, axis=1)",
            "def transform(in1):\n    return tf.repeat(in1[:, tf.newaxis, :], 6, axis=1)"
        ],
        "tf_operators": {
            "tf.expand_dims": 28,
            "tf.tile": 14,
            "tf.repeat": 16,
            "tf.newaxis": 2
        },
        "coverage_percentage": 100.0,
        "total_covered": 2,
        "total_in_target": 2,
        "parsed_constants": [
            [
                1,
                1,
                6,
                1
            ],
            [
                1,
                1,
                6,
                1
            ],
            [
                1,
                1,
                6,
                1
            ],
            [
                1,
                6,
                1
            ],
            [
                1,
                6,
                1
            ],
            [
                1,
                6,
                1
            ],
            [
                1,
                6,
                1
            ],
            [
                1,
                6,
                1
            ],
            [
                1,
                1,
                6,
                1
            ],
            [
                1,
                1,
                6,
                1
            ],
            [
                1,
                1,
                6,
                1
            ],
            [
                1,
                6,
                1
            ],
            [
                1,
                1,
                6,
                1
            ],
            [
                6,
                1
            ],
            [
                1,
                6,
                1
            ],
            [
                1,
                1,
                6,
                1
            ],
            [
                1,
                1,
                6,
                1
            ],
            [
                1,
                1,
                6,
                1
            ],
            [
                1,
                1,
                6,
                1
            ],
            [
                1,
                6,
                1
            ],
            [
                1,
                6,
                1
            ],
            [
                1,
                1,
                6,
                1
            ],
            [
                1,
                6,
                1
            ],
            [
                1,
                1,
                6,
                1
            ],
            [
                1,
                1,
                6,
                1
            ],
            [
                1,
                6,
                1
            ],
            [
                1,
                6,
                1
            ],
            [
                1,
                6,
                1
            ],
            [
                1,
                6,
                1
            ],
            [
                6,
                1
            ]
        ],
        "all_constants": [
            1,
            6
        ],
        "constant_counts": [
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 0,
            "tf_bool": 0,
            "axis": 0,
            "common": 72,
            "tf_float32": 0,
            "shape_tuple": 0,
            "shape": 0,
            "tf_int64": 0,
            "provided": 30,
            "input_var": 30
        }
    },
    {
        "name": "google_06",
        "description": "Take the max from each group of elements",
        "target_program": "tf.math.segment_max(in2, in1)",
        "source": "Real task encountered by Googler, 3/28/2019",
        "constants": "[]",
        "examples": {
            "inputs": "[[0, 1, 1, 2, 3, 3, 3, 3],[1, 3, 4, 5, 10, 8, 9, 4],]",
            "outputs": "[1, 4, 5, 10]"
        },
        "completions": [
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1) + 1)\n```",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "```python\ndef transform(in1, in2):\n    return tf.math.segment_max(in2, in1)\n```",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```\ndef transform(in1, in2):\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```\ndef transform(in1, in2):\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.math.segment_max(in2, in1)\n```",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "```python\ndef transform(in1, in2):\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```"
        ],
        "normalized_completions": [
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1) + 1)",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)"
        ],
        "tf_operators": {
            "tf.math.segment_max": 29,
            "tf.math.unsorted_segment_max": 1,
            "tf.reduce_max": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 1,
        "total_in_target": 1,
        "parsed_constants": [
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [
                1
            ],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            []
        ],
        "all_constants": [
            1
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 0,
            "tf_bool": 0,
            "axis": 0,
            "common": 1,
            "tf_float32": 0,
            "shape_tuple": 0,
            "shape": 0,
            "tf_int64": 0,
            "provided": 0,
            "input_var": 61
        }
    },
    {
        "name": "google_07",
        "description": "Take the argmax of each group of elements",
        "target_program": "tf.cast(tf.argmax((tf.sequence_mask(tf.cumsum(tf.math.bincount(in1)), dtype=tf.int32) - tf.sequence_mask(tf.cumsum(tf.math.bincount(in1), exclusive=True), dtype=tf.int32, maxlen=in1.shape[0])) * in2, axis=1), tf.int32) - tf.cumsum(tf.math.bincount(in1), exclusive=True)",
        "source": "Real task encountered by Googler, 3/29/2019",
        "constants": "[]",
        "examples": {
            "inputs": "[[0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 4, 4, 5, 5],[4, 1, 8, 2, 5, 7, 9, 3, 7, 3, 1, 42, 1, 2, 4, 0],]",
            "outputs": "[2, 3, 1, 0, 1, 0]"
        },
        "completions": [
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    unique_ids, _ = tf.unique(in1)\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1)+1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1) + 1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.cast(tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1) + 1), tf.int32)\n```",
            "```python\n    return tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1) + 1)\n```",
            "```python\n    return tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1) + 1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```"
        ],
        "normalized_completions": [
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    unique_ids, _ = tf.unique(in1)\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1)+1)",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1) + 1)",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    return tf.cast(tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1) + 1), tf.int32)",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1) + 1)",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1) + 1)",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)"
        ],
        "tf_operators": {
            "tf.math.segment_max": 25,
            "tf.unique": 1,
            "tf.math.unsorted_segment_max": 5,
            "tf.reduce_max": 5,
            "tf.int32": 1,
            "tf.cast": 1
        },
        "coverage_percentage": 33.33333333333333,
        "total_covered": 2,
        "total_in_target": 6,
        "parsed_constants": [
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [
                1
            ],
            [],
            [],
            [],
            [],
            [
                1
            ],
            [],
            [],
            [],
            [],
            [],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            []
        ],
        "all_constants": [
            1
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 1,
            "tf_bool": 0,
            "axis": 0,
            "common": 5,
            "tf_float32": 0,
            "shape_tuple": 0,
            "shape": 0,
            "tf_int64": 0,
            "provided": 0,
            "input_var": 66
        }
    },
    {
        "name": "google_08",
        "description": "create a mask for sequences of the given lengths",
        "target_program": "tf.cast(tf.greater(tf.expand_dims(in1, 1), tf.range(5)), tf.int32)",
        "source": "Real task encountered by Googler, 4/11/2019",
        "constants": "[5]",
        "examples": {
            "inputs": "[[3, 4, 2, 1],]",
            "outputs": "[[1, 1, 1, 0, 0],    [1, 1, 1, 1, 0],    [1, 1, 0, 0, 0],    [1, 0, 0, 0, 0]]"
        },
        "completions": [
            "```python\n    return tf.cast(tf.sequence_mask(in1, 5), tf.int32)\n```",
            "```python\n    return tf.sequence_mask(in1, tf.reduce_max(in1) + 1, dtype=tf.int32)\n```",
            "```python\n    return tf.cast(tf.sequence_mask(in1, 5), tf.int32)\n```",
            "```python\n    return tf.cast(tf.sequence_mask(in1, 5), tf.int32)\n```",
            "```python\n    return tf.cast(tf.sequence_mask(in1, maxlen=5), tf.int32)\n```",
            "```python\n    return tf.sequence_mask(in1, maxlen=5, dtype=tf.int32)\n```",
            "```python\n    return tf.cast(tf.sequence_mask(in1, maxlen=5), tf.int32)\n```",
            "```python\n    return tf.cast(tf.sequence_mask(in1, 5), tf.int32)\n```",
            "```python\n    return tf.cast(tf.sequence_mask(in1, 5), tf.int32)\n```",
            "```python\n    return tf.cast(tf.sequence_mask(in1, 5), tf.int32)\n```",
            "```python\n    return tf.cast(tf.sequence_mask(in1, maxlen=5), tf.int32)\n```",
            "```python\n    return tf.cast(tf.sequence_mask(in1, maxlen=5), tf.int32)\n```",
            "```python\n    return tf.cast(tf.sequence_mask(in1, 5), tf.int32)\n```",
            "```python\n    return tf.cast(tf.sequence_mask(in1, 5), tf.int32)\n```",
            "```python\n    max_len = tf.reduce_max(in1)\n    return tf.cast(tf.sequence_mask(in1, maxlen=max_len), tf.int32)\n```",
            "```python\n    return tf.cast(tf.sequence_mask(in1, 5), tf.int32)\n```",
            "```python\n    return tf.cast(tf.sequence_mask(in1, 5), tf.int32)\n```",
            "```python\n    return tf.sequence_mask(in1, maxlen=5, dtype=tf.int32)\n```",
            "```python\n    return tf.sequence_mask(in1, maxlen=5, dtype=tf.int32)\n```",
            "```python\n    return tf.cast(tf.sequence_mask(in1, 5), tf.int32)\n```",
            "def transform(in1):\n    return tf.sequence_mask(in1, maxlen=5, dtype=tf.int32)",
            "```python\n    return tf.cast(tf.sequence_mask(in1, 5), tf.int32)\n```",
            "def transform(in1):\n    return tf.cast(tf.sequence_mask(in1, 5), tf.int32)",
            "```python\n    return tf.math.logical_not(tf.sequence_mask(in1))\n```",
            "```python\n    return tf.sequence_mask(in1, maxlen=5)\n```",
            "```python\n    return tf.cast(tf.sequence_mask(in1, maxlen=5), tf.int32)\n```",
            "```python\n    return tf.sequence_mask(in1, maxlen=5, dtype=tf.int32)\n```",
            "```python\n    return tf.cast(tf.sequence_mask(in1, 5), tf.int32)\n```",
            "```python\n    return tf.cast(tf.sequence_mask(in1, 5), tf.int32)\n```",
            "```python\n    return tf.cast(tf.sequence_mask(in1, 5), tf.int32)\n```"
        ],
        "normalized_completions": [
            "def transform(in1):\n    return tf.cast(tf.sequence_mask(in1, 5), tf.int32)",
            "def transform(in1):\n    return tf.sequence_mask(in1, tf.reduce_max(in1) + 1, dtype=tf.int32)",
            "def transform(in1):\n    return tf.cast(tf.sequence_mask(in1, 5), tf.int32)",
            "def transform(in1):\n    return tf.cast(tf.sequence_mask(in1, 5), tf.int32)",
            "def transform(in1):\n    return tf.cast(tf.sequence_mask(in1, maxlen=5), tf.int32)",
            "def transform(in1):\n    return tf.sequence_mask(in1, maxlen=5, dtype=tf.int32)",
            "def transform(in1):\n    return tf.cast(tf.sequence_mask(in1, maxlen=5), tf.int32)",
            "def transform(in1):\n    return tf.cast(tf.sequence_mask(in1, 5), tf.int32)",
            "def transform(in1):\n    return tf.cast(tf.sequence_mask(in1, 5), tf.int32)",
            "def transform(in1):\n    return tf.cast(tf.sequence_mask(in1, 5), tf.int32)",
            "def transform(in1):\n    return tf.cast(tf.sequence_mask(in1, maxlen=5), tf.int32)",
            "def transform(in1):\n    return tf.cast(tf.sequence_mask(in1, maxlen=5), tf.int32)",
            "def transform(in1):\n    return tf.cast(tf.sequence_mask(in1, 5), tf.int32)",
            "def transform(in1):\n    return tf.cast(tf.sequence_mask(in1, 5), tf.int32)",
            "def transform(in1):\n    max_len = tf.reduce_max(in1)\n    return tf.cast(tf.sequence_mask(in1, maxlen=max_len), tf.int32)",
            "def transform(in1):\n    return tf.cast(tf.sequence_mask(in1, 5), tf.int32)",
            "def transform(in1):\n    return tf.cast(tf.sequence_mask(in1, 5), tf.int32)",
            "def transform(in1):\n    return tf.sequence_mask(in1, maxlen=5, dtype=tf.int32)",
            "def transform(in1):\n    return tf.sequence_mask(in1, maxlen=5, dtype=tf.int32)",
            "def transform(in1):\n    return tf.cast(tf.sequence_mask(in1, 5), tf.int32)",
            "def transform(in1):\n    return tf.sequence_mask(in1, maxlen=5, dtype=tf.int32)",
            "def transform(in1):\n    return tf.cast(tf.sequence_mask(in1, 5), tf.int32)",
            "def transform(in1):\n    return tf.cast(tf.sequence_mask(in1, 5), tf.int32)",
            "def transform(in1):\n    return tf.math.logical_not(tf.sequence_mask(in1))",
            "def transform(in1):\n    return tf.sequence_mask(in1, maxlen=5)",
            "def transform(in1):\n    return tf.cast(tf.sequence_mask(in1, maxlen=5), tf.int32)",
            "def transform(in1):\n    return tf.sequence_mask(in1, maxlen=5, dtype=tf.int32)",
            "def transform(in1):\n    return tf.cast(tf.sequence_mask(in1, 5), tf.int32)",
            "def transform(in1):\n    return tf.cast(tf.sequence_mask(in1, 5), tf.int32)",
            "def transform(in1):\n    return tf.cast(tf.sequence_mask(in1, 5), tf.int32)"
        ],
        "tf_operators": {
            "tf.sequence_mask": 30,
            "tf.int32": 28,
            "tf.cast": 22,
            "tf.reduce_max": 2,
            "tf.math.logical_not": 1
        },
        "coverage_percentage": 40.0,
        "total_covered": 2,
        "total_in_target": 5,
        "parsed_constants": [
            [
                5
            ],
            [
                1
            ],
            [
                5
            ],
            [
                5
            ],
            [
                5
            ],
            [
                5
            ],
            [
                5
            ],
            [
                5
            ],
            [
                5
            ],
            [
                5
            ],
            [
                5
            ],
            [
                5
            ],
            [
                5
            ],
            [
                5
            ],
            [],
            [
                5
            ],
            [
                5
            ],
            [
                5
            ],
            [
                5
            ],
            [
                5
            ],
            [
                5
            ],
            [
                5
            ],
            [
                5
            ],
            [],
            [
                5
            ],
            [
                5
            ],
            [
                5
            ],
            [
                5
            ],
            [
                5
            ],
            [
                5
            ]
        ],
        "all_constants": [
            1,
            5
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 28,
            "tf_bool": 0,
            "axis": 0,
            "common": 1,
            "tf_float32": 0,
            "shape_tuple": 0,
            "shape": 0,
            "tf_int64": 0,
            "provided": 27,
            "input_var": 32
        }
    },
    {
        "name": "google_09",
        "description": "sort the segments",
        "target_program": "tf.gather(in2, tf.argsort(in1, stable=True))",
        "source": "Real task encountered by Googler, 8/9/2019",
        "constants": "[]",
        "examples": {
            "inputs": "[[1, 1, 1, 0, 0, 2],[10, 20, 30, 14, 15, 26],]",
            "outputs": "[14, 15, 10, 20, 30, 26]"
        },
        "completions": [
            "```python\n    return tf.gather(in2, tf.argsort(in1, axis=0))\n```",
            "```python\n    return tf.gather(in2, tf.argsort(in1))\n```",
            "```python\n    return tf.gather(in2, tf.argsort(in1, axis=0))\n```",
            "```python\n    return tf.gather_nd(in2, tf.argsort(in1, stable=True))\n```",
            "```python\n    return tf.gather_nd(in2, tf.argsort(in1, axis=0, stable=True))\n```",
            "```python\n    order = tf.argsort(in1, axis=0)\n    return tf.gather_nd(in2, tf.expand_dims(order, 1))\n```",
            "```python\n    return tf.gather_nd(in2, tf.argsort(in1, stable=True))\n```",
            "```python\n    return tf.gather_nd(in2, tf.argsort(in1, stable=True))\n```",
            "```python\n    return tf.gather(in2, tf.argsort(in1, stable=True))\n```",
            "```python\n    return tf.gather(in2, tf.argsort(in1))\n```",
            "```python\n    return tf.gather_nd(in2, tf.argsort(in1, axis=0, stable=True))\n```",
            "```python\n    return tf.gather_nd(in2, tf.argsort(in1, axis=0, stable=True))\n```",
            "```python\n    seg_ids, sorted_indices = tf.sort(in1), tf.argsort(in1)\n    return tf.gather(in2, sorted_indices)\n```",
            "```python\n    return tf.gather(in2, tf.argsort(in1, axis=0, stable=True))\n```",
            "```python\n    return tf.gather_nd(in2, tf.argsort(in1, axis=0, stable=True))\n```",
            "```python\n    return tf.gather_nd(in2, tf.expand_dims(tf.argsort(in1), 1))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.gather(in2, tf.argsort(in1, axis=0))\n```",
            "```\ndef transform(in1, in2):\n    return tf.gather_nd(in2, tf.argsort(in1, stable=True))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.gather_nd(in2, tf.argsort(in1, axis=0, stable=True))\n```",
            "```\n    return tf.gather_nd(in2, tf.argsort(in1, stable=True))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.gather(in2, tf.argsort(in1, stable=True))\n```",
            "```python\n    return tf.gather_nd(in2, tf.argsort(in1, axis=0, stable=True))\n```",
            "```python\n    return tf.gather_nd(in2, tf.argsort(in1, stable=True))\n```",
            "```python\n    return tf.gather(in2, tf.argsort(in1, stable=True))\n```",
            "```python\n    return tf.gather_nd(in2, tf.argsort(in1, stable=True))\n```",
            "```python\n    segment_ids = tf.argsort(in1, 0, stable=True)\n    return tf.gather(in2, segment_ids)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.gather(in2, tf.argsort(in1, stable=True))\n```",
            "```\ndef transform(in1, in2):\n    return tf.gather(in2, tf.argsort(in1, stable=True))\n```",
            "```\ndef transform(in1, in2):\n    return tf.gather_nd(in2, tf.expand_dims(tf.argsort(in1, axis=0), axis=1))\n```",
            "```python\n    return tf.gather(in2, tf.argsort(in1, stable=True))\n```"
        ],
        "normalized_completions": [
            "def transform(in1, in2):\n    return tf.gather(in2, tf.argsort(in1, axis=0))",
            "def transform(in1, in2):\n    return tf.gather(in2, tf.argsort(in1))",
            "def transform(in1, in2):\n    return tf.gather(in2, tf.argsort(in1, axis=0))",
            "def transform(in1, in2):\n    return tf.gather_nd(in2, tf.argsort(in1, stable=True))",
            "def transform(in1, in2):\n    return tf.gather_nd(in2, tf.argsort(in1, axis=0, stable=True))",
            "def transform(in1, in2):\n    order = tf.argsort(in1, axis=0)\n    return tf.gather_nd(in2, tf.expand_dims(order, 1))",
            "def transform(in1, in2):\n    return tf.gather_nd(in2, tf.argsort(in1, stable=True))",
            "def transform(in1, in2):\n    return tf.gather_nd(in2, tf.argsort(in1, stable=True))",
            "def transform(in1, in2):\n    return tf.gather(in2, tf.argsort(in1, stable=True))",
            "def transform(in1, in2):\n    return tf.gather(in2, tf.argsort(in1))",
            "def transform(in1, in2):\n    return tf.gather_nd(in2, tf.argsort(in1, axis=0, stable=True))",
            "def transform(in1, in2):\n    return tf.gather_nd(in2, tf.argsort(in1, axis=0, stable=True))",
            "def transform(in1, in2):\n    seg_ids, sorted_indices = tf.sort(in1), tf.argsort(in1)\n    return tf.gather(in2, sorted_indices)",
            "def transform(in1, in2):\n    return tf.gather(in2, tf.argsort(in1, axis=0, stable=True))",
            "def transform(in1, in2):\n    return tf.gather_nd(in2, tf.argsort(in1, axis=0, stable=True))",
            "def transform(in1, in2):\n    return tf.gather_nd(in2, tf.expand_dims(tf.argsort(in1), 1))",
            "def transform(in1, in2):\n    return tf.gather(in2, tf.argsort(in1, axis=0))",
            "def transform(in1, in2):\n    return tf.gather_nd(in2, tf.argsort(in1, stable=True))",
            "def transform(in1, in2):\n    return tf.gather_nd(in2, tf.argsort(in1, axis=0, stable=True))",
            "def transform(in1, in2):\n    return tf.gather_nd(in2, tf.argsort(in1, stable=True))",
            "def transform(in1, in2):\n    return tf.gather(in2, tf.argsort(in1, stable=True))",
            "def transform(in1, in2):\n    return tf.gather_nd(in2, tf.argsort(in1, axis=0, stable=True))",
            "def transform(in1, in2):\n    return tf.gather_nd(in2, tf.argsort(in1, stable=True))",
            "def transform(in1, in2):\n    return tf.gather(in2, tf.argsort(in1, stable=True))",
            "def transform(in1, in2):\n    return tf.gather_nd(in2, tf.argsort(in1, stable=True))",
            "def transform(in1, in2):\n    segment_ids = tf.argsort(in1, 0, stable=True)\n    return tf.gather(in2, segment_ids)",
            "def transform(in1, in2):\n    return tf.gather(in2, tf.argsort(in1, stable=True))",
            "def transform(in1, in2):\n    return tf.gather(in2, tf.argsort(in1, stable=True))",
            "def transform(in1, in2):\n    return tf.gather_nd(in2, tf.expand_dims(tf.argsort(in1, axis=0), axis=1))",
            "def transform(in1, in2):\n    return tf.gather(in2, tf.argsort(in1, stable=True))"
        ],
        "tf_operators": {
            "tf.argsort": 30,
            "tf.gather": 14,
            "tf.gather_nd": 16,
            "tf.expand_dims": 3,
            "tf.sort": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 2,
        "total_in_target": 2,
        "parsed_constants": [
            [
                0
            ],
            [],
            [
                0
            ],
            [],
            [
                0
            ],
            [
                0,
                1
            ],
            [],
            [],
            [],
            [],
            [
                0
            ],
            [
                0
            ],
            [],
            [
                0
            ],
            [
                0
            ],
            [
                1
            ],
            [
                0
            ],
            [],
            [
                0
            ],
            [],
            [],
            [
                0
            ],
            [],
            [],
            [],
            [
                0
            ],
            [],
            [],
            [
                0,
                1
            ],
            []
        ],
        "all_constants": [
            0,
            1
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 0,
            "tf_bool": 0,
            "axis": 0,
            "common": 37,
            "tf_float32": 0,
            "shape_tuple": 0,
            "shape": 0,
            "tf_int64": 0,
            "provided": 0,
            "input_var": 61
        }
    },
    {
        "name": "google_11",
        "description": "count the number of elements greater than 0 in each row",
        "target_program": "tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)",
        "source": "Real task encountered by Googler, 8/26/2019",
        "constants": "[]",
        "examples": {
            "inputs": "[[[1.0, 0.3, -4.2, 0.0, 2.1, 0.4], [-0.1, 0.0, 1.4, -1.0, 0.4, 0.0], [0.1, 0.0, 0.7, -0.3, 0.5, -0.1], [1.4, 2.5, 0.3, 0.01, 0.0, 1.2]],]",
            "outputs": "[4, 2, 3, 5]"
        },
        "completions": [
            "```python\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\n    return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n```",
            "```python\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\n    return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n```",
            "```python\nreturn tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```"
        ],
        "normalized_completions": [
            "def transform(in1):\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)",
            "def transform(in1):\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)",
            "def transform(in1):\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)",
            "def transform(in1):\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)",
            "def transform(in1):\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)",
            "def transform(in1):\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)",
            "def transform(in1):\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)",
            "def transform(in1):\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)",
            "def transform(in1):\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)",
            "def transform(in1):\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)",
            "def transform(in1):\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)",
            "def transform(in1):\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)",
            "def transform(in1):\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)",
            "def transform(in1):\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)",
            "def transform(in1):\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)",
            "def transform(in1):\n    return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)",
            "def transform(in1):\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)",
            "def transform(in1):\n    return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)",
            "def transform(in1):\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)",
            "def transform(in1):\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)",
            "def transform(in1):\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)",
            "def transform(in1):\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)",
            "def transform(in1):\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)",
            "def transform(in1):\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)",
            "def transform(in1):\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)",
            "def transform(in1):\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)",
            "def transform(in1):\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)",
            "def transform(in1):\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)",
            "def transform(in1):\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)",
            "def transform(in1):\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)"
        ],
        "tf_operators": {
            "tf.greater": 30,
            "tf.math.count_nonzero": 28,
            "tf.reduce_sum": 2,
            "tf.int32": 2,
            "tf.cast": 2
        },
        "coverage_percentage": 100.0,
        "total_covered": 4,
        "total_in_target": 4,
        "parsed_constants": [
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ]
        ],
        "all_constants": [
            0,
            1
        ],
        "constant_counts": [
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 2,
            "tf_bool": 0,
            "axis": 0,
            "common": 60,
            "tf_float32": 0,
            "shape_tuple": 0,
            "shape": 0,
            "tf_int64": 0,
            "provided": 0,
            "input_var": 30
        }
    },
    {
        "name": "google_12",
        "description": "identify elements between 0 and 1",
        "target_program": "tf.cast(tf.logical_and(0 <= in1, in1 <= 1), tf.int32)",
        "source": "Real task encountered by Googler, 8/26/2019",
        "constants": "[]",
        "examples": {
            "inputs": "[[[1.0, 0.3, -4.2, 0.0, 2.1], [-0.1, 0.0, 1.4, -1.0, 0.4], [0.1, 0.0, 0.7, -0.3, 0.5], [1.4, 2.5, 0.3, -0.1, 0.0]],]",
            "outputs": "[[1, 1, 0, 1, 0],    [0, 1, 0, 0, 1],    [1, 1, 1, 0, 1],    [0, 0, 1, 0, 1]]"
        },
        "completions": [
            "```python\n    return tf.cast(tf.logical_and(tf.greater(in1, 0), tf.less_equal(in1, 1)), tf.int32)\n```",
            "```python\n    return tf.cast(tf.math.logical_and(in1 >= 0.0, in1 <= 1.0), tf.int32)\n```",
            "```python\n    return tf.cast(tf.logical_and(in1 >= 0, in1 <= 1), tf.int32)\n```",
            "```python\n    return tf.cast(tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1)), tf.int32)\n```",
            "```python\n    return tf.cast(tf.logical_and(tf.greater(in1, 0), tf.less_equal(in1, 1)), tf.int32)\n```",
            "```\n    return tf.cast(tf.math.logical_and(in1 >= 0, in1 <= 1), tf.int32)\n```",
            "```python\n    return tf.cast(tf.logical_and(in1 >= 0, in1 <= 1), tf.int32)\n```",
            "```python\n    return tf.cast(tf.logical_and(tf.greater_equal(in1, 0.0), tf.less_equal(in1, 1.0)), tf.int32)\n```",
            "```python\nreturn tf.cast(tf.logical_and(in1 >= 0, in1 <= 1), tf.int32)\n```",
            "```python\n    return tf.cast(tf.logical_and(in1 >= 0, in1 <= 1), tf.int32)\n```",
            "```python\n    return tf.cast(tf.logical_and(in1 >= 0, in1 <= 1), tf.int32)\n```",
            "```python\n    return tf.cast(tf.logical_and(in1 >= 0, in1 <= 1), tf.int32)\n```",
            "```python\n    return tf.cast(tf.math.logical_and(in1 >= 0, in1 <= 1), tf.int32)\n```",
            "```python\n    return tf.cast(tf.logical_and(in1 >= 0, in1 <= 1), tf.int32)\n```",
            "```python\n    return tf.cast(tf.logical_and(tf.greater(in1, 0), tf.less_equal(in1, 1)), tf.int32)\n```",
            "```python\n    return tf.cast(tf.logical_and(tf.greater_equal(in1, 0), tf.greater_equal(1, in1)), tf.int32)\n```",
            "```python\nreturn tf.cast(tf.math.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1)), tf.int32)\n```",
            "```python\ndef transform(in1):\n    return tf.cast(tf.math.logical_and(in1 >= 0, in1 <= 1), tf.int32)\n```",
            "```python\n    return tf.cast(tf.math.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1)), tf.int32)\n```",
            "```python\ndef transform(in1):\n    return tf.cast(tf.logical_and(in1 >= 0, in1 <= 1), tf.int32)\n```",
            "```python\nreturn tf.cast(tf.math.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1)), tf.int32)\n```",
            "```python\ndef transform(in1):\n    return tf.cast(tf.logical_and(in1 >= 0, in1 <= 1), tf.int32)\n```",
            "```python\ndef transform(in1):\n    return tf.cast(tf.logical_and(in1 > 0, in1 < 1), tf.int32)\n```",
            "```python\n    return tf.cast(tf.logical_and(in1 >= 0, in1 <= 1), tf.int32)\n```",
            "```python\nreturn tf.cast(tf.math.logical_and(in1 >= 0, in1 <= 1), tf.int32)\n```",
            "```python\ndef transform(in1):\n    return tf.cast(tf.logical_and(in1 > 0, in1 < 1), tf.int32)\n```",
            "```python\ndef transform(in1):\n    return tf.cast(tf.logical_and(in1 >= 0, in1 <= 1), tf.int32)\n```",
            "```python\ndef transform(in1):\n    return tf.cast(tf.logical_and(in1 > 0, in1 < 1), tf.int32)\n```",
            "```python\ndef transform(in1):\n    return tf.cast(tf.logical_and(in1 >= 0, in1 <= 1), tf.int32)\n```",
            "```python\n    return tf.cast(tf.math.logical_and(in1 >= 0, in1 <= 1), tf.int32)\n```"
        ],
        "normalized_completions": [
            "def transform(in1):\n    return tf.cast(tf.logical_and(tf.greater(in1, 0), tf.less_equal(in1, 1)), tf.int32)",
            "def transform(in1):\n    return tf.cast(tf.math.logical_and(in1 >= 0.0, in1 <= 1.0), tf.int32)",
            "def transform(in1):\n    return tf.cast(tf.logical_and(in1 >= 0, in1 <= 1), tf.int32)",
            "def transform(in1):\n    return tf.cast(tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1)), tf.int32)",
            "def transform(in1):\n    return tf.cast(tf.logical_and(tf.greater(in1, 0), tf.less_equal(in1, 1)), tf.int32)",
            "def transform(in1):\n    return tf.cast(tf.math.logical_and(in1 >= 0, in1 <= 1), tf.int32)",
            "def transform(in1):\n    return tf.cast(tf.logical_and(in1 >= 0, in1 <= 1), tf.int32)",
            "def transform(in1):\n    return tf.cast(tf.logical_and(tf.greater_equal(in1, 0.0), tf.less_equal(in1, 1.0)), tf.int32)",
            "def transform(in1):\n    return tf.cast(tf.logical_and(in1 >= 0, in1 <= 1), tf.int32)",
            "def transform(in1):\n    return tf.cast(tf.logical_and(in1 >= 0, in1 <= 1), tf.int32)",
            "def transform(in1):\n    return tf.cast(tf.logical_and(in1 >= 0, in1 <= 1), tf.int32)",
            "def transform(in1):\n    return tf.cast(tf.logical_and(in1 >= 0, in1 <= 1), tf.int32)",
            "def transform(in1):\n    return tf.cast(tf.math.logical_and(in1 >= 0, in1 <= 1), tf.int32)",
            "def transform(in1):\n    return tf.cast(tf.logical_and(in1 >= 0, in1 <= 1), tf.int32)",
            "def transform(in1):\n    return tf.cast(tf.logical_and(tf.greater(in1, 0), tf.less_equal(in1, 1)), tf.int32)",
            "def transform(in1):\n    return tf.cast(tf.logical_and(tf.greater_equal(in1, 0), tf.greater_equal(1, in1)), tf.int32)",
            "def transform(in1):\n    return tf.cast(tf.math.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1)), tf.int32)",
            "def transform(in1):\n    return tf.cast(tf.math.logical_and(in1 >= 0, in1 <= 1), tf.int32)",
            "def transform(in1):\n    return tf.cast(tf.math.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1)), tf.int32)",
            "def transform(in1):\n    return tf.cast(tf.logical_and(in1 >= 0, in1 <= 1), tf.int32)",
            "def transform(in1):\n    return tf.cast(tf.math.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1)), tf.int32)",
            "def transform(in1):\n    return tf.cast(tf.logical_and(in1 >= 0, in1 <= 1), tf.int32)",
            "def transform(in1):\n    return tf.cast(tf.logical_and(in1 > 0, in1 < 1), tf.int32)",
            "def transform(in1):\n    return tf.cast(tf.logical_and(in1 >= 0, in1 <= 1), tf.int32)",
            "def transform(in1):\n    return tf.cast(tf.math.logical_and(in1 >= 0, in1 <= 1), tf.int32)",
            "def transform(in1):\n    return tf.cast(tf.logical_and(in1 > 0, in1 < 1), tf.int32)",
            "def transform(in1):\n    return tf.cast(tf.logical_and(in1 >= 0, in1 <= 1), tf.int32)",
            "def transform(in1):\n    return tf.cast(tf.logical_and(in1 > 0, in1 < 1), tf.int32)",
            "def transform(in1):\n    return tf.cast(tf.logical_and(in1 >= 0, in1 <= 1), tf.int32)",
            "def transform(in1):\n    return tf.cast(tf.math.logical_and(in1 >= 0, in1 <= 1), tf.int32)"
        ],
        "tf_operators": {
            "tf.greater": 3,
            "tf.logical_and": 21,
            "tf.less_equal": 8,
            "tf.int32": 30,
            "tf.cast": 30,
            "tf.math.logical_and": 9,
            "tf.greater_equal": 6
        },
        "coverage_percentage": 100.0,
        "total_covered": 3,
        "total_in_target": 3,
        "parsed_constants": [
            [
                0,
                1
            ],
            [],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ]
        ],
        "all_constants": [
            0,
            1
        ],
        "constant_counts": [
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 30,
            "tf_bool": 0,
            "axis": 0,
            "common": 56,
            "tf_float32": 0,
            "shape_tuple": 0,
            "shape": 0,
            "tf_int64": 0,
            "provided": 0,
            "input_var": 60
        }
    },
    {
        "name": "google_13",
        "description": "Concatenate batches of sequences",
        "target_program": "tf.concat([in1, in2], axis=1)",
        "source": "Real task encountered by Googler, 9/13/2019",
        "constants": "[]",
        "examples": {
            "inputs": "[[[1, 2], [10, 20]],[[3, 4, 5], [30, 40, 50]],]",
            "outputs": "[[1, 2, 3, 4, 5], [10, 20, 30, 40, 50]]"
        },
        "completions": [
            "```python\n    return tf.concat([in1, in2], axis=1)\n```",
            "```python\n    return tf.concat([in1, in2], axis=1)\n```",
            "```python\n    return tf.concat([in1, in2], axis=1)\n```",
            "```python\n    return tf.concat([in1, in2], axis=1)\n```",
            "```python\n    return tf.concat([in1, in2], axis=1)\n```",
            "```python\n    return tf.concat([in1, in2], axis=1)\n```",
            "```python\n    return tf.concat([in1, in2], axis=1)\n```",
            "```python\n    return tf.concat([in1, in2], axis=1)\n```",
            "```python\n    return tf.concat([in1, in2], axis=1)\n```",
            "```python\n    return tf.concat([in1, in2], axis=1)\n```",
            "```python\n    return tf.concat([in1, in2], axis=1)\n```",
            "```python\n    return tf.concat([in1, in2], axis=1)\n```",
            "```python\n    return tf.concat([in1, in2], axis=1)\n```",
            "```python\n    return tf.concat([in1, in2], axis=1)\n```",
            "```python\n    return tf.concat([in1, in2], axis=1)\n```",
            "```python\n    return tf.concat([in1, in2], axis=1)\n```",
            "```python\n    return tf.concat([in1, in2], axis=1)\n```",
            "```python\n    return tf.concat([in1, in2], axis=1)\n```",
            "```python\n    return tf.concat([in1, in2], axis=1)\n```",
            "```python\n    return tf.concat([in1, in2], axis=1)\n```",
            "```python\n    return tf.concat([in1, in2], axis=1)\n```",
            "```python\n    return tf.concat([in1, in2], axis=1)\n```",
            "```python\n    return tf.concat([in1, in2], axis=1)\n```",
            "```python\n    return tf.concat([in1, in2], axis=1)\n```",
            "```python\n    return tf.concat([in1, in2], axis=1)\n```",
            "```python\n    return tf.concat([in1, in2], axis=1)\n```",
            "```python\n    return tf.concat([in1, in2], axis=1)\n```",
            "```python\n    return tf.concat([in1, in2], axis=1)\n```",
            "```\n    return tf.concat([in1, in2], axis=1)\n```",
            "```python\n    return tf.concat([in1, in2], axis=1)\n```"
        ],
        "normalized_completions": [
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)"
        ],
        "tf_operators": {
            "tf.concat": 30
        },
        "coverage_percentage": 100.0,
        "total_covered": 1,
        "total_in_target": 1,
        "parsed_constants": [
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ]
        ],
        "all_constants": [
            1
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 0,
            "tf_bool": 0,
            "axis": 0,
            "common": 30,
            "tf_float32": 0,
            "shape_tuple": 0,
            "shape": 0,
            "tf_int64": 0,
            "provided": 0,
            "input_var": 60
        }
    },
    {
        "name": "google_14",
        "description": "circular buffer",
        "target_program": "tf.roll(in1, 1, 1)",
        "source": "From internal Colab, 10/17/2019",
        "constants": "[]",
        "examples": {
            "inputs": "[[[1, 3, 2, 0, 0], [4, 6, 5, 0, 0], [8, 7, 9, 0, 0]],]",
            "outputs": "[[0, 1, 3, 2, 0], [0, 4, 6, 5, 0], [0, 8, 7, 9, 0]]"
        },
        "completions": [
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```"
        ],
        "normalized_completions": [
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)"
        ],
        "tf_operators": {
            "tf.roll": 30
        },
        "coverage_percentage": 100.0,
        "total_covered": 1,
        "total_in_target": 1,
        "parsed_constants": [
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ]
        ],
        "all_constants": [
            1
        ],
        "constant_counts": [
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 0,
            "tf_bool": 0,
            "axis": 0,
            "common": 60,
            "tf_float32": 0,
            "shape_tuple": 0,
            "shape": 0,
            "tf_int64": 0,
            "provided": 0,
            "input_var": 30
        }
    },
    {
        "name": "google_15",
        "description": "pad a zero column",
        "target_program": "tf.pad(in1, [[0, 0], [0, 1]], 'CONSTANT')",
        "source": "Real task encountered by Googler, 10/23/2019",
        "constants": "[]",
        "examples": {
            "inputs": "[[[1, 3, 5, 7], [2, 4, 6, 8]],]",
            "outputs": "[[1, 3, 5, 7, 0], [2, 4, 6, 8, 0]]"
        },
        "completions": [
            "```python\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT', constant_values=0)\n```",
            "```python\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT', constant_values=0)\n```",
            "```python\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n```",
            "```python\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT', constant_values=0)\n```",
            "```python\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n```",
            "```python\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n```",
            "```python\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n```",
            "```python\n    return tf.pad(in1, [[0, 0], [0, 1]])\n```",
            "```python\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n```",
            "```python\n    paddings = [[0, 0], [0, 1]]\n    return tf.pad(in1, paddings, mode='CONSTANT')\n```",
            "```python\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n```",
            "```\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n```",
            "```python\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT', constant_values=0)\n```",
            "```python\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n```",
            "```python\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n```",
            "```python\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n```",
            "```\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT', constant_values=0)\n```",
            "```python\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n```",
            "```\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n```",
            "```python\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n```",
            "```\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n```",
            "```\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT', constant_values=0)\n```",
            "```python\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n```",
            "```\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n```",
            "```\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n```",
            "```\n    return tf.pad(in1, [[0,0], [0,1]], mode='CONSTANT')\n```",
            "```python\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n```",
            "```python\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n```",
            "```python\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT', constant_values=0)\n```",
            "```python\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT', constant_values=0)\n```"
        ],
        "normalized_completions": [
            "def transform(in1):\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT', constant_values=0)",
            "def transform(in1):\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT', constant_values=0)",
            "def transform(in1):\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')",
            "def transform(in1):\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT', constant_values=0)",
            "def transform(in1):\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')",
            "def transform(in1):\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')",
            "def transform(in1):\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')",
            "def transform(in1):\n    return tf.pad(in1, [[0, 0], [0, 1]])",
            "def transform(in1):\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')",
            "def transform(in1):\n    paddings = [[0, 0], [0, 1]]\n    return tf.pad(in1, paddings, mode='CONSTANT')",
            "def transform(in1):\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')",
            "def transform(in1):\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')",
            "def transform(in1):\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT', constant_values=0)",
            "def transform(in1):\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')",
            "def transform(in1):\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')",
            "def transform(in1):\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')",
            "def transform(in1):\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT', constant_values=0)",
            "def transform(in1):\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')",
            "def transform(in1):\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')",
            "def transform(in1):\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')",
            "def transform(in1):\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')",
            "def transform(in1):\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT', constant_values=0)",
            "def transform(in1):\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')",
            "def transform(in1):\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')",
            "def transform(in1):\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')",
            "def transform(in1):\n    return tf.pad(in1, [[0,0], [0,1]], mode='CONSTANT')",
            "def transform(in1):\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')",
            "def transform(in1):\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')",
            "def transform(in1):\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT', constant_values=0)",
            "def transform(in1):\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT', constant_values=0)"
        ],
        "tf_operators": {
            "tf.pad": 30
        },
        "coverage_percentage": 100.0,
        "total_covered": 1,
        "total_in_target": 1,
        "parsed_constants": [
            [
                0,
                0,
                0,
                1,
                0
            ],
            [
                0,
                0,
                0,
                1,
                0
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1,
                0
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1,
                0
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1,
                0
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1,
                0
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1,
                0
            ],
            [
                0,
                0,
                0,
                1,
                0
            ]
        ],
        "all_constants": [
            0,
            1
        ],
        "constant_counts": [
            {
                "common": 5,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 0,
            "tf_bool": 0,
            "axis": 0,
            "common": 128,
            "tf_float32": 0,
            "shape_tuple": 0,
            "shape": 0,
            "tf_int64": 0,
            "provided": 0,
            "input_var": 30
        }
    },
    {
        "name": "google_16",
        "description": "replicate elements a given number of times",
        "target_program": "tf.gather(in1, tf.where(tf.sequence_mask(in2))[:, 0])",
        "source": "From an internal Google forum",
        "constants": "[]",
        "examples": {
            "inputs": "[[1, 2, 0, 3],[2, 1, 2, 3],]",
            "outputs": "[1, 1, 2, 0, 0, 3, 3, 3]"
        },
        "completions": [
            "```python\n    return tf.repeat(in1, in2)\n```",
            "```python\n    return tf.repeat(in1, in2)\n```",
            "```python\n    return tf.repeat(in1, in2)\n```",
            "```python\n    return tf.repeat(in1, in2)\n```",
            "```python\n    return tf.repeat(in1, in2)\n```",
            "```python\n    return tf.repeat(in1, in2)\n```",
            "```python\n    return tf.repeat(in1, in2)\n```",
            "```python\n    return tf.repeat(in1, in2)\n```",
            "```python\n    return tf.repeat(in1, in2)\n```",
            "```python\n    return tf.repeat(in1, in2)\n```",
            "```python\n    return tf.repeat(in1, in2)\n```",
            "```python\n    return tf.repeat(in1, in2)\n```",
            "```python\n    return tf.repeat(in1, in2)\n```",
            "```python\n    return tf.repeat(in1, in2)\n```",
            "```python\n    return tf.repeat(in1, in2)\n```",
            "```\n    return tf.repeat(in1, in2)\n```",
            "```python\n    return tf.repeat(in1, in2)\n```",
            "```python\n    return tf.repeat(in1, in2)\n```",
            "```python\n    return tf.repeat(in1, in2)\n```",
            "```python\n    return tf.repeat(in1, in2)\n```",
            "```python\n    return tf.repeat(in1, in2)\n```",
            "```python\n    return tf.repeat(in1, in2)\n```",
            "```\n    return tf.repeat(in1, in2)\n```",
            "```python\n    return tf.repeat(in1, in2)\n```",
            "```python\n    return tf.repeat(in1, in2)\n```",
            "```python\n    return tf.repeat(in1, in2)\n```",
            "```python\n    return tf.repeat(in1, in2)\n```",
            "```python\n    return tf.repeat(in1, in2)\n```",
            "```\n    return tf.repeat(in1, in2)\n```",
            "```python\n    return tf.repeat(in1, in2)\n```"
        ],
        "normalized_completions": [
            "def transform(in1, in2):\n    return tf.repeat(in1, in2)",
            "def transform(in1, in2):\n    return tf.repeat(in1, in2)",
            "def transform(in1, in2):\n    return tf.repeat(in1, in2)",
            "def transform(in1, in2):\n    return tf.repeat(in1, in2)",
            "def transform(in1, in2):\n    return tf.repeat(in1, in2)",
            "def transform(in1, in2):\n    return tf.repeat(in1, in2)",
            "def transform(in1, in2):\n    return tf.repeat(in1, in2)",
            "def transform(in1, in2):\n    return tf.repeat(in1, in2)",
            "def transform(in1, in2):\n    return tf.repeat(in1, in2)",
            "def transform(in1, in2):\n    return tf.repeat(in1, in2)",
            "def transform(in1, in2):\n    return tf.repeat(in1, in2)",
            "def transform(in1, in2):\n    return tf.repeat(in1, in2)",
            "def transform(in1, in2):\n    return tf.repeat(in1, in2)",
            "def transform(in1, in2):\n    return tf.repeat(in1, in2)",
            "def transform(in1, in2):\n    return tf.repeat(in1, in2)",
            "def transform(in1, in2):\n    return tf.repeat(in1, in2)",
            "def transform(in1, in2):\n    return tf.repeat(in1, in2)",
            "def transform(in1, in2):\n    return tf.repeat(in1, in2)",
            "def transform(in1, in2):\n    return tf.repeat(in1, in2)",
            "def transform(in1, in2):\n    return tf.repeat(in1, in2)",
            "def transform(in1, in2):\n    return tf.repeat(in1, in2)",
            "def transform(in1, in2):\n    return tf.repeat(in1, in2)",
            "def transform(in1, in2):\n    return tf.repeat(in1, in2)",
            "def transform(in1, in2):\n    return tf.repeat(in1, in2)",
            "def transform(in1, in2):\n    return tf.repeat(in1, in2)",
            "def transform(in1, in2):\n    return tf.repeat(in1, in2)",
            "def transform(in1, in2):\n    return tf.repeat(in1, in2)",
            "def transform(in1, in2):\n    return tf.repeat(in1, in2)",
            "def transform(in1, in2):\n    return tf.repeat(in1, in2)",
            "def transform(in1, in2):\n    return tf.repeat(in1, in2)"
        ],
        "tf_operators": {
            "tf.repeat": 30
        },
        "coverage_percentage": 0.0,
        "total_covered": 0,
        "total_in_target": 3,
        "parsed_constants": [
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            []
        ],
        "all_constants": [],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 0,
            "tf_bool": 0,
            "axis": 0,
            "common": 0,
            "tf_float32": 0,
            "shape_tuple": 0,
            "shape": 0,
            "tf_int64": 0,
            "provided": 0,
            "input_var": 60
        }
    },
    {
        "name": "google_17",
        "description": "use bool tensor as condition",
        "target_program": "tf.where(in1, in2, tf.multiply(in2, -10))",
        "source": "From an internal Google forum",
        "constants": "[-10]",
        "examples": {
            "inputs": "[[True, False, False, True, False],[1, 2, 3, 4, 5],]",
            "outputs": "[1, -20, -30, 4, -50]"
        },
        "completions": [
            "```python\n    return tf.where(in1, in2, tf.multiply(in2, -10))\n```",
            "```python\n    return tf.where(in1, in2, tf.multiply(in2, -10))\n```",
            "```python\n    return tf.where(in1, in2, tf.multiply(in2, -10))\n```",
            "```python\n    return tf.where(in1, in2, tf.multiply(in2, -10))\n```",
            "```python\n    return tf.where(in1, in2, tf.multiply(in2, tf.constant(-10)))\n```",
            "```python\n    return tf.where(in1, in2, -10 * in2)\n```",
            "```python\n    return tf.where(in1, in2, tf.multiply(in2, tf.constant(-10)))\n```",
            "```python\n    return tf.where(in1, in2, tf.multiply(in2, -10))\n```",
            "```\n    return tf.where(in1, in2, tf.multiply(in2, -10))\n```",
            "```python\n    return tf.where(in1, in2, tf.multiply(in2, -10))\n```",
            "```python\n    return tf.where(in1, in2, tf.multiply(in2, -10))\n```",
            "```python\n    return tf.where(in1, in2, tf.multiply(in2, -10))\n```",
            "```python\n    return tf.where(in1, in2, tf.multiply(-10, in2))\n```",
            "```python\n    return tf.where(in1, in2, tf.multiply(in2, -10))\n```",
            "```python\n    return tf.where(in1, in2, tf.multiply(in2, tf.constant(-10)))\n```",
            "```python\n    return tf.where(in1, in2, tf.multiply(in2, -10))\n```",
            "```python\n    return tf.where(in1, in2, tf.multiply(in2, tf.constant(-10)))\n```",
            "```python\n    return tf.where(in1, in2, tf.multiply(in2, -10))\n```",
            "```python\n    return tf.where(in1, in2, tf.multiply(in2, -10))\n```",
            "```python\n    return tf.where(in1, in2, tf.multiply(in2, tf.constant(-10)))\n```",
            "```python\n    return tf.where(in1, in2, tf.multiply(in2, tf.constant(-10)))\n```",
            "```python\n    return tf.where(in1, in2, tf.multiply(in2, -10))\n```",
            "```python\n    return tf.where(in1, in2, tf.multiply(in2, -10))\n```",
            "```python\n    return tf.where(in1, in2, tf.multiply(in2, -10))\n```",
            "```python\n    return tf.where(in1, in2, tf.multiply(in2, -10))\n```",
            "```python\n    return tf.where(in1, in2, tf.multiply(in2, tf.constant(-10)))\n```",
            "```python\n    return tf.where(in1, in2, tf.multiply(in2, -10))\n```",
            "```\n    return tf.where(in1, in2, tf.multiply(in2, -10))\n```",
            "```\ndef transform(in1, in2):\n    return tf.where(in1, in2, tf.multiply(in2, -10))\n```",
            "```\n    return tf.where(in1, in2, tf.multiply(in2, -10))\n```"
        ],
        "normalized_completions": [
            "def transform(in1, in2):\n    return tf.where(in1, in2, tf.multiply(in2, -10))",
            "def transform(in1, in2):\n    return tf.where(in1, in2, tf.multiply(in2, -10))",
            "def transform(in1, in2):\n    return tf.where(in1, in2, tf.multiply(in2, -10))",
            "def transform(in1, in2):\n    return tf.where(in1, in2, tf.multiply(in2, -10))",
            "def transform(in1, in2):\n    return tf.where(in1, in2, tf.multiply(in2, tf.constant(-10)))",
            "def transform(in1, in2):\n    return tf.where(in1, in2, -10 * in2)",
            "def transform(in1, in2):\n    return tf.where(in1, in2, tf.multiply(in2, tf.constant(-10)))",
            "def transform(in1, in2):\n    return tf.where(in1, in2, tf.multiply(in2, -10))",
            "def transform(in1, in2):\n    return tf.where(in1, in2, tf.multiply(in2, -10))",
            "def transform(in1, in2):\n    return tf.where(in1, in2, tf.multiply(in2, -10))",
            "def transform(in1, in2):\n    return tf.where(in1, in2, tf.multiply(in2, -10))",
            "def transform(in1, in2):\n    return tf.where(in1, in2, tf.multiply(in2, -10))",
            "def transform(in1, in2):\n    return tf.where(in1, in2, tf.multiply(-10, in2))",
            "def transform(in1, in2):\n    return tf.where(in1, in2, tf.multiply(in2, -10))",
            "def transform(in1, in2):\n    return tf.where(in1, in2, tf.multiply(in2, tf.constant(-10)))",
            "def transform(in1, in2):\n    return tf.where(in1, in2, tf.multiply(in2, -10))",
            "def transform(in1, in2):\n    return tf.where(in1, in2, tf.multiply(in2, tf.constant(-10)))",
            "def transform(in1, in2):\n    return tf.where(in1, in2, tf.multiply(in2, -10))",
            "def transform(in1, in2):\n    return tf.where(in1, in2, tf.multiply(in2, -10))",
            "def transform(in1, in2):\n    return tf.where(in1, in2, tf.multiply(in2, tf.constant(-10)))",
            "def transform(in1, in2):\n    return tf.where(in1, in2, tf.multiply(in2, tf.constant(-10)))",
            "def transform(in1, in2):\n    return tf.where(in1, in2, tf.multiply(in2, -10))",
            "def transform(in1, in2):\n    return tf.where(in1, in2, tf.multiply(in2, -10))",
            "def transform(in1, in2):\n    return tf.where(in1, in2, tf.multiply(in2, -10))",
            "def transform(in1, in2):\n    return tf.where(in1, in2, tf.multiply(in2, -10))",
            "def transform(in1, in2):\n    return tf.where(in1, in2, tf.multiply(in2, tf.constant(-10)))",
            "def transform(in1, in2):\n    return tf.where(in1, in2, tf.multiply(in2, -10))",
            "def transform(in1, in2):\n    return tf.where(in1, in2, tf.multiply(in2, -10))",
            "def transform(in1, in2):\n    return tf.where(in1, in2, tf.multiply(in2, -10))",
            "def transform(in1, in2):\n    return tf.where(in1, in2, tf.multiply(in2, -10))"
        ],
        "tf_operators": {
            "tf.multiply": 29,
            "tf.where": 30,
            "tf.constant": 7
        },
        "coverage_percentage": 100.0,
        "total_covered": 2,
        "total_in_target": 2,
        "parsed_constants": [
            [
                -10
            ],
            [
                -10
            ],
            [
                -10
            ],
            [
                -10
            ],
            [
                -10
            ],
            [
                -10
            ],
            [
                -10
            ],
            [
                -10
            ],
            [
                -10
            ],
            [
                -10
            ],
            [
                -10
            ],
            [
                -10
            ],
            [
                -10
            ],
            [
                -10
            ],
            [
                -10
            ],
            [
                -10
            ],
            [
                -10
            ],
            [
                -10
            ],
            [
                -10
            ],
            [
                -10
            ],
            [
                -10
            ],
            [
                -10
            ],
            [
                -10
            ],
            [
                -10
            ],
            [
                -10
            ],
            [
                -10
            ],
            [
                -10
            ],
            [
                -10
            ],
            [
                -10
            ],
            [
                -10
            ]
        ],
        "all_constants": [
            -10
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 0,
            "tf_bool": 0,
            "axis": 0,
            "common": 0,
            "tf_float32": 0,
            "shape_tuple": 0,
            "shape": 0,
            "tf_int64": 0,
            "provided": 30,
            "input_var": 90
        }
    },
    {
        "name": "google_18",
        "description": "(\\'sum of elements in the first tensor but partitioned by the second tensor\\')",
        "target_program": "tf.linalg.matvec(tf.cast(tf.equal(in2[:, None], in2), tf.int32), in1)",
        "source": "From an internal Google forum",
        "constants": "[]",
        "examples": {
            "inputs": "[[5, 7, -12, 10, 20],[1, 2, 3, 1, 2],]",
            "outputs": "[15, 27, -12, 15, 27]"
        },
        "completions": [
            "```python\n    return tf.gather(in1, in2)\n```",
            "```python\n    return tf.gather(in1, in2)\n```",
            "```python\nreturn tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2) + 1)\n```",
            "```python\n    return tf.gather(in1, in2 - 1)\n```",
            "```python\n    return tf.gather(in1, in2 - 1)\n```",
            "```python\n    return tf.gather(tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2) + 1), in2)\n```",
            "```python\n    num_segments = tf.reduce_max(in2) + 1\n    return tf.gather(tf.math.unsorted_segment_sum(in1, in2, num_segments), in2)\n```",
            "```python\n    return tf.gather(in1, in2, axis=0)\n```",
            "```python\n    return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2) + 1)\n```",
            "```python\n    return tf.gather(tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2) + 1), in2)\n```",
            "```python\n    return tf.gather(in1, tf.argsort(in2, axis=0, stable=True))\n```",
            "```python\n    return tf.gather(in1, in2)\n```",
            "```python\n    return tf.gather(in1, in2)\n```",
            "```python\n    return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2) + 1)\n```",
            "```python\n    return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2) + 1)\n```",
            "```python\n    return tf.gather(in1, in2)\n```",
            "```python\n    num_segments = tf.reduce_max(in2) + 1\n    segmented_sum = tf.math.unsorted_segment_sum(in1, in2, num_segments)\n    return tf.gather(segmented_sum, in2)\n```",
            "```python\n    return tf.gather(tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2) + 1), in2)\n```",
            "```python\n    return tf.gather(tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2)+1), in2)\n```",
            "```python\n    return tf.gather(tf.math.segment_sum(in1, in2), in2)\n```",
            "```python\n    return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2) + 1)\n```",
            "```python\n    num_segments = tf.reduce_max(in2) + 1\n    return tf.gather(in1, tf.cast(tf.math.segment_sum(in1, in2), tf.int32))\n```",
            "```python\n    return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2) + 1)\n```",
            "```python\n    return tf.gather(tf.math.segment_sum(in1, in2), in2)\n```",
            "```python\n    num_segments = tf.reduce_max(in2) + 1\n    return tf.gather(tf.math.unsorted_segment_sum(in1, in2, num_segments), in2)\n```",
            "```python\n    num_segments = tf.reduce_max(in2) + 1\n    return tf.gather(tf.math.unsorted_segment_sum(in1, in2, num_segments), in2)\n```",
            "```python\n    return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2)+1)\n```",
            "```python\n    return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2) + 1)\n```",
            "```python\n    return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2) + 1)\n```",
            "```\n    return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2) + 1)\n```"
        ],
        "normalized_completions": [
            "def transform(in1, in2):\n    return tf.gather(in1, in2)",
            "def transform(in1, in2):\n    return tf.gather(in1, in2)",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2) + 1)",
            "def transform(in1, in2):\n    return tf.gather(in1, in2 - 1)",
            "def transform(in1, in2):\n    return tf.gather(in1, in2 - 1)",
            "def transform(in1, in2):\n    return tf.gather(tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2) + 1), in2)",
            "def transform(in1, in2):\n    num_segments = tf.reduce_max(in2) + 1\n    return tf.gather(tf.math.unsorted_segment_sum(in1, in2, num_segments), in2)",
            "def transform(in1, in2):\n    return tf.gather(in1, in2, axis=0)",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2) + 1)",
            "def transform(in1, in2):\n    return tf.gather(tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2) + 1), in2)",
            "def transform(in1, in2):\n    return tf.gather(in1, tf.argsort(in2, axis=0, stable=True))",
            "def transform(in1, in2):\n    return tf.gather(in1, in2)",
            "def transform(in1, in2):\n    return tf.gather(in1, in2)",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2) + 1)",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2) + 1)",
            "def transform(in1, in2):\n    return tf.gather(in1, in2)",
            "def transform(in1, in2):\n    num_segments = tf.reduce_max(in2) + 1\n    segmented_sum = tf.math.unsorted_segment_sum(in1, in2, num_segments)\n    return tf.gather(segmented_sum, in2)",
            "def transform(in1, in2):\n    return tf.gather(tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2) + 1), in2)",
            "def transform(in1, in2):\n    return tf.gather(tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2)+1), in2)",
            "def transform(in1, in2):\n    return tf.gather(tf.math.segment_sum(in1, in2), in2)",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2) + 1)",
            "def transform(in1, in2):\n    num_segments = tf.reduce_max(in2) + 1\n    return tf.gather(in1, tf.cast(tf.math.segment_sum(in1, in2), tf.int32))",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2) + 1)",
            "def transform(in1, in2):\n    return tf.gather(tf.math.segment_sum(in1, in2), in2)",
            "def transform(in1, in2):\n    num_segments = tf.reduce_max(in2) + 1\n    return tf.gather(tf.math.unsorted_segment_sum(in1, in2, num_segments), in2)",
            "def transform(in1, in2):\n    num_segments = tf.reduce_max(in2) + 1\n    return tf.gather(tf.math.unsorted_segment_sum(in1, in2, num_segments), in2)",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2)+1)",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2) + 1)",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2) + 1)",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2) + 1)"
        ],
        "tf_operators": {
            "tf.gather": 20,
            "tf.math.unsorted_segment_sum": 18,
            "tf.reduce_max": 19,
            "tf.argsort": 1,
            "tf.math.segment_sum": 3,
            "tf.int32": 1,
            "tf.cast": 1
        },
        "coverage_percentage": 50.0,
        "total_covered": 2,
        "total_in_target": 4,
        "parsed_constants": [
            [],
            [],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                0
            ],
            [],
            [],
            [
                1
            ],
            [
                1
            ],
            [],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ]
        ],
        "all_constants": [
            0,
            1
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 1,
            "tf_bool": 0,
            "axis": 0,
            "common": 24,
            "tf_float32": 0,
            "shape_tuple": 0,
            "shape": 0,
            "tf_int64": 0,
            "provided": 0,
            "input_var": 90
        }
    },
    {
        "name": "google_19",
        "description": "scatter a 2-D tensor with indices",
        "target_program": "tf.gather(in1, tf.argsort(in2, axis=1), batch_dims=1)",
        "source": "From an internal Google forum",
        "constants": "[]",
        "examples": {
            "inputs": "[[[11, 12, 13], [30, 20, 10], [77, 88, 99]],[[2, 0, 1], [1, 0, 2], [0, 2, 1]],]",
            "outputs": "[[12, 13, 11],    [20, 30, 10],    [77, 99, 88]]"
        },
        "completions": [
            "```python\n    return tf.gather(in1, in2, axis=1)\n```",
            "```python\n    indices = tf.stack(tf.meshgrid(tf.range(tf.shape(in2)[0]), tf.range(tf.shape(in2)[1]), indexing='ij'), axis=-1)\n    indices = tf.reshape(indices, [-1, 2])\n    updates = tf.gather_nd(in1, indices)\n    return tf.scatter_nd(tf.reshape(in2, [-1, 1]), updates, tf.shape(in1))\n```",
            "```\n    return tf.gather(in1, in2, axis=1)\n```",
            "```python\n    return tf.gather(in1, in2, axis=1, batch_dims=1)\n```",
            "```python\n    indices = tf.where(in2 >= 0)\n    updates = tf.gather_nd(in1, indices)\n    return tf.tensor_scatter_nd_update(tf.zeros_like(in1), indices, updates)\n```",
            "```python\n    return tf.gather(in1, in2, axis=1)\n```",
            "```python\n    return tf.gather_nd(in1, tf.expand_dims(in2, -1), batch_dims=1)\n```",
            "```\n    return tf.gather(in1, in2, axis=1)\n```",
            "```\n    return tf.gather(in1, in2, axis=1, batch_dims=1)\n```",
            "```python\n    indices = tf.expand_dims(tf.range(tf.shape(in1)[0]), 1)\n    indices = tf.concat([indices, in2[..., tf.newaxis]], axis=-1)\n    return tf.gather_nd(in1, indices)\n```",
            "```\n    return tf.gather(in1, in2, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather(in1, in2, axis=1)\n```",
            "```\n    return tf.gather(in1, in2, axis=1)\n```",
            "```python\n    return tf.gather(in1, in2, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather(in1, in2, axis=1)\n```",
            "```python\n    indices = tf.expand_dims(tf.range(tf.shape(in1)[1]), 0)\n    indices = tf.tile(indices, [tf.shape(in1)[0], 1])\n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in1)[0])[:, tf.newaxis], in2], axis=-1))\n```",
            "```python\ndef transform(in1, in2):\n    indices = tf.expand_dims(tf.range(tf.shape(in1)[0]), -1)\n    return tf.gather_nd(in1, tf.concat([indices, in2], axis=1))\n```",
            "```python\ndef transform(in1, in2):\n    indices = tf.argsort(in2, axis=1)\n    return tf.gather_nd(in1, tf.expand_dims(indices, -1), batch_dims=1)\n```",
            "```python\ndef transform(in1, in2):\n    indices = tf.expand_dims(tf.range(tf.shape(in2)[1]), 0)\n    return tf.gather_nd(in1, tf.stack([in2, indices], axis=-1))\n```",
            "```python\ndef transform(in1, in2):\n    indices = tf.expand_dims(tf.range(tf.shape(in1)[0]), -1)\n    indices = tf.concat([indices, tf.cast(in2, tf.int32)], axis=1)\n    return tf.gather_nd(in1, indices)\n```",
            "```python\n    idx = tf.reshape(tf.range(tf.shape(in1)[0]), (-1, 1))\n    indices = tf.concat([idx, in2], axis=1)\n    return tf.gather_nd(in1, indices)\n```",
            "```python\ndef transform(in1, in2):\n    indices = tf.argsort(in2)\n    return tf.gather_nd(in1, tf.expand_dims(indices, -1))\n```",
            "```python\n    shape = tf.shape(in1)\n    indices = tf.reshape(in2, [-1, 1])\n    updates = tf.reshape(in1, [-1])\n    return tf.reshape(tf.scatter_nd(indices, updates, shape), shape)\n```",
            "```python\n    shape = tf.shape(in1)\n    indices = tf.stack([tf.range(shape[0]), in2], axis=1)\n    return tf.gather_nd(in1, indices)\n```",
            "```\n    return tf.gather(in1, in2, axis=1, batch_dims=1)\n```",
            "```python\ndef transform(in1, in2):\n    idx = tf.expand_dims(tf.range(tf.shape(in1)[0]), 1)\n    full_idx = tf.concat([idx, in2], axis=1)\n    return tf.gather_nd(in1, full_idx)\n```",
            "```python\n    idx = tf.expand_dims(tf.range(tf.shape(in1)[1]), 0)\n    new_idx = tf.stack([in2, idx], axis=-1)\n    return tf.gather_nd(in1, new_idx)\n```",
            "```python\ndef transform(in1, in2):\n    idx = tf.reshape(tf.range(tf.shape(in2)[0]), (-1, 1))\n    scatter_indices = tf.stack([idx, in2], axis=-1)\n    return tf.gather_nd(in1, scatter_indices)\n```",
            "```python\nreturn tf.gather_nd(in1, tf.expand_dims(in2, -1), batch_dims=1)\n```",
            "```python\ndef transform(in1, in2):\n    indices = tf.reshape(tf.range(tf.shape(in1)[1]), (-1, 1))\n    return tf.gather_nd(in1, tf.concat([tf.expand_dims(in2, -1), indices], axis=1))\n```"
        ],
        "normalized_completions": [
            "def transform(in1, in2):\n    return tf.gather(in1, in2, axis=1)",
            "def transform(in1, in2):\n    indices = tf.stack(tf.meshgrid(tf.range(tf.shape(in2)[0]), tf.range(tf.shape(in2)[1]), indexing='ij'), axis=-1)\n    indices = tf.reshape(indices, [-1, 2])\n    updates = tf.gather_nd(in1, indices)\n    return tf.scatter_nd(tf.reshape(in2, [-1, 1]), updates, tf.shape(in1))",
            "def transform(in1, in2):\n    return tf.gather(in1, in2, axis=1)",
            "def transform(in1, in2):\n    return tf.gather(in1, in2, axis=1, batch_dims=1)",
            "def transform(in1, in2):\n    indices = tf.where(in2 >= 0)\n    updates = tf.gather_nd(in1, indices)\n    return tf.tensor_scatter_nd_update(tf.zeros_like(in1), indices, updates)",
            "def transform(in1, in2):\n    return tf.gather(in1, in2, axis=1)",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.expand_dims(in2, -1), batch_dims=1)",
            "def transform(in1, in2):\n    return tf.gather(in1, in2, axis=1)",
            "def transform(in1, in2):\n    return tf.gather(in1, in2, axis=1, batch_dims=1)",
            "def transform(in1, in2):\n    indices = tf.expand_dims(tf.range(tf.shape(in1)[0]), 1)\n    indices = tf.concat([indices, in2[..., tf.newaxis]], axis=-1)\n    return tf.gather_nd(in1, indices)",
            "def transform(in1, in2):\n    return tf.gather(in1, in2, axis=1, batch_dims=1)",
            "def transform(in1, in2):\n    return tf.gather(in1, in2, axis=1)",
            "def transform(in1, in2):\n    return tf.gather(in1, in2, axis=1)",
            "def transform(in1, in2):\n    return tf.gather(in1, in2, axis=1, batch_dims=1)",
            "def transform(in1, in2):\n    return tf.gather(in1, in2, axis=1)",
            "def transform(in1, in2):\n    indices = tf.expand_dims(tf.range(tf.shape(in1)[1]), 0)\n    indices = tf.tile(indices, [tf.shape(in1)[0], 1])\n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in1)[0])[:, tf.newaxis], in2], axis=-1))",
            "def transform(in1, in2):\n    indices = tf.expand_dims(tf.range(tf.shape(in1)[0]), -1)\n    return tf.gather_nd(in1, tf.concat([indices, in2], axis=1))",
            "def transform(in1, in2):\n    indices = tf.argsort(in2, axis=1)\n    return tf.gather_nd(in1, tf.expand_dims(indices, -1), batch_dims=1)",
            "def transform(in1, in2):\n    indices = tf.expand_dims(tf.range(tf.shape(in2)[1]), 0)\n    return tf.gather_nd(in1, tf.stack([in2, indices], axis=-1))",
            "def transform(in1, in2):\n    indices = tf.expand_dims(tf.range(tf.shape(in1)[0]), -1)\n    indices = tf.concat([indices, tf.cast(in2, tf.int32)], axis=1)\n    return tf.gather_nd(in1, indices)",
            "def transform(in1, in2):\n    idx = tf.reshape(tf.range(tf.shape(in1)[0]), (-1, 1))\n    indices = tf.concat([idx, in2], axis=1)\n    return tf.gather_nd(in1, indices)",
            "def transform(in1, in2):\n    indices = tf.argsort(in2)\n    return tf.gather_nd(in1, tf.expand_dims(indices, -1))",
            "def transform(in1, in2):\n    shape = tf.shape(in1)\n    indices = tf.reshape(in2, [-1, 1])\n    updates = tf.reshape(in1, [-1])\n    return tf.reshape(tf.scatter_nd(indices, updates, shape), shape)",
            "def transform(in1, in2):\n    shape = tf.shape(in1)\n    indices = tf.stack([tf.range(shape[0]), in2], axis=1)\n    return tf.gather_nd(in1, indices)",
            "def transform(in1, in2):\n    return tf.gather(in1, in2, axis=1, batch_dims=1)",
            "def transform(in1, in2):\n    idx = tf.expand_dims(tf.range(tf.shape(in1)[0]), 1)\n    full_idx = tf.concat([idx, in2], axis=1)\n    return tf.gather_nd(in1, full_idx)",
            "def transform(in1, in2):\n    idx = tf.expand_dims(tf.range(tf.shape(in1)[1]), 0)\n    new_idx = tf.stack([in2, idx], axis=-1)\n    return tf.gather_nd(in1, new_idx)",
            "def transform(in1, in2):\n    idx = tf.reshape(tf.range(tf.shape(in2)[0]), (-1, 1))\n    scatter_indices = tf.stack([idx, in2], axis=-1)\n    return tf.gather_nd(in1, scatter_indices)",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.expand_dims(in2, -1), batch_dims=1)",
            "def transform(in1, in2):\n    indices = tf.reshape(tf.range(tf.shape(in1)[1]), (-1, 1))\n    return tf.gather_nd(in1, tf.concat([tf.expand_dims(in2, -1), indices], axis=1))"
        ],
        "tf_operators": {
            "tf.gather": 12,
            "tf.meshgrid": 1,
            "tf.scatter_nd": 2,
            "tf.shape": 13,
            "tf.range": 12,
            "tf.stack": 6,
            "tf.gather_nd": 17,
            "tf.reshape": 5,
            "tf.zeros_like": 1,
            "tf.tensor_scatter_nd_update": 1,
            "tf.where": 1,
            "tf.expand_dims": 12,
            "tf.newaxis": 2,
            "tf.concat": 6,
            "tf.tile": 1,
            "tf.argsort": 2,
            "tf.int32": 1,
            "tf.cast": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 2,
        "total_in_target": 2,
        "parsed_constants": [
            [
                1
            ],
            [
                0,
                1,
                -1,
                -1,
                2,
                -1,
                1
            ],
            [
                1
            ],
            [
                1,
                1
            ],
            [
                0
            ],
            [
                1
            ],
            [
                -1,
                1
            ],
            [
                1
            ],
            [
                1,
                1
            ],
            [
                0,
                1,
                -1
            ],
            [
                1,
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                1
            ],
            [
                1
            ],
            [
                1,
                0,
                0,
                1,
                0,
                -1
            ],
            [
                0,
                -1,
                1
            ],
            [
                1,
                -1,
                1
            ],
            [
                1,
                0,
                -1
            ],
            [
                0,
                -1,
                1
            ],
            [
                0,
                -1,
                1,
                1
            ],
            [
                -1
            ],
            [
                -1,
                1,
                -1
            ],
            [
                0,
                1
            ],
            [
                1,
                1
            ],
            [
                0,
                1,
                1
            ],
            [
                1,
                0,
                -1
            ],
            [
                0,
                -1,
                1,
                -1
            ],
            [
                -1,
                1
            ],
            [
                1,
                -1,
                1,
                -1,
                1
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            -1
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 6,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 11,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 8,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 7,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 6,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 8,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 5,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 5,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 7,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 5,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 7,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 5,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 5,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 1,
            "tf_bool": 0,
            "axis": 1,
            "common": 71,
            "tf_float32": 0,
            "shape_tuple": 0,
            "shape": 0,
            "tf_int64": 0,
            "provided": 0,
            "input_var": 118
        }
    },
    {
        "name": "google_20",
        "description": "sort a tensor and return sorted index in original order",
        "target_program": "tf.cast(tf.argsort(tf.argsort(in1)), tf.int32)",
        "source": "From an internal Google forum",
        "constants": "[]",
        "examples": {
            "inputs": "[[10, 7, 4, 3, 2, 8],]",
            "outputs": "[5, 3, 2, 1, 0, 4]"
        },
        "completions": [
            "```python\n    return tf.argsort(in1, axis=-1, direction='ASCENDING', stable=True)\n```",
            "```python\n    return tf.argsort(in1, axis=0, direction='ASCENDING')\n```",
            "```python\n    return tf.argsort(tf.argsort(in1, direction='ASCENDING'), direction='ASCENDING')\n```",
            "```python\n    return tf.argsort(in1, axis=0, direction='DESCENDING', stable=True)\n```",
            "```python\n    return tf.argsort(in1, axis=0, direction='ASCENDING')\n```",
            "def transform(in1):\n    return tf.argsort(in1, axis=0, direction='DESCENDING', stable=True)",
            "```python\n    return tf.argsort(tf.argsort(in1), axis=-1, stable=True, direction='ASCENDING')\n```",
            "```python\n    return tf.argsort(tf.argsort(in1), axis=0)\n```",
            "```python\ndef transform(in1):\n    return tf.argsort(in1, axis=0, direction='DESCENDING')\n```",
            "```\ndef transform(in1):\n    return tf.argsort(in1, direction='ASCENDING')\n```",
            "```python\n    return tf.argsort(in1, axis=-1, direction='DESCENDING', stable=True)\n```",
            "```python\n    return tf.argsort(in1, axis=0, direction='DESCENDING', stable=True)\n```",
            "```python\ndef transform(in1):\n    return tf.argsort(in1, axis=0, direction='DESCENDING', stable=True)\n```",
            "```python\n    return tf.argsort(in1, stable=True)\n```",
            "```python\n    return tf.argsort(in1, direction='DESCENDING')\n```",
            "```python\n    return tf.argsort(in1, direction='DESCENDING')\n```",
            "```python\ndef transform(in1):\n    return tf.argsort(in1, axis=-1, direction='DESCENDING', stable=True)\n```",
            "```python\n    return tf.argsort(in1, axis=0, direction='DESCENDING', stable=True)\n```",
            "```python\n    return tf.argsort(in1, axis=0, direction='ASCENDING', stable=True)\n```",
            "```python\n    return tf.argsort(in1, axis=0, stable=True, direction='ASCENDING')\n```",
            "```python\n    return tf.argsort(in1, axis=0, direction='DESCENDING', stable=True)\n```",
            "```python\n    return tf.argsort(in1, axis=-1, direction='DESCENDING', stable=True)\n```",
            "```python\n    return tf.argsort(in1, axis=-1, direction='ASCENDING', stable=False)\n```",
            "def transform(in1):\n    return tf.argsort(in1, axis=0, stable=True, direction='ASCENDING')",
            "```python\n    return tf.argsort(in1, axis=0, direction='ASCENDING', stable=True)\n```",
            "```python\ndef transform(in1):\n    return tf.argsort(in1, direction='DESCENDING')\n```",
            "```python\ndef transform(in1):\n    return tf.argsort(in1, axis=0, direction='DESCENDING', stable=True)\n```",
            "```python\ndef transform(in1):\n    return tf.argsort(in1, direction='DESCENDING')\n```",
            "```python\n    return tf.argsort(in1, direction='ASCENDING', stable=True)\n```",
            "```python\n    return tf.argsort(in1, axis=0, direction='DESCENDING', stable=True)\n```"
        ],
        "normalized_completions": [
            "def transform(in1):\n    return tf.argsort(in1, axis=-1, direction='ASCENDING', stable=True)",
            "def transform(in1):\n    return tf.argsort(in1, axis=0, direction='ASCENDING')",
            "def transform(in1):\n    return tf.argsort(tf.argsort(in1, direction='ASCENDING'), direction='ASCENDING')",
            "def transform(in1):\n    return tf.argsort(in1, axis=0, direction='DESCENDING', stable=True)",
            "def transform(in1):\n    return tf.argsort(in1, axis=0, direction='ASCENDING')",
            "def transform(in1):\n    return tf.argsort(in1, axis=0, direction='DESCENDING', stable=True)",
            "def transform(in1):\n    return tf.argsort(tf.argsort(in1), axis=-1, stable=True, direction='ASCENDING')",
            "def transform(in1):\n    return tf.argsort(tf.argsort(in1), axis=0)",
            "def transform(in1):\n    return tf.argsort(in1, axis=0, direction='DESCENDING')",
            "def transform(in1):\n    return tf.argsort(in1, direction='ASCENDING')",
            "def transform(in1):\n    return tf.argsort(in1, axis=-1, direction='DESCENDING', stable=True)",
            "def transform(in1):\n    return tf.argsort(in1, axis=0, direction='DESCENDING', stable=True)",
            "def transform(in1):\n    return tf.argsort(in1, axis=0, direction='DESCENDING', stable=True)",
            "def transform(in1):\n    return tf.argsort(in1, stable=True)",
            "def transform(in1):\n    return tf.argsort(in1, direction='DESCENDING')",
            "def transform(in1):\n    return tf.argsort(in1, direction='DESCENDING')",
            "def transform(in1):\n    return tf.argsort(in1, axis=-1, direction='DESCENDING', stable=True)",
            "def transform(in1):\n    return tf.argsort(in1, axis=0, direction='DESCENDING', stable=True)",
            "def transform(in1):\n    return tf.argsort(in1, axis=0, direction='ASCENDING', stable=True)",
            "def transform(in1):\n    return tf.argsort(in1, axis=0, stable=True, direction='ASCENDING')",
            "def transform(in1):\n    return tf.argsort(in1, axis=0, direction='DESCENDING', stable=True)",
            "def transform(in1):\n    return tf.argsort(in1, axis=-1, direction='DESCENDING', stable=True)",
            "def transform(in1):\n    return tf.argsort(in1, axis=-1, direction='ASCENDING', stable=False)",
            "def transform(in1):\n    return tf.argsort(in1, axis=0, stable=True, direction='ASCENDING')",
            "def transform(in1):\n    return tf.argsort(in1, axis=0, direction='ASCENDING', stable=True)",
            "def transform(in1):\n    return tf.argsort(in1, direction='DESCENDING')",
            "def transform(in1):\n    return tf.argsort(in1, axis=0, direction='DESCENDING', stable=True)",
            "def transform(in1):\n    return tf.argsort(in1, direction='DESCENDING')",
            "def transform(in1):\n    return tf.argsort(in1, direction='ASCENDING', stable=True)",
            "def transform(in1):\n    return tf.argsort(in1, axis=0, direction='DESCENDING', stable=True)"
        ],
        "tf_operators": {
            "tf.argsort": 30
        },
        "coverage_percentage": 33.33333333333333,
        "total_covered": 1,
        "total_in_target": 3,
        "parsed_constants": [
            [
                -1
            ],
            [
                0
            ],
            [],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                -1
            ],
            [
                0
            ],
            [
                0
            ],
            [],
            [
                -1
            ],
            [
                0
            ],
            [
                0
            ],
            [],
            [],
            [],
            [
                -1
            ],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                -1
            ],
            [
                -1
            ],
            [
                0
            ],
            [
                0
            ],
            [],
            [
                0
            ],
            [],
            [],
            [
                0
            ]
        ],
        "all_constants": [
            0,
            -1
        ],
        "constant_counts": [
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 0,
            "tf_bool": 0,
            "axis": 0,
            "common": 42,
            "tf_float32": 0,
            "shape_tuple": 0,
            "shape": 0,
            "tf_int64": 0,
            "provided": 0,
            "input_var": 30
        }
    },
    {
        "name": "google_21",
        "description": "update a tensor at the given indices",
        "target_program": "tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, (-1,)))",
        "source": "Real task encountered by Googler, 12/15/2020",
        "constants": "[]",
        "examples": {
            "inputs": "{'tensor': [[1, 2, 3, 4, 5], [4, 5, 6, 7, 8], [7, 8, 9, 10, 11]], 'indices': [[0, 0], [0, 2], [1, 1], [1, 3], [2, 2], [2, 4]], 'updates': [[0, -2], [-1, -3], [-2, -4]],}",
            "outputs": "[[0, 2, -2, 4, 5], [4, -1, 6, -3, 8], [7, 8, -2, 10, -4]]"
        },
        "completions": [
            "```python\n    return tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, [-1]))\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, [-1]))\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, (-1,)))\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, [-1]))\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, [-1]))\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, [-1]))\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)\n```",
            "```python\nreturn tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, (-1,)))\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, [-1]))\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, [-1]))\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, [-1]))\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, [-1]))\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, [-1]))\n```",
            "```python\nreturn tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, [-1]))\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, [-1]))\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, [-1]))\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, [-1]))\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, (-1,)))\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, [-1]))\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, [-1]))\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, [-1]))\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, [-1]))\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, [-1]))\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(tf.transpose(updates), [-1]))\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, [-1]))\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, [-1]))\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, [-1]))\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, [-1]))\n```"
        ],
        "normalized_completions": [
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, [-1]))",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, [-1]))",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, (-1,)))",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, [-1]))",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, [-1]))",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, [-1]))",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, (-1,)))",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, [-1]))",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, [-1]))",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, [-1]))",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, [-1]))",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, [-1]))",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, [-1]))",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, [-1]))",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, [-1]))",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, [-1]))",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, (-1,)))",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, [-1]))",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, [-1]))",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, [-1]))",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, [-1]))",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, [-1]))",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(tf.transpose(updates), [-1]))",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, [-1]))",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, [-1]))",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, [-1]))",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, [-1]))"
        ],
        "tf_operators": {
            "tf.reshape": 27,
            "tf.tensor_scatter_nd_update": 30,
            "tf.transpose": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 2,
        "total_in_target": 2,
        "parsed_constants": [
            [
                -1
            ],
            [
                -1
            ],
            [
                -1
            ],
            [],
            [
                -1
            ],
            [
                -1
            ],
            [
                -1
            ],
            [],
            [
                -1
            ],
            [
                -1
            ],
            [
                -1
            ],
            [
                -1
            ],
            [
                -1
            ],
            [
                -1
            ],
            [
                -1
            ],
            [
                -1
            ],
            [
                -1
            ],
            [
                -1
            ],
            [
                -1
            ],
            [
                -1
            ],
            [],
            [
                -1
            ],
            [
                -1
            ],
            [
                -1
            ],
            [
                -1
            ],
            [
                -1
            ],
            [
                -1
            ],
            [
                -1
            ],
            [
                -1
            ],
            [
                -1
            ]
        ],
        "all_constants": [
            -1
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 0,
            "tf_bool": 0,
            "axis": 0,
            "common": 27,
            "tf_float32": 0,
            "shape_tuple": 0,
            "shape": 0,
            "tf_int64": 0,
            "provided": 0,
            "input_var": 90
        }
    },
    {
        "name": "google_22",
        "description": "pair with row index",
        "target_program": "tf.cast(tf.where(tf.reduce_max(tf.one_hot(in1, tf.reduce_max(in1) + 1), axis=1)), tf.int32)",
        "source": "Real task encountered by Googler, 12/15/2020",
        "constants": "[]",
        "examples": {
            "inputs": "[[[0, 2], [1, 3], [2, 4]],]",
            "outputs": "[[0, 0], [0, 2], [1, 1], [1, 3], [2, 2], [2, 4]]"
        },
        "completions": [
            "```python\n  return tf.concat([tf.expand_dims(tf.repeat(tf.range(tf.shape(in1)[0]), tf.shape(in1)[1]), 1), tf.reshape(in1, [-1, 1])], axis=1)\n```",
            "```python\ndef transform(in1):\n    rows = tf.range(tf.shape(in1)[0])\n    rows_expanded = tf.expand_dims(rows, axis=1)\n    rows_tiled = tf.tile(rows_expanded, [1, tf.shape(in1)[1]])\n    pairs = tf.stack([rows_tiled, in1], axis=2)\n    return tf.reshape(pairs, [-1, 2])\n```",
            "```python\n    idx = tf.repeat(tf.range(tf.shape(in1)[0]), tf.shape(in1)[1])\n    return tf.stack([idx, tf.reshape(in1, [-1])], axis=1)\n```",
            "```python\n    return tf.concat([tf.stack([tf.repeat(tf.range(tf.shape(in1)[0]), tf.shape(in1)[1]), tf.reshape(in1, [-1])], axis=1)], axis=0)\n```",
            "```python\n    indices = tf.reshape(tf.range(tf.shape(in1)[0]), (-1, 1))\n    indices = tf.repeat(indices, tf.shape(in1)[1], axis=1)\n    indices = tf.reshape(indices, (-1, 1))\n    values = tf.reshape(in1, (-1, 1))\n    return tf.concat([indices, values], axis=1)\n```",
            "```python\n    return tf.concat([tf.stack([tf.repeat(tf.range(tf.shape(in1)[0]), tf.shape(in1)[1]), tf.reshape(in1, [-1])], axis=1)], axis=0)\n```",
            "```python\n    return tf.concat([tf.stack([tf.repeat(tf.range(tf.shape(in1)[0]), tf.shape(in1)[1]), \n                                tf.reshape(in1, [-1])], axis=1)], axis=0)\n```",
            "```python\n    return tf.stack([tf.repeat(tf.range(tf.shape(in1)[0]), tf.shape(in1)[1]), tf.reshape(in1, [-1])], axis=1)\n```",
            "```python\n    return tf.concat([tf.stack([tf.repeat(tf.range(tf.shape(in1)[0]), tf.shape(in1)[1]), tf.reshape(in1, [-1])], axis=1)], axis=0)\n```",
            "```python\n    return tf.stack([tf.repeat(tf.range(tf.shape(in1)[0]), tf.shape(in1)[1]), tf.reshape(in1, [-1])], axis=1)\n```",
            "```python\n    return tf.concat([tf.stack([tf.repeat(tf.range(tf.shape(in1)[0]), tf.shape(in1)[1]), tf.reshape(in1, [-1])], axis=-1)], axis=1)\n```",
            "```python\ndef transform(in1):\n    idx = tf.range(tf.shape(in1)[0])\n    idx = tf.repeat(idx, tf.shape(in1)[1])\n    return tf.stack([idx, tf.reshape(in1, [-1])], axis=1)\n```",
            "```python\n    return tf.stack([tf.repeat(tf.range(tf.shape(in1)[0]), tf.shape(in1)[1]), tf.reshape(in1, [-1])], axis=1)\n```",
            "```python\n    idx = tf.repeat(tf.range(tf.shape(in1)[0]), tf.shape(in1)[1])\n    values = tf.reshape(in1, [-1])\n    return tf.stack([idx, values], axis=1)\n```",
            "```python\n    idx = tf.range(tf.shape(in1)[0])\n    idx_expanded = tf.expand_dims(idx, 1)\n    return tf.reshape(tf.concat([tf.tile(idx_expanded, [1, tf.shape(in1)[1]]), tf.reshape(in1, [-1, 1])], axis=1), [-1, 2])\n```",
            "```python\n    return tf.concat([tf.expand_dims(tf.repeat(tf.range(tf.shape(in1)[0]), tf.shape(in1)[1]), axis=1), tf.reshape(in1, (-1, 1))], axis=1)\n```",
            "```python\n    return tf.stack([tf.repeat(tf.range(0, tf.shape(in1)[0]), tf.shape(in1)[1]), tf.reshape(in1, [-1])], axis=1)\n```",
            "```python\n    return tf.reshape(tf.stack([tf.repeat(tf.range(tf.shape(in1)[0]), 2), tf.reshape(in1, [-1])], axis=1), [-1, 2])\n```",
            "```python\n    rows = tf.range(tf.shape(in1)[0])\n    rows_expanded = tf.expand_dims(rows, 1)\n    rows_tiled = tf.tile(rows_expanded, [1, tf.shape(in1)[1]])\n    indices = tf.stack([rows_tiled, in1], axis=-1)\n    return tf.reshape(indices, [-1, 2])\n```",
            "```python\n    rows = tf.repeat(tf.range(tf.shape(in1)[0]), tf.shape(in1)[1])\n    elements = tf.reshape(in1, [-1])\n    return tf.stack([rows, elements], axis=1)\n```",
            "```python\n    idx = tf.range(tf.shape(in1)[0])\n    expanded_idx = tf.expand_dims(idx, 1)\n    repeated_idx = tf.repeat(expanded_idx, tf.shape(in1)[1], axis=1)\n    combined = tf.stack([repeated_idx, in1], axis=2)\n    return tf.reshape(combined, (-1, 2))\n```",
            "```python\n    i = tf.reshape(tf.range(tf.shape(in1)[0]), (-1, 1))\n    return tf.concat([tf.stack([i] * tf.shape(in1)[1], axis=2), tf.expand_dims(in1, 2)], axis=3).reshape(-1, 2)\n```",
            "```python\n    return tf.concat([tf.stack([tf.repeat(tf.range(len(in1)), in1.shape[1]), tf.reshape(in1, [-1])], axis=1)], axis=0)\n```",
            "```python\n    idx = tf.repeat(tf.range(tf.shape(in1)[0]), tf.shape(in1)[1])\n    return tf.stack([idx, tf.reshape(in1, [-1])], axis=1)\n```",
            "```python\n    rows = tf.range(tf.shape(in1)[0])\n    expanded_rows = tf.repeat(rows, repeats=tf.shape(in1)[1])\n    flattened_input = tf.reshape(in1, [-1])\n    return tf.stack([expanded_rows, flattened_input], axis=1)\n```",
            "```python\n    rows = tf.range(tf.shape(in1)[0])\n    rows_repeated = tf.repeat(rows, tf.shape(in1)[1])\n    in1_flattened = tf.reshape(in1, [-1])\n    return tf.stack([rows_repeated, in1_flattened], axis=1)\n```",
            "```python\n    idx = tf.repeat(tf.range(tf.shape(in1)[0]), tf.shape(in1)[1])\n    vals = tf.reshape(in1, (-1,))\n    return tf.stack([idx, vals], axis=1)\n```",
            "```python\n    return tf.stack([tf.repeat(tf.range(tf.shape(in1)[0]), tf.shape(in1)[1]), tf.reshape(in1, [-1])], axis=1)\n```",
            "```python\n    idx = tf.repeat(tf.range(tf.shape(in1)[0]), tf.shape(in1)[1])\n    return tf.stack([idx, tf.reshape(in1, [-1])], axis=1)\n```",
            "```python\n    return tf.stack([tf.repeat(tf.range(tf.shape(in1)[0]), tf.shape(in1)[1]), tf.reshape(in1, [-1])], axis=1)\n```"
        ],
        "normalized_completions": [
            "def transform(in1):\n  return tf.concat([tf.expand_dims(tf.repeat(tf.range(tf.shape(in1)[0]), tf.shape(in1)[1]), 1), tf.reshape(in1, [-1, 1])], axis=1)",
            "def transform(in1):\n    rows = tf.range(tf.shape(in1)[0])\n    rows_expanded = tf.expand_dims(rows, axis=1)\n    rows_tiled = tf.tile(rows_expanded, [1, tf.shape(in1)[1]])\n    pairs = tf.stack([rows_tiled, in1], axis=2)\n    return tf.reshape(pairs, [-1, 2])",
            "def transform(in1):\n    idx = tf.repeat(tf.range(tf.shape(in1)[0]), tf.shape(in1)[1])\n    return tf.stack([idx, tf.reshape(in1, [-1])], axis=1)",
            "def transform(in1):\n    return tf.concat([tf.stack([tf.repeat(tf.range(tf.shape(in1)[0]), tf.shape(in1)[1]), tf.reshape(in1, [-1])], axis=1)], axis=0)",
            "def transform(in1):\n    indices = tf.reshape(tf.range(tf.shape(in1)[0]), (-1, 1))\n    indices = tf.repeat(indices, tf.shape(in1)[1], axis=1)\n    indices = tf.reshape(indices, (-1, 1))\n    values = tf.reshape(in1, (-1, 1))\n    return tf.concat([indices, values], axis=1)",
            "def transform(in1):\n    return tf.concat([tf.stack([tf.repeat(tf.range(tf.shape(in1)[0]), tf.shape(in1)[1]), tf.reshape(in1, [-1])], axis=1)], axis=0)",
            "def transform(in1):\n    return tf.concat([tf.stack([tf.repeat(tf.range(tf.shape(in1)[0]), tf.shape(in1)[1]), \n                                tf.reshape(in1, [-1])], axis=1)], axis=0)",
            "def transform(in1):\n    return tf.stack([tf.repeat(tf.range(tf.shape(in1)[0]), tf.shape(in1)[1]), tf.reshape(in1, [-1])], axis=1)",
            "def transform(in1):\n    return tf.concat([tf.stack([tf.repeat(tf.range(tf.shape(in1)[0]), tf.shape(in1)[1]), tf.reshape(in1, [-1])], axis=1)], axis=0)",
            "def transform(in1):\n    return tf.stack([tf.repeat(tf.range(tf.shape(in1)[0]), tf.shape(in1)[1]), tf.reshape(in1, [-1])], axis=1)",
            "def transform(in1):\n    return tf.concat([tf.stack([tf.repeat(tf.range(tf.shape(in1)[0]), tf.shape(in1)[1]), tf.reshape(in1, [-1])], axis=-1)], axis=1)",
            "def transform(in1):\n    idx = tf.range(tf.shape(in1)[0])\n    idx = tf.repeat(idx, tf.shape(in1)[1])\n    return tf.stack([idx, tf.reshape(in1, [-1])], axis=1)",
            "def transform(in1):\n    return tf.stack([tf.repeat(tf.range(tf.shape(in1)[0]), tf.shape(in1)[1]), tf.reshape(in1, [-1])], axis=1)",
            "def transform(in1):\n    idx = tf.repeat(tf.range(tf.shape(in1)[0]), tf.shape(in1)[1])\n    values = tf.reshape(in1, [-1])\n    return tf.stack([idx, values], axis=1)",
            "def transform(in1):\n    idx = tf.range(tf.shape(in1)[0])\n    idx_expanded = tf.expand_dims(idx, 1)\n    return tf.reshape(tf.concat([tf.tile(idx_expanded, [1, tf.shape(in1)[1]]), tf.reshape(in1, [-1, 1])], axis=1), [-1, 2])",
            "def transform(in1):\n    return tf.concat([tf.expand_dims(tf.repeat(tf.range(tf.shape(in1)[0]), tf.shape(in1)[1]), axis=1), tf.reshape(in1, (-1, 1))], axis=1)",
            "def transform(in1):\n    return tf.stack([tf.repeat(tf.range(0, tf.shape(in1)[0]), tf.shape(in1)[1]), tf.reshape(in1, [-1])], axis=1)",
            "def transform(in1):\n    return tf.reshape(tf.stack([tf.repeat(tf.range(tf.shape(in1)[0]), 2), tf.reshape(in1, [-1])], axis=1), [-1, 2])",
            "def transform(in1):\n    rows = tf.range(tf.shape(in1)[0])\n    rows_expanded = tf.expand_dims(rows, 1)\n    rows_tiled = tf.tile(rows_expanded, [1, tf.shape(in1)[1]])\n    indices = tf.stack([rows_tiled, in1], axis=-1)\n    return tf.reshape(indices, [-1, 2])",
            "def transform(in1):\n    rows = tf.repeat(tf.range(tf.shape(in1)[0]), tf.shape(in1)[1])\n    elements = tf.reshape(in1, [-1])\n    return tf.stack([rows, elements], axis=1)",
            "def transform(in1):\n    idx = tf.range(tf.shape(in1)[0])\n    expanded_idx = tf.expand_dims(idx, 1)\n    repeated_idx = tf.repeat(expanded_idx, tf.shape(in1)[1], axis=1)\n    combined = tf.stack([repeated_idx, in1], axis=2)\n    return tf.reshape(combined, (-1, 2))",
            "def transform(in1):\n    i = tf.reshape(tf.range(tf.shape(in1)[0]), (-1, 1))\n    return tf.concat([tf.stack([i] * tf.shape(in1)[1], axis=2), tf.expand_dims(in1, 2)], axis=3).reshape(-1, 2)",
            "def transform(in1):\n    return tf.concat([tf.stack([tf.repeat(tf.range(len(in1)), in1.shape[1]), tf.reshape(in1, [-1])], axis=1)], axis=0)",
            "def transform(in1):\n    idx = tf.repeat(tf.range(tf.shape(in1)[0]), tf.shape(in1)[1])\n    return tf.stack([idx, tf.reshape(in1, [-1])], axis=1)",
            "def transform(in1):\n    rows = tf.range(tf.shape(in1)[0])\n    expanded_rows = tf.repeat(rows, repeats=tf.shape(in1)[1])\n    flattened_input = tf.reshape(in1, [-1])\n    return tf.stack([expanded_rows, flattened_input], axis=1)",
            "def transform(in1):\n    rows = tf.range(tf.shape(in1)[0])\n    rows_repeated = tf.repeat(rows, tf.shape(in1)[1])\n    in1_flattened = tf.reshape(in1, [-1])\n    return tf.stack([rows_repeated, in1_flattened], axis=1)",
            "def transform(in1):\n    idx = tf.repeat(tf.range(tf.shape(in1)[0]), tf.shape(in1)[1])\n    vals = tf.reshape(in1, (-1,))\n    return tf.stack([idx, vals], axis=1)",
            "def transform(in1):\n    return tf.stack([tf.repeat(tf.range(tf.shape(in1)[0]), tf.shape(in1)[1]), tf.reshape(in1, [-1])], axis=1)",
            "def transform(in1):\n    idx = tf.repeat(tf.range(tf.shape(in1)[0]), tf.shape(in1)[1])\n    return tf.stack([idx, tf.reshape(in1, [-1])], axis=1)",
            "def transform(in1):\n    return tf.stack([tf.repeat(tf.range(tf.shape(in1)[0]), tf.shape(in1)[1]), tf.reshape(in1, [-1])], axis=1)"
        ],
        "tf_operators": {
            "tf.shape": 29,
            "tf.expand_dims": 7,
            "tf.range": 30,
            "tf.repeat": 26,
            "tf.reshape": 30,
            "tf.concat": 11,
            "tf.tile": 3,
            "tf.stack": 26
        },
        "coverage_percentage": 0.0,
        "total_covered": 0,
        "total_in_target": 5,
        "parsed_constants": [
            [
                0,
                1,
                1,
                -1,
                1,
                1
            ],
            [
                0,
                1,
                1,
                1,
                2,
                -1,
                2
            ],
            [
                0,
                1,
                -1,
                1
            ],
            [
                0,
                1,
                -1,
                1,
                0
            ],
            [
                0,
                -1,
                1,
                1,
                1,
                -1,
                1,
                -1,
                1,
                1
            ],
            [
                0,
                1,
                -1,
                1,
                0
            ],
            [
                0,
                1,
                -1,
                1,
                0
            ],
            [
                0,
                1,
                -1,
                1
            ],
            [
                0,
                1,
                -1,
                1,
                0
            ],
            [
                0,
                1,
                -1,
                1
            ],
            [
                0,
                1,
                -1,
                -1,
                1
            ],
            [
                0,
                1,
                -1,
                1
            ],
            [
                0,
                1,
                -1,
                1
            ],
            [
                0,
                1,
                -1,
                1
            ],
            [
                0,
                1,
                1,
                1,
                -1,
                1,
                1,
                -1,
                2
            ],
            [
                0,
                1,
                1,
                -1,
                1,
                1
            ],
            [
                0,
                0,
                1,
                -1,
                1
            ],
            [
                0,
                2,
                -1,
                1,
                -1,
                2
            ],
            [
                0,
                1,
                1,
                1,
                -1,
                -1,
                2
            ],
            [
                0,
                1,
                -1,
                1
            ],
            [
                0,
                1,
                1,
                1,
                2,
                -1,
                2
            ],
            [
                0,
                -1,
                1,
                1,
                2,
                2,
                3,
                -1,
                2
            ],
            [
                1,
                -1,
                1,
                0
            ],
            [
                0,
                1,
                -1,
                1
            ],
            [
                0,
                1,
                -1,
                1
            ],
            [
                0,
                1,
                -1,
                1
            ],
            [
                0,
                1,
                -1,
                1
            ],
            [
                0,
                1,
                -1,
                1
            ],
            [
                0,
                1,
                -1,
                1
            ],
            [
                0,
                1,
                -1,
                1
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            3,
            -1
        ],
        "constant_counts": [
            {
                "common": 6,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 7,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 9,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 8,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 6,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 5,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 3,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 5,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 0,
            "tf_bool": 0,
            "axis": 10,
            "common": 140,
            "tf_float32": 0,
            "shape_tuple": 0,
            "shape": 1,
            "tf_int64": 0,
            "provided": 0,
            "input_var": 98
        }
    },
    {
        "name": "stackoverflow_01",
        "description": "reshape by separating and duplicating columns",
        "target_program": "tf.transpose(tf.cast((in1, in1), tf.float32))",
        "source": "https://stackoverflow.com/questions/40441503/tensorflow-tensor-reshape",
        "constants": "[]",
        "examples": {
            "inputs": "[[[5., 2.], [1., 3.], [0., -1.]],]",
            "outputs": "[[[5., 5.], [1., 1.], [0., 0.]],    [[2., 2.], [3., 3.], [-1., -1.]]]"
        },
        "completions": [
            "```python\n    return tf.transpose(tf.tile(tf.expand_dims(in1, 0), [2, 1, 1]), perm=[0, 2, 1])\n```",
            "```python\n    return tf.transpose(tf.tile(tf.expand_dims(in1, 0), [2, 1, 1]), perm=[1, 0, 2])\n```",
            "```python\n    return tf.transpose(tf.tile(tf.expand_dims(tf.transpose(in1), -1), [1, 1, 2]), perm=[1, 0, 2])\n```",
            "```python\n    return tf.transpose(tf.tile(tf.expand_dims(in1, -1), [1, 1, 2]), [2, 0, 1])\n```",
            "```python\n    return tf.transpose(tf.tile(tf.expand_dims(in1, axis=0), [2, 1, 1]), [0, 2, 1])\n```",
            "```python\n    return tf.transpose(tf.tile(tf.expand_dims(in1, 0), [2, 1, 1]), [1, 0, 2])\n```",
            "```python\n    return tf.transpose(tf.tile(tf.expand_dims(in1, 0), [2, 1, 1]), [1, 0, 2])\n```",
            "```python\n    return tf.transpose(tf.tile(tf.expand_dims(in1, 0), [2, 1, 1]), perm=[2, 0, 1])\n```",
            "```python\n    return tf.transpose(tf.tile(tf.expand_dims(in1, 0), [2, 1, 1]), [2, 0, 1])\n```",
            "```python\n    return tf.transpose(tf.stack([tf.repeat(in1[:, i], 2) for i in range(in1.shape[1])]), [1, 0]).reshape((2, -1, 2))\n```",
            "```python\n    return tf.transpose(tf.tile(tf.expand_dims(in1, 0), [2, 1, 1]), [2, 0, 1])\n```",
            "```python\n    return tf.transpose(tf.tile(tf.expand_dims(in1, 0), [2, 1, 1]), perm=[0, 2, 1])\n```",
            "```python\n    return tf.transpose(tf.tile(tf.expand_dims(in1, 0), [2, 1, 1]), [2, 0, 1])\n```",
            "```python\n    return tf.transpose(tf.stack([in1, in1], axis=2), [2, 0, 1])\n```",
            "```python\n    return tf.transpose(tf.stack([tf.repeat(in1[:, i], 2) for i in range(tf.shape(in1)[1])], axis=1))\n```",
            "```python\n    return tf.transpose(tf.stack([tf.tile(tf.expand_dims(in1[:, i], axis=1), [1, 2]) for i in range(in1.shape[1])]), [1, 0, 2])\n```",
            "```python\n    return tf.transpose(tf.tile(tf.expand_dims(in1, 0), [in1.shape[1], 1, 1]), [1, 0, 2])\n```",
            "```python\n    return tf.transpose(tf.stack([in1, in1], axis=2), perm=[2, 0, 1])\n```",
            "```python\n    return tf.transpose(tf.tile(tf.expand_dims(in1, 0), [2, 1, 1]), [0, 2, 1])\n```",
            "```python\n    return tf.transpose(tf.tile(tf.expand_dims(in1, 0), [2, 1, 1]), [2, 0, 1])\n```",
            "```python\n    return tf.transpose(tf.tile(tf.expand_dims(tf.transpose(in1), -1), [1, 1, 2]), [2, 0, 1])\n```",
            "```python\n    return tf.transpose(tf.tile(tf.expand_dims(in1, 0), [2, 1, 1]), [1, 0, 2])\n```",
            "```python\n    return tf.transpose(tf.tile(tf.expand_dims(in1, 2), [1, 1, 2]), [2, 0, 1])\n```",
            "```python\n    return tf.transpose(tf.tile(tf.expand_dims(in1, -1), [1, 1, 2]), [2, 0, 1])\n```",
            "```python\n    return tf.transpose(tf.tile(tf.expand_dims(in1, 0), [in1.shape[1], 1, 1]))\n```",
            "```python\n    return tf.transpose(tf.stack([in1, in1], axis=2), perm=[2, 0, 1])\n```",
            "```python\n    return tf.transpose(tf.tile(tf.expand_dims(in1, axis=0), [2, 1, 1]), perm=[2, 0, 1])\n```",
            "```python\n    return tf.transpose(tf.tile(tf.expand_dims(in1, axis=0), [2, 1, 1]), [0, 2, 1])\n```",
            "```python\n    return tf.transpose(tf.tile(tf.expand_dims(in1, axis=0), [2,1,1]), perm=[1,2,0])\n```",
            "```python\n    return tf.transpose(tf.tile(tf.expand_dims(in1, -1), [1, 1, 2]), [2, 0, 1])\n```"
        ],
        "normalized_completions": [
            "def transform(in1):\n    return tf.transpose(tf.tile(tf.expand_dims(in1, 0), [2, 1, 1]), perm=[0, 2, 1])",
            "def transform(in1):\n    return tf.transpose(tf.tile(tf.expand_dims(in1, 0), [2, 1, 1]), perm=[1, 0, 2])",
            "def transform(in1):\n    return tf.transpose(tf.tile(tf.expand_dims(tf.transpose(in1), -1), [1, 1, 2]), perm=[1, 0, 2])",
            "def transform(in1):\n    return tf.transpose(tf.tile(tf.expand_dims(in1, -1), [1, 1, 2]), [2, 0, 1])",
            "def transform(in1):\n    return tf.transpose(tf.tile(tf.expand_dims(in1, axis=0), [2, 1, 1]), [0, 2, 1])",
            "def transform(in1):\n    return tf.transpose(tf.tile(tf.expand_dims(in1, 0), [2, 1, 1]), [1, 0, 2])",
            "def transform(in1):\n    return tf.transpose(tf.tile(tf.expand_dims(in1, 0), [2, 1, 1]), [1, 0, 2])",
            "def transform(in1):\n    return tf.transpose(tf.tile(tf.expand_dims(in1, 0), [2, 1, 1]), perm=[2, 0, 1])",
            "def transform(in1):\n    return tf.transpose(tf.tile(tf.expand_dims(in1, 0), [2, 1, 1]), [2, 0, 1])",
            "def transform(in1):\n    return tf.transpose(tf.stack([tf.repeat(in1[:, i], 2) for i in range(in1.shape[1])]), [1, 0]).reshape((2, -1, 2))",
            "def transform(in1):\n    return tf.transpose(tf.tile(tf.expand_dims(in1, 0), [2, 1, 1]), [2, 0, 1])",
            "def transform(in1):\n    return tf.transpose(tf.tile(tf.expand_dims(in1, 0), [2, 1, 1]), perm=[0, 2, 1])",
            "def transform(in1):\n    return tf.transpose(tf.tile(tf.expand_dims(in1, 0), [2, 1, 1]), [2, 0, 1])",
            "def transform(in1):\n    return tf.transpose(tf.stack([in1, in1], axis=2), [2, 0, 1])",
            "def transform(in1):\n    return tf.transpose(tf.stack([tf.repeat(in1[:, i], 2) for i in range(tf.shape(in1)[1])], axis=1))",
            "def transform(in1):\n    return tf.transpose(tf.stack([tf.tile(tf.expand_dims(in1[:, i], axis=1), [1, 2]) for i in range(in1.shape[1])]), [1, 0, 2])",
            "def transform(in1):\n    return tf.transpose(tf.tile(tf.expand_dims(in1, 0), [in1.shape[1], 1, 1]), [1, 0, 2])",
            "def transform(in1):\n    return tf.transpose(tf.stack([in1, in1], axis=2), perm=[2, 0, 1])",
            "def transform(in1):\n    return tf.transpose(tf.tile(tf.expand_dims(in1, 0), [2, 1, 1]), [0, 2, 1])",
            "def transform(in1):\n    return tf.transpose(tf.tile(tf.expand_dims(in1, 0), [2, 1, 1]), [2, 0, 1])",
            "def transform(in1):\n    return tf.transpose(tf.tile(tf.expand_dims(tf.transpose(in1), -1), [1, 1, 2]), [2, 0, 1])",
            "def transform(in1):\n    return tf.transpose(tf.tile(tf.expand_dims(in1, 0), [2, 1, 1]), [1, 0, 2])",
            "def transform(in1):\n    return tf.transpose(tf.tile(tf.expand_dims(in1, 2), [1, 1, 2]), [2, 0, 1])",
            "def transform(in1):\n    return tf.transpose(tf.tile(tf.expand_dims(in1, -1), [1, 1, 2]), [2, 0, 1])",
            "def transform(in1):\n    return tf.transpose(tf.tile(tf.expand_dims(in1, 0), [in1.shape[1], 1, 1]))",
            "def transform(in1):\n    return tf.transpose(tf.stack([in1, in1], axis=2), perm=[2, 0, 1])",
            "def transform(in1):\n    return tf.transpose(tf.tile(tf.expand_dims(in1, axis=0), [2, 1, 1]), perm=[2, 0, 1])",
            "def transform(in1):\n    return tf.transpose(tf.tile(tf.expand_dims(in1, axis=0), [2, 1, 1]), [0, 2, 1])",
            "def transform(in1):\n    return tf.transpose(tf.tile(tf.expand_dims(in1, axis=0), [2,1,1]), perm=[1,2,0])",
            "def transform(in1):\n    return tf.transpose(tf.tile(tf.expand_dims(in1, -1), [1, 1, 2]), [2, 0, 1])"
        ],
        "tf_operators": {
            "tf.expand_dims": 25,
            "tf.tile": 25,
            "tf.transpose": 30,
            "tf.stack": 6,
            "tf.repeat": 2,
            "tf.shape": 1
        },
        "coverage_percentage": 33.33333333333333,
        "total_covered": 1,
        "total_in_target": 3,
        "parsed_constants": [
            [
                0,
                2,
                1,
                1,
                0,
                2,
                1
            ],
            [
                0,
                2,
                1,
                1,
                1,
                0,
                2
            ],
            [
                -1,
                1,
                1,
                2,
                1,
                0,
                2
            ],
            [
                -1,
                1,
                1,
                2,
                2,
                0,
                1
            ],
            [
                0,
                2,
                1,
                1,
                0,
                2,
                1
            ],
            [
                0,
                2,
                1,
                1,
                1,
                0,
                2
            ],
            [
                0,
                2,
                1,
                1,
                1,
                0,
                2
            ],
            [
                0,
                2,
                1,
                1,
                2,
                0,
                1
            ],
            [
                0,
                2,
                1,
                1,
                2,
                0,
                1
            ],
            [
                2,
                1,
                1,
                0,
                2,
                -1,
                2
            ],
            [
                0,
                2,
                1,
                1,
                2,
                0,
                1
            ],
            [
                0,
                2,
                1,
                1,
                0,
                2,
                1
            ],
            [
                0,
                2,
                1,
                1,
                2,
                0,
                1
            ],
            [
                2,
                2,
                0,
                1
            ],
            [
                2,
                1,
                1
            ],
            [
                1,
                1,
                2,
                1,
                1,
                0,
                2
            ],
            [
                0,
                1,
                1,
                1,
                1,
                0,
                2
            ],
            [
                2,
                2,
                0,
                1
            ],
            [
                0,
                2,
                1,
                1,
                0,
                2,
                1
            ],
            [
                0,
                2,
                1,
                1,
                2,
                0,
                1
            ],
            [
                -1,
                1,
                1,
                2,
                2,
                0,
                1
            ],
            [
                0,
                2,
                1,
                1,
                1,
                0,
                2
            ],
            [
                2,
                1,
                1,
                2,
                2,
                0,
                1
            ],
            [
                -1,
                1,
                1,
                2,
                2,
                0,
                1
            ],
            [
                0,
                1,
                1,
                1
            ],
            [
                2,
                2,
                0,
                1
            ],
            [
                0,
                2,
                1,
                1,
                2,
                0,
                1
            ],
            [
                0,
                2,
                1,
                1,
                0,
                2,
                1
            ],
            [
                0,
                2,
                1,
                1,
                1,
                2,
                0
            ],
            [
                -1,
                1,
                1,
                2,
                2,
                0,
                1
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            -1
        ],
        "constant_counts": [
            {
                "common": 5,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 6,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 3,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 0,
            "tf_bool": 0,
            "axis": 56,
            "common": 136,
            "tf_float32": 0,
            "shape_tuple": 0,
            "shape": 0,
            "tf_int64": 0,
            "provided": 0,
            "input_var": 34
        }
    },
    {
        "name": "stackoverflow_02",
        "description": "clip values that are greater than 1",
        "target_program": "tf.minimum(in1, tf.constant(1))",
        "source": "https://stackoverflow.com/questions/46408839/tensorflow-trim-values-in-tensor",
        "constants": "[1]",
        "examples": {
            "inputs": "[[5, 1, 0, 3, 0, -1, 2, -10, 2],]",
            "outputs": "[[1, 1, 0, 1, 0, -1, 1, -10, 1]]"
        },
        "completions": [
            "```\n    return tf.clip_by_value(in1, clip_value_min=tf.reduce_min(in1), clip_value_max=1)\n```",
            "```python\n    return tf.clip_by_value(in1, -float('inf'), 1)\n```",
            "```\n    return tf.clip_by_value(in1, clip_value_min=in1, clip_value_max=1)\n```",
            "```python\n    return tf.clip_by_value(in1, clip_value_min=tf.reduce_min(in1), clip_value_max=1)\n```",
            "```python\n    return tf.clip_by_value(in1, clip_value_min=tf.reduce_min(in1), clip_value_max=1)\n```",
            "```python\n    return tf.clip_by_value(in1, -float('inf'), 1)\n```",
            "```\ndef transform(in1):\n    return tf.clip_by_value(in1, clip_value_min=tf.reduce_min(in1), clip_value_max=1)\n```",
            "```python\n    return tf.clip_by_value(in1, tf.reduce_min(in1), 1)\n```",
            "```python\n    return tf.clip_by_value(in1, clip_value_min=-float('inf'), clip_value_max=1)\n```",
            "```python\n    return tf.clip_by_value(in1, clip_value_min=tf.reduce_min(in1), clip_value_max=1)\n```",
            "```python\n    return tf.clip_by_value(in1, clip_value_min=tf.reduce_min(in1), clip_value_max=1)\n```",
            "```\ndef transform(in1):\n    return tf.clip_by_value(in1, clip_value_min=tf.reduce_min(in1), clip_value_max=tf.constant(1))\n```",
            "```python\n    return tf.clip_by_value(in1, clip_value_min=-float('inf'), clip_value_max=1)\n```",
            "```python\n    return tf.clip_by_value(in1, -tf.constant(float('inf')), 1)\n```",
            "```python\n    return tf.clip_by_value(in1, clip_value_min=tf.reduce_min(in1), clip_value_max=1)\n```",
            "```python\n    return tf.clip_by_value(in1, -float('inf'), 1)\n```",
            "```python\n    return tf.clip_by_value(in1, -float('inf'), 1)\n```",
            "```\ndef transform(in1):\n    return tf.clip_by_value(in1, clip_value_min=-float('inf'), clip_value_max=1)\n```",
            "```python\n    return tf.clip_by_value(in1, clip_value_min=tf.reduce_min(in1), clip_value_max=1)\n```",
            "```\nreturn tf.clip_by_value(in1, -float('inf'), 1)\n```",
            "def transform(in1):\n    return tf.clip_by_value(in1, clip_value_min=-float('inf'), clip_value_max=1)",
            "```python\n    return tf.clip_by_value(in1, clip_value_min=tf.reduce_min(in1), clip_value_max=1)\n```",
            "```python\n    return tf.clip_by_value(in1, clip_value_min=tf.reduce_min(in1), clip_value_max=1)\n```",
            "```python\n    return tf.clip_by_value(in1, clip_value_min=-float('inf'), clip_value_max=1)\n```",
            "```python\n    return tf.expand_dims(tf.clip_by_value(in1, clip_value_min=-float('inf'), clip_value_max=1), 0)\n```",
            "```python\ndef transform(in1):\n    return tf.clip_by_value(in1, clip_value_min=-float('inf'), clip_value_max=1)\n```",
            "```\ndef transform(in1):\n    return tf.clip_by_value(in1, clip_value_min=in1, clip_value_max=1)\n```",
            "```python\n    return tf.clip_by_value(in1, clip_value_min=tf.reduce_min(in1), clip_value_max=1)\n```",
            "```python\n    return tf.clip_by_value(in1, clip_value_min=tf.reduce_min(in1), clip_value_max=1)\n```",
            "```python\n    return tf.clip_by_value(in1, clip_value_min=tf.reduce_min(in1), clip_value_max=1)\n```"
        ],
        "normalized_completions": [
            "def transform(in1):\n    return tf.clip_by_value(in1, clip_value_min=tf.reduce_min(in1), clip_value_max=1)",
            "def transform(in1):\n    return tf.clip_by_value(in1, -float('inf'), 1)",
            "def transform(in1):\n    return tf.clip_by_value(in1, clip_value_min=in1, clip_value_max=1)",
            "def transform(in1):\n    return tf.clip_by_value(in1, clip_value_min=tf.reduce_min(in1), clip_value_max=1)",
            "def transform(in1):\n    return tf.clip_by_value(in1, clip_value_min=tf.reduce_min(in1), clip_value_max=1)",
            "def transform(in1):\n    return tf.clip_by_value(in1, -float('inf'), 1)",
            "def transform(in1):\n    return tf.clip_by_value(in1, clip_value_min=tf.reduce_min(in1), clip_value_max=1)",
            "def transform(in1):\n    return tf.clip_by_value(in1, tf.reduce_min(in1), 1)",
            "def transform(in1):\n    return tf.clip_by_value(in1, clip_value_min=-float('inf'), clip_value_max=1)",
            "def transform(in1):\n    return tf.clip_by_value(in1, clip_value_min=tf.reduce_min(in1), clip_value_max=1)",
            "def transform(in1):\n    return tf.clip_by_value(in1, clip_value_min=tf.reduce_min(in1), clip_value_max=1)",
            "def transform(in1):\n    return tf.clip_by_value(in1, clip_value_min=tf.reduce_min(in1), clip_value_max=tf.constant(1))",
            "def transform(in1):\n    return tf.clip_by_value(in1, clip_value_min=-float('inf'), clip_value_max=1)",
            "def transform(in1):\n    return tf.clip_by_value(in1, -tf.constant(float('inf')), 1)",
            "def transform(in1):\n    return tf.clip_by_value(in1, clip_value_min=tf.reduce_min(in1), clip_value_max=1)",
            "def transform(in1):\n    return tf.clip_by_value(in1, -float('inf'), 1)",
            "def transform(in1):\n    return tf.clip_by_value(in1, -float('inf'), 1)",
            "def transform(in1):\n    return tf.clip_by_value(in1, clip_value_min=-float('inf'), clip_value_max=1)",
            "def transform(in1):\n    return tf.clip_by_value(in1, clip_value_min=tf.reduce_min(in1), clip_value_max=1)",
            "def transform(in1):\n    return tf.clip_by_value(in1, -float('inf'), 1)",
            "def transform(in1):\n    return tf.clip_by_value(in1, clip_value_min=-float('inf'), clip_value_max=1)",
            "def transform(in1):\n    return tf.clip_by_value(in1, clip_value_min=tf.reduce_min(in1), clip_value_max=1)",
            "def transform(in1):\n    return tf.clip_by_value(in1, clip_value_min=tf.reduce_min(in1), clip_value_max=1)",
            "def transform(in1):\n    return tf.clip_by_value(in1, clip_value_min=-float('inf'), clip_value_max=1)",
            "def transform(in1):\n    return tf.expand_dims(tf.clip_by_value(in1, clip_value_min=-float('inf'), clip_value_max=1), 0)",
            "def transform(in1):\n    return tf.clip_by_value(in1, clip_value_min=-float('inf'), clip_value_max=1)",
            "def transform(in1):\n    return tf.clip_by_value(in1, clip_value_min=in1, clip_value_max=1)",
            "def transform(in1):\n    return tf.clip_by_value(in1, clip_value_min=tf.reduce_min(in1), clip_value_max=1)",
            "def transform(in1):\n    return tf.clip_by_value(in1, clip_value_min=tf.reduce_min(in1), clip_value_max=1)",
            "def transform(in1):\n    return tf.clip_by_value(in1, clip_value_min=tf.reduce_min(in1), clip_value_max=1)"
        ],
        "tf_operators": {
            "tf.clip_by_value": 30,
            "tf.reduce_min": 15,
            "tf.constant": 2,
            "tf.expand_dims": 1
        },
        "coverage_percentage": 50.0,
        "total_covered": 1,
        "total_in_target": 2,
        "parsed_constants": [
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ]
        ],
        "all_constants": [
            0,
            1
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 0,
            "tf_bool": 0,
            "axis": 0,
            "common": 31,
            "tf_float32": 0,
            "shape_tuple": 0,
            "shape": 0,
            "tf_int64": 0,
            "provided": 0,
            "input_var": 47
        }
    },
    {
        "name": "stackoverflow_03",
        "description": "replace certain columns with columns from the other tensor",
        "target_program": "tf.reduce_sum(tf.one_hot(tf.range(3, 5), depth=in1.shape[1], dtype=tf.int32), axis=0) * in2 + (1 - tf.reduce_sum(tf.one_hot(tf.range(3, 5), depth=in1.shape[1], dtype=tf.int32), axis=0)) * in1",
        "source": "https://stackoverflow.com/questions/44657388/how-to-replace-certain-values-in-tensorflow-tensor-with-the-values-of-the-other",
        "constants": "[3, 4, 5]",
        "examples": {
            "inputs": "[[[11, 22, 33, 44, 55, 66, 77], [70, 60, 50, 40, 30, 20, 10]],[[-9, -8, -7, -6, -5, -4, -3], [11, 12, 13, 14, 15, 16, 17]],]",
            "outputs": "[[[11, 22, 33, -6, -5, 66, 77], [70, 60, 50, 14, 15, 20, 10]]]"
        },
        "completions": [
            "```python\n    indices = tf.constant([[0, 3], [0, 4], [1, 3], [1, 4]])\n    updates = tf.gather_nd(in2, indices)\n    return tf.tensor_scatter_nd_update(in1, indices, updates)\n```",
            "```\n    return tf.where(tf.constant([[0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 1, 0, 0]]), in2, in1)\n```",
            "```\n    indices = [[3, 4], [3, 4]]\n    in1[:, indices] = in2[:, indices]\n    return in1\n```",
            "```python\n    updates = tf.gather(in2, [3, 4], axis=1)\n    indices = tf.constant([[0, 3], [0, 4], [1, 3], [1, 4]])\n    result = tf.tensor_scatter_nd_update(in1, indices, tf.reshape(updates, [-1]))\n    return tf.expand_dims(result, axis=0)\n```",
            "```python\n    indices = [[0, 3], [0, 4], [1, 3], [1, 4]]\n    updates = tf.gather_nd(in2, indices)\n    return tf.tensor_scatter_nd_update(in1, indices, updates)\n```",
            "```python\n    return tf.tensor_scatter_nd_update(in1, [[0, 3], [0, 4], [1, 3], [1, 4]], tf.gather_nd(in2, [[0, 3], [0, 4], [1, 3], [1, 4]]))\n```",
            "```python\n    return tf.tensor_scatter_nd_update(in1, tf.constant([[0, 3], [0, 4], [1, 3], [1, 4]]), tf.gather_nd(in2, tf.constant([[0, 3], [0, 4], [1, 3], [1, 4]])))\n```",
            "```python\n    indices = [[0, 3, 4], [1, 3, 4]]\n    updates = tf.gather_nd(in2, tf.expand_dims(indices, axis=-1))\n    return tf.tensor_scatter_nd_update(in1, tf.expand_dims(indices, axis=-1), updates)\n```",
            "```python\n    return tf.tensor_scatter_nd_update(in1, [[0, 3], [0, 4], [1, 3], [1, 4]], tf.gather_nd(in2, [[0, 3], [0, 4], [1, 3], [1, 4]]))\n```",
            "```python\n    return tf.concat([in1[:, :3], in2[:, 3:5], in1[:, 5:]], axis=1)\n```",
            "```python\n    indices = [[0, 3], [0, 4], [1, 3], [1, 4]]\n    updates = tf.gather_nd(in2, indices)\n    return tf.tensor_scatter_nd_update(in1, indices, updates)\n```",
            "```python\ndef transform(in1, in2):\n    updates = tf.gather_nd(in2, tf.constant([[0, 3], [0, 4], [1, 3], [1, 4]]))\n    indices = tf.constant([[0, 3], [0, 4], [1, 3], [1, 4]])\n    return tf.tensor_scatter_nd_update(in1, indices, updates)\n```",
            "```python\n    return tf.tensor_scatter_nd_update(in1, [[0, 3], [1, 3], [0, 4], [1, 4]], tf.gather_nd(in2, [[0, 3], [1, 3], [0, 4], [1, 4]]))\n```",
            "```python\n    indices = [[0, 3, 4], [1, 3, 4]]\n    updates = tf.gather(in2[0], [3, 4])\n    tensor = tf.tensor_scatter_nd_update(in1, [[0,0],[0,1],[0,2]], updates)\n    updates = tf.gather(in2[1], [3, 4])\n    tensor = tf.tensor_scatter_nd_update(tensor, [[1,0],[1,1],[1,2]], updates)\n    return tf.expand_dims(tensor, 0)\n```",
            "```python\n    indices = [[0, 3, 4], [1, 3, 4]]\n    updates = tf.gather_nd(in2, indices)\n    z = tf.tensor_scatter_nd_update(in1, tf.constant([[0, 3], [0, 4], [1, 3], [1, 4]]), updates)\n    return tf.expand_dims(z, 0)\n```",
            "```python\n    return tf.tensor_scatter_nd_update(in1, [[0,3], [0,4], [1,3], [1,4]], tf.gather_nd(in2, [[0,3], [0,4], [1,3], [1,4]]))\n```",
            "```python\n    indices = [[0, 3], [0, 4], [1, 3], [1, 4]]\n    updates = tf.concat([in2[0, 3:5], in2[1, 3:5]], axis=0)\n    return tf.tensor_scatter_nd_update(in1, indices, updates)\n```",
            "```python\n    return tf.stack([\n        tf.where(tf.constant([False, False, False, True, True, False, False]), in2[0], in1[0]),\n        tf.where(tf.constant([False, False, False, True, True, False, False]), in2[1], in1[1])\n    ])\n```",
            "```python\n    indices = [[0, 3], [0, 4], [1, 3], [1, 4]]\n    updates = tf.gather_nd(in2, indices)\n    return tf.tensor_scatter_nd_update(in1, indices, updates)\n```",
            "```python\n    updates = tf.gather_nd(in2, tf.constant([[0, 3], [0, 4], [1, 3], [1, 4]]))\n    indices = tf.constant([[0, 0, 3], [0, 0, 4], [0, 1, 3], [0, 1, 4]])\n    in1 = tf.expand_dims(in1, 0)\n    return tf.tensor_scatter_nd_update(in1, indices, updates)\n```",
            "```python\ndef transform(in1, in2):\n    idx = tf.constant([[0, 1], [0, 2], [0, 5], [1, 3], [1, 4]])\n    updates = tf.gather_nd(in2, idx)\n    shape = tf.shape(in1)\n    return tf.tensor_scatter_nd_update(in1, idx, updates)\n```",
            "```python\n    replacement_indices = tf.constant([[0, 3], [0, 4], [1, 3], [1, 4]])\n    in1_updated = tf.tensor_scatter_nd_update(in1, replacement_indices, tf.gather_nd(in2, replacement_indices))\n    return in1_updated\n```",
            "```python\n    indices = tf.constant([[0, 3], [0, 4], [1, 3], [1, 4]])\n    updates = tf.gather_nd(in2, indices)\n    updated_tensor = tf.tensor_scatter_nd_update(in1, indices, updates)\n    return tf.expand_dims(updated_tensor, 0)\n```",
            "```python\n    idx = [[0,1,2,3,4,5,6],[0,1,2,3,4,5,6]]\n    updates = tf.boolean_mask(in2, tf.sequence_mask([3,2], 7))\n    return tf.tensor_scatter_nd_update(in1, tf.stack([tf.ones([7], tf.int32), idx], axis=-1), updates)\n```",
            "```python\n    idx = tf.constant([[3, 4], [3, 4]])\n    in1 = tf.tensor_scatter_nd_update(in1, idx, tf.gather_nd(in2, idx))\n    return in1\n```",
            "```python\n    indices = [[0, 3], [0, 4], [1, 3], [1, 4]]\n    updates = tf.gather_nd(in2, indices)\n    return tf.tensor_scatter_nd_update(in1, indices, updates)\n```",
            "```python\n    indices = [[0, 3], [0, 4], [1, 3], [1, 4]]\n    updates = tf.gather_nd(in2, indices)\n    return tf.tensor_scatter_nd_update(in1, indices, updates)\n```",
            "```python\n    return tf.tensor_scatter_nd_update(in1, tf.constant([[0, 3], [0, 4], [1, 3], [1, 4]]), tf.gather_nd(in2, tf.constant([[0, 3], [0, 4], [1, 3], [1, 4]])))\n```",
            "```python\n    indices = [[0, 3], [0, 4], [1, 3], [1, 4]]\n    updates = tf.gather_nd(in2, indices)\n    return tf.tensor_scatter_nd_update(in1, indices, updates)\n```",
            "```python\n    return tf.tensor_scatter_nd_update(in1, [[0, 3], [0, 4], [1, 3], [1, 4]], tf.gather_nd(in2, [[0, 3], [0, 4], [1, 3], [1, 4]]))\n```"
        ],
        "normalized_completions": [
            "def transform(in1, in2):\n    indices = tf.constant([[0, 3], [0, 4], [1, 3], [1, 4]])\n    updates = tf.gather_nd(in2, indices)\n    return tf.tensor_scatter_nd_update(in1, indices, updates)",
            "def transform(in1, in2):\n    return tf.where(tf.constant([[0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 1, 0, 0]]), in2, in1)",
            "def transform(in1, in2):\n    indices = [[3, 4], [3, 4]]\n    in1[:, indices] = in2[:, indices]\n    return in1",
            "def transform(in1, in2):\n    updates = tf.gather(in2, [3, 4], axis=1)\n    indices = tf.constant([[0, 3], [0, 4], [1, 3], [1, 4]])\n    result = tf.tensor_scatter_nd_update(in1, indices, tf.reshape(updates, [-1]))\n    return tf.expand_dims(result, axis=0)",
            "def transform(in1, in2):\n    indices = [[0, 3], [0, 4], [1, 3], [1, 4]]\n    updates = tf.gather_nd(in2, indices)\n    return tf.tensor_scatter_nd_update(in1, indices, updates)",
            "def transform(in1, in2):\n    return tf.tensor_scatter_nd_update(in1, [[0, 3], [0, 4], [1, 3], [1, 4]], tf.gather_nd(in2, [[0, 3], [0, 4], [1, 3], [1, 4]]))",
            "def transform(in1, in2):\n    return tf.tensor_scatter_nd_update(in1, tf.constant([[0, 3], [0, 4], [1, 3], [1, 4]]), tf.gather_nd(in2, tf.constant([[0, 3], [0, 4], [1, 3], [1, 4]])))",
            "def transform(in1, in2):\n    indices = [[0, 3, 4], [1, 3, 4]]\n    updates = tf.gather_nd(in2, tf.expand_dims(indices, axis=-1))\n    return tf.tensor_scatter_nd_update(in1, tf.expand_dims(indices, axis=-1), updates)",
            "def transform(in1, in2):\n    return tf.tensor_scatter_nd_update(in1, [[0, 3], [0, 4], [1, 3], [1, 4]], tf.gather_nd(in2, [[0, 3], [0, 4], [1, 3], [1, 4]]))",
            "def transform(in1, in2):\n    return tf.concat([in1[:, :3], in2[:, 3:5], in1[:, 5:]], axis=1)",
            "def transform(in1, in2):\n    indices = [[0, 3], [0, 4], [1, 3], [1, 4]]\n    updates = tf.gather_nd(in2, indices)\n    return tf.tensor_scatter_nd_update(in1, indices, updates)",
            "def transform(in1, in2):\n    updates = tf.gather_nd(in2, tf.constant([[0, 3], [0, 4], [1, 3], [1, 4]]))\n    indices = tf.constant([[0, 3], [0, 4], [1, 3], [1, 4]])\n    return tf.tensor_scatter_nd_update(in1, indices, updates)",
            "def transform(in1, in2):\n    return tf.tensor_scatter_nd_update(in1, [[0, 3], [1, 3], [0, 4], [1, 4]], tf.gather_nd(in2, [[0, 3], [1, 3], [0, 4], [1, 4]]))",
            "def transform(in1, in2):\n    indices = [[0, 3, 4], [1, 3, 4]]\n    updates = tf.gather(in2[0], [3, 4])\n    tensor = tf.tensor_scatter_nd_update(in1, [[0,0],[0,1],[0,2]], updates)\n    updates = tf.gather(in2[1], [3, 4])\n    tensor = tf.tensor_scatter_nd_update(tensor, [[1,0],[1,1],[1,2]], updates)\n    return tf.expand_dims(tensor, 0)",
            "def transform(in1, in2):\n    indices = [[0, 3, 4], [1, 3, 4]]\n    updates = tf.gather_nd(in2, indices)\n    z = tf.tensor_scatter_nd_update(in1, tf.constant([[0, 3], [0, 4], [1, 3], [1, 4]]), updates)\n    return tf.expand_dims(z, 0)",
            "def transform(in1, in2):\n    return tf.tensor_scatter_nd_update(in1, [[0,3], [0,4], [1,3], [1,4]], tf.gather_nd(in2, [[0,3], [0,4], [1,3], [1,4]]))",
            "def transform(in1, in2):\n    indices = [[0, 3], [0, 4], [1, 3], [1, 4]]\n    updates = tf.concat([in2[0, 3:5], in2[1, 3:5]], axis=0)\n    return tf.tensor_scatter_nd_update(in1, indices, updates)",
            "def transform(in1, in2):\n    return tf.stack([\n        tf.where(tf.constant([False, False, False, True, True, False, False]), in2[0], in1[0]),\n        tf.where(tf.constant([False, False, False, True, True, False, False]), in2[1], in1[1])\n    ])",
            "def transform(in1, in2):\n    indices = [[0, 3], [0, 4], [1, 3], [1, 4]]\n    updates = tf.gather_nd(in2, indices)\n    return tf.tensor_scatter_nd_update(in1, indices, updates)",
            "def transform(in1, in2):\n    updates = tf.gather_nd(in2, tf.constant([[0, 3], [0, 4], [1, 3], [1, 4]]))\n    indices = tf.constant([[0, 0, 3], [0, 0, 4], [0, 1, 3], [0, 1, 4]])\n    in1 = tf.expand_dims(in1, 0)\n    return tf.tensor_scatter_nd_update(in1, indices, updates)",
            "def transform(in1, in2):\n    idx = tf.constant([[0, 1], [0, 2], [0, 5], [1, 3], [1, 4]])\n    updates = tf.gather_nd(in2, idx)\n    shape = tf.shape(in1)\n    return tf.tensor_scatter_nd_update(in1, idx, updates)",
            "def transform(in1, in2):\n    replacement_indices = tf.constant([[0, 3], [0, 4], [1, 3], [1, 4]])\n    in1_updated = tf.tensor_scatter_nd_update(in1, replacement_indices, tf.gather_nd(in2, replacement_indices))\n    return in1_updated",
            "def transform(in1, in2):\n    indices = tf.constant([[0, 3], [0, 4], [1, 3], [1, 4]])\n    updates = tf.gather_nd(in2, indices)\n    updated_tensor = tf.tensor_scatter_nd_update(in1, indices, updates)\n    return tf.expand_dims(updated_tensor, 0)",
            "def transform(in1, in2):\n    idx = [[0,1,2,3,4,5,6],[0,1,2,3,4,5,6]]\n    updates = tf.boolean_mask(in2, tf.sequence_mask([3,2], 7))\n    return tf.tensor_scatter_nd_update(in1, tf.stack([tf.ones([7], tf.int32), idx], axis=-1), updates)",
            "def transform(in1, in2):\n    idx = tf.constant([[3, 4], [3, 4]])\n    in1 = tf.tensor_scatter_nd_update(in1, idx, tf.gather_nd(in2, idx))\n    return in1",
            "def transform(in1, in2):\n    indices = [[0, 3], [0, 4], [1, 3], [1, 4]]\n    updates = tf.gather_nd(in2, indices)\n    return tf.tensor_scatter_nd_update(in1, indices, updates)",
            "def transform(in1, in2):\n    indices = [[0, 3], [0, 4], [1, 3], [1, 4]]\n    updates = tf.gather_nd(in2, indices)\n    return tf.tensor_scatter_nd_update(in1, indices, updates)",
            "def transform(in1, in2):\n    return tf.tensor_scatter_nd_update(in1, tf.constant([[0, 3], [0, 4], [1, 3], [1, 4]]), tf.gather_nd(in2, tf.constant([[0, 3], [0, 4], [1, 3], [1, 4]])))",
            "def transform(in1, in2):\n    indices = [[0, 3], [0, 4], [1, 3], [1, 4]]\n    updates = tf.gather_nd(in2, indices)\n    return tf.tensor_scatter_nd_update(in1, indices, updates)",
            "def transform(in1, in2):\n    return tf.tensor_scatter_nd_update(in1, [[0, 3], [0, 4], [1, 3], [1, 4]], tf.gather_nd(in2, [[0, 3], [0, 4], [1, 3], [1, 4]]))"
        ],
        "tf_operators": {
            "tf.tensor_scatter_nd_update": 26,
            "tf.constant": 13,
            "tf.gather_nd": 22,
            "tf.where": 2,
            "tf.expand_dims": 6,
            "tf.gather": 2,
            "tf.reshape": 1,
            "tf.concat": 2,
            "tf.stack": 2,
            "tf.shape": 1,
            "tf.boolean_mask": 1,
            "tf.sequence_mask": 1,
            "tf.int32": 1,
            "tf.ones": 1
        },
        "coverage_percentage": 25.0,
        "total_covered": 1,
        "total_in_target": 4,
        "parsed_constants": [
            [
                0,
                3,
                0,
                4,
                1,
                3,
                1,
                4
            ],
            [
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0
            ],
            [
                3,
                4,
                3,
                4
            ],
            [
                3,
                4,
                1,
                0,
                3,
                0,
                4,
                1,
                3,
                1,
                4,
                -1,
                0
            ],
            [
                0,
                3,
                0,
                4,
                1,
                3,
                1,
                4
            ],
            [
                0,
                3,
                0,
                4,
                1,
                3,
                1,
                4,
                0,
                3,
                0,
                4,
                1,
                3,
                1,
                4
            ],
            [
                0,
                3,
                0,
                4,
                1,
                3,
                1,
                4,
                0,
                3,
                0,
                4,
                1,
                3,
                1,
                4
            ],
            [
                0,
                3,
                4,
                1,
                3,
                4,
                -1,
                -1
            ],
            [
                0,
                3,
                0,
                4,
                1,
                3,
                1,
                4,
                0,
                3,
                0,
                4,
                1,
                3,
                1,
                4
            ],
            [
                3,
                3,
                5,
                5,
                1
            ],
            [
                0,
                3,
                0,
                4,
                1,
                3,
                1,
                4
            ],
            [
                0,
                3,
                0,
                4,
                1,
                3,
                1,
                4,
                0,
                3,
                0,
                4,
                1,
                3,
                1,
                4
            ],
            [
                0,
                3,
                1,
                3,
                0,
                4,
                1,
                4,
                0,
                3,
                1,
                3,
                0,
                4,
                1,
                4
            ],
            [
                0,
                3,
                4,
                1,
                3,
                4,
                0,
                3,
                4,
                0,
                0,
                0,
                1,
                0,
                2,
                1,
                3,
                4,
                1,
                0,
                1,
                1,
                1,
                2,
                0
            ],
            [
                0,
                3,
                4,
                1,
                3,
                4,
                0,
                3,
                0,
                4,
                1,
                3,
                1,
                4,
                0
            ],
            [
                0,
                3,
                0,
                4,
                1,
                3,
                1,
                4,
                0,
                3,
                0,
                4,
                1,
                3,
                1,
                4
            ],
            [
                0,
                3,
                0,
                4,
                1,
                3,
                1,
                4,
                0,
                3,
                5,
                1,
                3,
                5,
                0
            ],
            [
                0,
                0,
                1,
                1
            ],
            [
                0,
                3,
                0,
                4,
                1,
                3,
                1,
                4
            ],
            [
                0,
                3,
                0,
                4,
                1,
                3,
                1,
                4,
                0,
                0,
                3,
                0,
                0,
                4,
                0,
                1,
                3,
                0,
                1,
                4,
                0
            ],
            [
                0,
                1,
                0,
                2,
                0,
                5,
                1,
                3,
                1,
                4
            ],
            [
                0,
                3,
                0,
                4,
                1,
                3,
                1,
                4
            ],
            [
                0,
                3,
                0,
                4,
                1,
                3,
                1,
                4,
                0
            ],
            [
                0,
                1,
                2,
                3,
                4,
                5,
                6,
                0,
                1,
                2,
                3,
                4,
                5,
                6,
                3,
                2,
                7,
                7,
                -1
            ],
            [
                3,
                4,
                3,
                4
            ],
            [
                0,
                3,
                0,
                4,
                1,
                3,
                1,
                4
            ],
            [
                0,
                3,
                0,
                4,
                1,
                3,
                1,
                4
            ],
            [
                0,
                3,
                0,
                4,
                1,
                3,
                1,
                4,
                0,
                3,
                0,
                4,
                1,
                3,
                1,
                4
            ],
            [
                0,
                3,
                0,
                4,
                1,
                3,
                1,
                4
            ],
            [
                0,
                3,
                0,
                4,
                1,
                3,
                1,
                4,
                0,
                3,
                0,
                4,
                1,
                3,
                1,
                4
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            -1
        ],
        "constant_counts": [
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 4,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 7,
                "shape_tuple": 0
            },
            {
                "common": 14,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 4,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 7,
                "axis": 0,
                "shape": 0,
                "provided": 6,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 4,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 7,
                "shape_tuple": 0
            },
            {
                "common": 8,
                "axis": 0,
                "shape": 0,
                "provided": 8,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 8,
                "axis": 0,
                "shape": 0,
                "provided": 8,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 4,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 7,
                "shape_tuple": 0
            },
            {
                "common": 8,
                "axis": 0,
                "shape": 0,
                "provided": 8,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 4,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 4,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 7,
                "shape_tuple": 0
            },
            {
                "common": 8,
                "axis": 0,
                "shape": 0,
                "provided": 8,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 8,
                "axis": 0,
                "shape": 0,
                "provided": 8,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 15,
                "axis": 2,
                "shape": 0,
                "provided": 8,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 12,
                "shape_tuple": 0
            },
            {
                "common": 7,
                "axis": 0,
                "shape": 0,
                "provided": 8,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 8,
                "axis": 0,
                "shape": 0,
                "provided": 8,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 0,
                "shape": 0,
                "provided": 8,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 7,
                "shape_tuple": 0
            },
            {
                "common": 18,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 4,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 7,
                "shape_tuple": 0
            },
            {
                "common": 13,
                "axis": 0,
                "shape": 0,
                "provided": 8,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 8,
                "shape_tuple": 0
            },
            {
                "common": 6,
                "axis": 1,
                "shape": 0,
                "provided": 3,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 5,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 4,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 0,
                "shape": 0,
                "provided": 4,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 7,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 3,
                "shape": 2,
                "provided": 9,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 4,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 4,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 7,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 4,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 7,
                "shape_tuple": 0
            },
            {
                "common": 8,
                "axis": 0,
                "shape": 0,
                "provided": 8,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 4,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 7,
                "shape_tuple": 0
            },
            {
                "common": 8,
                "axis": 0,
                "shape": 0,
                "provided": 8,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 1,
            "tf_bool": 0,
            "axis": 6,
            "common": 196,
            "tf_float32": 0,
            "shape_tuple": 0,
            "shape": 2,
            "tf_int64": 0,
            "provided": 166,
            "input_var": 152
        }
    },
    {
        "name": "stackoverflow_04",
        "description": "index into the tensor",
        "target_program": "tf.gather_nd(in1, tf.stack((in2, in3), axis=-1))",
        "source": "https://stackoverflow.com/questions/33736795/tensorflow-numpy-like-tensor-indexing",
        "constants": "[]",
        "examples": {
            "inputs": "[  [[5., 2.], [1., 3.], [0., -1.]]]",
            "outputs": "[[[5., 5.], [1., 1.], [0., 0.]],  [[2., 2.], [3., 3.], [-1., -1.]]]"
        },
        "completions": [
            "```python\ndef transform(in1):\n    return tf.transpose(tf.gather(in1, [0, 1], axis=1))\n```",
            "```python\ndef transform(in1):\n    return tf.transpose(tf.stack([in1, in1], axis=-1), perm=[2, 0, 1])\n```",
            "```python\n    return tf.transpose(in1)\n```",
            "```python\ndef transform(in1):\n    return tf.transpose(tf.stack([in1, in1], axis=2), perm=[2, 0, 1])\n```",
            "```python\ndef transform(in1):\n    return tf.transpose(tf.repeat(tf.transpose(in1), 2), perm=[1, 0])\n```",
            "```python\ndef transform(in1):\n    indices = [[0], [1]]\n    return tf.gather(in1, indices, axis=1)\n```",
            "```python\ndef transform(in1):\n    return tf.transpose(tf.stack([tf.gather(in1, axis=1, indices=[i]) for i in range(2)]))\n```",
            "```python\ndef transform(in1):\n    return tf.transpose(tf.stack(tf.unstack(in1, axis=1)), perm=[1, 0, 2])\n```",
            "```python\ndef transform(in1):\n    return tf.transpose(tf.gather(in1, [0, 1], axis=1))\n```",
            "```python\ndef transform(in1):\n    return tf.gather_nd(in1, tf.expand_dims(tf.range(2), 1))\n```",
            "```python\ndef transform(in1):\n    return tf.transpose(tf.stack([in1, in1], axis=2), [2, 0, 1])\n```",
            "```python\ndef transform(in1):\n    indices = [[0, 0], [0, 1], [1, 0], [1, 1], [2, 0], [2, 1]]\n    updates = [5, 2, 1, 3, 0, -1]\n    return tf.gather_nd(in1, indices), tf.gather_nd(in1, [[0], [1], [2]])\n```",
            "```python\ndef transform(in1):\n    return tf.transpose(tf.repeat(tf.transpose(in1), repeats=2, axis=1))\n```",
            "```python\ndef transform(in1):\n    return tf.transpose(tf.stack([in1, in1], axis=2), perm=[2, 0, 1])\n```",
            "```\ndef transform(in1):\n    return tf.transpose(tf.stack([in1, in1], axis=2), perm=[1, 0, 2])\n```",
            "```python\ndef transform(in1):\n    return tf.transpose(tf.tile(tf.expand_dims(in1, 1), [1, tf.shape(in1)[1], 1]), perm=[1, 0, 2])\n```",
            "```python\n    return tf.transpose(tf.unstack(in1, axis=1))\n```",
            "```python\ndef transform(in1):\n    return tf.transpose(tf.tile(tf.expand_dims(in1, axis=1), [1, 2, 1]), [1, 0, 2])\n```",
            "```python\ndef transform(in1):\n    return tf.gather(in1, [0, 1], axis=1)\n```",
            "```python\n    return tf.transpose(tf.stack(tf.unstack(in1, axis=1)), perm=[1, 0, 2])\n```",
            "```python\ndef transform(in1):\n    return tf.transpose(tf.stack([in1, in1], axis=2), [2, 0, 1])\n```",
            "```python\ndef transform(in1):\n    return tf.transpose(tf.stack(tf.unstack(in1, axis=1)), [1, 0, 2])\n```",
            "```python\ndef transform(in1):\n    return tf.transpose(tf.stack([in1, in1], axis=0), perm=[1, 2, 0])\n```",
            "```python\ndef transform(in1):\n    return tf.transpose(tf.unstack(in1, axis=1))\n```",
            "```python\ndef transform(in1):\n    return tf.transpose(tf.stack(tf.unstack(in1, axis=1)), [2, 0, 1])\n```",
            "```python\ndef transform(in1):\n    return tf.transpose(tf.stack(tf.unstack(in1, axis=1)), perm=[1, 0, 2])\n```",
            "def transform(in1):\n    return tf.transpose(tf.stack([in1, in1], axis=2), perm=[2, 0, 1])",
            "```python\ndef transform(in1):\n    return tf.transpose(tf.stack(tf.unstack(in1, axis=1)), perm=[1, 2, 0])\n```",
            "```python\ndef transform(in1):\n    return tf.transpose(tf.stack([in1, in1], axis=2), perm=[2, 0, 1])\n```",
            "```python\ndef transform(in1):\n    return tf.transpose(tf.unstack(tf.transpose(in1)), perm=[1, 0])\n```"
        ],
        "normalized_completions": [
            "def transform(in1):\n    return tf.transpose(tf.gather(in1, [0, 1], axis=1))",
            "def transform(in1):\n    return tf.transpose(tf.stack([in1, in1], axis=-1), perm=[2, 0, 1])",
            "def transform(in1):\n    return tf.transpose(in1)",
            "def transform(in1):\n    return tf.transpose(tf.stack([in1, in1], axis=2), perm=[2, 0, 1])",
            "def transform(in1):\n    return tf.transpose(tf.repeat(tf.transpose(in1), 2), perm=[1, 0])",
            "def transform(in1):\n    indices = [[0], [1]]\n    return tf.gather(in1, indices, axis=1)",
            "def transform(in1):\n    return tf.transpose(tf.stack([tf.gather(in1, axis=1, indices=[i]) for i in range(2)]))",
            "def transform(in1):\n    return tf.transpose(tf.stack(tf.unstack(in1, axis=1)), perm=[1, 0, 2])",
            "def transform(in1):\n    return tf.transpose(tf.gather(in1, [0, 1], axis=1))",
            "def transform(in1):\n    return tf.gather_nd(in1, tf.expand_dims(tf.range(2), 1))",
            "def transform(in1):\n    return tf.transpose(tf.stack([in1, in1], axis=2), [2, 0, 1])",
            "def transform(in1):\n    indices = [[0, 0], [0, 1], [1, 0], [1, 1], [2, 0], [2, 1]]\n    updates = [5, 2, 1, 3, 0, -1]\n    return tf.gather_nd(in1, indices), tf.gather_nd(in1, [[0], [1], [2]])",
            "def transform(in1):\n    return tf.transpose(tf.repeat(tf.transpose(in1), repeats=2, axis=1))",
            "def transform(in1):\n    return tf.transpose(tf.stack([in1, in1], axis=2), perm=[2, 0, 1])",
            "def transform(in1):\n    return tf.transpose(tf.stack([in1, in1], axis=2), perm=[1, 0, 2])",
            "def transform(in1):\n    return tf.transpose(tf.tile(tf.expand_dims(in1, 1), [1, tf.shape(in1)[1], 1]), perm=[1, 0, 2])",
            "def transform(in1):\n    return tf.transpose(tf.unstack(in1, axis=1))",
            "def transform(in1):\n    return tf.transpose(tf.tile(tf.expand_dims(in1, axis=1), [1, 2, 1]), [1, 0, 2])",
            "def transform(in1):\n    return tf.gather(in1, [0, 1], axis=1)",
            "def transform(in1):\n    return tf.transpose(tf.stack(tf.unstack(in1, axis=1)), perm=[1, 0, 2])",
            "def transform(in1):\n    return tf.transpose(tf.stack([in1, in1], axis=2), [2, 0, 1])",
            "def transform(in1):\n    return tf.transpose(tf.stack(tf.unstack(in1, axis=1)), [1, 0, 2])",
            "def transform(in1):\n    return tf.transpose(tf.stack([in1, in1], axis=0), perm=[1, 2, 0])",
            "def transform(in1):\n    return tf.transpose(tf.unstack(in1, axis=1))",
            "def transform(in1):\n    return tf.transpose(tf.stack(tf.unstack(in1, axis=1)), [2, 0, 1])",
            "def transform(in1):\n    return tf.transpose(tf.stack(tf.unstack(in1, axis=1)), perm=[1, 0, 2])",
            "def transform(in1):\n    return tf.transpose(tf.stack([in1, in1], axis=2), perm=[2, 0, 1])",
            "def transform(in1):\n    return tf.transpose(tf.stack(tf.unstack(in1, axis=1)), perm=[1, 2, 0])",
            "def transform(in1):\n    return tf.transpose(tf.stack([in1, in1], axis=2), perm=[2, 0, 1])",
            "def transform(in1):\n    return tf.transpose(tf.unstack(tf.transpose(in1)), perm=[1, 0])"
        ],
        "tf_operators": {
            "tf.gather": 5,
            "tf.transpose": 26,
            "tf.stack": 16,
            "tf.repeat": 2,
            "tf.unstack": 9,
            "tf.expand_dims": 3,
            "tf.range": 1,
            "tf.gather_nd": 2,
            "tf.shape": 1,
            "tf.tile": 2
        },
        "coverage_percentage": 100.0,
        "total_covered": 2,
        "total_in_target": 2,
        "parsed_constants": [
            [
                0,
                1,
                1
            ],
            [
                -1,
                2,
                0,
                1
            ],
            [],
            [
                2,
                2,
                0,
                1
            ],
            [
                2,
                1,
                0
            ],
            [
                0,
                1,
                1
            ],
            [
                1,
                2
            ],
            [
                1,
                1,
                0,
                2
            ],
            [
                0,
                1,
                1
            ],
            [
                2,
                1
            ],
            [
                2,
                2,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1,
                1,
                0,
                1,
                1,
                2,
                0,
                2,
                1,
                5,
                2,
                1,
                3,
                0,
                -1,
                0,
                1,
                2
            ],
            [
                2,
                1
            ],
            [
                2,
                2,
                0,
                1
            ],
            [
                2,
                1,
                0,
                2
            ],
            [
                1,
                1,
                1,
                1,
                1,
                0,
                2
            ],
            [
                1
            ],
            [
                1,
                1,
                2,
                1,
                1,
                0,
                2
            ],
            [
                0,
                1,
                1
            ],
            [
                1,
                1,
                0,
                2
            ],
            [
                2,
                2,
                0,
                1
            ],
            [
                1,
                1,
                0,
                2
            ],
            [
                0,
                1,
                2,
                0
            ],
            [
                1
            ],
            [
                1,
                2,
                0,
                1
            ],
            [
                1,
                1,
                0,
                2
            ],
            [
                2,
                2,
                0,
                1
            ],
            [
                1,
                1,
                2,
                0
            ],
            [
                2,
                2,
                0,
                1
            ],
            [
                1,
                0
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            3,
            5,
            -1
        ],
        "constant_counts": [
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 15,
                "axis": 4,
                "shape": 1,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 5,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 6,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 0,
            "tf_bool": 0,
            "axis": 33,
            "common": 85,
            "tf_float32": 0,
            "shape_tuple": 0,
            "shape": 1,
            "tf_int64": 0,
            "provided": 1,
            "input_var": 46
        }
    },
    {
        "name": "stackoverflow_05",
        "description": "tensor multiplication like np.tensordot",
        "target_program": "tf.tensordot(in1, in2, 1)",
        "source": "https://stackoverflow.com/questions/43067338/tensor-multiplication-in-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[[4, 3, 1], [6, 5, 2]],[[[5, 5]], [[1, 5]], [[6, 0]]],]",
            "outputs": "[[[29, 35]], [[47, 55]]]"
        },
        "completions": [
            "```python\n    return tf.tensordot(in1, in2, axes=[[1],[0]])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[[1], [0]])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[[1], [0]])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[[1], [0]])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[[1], [0]])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[[1], [0]])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, tf.squeeze(in2, axis=1), axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[[1], [0]])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[[1], [0]])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[[1], [0]])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[[1], [0]])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```"
        ],
        "normalized_completions": [
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=[[1],[0]])",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=[[1], [0]])",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=[[1], [0]])",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=[[1], [0]])",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=[[1], [0]])",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=[[1], [0]])",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "def transform(in1, in2):\n    return tf.tensordot(in1, tf.squeeze(in2, axis=1), axes=1)",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=[[1], [0]])",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=[[1], [0]])",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=[[1], [0]])",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=[[1], [0]])",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)"
        ],
        "tf_operators": {
            "tf.tensordot": 30,
            "tf.squeeze": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 1,
        "total_in_target": 1,
        "parsed_constants": [
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ]
        ],
        "all_constants": [
            0,
            1
        ],
        "constant_counts": [
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 0,
            "tf_bool": 0,
            "axis": 0,
            "common": 41,
            "tf_float32": 0,
            "shape_tuple": 0,
            "shape": 0,
            "tf_int64": 0,
            "provided": 0,
            "input_var": 60
        }
    },
    {
        "name": "stackoverflow_06",
        "description": "binary tensor from vector indicating if elements are equal",
        "target_program": "tf.cast(tf.equal(in1, tf.expand_dims(in1, 1)), tf.float32)",
        "source": "https://stackoverflow.com/questions/47816231/create-binary-tensor-from-vector-in-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[3, 5, 0, 2, 3, 3, 0],]",
            "outputs": "[[1., 0., 0., 0., 1., 1., 0.],    [0., 1., 0., 0., 0., 0., 0.],    [0., 0., 1., 0., 0., 0., 1.],    [0., 0., 0., 1., 0., 0., 0.],    [1., 0., 0., 0., 1., 1., 0.],    [1., 0., 0., 0., 1., 1., 0.],    [0., 0., 1., 0., 0., 0., 1.]]"
        },
        "completions": [
            "```python\n    return tf.one_hot(in1, depth=tf.reduce_max(in1) + 1)\n```",
            "```python\n    oh = tf.one_hot(in1, tf.shape(in1)[0])\n    return tf.cast(oh, tf.float32)\n```",
            "```python\n    return tf.cast(tf.equal(tf.expand_dims(in1, 1), in1), tf.float32)\n```",
            "```python\ndef transform(in1):\n    return tf.cast(tf.equal(tf.expand_dims(in1, 0), tf.expand_dims(in1, 1)), tf.float32)\n```",
            "```python\n    return tf.cast(tf.equal(tf.expand_dims(in1, 0), tf.expand_dims(in1, 1)), tf.float32)\n```",
            "```python\n    return tf.cast(tf.equal(tf.expand_dims(in1, 0), tf.expand_dims(in1, 1)), tf.float32)\n```",
            "```python\n    return tf.one_hot(in1, tf.shape(in1)[0], dtype=tf.float32)\n```",
            "```python\n    return tf.cast(tf.equal(tf.expand_dims(in1, 0), tf.expand_dims(in1, 1)), tf.float32)\n```",
            "```python\n    return tf.cast(tf.equal(tf.expand_dims(in1, 1), in1), tf.float32)\n```",
            "```python\n    return tf.cast(tf.equal(tf.expand_dims(in1, 1), in1), tf.float32)\n```",
            "```python\n    return tf.cast(tf.equal(tf.expand_dims(in1, 0), tf.expand_dims(in1, 1)), tf.float32)\n```",
            "```python\n  return tf.cast(tf.equal(tf.expand_dims(in1, 0), tf.expand_dims(in1, 1)), tf.float32)\n```",
            "```python\n    return tf.cast(tf.equal(tf.expand_dims(in1, 0), tf.expand_dims(in1, 1)), tf.float32)\n```",
            "```python\ndef transform(in1):\n    return tf.cast(tf.equal(tf.expand_dims(in1, 0), tf.expand_dims(in1, 1)), tf.float32)\n```",
            "```python\n    return tf.one_hot(in1, tf.shape(in1)[0])\n```",
            "```python\n    return tf.cast(tf.equal(tf.expand_dims(in1, 1), in1), tf.float32)\n```",
            "```python\n    return tf.cast(tf.equal(tf.expand_dims(in1, 1), in1), tf.float32)\n```",
            "```python\n    return tf.cast(tf.equal(tf.expand_dims(in1, 0), tf.expand_dims(in1, 1)), tf.float32)\n```",
            "```python\ndef transform(in1):\n    return tf.cast(tf.equal(tf.expand_dims(in1, 0), tf.expand_dims(in1, 1)), tf.float32)\n```",
            "```python\n    return tf.cast(tf.equal(tf.expand_dims(in1, 0), tf.expand_dims(in1, 1)), tf.float32)\n```",
            "```python\n    return tf.cast(tf.equal(tf.expand_dims(in1, 1), in1), tf.float32)\n```",
            "```python\n    n = tf.size(in1)\n    indices = tf.stack([tf.range(n), in1], axis=1)\n    updates = tf.ones(n, dtype=tf.float32)\n    return tf.scatter_nd(indices, updates, (n, n))\n```",
            "```python\n    return tf.cast(tf.equal(tf.expand_dims(in1, 0), tf.expand_dims(in1, 1)), tf.float32)\n```",
            "```python\n    return tf.cast(tf.equal(tf.expand_dims(in1, -1), in1), tf.float32)\n```",
            "```python\n    return tf.cast(tf.equal(tf.expand_dims(in1, axis=1), in1), tf.float32)\n```",
            "```python\n    return tf.cast(tf.equal(tf.expand_dims(in1, 1), in1), tf.float32)\n```",
            "```python\n    return tf.cast(tf.equal(tf.expand_dims(in1, 1), in1), tf.float32)\n```",
            "```python\n    return tf.cast(tf.equal(tf.expand_dims(in1, 0), tf.expand_dims(in1, 1)), tf.float32)\n```",
            "```python\n    return tf.cast(tf.equal(tf.expand_dims(in1, 1), in1), tf.float32)\n```",
            "```python\n    return tf.cast(tf.equal(tf.expand_dims(in1, 0), tf.expand_dims(in1, 1)), tf.float32)\n```"
        ],
        "normalized_completions": [
            "def transform(in1):\n    return tf.one_hot(in1, depth=tf.reduce_max(in1) + 1)",
            "def transform(in1):\n    oh = tf.one_hot(in1, tf.shape(in1)[0])\n    return tf.cast(oh, tf.float32)",
            "def transform(in1):\n    return tf.cast(tf.equal(tf.expand_dims(in1, 1), in1), tf.float32)",
            "def transform(in1):\n    return tf.cast(tf.equal(tf.expand_dims(in1, 0), tf.expand_dims(in1, 1)), tf.float32)",
            "def transform(in1):\n    return tf.cast(tf.equal(tf.expand_dims(in1, 0), tf.expand_dims(in1, 1)), tf.float32)",
            "def transform(in1):\n    return tf.cast(tf.equal(tf.expand_dims(in1, 0), tf.expand_dims(in1, 1)), tf.float32)",
            "def transform(in1):\n    return tf.one_hot(in1, tf.shape(in1)[0], dtype=tf.float32)",
            "def transform(in1):\n    return tf.cast(tf.equal(tf.expand_dims(in1, 0), tf.expand_dims(in1, 1)), tf.float32)",
            "def transform(in1):\n    return tf.cast(tf.equal(tf.expand_dims(in1, 1), in1), tf.float32)",
            "def transform(in1):\n    return tf.cast(tf.equal(tf.expand_dims(in1, 1), in1), tf.float32)",
            "def transform(in1):\n    return tf.cast(tf.equal(tf.expand_dims(in1, 0), tf.expand_dims(in1, 1)), tf.float32)",
            "def transform(in1):\n  return tf.cast(tf.equal(tf.expand_dims(in1, 0), tf.expand_dims(in1, 1)), tf.float32)",
            "def transform(in1):\n    return tf.cast(tf.equal(tf.expand_dims(in1, 0), tf.expand_dims(in1, 1)), tf.float32)",
            "def transform(in1):\n    return tf.cast(tf.equal(tf.expand_dims(in1, 0), tf.expand_dims(in1, 1)), tf.float32)",
            "def transform(in1):\n    return tf.one_hot(in1, tf.shape(in1)[0])",
            "def transform(in1):\n    return tf.cast(tf.equal(tf.expand_dims(in1, 1), in1), tf.float32)",
            "def transform(in1):\n    return tf.cast(tf.equal(tf.expand_dims(in1, 1), in1), tf.float32)",
            "def transform(in1):\n    return tf.cast(tf.equal(tf.expand_dims(in1, 0), tf.expand_dims(in1, 1)), tf.float32)",
            "def transform(in1):\n    return tf.cast(tf.equal(tf.expand_dims(in1, 0), tf.expand_dims(in1, 1)), tf.float32)",
            "def transform(in1):\n    return tf.cast(tf.equal(tf.expand_dims(in1, 0), tf.expand_dims(in1, 1)), tf.float32)",
            "def transform(in1):\n    return tf.cast(tf.equal(tf.expand_dims(in1, 1), in1), tf.float32)",
            "def transform(in1):\n    n = tf.size(in1)\n    indices = tf.stack([tf.range(n), in1], axis=1)\n    updates = tf.ones(n, dtype=tf.float32)\n    return tf.scatter_nd(indices, updates, (n, n))",
            "def transform(in1):\n    return tf.cast(tf.equal(tf.expand_dims(in1, 0), tf.expand_dims(in1, 1)), tf.float32)",
            "def transform(in1):\n    return tf.cast(tf.equal(tf.expand_dims(in1, -1), in1), tf.float32)",
            "def transform(in1):\n    return tf.cast(tf.equal(tf.expand_dims(in1, axis=1), in1), tf.float32)",
            "def transform(in1):\n    return tf.cast(tf.equal(tf.expand_dims(in1, 1), in1), tf.float32)",
            "def transform(in1):\n    return tf.cast(tf.equal(tf.expand_dims(in1, 1), in1), tf.float32)",
            "def transform(in1):\n    return tf.cast(tf.equal(tf.expand_dims(in1, 0), tf.expand_dims(in1, 1)), tf.float32)",
            "def transform(in1):\n    return tf.cast(tf.equal(tf.expand_dims(in1, 1), in1), tf.float32)",
            "def transform(in1):\n    return tf.cast(tf.equal(tf.expand_dims(in1, 0), tf.expand_dims(in1, 1)), tf.float32)"
        ],
        "tf_operators": {
            "tf.one_hot": 4,
            "tf.reduce_max": 1,
            "tf.float32": 28,
            "tf.shape": 3,
            "tf.cast": 26,
            "tf.equal": 25,
            "tf.expand_dims": 25,
            "tf.scatter_nd": 1,
            "tf.range": 1,
            "tf.stack": 1,
            "tf.size": 1,
            "tf.ones": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 4,
        "total_in_target": 4,
        "parsed_constants": [
            [
                1
            ],
            [
                0
            ],
            [
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0
            ],
            [
                0,
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                0,
                1
            ],
            [
                -1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                0,
                1
            ],
            [
                1
            ],
            [
                0,
                1
            ]
        ],
        "all_constants": [
            0,
            1,
            -1
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 0,
            "tf_bool": 0,
            "axis": 0,
            "common": 44,
            "tf_float32": 28,
            "shape_tuple": 0,
            "shape": 0,
            "tf_int64": 0,
            "provided": 0,
            "input_var": 64
        }
    },
    {
        "name": "stackoverflow_08",
        "description": "(\\'select the values in the second tensor where the first tensor is greater than 1\\')",
        "target_program": "tf.boolean_mask(in2, tf.greater(in1, tf.constant(1)))",
        "source": "https://stackoverflow.com/questions/33769041/tensorflow-indexing-with-boolean-tensor",
        "constants": "[1]",
        "examples": {
            "inputs": "[[-1, 0, -3, 2, 1, 3, 5, -1, -9, 2, 10],[12, 3, 45, 6, 7, 8, 9, 87, 65, 4, 32],]",
            "outputs": "[6, 8, 9, 4, 32]"
        },
        "completions": [
            "return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "```python\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```python\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```python\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```python\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```python\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```python\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```python\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```python\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```python\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```python\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```python\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```python\n    mask = tf.greater(in1, 1)\n    return tf.boolean_mask(in2, mask)\n```",
            "```python\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```python\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```python\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```python\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```python\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```python\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```python\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```python\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```python\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```python\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```python\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```python\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```\nreturn tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```python\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```python\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```"
        ],
        "normalized_completions": [
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "def transform(in1, in2):\n    mask = tf.greater(in1, 1)\n    return tf.boolean_mask(in2, mask)",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))"
        ],
        "tf_operators": {
            "tf.greater": 30,
            "tf.boolean_mask": 30
        },
        "coverage_percentage": 66.66666666666666,
        "total_covered": 2,
        "total_in_target": 3,
        "parsed_constants": [
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ]
        ],
        "all_constants": [
            1
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 0,
            "tf_bool": 0,
            "axis": 0,
            "common": 30,
            "tf_float32": 0,
            "shape_tuple": 0,
            "shape": 0,
            "tf_int64": 0,
            "provided": 0,
            "input_var": 60
        }
    },
    {
        "name": "stackoverflow_09",
        "description": "group items by value and get the group indices",
        "target_program": "tf.unique_with_counts(in1)[1]",
        "source": "https://stackoverflow.com/questions/53054668/assign-values-between-0-and-n-1-for-a-vector-of-length-l-with-n-different-eleme",
        "constants": "[]",
        "examples": {
            "inputs": "[[37, 42, 42, 37, 28, 15, 42, 15],]",
            "outputs": "[0, 1, 1, 0, 2, 3, 1, 3]"
        },
        "completions": [
            "```python\n    _, indices = tf.unique_with_counts(in1)\n    return indices\n```",
            "```python\n    _, out, _ = tf.unique_with_counts(in1)\n    return out\n```",
            "```python\n    _, indices = tf.unique_with_counts(in1)\n    return indices\n```",
            "```python\n    _, indices = tf.unique_with_counts(in1)\n    return indices\n```",
            "```python\n    _, indices = tf.unique_with_counts(in1)\n    return indices\n```",
            "```python\n    return tf.argsort(tf.argsort(in1), 1)\n```",
            "```python\n    _, indices, _ = tf.unique_with_counts(in1)\n    return indices\n```",
            "```python\n    values, _, counts = tf.unique_with_counts(in1)\n    return tf.gather(tf.argsort(values), tf.searchsorted(values, in1))\n```",
            "```python\n    _, indices = tf.unique_with_counts(in1)\n    return indices - 1\n```",
            "```python\n    _, indices, _ = tf.unique_with_counts(in1)\n    return indices\n```",
            "```python\n    return tf.argsort(tf.argsort(in1))\n```",
            "```python\n    unique, idx, _ = tf.unique_with_counts(in1)\n    return idx\n```",
            "```python\n_, indices = tf.unique_with_counts(in1)\nreturn indices\n```",
            "```python\n    unique_vals, _, group_indices = tf.unique_with_counts(in1)\n    return group_indices\n```",
            "```python\n    _, _, indices = tf.unique_with_counts(in1)\n    return indices\n```",
            "```python\n    _, idx = tf.unique_with_counts(in1)\n    return idx\n```",
            "```python\n    _, _, idx = tf.unique_with_counts(in1)\n    return idx\n```",
            "```python\n    return tf.argsort(tf.argsort(in1))\n```",
            "```python\n    _, _, counts = tf.unique_with_counts(in1)\n    return tf.cast(counts-1, tf.int32)\n```",
            "```python\n    _, indices, _ = tf.unique_with_counts(in1)\n    return indices\n```",
            "```python\n    _, indices, _ = tf.unique_with_counts(in1)\n    return indices\n```",
            "```python\n    _, indices = tf.unique_with_counts(in1)\n    return indices\n```",
            "```python\n    _, _, idx = tf.unique_with_counts(in1)\n    return idx\n```",
            "```python\n    _, indices = tf.unique_with_counts(in1)\n    return indices\n```",
            "```python\n    _, indices, _ = tf.unique_with_counts(in1)\n    return indices\n```",
            "```python\n    _, indices = tf.unique_with_counts(in1)\n    return indices\n```",
            "```python\n    _, _, idx = tf.unique_with_counts(in1)\n    return idx\n```",
            "```python\n    _, indices = tf.unique_with_counts(in1)\n    return indices\n```",
            "```python\n    return tf.math.floormod(tf.argsort(tf.argsort(in1)), tf.shape(in1)[0])\n```",
            "```python\n    _, _, counts = tf.unique_with_counts(in1)\n    return counts - 1\n```"
        ],
        "normalized_completions": [
            "def transform(in1):\n    _, indices = tf.unique_with_counts(in1)\n    return indices",
            "def transform(in1):\n    _, out, _ = tf.unique_with_counts(in1)\n    return out",
            "def transform(in1):\n    _, indices = tf.unique_with_counts(in1)\n    return indices",
            "def transform(in1):\n    _, indices = tf.unique_with_counts(in1)\n    return indices",
            "def transform(in1):\n    _, indices = tf.unique_with_counts(in1)\n    return indices",
            "def transform(in1):\n    return tf.argsort(tf.argsort(in1), 1)",
            "def transform(in1):\n    _, indices, _ = tf.unique_with_counts(in1)\n    return indices",
            "def transform(in1):\n    values, _, counts = tf.unique_with_counts(in1)\n    return tf.gather(tf.argsort(values), tf.searchsorted(values, in1))",
            "def transform(in1):\n    _, indices = tf.unique_with_counts(in1)\n    return indices - 1",
            "def transform(in1):\n    _, indices, _ = tf.unique_with_counts(in1)\n    return indices",
            "def transform(in1):\n    return tf.argsort(tf.argsort(in1))",
            "def transform(in1):\n    unique, idx, _ = tf.unique_with_counts(in1)\n    return idx",
            "def transform(in1):\n    _, indices = tf.unique_with_counts(in1)\n    return indices",
            "def transform(in1):\n    unique_vals, _, group_indices = tf.unique_with_counts(in1)\n    return group_indices",
            "def transform(in1):\n    _, _, indices = tf.unique_with_counts(in1)\n    return indices",
            "def transform(in1):\n    _, idx = tf.unique_with_counts(in1)\n    return idx",
            "def transform(in1):\n    _, _, idx = tf.unique_with_counts(in1)\n    return idx",
            "def transform(in1):\n    return tf.argsort(tf.argsort(in1))",
            "def transform(in1):\n    _, _, counts = tf.unique_with_counts(in1)\n    return tf.cast(counts-1, tf.int32)",
            "def transform(in1):\n    _, indices, _ = tf.unique_with_counts(in1)\n    return indices",
            "def transform(in1):\n    _, indices, _ = tf.unique_with_counts(in1)\n    return indices",
            "def transform(in1):\n    _, indices = tf.unique_with_counts(in1)\n    return indices",
            "def transform(in1):\n    _, _, idx = tf.unique_with_counts(in1)\n    return idx",
            "def transform(in1):\n    _, indices = tf.unique_with_counts(in1)\n    return indices",
            "def transform(in1):\n    _, indices, _ = tf.unique_with_counts(in1)\n    return indices",
            "def transform(in1):\n    _, indices = tf.unique_with_counts(in1)\n    return indices",
            "def transform(in1):\n    _, _, idx = tf.unique_with_counts(in1)\n    return idx",
            "def transform(in1):\n    _, indices = tf.unique_with_counts(in1)\n    return indices",
            "def transform(in1):\n    return tf.math.floormod(tf.argsort(tf.argsort(in1)), tf.shape(in1)[0])",
            "def transform(in1):\n    _, _, counts = tf.unique_with_counts(in1)\n    return counts - 1"
        ],
        "tf_operators": {
            "tf.unique_with_counts": 26,
            "tf.argsort": 5,
            "tf.searchsorted": 1,
            "tf.gather": 1,
            "tf.int32": 1,
            "tf.cast": 1,
            "tf.shape": 1,
            "tf.math.floormod": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 1,
        "total_in_target": 1,
        "parsed_constants": [
            [],
            [],
            [],
            [],
            [],
            [
                1
            ],
            [],
            [],
            [
                1
            ],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [
                1
            ],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [
                0
            ],
            [
                1
            ]
        ],
        "all_constants": [
            0,
            1
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 1,
            "tf_bool": 0,
            "axis": 0,
            "common": 5,
            "tf_float32": 0,
            "shape_tuple": 0,
            "shape": 0,
            "tf_int64": 0,
            "provided": 0,
            "input_var": 48
        }
    },
    {
        "name": "stackoverflow_10",
        "description": "perform matrix multiplication",
        "target_program": "tf.matmul(tf.expand_dims(in1, -1), tf.expand_dims(in2, 1))",
        "source": "https://stackoverflow.com/questions/53094212/tensorflow-sxn-matrix-multiply-with-sxd-matrix-to-output-sxnxd-array",
        "constants": "[]",
        "examples": {
            "inputs": "[[[15, 10], [20, -5]],[[2, 3, 1], [-2, 5, 0]],]",
            "outputs": "[[[30, 45, 15], [20, 30, 10]],[[-40, 100, 0], [10, -25, 0]]]"
        },
        "completions": [
            "```python\ndef transform(in1, in2):\n    return tf.matmul(tf.expand_dims(in1, axis=1), tf.expand_dims(in2, axis=0))\n```",
            "```python\n    return tf.matmul(tf.expand_dims(in1, 2), tf.expand_dims(in2, 0))\n```",
            "```python\n    return tf.matmul(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))\n```",
            "```python\n    return tf.matmul(in1, in2)\n```",
            "```\n    return tf.matmul(in1, in2)\n```",
            "```python\n    return tf.matmul(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))\n```",
            "```python\n    return tf.matmul(in1, in2)\n```",
            "```python\n    return tf.matmul(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))\n```",
            "```\n    return tf.matmul(in1, in2)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.matmul(tf.expand_dims(in1, axis=2), tf.expand_dims(in2, axis=0))\n```",
            "```python\n    return tf.matmul(tf.expand_dims(in1, axis=1), tf.expand_dims(in2, axis=0))\n```",
            "```python\n    return tf.matmul(tf.expand_dims(in1, axis=1), tf.expand_dims(in2, axis=0))\n```",
            "```python\n    return tf.matmul(tf.expand_dims(in1, axis=1), tf.expand_dims(in2, axis=0))\n```",
            "```\ndef transform(in1, in2):\n    return tf.matmul(in1, in2)\n```",
            "```python\n    return tf.matmul(tf.expand_dims(in1, -1), tf.expand_dims(in2, 0))\n```",
            "```python\nreturn tf.matmul(in1, in2)\n```",
            "```python\n    return tf.matmul(tf.expand_dims(in1, 0), tf.expand_dims(in2, 0))\n```",
            "```python\nreturn tf.matmul(tf.expand_dims(in1, axis=1), tf.expand_dims(in2, axis=0))\n```",
            "```python\n    return tf.matmul(tf.expand_dims(in1, axis=1), tf.expand_dims(in2, axis=0))\n```",
            "```python\n    return tf.matmul(in1, in2)\n```",
            "```python\n    return tf.matmul(in1, in2)\n```",
            "```python\nreturn tf.matmul(tf.expand_dims(in1, 0), tf.expand_dims(in2, 0))\n```",
            "```python\n    return tf.matmul(tf.expand_dims(in1, -1), tf.expand_dims(in2, 0))\n```",
            "```python\n    return tf.matmul(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))\n```",
            "```python\n    return tf.matmul(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))\n```",
            "```python\n    return tf.matmul(in1, in2)\n```",
            "def transform(in1, in2):\n    return tf.matmul(in1, in2)",
            "```python\ndef transform(in1, in2):\n    return tf.matmul(in1, in2)\n```",
            "```python\nreturn tf.matmul(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))\n```"
        ],
        "normalized_completions": [
            "def transform(in1, in2):\n    return tf.matmul(tf.expand_dims(in1, axis=1), tf.expand_dims(in2, axis=0))",
            "def transform(in1, in2):\n    return tf.matmul(tf.expand_dims(in1, 2), tf.expand_dims(in2, 0))",
            "def transform(in1, in2):\n    return tf.matmul(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))",
            "def transform(in1, in2):\n    return tf.matmul(in1, in2)",
            "def transform(in1, in2):\n    return tf.matmul(in1, in2)",
            "def transform(in1, in2):\n    return tf.matmul(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))",
            "def transform(in1, in2):\n    return tf.matmul(in1, in2)",
            "def transform(in1, in2):\n    return tf.matmul(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))",
            "def transform(in1, in2):\n    return tf.matmul(in1, in2)",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "def transform(in1, in2):\n    return tf.matmul(tf.expand_dims(in1, axis=2), tf.expand_dims(in2, axis=0))",
            "def transform(in1, in2):\n    return tf.matmul(tf.expand_dims(in1, axis=1), tf.expand_dims(in2, axis=0))",
            "def transform(in1, in2):\n    return tf.matmul(tf.expand_dims(in1, axis=1), tf.expand_dims(in2, axis=0))",
            "def transform(in1, in2):\n    return tf.matmul(tf.expand_dims(in1, axis=1), tf.expand_dims(in2, axis=0))",
            "def transform(in1, in2):\n    return tf.matmul(in1, in2)",
            "def transform(in1, in2):\n    return tf.matmul(tf.expand_dims(in1, -1), tf.expand_dims(in2, 0))",
            "def transform(in1, in2):\n    return tf.matmul(in1, in2)",
            "def transform(in1, in2):\n    return tf.matmul(tf.expand_dims(in1, 0), tf.expand_dims(in2, 0))",
            "def transform(in1, in2):\n    return tf.matmul(tf.expand_dims(in1, axis=1), tf.expand_dims(in2, axis=0))",
            "def transform(in1, in2):\n    return tf.matmul(tf.expand_dims(in1, axis=1), tf.expand_dims(in2, axis=0))",
            "def transform(in1, in2):\n    return tf.matmul(in1, in2)",
            "def transform(in1, in2):\n    return tf.matmul(in1, in2)",
            "def transform(in1, in2):\n    return tf.matmul(tf.expand_dims(in1, 0), tf.expand_dims(in2, 0))",
            "def transform(in1, in2):\n    return tf.matmul(tf.expand_dims(in1, -1), tf.expand_dims(in2, 0))",
            "def transform(in1, in2):\n    return tf.matmul(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))",
            "def transform(in1, in2):\n    return tf.matmul(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))",
            "def transform(in1, in2):\n    return tf.matmul(in1, in2)",
            "def transform(in1, in2):\n    return tf.matmul(in1, in2)",
            "def transform(in1, in2):\n    return tf.matmul(in1, in2)",
            "def transform(in1, in2):\n    return tf.matmul(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))"
        ],
        "tf_operators": {
            "tf.expand_dims": 18,
            "tf.matmul": 29,
            "tf.tensordot": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 2,
        "total_in_target": 2,
        "parsed_constants": [
            [
                1,
                0
            ],
            [
                2,
                0
            ],
            [
                1,
                0
            ],
            [],
            [],
            [
                1,
                0
            ],
            [],
            [
                1,
                0
            ],
            [],
            [
                1
            ],
            [
                2,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [],
            [
                -1,
                0
            ],
            [],
            [
                0,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [],
            [],
            [
                0,
                0
            ],
            [
                -1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [],
            [],
            [],
            [
                1,
                0
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            -1
        ],
        "constant_counts": [
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 0,
            "tf_bool": 0,
            "axis": 2,
            "common": 35,
            "tf_float32": 0,
            "shape_tuple": 0,
            "shape": 0,
            "tf_int64": 0,
            "provided": 0,
            "input_var": 60
        }
    },
    {
        "name": "stackoverflow_11",
        "description": "count the number of occurences of each distinct number",
        "target_program": "tf.math.bincount(in1)",
        "source": "https://stackoverflow.com/questions/45194672/how-to-count-elements-in-tensorflow-tensor",
        "constants": "[]",
        "examples": {
            "inputs": "[[4, 0, 1, 1, 0, 4, 0, 0, 3, 4, 1],]",
            "outputs": "[4, 3, 0, 1, 3]"
        },
        "completions": [
            "```python\n    return tf.math.bincount(in1)\n```",
            "```python\ndef transform(in1):\n    unique, _, count = tf.unique_with_counts(in1)\n    return tf.math.bincount(in1)\n```",
            "```\n    return tf.math.bincount(in1)\n```",
            "```\n    return tf.math.bincount(in1)\n```",
            "```python\n    return tf.math.bincount(in1)\n```",
            "```python\ndef transform(in1):\n    return tf.math.bincount(in1)\n```",
            "```python\ndef transform(in1):\n    return tf.math.bincount(in1)\n```",
            "```python\n    return tf.math.bincount(in1)\n```",
            "```\n    return tf.math.bincount(in1)\n```",
            "```python\n    return tf.math.bincount(in1)\n```",
            "```python\ndef transform(in1):\n    return tf.math.bincount(in1)\n```",
            "```python\n    return tf.math.bincount(in1)\n```",
            "```python\ndef transform(in1):\n    return tf.math.bincount(in1)\n```",
            "```python\n    return tf.math.bincount(in1)\n```",
            "```python\n    return tf.math.bincount(in1)\n```",
            "```python\ndef transform(in1):\n    return tf.math.bincount(in1)\n```",
            "```python\n    return tf.math.bincount(in1)\n```",
            "```python\n    return tf.math.bincount(in1)\n```",
            "```python\n    return tf.math.bincount(in1)\n```",
            "```python\n    return tf.math.bincount(in1)\n```",
            "```python\n    return tf.math.bincount(in1)\n```",
            "```\n    return tf.math.bincount(in1)\n```",
            "```python\n    return tf.math.bincount(in1)\n```",
            "```python\n    return tf.math.bincount(in1)\n```",
            "```\n    return tf.math.bincount(in1)\n```",
            "```python\n    return tf.math.bincount(in1)\n```",
            "```python\n    return tf.math.bincount(in1)\n```",
            "```python\n    return tf.math.bincount(in1)\n```",
            "```\n    return tf.math.bincount(in1)\n```",
            "```\n    return tf.math.bincount(in1)\n```"
        ],
        "normalized_completions": [
            "def transform(in1):\n    return tf.math.bincount(in1)",
            "def transform(in1):\n    unique, _, count = tf.unique_with_counts(in1)\n    return tf.math.bincount(in1)",
            "def transform(in1):\n    return tf.math.bincount(in1)",
            "def transform(in1):\n    return tf.math.bincount(in1)",
            "def transform(in1):\n    return tf.math.bincount(in1)",
            "def transform(in1):\n    return tf.math.bincount(in1)",
            "def transform(in1):\n    return tf.math.bincount(in1)",
            "def transform(in1):\n    return tf.math.bincount(in1)",
            "def transform(in1):\n    return tf.math.bincount(in1)",
            "def transform(in1):\n    return tf.math.bincount(in1)",
            "def transform(in1):\n    return tf.math.bincount(in1)",
            "def transform(in1):\n    return tf.math.bincount(in1)",
            "def transform(in1):\n    return tf.math.bincount(in1)",
            "def transform(in1):\n    return tf.math.bincount(in1)",
            "def transform(in1):\n    return tf.math.bincount(in1)",
            "def transform(in1):\n    return tf.math.bincount(in1)",
            "def transform(in1):\n    return tf.math.bincount(in1)",
            "def transform(in1):\n    return tf.math.bincount(in1)",
            "def transform(in1):\n    return tf.math.bincount(in1)",
            "def transform(in1):\n    return tf.math.bincount(in1)",
            "def transform(in1):\n    return tf.math.bincount(in1)",
            "def transform(in1):\n    return tf.math.bincount(in1)",
            "def transform(in1):\n    return tf.math.bincount(in1)",
            "def transform(in1):\n    return tf.math.bincount(in1)",
            "def transform(in1):\n    return tf.math.bincount(in1)",
            "def transform(in1):\n    return tf.math.bincount(in1)",
            "def transform(in1):\n    return tf.math.bincount(in1)",
            "def transform(in1):\n    return tf.math.bincount(in1)",
            "def transform(in1):\n    return tf.math.bincount(in1)",
            "def transform(in1):\n    return tf.math.bincount(in1)"
        ],
        "tf_operators": {
            "tf.math.bincount": 30,
            "tf.unique_with_counts": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 1,
        "total_in_target": 1,
        "parsed_constants": [
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            []
        ],
        "all_constants": [],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 0,
            "tf_bool": 0,
            "axis": 0,
            "common": 0,
            "tf_float32": 0,
            "shape_tuple": 0,
            "shape": 0,
            "tf_int64": 0,
            "provided": 0,
            "input_var": 31
        }
    },
    {
        "name": "stackoverflow_12",
        "description": "remove a column from the tensor",
        "target_program": "tf.gather(in1, (0, 2), axis=1, batch_dims=0)",
        "source": "https://stackoverflow.com/questions/47447183/remove-a-set-of-tensors-from-a-tensor-in-tensorflow",
        "constants": "[0, 1, 2]",
        "examples": {
            "inputs": "[[[12, 34, 56], [33, 22, 11]]]",
            "outputs": "[[12, 56], [33, 11]]"
        },
        "completions": [
            "```python\ndef transform(in1):\n    return tf.concat([tf.gather(in1, [0], axis=1), tf.gather(in1, [2], axis=1)], axis=1)\n```",
            "```python\ndef transform(in1):\n    return tf.gather(in1, [0, 2], axis=1)\n```",
            "```python\ndef transform(in1):\n    return tf.gather(in1, [0, 2], axis=1)\n```",
            "```python\ndef transform(in1):\n    return tf.gather(in1, [0, 2], axis=1)\n```",
            "```python\ndef transform(in1):\n    return tf.gather(in1, [0, 2], axis=1)\n```",
            "```python\nreturn tf.gather(in1, [0, 2], axis=1)\n```",
            "```python\ndef transform(in1):\n    return tf.gather(in1, [0, 2], axis=1)\n```",
            "```python\ndef transform(in1):\n    return tf.gather(in1, [0, 2], axis=1)\n```",
            "```python\ndef transform(in1):\n    return tf.gather(in1, [0, 2], axis=1)\n```",
            "```python\n    return tf.gather(in1, [0, 2], axis=1)\n```",
            "```python\ndef transform(in1):\n    return tf.gather(in1, [0, 2], axis=1)\n```",
            "```python\ndef transform(in1):\n    return tf.gather(in1, [0, 2], axis=1)\n```",
            "```python\ndef transform(in1):\n    return tf.gather(in1, [0, 2], axis=1)\n```",
            "```python\ndef transform(in1):\n    return tf.gather(in1, [0, 2], axis=1)\n```",
            "```python\ndef transform(in1):\n    return tf.gather(in1, [0, 2], axis=1)\n```",
            "```python\ndef transform(in1):\n    return tf.transpose(tf.gather(tf.transpose(in1), [0, 2]))\n```",
            "```python\ndef transform(in1):\n    return tf.gather(in1, [0, 2], axis=1)\n```",
            "```python\ndef transform(in1):\n    return tf.gather(in1, [0, 2], axis=1)\n```",
            "```python\ndef transform(in1):\n    return tf.gather(in1, [0, 2], axis=1)\n```",
            "```python\ndef transform(in1):\n    return tf.gather(in1, [0, 2], axis=1)\n```",
            "```python\n    return tf.gather(in1, [0, 2], axis=1)\n```",
            "```python\ndef transform(in1):\n    return tf.gather(in1, [0, 2], axis=1)\n```",
            "```python\ndef transform(in1):\n    return tf.gather(in1, [0, 2], axis=1)\n```",
            "```python\ndef transform(in1):\n    return tf.gather(in1, [0, 2], axis=1)\n```",
            "```python\ndef transform(in1):\n    return tf.gather(in1, [0, 2], axis=1)\n```",
            "```python\ndef transform(in1):\n    return tf.gather(in1, [0, 2], axis=1)\n```",
            "```python\ndef transform(in1):\n    return tf.gather(in1, [0, 2], axis=1)\n```",
            "```python\ndef transform(in1):\n    return tf.gather(in1, [0, 2], axis=1)\n```",
            "```python\ndef transform(in1):\n    return tf.gather(in1, [0, 2], axis=1)\n```",
            "```python\n    return tf.gather(in1, [0, 2], axis=1)\n```"
        ],
        "normalized_completions": [
            "def transform(in1):\n    return tf.concat([tf.gather(in1, [0], axis=1), tf.gather(in1, [2], axis=1)], axis=1)",
            "def transform(in1):\n    return tf.gather(in1, [0, 2], axis=1)",
            "def transform(in1):\n    return tf.gather(in1, [0, 2], axis=1)",
            "def transform(in1):\n    return tf.gather(in1, [0, 2], axis=1)",
            "def transform(in1):\n    return tf.gather(in1, [0, 2], axis=1)",
            "def transform(in1):\n    return tf.gather(in1, [0, 2], axis=1)",
            "def transform(in1):\n    return tf.gather(in1, [0, 2], axis=1)",
            "def transform(in1):\n    return tf.gather(in1, [0, 2], axis=1)",
            "def transform(in1):\n    return tf.gather(in1, [0, 2], axis=1)",
            "def transform(in1):\n    return tf.gather(in1, [0, 2], axis=1)",
            "def transform(in1):\n    return tf.gather(in1, [0, 2], axis=1)",
            "def transform(in1):\n    return tf.gather(in1, [0, 2], axis=1)",
            "def transform(in1):\n    return tf.gather(in1, [0, 2], axis=1)",
            "def transform(in1):\n    return tf.gather(in1, [0, 2], axis=1)",
            "def transform(in1):\n    return tf.gather(in1, [0, 2], axis=1)",
            "def transform(in1):\n    return tf.transpose(tf.gather(tf.transpose(in1), [0, 2]))",
            "def transform(in1):\n    return tf.gather(in1, [0, 2], axis=1)",
            "def transform(in1):\n    return tf.gather(in1, [0, 2], axis=1)",
            "def transform(in1):\n    return tf.gather(in1, [0, 2], axis=1)",
            "def transform(in1):\n    return tf.gather(in1, [0, 2], axis=1)",
            "def transform(in1):\n    return tf.gather(in1, [0, 2], axis=1)",
            "def transform(in1):\n    return tf.gather(in1, [0, 2], axis=1)",
            "def transform(in1):\n    return tf.gather(in1, [0, 2], axis=1)",
            "def transform(in1):\n    return tf.gather(in1, [0, 2], axis=1)",
            "def transform(in1):\n    return tf.gather(in1, [0, 2], axis=1)",
            "def transform(in1):\n    return tf.gather(in1, [0, 2], axis=1)",
            "def transform(in1):\n    return tf.gather(in1, [0, 2], axis=1)",
            "def transform(in1):\n    return tf.gather(in1, [0, 2], axis=1)",
            "def transform(in1):\n    return tf.gather(in1, [0, 2], axis=1)",
            "def transform(in1):\n    return tf.gather(in1, [0, 2], axis=1)"
        ],
        "tf_operators": {
            "tf.gather": 30,
            "tf.concat": 1,
            "tf.transpose": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 1,
        "total_in_target": 1,
        "parsed_constants": [
            [
                0,
                1,
                2,
                1,
                1
            ],
            [
                0,
                2,
                1
            ],
            [
                0,
                2,
                1
            ],
            [
                0,
                2,
                1
            ],
            [
                0,
                2,
                1
            ],
            [
                0,
                2,
                1
            ],
            [
                0,
                2,
                1
            ],
            [
                0,
                2,
                1
            ],
            [
                0,
                2,
                1
            ],
            [
                0,
                2,
                1
            ],
            [
                0,
                2,
                1
            ],
            [
                0,
                2,
                1
            ],
            [
                0,
                2,
                1
            ],
            [
                0,
                2,
                1
            ],
            [
                0,
                2,
                1
            ],
            [
                0,
                2
            ],
            [
                0,
                2,
                1
            ],
            [
                0,
                2,
                1
            ],
            [
                0,
                2,
                1
            ],
            [
                0,
                2,
                1
            ],
            [
                0,
                2,
                1
            ],
            [
                0,
                2,
                1
            ],
            [
                0,
                2,
                1
            ],
            [
                0,
                2,
                1
            ],
            [
                0,
                2,
                1
            ],
            [
                0,
                2,
                1
            ],
            [
                0,
                2,
                1
            ],
            [
                0,
                2,
                1
            ],
            [
                0,
                2,
                1
            ],
            [
                0,
                2,
                1
            ]
        ],
        "all_constants": [
            0,
            1,
            2
        ],
        "constant_counts": [
            {
                "common": 4,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 0,
            "tf_bool": 0,
            "axis": 30,
            "common": 61,
            "tf_float32": 0,
            "shape_tuple": 0,
            "shape": 0,
            "tf_int64": 0,
            "provided": 0,
            "input_var": 31
        }
    },
    {
        "name": "stackoverflow_13",
        "description": "multiply vectors by tensor",
        "target_program": "tf.tensordot(in1, in2, (1, 1))",
        "source": "https://stackoverflow.com/questions/50777704/n-d-tensor-matrix-multiplication-with-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[[3, 5], [10, 2]],[[[1, 0], [5, 4]], [[3, 10], [2, -2]]],]",
            "outputs": "[[[28, 20], [19, 20]], [[20, 8], [34, 96]]]"
        },
        "completions": [
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=[1, 1])",
            "```python\n    return tf.matmul(in2, tf.expand_dims(in1, -1))[:, :, 0]\n```",
            "```python\n    return tf.tensordot(in2, in1, axes=1)\n```",
            "```python\n    return tf.matmul(in2, tf.expand_dims(in1, -1))[..., 0]\n```",
            "```python\n    return tf.matmul(in2, tf.expand_dims(in1, 2))\n```",
            "```python\n    return tf.matmul(in2, tf.transpose(in1))\n```",
            "```python\n    return tf.matmul(in2, tf.expand_dims(in1,-1))[:, :, 0]\n```",
            "```python\n    return tf.tensordot(in2, in1, axes=[[2], [1]])\n```",
            "```python\n    return tf.reduce_sum(tf.expand_dims(in1, -1) * tf.expand_dims(in2, 0), axis=2)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[[1], [1]])\n```",
            "```python\n    return tf.matmul(in1, tf.transpose(in2, perm=[0, 2, 1]))\n```",
            "```\n    return tf.matmul(tf.cast(in2, tf.float32), tf.transpose(in1))\n```",
            "```python\n    return tf.matmul(in2, tf.transpose(in1))\n```",
            "```python\n    return tf.matmul(in2, tf.expand_dims(in1, 2))\n```",
            "```python\n    return tf.matmul(in2, tf.expand_dims(in1, 2))\n```",
            "def transform(in1, in2):\n    return tf.matmul(in1, in2)",
            "```python\n    return tf.tensordot(in1, in2, axes=[[1], [0]])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[[1], [1]])\n```",
            "```python\n    return tf.matmul(in1, in2)\n```",
            "```python\n    return tf.multiply(in2, tf.expand_dims(in1, -1))\n```",
            "```python\n    a = tf.tensordot(in1, in2, axes=1)\n    return a\n```",
            "```python\n    return tf.matmul(in2, tf.expand_dims(in1, -1))[..., 0]\n```",
            "```python\n    return tf.tensordot(in2, in1, axes=[[2], [1]])\n```",
            "```python\n    return tf.matmul(in1, in2)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.matmul(in2, tf.transpose(in1))\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.matmul(in1, tf.transpose(in2, [0, 2, 1]))\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```"
        ],
        "normalized_completions": [
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=[1, 1])",
            "def transform(in1, in2):\n    return tf.matmul(in2, tf.expand_dims(in1, -1))[:, :, 0]",
            "def transform(in1, in2):\n    return tf.tensordot(in2, in1, axes=1)",
            "def transform(in1, in2):\n    return tf.matmul(in2, tf.expand_dims(in1, -1))[..., 0]",
            "def transform(in1, in2):\n    return tf.matmul(in2, tf.expand_dims(in1, 2))",
            "def transform(in1, in2):\n    return tf.matmul(in2, tf.transpose(in1))",
            "def transform(in1, in2):\n    return tf.matmul(in2, tf.expand_dims(in1,-1))[:, :, 0]",
            "def transform(in1, in2):\n    return tf.tensordot(in2, in1, axes=[[2], [1]])",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.expand_dims(in1, -1) * tf.expand_dims(in2, 0), axis=2)",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=[[1], [1]])",
            "def transform(in1, in2):\n    return tf.matmul(in1, tf.transpose(in2, perm=[0, 2, 1]))",
            "def transform(in1, in2):\n    return tf.matmul(tf.cast(in2, tf.float32), tf.transpose(in1))",
            "def transform(in1, in2):\n    return tf.matmul(in2, tf.transpose(in1))",
            "def transform(in1, in2):\n    return tf.matmul(in2, tf.expand_dims(in1, 2))",
            "def transform(in1, in2):\n    return tf.matmul(in2, tf.expand_dims(in1, 2))",
            "def transform(in1, in2):\n    return tf.matmul(in1, in2)",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=[[1], [0]])",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=[[1], [1]])",
            "def transform(in1, in2):\n    return tf.matmul(in1, in2)",
            "def transform(in1, in2):\n    return tf.multiply(in2, tf.expand_dims(in1, -1))",
            "def transform(in1, in2):\n    a = tf.tensordot(in1, in2, axes=1)\n    return a",
            "def transform(in1, in2):\n    return tf.matmul(in2, tf.expand_dims(in1, -1))[..., 0]",
            "def transform(in1, in2):\n    return tf.tensordot(in2, in1, axes=[[2], [1]])",
            "def transform(in1, in2):\n    return tf.matmul(in1, in2)",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "def transform(in1, in2):\n    return tf.matmul(in2, tf.transpose(in1))",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "def transform(in1, in2):\n    return tf.matmul(in1, tf.transpose(in2, [0, 2, 1]))",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)"
        ],
        "tf_operators": {
            "tf.tensordot": 12,
            "tf.expand_dims": 9,
            "tf.matmul": 16,
            "tf.transpose": 6,
            "tf.reduce_sum": 1,
            "tf.float32": 1,
            "tf.cast": 1,
            "tf.multiply": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 1,
        "total_in_target": 1,
        "parsed_constants": [
            [
                1,
                1
            ],
            [
                -1,
                0
            ],
            [
                1
            ],
            [
                -1,
                0
            ],
            [
                2
            ],
            [],
            [
                -1,
                0
            ],
            [
                2,
                1
            ],
            [
                -1,
                0,
                2
            ],
            [
                1,
                1
            ],
            [
                0,
                2,
                1
            ],
            [],
            [],
            [
                2
            ],
            [
                2
            ],
            [],
            [
                1,
                0
            ],
            [
                1,
                1
            ],
            [],
            [
                -1
            ],
            [
                1
            ],
            [
                -1,
                0
            ],
            [
                2,
                1
            ],
            [],
            [
                1
            ],
            [],
            [
                1
            ],
            [
                0,
                2,
                1
            ],
            [
                1
            ],
            [
                1
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            -1
        ],
        "constant_counts": [
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 0,
            "tf_bool": 0,
            "axis": 8,
            "common": 27,
            "tf_float32": 1,
            "shape_tuple": 0,
            "shape": 0,
            "tf_int64": 0,
            "provided": 0,
            "input_var": 60
        }
    },
    {
        "name": "stackoverflow_14",
        "description": "choose True if any value in a row is True, False otherwise",
        "target_program": "tf.reduce_any(in1, axis=-1)",
        "source": "https://stackoverflow.com/questions/35657003/aggregate-each-element-of-tensor-in-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[[[False, False, True],  [False, False, False],  [True, False, True],  [False, True, False],  [False, False, False],  [True, True, True],  [True, True, False]]],]",
            "outputs": "[[True, False, True, True, False, True, True]]"
        },
        "completions": [
            "def transform(in1):\n    return tf.reduce_any(in1, axis=2)",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=2)",
            "```python\n    return tf.reduce_any(in1, axis=2)\n```",
            "```python\ndef transform(in1):\n    return tf.reduce_any(in1, axis=2)\n```",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=-1)",
            "```python\ndef transform(in1):\n    return tf.reduce_any(in1, axis=2)\n```",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=1)",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=2)",
            "```python\ndef transform(in1):\n    return tf.reduce_any(in1, axis=2)\n```",
            "```python\n    return tf.expand_dims(tf.reduce_any(in1, axis=1), axis=0)\n```",
            "```python\n    return tf.reduce_any(in1, axis=2)\n```",
            "def transform(in1):\n    return tf.expand_dims(tf.reduce_any(in1, axis=2), 0)",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=2)",
            "```\n    return tf.reduce_any(in1, axis=2)\n```",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=2)",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=2)",
            "```python\n    return tf.reduce_any(in1, axis=2)\n```",
            "def transform(in1):\n    return tf.expand_dims(tf.reduce_any(in1, axis=-1), 0)",
            "```python\ndef transform(in1):\n    return tf.reduce_any(in1, axis=2)\n```",
            "```python\ndef transform(in1):\n    return tf.reduce_any(in1, axis=2)\n```",
            "```python\ndef transform(in1):\n    return tf.expand_dims(tf.reduce_any(in1, axis=2), axis=0)\n```",
            "```python\ndef transform(in1):\n    return tf.reduce_any(in1, axis=2)\n```",
            "```python\ndef transform(in1):\n    return tf.reduce_any(in1, axis=2)\n```",
            "```python\ndef transform(in1):\n    return tf.reduce_any(in1, axis=2)\n```",
            "```python\ndef transform(in1):\n    return tf.reduce_any(in1, axis=2)\n```",
            "```python\ndef transform(in1):\n    return tf.expand_dims(tf.reduce_any(in1, axis=2), 0)\n```",
            "```\n    return tf.reduce_any(in1, axis=2)\n```",
            "```python\ndef transform(in1):\n    return tf.reduce_any(in1, axis=2)\n```",
            "```python\ndef transform(in1):\n    return tf.reduce_any(in1, axis=2)\n```",
            "```python\ndef transform(in1):\n    return tf.expand_dims(tf.reduce_any(in1, axis=2), axis=1)\n```"
        ],
        "normalized_completions": [
            "def transform(in1):\n    return tf.reduce_any(in1, axis=2)",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=2)",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=2)",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=2)",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=-1)",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=2)",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=1)",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=2)",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=2)",
            "def transform(in1):\n    return tf.expand_dims(tf.reduce_any(in1, axis=1), axis=0)",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=2)",
            "def transform(in1):\n    return tf.expand_dims(tf.reduce_any(in1, axis=2), 0)",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=2)",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=2)",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=2)",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=2)",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=2)",
            "def transform(in1):\n    return tf.expand_dims(tf.reduce_any(in1, axis=-1), 0)",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=2)",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=2)",
            "def transform(in1):\n    return tf.expand_dims(tf.reduce_any(in1, axis=2), axis=0)",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=2)",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=2)",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=2)",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=2)",
            "def transform(in1):\n    return tf.expand_dims(tf.reduce_any(in1, axis=2), 0)",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=2)",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=2)",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=2)",
            "def transform(in1):\n    return tf.expand_dims(tf.reduce_any(in1, axis=2), axis=1)"
        ],
        "tf_operators": {
            "tf.reduce_any": 30,
            "tf.expand_dims": 6
        },
        "coverage_percentage": 100.0,
        "total_covered": 1,
        "total_in_target": 1,
        "parsed_constants": [
            [
                2
            ],
            [
                2
            ],
            [
                2
            ],
            [
                2
            ],
            [
                -1
            ],
            [
                2
            ],
            [
                1
            ],
            [
                2
            ],
            [
                2
            ],
            [
                1,
                0
            ],
            [
                2
            ],
            [
                2,
                0
            ],
            [
                2
            ],
            [
                2
            ],
            [
                2
            ],
            [
                2
            ],
            [
                2
            ],
            [
                -1,
                0
            ],
            [
                2
            ],
            [
                2
            ],
            [
                2,
                0
            ],
            [
                2
            ],
            [
                2
            ],
            [
                2
            ],
            [
                2
            ],
            [
                2,
                0
            ],
            [
                2
            ],
            [
                2
            ],
            [
                2
            ],
            [
                2,
                1
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            -1
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 0,
            "tf_bool": 0,
            "axis": 26,
            "common": 10,
            "tf_float32": 0,
            "shape_tuple": 0,
            "shape": 0,
            "tf_int64": 0,
            "provided": 0,
            "input_var": 30
        }
    },
    {
        "name": "stackoverflow_15",
        "description": "set all instances of 1 to 0",
        "target_program": "tf.subtract(in1, tf.cast(tf.equal(in1, tf.constant(1)), tf.int32))",
        "source": "https://stackoverflow.com/questions/39045797/conditional-assignment-of-tensor-values-in-tensorflow",
        "constants": "[0, 1]",
        "examples": {
            "inputs": "[[3, 1, 2, 0, 1, -1, 10, 1, -10],]",
            "outputs": "[3, 0, 2, 0, 0, -1, 10, 0, -10]"
        },
        "completions": [
            "```python\n    return tf.where(tf.equal(in1, 1), 0, in1)\n```",
            "```python\nreturn tf.where(tf.equal(in1, 1), 0, in1)\n```",
            "```python\n    return tf.where(tf.equal(in1, 1), 0, in1)\n```",
            "```python\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n```",
            "```python\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n```",
            "```python\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n```",
            "```python\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n```",
            "```python\n    return tf.where(tf.equal(in1, 1), 0, in1)\n```",
            "```python\n    return tf.where(tf.equal(in1, 1), tf.constant(0, in1.dtype), in1)\n```",
            "```python\n    return tf.where(tf.equal(in1, 1), 0, in1)\n```",
            "```python\n    return tf.where(tf.equal(in1, 1), tf.constant(0, dtype=in1.dtype), in1)\n```",
            "```python\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n```",
            "```python\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n```",
            "```python\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n```",
            "```python\n    return tf.where(tf.equal(in1, 1), 0, in1)\n```",
            "```python\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n```",
            "```python\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n```",
            "```python\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n```",
            "```python\n    return tf.where(tf.equal(in1, 1), 0, in1)\n```",
            "```python\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n```",
            "```python\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n```",
            "```python\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n```",
            "```python\n    return tf.where(tf.equal(in1, 1), 0, in1)\n```",
            "```python\n    return tf.where(tf.equal(in1, 1), 0, in1)\n```",
            "```python\n    return tf.where(tf.equal(in1, 1), 0, in1)\n```",
            "```python\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n```",
            "```python\n    return tf.where(tf.equal(in1, 1), 0, in1)\n```",
            "```python\n    return tf.where(tf.equal(in1, 1), 0, in1)\n```",
            "```python\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n```",
            "```python\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n```"
        ],
        "normalized_completions": [
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), 0, in1)",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), 0, in1)",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), 0, in1)",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), 0, in1)",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), tf.constant(0, in1.dtype), in1)",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), 0, in1)",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), tf.constant(0, dtype=in1.dtype), in1)",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), 0, in1)",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), 0, in1)",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), 0, in1)",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), 0, in1)",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), 0, in1)",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), 0, in1)",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), 0, in1)",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)"
        ],
        "tf_operators": {
            "tf.equal": 30,
            "tf.where": 30,
            "tf.zeros_like": 16,
            "tf.constant": 2
        },
        "coverage_percentage": 40.0,
        "total_covered": 2,
        "total_in_target": 5,
        "parsed_constants": [
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1
            ]
        ],
        "all_constants": [
            0,
            1
        ],
        "constant_counts": [
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 0,
            "tf_bool": 0,
            "axis": 0,
            "common": 44,
            "tf_float32": 0,
            "shape_tuple": 0,
            "shape": 0,
            "tf_int64": 0,
            "provided": 0,
            "input_var": 76
        }
    },
    {
        "name": "stackoverflow_16",
        "description": "multiply tensors across the first axis",
        "target_program": "tf.multiply(in1, tf.expand_dims(in2, 1))",
        "source": "https://stackoverflow.com/questions/46240646/tensor-multiply-along-axis-in-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[[2, 5], [3, 0], [8, -7]],[4, 10, -6],]",
            "outputs": "[[8, 20], [30, 0], [-48, 42]]"
        },
        "completions": [
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, 1))\n```",
            "```python\n    return tf.multiply(tf.expand_dims(in2, 1), in1)\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, axis=1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, 1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, 1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, 1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, 1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, 1))\n```",
            "```python\n    return tf.multiply(tf.expand_dims(in2, 1), in1)\n```",
            "```\n    return tf.multiply(in1, tf.expand_dims(in2, 1))\n```",
            "```\n    return tf.multiply(in1, tf.expand_dims(in2, 1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, 1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, 1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, 1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, axis=1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, 1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, 1))\n```",
            "    return tf.multiply(in1, tf.expand_dims(in2, axis=1))",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, 1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, 1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, 1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, axis=1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, -1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, 1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, 1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, 1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, axis=1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, axis=1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, -1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, 1))\n```"
        ],
        "normalized_completions": [
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(in2, 1))",
            "def transform(in1, in2):\n    return tf.multiply(tf.expand_dims(in2, 1), in1)",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(in2, axis=1))",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(in2, 1))",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(in2, 1))",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(in2, 1))",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(in2, 1))",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(in2, 1))",
            "def transform(in1, in2):\n    return tf.multiply(tf.expand_dims(in2, 1), in1)",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(in2, 1))",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(in2, 1))",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(in2, 1))",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(in2, 1))",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(in2, 1))",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(in2, axis=1))",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(in2, 1))",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(in2, 1))",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(in2, axis=1))",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(in2, 1))",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(in2, 1))",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(in2, 1))",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(in2, axis=1))",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(in2, -1))",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(in2, 1))",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(in2, 1))",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(in2, 1))",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(in2, axis=1))",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(in2, axis=1))",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(in2, -1))",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(in2, 1))"
        ],
        "tf_operators": {
            "tf.expand_dims": 30,
            "tf.multiply": 30
        },
        "coverage_percentage": 100.0,
        "total_covered": 2,
        "total_in_target": 2,
        "parsed_constants": [
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                -1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                -1
            ],
            [
                1
            ]
        ],
        "all_constants": [
            1,
            -1
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 0,
            "tf_bool": 0,
            "axis": 0,
            "common": 30,
            "tf_float32": 0,
            "shape_tuple": 0,
            "shape": 0,
            "tf_int64": 0,
            "provided": 0,
            "input_var": 60
        }
    },
    {
        "name": "stackoverflow_17",
        "description": "duplicate each element of a tensor",
        "target_program": "tf.stack((in1, in1), axis=1)",
        "source": "https://stackoverflow.com/questions/51761353/about-tensor-of-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[17, -32, 99],]",
            "outputs": "[[17, 17], [-32, -32], [99, 99]]"
        },
        "completions": [
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 2, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, axis=1), 2, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 2, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 2, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 2, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 2, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 2, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), repeats=2, axis=1)\n```",
            "```python\n    return tf.reshape(tf.repeat(in1, 2), (-1, 2))\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, axis=1), repeats=2, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, axis=1), repeats=2, axis=1)\n```",
            "```python\n    return tf.expand_dims(in1, 1) * tf.ones((1, 2), dtype=in1.dtype)\n```",
            "```python\n    return tf.repeat(in1, 2, axis=0)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 2, axis=1)\n```",
            "```python\n    return tf.repeat(in1, repeats=2, axis=1)\n```",
            "```python\n    return tf.reshape(tf.repeat(in1, 2), (-1, 2))\n```",
            "```python\n    return tf.reshape(tf.repeat(in1, 2), [-1, 2])\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 2, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 2, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 2, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, axis=1), 2, axis=1)\n```",
            "```python\n    return tf.reshape(tf.repeat(in1, 2), (-1, 2))\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 2, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 2, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 2, axis=1)\n```",
            "```python\n    return tf.reshape(tf.repeat(in1, 2), (-1, 2))\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, axis=1), repeats=2, axis=1)\n```",
            "```python\n    return tf.repeat(in1, 2, axis=0)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, axis=1), 2, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 2, axis=1)\n```"
        ],
        "normalized_completions": [
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(in1, 1), 2, axis=1)",
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(in1, axis=1), 2, axis=1)",
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(in1, 1), 2, axis=1)",
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(in1, 1), 2, axis=1)",
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(in1, 1), 2, axis=1)",
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(in1, 1), 2, axis=1)",
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(in1, 1), 2, axis=1)",
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(in1, 1), repeats=2, axis=1)",
            "def transform(in1):\n    return tf.reshape(tf.repeat(in1, 2), (-1, 2))",
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(in1, axis=1), repeats=2, axis=1)",
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(in1, axis=1), repeats=2, axis=1)",
            "def transform(in1):\n    return tf.expand_dims(in1, 1) * tf.ones((1, 2), dtype=in1.dtype)",
            "def transform(in1):\n    return tf.repeat(in1, 2, axis=0)",
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(in1, 1), 2, axis=1)",
            "def transform(in1):\n    return tf.repeat(in1, repeats=2, axis=1)",
            "def transform(in1):\n    return tf.reshape(tf.repeat(in1, 2), (-1, 2))",
            "def transform(in1):\n    return tf.reshape(tf.repeat(in1, 2), [-1, 2])",
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(in1, 1), 2, axis=1)",
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(in1, 1), 2, axis=1)",
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(in1, 1), 2, axis=1)",
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(in1, axis=1), 2, axis=1)",
            "def transform(in1):\n    return tf.reshape(tf.repeat(in1, 2), (-1, 2))",
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(in1, 1), 2, axis=1)",
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(in1, 1), 2, axis=1)",
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(in1, 1), 2, axis=1)",
            "def transform(in1):\n    return tf.reshape(tf.repeat(in1, 2), (-1, 2))",
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(in1, axis=1), repeats=2, axis=1)",
            "def transform(in1):\n    return tf.repeat(in1, 2, axis=0)",
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(in1, axis=1), 2, axis=1)",
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(in1, 1), 2, axis=1)"
        ],
        "tf_operators": {
            "tf.expand_dims": 22,
            "tf.repeat": 29,
            "tf.reshape": 5,
            "tf.ones": 1
        },
        "coverage_percentage": 0.0,
        "total_covered": 0,
        "total_in_target": 1,
        "parsed_constants": [
            [
                1,
                2,
                1
            ],
            [
                1,
                2,
                1
            ],
            [
                1,
                2,
                1
            ],
            [
                1,
                2,
                1
            ],
            [
                1,
                2,
                1
            ],
            [
                1,
                2,
                1
            ],
            [
                1,
                2,
                1
            ],
            [
                1,
                2,
                1
            ],
            [
                2,
                -1,
                2
            ],
            [
                1,
                2,
                1
            ],
            [
                1,
                2,
                1
            ],
            [
                1,
                1,
                2
            ],
            [
                2,
                0
            ],
            [
                1,
                2,
                1
            ],
            [
                2,
                1
            ],
            [
                2,
                -1,
                2
            ],
            [
                2,
                -1,
                2
            ],
            [
                1,
                2,
                1
            ],
            [
                1,
                2,
                1
            ],
            [
                1,
                2,
                1
            ],
            [
                1,
                2,
                1
            ],
            [
                2,
                -1,
                2
            ],
            [
                1,
                2,
                1
            ],
            [
                1,
                2,
                1
            ],
            [
                1,
                2,
                1
            ],
            [
                2,
                -1,
                2
            ],
            [
                1,
                2,
                1
            ],
            [
                2,
                0
            ],
            [
                1,
                2,
                1
            ],
            [
                1,
                2,
                1
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            -1
        ],
        "constant_counts": [
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 0,
            "tf_bool": 0,
            "axis": 0,
            "common": 51,
            "tf_float32": 0,
            "shape_tuple": 0,
            "shape": 0,
            "tf_int64": 0,
            "provided": 30,
            "input_var": 30
        }
    },
    {
        "name": "stackoverflow_18",
        "description": "multiply 3D tensor and 2D tensor and add another tensor",
        "target_program": "tf.add(in3, tf.matmul(in1, in2))",
        "source": "https://stackoverflow.com/questions/38222126/tensorflow-efficient-way-for-tensor-multiplication",
        "constants": "[]",
        "examples": {
            "inputs": "[[[[1, 1, 1], [1, 0, 1]], [[1, 2, 3], [4, 5, 6]]], [[1, 1, 1, 1], [1, 2, 3, 4], [5, 6, 7, 8]], [100, 200, 300, 400],]",
            "outputs": "[[[107, 209, 311, 413], [106, 207, 308, 409]], [[118, 223, 328, 433], [139, 250, 361, 472]]]"
        },
        "completions": [
            "```python\n    return tf.add(tf.tensordot(in1, in2, axes=[[2], [0]]), in3)\n```",
            "```python\n    return tf.add(\n        tf.tensordot(in1, in2, axes=[[2], [0]]),\n        tf.expand_dims(in3, axis=0)\n    )\n```",
            "```python\n    return tf.add(tf.tensordot(in1, in2, axes=[[2], [0]]), in3)\n```",
            "```python\n    return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n```",
            "```python\n    return tf.add(tf.tensordot(in1, in2, axes=[[2], [0]]), in3)\n```",
            "```python\n    in4 = tf.matmul(in1, in2)\n    return tf.add(in4, in3)\n```",
            "```python\n    return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n```",
            "```python\n    return tf.add(tf.tensordot(in1, in2, axes=[[2], [0]]), in3)\n```",
            "```python\n    return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n```",
            "```python\n    return tf.add(tf.tensordot(in1, in2, axes=[[2], [0]]), in3)\n```",
            "```python\n    result = tf.add(tf.tensordot(in1, in2, axes=[[2], [0]]), in3)\n    return result\n```",
            "```python\n    return tf.add(\n        tf.tensordot(in1, in2, axes=[[2], [0]]),\n        tf.expand_dims(in3, 0)\n    )\n```",
            "```python\n    return tf.add(tf.tensordot(in1, in2, axes=[[2], [0]]), in3)\n```",
            "```python\n    res = tf.tensordot(in1, in2, axes=1)\n    return tf.add(res, in3)\n```",
            "```python\n    return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n```",
            "```python\n    return tf.add(\n        tf.tensordot(in1, in2, axes=[[2], [0]]),\n        in3\n    )\n```",
            "```python\n    return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n```",
            "```python\n    return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n```",
            "```python\n    return tf.add(tf.tensordot(in1, in2, axes=([2], [0])), in3)\n```",
            "```python\n    return tf.add(\n        tf.tensordot(in1, in2, axes=[[2], [0]]), \n        tf.expand_dims(in3, 0)\n    )\n```",
            "```python\n    return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n```",
            "```python\n    return tf.add(tf.tensordot(in1, in2, axes=[[2], [0]]), in3)\n```",
            "```python\n    return tf.add(tf.tensordot(in1, in2, axes=((2,), (0,))), in3)\n```",
            "```python\n    return tf.add(tf.tensordot(in1, in2, axes=[[2], [0]]), in3)\n```",
            "```python\n    return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n```",
            "```python\n    return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n```",
            "```\n    return tf.add(tf.tensordot(in1, in2, axes=[[2],[0]]), in3)\n```",
            "```python\n    return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n```",
            "```python\n    return tf.add(tf.tensordot(in1, in2, axes=[[2], [0]]), in3)\n```",
            "```python\n    return tf.add(\n        tf.tensordot(in1, in2, axes=[[2], [0]]), \n        tf.expand_dims(in3, axis=0)\n    )\n```"
        ],
        "normalized_completions": [
            "def transform(in1, in2, in3):\n    return tf.add(tf.tensordot(in1, in2, axes=[[2], [0]]), in3)",
            "def transform(in1, in2, in3):\n    return tf.add(\n        tf.tensordot(in1, in2, axes=[[2], [0]]),\n        tf.expand_dims(in3, axis=0)\n    )",
            "def transform(in1, in2, in3):\n    return tf.add(tf.tensordot(in1, in2, axes=[[2], [0]]), in3)",
            "def transform(in1, in2, in3):\n    return tf.add(tf.tensordot(in1, in2, axes=1), in3)",
            "def transform(in1, in2, in3):\n    return tf.add(tf.tensordot(in1, in2, axes=[[2], [0]]), in3)",
            "def transform(in1, in2, in3):\n    in4 = tf.matmul(in1, in2)\n    return tf.add(in4, in3)",
            "def transform(in1, in2, in3):\n    return tf.add(tf.tensordot(in1, in2, axes=1), in3)",
            "def transform(in1, in2, in3):\n    return tf.add(tf.tensordot(in1, in2, axes=[[2], [0]]), in3)",
            "def transform(in1, in2, in3):\n    return tf.add(tf.tensordot(in1, in2, axes=1), in3)",
            "def transform(in1, in2, in3):\n    return tf.add(tf.tensordot(in1, in2, axes=[[2], [0]]), in3)",
            "def transform(in1, in2, in3):\n    result = tf.add(tf.tensordot(in1, in2, axes=[[2], [0]]), in3)\n    return result",
            "def transform(in1, in2, in3):\n    return tf.add(\n        tf.tensordot(in1, in2, axes=[[2], [0]]),\n        tf.expand_dims(in3, 0)\n    )",
            "def transform(in1, in2, in3):\n    return tf.add(tf.tensordot(in1, in2, axes=[[2], [0]]), in3)",
            "def transform(in1, in2, in3):\n    res = tf.tensordot(in1, in2, axes=1)\n    return tf.add(res, in3)",
            "def transform(in1, in2, in3):\n    return tf.add(tf.tensordot(in1, in2, axes=1), in3)",
            "def transform(in1, in2, in3):\n    return tf.add(\n        tf.tensordot(in1, in2, axes=[[2], [0]]),\n        in3\n    )",
            "def transform(in1, in2, in3):\n    return tf.add(tf.tensordot(in1, in2, axes=1), in3)",
            "def transform(in1, in2, in3):\n    return tf.add(tf.tensordot(in1, in2, axes=1), in3)",
            "def transform(in1, in2, in3):\n    return tf.add(tf.tensordot(in1, in2, axes=([2], [0])), in3)",
            "def transform(in1, in2, in3):\n    return tf.add(\n        tf.tensordot(in1, in2, axes=[[2], [0]]), \n        tf.expand_dims(in3, 0)\n    )",
            "def transform(in1, in2, in3):\n    return tf.add(tf.tensordot(in1, in2, axes=1), in3)",
            "def transform(in1, in2, in3):\n    return tf.add(tf.tensordot(in1, in2, axes=[[2], [0]]), in3)",
            "def transform(in1, in2, in3):\n    return tf.add(tf.tensordot(in1, in2, axes=((2,), (0,))), in3)",
            "def transform(in1, in2, in3):\n    return tf.add(tf.tensordot(in1, in2, axes=[[2], [0]]), in3)",
            "def transform(in1, in2, in3):\n    return tf.add(tf.tensordot(in1, in2, axes=1), in3)",
            "def transform(in1, in2, in3):\n    return tf.add(tf.tensordot(in1, in2, axes=1), in3)",
            "def transform(in1, in2, in3):\n    return tf.add(tf.tensordot(in1, in2, axes=[[2],[0]]), in3)",
            "def transform(in1, in2, in3):\n    return tf.add(tf.tensordot(in1, in2, axes=1), in3)",
            "def transform(in1, in2, in3):\n    return tf.add(tf.tensordot(in1, in2, axes=[[2], [0]]), in3)",
            "def transform(in1, in2, in3):\n    return tf.add(\n        tf.tensordot(in1, in2, axes=[[2], [0]]), \n        tf.expand_dims(in3, axis=0)\n    )"
        ],
        "tf_operators": {
            "tf.add": 30,
            "tf.tensordot": 29,
            "tf.expand_dims": 4,
            "tf.matmul": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 2,
        "total_in_target": 2,
        "parsed_constants": [
            [
                2,
                0
            ],
            [
                2,
                0,
                0
            ],
            [
                2,
                0
            ],
            [
                1
            ],
            [
                2,
                0
            ],
            [],
            [
                1
            ],
            [
                2,
                0
            ],
            [
                1
            ],
            [
                2,
                0
            ],
            [
                2,
                0
            ],
            [
                2,
                0,
                0
            ],
            [
                2,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                2,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                2,
                0
            ],
            [
                2,
                0,
                0
            ],
            [
                1
            ],
            [
                2,
                0
            ],
            [
                2,
                0
            ],
            [
                2,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                2,
                0
            ],
            [
                1
            ],
            [
                2,
                0
            ],
            [
                2,
                0,
                0
            ]
        ],
        "all_constants": [
            0,
            1,
            2
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 5,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 0,
            "tf_bool": 0,
            "axis": 18,
            "common": 33,
            "tf_float32": 0,
            "shape_tuple": 0,
            "shape": 0,
            "tf_int64": 0,
            "provided": 0,
            "input_var": 92
        }
    },
    {
        "name": "stackoverflow_19",
        "description": "(\\'sort a tensor considering the first column, breaking ties using the second column\\')",
        "target_program": "tf.gather(tf.gather(in1, tf.argsort(in1[:, 1], stable=True)), tf.argsort(tf.gather(in1, tf.argsort(in1[:, 1], stable=True))[:, 0], stable=True))",
        "source": "https://stackoverflow.com/questions/49399198/sort-a-tensor-based-on-two-columns-in-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[[3, 1, 2], [1, 0, 4], [1, 2, 3], [0, 5, 1], [1, 1, 2], [2, 3, 1], [2, 1, 0]],]",
            "outputs": "[[0, 5, 1],    [1, 0, 4],    [1, 1, 2],    [1, 2, 3],    [2, 1, 0],    [2, 3, 1],    [3, 1, 2]]"
        },
        "completions": [
            "```python\ndef transform(in1):\n    indices = tf.argsort(in1[:, :2], axis=0)\n    sorted_indices = tf.argsort(indices[:, 0], axis=0, stable=True)\n    return tf.gather(in1, sorted_indices)\n```",
            "```python\ndef transform(in1):\n    indices = tf.argsort(in1, axis=0)\n    sorted_tensor = tf.gather_nd(in1, tf.argsort(indices[:, 0], axis=0))\n    return tf.gather_nd(sorted_tensor, tf.argsort(sorted_tensor[:, 1], axis=0))\n```",
            "```python\ndef transform(in1):\n    indices = tf.argsort(in1[:, :2], axis=0)\n    return tf.gather(in1, indices[:, 0])\n```",
            "```python\ndef transform(in1):\n    indices = tf.argsort(in1[:, :2], axis=0)\n    return tf.gather_nd(in1, indices)\n```",
            "```python\n    indices = tf.argsort(tf.gather(in1, [0, 1], axis=1), axis=0)\n    sorted_indices = tf.gather(indices, tf.argsort(tf.gather(indices, 1), axis=0))\n    return tf.gather(in1, sorted_indices[:, 0])\n```",
            "```python\ndef transform(in1):\n    indices = tf.argsort(in1[:, :2], axis=0, stable=True)\n    return tf.gather(in1, tf.gather(indices, 0))\n```",
            "```python\ndef transform(in1):\n    indices = tf.argsort(in1[:, :2], axis=0)\n    sorted_indices = tf.gather(indices, tf.argsort(indices[:, 0], axis=0))\n    return tf.gather(in1, sorted_indices[:, 1])\n```",
            "```python\ndef transform(in1):\n    return tf.gather(in1, tf.argsort(in1[:, :2], axis=0)[:, 0])\n```",
            "```python\n    idx = tf.argsort(tf.argsort(in1[:, :2], axis=0, stable=True), axis=0)\n    return tf.gather(in1, tf.argsort(tf.reduce_sum(idx, axis=1)))\n```",
            "```python\ndef transform(in1):\n    indices = tf.argsort(in1, axis=0, stable=True)\n    return tf.gather(in1, indices[:, 0], axis=0)\n```",
            "```python\ndef transform(in1):\n    return tf.gather(in1, tf.argsort(in1[:, :2], axis=0)[:, 0])\n```",
            "```python\ndef transform(in1):\n    idx = tf.argsort(in1, axis=0)\n    return tf.gather_nd(in1, tf.sort(idx[:, :2], axis=0))\n```",
            "```python\ndef transform(in1):\n    indices = tf.argsort(in1[:, :2], axis=0)\n    indices = tf.gather(indices, [0, 1], axis=1)\n    sorted_in1 = tf.gather_nd(in1, indices)\n    return sorted_in1\n```",
            "```python\nidx = tf.argsort(in1[:, :2], axis=0)\nreturn tf.gather(in1, tf.gather(idx[:, 1], tf.argsort(idx[:, 0], axis=0)))\n```",
            "```python\ndef transform(in1):\n    idx = tf.argsort(in1[:, :2], axis=0)\n    idx = tf.gather_nd(idx, tf.expand_dims(tf.range(tf.shape(in1)[0]), 1))\n    return tf.gather(in1, idx, axis=0)\n```",
            "```python\ndef transform(in1):\n    idx = tf.argsort(in1, axis=0)\n    return tf.gather_nd(in1, idx)\n```",
            "```python\n    indices = tf.lexsort([in1[:, 1], in1[:, 0]])\n    return tf.gather(in1, indices)\n```",
            "```python\n    return tf.gather_nd(in1, tf.argsort(in1, axis=0))\n```",
            "```python\n    idx = tf.argsort(in1, axis=0)\n    idx = tf.gather(idx, [0,1], axis=1)\n    sorted_indices = tf.argsort(idx, axis=0)\n    return tf.gather(in1, sorted_indices[:,0])\n```",
            "```python\n    idx = tf.argsort(in1, axis=0)\n    idx = tf.gather(idx, 0) + tf.argsort(tf.gather(in1, tf.gather(idx, 0)), axis=0)\n    return tf.gather(in1, idx, axis=0)\n```",
            "```python\n    indices = tf.argsort(in1, axis=0)\n    sorted_by_first = tf.gather(in1, indices[:, 0], axis=0)\n    return tf.gather(sorted_by_first, tf.argsort(sorted_by_first[:, 1], axis=0), axis=0)\n```",
            "```python\n    idx = tf.argsort(in1[:, :2], axis=0)\n    return tf.gather_nd(in1, idx)\n```",
            "```python\n    indices = tf.argsort(in1[:, :2], axis=0)\n    sorted_indices = tf.gather_nd(indices, tf.argsort(tf.gather_nd(indices, [list(range(tf.shape(in1)[0]))]), axis=0))\n    return tf.gather(in1, sorted_indices, axis=0)\n```",
            "```python\n    indices = tf.argsort(in1[:, :2], axis=0)\n    indices = tf.gather(indices, [0, 1], axis=1)\n    sorted_rows = tf.gather_nd(in1, indices)\n    return sorted_rows\n```",
            "```python\n    indices = tf.argsort(in1, axis=0)\n    indices = tf.gather(indices, [0, 1], axis=1)\n    sorted_indices = tf.argsort(indices, axis=0)\n    return tf.gather(in1, sorted_indices[:, 0])\n```",
            "```python\n    return tf.gather(in1, tf.argsort(in1, axis=0))\n```",
            "```python\n    return tf.gather(in1, tf.argsort(tf.argsort(in1, axis=1), axis=0)[..., 0])\n```",
            "```python\n    idx = tf.argsort(in1[:, :2], axis=0)\n    idx = tf.argsort(idx[:, 0], axis=0, stable=True)\n    return tf.gather(in1, idx)\n```",
            "```python\n    indices = tf.argsort(in1, axis=0)\n    return tf.gather(in1, indices[:, 0, :], axis=0)\n```",
            "```python\n    return tf.gather(in1, tf.argsort(tf.stack([in1[:, 0], in1[:, 1]], axis=1), axis=0)[:, 0])\n```"
        ],
        "normalized_completions": [
            "def transform(in1):\n    indices = tf.argsort(in1[:, :2], axis=0)\n    sorted_indices = tf.argsort(indices[:, 0], axis=0, stable=True)\n    return tf.gather(in1, sorted_indices)",
            "def transform(in1):\n    indices = tf.argsort(in1, axis=0)\n    sorted_tensor = tf.gather_nd(in1, tf.argsort(indices[:, 0], axis=0))\n    return tf.gather_nd(sorted_tensor, tf.argsort(sorted_tensor[:, 1], axis=0))",
            "def transform(in1):\n    indices = tf.argsort(in1[:, :2], axis=0)\n    return tf.gather(in1, indices[:, 0])",
            "def transform(in1):\n    indices = tf.argsort(in1[:, :2], axis=0)\n    return tf.gather_nd(in1, indices)",
            "def transform(in1):\n    indices = tf.argsort(tf.gather(in1, [0, 1], axis=1), axis=0)\n    sorted_indices = tf.gather(indices, tf.argsort(tf.gather(indices, 1), axis=0))\n    return tf.gather(in1, sorted_indices[:, 0])",
            "def transform(in1):\n    indices = tf.argsort(in1[:, :2], axis=0, stable=True)\n    return tf.gather(in1, tf.gather(indices, 0))",
            "def transform(in1):\n    indices = tf.argsort(in1[:, :2], axis=0)\n    sorted_indices = tf.gather(indices, tf.argsort(indices[:, 0], axis=0))\n    return tf.gather(in1, sorted_indices[:, 1])",
            "def transform(in1):\n    return tf.gather(in1, tf.argsort(in1[:, :2], axis=0)[:, 0])",
            "def transform(in1):\n    idx = tf.argsort(tf.argsort(in1[:, :2], axis=0, stable=True), axis=0)\n    return tf.gather(in1, tf.argsort(tf.reduce_sum(idx, axis=1)))",
            "def transform(in1):\n    indices = tf.argsort(in1, axis=0, stable=True)\n    return tf.gather(in1, indices[:, 0], axis=0)",
            "def transform(in1):\n    return tf.gather(in1, tf.argsort(in1[:, :2], axis=0)[:, 0])",
            "def transform(in1):\n    idx = tf.argsort(in1, axis=0)\n    return tf.gather_nd(in1, tf.sort(idx[:, :2], axis=0))",
            "def transform(in1):\n    indices = tf.argsort(in1[:, :2], axis=0)\n    indices = tf.gather(indices, [0, 1], axis=1)\n    sorted_in1 = tf.gather_nd(in1, indices)\n    return sorted_in1",
            "def transform(in1):\n    idx = tf.argsort(in1[:, :2], axis=0)\n    return tf.gather(in1, tf.gather(idx[:, 1], tf.argsort(idx[:, 0], axis=0)))",
            "def transform(in1):\n    idx = tf.argsort(in1[:, :2], axis=0)\n    idx = tf.gather_nd(idx, tf.expand_dims(tf.range(tf.shape(in1)[0]), 1))\n    return tf.gather(in1, idx, axis=0)",
            "def transform(in1):\n    idx = tf.argsort(in1, axis=0)\n    return tf.gather_nd(in1, idx)",
            "def transform(in1):\n    indices = tf.lexsort([in1[:, 1], in1[:, 0]])\n    return tf.gather(in1, indices)",
            "def transform(in1):\n    return tf.gather_nd(in1, tf.argsort(in1, axis=0))",
            "def transform(in1):\n    idx = tf.argsort(in1, axis=0)\n    idx = tf.gather(idx, [0,1], axis=1)\n    sorted_indices = tf.argsort(idx, axis=0)\n    return tf.gather(in1, sorted_indices[:,0])",
            "def transform(in1):\n    idx = tf.argsort(in1, axis=0)\n    idx = tf.gather(idx, 0) + tf.argsort(tf.gather(in1, tf.gather(idx, 0)), axis=0)\n    return tf.gather(in1, idx, axis=0)",
            "def transform(in1):\n    indices = tf.argsort(in1, axis=0)\n    sorted_by_first = tf.gather(in1, indices[:, 0], axis=0)\n    return tf.gather(sorted_by_first, tf.argsort(sorted_by_first[:, 1], axis=0), axis=0)",
            "def transform(in1):\n    idx = tf.argsort(in1[:, :2], axis=0)\n    return tf.gather_nd(in1, idx)",
            "def transform(in1):\n    indices = tf.argsort(in1[:, :2], axis=0)\n    sorted_indices = tf.gather_nd(indices, tf.argsort(tf.gather_nd(indices, [list(range(tf.shape(in1)[0]))]), axis=0))\n    return tf.gather(in1, sorted_indices, axis=0)",
            "def transform(in1):\n    indices = tf.argsort(in1[:, :2], axis=0)\n    indices = tf.gather(indices, [0, 1], axis=1)\n    sorted_rows = tf.gather_nd(in1, indices)\n    return sorted_rows",
            "def transform(in1):\n    indices = tf.argsort(in1, axis=0)\n    indices = tf.gather(indices, [0, 1], axis=1)\n    sorted_indices = tf.argsort(indices, axis=0)\n    return tf.gather(in1, sorted_indices[:, 0])",
            "def transform(in1):\n    return tf.gather(in1, tf.argsort(in1, axis=0))",
            "def transform(in1):\n    return tf.gather(in1, tf.argsort(tf.argsort(in1, axis=1), axis=0)[..., 0])",
            "def transform(in1):\n    idx = tf.argsort(in1[:, :2], axis=0)\n    idx = tf.argsort(idx[:, 0], axis=0, stable=True)\n    return tf.gather(in1, idx)",
            "def transform(in1):\n    indices = tf.argsort(in1, axis=0)\n    return tf.gather(in1, indices[:, 0, :], axis=0)",
            "def transform(in1):\n    return tf.gather(in1, tf.argsort(tf.stack([in1[:, 0], in1[:, 1]], axis=1), axis=0)[:, 0])"
        ],
        "tf_operators": {
            "tf.argsort": 29,
            "tf.gather": 24,
            "tf.gather_nd": 10,
            "tf.reduce_sum": 1,
            "tf.sort": 1,
            "tf.shape": 2,
            "tf.expand_dims": 1,
            "tf.range": 1,
            "tf.lexsort": 1,
            "tf.stack": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 2,
        "total_in_target": 2,
        "parsed_constants": [
            [
                2,
                0,
                0,
                0
            ],
            [
                0,
                0,
                0,
                1,
                0
            ],
            [
                2,
                0,
                0
            ],
            [
                2,
                0
            ],
            [
                0,
                1,
                1,
                0,
                1,
                0,
                0
            ],
            [
                2,
                0,
                0
            ],
            [
                2,
                0,
                0,
                0,
                1
            ],
            [
                2,
                0,
                0
            ],
            [
                2,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0
            ],
            [
                2,
                0,
                0
            ],
            [
                0,
                2,
                0
            ],
            [
                2,
                0,
                0,
                1,
                1
            ],
            [
                2,
                0,
                1,
                0,
                0
            ],
            [
                2,
                0,
                0,
                1,
                0
            ],
            [
                0
            ],
            [
                1,
                0
            ],
            [
                0
            ],
            [
                0,
                0,
                1,
                1,
                0,
                0
            ],
            [
                0,
                0,
                0,
                0,
                0
            ],
            [
                0,
                0,
                0,
                1,
                0,
                0
            ],
            [
                2,
                0
            ],
            [
                2,
                0,
                0,
                0,
                0
            ],
            [
                2,
                0,
                0,
                1,
                1
            ],
            [
                0,
                0,
                1,
                1,
                0,
                0
            ],
            [
                0
            ],
            [
                1,
                0,
                0
            ],
            [
                2,
                0,
                0,
                0
            ],
            [
                0,
                0,
                0
            ],
            [
                0,
                1,
                1,
                0,
                0
            ]
        ],
        "all_constants": [
            0,
            1,
            2
        ],
        "constant_counts": [
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 6,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 5,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 5,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 5,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 0,
            "tf_bool": 0,
            "axis": 16,
            "common": 80,
            "tf_float32": 0,
            "shape_tuple": 0,
            "shape": 0,
            "tf_int64": 0,
            "provided": 0,
            "input_var": 104
        }
    },
    {
        "name": "stackoverflow_20",
        "description": "compute argmax in each tensor and set it to 1",
        "target_program": "tf.cast(tf.one_hot(tf.argmax(in1, axis=1), 3), tf.int32)",
        "source": "https://stackoverflow.com/questions/44834739/argmax-on-a-tensor-and-ceiling-in-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[[0.7, 0.2, 0.1], [0.4, 0.5, 0.1], [0.4, 0.4, 0.2], [0.3, 0.4, 0.3], [0.0, 0.0, 1.0]],]",
            "outputs": "[[1, 0, 0],    [0, 1, 0],    [1, 0, 0],    [0, 1, 0],    [0, 0, 1]]"
        },
        "completions": [
            "```python\n    return tf.one_hot(tf.argmax(in1, axis=1), depth=tf.shape(in1)[1], dtype=tf.int32)\n```",
            "```python\n    indices = tf.argmax(in1, axis=1)\n    return tf.one_hot(indices, depth=tf.shape(in1)[1], dtype=tf.int32)\n```",
            "```python\n    return tf.one_hot(tf.argmax(in1, axis=1), in1.shape[-1], dtype=tf.int32)\n```",
            "```python\nindices = tf.argmax(in1, axis=1)\nreturn tf.one_hot(indices, tf.shape(in1)[1])\n```",
            "```python\n    return tf.one_hot(tf.argmax(in1, axis=1), depth=tf.shape(in1)[1])\n```",
            "```python\n    indices = tf.argmax(in1, axis=1)\n    return tf.one_hot(indices, in1.shape[1], dtype=tf.int32)\n```",
            "```python\n    return tf.one_hot(tf.argmax(in1, axis=1), depth=tf.shape(in1)[1], dtype=tf.int32)\n```",
            "```python\n    idx = tf.argmax(in1, axis=1)\n    return tf.one_hot(idx, depth=tf.shape(in1)[1], dtype=tf.int32)\n```",
            "```python\n    return tf.one_hot(tf.argmax(in1, axis=1), depth=tf.shape(in1)[1], dtype=tf.int32)\n```",
            "```python\n    indices = tf.argmax(in1, axis=1)\n    return tf.one_hot(indices, depth=tf.shape(in1)[1], dtype=tf.int32)\n```",
            "```python\n    argmax_indices = tf.argmax(in1, axis=1)\n    return tf.one_hot(argmax_indices, depth=tf.shape(in1)[1], dtype=tf.int32)\n```",
            "```python\n    return tf.one_hot(tf.argmax(in1, axis=1), depth=tf.shape(in1)[1], dtype=tf.int32)\n```",
            "```python\n    indices = tf.argmax(in1, axis=1, output_type=tf.int32)\n    return tf.one_hot(indices, tf.shape(in1)[1], dtype=tf.int32)\n```",
            "```python\n    return tf.one_hot(tf.argmax(in1, axis=1), depth=tf.shape(in1)[1], dtype=tf.int32)\n```",
            "```python\n    return tf.one_hot(tf.argmax(in1, 1), tf.shape(in1)[1], dtype=tf.int32)\n```",
            "```python\n    return tf.one_hot(tf.argmax(in1, axis=1), depth=tf.shape(in1)[1])\n```",
            "```python\n    idx = tf.argmax(in1, axis=1)\n    return tf.one_hot(idx, tf.shape(in1)[1])\n```",
            "```python\n    indices = tf.argmax(in1, axis=1)\n    return tf.one_hot(indices, tf.shape(in1)[1], dtype=tf.int32)\n```",
            "```python\n    return tf.one_hot(tf.argmax(in1, axis=1), depth=tf.shape(in1)[1])\n```",
            "```python\n    idx = tf.argmax(in1, axis=1)\n    return tf.one_hot(idx, tf.shape(in1)[1], dtype=tf.int32)\n```",
            "```python\ndef transform(in1):\n    return tf.one_hot(tf.argmax(in1, axis=1), depth=tf.shape(in1)[1], dtype=tf.int32)\n```",
            "```python\n    idx = tf.argmax(in1, axis=1)\n    return tf.one_hot(idx, tf.shape(in1)[1], dtype=tf.int32)\n```",
            "```python\n    return tf.one_hot(tf.argmax(in1, axis=1), tf.shape(in1)[1], dtype=tf.int32)\n```",
            "```python\n    return tf.one_hot(tf.argmax(in1, axis=1), tf.shape(in1)[1], dtype=tf.int32)\n```",
            "```python\n    return tf.one_hot(tf.argmax(in1, axis=1), depth=tf.shape(in1)[1])\n```",
            "```python\n    indices = tf.argmax(in1, axis=1, output_type=tf.int32)\n    return tf.one_hot(indices, depth=tf.shape(in1)[1], dtype=tf.int32)\n```",
            "```python\n    return tf.one_hot(tf.argmax(in1, axis=1), depth=tf.shape(in1)[1], dtype=tf.int32)\n```",
            "```python\n    return tf.one_hot(tf.argmax(in1, axis=1), depth=tf.shape(in1)[1], dtype=tf.int32)\n```",
            "```python\ndef transform(in1):\n    idx = tf.argmax(in1, axis=1)\n    return tf.one_hot(idx, tf.shape(in1)[1], dtype=tf.int32)\n```",
            "```python\ndef transform(in1):\n    indices = tf.argmax(in1, axis=1)\n    return tf.one_hot(indices, tf.shape(in1)[1], dtype=tf.int32)\n```"
        ],
        "normalized_completions": [
            "def transform(in1):\n    return tf.one_hot(tf.argmax(in1, axis=1), depth=tf.shape(in1)[1], dtype=tf.int32)",
            "def transform(in1):\n    indices = tf.argmax(in1, axis=1)\n    return tf.one_hot(indices, depth=tf.shape(in1)[1], dtype=tf.int32)",
            "def transform(in1):\n    return tf.one_hot(tf.argmax(in1, axis=1), in1.shape[-1], dtype=tf.int32)",
            "def transform(in1):\n    indices = tf.argmax(in1, axis=1)\n    return tf.one_hot(indices, tf.shape(in1)[1])",
            "def transform(in1):\n    return tf.one_hot(tf.argmax(in1, axis=1), depth=tf.shape(in1)[1])",
            "def transform(in1):\n    indices = tf.argmax(in1, axis=1)\n    return tf.one_hot(indices, in1.shape[1], dtype=tf.int32)",
            "def transform(in1):\n    return tf.one_hot(tf.argmax(in1, axis=1), depth=tf.shape(in1)[1], dtype=tf.int32)",
            "def transform(in1):\n    idx = tf.argmax(in1, axis=1)\n    return tf.one_hot(idx, depth=tf.shape(in1)[1], dtype=tf.int32)",
            "def transform(in1):\n    return tf.one_hot(tf.argmax(in1, axis=1), depth=tf.shape(in1)[1], dtype=tf.int32)",
            "def transform(in1):\n    indices = tf.argmax(in1, axis=1)\n    return tf.one_hot(indices, depth=tf.shape(in1)[1], dtype=tf.int32)",
            "def transform(in1):\n    argmax_indices = tf.argmax(in1, axis=1)\n    return tf.one_hot(argmax_indices, depth=tf.shape(in1)[1], dtype=tf.int32)",
            "def transform(in1):\n    return tf.one_hot(tf.argmax(in1, axis=1), depth=tf.shape(in1)[1], dtype=tf.int32)",
            "def transform(in1):\n    indices = tf.argmax(in1, axis=1, output_type=tf.int32)\n    return tf.one_hot(indices, tf.shape(in1)[1], dtype=tf.int32)",
            "def transform(in1):\n    return tf.one_hot(tf.argmax(in1, axis=1), depth=tf.shape(in1)[1], dtype=tf.int32)",
            "def transform(in1):\n    return tf.one_hot(tf.argmax(in1, 1), tf.shape(in1)[1], dtype=tf.int32)",
            "def transform(in1):\n    return tf.one_hot(tf.argmax(in1, axis=1), depth=tf.shape(in1)[1])",
            "def transform(in1):\n    idx = tf.argmax(in1, axis=1)\n    return tf.one_hot(idx, tf.shape(in1)[1])",
            "def transform(in1):\n    indices = tf.argmax(in1, axis=1)\n    return tf.one_hot(indices, tf.shape(in1)[1], dtype=tf.int32)",
            "def transform(in1):\n    return tf.one_hot(tf.argmax(in1, axis=1), depth=tf.shape(in1)[1])",
            "def transform(in1):\n    idx = tf.argmax(in1, axis=1)\n    return tf.one_hot(idx, tf.shape(in1)[1], dtype=tf.int32)",
            "def transform(in1):\n    return tf.one_hot(tf.argmax(in1, axis=1), depth=tf.shape(in1)[1], dtype=tf.int32)",
            "def transform(in1):\n    idx = tf.argmax(in1, axis=1)\n    return tf.one_hot(idx, tf.shape(in1)[1], dtype=tf.int32)",
            "def transform(in1):\n    return tf.one_hot(tf.argmax(in1, axis=1), tf.shape(in1)[1], dtype=tf.int32)",
            "def transform(in1):\n    return tf.one_hot(tf.argmax(in1, axis=1), tf.shape(in1)[1], dtype=tf.int32)",
            "def transform(in1):\n    return tf.one_hot(tf.argmax(in1, axis=1), depth=tf.shape(in1)[1])",
            "def transform(in1):\n    indices = tf.argmax(in1, axis=1, output_type=tf.int32)\n    return tf.one_hot(indices, depth=tf.shape(in1)[1], dtype=tf.int32)",
            "def transform(in1):\n    return tf.one_hot(tf.argmax(in1, axis=1), depth=tf.shape(in1)[1], dtype=tf.int32)",
            "def transform(in1):\n    return tf.one_hot(tf.argmax(in1, axis=1), depth=tf.shape(in1)[1], dtype=tf.int32)",
            "def transform(in1):\n    idx = tf.argmax(in1, axis=1)\n    return tf.one_hot(idx, tf.shape(in1)[1], dtype=tf.int32)",
            "def transform(in1):\n    indices = tf.argmax(in1, axis=1)\n    return tf.one_hot(indices, tf.shape(in1)[1], dtype=tf.int32)"
        ],
        "tf_operators": {
            "tf.argmax": 30,
            "tf.shape": 28,
            "tf.one_hot": 30,
            "tf.int32": 24
        },
        "coverage_percentage": 75.0,
        "total_covered": 3,
        "total_in_target": 4,
        "parsed_constants": [
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                -1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ]
        ],
        "all_constants": [
            1,
            -1
        ],
        "constant_counts": [
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 2,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 2,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 26,
            "tf_bool": 0,
            "axis": 0,
            "common": 60,
            "tf_float32": 0,
            "shape_tuple": 0,
            "shape": 0,
            "tf_int64": 0,
            "provided": 0,
            "input_var": 74
        }
    },
    {
        "name": "stackoverflow_21",
        "description": "gather elements in a tensor along axis 1",
        "target_program": "tf.gather(in2, in1, axis=1, batch_dims=1)",
        "source": "https://stackoverflow.com/questions/51690095/how-to-gather-element-with-index-in-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[[2], [0], [1], [0]],[[0.2, 0.5, 0.3], [0.1, 0.3, 0.6], [0.1, 0.6, 0.3], [0.7, 0.0, 0.3]],]",
            "outputs": "[[0.3], [0.1], [0.6], [0.7]]"
        },
        "completions": [
            "```python\n    return tf.gather(in2, in1, axis=1)\n```",
            "```\ndef transform(in1, in2):\n    return tf.gather_nd(in2, tf.expand_dims(in1, axis=1))\n```",
            "```\n    return tf.gather_nd(in2, tf.expand_dims(in1, -1))\n```",
            "```python\n    return tf.gather(in2, in1, axis=1, batch_dims=1)\n```",
            "```\n    return tf.gather_nd(in2, tf.expand_dims(in1, axis=1))\n```",
            "```python\n    return tf.gather_nd(in2, tf.expand_dims(in1, axis=-1))\n```",
            "```python\n    return tf.gather_nd(in2, in1)\n```",
            "```python\n    return tf.gather(in2, in1, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather_nd(in2, in1, batch_dims=1)\n```",
            "```\n    return tf.gather(in2, in1, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather_nd(in2, tf.expand_dims(in1, axis=-1))\n```",
            "```python\n    return tf.gather(in2, in1, axis=1)\n```",
            "```python\n    return tf.gather_nd(in2, tf.expand_dims(in1, axis=-1))\n```",
            "```python\n    return tf.gather(in2, in1, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather_nd(in2, tf.expand_dims(in1, -1))\n```",
            "```python\n    return tf.gather_nd(in2, in1, batch_dims=1)\n```",
            "```python\n    return tf.gather_nd(in2, tf.expand_dims(in1, axis=-1))\n```",
            "```python\n    return tf.gather(in2, in1, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather(in2, in1, axis=1, batch_dims=1)\n```",
            "```\n    return tf.gather(in2, in1, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather_nd(in2, tf.expand_dims(in1, -1))\n```",
            "```python\n    return tf.gather_nd(in2, tf.expand_dims(in1, axis=-1))\n```",
            "```python\n    return tf.gather(in2, in1, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather(in2, in1, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather_nd(in2, tf.expand_dims(in1, axis=-1))\n```",
            "```python\n    return tf.gather_nd(in2, tf.expand_dims(in1, axis=1))\n```",
            "```python\n    return tf.gather(in2, in1, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather(in2, in1, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather(in2, in1, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather_nd(in2, tf.expand_dims(in1, -1))\n```"
        ],
        "normalized_completions": [
            "def transform(in1, in2):\n    return tf.gather(in2, in1, axis=1)",
            "def transform(in1, in2):\n    return tf.gather_nd(in2, tf.expand_dims(in1, axis=1))",
            "def transform(in1, in2):\n    return tf.gather_nd(in2, tf.expand_dims(in1, -1))",
            "def transform(in1, in2):\n    return tf.gather(in2, in1, axis=1, batch_dims=1)",
            "def transform(in1, in2):\n    return tf.gather_nd(in2, tf.expand_dims(in1, axis=1))",
            "def transform(in1, in2):\n    return tf.gather_nd(in2, tf.expand_dims(in1, axis=-1))",
            "def transform(in1, in2):\n    return tf.gather_nd(in2, in1)",
            "def transform(in1, in2):\n    return tf.gather(in2, in1, axis=1, batch_dims=1)",
            "def transform(in1, in2):\n    return tf.gather_nd(in2, in1, batch_dims=1)",
            "def transform(in1, in2):\n    return tf.gather(in2, in1, axis=1, batch_dims=1)",
            "def transform(in1, in2):\n    return tf.gather_nd(in2, tf.expand_dims(in1, axis=-1))",
            "def transform(in1, in2):\n    return tf.gather(in2, in1, axis=1)",
            "def transform(in1, in2):\n    return tf.gather_nd(in2, tf.expand_dims(in1, axis=-1))",
            "def transform(in1, in2):\n    return tf.gather(in2, in1, axis=1, batch_dims=1)",
            "def transform(in1, in2):\n    return tf.gather_nd(in2, tf.expand_dims(in1, -1))",
            "def transform(in1, in2):\n    return tf.gather_nd(in2, in1, batch_dims=1)",
            "def transform(in1, in2):\n    return tf.gather_nd(in2, tf.expand_dims(in1, axis=-1))",
            "def transform(in1, in2):\n    return tf.gather(in2, in1, axis=1, batch_dims=1)",
            "def transform(in1, in2):\n    return tf.gather(in2, in1, axis=1, batch_dims=1)",
            "def transform(in1, in2):\n    return tf.gather(in2, in1, axis=1, batch_dims=1)",
            "def transform(in1, in2):\n    return tf.gather_nd(in2, tf.expand_dims(in1, -1))",
            "def transform(in1, in2):\n    return tf.gather_nd(in2, tf.expand_dims(in1, axis=-1))",
            "def transform(in1, in2):\n    return tf.gather(in2, in1, axis=1, batch_dims=1)",
            "def transform(in1, in2):\n    return tf.gather(in2, in1, axis=1, batch_dims=1)",
            "def transform(in1, in2):\n    return tf.gather_nd(in2, tf.expand_dims(in1, axis=-1))",
            "def transform(in1, in2):\n    return tf.gather_nd(in2, tf.expand_dims(in1, axis=1))",
            "def transform(in1, in2):\n    return tf.gather(in2, in1, axis=1, batch_dims=1)",
            "def transform(in1, in2):\n    return tf.gather(in2, in1, axis=1, batch_dims=1)",
            "def transform(in1, in2):\n    return tf.gather(in2, in1, axis=1, batch_dims=1)",
            "def transform(in1, in2):\n    return tf.gather_nd(in2, tf.expand_dims(in1, -1))"
        ],
        "tf_operators": {
            "tf.gather": 14,
            "tf.expand_dims": 13,
            "tf.gather_nd": 16
        },
        "coverage_percentage": 100.0,
        "total_covered": 1,
        "total_in_target": 1,
        "parsed_constants": [
            [
                1
            ],
            [
                1
            ],
            [
                -1
            ],
            [
                1,
                1
            ],
            [
                1
            ],
            [
                -1
            ],
            [],
            [
                1,
                1
            ],
            [
                1
            ],
            [
                1,
                1
            ],
            [
                -1
            ],
            [
                1
            ],
            [
                -1
            ],
            [
                1,
                1
            ],
            [
                -1
            ],
            [
                1
            ],
            [
                -1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                -1
            ],
            [
                -1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                -1
            ],
            [
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                -1
            ]
        ],
        "all_constants": [
            1,
            -1
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 0,
            "tf_bool": 0,
            "axis": 0,
            "common": 41,
            "tf_float32": 0,
            "shape_tuple": 0,
            "shape": 0,
            "tf_int64": 0,
            "provided": 0,
            "input_var": 60
        }
    },
    {
        "name": "stackoverflow_22",
        "description": "multiply a vector with a matrix without reshaping the vector",
        "target_program": "tf.tensordot(tf.cast(in1, tf.float32), in2, 1)",
        "source": "https://stackoverflow.com/questions/43284897/how-can-i-multiply-a-vector-and-a-matrix-in-tensorflow-without-reshaping",
        "constants": "[]",
        "examples": {
            "inputs": "[[3, 1, 10],[[0.6, 0.4], [0.5, 1.0], [3.0, 4.0]],]",
            "outputs": "[32.3, 42.2]"
        },
        "completions": [
            "```python\ndef transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(tf.expand_dims(in1, 1), in2), axis=0)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.matmul(tf.expand_dims(in1, 0), in2)[0]\n```",
            "```\ndef transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.linalg.matvec(in2, in1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```"
        ],
        "normalized_completions": [
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(tf.expand_dims(in1, 1), in2), axis=0)",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "def transform(in1, in2):\n    return tf.matmul(tf.expand_dims(in1, 0), in2)[0]",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "def transform(in1, in2):\n    return tf.linalg.matvec(in2, in1)",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)"
        ],
        "tf_operators": {
            "tf.tensordot": 27,
            "tf.expand_dims": 2,
            "tf.reduce_sum": 1,
            "tf.multiply": 1,
            "tf.matmul": 1,
            "tf.linalg.matvec": 1
        },
        "coverage_percentage": 33.33333333333333,
        "total_covered": 1,
        "total_in_target": 3,
        "parsed_constants": [
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                0,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ]
        ],
        "all_constants": [
            0,
            1
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 0,
            "tf_bool": 0,
            "axis": 0,
            "common": 31,
            "tf_float32": 0,
            "shape_tuple": 0,
            "shape": 0,
            "tf_int64": 0,
            "provided": 0,
            "input_var": 60
        }
    },
    {
        "name": "stackoverflow_23",
        "description": "place 1 at the indices in the input tensor",
        "target_program": "tf.cast(tf.reduce_max(tf.one_hot(in1, 9), axis=1), tf.int32)",
        "source": "https://stackoverflow.com/questions/53414433/tensorflow-tensor-binarization",
        "constants": "[]",
        "examples": {
            "inputs": "[[[0, 5, 2], [3, 1, 4], [5, 1, 5]],]",
            "outputs": "[[1, 0, 1, 0, 0, 1, 0, 0, 0],    [0, 1, 0, 1, 1, 0, 0, 0, 0],    [0, 1, 0, 0, 0, 1, 0, 0, 0]]"
        },
        "completions": [
            "```python\n    indices = tf.reshape(in1, [-1, 1])\n    updates = tf.ones_like(indices, dtype=tf.int32)\n    shape = [tf.shape(in1)[0], 9]\n    return tf.scatter_nd(indices, updates, shape)\n```",
            "```python\n    return tf.one_hot(in1, 9, on_value=1, off_value=0)\n```",
            "```python\n    return tf.one_hot(in1, 9, dtype=tf.int32)\n```",
            "```python\n    shape = (tf.shape(in1)[0], tf.reduce_max(in1) + 1)\n    return tf.scatter_nd(tf.expand_dims(tf.range(tf.shape(in1)[0]), 1), tf.ones_like(in1), shape)\n```",
            "```python\n    return tf.reduce_sum(tf.one_hot(in1, 9), axis=1)\n```",
            "```python\n    return tf.one_hot(in1, 9, dtype=tf.int32)\n```",
            "```python\n    idx = tf.reshape(in1 + tf.range(in1.shape[0])[:, None] * 9, (-1, 1))\n    return tf.reshape(tf.scatter_nd(idx, tf.ones(tf.shape(idx)[0]), (in1.shape[0], 9)), in1.shape[0], 9)\n```",
            "```python\n    return tf.one_hot(in1, 9, on_value=1, off_value=0)\n```",
            "```python\n    shape = [tf.shape(in1)[0], tf.reduce_max(in1) + 1]\n    updates = tf.ones(tf.shape(in1), dtype=tf.int32)\n    return tf.scatter_nd(in1, updates, shape)\n```",
            "```python\n    return tf.reduce_sum(tf.one_hot(in1, 9), axis=1)\n```",
            "```python\n    shape = [tf.shape(in1)[0], tf.reduce_max(in1) + 1]\n    return tf.scatter_nd(in1[..., tf.newaxis], tf.ones_like(in1, dtype=tf.int32), shape)\n```",
            "```python\n    indices = tf.concat([tf.expand_dims(tf.range(tf.shape(in1)[0]), 1), tf.reshape(in1, [-1, 1])], axis=1)\n    updates = tf.ones(tf.shape(indices)[0], dtype=tf.int32)\n    shape = [tf.shape(in1)[0], 9]\n    return tf.scatter_nd(indices, updates, shape)\n```",
            "```python\n    return tf.reduce_sum(tf.one_hot(in1, 9), axis=1)\n```",
            "```python\n    shape = [tf.shape(in1)[0], tf.reduce_max(in1) + 1]\n    return tf.scatter_nd(tf.expand_dims(in1, -1), tf.ones_like(in1, dtype=tf.int32), shape)\n```",
            "```python\n    shape = [tf.shape(in1)[0], tf.reduce_max(in1) + 1]\n    return tf.scatter_nd(tf.expand_dims(in1, -1), tf.ones_like(in1), shape)\n```",
            "```python\n    return tf.one_hot(in1, depth=9)\n```",
            "```python\n    shape = [tf.shape(in1)[0], tf.reduce_max(in1) + 1]\n    indices = tf.reshape(in1, [-1, 1])\n    updates = tf.ones(tf.shape(indices)[0], dtype=tf.int32)\n    return tf.reshape(tf.scatter_nd(indices, updates, shape=shape), [tf.shape(in1)[0], -1])\n```",
            "```python\n    return tf.scatter_nd(in1, tf.ones(tf.shape(in1)[0], tf.int32), [tf.shape(in1)[0], 9])\n```",
            "```python\n    return tf.reduce_sum(tf.one_hot(in1, 9), axis=1)\n```",
            "```python\n    return tf.where(tf.sequence_mask(in1, maxlen=9), 1, 0)\n```",
            "```python\n    return tf.reduce_sum(tf.one_hot(in1, 9), axis=1)\n```",
            "```python\n    return tf.reduce_sum(tf.one_hot(in1, 9), axis=1)\n```",
            "```python\n    return tf.reduce_sum(tf.one_hot(in1, 9), axis=1)\n```",
            "```python\n    return tf.reduce_sum(tf.one_hot(in1, 9), axis=1)\n```",
            "```python\n    shape = [tf.shape(in1)[0], tf.reduce_max(in1) + 1]\n    indices = tf.reshape(tf.stack(tf.meshgrid(tf.range(tf.shape(in1)[0]), in1, indexing='ij'), axis=-1), [-1, 2])\n    return tf.scatter_nd(indices, tf.ones_like(indices[:, 0]), shape)\n```",
            "```python\n    return tf.reduce_sum(tf.one_hot(in1, 9), axis=1)\n```",
            "```python\n    return tf.reduce_sum(tf.one_hot(in1, 9), axis=1)\n```",
            "```python\n    return tf.reduce_sum(tf.one_hot(in1, 9), axis=1)\n```",
            "```python\n    return tf.reduce_sum(tf.one_hot(in1, 9), axis=1)\n```",
            "```python\n    shape = tf.shape(in1)\n    update_indices = tf.reshape(in1, [-1])\n    values = tf.ones(tf.shape(update_indices))\n    return tf.reshape(tf.scatter_nd(tf.expand_dims(update_indices, 1), values, (shape[0], 9)), (shape[0], 9))\n```"
        ],
        "normalized_completions": [
            "def transform(in1):\n    indices = tf.reshape(in1, [-1, 1])\n    updates = tf.ones_like(indices, dtype=tf.int32)\n    shape = [tf.shape(in1)[0], 9]\n    return tf.scatter_nd(indices, updates, shape)",
            "def transform(in1):\n    return tf.one_hot(in1, 9, on_value=1, off_value=0)",
            "def transform(in1):\n    return tf.one_hot(in1, 9, dtype=tf.int32)",
            "def transform(in1):\n    shape = (tf.shape(in1)[0], tf.reduce_max(in1) + 1)\n    return tf.scatter_nd(tf.expand_dims(tf.range(tf.shape(in1)[0]), 1), tf.ones_like(in1), shape)",
            "def transform(in1):\n    return tf.reduce_sum(tf.one_hot(in1, 9), axis=1)",
            "def transform(in1):\n    return tf.one_hot(in1, 9, dtype=tf.int32)",
            "def transform(in1):\n    idx = tf.reshape(in1 + tf.range(in1.shape[0])[:, None] * 9, (-1, 1))\n    return tf.reshape(tf.scatter_nd(idx, tf.ones(tf.shape(idx)[0]), (in1.shape[0], 9)), in1.shape[0], 9)",
            "def transform(in1):\n    return tf.one_hot(in1, 9, on_value=1, off_value=0)",
            "def transform(in1):\n    shape = [tf.shape(in1)[0], tf.reduce_max(in1) + 1]\n    updates = tf.ones(tf.shape(in1), dtype=tf.int32)\n    return tf.scatter_nd(in1, updates, shape)",
            "def transform(in1):\n    return tf.reduce_sum(tf.one_hot(in1, 9), axis=1)",
            "def transform(in1):\n    shape = [tf.shape(in1)[0], tf.reduce_max(in1) + 1]\n    return tf.scatter_nd(in1[..., tf.newaxis], tf.ones_like(in1, dtype=tf.int32), shape)",
            "def transform(in1):\n    indices = tf.concat([tf.expand_dims(tf.range(tf.shape(in1)[0]), 1), tf.reshape(in1, [-1, 1])], axis=1)\n    updates = tf.ones(tf.shape(indices)[0], dtype=tf.int32)\n    shape = [tf.shape(in1)[0], 9]\n    return tf.scatter_nd(indices, updates, shape)",
            "def transform(in1):\n    return tf.reduce_sum(tf.one_hot(in1, 9), axis=1)",
            "def transform(in1):\n    shape = [tf.shape(in1)[0], tf.reduce_max(in1) + 1]\n    return tf.scatter_nd(tf.expand_dims(in1, -1), tf.ones_like(in1, dtype=tf.int32), shape)",
            "def transform(in1):\n    shape = [tf.shape(in1)[0], tf.reduce_max(in1) + 1]\n    return tf.scatter_nd(tf.expand_dims(in1, -1), tf.ones_like(in1), shape)",
            "def transform(in1):\n    return tf.one_hot(in1, depth=9)",
            "def transform(in1):\n    shape = [tf.shape(in1)[0], tf.reduce_max(in1) + 1]\n    indices = tf.reshape(in1, [-1, 1])\n    updates = tf.ones(tf.shape(indices)[0], dtype=tf.int32)\n    return tf.reshape(tf.scatter_nd(indices, updates, shape=shape), [tf.shape(in1)[0], -1])",
            "def transform(in1):\n    return tf.scatter_nd(in1, tf.ones(tf.shape(in1)[0], tf.int32), [tf.shape(in1)[0], 9])",
            "def transform(in1):\n    return tf.reduce_sum(tf.one_hot(in1, 9), axis=1)",
            "def transform(in1):\n    return tf.where(tf.sequence_mask(in1, maxlen=9), 1, 0)",
            "def transform(in1):\n    return tf.reduce_sum(tf.one_hot(in1, 9), axis=1)",
            "def transform(in1):\n    return tf.reduce_sum(tf.one_hot(in1, 9), axis=1)",
            "def transform(in1):\n    return tf.reduce_sum(tf.one_hot(in1, 9), axis=1)",
            "def transform(in1):\n    return tf.reduce_sum(tf.one_hot(in1, 9), axis=1)",
            "def transform(in1):\n    shape = [tf.shape(in1)[0], tf.reduce_max(in1) + 1]\n    indices = tf.reshape(tf.stack(tf.meshgrid(tf.range(tf.shape(in1)[0]), in1, indexing='ij'), axis=-1), [-1, 2])\n    return tf.scatter_nd(indices, tf.ones_like(indices[:, 0]), shape)",
            "def transform(in1):\n    return tf.reduce_sum(tf.one_hot(in1, 9), axis=1)",
            "def transform(in1):\n    return tf.reduce_sum(tf.one_hot(in1, 9), axis=1)",
            "def transform(in1):\n    return tf.reduce_sum(tf.one_hot(in1, 9), axis=1)",
            "def transform(in1):\n    return tf.reduce_sum(tf.one_hot(in1, 9), axis=1)",
            "def transform(in1):\n    shape = tf.shape(in1)\n    update_indices = tf.reshape(in1, [-1])\n    values = tf.ones(tf.shape(update_indices))\n    return tf.reshape(tf.scatter_nd(tf.expand_dims(update_indices, 1), values, (shape[0], 9)), (shape[0], 9))"
        ],
        "tf_operators": {
            "tf.scatter_nd": 12,
            "tf.shape": 12,
            "tf.ones_like": 6,
            "tf.int32": 9,
            "tf.reshape": 6,
            "tf.one_hot": 17,
            "tf.expand_dims": 5,
            "tf.range": 4,
            "tf.reduce_max": 7,
            "tf.reduce_sum": 12,
            "tf.ones": 6,
            "tf.newaxis": 1,
            "tf.concat": 1,
            "tf.sequence_mask": 1,
            "tf.where": 1,
            "tf.meshgrid": 1,
            "tf.stack": 1
        },
        "coverage_percentage": 75.0,
        "total_covered": 3,
        "total_in_target": 4,
        "parsed_constants": [
            [
                -1,
                1,
                0,
                9
            ],
            [
                9,
                1,
                0
            ],
            [
                9
            ],
            [
                0,
                1,
                0,
                1
            ],
            [
                9,
                1
            ],
            [
                9
            ],
            [
                0,
                9,
                -1,
                1,
                0,
                0,
                9,
                0,
                9
            ],
            [
                9,
                1,
                0
            ],
            [
                0,
                1
            ],
            [
                9,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1,
                -1,
                1,
                1,
                0,
                0,
                9
            ],
            [
                9,
                1
            ],
            [
                0,
                1,
                -1
            ],
            [
                0,
                1,
                -1
            ],
            [
                9
            ],
            [
                0,
                1,
                -1,
                1,
                0,
                0,
                -1
            ],
            [
                0,
                0,
                9
            ],
            [
                9,
                1
            ],
            [
                9,
                1,
                0
            ],
            [
                9,
                1
            ],
            [
                9,
                1
            ],
            [
                9,
                1
            ],
            [
                9,
                1
            ],
            [
                0,
                1,
                0,
                -1,
                -1,
                2,
                0
            ],
            [
                9,
                1
            ],
            [
                9,
                1
            ],
            [
                9,
                1
            ],
            [
                9,
                1
            ],
            [
                -1,
                1,
                0,
                9,
                0,
                9
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            9,
            -1
        ],
        "constant_counts": [
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 7,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 7,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 8,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 7,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 9,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 7,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 9,
            "tf_bool": 0,
            "axis": 1,
            "common": 65,
            "tf_float32": 0,
            "shape_tuple": 0,
            "shape": 0,
            "tf_int64": 0,
            "provided": 23,
            "input_var": 77
        }
    },
    {
        "name": "stackoverflow_24",
        "description": "(\\'like tf.divide(), but when dividing by 0, return the numerator\\')",
        "target_program": "tf.where(tf.cast(in2, tf.bool), x=tf.divide(in1, in2), y=in1)",
        "source": "https://stackoverflow.com/questions/53643339/tensorflow-overriding-tf-divide-to-return-the-numerator-when-dividing-by-0",
        "constants": "[0]",
        "examples": {
            "inputs": "[[3.0, 1.0, 4.0, 5.0, 2.0, 8.0, -6.0, -7.0],[0.5, 0.0, -2.0, 0.0, 1.0, -1.0, 0.0, 2.0],]",
            "outputs": "[6.0, 1.0, -2.0, 5.0, 2.0, -8.0, -6.0, -3.5]"
        },
        "completions": [
            "```python\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n```",
            "```python\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n```",
            "```python\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.where(in2 != 0, tf.divide(in1, in2), in1)\n```",
            "```python\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n```",
            "```python\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n```",
            "```python\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n```",
            "```python\n    return tf.math.divide_no_nan(in1, in2)\n```",
            "```python\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n```",
            "```python\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n```",
            "```python\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.math.divide_no_nan(in1, in2)\n```",
            "```python\n    return tf.math.divide_no_nan(in1, in2)\n```",
            "```python\n    return tf.math.divide_no_nan(in1, in2)\n```",
            "```python\n    return tf.math.divide_no_nan(in1, in2)\n```",
            "```python\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n```",
            "```python\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n```",
            "```python\nreturn tf.math.divide_no_nan(in1, in2)\n```",
            "```python\n    return tf.math.divide_no_nan(in1, in2)\n```",
            "```python\n    return tf.math.divide_no_nan(in1, in2)\n```",
            "```python\n    return tf.math.divide_no_nan(in1, in2)\n```",
            "```python\n    return tf.math.divide_no_nan(in1, in2)\n```",
            "```python\n    return tf.math.divide_no_nan(in1, in2)\n```",
            "```python\n    return tf.math.divide_no_nan(in1, in2)\n```",
            "```python\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n```",
            "```python\n    return tf.math.divide_no_nan(in1, in2)\n```",
            "```python\n    return tf.math.divide_no_nan(in1, in2)\n```",
            "```python\n    return tf.math.divide_no_nan(in1, in2)\n```",
            "```python\n    return tf.math.divide_no_nan(in1, in2)\n```",
            "```python\n    return tf.math.divide_no_nan(in1, in2)\n```"
        ],
        "normalized_completions": [
            "def transform(in1, in2):\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))",
            "def transform(in1, in2):\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))",
            "def transform(in1, in2):\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))",
            "def transform(in1, in2):\n    return tf.where(in2 != 0, tf.divide(in1, in2), in1)",
            "def transform(in1, in2):\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))",
            "def transform(in1, in2):\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))",
            "def transform(in1, in2):\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))",
            "def transform(in1, in2):\n    return tf.math.divide_no_nan(in1, in2)",
            "def transform(in1, in2):\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))",
            "def transform(in1, in2):\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))",
            "def transform(in1, in2):\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))",
            "def transform(in1, in2):\n    return tf.math.divide_no_nan(in1, in2)",
            "def transform(in1, in2):\n    return tf.math.divide_no_nan(in1, in2)",
            "def transform(in1, in2):\n    return tf.math.divide_no_nan(in1, in2)",
            "def transform(in1, in2):\n    return tf.math.divide_no_nan(in1, in2)",
            "def transform(in1, in2):\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))",
            "def transform(in1, in2):\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))",
            "def transform(in1, in2):\n    return tf.math.divide_no_nan(in1, in2)",
            "def transform(in1, in2):\n    return tf.math.divide_no_nan(in1, in2)",
            "def transform(in1, in2):\n    return tf.math.divide_no_nan(in1, in2)",
            "def transform(in1, in2):\n    return tf.math.divide_no_nan(in1, in2)",
            "def transform(in1, in2):\n    return tf.math.divide_no_nan(in1, in2)",
            "def transform(in1, in2):\n    return tf.math.divide_no_nan(in1, in2)",
            "def transform(in1, in2):\n    return tf.math.divide_no_nan(in1, in2)",
            "def transform(in1, in2):\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))",
            "def transform(in1, in2):\n    return tf.math.divide_no_nan(in1, in2)",
            "def transform(in1, in2):\n    return tf.math.divide_no_nan(in1, in2)",
            "def transform(in1, in2):\n    return tf.math.divide_no_nan(in1, in2)",
            "def transform(in1, in2):\n    return tf.math.divide_no_nan(in1, in2)",
            "def transform(in1, in2):\n    return tf.math.divide_no_nan(in1, in2)"
        ],
        "tf_operators": {
            "tf.equal": 12,
            "tf.divide": 13,
            "tf.where": 13,
            "tf.math.divide_no_nan": 17
        },
        "coverage_percentage": 50.0,
        "total_covered": 2,
        "total_in_target": 4,
        "parsed_constants": [
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [],
            [],
            [],
            [],
            [
                0
            ],
            [
                0
            ],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [
                0
            ],
            [],
            [],
            [],
            [],
            []
        ],
        "all_constants": [
            0
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 0,
            "tf_bool": 0,
            "axis": 0,
            "common": 13,
            "tf_float32": 0,
            "shape_tuple": 0,
            "shape": 0,
            "tf_int64": 0,
            "provided": 0,
            "input_var": 86
        }
    },
    {
        "name": "stackoverflow_25",
        "description": "copy the tensor tf.eye(3), 4 times",
        "target_program": "tf.tile(tf.eye(in1), (in2, 1))",
        "source": "https://stackoverflow.com/questions/53602691/duplicate-a-tensor-n-times",
        "constants": "[]",
        "examples": {
            "inputs": "[3,4,]",
            "outputs": "[[1.0, 0.0, 0.0],    [0.0, 1.0, 0.0],    [0.0, 0.0, 1.0],    [1.0, 0.0, 0.0],    [0.0, 1.0, 0.0],    [0.0, 0.0, 1.0],    [1.0, 0.0, 0.0],    [0.0, 1.0, 0.0],    [0.0, 0.0, 1.0],    [1.0, 0.0, 0.0],    [0.0, 1.0, 0.0],    [0.0, 0.0, 1.0]]"
        },
        "completions": [
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\nreturn tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\nreturn tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\nreturn tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```"
        ],
        "normalized_completions": [
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])"
        ],
        "tf_operators": {
            "tf.eye": 30,
            "tf.tile": 30
        },
        "coverage_percentage": 100.0,
        "total_covered": 2,
        "total_in_target": 2,
        "parsed_constants": [
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ]
        ],
        "all_constants": [
            1
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 0,
            "tf_bool": 0,
            "axis": 0,
            "common": 30,
            "tf_float32": 0,
            "shape_tuple": 0,
            "shape": 0,
            "tf_int64": 0,
            "provided": 0,
            "input_var": 60
        }
    },
    {
        "name": "stackoverflow_26",
        "description": "reduction operation for multiple dimensions simultaneously",
        "target_program": "tf.reduce_sum(tf.reduce_sum(in1, axis=1), axis=1)",
        "source": "https://stackoverflow.com/questions/54294780/how-to-perform-reduce-op-on-multiple-dimensions-at-once",
        "constants": "[]",
        "examples": {
            "inputs": "[[[[3, 4], [1, 2]], [[5, -2], [-10, 3]], [[10, 20], [-4, 7]]]]",
            "outputs": "[10, -4, 33]"
        },
        "completions": [
            "```\n    return tf.reduce_sum(in1, axis=[1, 2])\n```",
            "```python\n    return tf.reduce_sum(in1, axis=[1, 2])\n```",
            "```python\n    return tf.reduce_sum(in1, axis=[1, 2])\n```",
            "```python\n    return tf.reduce_sum(in1, axis=[1, 2])\n```",
            "```python\n    return tf.reduce_sum(in1, axis=[1, 2])\n```",
            "```python\n    return tf.reduce_sum(in1, axis=[1, 2])\n```",
            "```python\n    return tf.reduce_sum(in1, axis=[1, 2])\n```",
            "```python\n    return tf.reduce_sum(in1, axis=[1, 2])\n```",
            "```python\n    return tf.reduce_sum(in1, axis=[1, 2])\n```",
            "```python\n    return tf.reduce_sum(in1, axis=[1, 2])\n```",
            "```python\n    return tf.reduce_sum(in1, axis=[1, 2])\n```",
            "```python\n    return tf.reduce_sum(in1, axis=[1, 2])\n```",
            "```python\n    return tf.reduce_sum(in1, axis=[1, 2])\n```",
            "```python\n    return tf.reduce_sum(in1, axis=[1, 2])\n```",
            "```python\n    return tf.reduce_sum(in1, axis=(1, 2))\n```",
            "```python\n    return tf.reduce_sum(in1, axis=[1, 2])\n```",
            "```python\n    return tf.reduce_sum(in1, axis=[1, 2])\n```",
            "```python\n    return tf.reduce_sum(in1, axis=[1, 2])\n```",
            "```python\n    return tf.reduce_sum(in1, axis=[1, 2])\n```",
            "```python\n    return tf.reduce_sum(in1, axis=[1, 2])\n```",
            "```python\n    return tf.reduce_sum(in1, axis=[1, 2])\n```",
            "```python\n    return tf.reduce_sum(in1, axis=[1, 2])\n```",
            "```python\n    return tf.reduce_sum(in1, axis=[1, 2])\n```",
            "```python\n    return tf.reduce_sum(in1, axis=[1, 2])\n```",
            "```python\n    return tf.reduce_sum(in1, axis=[1, 2])\n```",
            "```python\n    return tf.reduce_sum(in1, axis=[1, 2])\n```",
            "```python\n    return tf.reduce_sum(in1, axis=[1, 2])\n```",
            "```python\n    return tf.reduce_sum(in1, axis=[1, 2])\n```",
            "```python\n    return tf.reduce_sum(in1, axis=[1, 2])\n```",
            "```python\n    return tf.reduce_sum(in1, axis=[1, 2])\n```"
        ],
        "normalized_completions": [
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=[1, 2])",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=[1, 2])",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=[1, 2])",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=[1, 2])",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=[1, 2])",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=[1, 2])",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=[1, 2])",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=[1, 2])",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=[1, 2])",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=[1, 2])",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=[1, 2])",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=[1, 2])",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=[1, 2])",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=[1, 2])",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=(1, 2))",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=[1, 2])",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=[1, 2])",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=[1, 2])",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=[1, 2])",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=[1, 2])",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=[1, 2])",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=[1, 2])",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=[1, 2])",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=[1, 2])",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=[1, 2])",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=[1, 2])",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=[1, 2])",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=[1, 2])",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=[1, 2])",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=[1, 2])"
        ],
        "tf_operators": {
            "tf.reduce_sum": 30
        },
        "coverage_percentage": 100.0,
        "total_covered": 1,
        "total_in_target": 1,
        "parsed_constants": [
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ]
        ],
        "all_constants": [
            1,
            2
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 0,
            "tf_bool": 0,
            "axis": 29,
            "common": 29,
            "tf_float32": 0,
            "shape_tuple": 0,
            "shape": 0,
            "tf_int64": 0,
            "provided": 0,
            "input_var": 30
        }
    },
    {
        "name": "stackoverflow_27",
        "description": "boolean tensor with 1 at the indices in the input tensor",
        "target_program": "tf.cast(tf.reduce_max(tf.one_hot(in1, in2), axis=0), tf.int32)",
        "source": "https://stackoverflow.com/questions/54225704/how-do-i-get-a-tensor-representing-the-on-positions-in-the-original-tensor",
        "constants": "[]",
        "examples": {
            "inputs": "[[0, 3, 5, 6],8,]",
            "outputs": "[1, 0, 0, 1, 0, 1, 1, 0]"
        },
        "completions": [
            "```python\n    return tf.cast(tf.reduce_sum(tf.one_hot(in1, in2), axis=0), tf.int32)\n```",
            "```python\n    return tf.cast(tf.scatter_nd(tf.expand_dims(in1, 1), tf.ones_like(in1), [in2]), tf.bool)\n```",
            "```python\n    return tf.squeeze(tf.one_hot(in1, in2), axis=0)\n```",
            "```\n    return tf.cast(tf.sequence_mask(in1 + 1, in2) - tf.sequence_mask(in1, in2), tf.int32)\n```",
            "```python\n    return tf.squeeze(tf.one_hot(in1, in2, on_value=1, off_value=0, dtype=tf.int32))\n```",
            "```python\n    return tf.cast(tf.one_hot(in1, in2), tf.bool)\n```",
            "```\n    return tf.cast(tf.reduce_sum(tf.one_hot(in1, in2), axis=0), tf.bool)\n```",
            "```python\n    return tf.cast(tf.reduce_any(tf.equal(tf.range(in2), tf.expand_dims(in1, 1)), axis=0), tf.int32)\n```",
            "```python\n    return tf.cast(tf.scatter_nd(tf.expand_dims(in1, 1), tf.ones_like(in1), [in2]), tf.bool)\n```",
            "```python\n    return tf.cast(tf.one_hot(in1, in2, dtype=tf.bool), tf.int32)\n```",
            "```\n    return tf.sequence_mask(in1 + 1, in2)[0]\n```",
            "```python\n    return tf.cast(tf.reduce_sum(tf.one_hot(in1, in2), axis=0), tf.int32)\n```",
            "```python\n    return tf.cast(tf.reduce_sum(tf.one_hot(in1, in2), axis=0), tf.int32)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.reduce_any(tf.equal(tf.range(in2), tf.expand_dims(in1, 1)), axis=0)\n```",
            "```\n    return tf.sequence_mask(in1+1, in2)[-1]\n```",
            "```\n    return tf.cast(tf.reduce_sum(tf.one_hot(in1, in2), axis=0), tf.int32)\n```",
            "```python\n    return tf.cast(tf.concat([tf.one_hot(in1, in2), tf.zeros([in2 - tf.reduce_max(in1) - 1])], axis=0), tf.int32)\n```",
            "```python\n    return tf.cast(tf.reduce_sum(tf.one_hot(in1, in2), axis=0), tf.int32)\n```",
            "```python\n    return tf.cast(tf.sequence_mask(in1 + 1, in2), tf.int32)\n```",
            "```python\n    return tf.cast(tf.reduce_sum(tf.one_hot(in1, in2), axis=0), tf.int32)\n```",
            "```python\n    return tf.cast(tf.sequence_mask(in1, in2), tf.int32)\n```",
            "```python\n    return tf.squeeze(tf.gather(tf.one_hot(in1, in2), tf.range(in2)), axis=0)\n```",
            "```python\n    return tf.cast(tf.scatter_nd(tf.expand_dims(in1, 1), tf.ones(tf.shape(in1)), [in2]), tf.bool)\n```",
            "```python\n    return tf.cast(tf.reduce_sum(tf.one_hot(in1, in2), axis=0), tf.int32)\n```",
            "```python\n    return tf.cast(tf.scatter_nd(tf.expand_dims(in1, 1), tf.ones_like(in1), [in2]), tf.int32)\n```",
            "```python\n    return tf.cast(tf.reduce_sum(tf.one_hot(in1, in2), axis=0), tf.int32)\n```",
            "```python\n    return tf.sequence_mask(in1 + 1, in2)[-1]\n```",
            "```python\n    return tf.cast(tf.scatter_nd(tf.expand_dims(in1, axis=1), tf.ones_like(in1), [in2]), tf.bool)\n```",
            "```python\n    return tf.cast(tf.reduce_sum(tf.one_hot(in1, in2), axis=0), tf.int32)\n```",
            "```python\n    return tf.squeeze(tf.cast(tf.one_hot(in1, in2), tf.bool))\n```"
        ],
        "normalized_completions": [
            "def transform(in1, in2):\n    return tf.cast(tf.reduce_sum(tf.one_hot(in1, in2), axis=0), tf.int32)",
            "def transform(in1, in2):\n    return tf.cast(tf.scatter_nd(tf.expand_dims(in1, 1), tf.ones_like(in1), [in2]), tf.bool)",
            "def transform(in1, in2):\n    return tf.squeeze(tf.one_hot(in1, in2), axis=0)",
            "def transform(in1, in2):\n    return tf.cast(tf.sequence_mask(in1 + 1, in2) - tf.sequence_mask(in1, in2), tf.int32)",
            "def transform(in1, in2):\n    return tf.squeeze(tf.one_hot(in1, in2, on_value=1, off_value=0, dtype=tf.int32))",
            "def transform(in1, in2):\n    return tf.cast(tf.one_hot(in1, in2), tf.bool)",
            "def transform(in1, in2):\n    return tf.cast(tf.reduce_sum(tf.one_hot(in1, in2), axis=0), tf.bool)",
            "def transform(in1, in2):\n    return tf.cast(tf.reduce_any(tf.equal(tf.range(in2), tf.expand_dims(in1, 1)), axis=0), tf.int32)",
            "def transform(in1, in2):\n    return tf.cast(tf.scatter_nd(tf.expand_dims(in1, 1), tf.ones_like(in1), [in2]), tf.bool)",
            "def transform(in1, in2):\n    return tf.cast(tf.one_hot(in1, in2, dtype=tf.bool), tf.int32)",
            "def transform(in1, in2):\n    return tf.sequence_mask(in1 + 1, in2)[0]",
            "def transform(in1, in2):\n    return tf.cast(tf.reduce_sum(tf.one_hot(in1, in2), axis=0), tf.int32)",
            "def transform(in1, in2):\n    return tf.cast(tf.reduce_sum(tf.one_hot(in1, in2), axis=0), tf.int32)",
            "def transform(in1, in2):\n    return tf.reduce_any(tf.equal(tf.range(in2), tf.expand_dims(in1, 1)), axis=0)",
            "def transform(in1, in2):\n    return tf.sequence_mask(in1+1, in2)[-1]",
            "def transform(in1, in2):\n    return tf.cast(tf.reduce_sum(tf.one_hot(in1, in2), axis=0), tf.int32)",
            "def transform(in1, in2):\n    return tf.cast(tf.concat([tf.one_hot(in1, in2), tf.zeros([in2 - tf.reduce_max(in1) - 1])], axis=0), tf.int32)",
            "def transform(in1, in2):\n    return tf.cast(tf.reduce_sum(tf.one_hot(in1, in2), axis=0), tf.int32)",
            "def transform(in1, in2):\n    return tf.cast(tf.sequence_mask(in1 + 1, in2), tf.int32)",
            "def transform(in1, in2):\n    return tf.cast(tf.reduce_sum(tf.one_hot(in1, in2), axis=0), tf.int32)",
            "def transform(in1, in2):\n    return tf.cast(tf.sequence_mask(in1, in2), tf.int32)",
            "def transform(in1, in2):\n    return tf.squeeze(tf.gather(tf.one_hot(in1, in2), tf.range(in2)), axis=0)",
            "def transform(in1, in2):\n    return tf.cast(tf.scatter_nd(tf.expand_dims(in1, 1), tf.ones(tf.shape(in1)), [in2]), tf.bool)",
            "def transform(in1, in2):\n    return tf.cast(tf.reduce_sum(tf.one_hot(in1, in2), axis=0), tf.int32)",
            "def transform(in1, in2):\n    return tf.cast(tf.scatter_nd(tf.expand_dims(in1, 1), tf.ones_like(in1), [in2]), tf.int32)",
            "def transform(in1, in2):\n    return tf.cast(tf.reduce_sum(tf.one_hot(in1, in2), axis=0), tf.int32)",
            "def transform(in1, in2):\n    return tf.sequence_mask(in1 + 1, in2)[-1]",
            "def transform(in1, in2):\n    return tf.cast(tf.scatter_nd(tf.expand_dims(in1, axis=1), tf.ones_like(in1), [in2]), tf.bool)",
            "def transform(in1, in2):\n    return tf.cast(tf.reduce_sum(tf.one_hot(in1, in2), axis=0), tf.int32)",
            "def transform(in1, in2):\n    return tf.squeeze(tf.cast(tf.one_hot(in1, in2), tf.bool))"
        ],
        "tf_operators": {
            "tf.reduce_sum": 10,
            "tf.int32": 17,
            "tf.cast": 23,
            "tf.one_hot": 17,
            "tf.scatter_nd": 5,
            "tf.expand_dims": 7,
            "tf.ones_like": 4,
            "tf.bool": 8,
            "tf.squeeze": 4,
            "tf.sequence_mask": 6,
            "tf.equal": 2,
            "tf.range": 3,
            "tf.reduce_any": 2,
            "tf.zeros": 1,
            "tf.reduce_max": 1,
            "tf.concat": 1,
            "tf.gather": 1,
            "tf.shape": 1,
            "tf.ones": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 4,
        "total_in_target": 4,
        "parsed_constants": [
            [
                0
            ],
            [
                1
            ],
            [
                0
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [],
            [
                0
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [],
            [
                1,
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                -1
            ],
            [
                0
            ],
            [
                1,
                0
            ],
            [
                0
            ],
            [
                1
            ],
            [
                0
            ],
            [],
            [
                0
            ],
            [
                1
            ],
            [
                0
            ],
            [
                1
            ],
            [
                0
            ],
            [
                1,
                -1
            ],
            [
                1
            ],
            [
                0
            ],
            []
        ],
        "all_constants": [
            0,
            1,
            -1
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 17,
            "tf_bool": 8,
            "axis": 0,
            "common": 33,
            "tf_float32": 0,
            "shape_tuple": 0,
            "shape": 0,
            "tf_int64": 0,
            "provided": 0,
            "input_var": 70
        }
    },
    {
        "name": "stackoverflow_28",
        "description": "extract columns from a 3D tensor given column indices",
        "target_program": "tf.squeeze(tf.gather(in1, tf.expand_dims(in2, 1), axis=-1, batch_dims=1))",
        "source": "https://stackoverflow.com/questions/54274074/selecting-columns-from-3d-tensor-according-to-a-1d-tensor-of-indices-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[[[5, 3],  [0, 2]], [[7, 4],  [5, 1]], [[10, 20],  [15, 30]], [[11, 16],  [14, 12]], [[-2, -7],  [-4, 6]]],[1, 0, 1, 1, 0],]",
            "outputs": "[[3, 2], [7, 5], [20, 30], [16, 12], [-2, -4]]"
        },
        "completions": [
            "```python\nreturn tf.gather(in1, in2, axis=1)\n```",
            "```python\n    return tf.gather(in1, in2, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather(in1, in2, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather(in1, in2, axis=1)\n```",
            "```python\n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=1))\n```",
            "```python\n    return tf.gather(in1, in2, axis=1, batch_dims=1)\n```",
            "```python\n    idx = tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=1)\n    return tf.gather_nd(in1, idx)\n```",
            "```python\n    idx = tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=1)\n    return tf.gather_nd(in1, idx)\n```",
            "```python\n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=1))\n```",
            "```python\n    return tf.gather(in1, in2, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather(in1, in2, axis=2, batch_dims=1)\n```",
            "```python\n    return tf.gather(in1, in2, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather(in1, in2, axis=1, batch_dims=1)\n```",
            "```python\n    idx = tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=1)\n    return tf.gather_nd(in1, idx)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.gather(in1, in2, axis=0, batch_dims=1)\n```",
            "```python\n    return tf.gather(in1, in2, axis=2, batch_dims=1)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.gather(in1, in2, axis=1)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.gather(in1, in2, axis=1, batch_dims=1)\n```",
            "```python\ndef transform(in1, in2):\n    idx = tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=1)\n    return tf.gather_nd(in1, idx)\n```",
            "```python\ndef transform(in1, in2):\n    batch_dims = tf.range(tf.shape(in1)[0])\n    indices = tf.stack([batch_dims, in2], axis=1)\n    return tf.gather_nd(in1, indices)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.gather(in1, in2, axis=1, batch_dims=1)\n```",
            "```python\ndef transform(in1, in2):\n    idx = tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=1)\n    return tf.gather_nd(in1, idx)\n```",
            "```python\ndef transform(in1, in2):\n    indices = tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1)\n    return tf.gather_nd(in1, indices)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.stack([tf.gather(in1[i], idx) for i, idx in enumerate(in2)])\n```",
            "```python\ndef transform(in1, in2):\n    return tf.gather(in1, in2, axis=1, batch_dims=1)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.gather(in1, in2, axis=1, batch_dims=1)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.gather(in1, in2, axis=1, batch_dims=1)\n```",
            "```python\ndef transform(in1, in2):\n    indices = tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=1)\n    return tf.gather_nd(in1, indices)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.gather(in1, in2, axis=1, batch_dims=1)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=1))\n```"
        ],
        "normalized_completions": [
            "def transform(in1, in2):\n    return tf.gather(in1, in2, axis=1)",
            "def transform(in1, in2):\n    return tf.gather(in1, in2, axis=1, batch_dims=1)",
            "def transform(in1, in2):\n    return tf.gather(in1, in2, axis=1, batch_dims=1)",
            "def transform(in1, in2):\n    return tf.gather(in1, in2, axis=1)",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=1))",
            "def transform(in1, in2):\n    return tf.gather(in1, in2, axis=1, batch_dims=1)",
            "def transform(in1, in2):\n    idx = tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=1)\n    return tf.gather_nd(in1, idx)",
            "def transform(in1, in2):\n    idx = tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=1)\n    return tf.gather_nd(in1, idx)",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=1))",
            "def transform(in1, in2):\n    return tf.gather(in1, in2, axis=1, batch_dims=1)",
            "def transform(in1, in2):\n    return tf.gather(in1, in2, axis=2, batch_dims=1)",
            "def transform(in1, in2):\n    return tf.gather(in1, in2, axis=1, batch_dims=1)",
            "def transform(in1, in2):\n    return tf.gather(in1, in2, axis=1, batch_dims=1)",
            "def transform(in1, in2):\n    idx = tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=1)\n    return tf.gather_nd(in1, idx)",
            "def transform(in1, in2):\n    return tf.gather(in1, in2, axis=0, batch_dims=1)",
            "def transform(in1, in2):\n    return tf.gather(in1, in2, axis=2, batch_dims=1)",
            "def transform(in1, in2):\n    return tf.gather(in1, in2, axis=1)",
            "def transform(in1, in2):\n    return tf.gather(in1, in2, axis=1, batch_dims=1)",
            "def transform(in1, in2):\n    idx = tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=1)\n    return tf.gather_nd(in1, idx)",
            "def transform(in1, in2):\n    batch_dims = tf.range(tf.shape(in1)[0])\n    indices = tf.stack([batch_dims, in2], axis=1)\n    return tf.gather_nd(in1, indices)",
            "def transform(in1, in2):\n    return tf.gather(in1, in2, axis=1, batch_dims=1)",
            "def transform(in1, in2):\n    idx = tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=1)\n    return tf.gather_nd(in1, idx)",
            "def transform(in1, in2):\n    indices = tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1)\n    return tf.gather_nd(in1, indices)",
            "def transform(in1, in2):\n    return tf.stack([tf.gather(in1[i], idx) for i, idx in enumerate(in2)])",
            "def transform(in1, in2):\n    return tf.gather(in1, in2, axis=1, batch_dims=1)",
            "def transform(in1, in2):\n    return tf.gather(in1, in2, axis=1, batch_dims=1)",
            "def transform(in1, in2):\n    return tf.gather(in1, in2, axis=1, batch_dims=1)",
            "def transform(in1, in2):\n    indices = tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=1)\n    return tf.gather_nd(in1, indices)",
            "def transform(in1, in2):\n    return tf.gather(in1, in2, axis=1, batch_dims=1)",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=1))"
        ],
        "tf_operators": {
            "tf.gather": 19,
            "tf.shape": 11,
            "tf.range": 11,
            "tf.gather_nd": 11,
            "tf.stack": 12
        },
        "coverage_percentage": 33.33333333333333,
        "total_covered": 1,
        "total_in_target": 3,
        "parsed_constants": [
            [
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1
            ],
            [
                0,
                1
            ],
            [
                1,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                1,
                1
            ],
            [
                2,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                2,
                1
            ],
            [
                1
            ],
            [
                1,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                1,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                0,
                1
            ],
            [
                1,
                1
            ],
            [
                0,
                1
            ]
        ],
        "all_constants": [
            0,
            1,
            2
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 5,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 5,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 5,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 0,
            "tf_bool": 0,
            "axis": 2,
            "common": 53,
            "tf_float32": 0,
            "shape_tuple": 0,
            "shape": 0,
            "tf_int64": 0,
            "provided": 0,
            "input_var": 77
        }
    },
    {
        "name": "stackoverflow_29",
        "description": "place continuous values into buckets given bucket boundaries",
        "target_program": "tf.searchsorted(in1, in2, side='left')",
        "source": "https://stackoverflow.com/questions/54155085/bucketing-continous-value-tensors-in-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[-1.0, -0.8, -0.6, -0.4, -0.2, 0.0, 0.2, 0.4, 0.6, 0.8, 1.0],[0.1, -10, -0.1, 1.1, 0.41],]",
            "outputs": "[6, 0, 5, 11, 8]"
        },
        "completions": [
            "```python\n    return tf.searchsorted(in1, in2, side='right')\n```",
            "```\n    return tf.searchsorted(in1, in2, side='right')\n```",
            "```\n    return tf.searchsorted(in1, in2, side='right')\n```",
            "```python\ndef transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='right')\n```",
            "```python\n    return tf.searchsorted(in1, in2, side='right')\n```",
            "```python\n    return tf.searchsorted(in1, in2, side='right')\n```",
            "```python\n    return tf.searchsorted(in1, in2, side='right')\n```",
            "```python\n    return tf.searchsorted(in1, in2, side='right')\n```",
            "```python\n    return tf.searchsorted(in1, in2, side='right')\n```",
            "```python\n    return tf.searchsorted(in1, in2, side='right')\n```",
            "```python\n    return tf.searchsorted(in1, in2, side='right')\n```",
            "```python\n    return tf.searchsorted(in1, in2, side='right')\n```",
            "```python\n    return tf.searchsorted(in1, in2, side='right')\n```",
            "```python\n    return tf.searchsorted(in1, in2, side='right')\n```",
            "```python\n    return tf.searchsorted(in1, in2, side='right')\n```",
            "```python\n    return tf.searchsorted(in1, in2, side='right')\n```",
            "```python\n    return tf.searchsorted(in1, in2, side='right')\n```",
            "```python\n    return tf.searchsorted(in1, in2, side='right')\n```",
            "```python\n    return tf.searchsorted(in1, in2)\n```",
            "```python\n    return tf.searchsorted(in1, in2, side='right')\n```",
            "```python\n    return tf.searchsorted(in1, in2, side='right')\n```",
            "```python\n    return tf.searchsorted(in1, in2, side='right')\n```",
            "```python\ndef transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='right')\n```",
            "```python\n    return tf.searchsorted(in1, in2, side='right')\n```",
            "```python\n    return tf.searchsorted(in1, in2, side='left')\n```",
            "```python\n    return tf.searchsorted(in1, in2, side='right')\n```",
            "```python\n    return tf.searchsorted(in1, in2, side='right')\n```",
            "```python\n    return tf.searchsorted(in1, in2, side='right')\n```",
            "```python\n    return tf.searchsorted(in1, in2, side='right')\n```",
            "```python\n    return tf.searchsorted(in1, in2, side='right')\n```"
        ],
        "normalized_completions": [
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='right')",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='right')",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='right')",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='right')",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='right')",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='right')",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='right')",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='right')",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='right')",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='right')",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='right')",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='right')",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='right')",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='right')",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='right')",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='right')",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='right')",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='right')",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2)",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='right')",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='right')",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='right')",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='right')",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='right')",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='left')",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='right')",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='right')",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='right')",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='right')",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='right')"
        ],
        "tf_operators": {
            "tf.searchsorted": 30
        },
        "coverage_percentage": 100.0,
        "total_covered": 1,
        "total_in_target": 1,
        "parsed_constants": [
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            []
        ],
        "all_constants": [],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 0,
            "tf_bool": 0,
            "axis": 0,
            "common": 0,
            "tf_float32": 0,
            "shape_tuple": 0,
            "shape": 0,
            "tf_int64": 0,
            "provided": 0,
            "input_var": 60
        }
    },
    {
        "name": "stackoverflow_30",
        "description": "compute Euclidean distance between two tensors",
        "target_program": "tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))), axis=2))",
        "source": "https://stackoverflow.com/questions/54147780/tensorflow-how-to-calculate-the-euclidean-distance-between-two-tensor",
        "constants": "[]",
        "examples": {
            "inputs": "[[[1., 2.], [3., 4.], [5., 6.]],[[9., 4.], [8., 5.], [7., 6.]],]",
            "outputs": "[[math.sqrt(68), math.sqrt(58), math.sqrt(52)],    [math.sqrt(36), math.sqrt(26), math.sqrt(20)],    [math.sqrt(20), math.sqrt(10), math.sqrt(4)]]"
        },
        "completions": [
            "```\n    diff = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\n    return tf.sqrt(tf.reduce_sum(diff ** 2, axis=-1))\n```",
            "```python\n    return tf.sqrt(tf.add_n([tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0))]))\n```",
            "```python\n    diff = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\n    dist = tf.sqrt(tf.reduce_sum(tf.square(diff), axis=2))\n    return dist\n```",
            "```python\n    return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - in2), axis=2))\n```",
            "```python\n    diff = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\n    return tf.sqrt(tf.reduce_sum(tf.square(diff), axis=2))\n```",
            "```python\n    return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2))\n```",
            "```python\n    return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - in2), axis=2))\n```",
            "```python\n    return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2))\n```",
            "```python\n    diffs = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\n    return tf.sqrt(tf.reduce_sum(tf.square(diffs), axis=2))\n```",
            "```python\nreturn tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2))\n```",
            "```python\ndef transform(in1, in2):\n    diff = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\n    return tf.sqrt(tf.reduce_sum(tf.square(diff), axis=2))\n```",
            "```python\nreturn tf.sqrt(tf.expand_dims(tf.reduce_sum(tf.square(in1), axis=1), 1) +\n               tf.reduce_sum(tf.square(in2), axis=1) -\n               2 * tf.matmul(in1, tf.transpose(in2)))\n```",
            "```python\n    d = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\n    return tf.sqrt(tf.reduce_sum(tf.square(d), axis=2))\n```",
            "```python\n    return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2))\n```",
            "```python\n    diff = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\n    return tf.sqrt(tf.reduce_sum(tf.square(diff), axis=2))\n```",
            "```python\n    return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2))\n```",
            "```python\n    return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - in2), axis=2))\n```",
            "```python\ndef transform(in1, in2):\n    diff = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\n    dist = tf.sqrt(tf.reduce_sum(tf.square(diff), axis=2))\n    return dist\n```",
            "```python\ndef transform(in1, in2):\n    diff = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\n    dist = tf.sqrt(tf.reduce_sum(diff**2, axis=-1))\n    return dist\n```",
            "```\ndef transform(in1, in2):\n    return tf.sqrt(tf.add_n([tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0))]))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.sqrt(tf.reduce_sum(tf.square(in1[:, None] - in2), axis=2))\n```",
            "```python\n    return tf.sqrt(tf.add_n([tf.square(tf.expand_dims(in1, 1) - in2)]))\n```",
            "```python\ndef transform(in1, in2):\n    diff = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\n    sq_diff = tf.square(diff)\n    sum_sq_diff = tf.reduce_sum(sq_diff, axis=2)\n    return tf.sqrt(sum_sq_diff)\n```",
            "```python\ndef transform(in1, in2):\n    diff = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\n    return tf.sqrt(tf.reduce_sum(tf.square(diff), axis=2))\n```",
            "```python\ndef transform(in1, in2):\n    diff = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\n    dist = tf.sqrt(tf.reduce_sum(tf.square(diff), axis=-1))\n    return dist\n```",
            "```python\n    diff = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\n    return tf.sqrt(tf.reduce_sum(tf.square(diff), axis=2))\n```",
            "def transform(in1, in2):\n    return tf.sqrt(tf.add_n([tf.square(tf.expand_dims(in1, 1) - in2)]))",
            "```python\ndef transform(in1, in2):\n    diff = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\n    dist_squared = tf.reduce_sum(tf.square(diff), axis=-1)\n    return tf.sqrt(dist_squared)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - in2), axis=2))\n```",
            "```python\ndef transform(in1, in2):\n    diff = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\n    return tf.sqrt(tf.reduce_sum(tf.square(diff), axis=-1))\n```"
        ],
        "normalized_completions": [
            "def transform(in1, in2):\n    diff = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\n    return tf.sqrt(tf.reduce_sum(diff ** 2, axis=-1))",
            "def transform(in1, in2):\n    return tf.sqrt(tf.add_n([tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0))]))",
            "def transform(in1, in2):\n    diff = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\n    dist = tf.sqrt(tf.reduce_sum(tf.square(diff), axis=2))\n    return dist",
            "def transform(in1, in2):\n    return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - in2), axis=2))",
            "def transform(in1, in2):\n    diff = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\n    return tf.sqrt(tf.reduce_sum(tf.square(diff), axis=2))",
            "def transform(in1, in2):\n    return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2))",
            "def transform(in1, in2):\n    return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - in2), axis=2))",
            "def transform(in1, in2):\n    return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2))",
            "def transform(in1, in2):\n    diffs = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\n    return tf.sqrt(tf.reduce_sum(tf.square(diffs), axis=2))",
            "def transform(in1, in2):\n    return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2))",
            "def transform(in1, in2):\n    diff = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\n    return tf.sqrt(tf.reduce_sum(tf.square(diff), axis=2))",
            "def transform(in1, in2):\n               return tf.sqrt(tf.expand_dims(tf.reduce_sum(tf.square(in1), axis=1), 1) +\n                              tf.reduce_sum(tf.square(in2), axis=1) -\n                              2 * tf.matmul(in1, tf.transpose(in2)))",
            "def transform(in1, in2):\n    d = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\n    return tf.sqrt(tf.reduce_sum(tf.square(d), axis=2))",
            "def transform(in1, in2):\n    return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2))",
            "def transform(in1, in2):\n    diff = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\n    return tf.sqrt(tf.reduce_sum(tf.square(diff), axis=2))",
            "def transform(in1, in2):\n    return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2))",
            "def transform(in1, in2):\n    return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - in2), axis=2))",
            "def transform(in1, in2):\n    diff = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\n    dist = tf.sqrt(tf.reduce_sum(tf.square(diff), axis=2))\n    return dist",
            "def transform(in1, in2):\n    diff = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\n    dist = tf.sqrt(tf.reduce_sum(diff**2, axis=-1))\n    return dist",
            "def transform(in1, in2):\n    return tf.sqrt(tf.add_n([tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0))]))",
            "def transform(in1, in2):\n    return tf.sqrt(tf.reduce_sum(tf.square(in1[:, None] - in2), axis=2))",
            "def transform(in1, in2):\n    return tf.sqrt(tf.add_n([tf.square(tf.expand_dims(in1, 1) - in2)]))",
            "def transform(in1, in2):\n    diff = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\n    sq_diff = tf.square(diff)\n    sum_sq_diff = tf.reduce_sum(sq_diff, axis=2)\n    return tf.sqrt(sum_sq_diff)",
            "def transform(in1, in2):\n    diff = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\n    return tf.sqrt(tf.reduce_sum(tf.square(diff), axis=2))",
            "def transform(in1, in2):\n    diff = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\n    dist = tf.sqrt(tf.reduce_sum(tf.square(diff), axis=-1))\n    return dist",
            "def transform(in1, in2):\n    diff = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\n    return tf.sqrt(tf.reduce_sum(tf.square(diff), axis=2))",
            "def transform(in1, in2):\n    return tf.sqrt(tf.add_n([tf.square(tf.expand_dims(in1, 1) - in2)]))",
            "def transform(in1, in2):\n    diff = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\n    dist_squared = tf.reduce_sum(tf.square(diff), axis=-1)\n    return tf.sqrt(dist_squared)",
            "def transform(in1, in2):\n    return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - in2), axis=2))",
            "def transform(in1, in2):\n    diff = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\n    return tf.sqrt(tf.reduce_sum(tf.square(diff), axis=-1))"
        ],
        "tf_operators": {
            "tf.expand_dims": 29,
            "tf.sqrt": 30,
            "tf.reduce_sum": 26,
            "tf.add_n": 4,
            "tf.square": 28,
            "tf.transpose": 1,
            "tf.matmul": 1
        },
        "coverage_percentage": 80.0,
        "total_covered": 4,
        "total_in_target": 5,
        "parsed_constants": [
            [
                1,
                0,
                2,
                -1
            ],
            [
                1,
                0
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                1,
                1,
                2
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                0,
                2,
                -1
            ],
            [
                1,
                0
            ],
            [
                2
            ],
            [
                1
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                0,
                -1
            ],
            [
                1,
                0,
                2
            ],
            [
                1
            ],
            [
                1,
                0,
                -1
            ],
            [
                1,
                2
            ],
            [
                1,
                0,
                -1
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            -1
        ],
        "constant_counts": [
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 0,
            "tf_bool": 0,
            "axis": 23,
            "common": 58,
            "tf_float32": 0,
            "shape_tuple": 0,
            "shape": 0,
            "tf_int64": 0,
            "provided": 0,
            "input_var": 62
        }
    },
    {
        "name": "stackoverflow_31",
        "description": "squared error between two tensors, one being a sparse tensor",
        "target_program": "tf.reduce_sum(tf.square(tf.subtract(in2, tf.sparse.to_dense(in1))))",
        "source": "https://stackoverflow.com/questions/45032668/tensorflow-how-to-compute-the-square-error-between-a-tensor-and-a-sparse-tensor",
        "constants": "[]",
        "examples": {
            "inputs": "tf.SparseTensor(indices=[[0, 0], [0, 1], [1, 1]], values=[1.0, 1.5, -2.0], dense_shape=[2, 2]), [[3.0, 1.0], [0.2, -1.0]],",
            "outputs": "5.29"
        },
        "completions": [
            "```python\n    dense_in1 = tf.sparse.to_dense(in1, default_value=0.0)\n    squared_diff = tf.math.squared_difference(dense_in1, in2)\n    return tf.reduce_sum(squared_diff)\n```",
            "```python\n    dense_in1 = tf.sparse.to_dense(in1, default_value=0)\n    squared_diff = tf.square(tf.subtract(dense_in1, in2))\n    return tf.reduce_sum(squared_diff)\n```",
            "```python\n    dense_in1 = tf.sparse.to_dense(in1, default_value=0.0)\n    squared_diff = tf.math.squared_difference(dense_in1, in2)\n    return tf.reduce_sum(squared_diff)\n```",
            "```python\n    dense_in1 = tf.sparse.to_dense(in1, default_value=0.0)\n    squared_diff = tf.math.squared_difference(dense_in1, in2)\n    return tf.reduce_sum(squared_diff)\n```",
            "```python\n    dense_in1 = tf.sparse.to_dense(in1)\n    squared_error = tf.math.squared_difference(dense_in1, in2)\n    return tf.reduce_sum(squared_error)\n```",
            "```python\n    return tf.reduce_sum(tf.square(tf.subtract(tf.sparse.to_dense(in1, 0.), in2)))\n```",
            "```python\n    sparse_dense = tf.sparse.to_dense(in1)\n    squared_diff = tf.math.squared_difference(sparse_dense, in2)\n    return tf.reduce_sum(squared_diff)\n```",
            "```python\n    dense_in1 = tf.sparse.to_dense(in1, default_value=0.0)\n    error = tf.math.squared_difference(dense_in1, in2)\n    return tf.reduce_sum(error)\n```",
            "```python\n    dense_in1 = tf.sparse.to_dense(in1)\n    squared_diff = tf.math.squared_difference(dense_in1, in2)\n    return tf.reduce_sum(squared_diff)\n```",
            "```python\n    in1_dense = tf.sparse.to_dense(in1, default_value=0.0)\n    return tf.reduce_sum(tf.math.squared_difference(in1_dense, in2))\n```",
            "```python\n    in1_dense = tf.sparse.to_dense(in1, default_value=0.0)\n    return tf.reduce_sum(tf.math.squared_difference(in1_dense, in2))\n```",
            "```python\n    dense_in1 = tf.sparse.to_dense(in1, default_value=0.0)\n    squared_diff = tf.math.squared_difference(dense_in1, in2)\n    return tf.reduce_sum(squared_diff)\n```",
            "```python\n    sp_dense = tf.sparse.to_dense(in1, default_value=0.0)\n    squared_diff = tf.math.squared_difference(sp_dense, in2)\n    return tf.reduce_sum(squared_diff)\n```",
            "```python\n    dense_in1 = tf.sparse.to_dense(in1, default_value=0)\n    squared_diff = tf.math.squared_difference(dense_in1, in2)\n    return tf.reduce_sum(squared_diff)\n```",
            "```python\n    st_dense = tf.sparse.to_dense(in1)\n    squared_diff = tf.math.squared_difference(st_dense, in2)\n    return tf.reduce_sum(squared_diff)\n```",
            "```python\n    dense_in1 = tf.sparse.to_dense(in1)\n    squared_diff = tf.math.squared_difference(dense_in1, in2)\n    return tf.reduce_sum(squared_diff)\n```",
            "```python\n    sp_dense = tf.sparse.to_dense(in1, default_value=0.0)\n    squared_diff = tf.math.squared_difference(sp_dense, in2)\n    return tf.reduce_sum(squared_diff)\n```",
            "```python\n    dense_in1 = tf.sparse.to_dense(in1)\n    squared_diff = tf.math.squared_difference(dense_in1, in2)\n    return tf.reduce_sum(squared_diff)\n```",
            "```python\n    dense_in1 = tf.sparse.to_dense(in1, 0.0)\n    squared_diff = tf.math.squared_difference(dense_in1, in2)\n    return tf.reduce_sum(squared_diff)\n```",
            "```python\n    dense_in1 = tf.sparse.to_dense(in1, default_value=0.0)\n    squared_diff = tf.math.squared_difference(dense_in1, in2)\n    return tf.reduce_sum(squared_diff)\n```",
            "```\n    dense_in1 = tf.sparse.to_dense(in1, default_value=0)\n    squared_error = tf.reduce_sum(tf.square(tf.subtract(dense_in1, in2)))\n    return squared_error\n```",
            "```python\n    sp_dense = tf.sparse.to_dense(in1)\n    sq_diff = tf.math.squared_difference(sp_dense, in2)\n    return tf.reduce_sum(sq_diff)\n```",
            "```python\n    dense_in1 = tf.sparse.to_dense(in1, default_value=0.0)\n    return tf.reduce_sum(tf.square(dense_in1 - in2))\n```",
            "```python\n    dense = tf.sparse.to_dense(in1, default_value=0.0)\n    squared_diff = tf.math.squared_difference(dense, in2)\n    return tf.reduce_sum(squared_diff).numpy()\n```",
            "```python\n    sp_dense = tf.sparse.to_dense(in1, default_value=0.0)\n    squared_diff = tf.square(tf.subtract(sp_dense, in2))\n    return tf.reduce_sum(squared_diff)\n```",
            "```python\n    dense_in1 = tf.sparse.to_dense(in1, default_value=0.0)\n    squared_diff = tf.math.squared_difference(dense_in1, in2)\n    return tf.reduce_sum(squared_diff).numpy()\n```",
            "```python\n    dense_in1 = tf.sparse.to_dense(in1, default_value=0.0)\n    squared_diff = tf.square(tf.subtract(dense_in1, in2))\n    return tf.reduce_sum(squared_diff)\n```",
            "```python\n    in1_dense = tf.sparse.to_dense(in1)\n    squared_diff = tf.math.squared_difference(in1_dense, in2)\n    return tf.reduce_sum(squared_diff)\n```",
            "```python\n    dense_in1 = tf.sparse.to_dense(in1, default_value=0.0)\n    squared_diff = tf.math.squared_difference(dense_in1, in2)\n    return tf.reduce_sum(squared_diff)\n```",
            "```python\n    dense_in1 = tf.sparse.to_dense(in1, default_value=0.0)\n    squared_diff = tf.math.squared_difference(dense_in1, in2)\n    return tf.reduce_sum(squared_diff)\n```"
        ],
        "normalized_completions": [
            null,
            null,
            null,
            null,
            "def transform(in1, in2):\n    dense_in1 = tf.sparse.to_dense(in1)\n    squared_error = tf.math.squared_difference(dense_in1, in2)\n    return tf.reduce_sum(squared_error)",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.square(tf.subtract(tf.sparse.to_dense(in1, 0.), in2)))",
            "def transform(in1, in2):\n    sparse_dense = tf.sparse.to_dense(in1)\n    squared_diff = tf.math.squared_difference(sparse_dense, in2)\n    return tf.reduce_sum(squared_diff)",
            null,
            "def transform(in1, in2):\n    dense_in1 = tf.sparse.to_dense(in1)\n    squared_diff = tf.math.squared_difference(dense_in1, in2)\n    return tf.reduce_sum(squared_diff)",
            null,
            null,
            null,
            null,
            null,
            "def transform(in1, in2):\n    st_dense = tf.sparse.to_dense(in1)\n    squared_diff = tf.math.squared_difference(st_dense, in2)\n    return tf.reduce_sum(squared_diff)",
            "def transform(in1, in2):\n    dense_in1 = tf.sparse.to_dense(in1)\n    squared_diff = tf.math.squared_difference(dense_in1, in2)\n    return tf.reduce_sum(squared_diff)",
            null,
            "def transform(in1, in2):\n    dense_in1 = tf.sparse.to_dense(in1)\n    squared_diff = tf.math.squared_difference(dense_in1, in2)\n    return tf.reduce_sum(squared_diff)",
            "def transform(in1, in2):\n    dense_in1 = tf.sparse.to_dense(in1, 0.0)\n    squared_diff = tf.math.squared_difference(dense_in1, in2)\n    return tf.reduce_sum(squared_diff)",
            null,
            null,
            "def transform(in1, in2):\n    sp_dense = tf.sparse.to_dense(in1)\n    sq_diff = tf.math.squared_difference(sp_dense, in2)\n    return tf.reduce_sum(sq_diff)",
            null,
            null,
            null,
            null,
            null,
            "def transform(in1, in2):\n    in1_dense = tf.sparse.to_dense(in1)\n    squared_diff = tf.math.squared_difference(in1_dense, in2)\n    return tf.reduce_sum(squared_diff)",
            null,
            null
        ],
        "tf_operators": {
            "tf.math.squared_difference": 24,
            "tf.sparse.to_dense": 30,
            "tf.reduce_sum": 30,
            "tf.square": 6,
            "tf.subtract": 5
        },
        "coverage_percentage": 100.0,
        "total_covered": 4,
        "total_in_target": 4,
        "parsed_constants": [
            [],
            [
                0
            ],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [
                0
            ],
            [],
            [],
            [],
            [],
            [],
            [],
            [
                0
            ],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            []
        ],
        "all_constants": [
            0
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 0,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 0,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 0,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 0,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 0,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 0,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 0,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 0,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 0,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 0,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 0,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 0,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 0,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 0,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 0,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 0,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 0,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 0,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 0,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 0,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 0,
            "tf_bool": 0,
            "axis": 0,
            "common": 3,
            "tf_float32": 0,
            "shape_tuple": 0,
            "shape": 0,
            "tf_int64": 0,
            "provided": 0,
            "input_var": 22
        }
    },
    {
        "name": "stackoverflow_32",
        "description": "weighted sum across rows, where the column index is the weight",
        "target_program": "tf.tensordot(in1, tf.cast(tf.range(4), tf.float32), 1)",
        "source": "https://stackoverflow.com/questions/48659449/how-to-compute-the-weighted-sum-of-a-tensor-in-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[[0.1, 0.6, 0.2, 0.1], [0.3, 0.1, 0.4, 0.2], [0.2, 0.1, 0.2, 0.5]],]",
            "outputs": "[1.3, 1.5, 2.0]"
        },
        "completions": [
            "```python\n    weights = tf.range(tf.shape(in1)[1], dtype=in1.dtype)\n    return tf.reduce_sum(in1 * weights, axis=1)\n```",
            "```python\n    weights = tf.range(tf.shape(in1)[1], dtype=in1.dtype)\n    return tf.reduce_sum(in1 * weights, axis=1)\n```",
            "```python\n    return tf.reduce_sum(in1 * tf.range(tf.shape(in1)[1], dtype=in1.dtype), axis=1)\n```",
            "```\n    weights = tf.range(tf.shape(in1)[1], dtype=in1.dtype)\n    return tf.reduce_sum(in1 * weights, axis=1)\n```",
            "```python\n    weights = tf.range(tf.shape(in1)[1], dtype=in1.dtype)\n    return tf.reduce_sum(in1 * weights, axis=1)\n```",
            "```python\n    return tf.reduce_sum(in1 * tf.range(tf.shape(in1)[1], dtype=tf.float32), axis=1)\n```",
            "```python\n    indices = tf.range(tf.shape(in1)[1], dtype=tf.float32)\n    return tf.reduce_sum(tf.multiply(in1, indices), axis=1)\n```",
            "```python\n    indices = tf.range(tf.shape(in1)[1], dtype=tf.float32)\n    return tf.reduce_sum(in1 * indices, axis=1)\n```",
            "```python\n    weights = tf.range(tf.shape(in1)[1], dtype=in1.dtype)\n    return tf.reduce_sum(in1 * weights, axis=1)\n```",
            "```python\n    weights = tf.range(start=0, limit=tf.shape(in1)[1], delta=1, dtype=in1.dtype)\n    return tf.reduce_sum(tf.multiply(in1, weights), axis=1)\n```",
            "```python\n    return tf.reduce_sum(in1 * tf.range(tf.shape(in1)[1], dtype=in1.dtype), axis=1)\n```",
            "```python\n    weights = tf.range(tf.shape(in1)[1], dtype=tf.float32)\n    return tf.reduce_sum(in1 * weights, axis=1)\n```",
            "```python\n    return tf.reduce_sum(in1 * tf.range(tf.shape(in1)[1], dtype=in1.dtype), axis=1)\n```",
            "```python\n    weights = tf.range(tf.shape(in1)[1], dtype=in1.dtype)\n    return tf.reduce_sum(tf.multiply(in1, weights), axis=1)\n```",
            "```python\n    return tf.reduce_sum(tf.multiply(in1, tf.range(tf.shape(in1)[1], dtype=in1.dtype)), axis=1)\n```",
            "```python\n    return tf.reduce_sum(in1 * tf.range(tf.shape(in1)[1]), axis=1)\n```",
            "```python\n    cols = tf.range(4, dtype=tf.float32)\n    return tf.reduce_sum(in1 * cols, axis=1)\n```",
            "```python\n    return tf.reduce_sum(tf.multiply(in1, tf.range(tf.shape(in1)[1], dtype=in1.dtype)), axis=1)\n```",
            "```python\n    weights = tf.range(tf.shape(in1)[1], dtype=in1.dtype)\n    return tf.reduce_sum(tf.multiply(in1, weights), axis=1)\n```",
            "```python\n    return tf.reduce_sum(in1 * tf.range(tf.shape(in1)[1], dtype=tf.float32), axis=1)\n```",
            "```python\n    return tf.reduce_sum(tf.multiply(in1, tf.range(tf.shape(in1)[1])), axis=1)\n```",
            "```python\n    return tf.reduce_sum(in1 * tf.range(tf.shape(in1)[1]), axis=1)\n```",
            "```python\n    return tf.reduce_sum(in1 * tf.range(tf.shape(in1)[1], dtype=tf.float32), axis=1)\n```",
            "```python\n    indices = tf.range(tf.shape(in1)[1])\n    weighted = tf.multiply(in1, indices)\n    return tf.reduce_sum(weighted, axis=1)\n```",
            "```python\n    weights = tf.cast(tf.range(tf.shape(in1)[1]), tf.float32)\n    return tf.reduce_sum(in1 * weights, axis=1)\n```",
            "```python\n    return tf.reduce_sum(tf.multiply(in1, tf.range(tf.shape(in1)[1], dtype=in1.dtype)), axis=1)\n```",
            "```python\n    return tf.reduce_sum(in1 * tf.range(tf.shape(in1)[1], dtype=in1.dtype), axis=1)\n```",
            "```python\n    indices = tf.range(tf.shape(in1)[1], dtype=in1.dtype)\n    return tf.reduce_sum(in1 * indices, axis=1)\n```",
            "```python\n    weights = tf.range(tf.shape(in1)[1], dtype=tf.float32)\n    return tf.reduce_sum(tf.multiply(in1, weights), axis=1)\n```",
            "```python\n    weights = tf.range(tf.shape(in1)[1], dtype=tf.float32)\n    return tf.reduce_sum(in1 * weights, axis=1)\n```"
        ],
        "normalized_completions": [
            "def transform(in1):\n    weights = tf.range(tf.shape(in1)[1], dtype=in1.dtype)\n    return tf.reduce_sum(in1 * weights, axis=1)",
            "def transform(in1):\n    weights = tf.range(tf.shape(in1)[1], dtype=in1.dtype)\n    return tf.reduce_sum(in1 * weights, axis=1)",
            "def transform(in1):\n    return tf.reduce_sum(in1 * tf.range(tf.shape(in1)[1], dtype=in1.dtype), axis=1)",
            "def transform(in1):\n    weights = tf.range(tf.shape(in1)[1], dtype=in1.dtype)\n    return tf.reduce_sum(in1 * weights, axis=1)",
            "def transform(in1):\n    weights = tf.range(tf.shape(in1)[1], dtype=in1.dtype)\n    return tf.reduce_sum(in1 * weights, axis=1)",
            "def transform(in1):\n    return tf.reduce_sum(in1 * tf.range(tf.shape(in1)[1], dtype=tf.float32), axis=1)",
            "def transform(in1):\n    indices = tf.range(tf.shape(in1)[1], dtype=tf.float32)\n    return tf.reduce_sum(tf.multiply(in1, indices), axis=1)",
            "def transform(in1):\n    indices = tf.range(tf.shape(in1)[1], dtype=tf.float32)\n    return tf.reduce_sum(in1 * indices, axis=1)",
            "def transform(in1):\n    weights = tf.range(tf.shape(in1)[1], dtype=in1.dtype)\n    return tf.reduce_sum(in1 * weights, axis=1)",
            "def transform(in1):\n    weights = tf.range(start=0, limit=tf.shape(in1)[1], delta=1, dtype=in1.dtype)\n    return tf.reduce_sum(tf.multiply(in1, weights), axis=1)",
            "def transform(in1):\n    return tf.reduce_sum(in1 * tf.range(tf.shape(in1)[1], dtype=in1.dtype), axis=1)",
            "def transform(in1):\n    weights = tf.range(tf.shape(in1)[1], dtype=tf.float32)\n    return tf.reduce_sum(in1 * weights, axis=1)",
            "def transform(in1):\n    return tf.reduce_sum(in1 * tf.range(tf.shape(in1)[1], dtype=in1.dtype), axis=1)",
            "def transform(in1):\n    weights = tf.range(tf.shape(in1)[1], dtype=in1.dtype)\n    return tf.reduce_sum(tf.multiply(in1, weights), axis=1)",
            "def transform(in1):\n    return tf.reduce_sum(tf.multiply(in1, tf.range(tf.shape(in1)[1], dtype=in1.dtype)), axis=1)",
            "def transform(in1):\n    return tf.reduce_sum(in1 * tf.range(tf.shape(in1)[1]), axis=1)",
            "def transform(in1):\n    cols = tf.range(4, dtype=tf.float32)\n    return tf.reduce_sum(in1 * cols, axis=1)",
            "def transform(in1):\n    return tf.reduce_sum(tf.multiply(in1, tf.range(tf.shape(in1)[1], dtype=in1.dtype)), axis=1)",
            "def transform(in1):\n    weights = tf.range(tf.shape(in1)[1], dtype=in1.dtype)\n    return tf.reduce_sum(tf.multiply(in1, weights), axis=1)",
            "def transform(in1):\n    return tf.reduce_sum(in1 * tf.range(tf.shape(in1)[1], dtype=tf.float32), axis=1)",
            "def transform(in1):\n    return tf.reduce_sum(tf.multiply(in1, tf.range(tf.shape(in1)[1])), axis=1)",
            "def transform(in1):\n    return tf.reduce_sum(in1 * tf.range(tf.shape(in1)[1]), axis=1)",
            "def transform(in1):\n    return tf.reduce_sum(in1 * tf.range(tf.shape(in1)[1], dtype=tf.float32), axis=1)",
            "def transform(in1):\n    indices = tf.range(tf.shape(in1)[1])\n    weighted = tf.multiply(in1, indices)\n    return tf.reduce_sum(weighted, axis=1)",
            "def transform(in1):\n    weights = tf.cast(tf.range(tf.shape(in1)[1]), tf.float32)\n    return tf.reduce_sum(in1 * weights, axis=1)",
            "def transform(in1):\n    return tf.reduce_sum(tf.multiply(in1, tf.range(tf.shape(in1)[1], dtype=in1.dtype)), axis=1)",
            "def transform(in1):\n    return tf.reduce_sum(in1 * tf.range(tf.shape(in1)[1], dtype=in1.dtype), axis=1)",
            "def transform(in1):\n    indices = tf.range(tf.shape(in1)[1], dtype=in1.dtype)\n    return tf.reduce_sum(in1 * indices, axis=1)",
            "def transform(in1):\n    weights = tf.range(tf.shape(in1)[1], dtype=tf.float32)\n    return tf.reduce_sum(tf.multiply(in1, weights), axis=1)",
            "def transform(in1):\n    weights = tf.range(tf.shape(in1)[1], dtype=tf.float32)\n    return tf.reduce_sum(in1 * weights, axis=1)"
        ],
        "tf_operators": {
            "tf.shape": 29,
            "tf.reduce_sum": 30,
            "tf.range": 30,
            "tf.float32": 10,
            "tf.multiply": 10,
            "tf.cast": 1
        },
        "coverage_percentage": 75.0,
        "total_covered": 3,
        "total_in_target": 4,
        "parsed_constants": [
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                0,
                1,
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                4,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ]
        ],
        "all_constants": [
            0,
            1,
            4
        ],
        "constant_counts": [
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 0,
            "tf_bool": 0,
            "axis": 0,
            "common": 61,
            "tf_float32": 10,
            "shape_tuple": 0,
            "shape": 1,
            "tf_int64": 0,
            "provided": 0,
            "input_var": 67
        }
    },
    {
        "name": "stackoverflow_33",
        "description": "find the minimum distance between two sets of points",
        "target_program": "tf.reduce_min(tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, 0), tf.expand_dims(in2, 1))), axis=2), axis=1)",
        "source": "https://stackoverflow.com/questions/40558251/computing-minimum-distance-for-each-element-in-a-tensor-relative-to-another-tens",
        "constants": "[]",
        "examples": {
            "inputs": "[[[.3, .1, .4], [.1, .5, .9], [.2, .6, .5], [.3, .5, .8],[.9, .7, .9]],[[.3, .2, .3], [.8, .4, .6], [.2, .6, .4], [.3, .3, .8]],]",
            "outputs": "[0.02, 0.19, 0.01, 0.04]"
        },
        "completions": [
            "```python\ndef transform(in1, in2):\n    dists = tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)\n    return tf.reduce_min(dists, axis=1)\n```",
            "```python\ndef transform(in1, in2):\n    d = tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - in2), axis=2)\n    return tf.reduce_min(d, axis=1)\n```",
            "```python\ndef transform(in1, in2):\n    dists = tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)\n    return tf.reduce_min(dists, axis=1)\n```",
            "```python\ndef transform(in1, in2):\n    d = tf.math.squared_difference(tf.expand_dims(in1, 1), in2)\n    dist = tf.sqrt(tf.reduce_sum(d, axis=2))\n    return tf.reduce_min(dist, axis=1)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.reduce_min(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - in2), axis=2), axis=1)\n```",
            "```python\ndef transform(in1, in2):\n    dists = tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)\n    return tf.reduce_min(dists, axis=1)\n```",
            "```python\ndef transform(in1, in2):\n    dists = tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)\n    return tf.reduce_min(dists, axis=1)\n```",
            "```python\ndef transform(in1, in2):\n    dists = tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)\n    return tf.reduce_min(dists, axis=1)\n```",
            "```\ndef transform(in1, in2):\n    diff = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\n    dist_squared = tf.reduce_sum(tf.square(diff), axis=2)\n    min_dist_squared = tf.reduce_min(dist_squared, axis=1)\n    return min_dist_squared\n```",
            "```python\ndef transform(in1, in2):\n    diffs = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\n    dists = tf.reduce_sum(tf.square(diffs), axis=2)\n    return tf.reduce_min(dists, axis=1)\n```",
            "```python\ndef transform(in1, in2):\n    dists = tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)\n    return tf.reduce_min(dists, axis=1)\n```",
            "```python\ndef transform(in1, in2):\n    dists = tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - in2), axis=2)\n    return tf.reduce_min(dists, axis=1)\n```",
            "```python\ndef transform(in1, in2):\n    dists = tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)\n    return tf.reduce_min(dists, axis=1)\n```",
            "```python\ndef transform(in1, in2):\n    dists = tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)\n    return tf.reduce_min(dists, axis=1)\n```",
            "```python\ndef transform(in1, in2):\n    d = tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)\n    return tf.reduce_min(d, axis=1)\n```",
            "```python\ndef transform(in1, in2):\n    dists = tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)\n    return tf.reduce_min(dists, axis=1)\n```",
            "```python\ndef transform(in1, in2):\n    diffs = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\n    dists = tf.reduce_sum(tf.square(diffs), axis=2)\n    mins = tf.reduce_min(dists, axis=1)\n    return mins\n```",
            "```python\ndef transform(in1, in2):\n    dist = tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)\n    return tf.reduce_min(dist, axis=1)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.reduce_min(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - in2), axis=2), axis=1)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.reduce_min(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - in2), axis=2), axis=1)\n```",
            "```python\ndef transform(in1, in2):\n    dists = tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)\n    return tf.reduce_min(dists, axis=1)\n```",
            "```python\ndef transform(in1, in2):\n    d = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\n    d = tf.reduce_sum(tf.square(d), axis=-1)\n    return tf.reduce_min(d, axis=1)\n```",
            "```python\n    return tf.reduce_min(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - in2), axis=2), axis=1)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.reduce_min(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - in2), axis=2), axis=1)\n```",
            "```python\n    dists = tf.reduce_sum(tf.math.squared_difference(tf.expand_dims(in1, 1), in2), axis=2)\n    return tf.reduce_min(dists, axis=1)\n```",
            "```python\ndef transform(in1, in2):\n    dists = tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)\n    return tf.reduce_min(dists, axis=1)\n```",
            "```python\n    dists = tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)\n    return tf.reduce_min(dists, axis=1)\n```",
            "```python\n    return tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - in2), axis=2)), axis=1)\n```",
            "```python\n    dist = tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)\n    return tf.reduce_min(dist, axis=1)\n```",
            "```\ndef transform(in1, in2):\n    return tf.reduce_min(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - in2), 2), 1)\n```"
        ],
        "normalized_completions": [
            "def transform(in1, in2):\n    dists = tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)\n    return tf.reduce_min(dists, axis=1)",
            "def transform(in1, in2):\n    d = tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - in2), axis=2)\n    return tf.reduce_min(d, axis=1)",
            "def transform(in1, in2):\n    dists = tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)\n    return tf.reduce_min(dists, axis=1)",
            "def transform(in1, in2):\n    d = tf.math.squared_difference(tf.expand_dims(in1, 1), in2)\n    dist = tf.sqrt(tf.reduce_sum(d, axis=2))\n    return tf.reduce_min(dist, axis=1)",
            "def transform(in1, in2):\n    return tf.reduce_min(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - in2), axis=2), axis=1)",
            "def transform(in1, in2):\n    dists = tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)\n    return tf.reduce_min(dists, axis=1)",
            "def transform(in1, in2):\n    dists = tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)\n    return tf.reduce_min(dists, axis=1)",
            "def transform(in1, in2):\n    dists = tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)\n    return tf.reduce_min(dists, axis=1)",
            "def transform(in1, in2):\n    diff = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\n    dist_squared = tf.reduce_sum(tf.square(diff), axis=2)\n    min_dist_squared = tf.reduce_min(dist_squared, axis=1)\n    return min_dist_squared",
            "def transform(in1, in2):\n    diffs = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\n    dists = tf.reduce_sum(tf.square(diffs), axis=2)\n    return tf.reduce_min(dists, axis=1)",
            "def transform(in1, in2):\n    dists = tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)\n    return tf.reduce_min(dists, axis=1)",
            "def transform(in1, in2):\n    dists = tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - in2), axis=2)\n    return tf.reduce_min(dists, axis=1)",
            "def transform(in1, in2):\n    dists = tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)\n    return tf.reduce_min(dists, axis=1)",
            "def transform(in1, in2):\n    dists = tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)\n    return tf.reduce_min(dists, axis=1)",
            "def transform(in1, in2):\n    d = tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)\n    return tf.reduce_min(d, axis=1)",
            "def transform(in1, in2):\n    dists = tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)\n    return tf.reduce_min(dists, axis=1)",
            "def transform(in1, in2):\n    diffs = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\n    dists = tf.reduce_sum(tf.square(diffs), axis=2)\n    mins = tf.reduce_min(dists, axis=1)\n    return mins",
            "def transform(in1, in2):\n    dist = tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)\n    return tf.reduce_min(dist, axis=1)",
            "def transform(in1, in2):\n    return tf.reduce_min(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - in2), axis=2), axis=1)",
            "def transform(in1, in2):\n    return tf.reduce_min(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - in2), axis=2), axis=1)",
            "def transform(in1, in2):\n    dists = tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)\n    return tf.reduce_min(dists, axis=1)",
            "def transform(in1, in2):\n    d = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\n    d = tf.reduce_sum(tf.square(d), axis=-1)\n    return tf.reduce_min(d, axis=1)",
            "def transform(in1, in2):\n    return tf.reduce_min(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - in2), axis=2), axis=1)",
            "def transform(in1, in2):\n    return tf.reduce_min(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - in2), axis=2), axis=1)",
            "def transform(in1, in2):\n    dists = tf.reduce_sum(tf.math.squared_difference(tf.expand_dims(in1, 1), in2), axis=2)\n    return tf.reduce_min(dists, axis=1)",
            "def transform(in1, in2):\n    dists = tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)\n    return tf.reduce_min(dists, axis=1)",
            "def transform(in1, in2):\n    dists = tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)\n    return tf.reduce_min(dists, axis=1)",
            "def transform(in1, in2):\n    return tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - in2), axis=2)), axis=1)",
            "def transform(in1, in2):\n    dist = tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)\n    return tf.reduce_min(dist, axis=1)",
            "def transform(in1, in2):\n    return tf.reduce_min(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - in2), 2), 1)"
        ],
        "tf_operators": {
            "tf.square": 28,
            "tf.expand_dims": 30,
            "tf.reduce_min": 30,
            "tf.reduce_sum": 30,
            "tf.math.squared_difference": 2,
            "tf.sqrt": 2
        },
        "coverage_percentage": 80.0,
        "total_covered": 4,
        "total_in_target": 5,
        "parsed_constants": [
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                2,
                1
            ],
            [
                1,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                2,
                1
            ],
            [
                1,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                -1,
                1
            ],
            [
                1,
                2,
                1
            ],
            [
                1,
                2,
                1
            ],
            [
                1,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                2,
                1
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            -1
        ],
        "constant_counts": [
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 0,
            "tf_bool": 0,
            "axis": 29,
            "common": 80,
            "tf_float32": 0,
            "shape_tuple": 0,
            "shape": 0,
            "tf_int64": 0,
            "provided": 0,
            "input_var": 60
        }
    },
    {
        "name": "stackoverflow_34",
        "description": "compute a weighted sum of tensors",
        "target_program": "tf.tensordot(in2, in1, 1)",
        "source": "https://stackoverflow.com/questions/49532371/compute-a-linear-combination-of-tensors-in-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[[[1, 2], [3, 4]],[[5, 6], [7, 8]],[[10, 20], [30, 40]]],[3, 5, 10],]",
            "outputs": "[[128, 236], [344, 452]]"
        },
        "completions": [
            "```python\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 1)), axis=0)\n```",
            "```python\n    return tf.tensordot(tf.cast(in1, tf.float32), tf.cast(in2, tf.float32), axes=1)\n```",
            "```python\n    return tf.tensordot(in2, in1, axes=1)\n```",
            "```python\n    return tf.tensordot(in2, in1, axes=1)\n```",
            "```python\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 1)), axis=0)\n```",
            "```python\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=-1)), axis=0)\n```",
            "```python\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, -1)), axis=0)\n```",
            "```python\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, -1)), axis=0)\n```",
            "```python\n    weights = tf.cast(in2, in1.dtype)\n    weighted_tensors = tf.multiply(tf.expand_dims(weights, -1), in1)\n    return tf.reduce_sum(weighted_tensors, axis=0)\n```",
            "```python\n    return tf.tensordot(tf.cast(in2, in1.dtype), in1, axes=1)\n```",
            "```python\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, -1)), axis=0)\n```",
            "```python\n    return tf.tensordot(tf.cast(in1, tf.int32), tf.cast(in2, tf.int32), axes=1)\n```",
            "```python\n    in2_expanded = tf.expand_dims(in2, axis=1)\n    weighted_tensors = tf.multiply(in1, in2_expanded)\n    return tf.reduce_sum(weighted_tensors, axis=0)\n```",
            "```python\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, -1)), axis=0)\n```",
            "```python\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, -1)), axis=0)\n```",
            "```python\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=1)), axis=0)\n```",
            "```python\n    return tf.reduce_sum(in1 * tf.expand_dims(in2, -1), axis=0)\n```",
            "```\n    in1_weighted = tf.multiply(in1, tf.expand_dims(in2, -1))\n    return tf.reduce_sum(in1_weighted, axis=0)\n```",
            "```python\n    return tf.tensordot(tf.cast(in1, tf.int32), tf.expand_dims(tf.cast(in2, tf.int32), 0), axes=[[0], [1]])\n```",
            "```python\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 1)), axis=0)\n```",
            "```\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 1)), axis=0)\n```",
            "```\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, -1)), axis=0)\n```",
            "```python\n    weighted = tf.multiply(tf.expand_dims(in2, -1), in1)\n    return tf.reduce_sum(weighted, axis=0)\n```",
            "```python\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, -1)), axis=0)\n```",
            "```python\n    return tf.tensordot(in2, in1, axes=1)\n```",
            "```python\n    return tf.reduce_sum(in1 * tf.expand_dims(in2, axis=-1), axis=0)\n```",
            "```python\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, -1)), axis=0)\n```",
            "```python\n    return tf.reduce_sum(in1 * tf.expand_dims(in2, 1), axis=0)\n```",
            "```python\n    return tf.tensordot(tf.transpose(in1, [1, 2, 0]), in2, axes=1)\n```",
            "```python\n    return tf.reduce_sum(in1 * tf.expand_dims(in2, axis=-1), axis=0)\n```"
        ],
        "normalized_completions": [
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 1)), axis=0)",
            "def transform(in1, in2):\n    return tf.tensordot(tf.cast(in1, tf.float32), tf.cast(in2, tf.float32), axes=1)",
            "def transform(in1, in2):\n    return tf.tensordot(in2, in1, axes=1)",
            "def transform(in1, in2):\n    return tf.tensordot(in2, in1, axes=1)",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 1)), axis=0)",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=-1)), axis=0)",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, -1)), axis=0)",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, -1)), axis=0)",
            "def transform(in1, in2):\n    weights = tf.cast(in2, in1.dtype)\n    weighted_tensors = tf.multiply(tf.expand_dims(weights, -1), in1)\n    return tf.reduce_sum(weighted_tensors, axis=0)",
            "def transform(in1, in2):\n    return tf.tensordot(tf.cast(in2, in1.dtype), in1, axes=1)",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, -1)), axis=0)",
            "def transform(in1, in2):\n    return tf.tensordot(tf.cast(in1, tf.int32), tf.cast(in2, tf.int32), axes=1)",
            "def transform(in1, in2):\n    in2_expanded = tf.expand_dims(in2, axis=1)\n    weighted_tensors = tf.multiply(in1, in2_expanded)\n    return tf.reduce_sum(weighted_tensors, axis=0)",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, -1)), axis=0)",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, -1)), axis=0)",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=1)), axis=0)",
            "def transform(in1, in2):\n    return tf.reduce_sum(in1 * tf.expand_dims(in2, -1), axis=0)",
            "def transform(in1, in2):\n    in1_weighted = tf.multiply(in1, tf.expand_dims(in2, -1))\n    return tf.reduce_sum(in1_weighted, axis=0)",
            "def transform(in1, in2):\n    return tf.tensordot(tf.cast(in1, tf.int32), tf.expand_dims(tf.cast(in2, tf.int32), 0), axes=[[0], [1]])",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 1)), axis=0)",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 1)), axis=0)",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, -1)), axis=0)",
            "def transform(in1, in2):\n    weighted = tf.multiply(tf.expand_dims(in2, -1), in1)\n    return tf.reduce_sum(weighted, axis=0)",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, -1)), axis=0)",
            "def transform(in1, in2):\n    return tf.tensordot(in2, in1, axes=1)",
            "def transform(in1, in2):\n    return tf.reduce_sum(in1 * tf.expand_dims(in2, axis=-1), axis=0)",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, -1)), axis=0)",
            "def transform(in1, in2):\n    return tf.reduce_sum(in1 * tf.expand_dims(in2, 1), axis=0)",
            "def transform(in1, in2):\n    return tf.tensordot(tf.transpose(in1, [1, 2, 0]), in2, axes=1)",
            "def transform(in1, in2):\n    return tf.reduce_sum(in1 * tf.expand_dims(in2, axis=-1), axis=0)"
        ],
        "tf_operators": {
            "tf.expand_dims": 23,
            "tf.reduce_sum": 22,
            "tf.multiply": 18,
            "tf.float32": 1,
            "tf.cast": 5,
            "tf.tensordot": 8,
            "tf.int32": 2,
            "tf.transpose": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 1,
        "total_in_target": 1,
        "parsed_constants": [
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                -1,
                0
            ],
            [
                -1,
                0
            ],
            [
                -1,
                0
            ],
            [
                -1,
                0
            ],
            [
                1
            ],
            [
                -1,
                0
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                -1,
                0
            ],
            [
                -1,
                0
            ],
            [
                1,
                0
            ],
            [
                -1,
                0
            ],
            [
                -1,
                0
            ],
            [
                0,
                0,
                1
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                -1,
                0
            ],
            [
                -1,
                0
            ],
            [
                -1,
                0
            ],
            [
                1
            ],
            [
                -1,
                0
            ],
            [
                -1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                2,
                0,
                1
            ],
            [
                -1,
                0
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            -1
        ],
        "constant_counts": [
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 2,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 2,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 2,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 4,
            "tf_bool": 0,
            "axis": 1,
            "common": 56,
            "tf_float32": 2,
            "shape_tuple": 0,
            "shape": 0,
            "tf_int64": 0,
            "provided": 0,
            "input_var": 64
        }
    },
    {
        "name": "stackoverflow_35",
        "description": "linear interpolation between two tensors",
        "target_program": "tf.add(in2, tf.multiply(tf.expand_dims(in3, 1), tf.subtract(in1, in2)))",
        "source": "https://stackoverflow.com/questions/49643371/keras-compute-convex-combination-of-two-tensors",
        "constants": "[]",
        "examples": {
            "inputs": "[[[[1.0, 2.0], [3.0, 4.0], [5.0, 6.0]], [[10., 20.], [30., 40.], [50., 60.]]],[[[9.0, 8.0], [7.0, 6.0], [5.0, 4.0]], [[90., 80.], [70., 60.], [50., 40.]]],[0.1, 0.4, 0.8],]",
            "outputs": "[[[8.2, 7.4], [5.4, 5.2], [5.0, 5.6]],    [[82., 74.], [54., 52.], [50., 56.]]]"
        },
        "completions": [
            "```python\n    alpha = tf.expand_dims(in3, -1)\n    return in1 * (1 - alpha) + in2 * alpha\n```",
            "```python\n    return tf.add(tf.multiply(in1, 1 - tf.expand_dims(in3, -1)), tf.multiply(in2, tf.expand_dims(in3, -1)))\n```",
            "```python\n    return tf.add_n([in1 * (1 - tf.expand_dims(in3, -1)), in2 * tf.expand_dims(in3, -1)])\n```",
            "```python\n    in3_exp = tf.expand_dims(in3, axis=-1)\n    return in1 + in3_exp * (in2 - in1)\n```",
            "```python\n    return tf.add(tf.multiply(tf.expand_dims(in3, -1), in2), tf.multiply(tf.expand_dims(tf.subtract(1.0, in3), -1), in1))\n```",
            "```\n    weights = tf.expand_dims(in3, -1)\n    return in1 * (1 - weights) + in2 * weights\n```",
            "```python\n    return tf.add(tf.multiply(in1, tf.reshape(1 - in3, [-1, 1, 1])), tf.multiply(in2, tf.reshape(in3, [-1, 1, 1])))\n```",
            "```python\n    return tf.add(tf.multiply(in1, tf.reshape(1 - in3, (-1, 1, 1))), tf.multiply(in2, tf.reshape(in3, (-1, 1, 1))))\n```",
            "```python\n    return tf.add(tf.multiply(tf.expand_dims(in3, -1), tf.subtract(in2, in1)), in1)\n```",
            "```python\n    alpha = tf.expand_dims(in3, axis=-1)\n    return in1 * (1 - alpha) + in2 * alpha\n```",
            "```python\n    in3 = tf.expand_dims(in3, -1)\n    return tf.add(tf.multiply(in1, 1 - in3), tf.multiply(in2, in3))\n```",
            "```python\n    in3 = tf.reshape(in3, (-1, 1, 1))\n    return in1 * (1 - in3) + in2 * in3\n```",
            "```python\n    return in1 * (1 - tf.expand_dims(in3, 1)) + in2 * tf.expand_dims(in3, 1)\n```",
            "```python\ndef transform(in1, in2, in3):\n    in3_exp = tf.reshape(in3, (-1, 1, 1))\n    return tf.add(tf.multiply(in1, 1 - in3_exp), tf.multiply(in2, in3_exp))\n```",
            "```python\n    return tf.add(tf.multiply(in1, tf.expand_dims(1 - in3, axis=-1)), tf.multiply(in2, tf.expand_dims(in3, axis=-1)))\n```",
            "```python\n    return tf.add(tf.multiply(tf.expand_dims(in3, -1), tf.subtract(in2, in1)), in1)\n```",
            "```python\n    in3_exp = tf.expand_dims(in3, axis=-1)\n    return in1 + in3_exp * (in2 - in1)\n```",
            "```python\n    return tf.add(tf.multiply(tf.expand_dims(in3, -1), tf.subtract(in2, in1)), in1)\n```",
            "```python\ndef transform(in1, in2, in3):\n    return tf.add(\n        tf.multiply(tf.expand_dims(in1, 2), 1 - tf.expand_dims(in3, 0)),\n        tf.multiply(tf.expand_dims(in2, 2), tf.expand_dims(in3, 0))\n    )\n```",
            "```python\ndef transform(in1, in2, in3):\n    return tf.add(tf.multiply(in1, 1 - tf.expand_dims(in3, axis=[1, 2])), tf.multiply(in2, tf.expand_dims(in3, axis=[1, 2])))\n```",
            "```python\ndef transform(in1, in2, in3):\n    return tf.add(tf.multiply(in1, 1 - tf.expand_dims(in3, 1)), tf.multiply(in2, tf.expand_dims(in3, 1)))\n```",
            "```python\ndef transform(in1, in2, in3):\n    return tf.add(tf.multiply(in1, tf.reshape(1 - in3, [-1, 1, 1])), tf.multiply(in2, tf.reshape(in3, [-1, 1, 1])))\n```",
            "```python\ndef transform(in1, in2, in3):\n    return tf.add(tf.multiply(tf.expand_dims(tf.expand_dims(tf.subtract(1.0, in3), -1), -1), in1),\n                  tf.multiply(tf.expand_dims(tf.expand_dims(in3, -1), -1), in2))\n```",
            "```python\ndef transform(in1, in2, in3):\n    return tf.add(tf.multiply(in1, tf.reshape(1 - in3, [-1, 1, 1])), tf.multiply(in2, tf.reshape(in3, [-1, 1, 1])))\n```",
            "```\n    return tf.add(tf.multiply(in1, tf.expand_dims(1 - in3, axis=-1)), tf.multiply(in2, tf.expand_dims(in3, axis=-1)))\n```",
            "```python\ndef transform(in1, in2, in3):\n    return tf.add(tf.multiply(tf.expand_dims(1 - in3, 1), in1), tf.multiply(tf.expand_dims(in3, 1), in2))\n```",
            "```python\n    in3_exp = tf.expand_dims(in3, axis=-1)\n    return tf.add(tf.multiply(in1, 1 - in3_exp), tf.multiply(in2, in3_exp))\n```",
            "```python\n    return tf.add_n([tf.multiply(tf.expand_dims(in3, -1), in2), tf.multiply(tf.expand_dims(1.0 - in3, -1), in1)])\n```",
            "```python\ndef transform(in1, in2, in3):\n    return tf.add(tf.multiply(tf.expand_dims(in3, -1), in2), tf.multiply(tf.expand_dims(1 - in3, -1), in1))\n```",
            "```python\ndef transform(in1, in2, in3):\n    return tf.add(tf.multiply(in1, tf.expand_dims(1 - in3, -1)), tf.multiply(in2, tf.expand_dims(in3, -1)))\n```"
        ],
        "normalized_completions": [
            "def transform(in1, in2, in3):\n    alpha = tf.expand_dims(in3, -1)\n    return in1 * (1 - alpha) + in2 * alpha",
            "def transform(in1, in2, in3):\n    return tf.add(tf.multiply(in1, 1 - tf.expand_dims(in3, -1)), tf.multiply(in2, tf.expand_dims(in3, -1)))",
            "def transform(in1, in2, in3):\n    return tf.add_n([in1 * (1 - tf.expand_dims(in3, -1)), in2 * tf.expand_dims(in3, -1)])",
            "def transform(in1, in2, in3):\n    in3_exp = tf.expand_dims(in3, axis=-1)\n    return in1 + in3_exp * (in2 - in1)",
            "def transform(in1, in2, in3):\n    return tf.add(tf.multiply(tf.expand_dims(in3, -1), in2), tf.multiply(tf.expand_dims(tf.subtract(1.0, in3), -1), in1))",
            "def transform(in1, in2, in3):\n    weights = tf.expand_dims(in3, -1)\n    return in1 * (1 - weights) + in2 * weights",
            "def transform(in1, in2, in3):\n    return tf.add(tf.multiply(in1, tf.reshape(1 - in3, [-1, 1, 1])), tf.multiply(in2, tf.reshape(in3, [-1, 1, 1])))",
            "def transform(in1, in2, in3):\n    return tf.add(tf.multiply(in1, tf.reshape(1 - in3, (-1, 1, 1))), tf.multiply(in2, tf.reshape(in3, (-1, 1, 1))))",
            "def transform(in1, in2, in3):\n    return tf.add(tf.multiply(tf.expand_dims(in3, -1), tf.subtract(in2, in1)), in1)",
            "def transform(in1, in2, in3):\n    alpha = tf.expand_dims(in3, axis=-1)\n    return in1 * (1 - alpha) + in2 * alpha",
            "def transform(in1, in2, in3):\n    in3 = tf.expand_dims(in3, -1)\n    return tf.add(tf.multiply(in1, 1 - in3), tf.multiply(in2, in3))",
            "def transform(in1, in2, in3):\n    in3 = tf.reshape(in3, (-1, 1, 1))\n    return in1 * (1 - in3) + in2 * in3",
            "def transform(in1, in2, in3):\n    return in1 * (1 - tf.expand_dims(in3, 1)) + in2 * tf.expand_dims(in3, 1)",
            "def transform(in1, in2, in3):\n    in3_exp = tf.reshape(in3, (-1, 1, 1))\n    return tf.add(tf.multiply(in1, 1 - in3_exp), tf.multiply(in2, in3_exp))",
            "def transform(in1, in2, in3):\n    return tf.add(tf.multiply(in1, tf.expand_dims(1 - in3, axis=-1)), tf.multiply(in2, tf.expand_dims(in3, axis=-1)))",
            "def transform(in1, in2, in3):\n    return tf.add(tf.multiply(tf.expand_dims(in3, -1), tf.subtract(in2, in1)), in1)",
            "def transform(in1, in2, in3):\n    in3_exp = tf.expand_dims(in3, axis=-1)\n    return in1 + in3_exp * (in2 - in1)",
            "def transform(in1, in2, in3):\n    return tf.add(tf.multiply(tf.expand_dims(in3, -1), tf.subtract(in2, in1)), in1)",
            "def transform(in1, in2, in3):\n    return tf.add(\n        tf.multiply(tf.expand_dims(in1, 2), 1 - tf.expand_dims(in3, 0)),\n        tf.multiply(tf.expand_dims(in2, 2), tf.expand_dims(in3, 0))\n    )",
            "def transform(in1, in2, in3):\n    return tf.add(tf.multiply(in1, 1 - tf.expand_dims(in3, axis=[1, 2])), tf.multiply(in2, tf.expand_dims(in3, axis=[1, 2])))",
            "def transform(in1, in2, in3):\n    return tf.add(tf.multiply(in1, 1 - tf.expand_dims(in3, 1)), tf.multiply(in2, tf.expand_dims(in3, 1)))",
            "def transform(in1, in2, in3):\n    return tf.add(tf.multiply(in1, tf.reshape(1 - in3, [-1, 1, 1])), tf.multiply(in2, tf.reshape(in3, [-1, 1, 1])))",
            "def transform(in1, in2, in3):\n    return tf.add(tf.multiply(tf.expand_dims(tf.expand_dims(tf.subtract(1.0, in3), -1), -1), in1),\n                  tf.multiply(tf.expand_dims(tf.expand_dims(in3, -1), -1), in2))",
            "def transform(in1, in2, in3):\n    return tf.add(tf.multiply(in1, tf.reshape(1 - in3, [-1, 1, 1])), tf.multiply(in2, tf.reshape(in3, [-1, 1, 1])))",
            "def transform(in1, in2, in3):\n    return tf.add(tf.multiply(in1, tf.expand_dims(1 - in3, axis=-1)), tf.multiply(in2, tf.expand_dims(in3, axis=-1)))",
            "def transform(in1, in2, in3):\n    return tf.add(tf.multiply(tf.expand_dims(1 - in3, 1), in1), tf.multiply(tf.expand_dims(in3, 1), in2))",
            "def transform(in1, in2, in3):\n    in3_exp = tf.expand_dims(in3, axis=-1)\n    return tf.add(tf.multiply(in1, 1 - in3_exp), tf.multiply(in2, in3_exp))",
            "def transform(in1, in2, in3):\n    return tf.add_n([tf.multiply(tf.expand_dims(in3, -1), in2), tf.multiply(tf.expand_dims(1.0 - in3, -1), in1)])",
            "def transform(in1, in2, in3):\n    return tf.add(tf.multiply(tf.expand_dims(in3, -1), in2), tf.multiply(tf.expand_dims(1 - in3, -1), in1))",
            "def transform(in1, in2, in3):\n    return tf.add(tf.multiply(in1, tf.expand_dims(1 - in3, -1)), tf.multiply(in2, tf.expand_dims(in3, -1)))"
        ],
        "tf_operators": {
            "tf.expand_dims": 24,
            "tf.add": 21,
            "tf.multiply": 22,
            "tf.add_n": 2,
            "tf.subtract": 5,
            "tf.reshape": 6
        },
        "coverage_percentage": 100.0,
        "total_covered": 4,
        "total_in_target": 4,
        "parsed_constants": [
            [
                -1,
                1
            ],
            [
                1,
                -1,
                -1
            ],
            [
                1,
                -1,
                -1
            ],
            [
                -1
            ],
            [
                -1,
                -1
            ],
            [
                -1,
                1
            ],
            [
                1,
                -1,
                1,
                1,
                -1,
                1,
                1
            ],
            [
                1,
                -1,
                1,
                1,
                -1,
                1,
                1
            ],
            [
                -1
            ],
            [
                -1,
                1
            ],
            [
                -1,
                1
            ],
            [
                -1,
                1,
                1,
                1
            ],
            [
                1,
                1,
                1
            ],
            [
                -1,
                1,
                1,
                1
            ],
            [
                1,
                -1,
                -1
            ],
            [
                -1
            ],
            [
                -1
            ],
            [
                -1
            ],
            [
                2,
                1,
                0,
                2,
                0
            ],
            [
                1,
                1,
                2,
                1,
                2
            ],
            [
                1,
                1,
                1
            ],
            [
                1,
                -1,
                1,
                1,
                -1,
                1,
                1
            ],
            [
                -1,
                -1,
                -1,
                -1
            ],
            [
                1,
                -1,
                1,
                1,
                -1,
                1,
                1
            ],
            [
                1,
                -1,
                -1
            ],
            [
                1,
                1,
                1
            ],
            [
                -1,
                1
            ],
            [
                -1,
                -1
            ],
            [
                -1,
                1,
                -1
            ],
            [
                1,
                -1,
                -1
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            -1
        ],
        "constant_counts": [
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 7,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 7,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 7,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 0,
            "tf_bool": 0,
            "axis": 4,
            "common": 84,
            "tf_float32": 0,
            "shape_tuple": 0,
            "shape": 0,
            "tf_int64": 0,
            "provided": 0,
            "input_var": 129
        }
    },
    {
        "name": "stackoverflow_36",
        "description": "divide each element by the column index",
        "target_program": "tf.cast(tf.divide(in1, tf.add(in1, tf.range(8))), tf.float32)",
        "source": "https://stackoverflow.com/questions/43306788/divide-elements-of-1-d-tensor-by-the-corrispondent-index",
        "constants": "[]",
        "examples": {
            "inputs": "[[1, 0, 1, 1, 0, 1, 0, 1],]",
            "outputs": "[1., 0., 0.333333, 0.25, 0., 0.166667, 0., 0.125]"
        },
        "completions": [
            "```python\n    return tf.divide(in1, tf.range(1, tf.shape(in1)[0]+1, dtype=in1.dtype))\n```",
            "```python\n    indexes = tf.range(1, tf.size(in1) + 1, dtype=tf.float32)\n    return tf.divide(tf.cast(in1, tf.float32), indexes)\n```",
            "```python\n    indices = tf.range(start=1, limit=tf.shape(in1)[0] + 1, delta=1, dtype=in1.dtype)\n    return tf.divide(in1, indices)\n```",
            "```python\n    idx = tf.range(1, tf.shape(in1)[0] + 1, dtype=tf.float32)\n    return tf.math.divide_no_nan(tf.cast(in1, tf.float32), idx)\n```",
            "```python\n    return tf.divide(in1, tf.range(1, tf.shape(in1)[0] + 1, dtype=tf.float32))\n```",
            "```\n    return tf.divide(tf.cast(in1, tf.float32), tf.cast(tf.range(1, tf.size(in1) + 1), tf.float32))\n```",
            "```python\n    return tf.divide(in1, tf.range(1, tf.shape(in1)[0] + 1))\n```",
            "```python\n    idx = tf.cast(tf.range(tf.shape(in1)[0]), tf.float32)\n    return tf.divide(in1, idx)\n```",
            "def transform(in1):\n    return tf.divide(in1, tf.range(1, tf.shape(in1)[0] + 1, dtype=tf.float32))",
            "```\nreturn tf.divide(tf.cast(in1, tf.float32), tf.range(1, tf.size(in1) + 1))\n```",
            "```python\n    return tf.divide(in1, tf.range(1, tf.shape(in1)[0] + 1, dtype=tf.float32))\n```",
            "```\ndef transform(in1):\n    return tf.divide(in1, tf.range(1, tf.size(in1) + 1, dtype=tf.float32))\n```",
            "```\nreturn tf.divide(tf.cast(in1, tf.float32), tf.range(1, tf.size(in1) + 1, 1, dtype=tf.float32))\n```",
            "```python\n    indices = tf.range(1, tf.shape(in1)[0] + 1, dtype=tf.float32)\n    return tf.divide(in1, indices)\n```",
            "```python\n    indices = tf.range(1, tf.shape(in1)[0] + 1, dtype=tf.float32)\n    return tf.divide(tf.cast(in1, tf.float32), indices)\n```",
            "```python\n    return tf.divide(tf.cast(in1, tf.float32), tf.range(1, len(in1) + 1, dtype=tf.float32))\n```",
            "```python\n    return tf.divide(in1, tf.range(1, tf.shape(in1)[0] + 1, dtype=tf.float32))\n```",
            "```python\n    return tf.divide(in1, tf.range(1, tf.shape(in1)[0] + 1))\n```",
            "```python\n    return tf.divide(in1, tf.cast(tf.range(1, tf.size(in1) + 1), in1.dtype))\n```",
            "```python\n    return tf.divide(in1, tf.range(1, tf.shape(in1)[0] + 1, dtype=tf.float32))\n```",
            "```python\n    return tf.divide(tf.cast(in1, tf.float32), tf.range(1, tf.size(in1) + 1, dtype=tf.float32))\n```",
            "```python\n    col_idx = tf.range(1, tf.shape(in1)[0] + 1, dtype=tf.float32)\n    return tf.divide(in1, col_idx)\n```",
            "```python\n    idx = tf.range(1, tf.shape(in1)[0] + 1, dtype=in1.dtype)\n    return tf.divide(in1, idx)\n```",
            "```python\n    return tf.divide(in1, tf.range(1, tf.shape(in1)[0] + 1, dtype=in1.dtype))\n```",
            "```python\n    return tf.divide(in1, tf.range(1, tf.shape(in1)[0] + 1, dtype=tf.float32))\n```",
            "```python\n    idx = tf.range(tf.shape(in1)[0]) + 1\n    return tf.divide(in1, tf.cast(idx, tf.float32))\n```",
            "```python\n    indices = tf.range(1, tf.shape(in1)[-1] + 1, dtype=tf.float32)\n    return tf.divide(tf.cast(in1, tf.float32), indices)\n```",
            "```python\n    return tf.divide(in1, tf.range(1, tf.shape(in1)[0] + 1))\n```",
            "```python\n    indices = tf.range(1, tf.shape(in1)[0] + 1, dtype=tf.float32)\n    return tf.divide(in1, indices)\n```",
            "```python\n    return tf.divide(in1, tf.range(1, tf.shape(in1)[0] + 1, dtype=tf.float32))\n```"
        ],
        "normalized_completions": [
            "def transform(in1):\n    return tf.divide(in1, tf.range(1, tf.shape(in1)[0]+1, dtype=in1.dtype))",
            "def transform(in1):\n    indexes = tf.range(1, tf.size(in1) + 1, dtype=tf.float32)\n    return tf.divide(tf.cast(in1, tf.float32), indexes)",
            "def transform(in1):\n    indices = tf.range(start=1, limit=tf.shape(in1)[0] + 1, delta=1, dtype=in1.dtype)\n    return tf.divide(in1, indices)",
            "def transform(in1):\n    idx = tf.range(1, tf.shape(in1)[0] + 1, dtype=tf.float32)\n    return tf.math.divide_no_nan(tf.cast(in1, tf.float32), idx)",
            "def transform(in1):\n    return tf.divide(in1, tf.range(1, tf.shape(in1)[0] + 1, dtype=tf.float32))",
            "def transform(in1):\n    return tf.divide(tf.cast(in1, tf.float32), tf.cast(tf.range(1, tf.size(in1) + 1), tf.float32))",
            "def transform(in1):\n    return tf.divide(in1, tf.range(1, tf.shape(in1)[0] + 1))",
            "def transform(in1):\n    idx = tf.cast(tf.range(tf.shape(in1)[0]), tf.float32)\n    return tf.divide(in1, idx)",
            "def transform(in1):\n    return tf.divide(in1, tf.range(1, tf.shape(in1)[0] + 1, dtype=tf.float32))",
            "def transform(in1):\n    return tf.divide(tf.cast(in1, tf.float32), tf.range(1, tf.size(in1) + 1))",
            "def transform(in1):\n    return tf.divide(in1, tf.range(1, tf.shape(in1)[0] + 1, dtype=tf.float32))",
            "def transform(in1):\n    return tf.divide(in1, tf.range(1, tf.size(in1) + 1, dtype=tf.float32))",
            "def transform(in1):\n    return tf.divide(tf.cast(in1, tf.float32), tf.range(1, tf.size(in1) + 1, 1, dtype=tf.float32))",
            "def transform(in1):\n    indices = tf.range(1, tf.shape(in1)[0] + 1, dtype=tf.float32)\n    return tf.divide(in1, indices)",
            "def transform(in1):\n    indices = tf.range(1, tf.shape(in1)[0] + 1, dtype=tf.float32)\n    return tf.divide(tf.cast(in1, tf.float32), indices)",
            "def transform(in1):\n    return tf.divide(tf.cast(in1, tf.float32), tf.range(1, len(in1) + 1, dtype=tf.float32))",
            "def transform(in1):\n    return tf.divide(in1, tf.range(1, tf.shape(in1)[0] + 1, dtype=tf.float32))",
            "def transform(in1):\n    return tf.divide(in1, tf.range(1, tf.shape(in1)[0] + 1))",
            "def transform(in1):\n    return tf.divide(in1, tf.cast(tf.range(1, tf.size(in1) + 1), in1.dtype))",
            "def transform(in1):\n    return tf.divide(in1, tf.range(1, tf.shape(in1)[0] + 1, dtype=tf.float32))",
            "def transform(in1):\n    return tf.divide(tf.cast(in1, tf.float32), tf.range(1, tf.size(in1) + 1, dtype=tf.float32))",
            "def transform(in1):\n    col_idx = tf.range(1, tf.shape(in1)[0] + 1, dtype=tf.float32)\n    return tf.divide(in1, col_idx)",
            "def transform(in1):\n    idx = tf.range(1, tf.shape(in1)[0] + 1, dtype=in1.dtype)\n    return tf.divide(in1, idx)",
            "def transform(in1):\n    return tf.divide(in1, tf.range(1, tf.shape(in1)[0] + 1, dtype=in1.dtype))",
            "def transform(in1):\n    return tf.divide(in1, tf.range(1, tf.shape(in1)[0] + 1, dtype=tf.float32))",
            "def transform(in1):\n    idx = tf.range(tf.shape(in1)[0]) + 1\n    return tf.divide(in1, tf.cast(idx, tf.float32))",
            "def transform(in1):\n    indices = tf.range(1, tf.shape(in1)[-1] + 1, dtype=tf.float32)\n    return tf.divide(tf.cast(in1, tf.float32), indices)",
            "def transform(in1):\n    return tf.divide(in1, tf.range(1, tf.shape(in1)[0] + 1))",
            "def transform(in1):\n    indices = tf.range(1, tf.shape(in1)[0] + 1, dtype=tf.float32)\n    return tf.divide(in1, indices)",
            "def transform(in1):\n    return tf.divide(in1, tf.range(1, tf.shape(in1)[0] + 1, dtype=tf.float32))"
        ],
        "tf_operators": {
            "tf.shape": 22,
            "tf.divide": 29,
            "tf.range": 30,
            "tf.float32": 22,
            "tf.cast": 12,
            "tf.size": 7,
            "tf.math.divide_no_nan": 1
        },
        "coverage_percentage": 80.0,
        "total_covered": 4,
        "total_in_target": 5,
        "parsed_constants": [
            [
                1,
                0,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                0,
                1,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                0
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                1,
                -1,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                0,
                1
            ]
        ],
        "all_constants": [
            0,
            1,
            -1
        ],
        "constant_counts": [
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 2,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 2,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 2,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 2,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 2,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 2,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 2,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 2,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 0,
            "tf_bool": 0,
            "axis": 0,
            "common": 81,
            "tf_float32": 30,
            "shape_tuple": 0,
            "shape": 0,
            "tf_int64": 0,
            "provided": 0,
            "input_var": 72
        }
    },
    {
        "name": "stackoverflow_37",
        "description": "dot product a vector with last dimension of a tensor",
        "target_program": "tf.tensordot(in1, in2, 1)",
        "source": "https://stackoverflow.com/questions/49206051/multiply-4-d-tensor-with-1-d-tensor",
        "constants": "[]",
        "examples": {
            "inputs": "[[[[[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]],  [[1.2, 3.4, 5.6], [7.8, 9.8, 7.6]]]],[0.5, 1.0, 2.0],]",
            "outputs": "[[[8.5, 19.0], [15.2, 28.9]]]"
        },
        "completions": [
            "```python\n    return tf.tensordot(in1, in2, axes=[[3],[0]])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[[3], [0]])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[[3], [0]])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[[3], [0]])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[[3], [0]])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[[3], [0]])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[-1, 0])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=((-1,), (0,)))\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[[3], [0]])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[[3], [0]])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[[3], [0]])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[[3], [0]])\n```",
            "```\n    return tf.tensordot(in1, in2, axes=[[3], [0]])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[[3], [0]])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[[3], [0]])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[[3], [0]])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=([-1], [0]))\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[[3], [0]])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[[3], [0]])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=([-1], [0]))\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[[3], [0]])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[-1, 0])\n```",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=[-1, 0])",
            "```python\n    return tf.tensordot(in1, in2, axes=[[3], [0]])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[[3], [0]])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[[3], [0]])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[-1, 0])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[[3], [0]])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[[3], [0]])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```"
        ],
        "normalized_completions": [
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=[[3],[0]])",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=[[3], [0]])",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=[[3], [0]])",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=[[3], [0]])",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=[[3], [0]])",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=[[3], [0]])",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=[-1, 0])",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=((-1,), (0,)))",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=[[3], [0]])",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=[[3], [0]])",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=[[3], [0]])",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=[[3], [0]])",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=[[3], [0]])",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=[[3], [0]])",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=[[3], [0]])",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=[[3], [0]])",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=([-1], [0]))",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=[[3], [0]])",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=[[3], [0]])",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=([-1], [0]))",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=[[3], [0]])",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=[-1, 0])",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=[-1, 0])",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=[[3], [0]])",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=[[3], [0]])",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=[[3], [0]])",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=[-1, 0])",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=[[3], [0]])",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=[[3], [0]])",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)"
        ],
        "tf_operators": {
            "tf.tensordot": 30
        },
        "coverage_percentage": 100.0,
        "total_covered": 1,
        "total_in_target": 1,
        "parsed_constants": [
            [
                3,
                0
            ],
            [
                3,
                0
            ],
            [
                3,
                0
            ],
            [
                3,
                0
            ],
            [
                3,
                0
            ],
            [
                3,
                0
            ],
            [
                -1,
                0
            ],
            [
                -1,
                0
            ],
            [
                3,
                0
            ],
            [
                3,
                0
            ],
            [
                3,
                0
            ],
            [
                3,
                0
            ],
            [
                3,
                0
            ],
            [
                3,
                0
            ],
            [
                3,
                0
            ],
            [
                3,
                0
            ],
            [
                -1,
                0
            ],
            [
                3,
                0
            ],
            [
                3,
                0
            ],
            [
                -1,
                0
            ],
            [
                3,
                0
            ],
            [
                -1,
                0
            ],
            [
                -1,
                0
            ],
            [
                3,
                0
            ],
            [
                3,
                0
            ],
            [
                3,
                0
            ],
            [
                -1,
                0
            ],
            [
                3,
                0
            ],
            [
                3,
                0
            ],
            [
                1
            ]
        ],
        "all_constants": [
            0,
            1,
            3,
            -1
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 0,
            "tf_bool": 0,
            "axis": 22,
            "common": 37,
            "tf_float32": 0,
            "shape_tuple": 0,
            "shape": 0,
            "tf_int64": 0,
            "provided": 0,
            "input_var": 60
        }
    },
    {
        "name": "stackoverflow_38",
        "description": "compute the product of marked elements",
        "target_program": "tf.reduce_prod(tf.maximum(tf.reduce_max(in2), tf.multiply(in1, in2)), axis=1)",
        "source": "https://stackoverflow.com/questions/49511529/tensorflow-compute-multiplication-by-binary-matrix",
        "constants": "[]",
        "examples": {
            "inputs": "[[9, 2, 5, 3, 7, 4],[[0, 0, 1, 0, 1, 0], [1, 0, 0, 0, 0, 0], [0, 1, 1, 1, 0, 1]],]",
            "outputs": "[35, 9, 120]"
        },
        "completions": [
            "```python\ndef transform(in1, in2):\n    return tf.reduce_prod(tf.boolean_mask(in1, in2), axis=1)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.math.segment_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), tf.where(in2 > 0)[:, 0])\n```",
            "```python\ndef transform(in1, in2):\n    masked_elements = tf.boolean_mask(in1, tf.cast(in2, tf.bool))\n    return tf.math.segment_prod(masked_elements, tf.reshape(tf.where(tf.cast(in2, tf.bool))[:, 0], (-1,)))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.math.segment_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), tf.repeat(tf.range(tf.shape(in2)[0]), tf.math.count_nonzero(in2, axis=1)))\n```",
            "```python\ndef transform(in1, in2):\n    masked = tf.boolean_mask(in1, in2)\n    return tf.reduce_prod(masked, axis=1)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.math.segment_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), tf.where(in2)[0][:, 0])\n```",
            "```python\ndef transform(in1, in2):\n    return tf.math.segment_prod(tf.boolean_mask(in1, tf.reshape(in2, [-1])), tf.range(3))\n```",
            "```python\n    return tf.math.segment_prod(tf.boolean_mask(in1, tf.cast(tf.reduce_sum(in2, axis=0), tf.bool)), tf.range(tf.shape(in2)[0]))\n```",
            "```python\ndef transform(in1, in2):\n    masked_elements = tf.boolean_mask(in1, in2)\n    return tf.reduce_prod(masked_elements, axis=1)\n```",
            "```python\ndef transform(in1, in2):\n    masked_elements = tf.boolean_mask(in1, tf.cast(in2, tf.bool))\n    return tf.math.segment_prod(masked_elements, tf.reshape(tf.where(in2), (-1,)))\n```",
            "```python\ndef transform(in1, in2):\n    masked = tf.boolean_mask(in1, in2)\n    product = tf.reduce_prod(masked, axis=1)\n    return product\n```",
            "```python\ndef transform(in1, in2):\n    masked = tf.boolean_mask(in1, tf.cast(in2, tf.bool))\n    return tf.math.segment_prod(masked, tf.where(tf.cast(in2, tf.bool))[:, 0])\n```",
            "```python\ndef transform(in1, in2):\n    return tf.math.segment_prod(tf.boolean_mask(in1, in2), tf.range(tf.shape(in2)[0]))\n```",
            "```python\ndef transform(in1, in2):\n    masked_elements = tf.boolean_mask(in1, in2)\n    segment_ids = tf.repeat(tf.range(tf.shape(in2)[0]), tf.reduce_sum(in2, axis=1))\n    return tf.math.segment_prod(masked_elements, segment_ids)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.math.segment_prod(\n        tf.boolean_mask(in1, tf.greater(in2, 0)),\n        tf.reshape(tf.where(in2), [-1])\n    )\n```",
            "```python\ndef transform(in1, in2):\n    return tf.math.reduce_prod(tf.boolean_mask(in1, in2), axis=1)\n```",
            "```python\n    return tf.math.reduce_prod(tf.boolean_mask(tf.broadcast_to(in1, tf.shape(in2)), tf.cast(in2, tf.bool)), axis=1)\n```",
            "```python\n    masks = tf.cast(in2, tf.bool)\n    parts = tf.boolean_mask(in1, masks)\n    return tf.reduce_prod(tf.reshape(parts, (tf.shape(in2)[0], -1)), axis=1)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.math.segment_prod(data=tf.boolean_mask(in1, tf.cast(in2, tf.bool)), segment_ids=tf.repeat(tf.range(tf.shape(in2)[0]), tf.math.count_nonzero(in2, axis=1)))\n```",
            "def transform(in1, in2):\n    return tf.math.segment_prod(tf.boolean_mask(in1, in2), tf.argmax(in2, axis=0))",
            "```python\n    masked_values = tf.boolean_mask(in1, tf.cast(in2, tf.bool))\n    segment_ids = tf.repeat(tf.range(tf.shape(in2)[0]), tf.math.count_nonzero(in2, axis=1))\n    return tf.math.segment_prod(masked_values, segment_ids)\n```",
            "```python\nreturn tf.math.segment_prod(tf.boolean_mask(in1, in2), tf.range(tf.shape(in2)[0]))\n```",
            "```\n    return tf.math.segment_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), tf.argmax(in2, axis=0))\n```",
            "```python\n    return tf.math.segment_prod(tf.boolean_mask(in1, tf.reshape(in2, [-1])), tf.where(tf.reshape(in2, [-1]))[:, 0])\n```",
            "```python\n    return tf.math.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)\n```",
            "```\n    return tf.math.segment_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), tf.where(in2)[0][:,0])\n```",
            "```python\ndef transform(in1, in2):\n    return tf.math.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)\n```",
            "```python\n    masked = tf.boolean_mask(in1, in2)\n    segment_ids = tf.math.cumsum(tf.cast(in2, tf.int32), exclusive=True)[tf.boolean_mask(in2)]\n    return tf.math.segment_prod(masked, segment_ids)\n```",
            "```python\n    masked_elements = tf.boolean_mask(in1, in2)\n    segment_ids = tf.reshape(tf.range(tf.shape(in2)[0]), (-1, 1))\n    segment_ids = tf.tile(segment_ids, [1, tf.shape(in2)[1]])\n    segment_ids = tf.boolean_mask(segment_ids, in2)\n    return tf.math.segment_prod(masked_elements, segment_ids)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.math.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)\n```"
        ],
        "normalized_completions": [
            "def transform(in1, in2):\n    return tf.reduce_prod(tf.boolean_mask(in1, in2), axis=1)",
            "def transform(in1, in2):\n    return tf.math.segment_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), tf.where(in2 > 0)[:, 0])",
            "def transform(in1, in2):\n    masked_elements = tf.boolean_mask(in1, tf.cast(in2, tf.bool))\n    return tf.math.segment_prod(masked_elements, tf.reshape(tf.where(tf.cast(in2, tf.bool))[:, 0], (-1,)))",
            "def transform(in1, in2):\n    return tf.math.segment_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), tf.repeat(tf.range(tf.shape(in2)[0]), tf.math.count_nonzero(in2, axis=1)))",
            "def transform(in1, in2):\n    masked = tf.boolean_mask(in1, in2)\n    return tf.reduce_prod(masked, axis=1)",
            "def transform(in1, in2):\n    return tf.math.segment_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), tf.where(in2)[0][:, 0])",
            "def transform(in1, in2):\n    return tf.math.segment_prod(tf.boolean_mask(in1, tf.reshape(in2, [-1])), tf.range(3))",
            "def transform(in1, in2):\n    return tf.math.segment_prod(tf.boolean_mask(in1, tf.cast(tf.reduce_sum(in2, axis=0), tf.bool)), tf.range(tf.shape(in2)[0]))",
            "def transform(in1, in2):\n    masked_elements = tf.boolean_mask(in1, in2)\n    return tf.reduce_prod(masked_elements, axis=1)",
            "def transform(in1, in2):\n    masked_elements = tf.boolean_mask(in1, tf.cast(in2, tf.bool))\n    return tf.math.segment_prod(masked_elements, tf.reshape(tf.where(in2), (-1,)))",
            "def transform(in1, in2):\n    masked = tf.boolean_mask(in1, in2)\n    product = tf.reduce_prod(masked, axis=1)\n    return product",
            "def transform(in1, in2):\n    masked = tf.boolean_mask(in1, tf.cast(in2, tf.bool))\n    return tf.math.segment_prod(masked, tf.where(tf.cast(in2, tf.bool))[:, 0])",
            "def transform(in1, in2):\n    return tf.math.segment_prod(tf.boolean_mask(in1, in2), tf.range(tf.shape(in2)[0]))",
            "def transform(in1, in2):\n    masked_elements = tf.boolean_mask(in1, in2)\n    segment_ids = tf.repeat(tf.range(tf.shape(in2)[0]), tf.reduce_sum(in2, axis=1))\n    return tf.math.segment_prod(masked_elements, segment_ids)",
            "def transform(in1, in2):\n    return tf.math.segment_prod(\n        tf.boolean_mask(in1, tf.greater(in2, 0)),\n        tf.reshape(tf.where(in2), [-1])\n    )",
            "def transform(in1, in2):\n    return tf.math.reduce_prod(tf.boolean_mask(in1, in2), axis=1)",
            "def transform(in1, in2):\n    return tf.math.reduce_prod(tf.boolean_mask(tf.broadcast_to(in1, tf.shape(in2)), tf.cast(in2, tf.bool)), axis=1)",
            "def transform(in1, in2):\n    masks = tf.cast(in2, tf.bool)\n    parts = tf.boolean_mask(in1, masks)\n    return tf.reduce_prod(tf.reshape(parts, (tf.shape(in2)[0], -1)), axis=1)",
            "def transform(in1, in2):\n    return tf.math.segment_prod(data=tf.boolean_mask(in1, tf.cast(in2, tf.bool)), segment_ids=tf.repeat(tf.range(tf.shape(in2)[0]), tf.math.count_nonzero(in2, axis=1)))",
            "def transform(in1, in2):\n    return tf.math.segment_prod(tf.boolean_mask(in1, in2), tf.argmax(in2, axis=0))",
            "def transform(in1, in2):\n    masked_values = tf.boolean_mask(in1, tf.cast(in2, tf.bool))\n    segment_ids = tf.repeat(tf.range(tf.shape(in2)[0]), tf.math.count_nonzero(in2, axis=1))\n    return tf.math.segment_prod(masked_values, segment_ids)",
            "def transform(in1, in2):\n    return tf.math.segment_prod(tf.boolean_mask(in1, in2), tf.range(tf.shape(in2)[0]))",
            "def transform(in1, in2):\n    return tf.math.segment_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), tf.argmax(in2, axis=0))",
            "def transform(in1, in2):\n    return tf.math.segment_prod(tf.boolean_mask(in1, tf.reshape(in2, [-1])), tf.where(tf.reshape(in2, [-1]))[:, 0])",
            "def transform(in1, in2):\n    return tf.math.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)",
            "def transform(in1, in2):\n    return tf.math.segment_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), tf.where(in2)[0][:,0])",
            "def transform(in1, in2):\n    return tf.math.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)",
            "def transform(in1, in2):\n    masked = tf.boolean_mask(in1, in2)\n    segment_ids = tf.math.cumsum(tf.cast(in2, tf.int32), exclusive=True)[tf.boolean_mask(in2)]\n    return tf.math.segment_prod(masked, segment_ids)",
            "def transform(in1, in2):\n    masked_elements = tf.boolean_mask(in1, in2)\n    segment_ids = tf.reshape(tf.range(tf.shape(in2)[0]), (-1, 1))\n    segment_ids = tf.tile(segment_ids, [1, tf.shape(in2)[1]])\n    segment_ids = tf.boolean_mask(segment_ids, in2)\n    return tf.math.segment_prod(masked_elements, segment_ids)",
            "def transform(in1, in2):\n    return tf.math.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)"
        ],
        "tf_operators": {
            "tf.boolean_mask": 30,
            "tf.reduce_prod": 5,
            "tf.math.segment_prod": 20,
            "tf.where": 8,
            "tf.cast": 17,
            "tf.bool": 16,
            "tf.reshape": 7,
            "tf.shape": 10,
            "tf.repeat": 4,
            "tf.range": 9,
            "tf.math.count_nonzero": 3,
            "tf.reduce_sum": 2,
            "tf.greater": 1,
            "tf.math.reduce_prod": 5,
            "tf.broadcast_to": 1,
            "tf.argmax": 2,
            "tf.int32": 1,
            "tf.math.cumsum": 1,
            "tf.tile": 1
        },
        "coverage_percentage": 25.0,
        "total_covered": 1,
        "total_in_target": 4,
        "parsed_constants": [
            [
                1
            ],
            [
                0,
                0
            ],
            [
                0,
                -1
            ],
            [
                0,
                1
            ],
            [
                1
            ],
            [
                0,
                0
            ],
            [
                -1,
                3
            ],
            [
                0,
                0
            ],
            [
                1
            ],
            [
                -1
            ],
            [
                1
            ],
            [
                0
            ],
            [
                0
            ],
            [
                0,
                1
            ],
            [
                0,
                -1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                0,
                -1,
                1
            ],
            [
                0,
                1
            ],
            [
                0
            ],
            [
                0,
                1
            ],
            [
                0
            ],
            [
                0
            ],
            [
                -1,
                -1,
                0
            ],
            [
                1
            ],
            [
                0,
                0
            ],
            [
                1
            ],
            [],
            [
                0,
                -1,
                1,
                1,
                1
            ],
            [
                1
            ]
        ],
        "all_constants": [
            0,
            1,
            3,
            -1
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 2,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 2,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 5,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 1,
            "tf_bool": 18,
            "axis": 0,
            "common": 41,
            "tf_float32": 0,
            "shape_tuple": 0,
            "shape": 1,
            "tf_int64": 0,
            "provided": 0,
            "input_var": 88
        }
    },
    {
        "name": "stackoverflow_39",
        "description": "(\\'set to 0 the elements with absolute value less than 1, and square the other elements\\')",
        "target_program": "tf.multiply(tf.square(in1), tf.cast(tf.cast(tf.cast(in1, tf.int32), tf.bool), tf.float32))",
        "source": "https://stackoverflow.com/questions/37912161/how-can-i-compute-element-wise-conditionals-on-batches-in-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[[-1.5, 1.0, 0.9, 2.0], [1.1, 0.0, -0.1, -0.9], [-1.0, 0.1, -1.1, 2.5]],]",
            "outputs": "[[2.25, 1.0, 0.0, 4.0],    [1.21, 0.0, 0.0, 0.0],    [1.0, 0.0, 1.21, 6.25]]"
        },
        "completions": [
            "```python\n    mask = tf.greater_equal(tf.abs(in1), 1)\n    return tf.where(mask, tf.square(in1), tf.zeros_like(in1))\n```",
            "```python\n    mask = tf.greater_equal(tf.abs(in1), 1)\n    return tf.where(mask, tf.square(in1), tf.zeros_like(in1))\n```",
            "```python\n    mask = tf.where(tf.abs(in1) >= 1)\n    result = tf.square(tf.gather_nd(in1, mask))\n    return tf.tensor_scatter_nd_update(tf.zeros_like(in1), mask, result)\n```",
            "```python\n    mask = tf.greater_equal(tf.abs(in1), 1)\n    return tf.square(tf.where(mask, in1, tf.zeros_like(in1)))\n```",
            "```python\n    mask = tf.greater_equal(tf.abs(in1), 1)\n    squared = tf.square(in1)\n    return tf.where(mask, squared, 0.0)\n```",
            "```python\n    in1 = tf.where(tf.abs(in1) < 1, tf.zeros_like(in1), in1)\n    return tf.square(in1)\n```",
            "```python\n    abs_in1 = tf.abs(in1)\n    mask = tf.greater_equal(abs_in1, 1.0)\n    squared = tf.square(in1)\n    return tf.where(mask, squared, 0.0)\n```",
            "```python\n    abs_vals = tf.abs(in1)\n    mask = tf.greater_equal(abs_vals, 1)\n    squared_vals = tf.square(in1)\n    return tf.where(mask, squared_vals, tf.zeros_like(in1))\n```",
            "```python\n    in1 = tf.where(tf.abs(in1) < 1, 0.0, in1)\n    return tf.square(in1)\n```",
            "```python\n    return tf.where(tf.abs(in1) < 1, 0.0, tf.square(in1))\n```",
            "```python\n    cond = tf.abs(in1) >= 1\n    return tf.where(cond, tf.square(in1), 0.0)\n```",
            "```python\n    in1 = tf.where(tf.abs(in1) < 1, 0.0, in1)\n    return tf.square(in1)\n```",
            "```python\n    return tf.where(tf.abs(in1) < 1, 0.0, tf.square(in1))\n```",
            "```python\nin1 = tf.where(tf.abs(in1) < 1, tf.zeros_like(in1), in1)\nreturn tf.square(in1)\n```",
            "```python\n    mask = tf.greater_equal(tf.abs(in1), 1)\n    return tf.where(mask, tf.square(in1), tf.zeros_like(in1))\n```",
            "```python\n    in1 = tf.where(tf.abs(in1) < 1, tf.zeros_like(in1), in1)\n    return tf.square(in1)\n```",
            "```python\n    return tf.where(tf.abs(in1) < 1, 0.0, tf.square(in1))\n```",
            "```python\n    return tf.where(tf.greater_equal(tf.abs(in1), 1), tf.square(in1), tf.zeros_like(in1))\n```",
            "```python\n    return tf.where(tf.abs(in1) < 1, tf.zeros_like(in1), tf.square(in1))\n```",
            "```python\n    return tf.where(tf.abs(in1) < 1, 0.0, tf.square(in1))\n```",
            "```python\n    return tf.where(tf.abs(in1) < 1, tf.zeros_like(in1), tf.square(in1))\n```",
            "```python\n     in1 = tf.where(tf.abs(in1) < 1, tf.zeros_like(in1), in1)\n     return tf.square(in1)\n```",
            "```python\n    return tf.where(tf.abs(in1) < 1, 0., tf.square(in1))\n```",
            "```python\n    mask = tf.greater_equal(tf.abs(in1), 1)\n    return tf.where(mask, tf.square(in1), 0)\n```",
            "```python\n    abs_in1 = tf.abs(in1)\n    mask = tf.greater_equal(abs_in1, 1)\n    squared = tf.square(in1)\n    return tf.where(mask, squared, tf.zeros_like(in1))\n```",
            "```python\n    return tf.where(tf.abs(in1) < 1, 0.0, tf.square(in1))\n```",
            "```python\n    mask = tf.greater_equal(tf.abs(in1), 1)\n    return tf.where(mask, tf.square(in1), tf.zeros_like(in1))\n```",
            "```python\n    mask = tf.greater_equal(tf.abs(in1), 1)\n    return tf.where(mask, tf.square(in1), tf.zeros_like(in1))\n```",
            "```python\n    mask = tf.greater_equal(tf.abs(in1), 1)\n    squared = tf.square(in1)\n    return tf.where(mask, squared, tf.zeros_like(in1))\n```",
            "```python\n    mask = tf.greater_equal(tf.abs(in1), 1)\n    squared = tf.square(in1)\n    return tf.where(mask, squared, tf.zeros_like(in1))\n```"
        ],
        "normalized_completions": [
            "def transform(in1):\n    mask = tf.greater_equal(tf.abs(in1), 1)\n    return tf.where(mask, tf.square(in1), tf.zeros_like(in1))",
            "def transform(in1):\n    mask = tf.greater_equal(tf.abs(in1), 1)\n    return tf.where(mask, tf.square(in1), tf.zeros_like(in1))",
            "def transform(in1):\n    mask = tf.where(tf.abs(in1) >= 1)\n    result = tf.square(tf.gather_nd(in1, mask))\n    return tf.tensor_scatter_nd_update(tf.zeros_like(in1), mask, result)",
            "def transform(in1):\n    mask = tf.greater_equal(tf.abs(in1), 1)\n    return tf.square(tf.where(mask, in1, tf.zeros_like(in1)))",
            "def transform(in1):\n    mask = tf.greater_equal(tf.abs(in1), 1)\n    squared = tf.square(in1)\n    return tf.where(mask, squared, 0.0)",
            "def transform(in1):\n    in1 = tf.where(tf.abs(in1) < 1, tf.zeros_like(in1), in1)\n    return tf.square(in1)",
            "def transform(in1):\n    abs_in1 = tf.abs(in1)\n    mask = tf.greater_equal(abs_in1, 1.0)\n    squared = tf.square(in1)\n    return tf.where(mask, squared, 0.0)",
            "def transform(in1):\n    abs_vals = tf.abs(in1)\n    mask = tf.greater_equal(abs_vals, 1)\n    squared_vals = tf.square(in1)\n    return tf.where(mask, squared_vals, tf.zeros_like(in1))",
            "def transform(in1):\n    in1 = tf.where(tf.abs(in1) < 1, 0.0, in1)\n    return tf.square(in1)",
            "def transform(in1):\n    return tf.where(tf.abs(in1) < 1, 0.0, tf.square(in1))",
            "def transform(in1):\n    cond = tf.abs(in1) >= 1\n    return tf.where(cond, tf.square(in1), 0.0)",
            "def transform(in1):\n    in1 = tf.where(tf.abs(in1) < 1, 0.0, in1)\n    return tf.square(in1)",
            "def transform(in1):\n    return tf.where(tf.abs(in1) < 1, 0.0, tf.square(in1))",
            "def transform(in1):\n    in1 = tf.where(tf.abs(in1) < 1, tf.zeros_like(in1), in1)\n    return tf.square(in1)",
            "def transform(in1):\n    mask = tf.greater_equal(tf.abs(in1), 1)\n    return tf.where(mask, tf.square(in1), tf.zeros_like(in1))",
            "def transform(in1):\n    in1 = tf.where(tf.abs(in1) < 1, tf.zeros_like(in1), in1)\n    return tf.square(in1)",
            "def transform(in1):\n    return tf.where(tf.abs(in1) < 1, 0.0, tf.square(in1))",
            "def transform(in1):\n    return tf.where(tf.greater_equal(tf.abs(in1), 1), tf.square(in1), tf.zeros_like(in1))",
            "def transform(in1):\n    return tf.where(tf.abs(in1) < 1, tf.zeros_like(in1), tf.square(in1))",
            "def transform(in1):\n    return tf.where(tf.abs(in1) < 1, 0.0, tf.square(in1))",
            "def transform(in1):\n    return tf.where(tf.abs(in1) < 1, tf.zeros_like(in1), tf.square(in1))",
            "def transform(in1):\n     in1 = tf.where(tf.abs(in1) < 1, tf.zeros_like(in1), in1)\n     return tf.square(in1)",
            "def transform(in1):\n    return tf.where(tf.abs(in1) < 1, 0., tf.square(in1))",
            "def transform(in1):\n    mask = tf.greater_equal(tf.abs(in1), 1)\n    return tf.where(mask, tf.square(in1), 0)",
            "def transform(in1):\n    abs_in1 = tf.abs(in1)\n    mask = tf.greater_equal(abs_in1, 1)\n    squared = tf.square(in1)\n    return tf.where(mask, squared, tf.zeros_like(in1))",
            "def transform(in1):\n    return tf.where(tf.abs(in1) < 1, 0.0, tf.square(in1))",
            "def transform(in1):\n    mask = tf.greater_equal(tf.abs(in1), 1)\n    return tf.where(mask, tf.square(in1), tf.zeros_like(in1))",
            "def transform(in1):\n    mask = tf.greater_equal(tf.abs(in1), 1)\n    return tf.where(mask, tf.square(in1), tf.zeros_like(in1))",
            "def transform(in1):\n    mask = tf.greater_equal(tf.abs(in1), 1)\n    squared = tf.square(in1)\n    return tf.where(mask, squared, tf.zeros_like(in1))",
            "def transform(in1):\n    mask = tf.greater_equal(tf.abs(in1), 1)\n    squared = tf.square(in1)\n    return tf.where(mask, squared, tf.zeros_like(in1))"
        ],
        "tf_operators": {
            "tf.square": 30,
            "tf.zeros_like": 18,
            "tf.where": 30,
            "tf.abs": 30,
            "tf.greater_equal": 14,
            "tf.tensor_scatter_nd_update": 1,
            "tf.gather_nd": 1
        },
        "coverage_percentage": 16.666666666666664,
        "total_covered": 1,
        "total_in_target": 6,
        "parsed_constants": [
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ]
        ],
        "all_constants": [
            0,
            1
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 5,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 5,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 5,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 5,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 0,
            "tf_bool": 0,
            "axis": 0,
            "common": 30,
            "tf_float32": 0,
            "shape_tuple": 0,
            "shape": 0,
            "tf_int64": 0,
            "provided": 0,
            "input_var": 90
        }
    },
    {
        "name": "stackoverflow_40",
        "description": "use the output of tf.nn.top_k to make a sparse tensor",
        "target_program": "tf.sparse.to_dense(tf.SparseTensor(tf.cast(in2, tf.int64), in1, (3, 5)))",
        "source": "https://stackoverflow.com/questions/43996831/make-a-sparse-tensor-based-on-the-output-of-tf-nn-top-k",
        "constants": "[]",
        "examples": {
            "inputs": "[[4, 5, 2, 7, 8, 6],[[0, 2], [0, 4], [1, 1], [1, 3], [2, 0], [2, 3]],]",
            "outputs": "[[0, 0, 4, 0, 5],[0, 2, 0, 7, 0],[8, 0, 0, 6, 0]]"
        },
        "completions": [
            "```\n    indices, values = tf.math.top_k(in2, 1)\n    scattered = tf.scatter_nd(indices, tf.squeeze(values, axis=-1), tf.shape(in1))\n    return scattered\n```",
            "```\n    values, indices = tf.math.top_k(in1, k=1)\n    sparse_indices = tf.expand_dims(tf.cast(tf.squeeze(indices), tf.int64), 1)\n    return tf.scatter_nd(in2, tf.squeeze(values), [3, 5])\n```",
            "```\n    indices = tf.gather(in2, tf.argsort(in1, direction='ASCENDING'))\n    values = tf.sort(in1, direction='ASCENDING')\n    return tf.scatter_nd(indices, values, [tf.shape(in2)[-1], in2[:,1].numpy().max() + 1])\n```",
            "```\n    return tf.scatter_nd(in2, in1, (3, 5))\n```",
            "```\n    k = tf.shape(in2)[0]\n    indices, values = tf.math.top_k(in1, k)\n    return tf.scatter_nd(in2, values, [3, 5])\n```",
            "```python\n    top_k_indices = tf.math.top_k(in1, k=1).indices\n    updates = tf.gather(in1, top_k_indices)\n    sparse_indices = tf.concat([in2, tf.expand_dims(top_k_indices, 1)], axis=1)\n    return tf.scatter_nd(sparse_indices, updates, tf.constant([3, 5], dtype=tf.int64))\n```",
            "```python\n    k = tf.shape(in2)[0]\n    values, indices = tf.math.top_k(in1, k)\n    return tf.scatter_nd(in2, values, [3, 5])\n```",
            "```\n    values, indices = tf.math.top_k(in1, k=2)\n    updates = values.flat_map(lambda v: tf.unstack(v))\n    return tf.scatter_nd(in2, updates, [3, 5])\n```",
            "```python\n    vals, indices = tf.math.top_k(in1, k=1)\n    sparse_tensor = tf.scatter_nd(in2, in1, tf.shape(in1, out_type=tf.int32))\n    return tf.transpose(sparse_tensor)\n```",
            "```python\n    indices = tf.math.top_k(in2, k=1).values\n    return tf.scatter_nd(indices, in1, shape=[in2.shape[0], tf.reduce_max(in2) + 1])\n```",
            "```python\n    return tf.scatter_nd(in2, in1, [3, 5])\n```",
            "```\n    return tf.scatter_nd(in2, in1, [3, 5])\n```",
            "```python\n    shape = tf.cast(tf.reduce_max(in2, axis=0) + 1, tf.int32)\n    sparse_vals = tf.scatter_nd(in2, in1, shape)\n    return sparse_vals\n```",
            "```python\n    return tf.scatter_nd(in2, in1, [3, 5])\n```",
            "```\n    indices = tf.nn.top_k(in2, tf.shape(in1)[0])[1]\n    sparse_updates = tf.gather_nd(in1, indices)\n    return tf.scatter_nd(indices, sparse_updates, tf.shape(in2))\n```",
            "```python\n    values, indices = tf.math.top_k(in1, k=tf.shape(in1)[0])\n    return tf.scatter_nd(in2, values, [3, 5])\n```",
            "```\n    values, indices = tf.math.top_k(in1, k=tf.shape(in1)[0])\n    shape = [tf.reduce_max(in2[:, 0]) + 1, tf.reduce_max(in2[:, 1]) + 1]\n    sparse_tensor = tf.scatter_nd(in2, values, shape)\n    return sparse_tensor\n```",
            "```\n    updates, indices = tf.math.top_k(in1, k=tf.shape(in2)[0])\n    return tf.scatter_nd(in2, updates.values, tf.reduce_max(in2, axis=0) + [1])\n```",
            "```\n    indices, values = tf.split(in2, [1, 1], axis=1)\n    updates = tf.gather_nd(in1, indices)\n    return tf.scatter_nd(indices, updates, [tf.reduce_max(indices) + 1, tf.reduce_max(values) + 1])\n```",
            "```python\n    shape = tf.reduce_max(in2, axis=0) + 1\n    return tf.scatter_nd(in2, in1, shape)\n```",
            "```\n    top_k_indices = tf.math.top_k(in1, k=1).indices\n    updates = tf.gather_nd(in1, tf.expand_dims(top_k_indices, -1))\n    sparse_tensor = tf.scatter_nd(in2, updates, tf.reduce_max(in2, axis=0) + 1)\n    return sparse_tensor\n```",
            "```python\n    values, idx = tf.math.top_k(in1, k=1)\n    sparse_shape = tf.reduce_max(in2, axis=0) + 1\n    return tf.scatter_nd(in2, values, sparse_shape)\n```",
            "```\n    indices = in2\n    updates = in1\n    shape = [3, 5]\n    return tf.scatter_nd(indices, updates, shape)\n```",
            "```python\n    indices = tf.unstack(in2, axis=1)\n    updates = tf.gather(in1, indices[0])\n    shape = [tf.reduce_max(in2[:, 0]) + 1, tf.reduce_max(in2[:, 1]) + 1]\n    return tf.scatter_nd(in2, updates, shape)\n```",
            "```\n    values, indices = tf.math.top_k(in1, k=2, sorted=False)\n    dense_shape = [tf.reduce_max(in2[:, 0]) + 1, tf.reduce_max(in2[:, 1]) + 1]\n    sparse_indices = in2\n    sparse_values = in1\n    return tf.scatter_nd(sparse_indices, sparse_values, dense_shape)\n```",
            "```python\ndef transform(in1, in2):\n    sparse = tf.scatter_nd(in2, in1, shape=[3, 5])\n    return sparse\n```",
            "```python\ndef transform(in1, in2):\n    updates = tf.gather_nd(in1, tf.expand_dims(tf.range(tf.shape(in1)[0]), 1))\n    return tf.scatter_nd(in2, updates, (3, 5))\n```",
            "```\n    indices = tf.cast(in2, tf.int64)\n    updates = tf.gather(in1, tf.range(tf.shape(in1)[0]))\n    shape = tf.reduce_max(indices, axis=0) + 1\n    return tf.scatter_nd(indices, updates, shape)\n```",
            "```python\n    indices = tf.cast(in2, dtype=tf.int64)\n    updates = in1\n    shape = tf.math.maximum(tf.reduce_max(indices, axis=0), tf.reduce_max(indices)) + 1\n    return tf.scatter_nd(indices, updates, [shape, shape])\n```",
            "```\n    k = tf.gather_nd(in1, in2)\n    indices = tf.cast(in2, tf.int64)\n    shape = [tf.reduce_max(indices[:, 0]) + 1, tf.reduce_max(indices[:, 1]) + 1]\n    return tf.scatter_nd(indices, k, shape)\n```"
        ],
        "normalized_completions": [
            "def transform(in1, in2):\n    indices, values = tf.math.top_k(in2, 1)\n    scattered = tf.scatter_nd(indices, tf.squeeze(values, axis=-1), tf.shape(in1))\n    return scattered",
            "def transform(in1, in2):\n    values, indices = tf.math.top_k(in1, k=1)\n    sparse_indices = tf.expand_dims(tf.cast(tf.squeeze(indices), tf.int64), 1)\n    return tf.scatter_nd(in2, tf.squeeze(values), [3, 5])",
            "def transform(in1, in2):\n    indices = tf.gather(in2, tf.argsort(in1, direction='ASCENDING'))\n    values = tf.sort(in1, direction='ASCENDING')\n    return tf.scatter_nd(indices, values, [tf.shape(in2)[-1], in2[:,1].numpy().max() + 1])",
            "def transform(in1, in2):\n    return tf.scatter_nd(in2, in1, (3, 5))",
            "def transform(in1, in2):\n    k = tf.shape(in2)[0]\n    indices, values = tf.math.top_k(in1, k)\n    return tf.scatter_nd(in2, values, [3, 5])",
            "def transform(in1, in2):\n    top_k_indices = tf.math.top_k(in1, k=1).indices\n    updates = tf.gather(in1, top_k_indices)\n    sparse_indices = tf.concat([in2, tf.expand_dims(top_k_indices, 1)], axis=1)\n    return tf.scatter_nd(sparse_indices, updates, tf.constant([3, 5], dtype=tf.int64))",
            "def transform(in1, in2):\n    k = tf.shape(in2)[0]\n    values, indices = tf.math.top_k(in1, k)\n    return tf.scatter_nd(in2, values, [3, 5])",
            "def transform(in1, in2):\n    values, indices = tf.math.top_k(in1, k=2)\n    updates = values.flat_map(lambda v: tf.unstack(v))\n    return tf.scatter_nd(in2, updates, [3, 5])",
            "def transform(in1, in2):\n    vals, indices = tf.math.top_k(in1, k=1)\n    sparse_tensor = tf.scatter_nd(in2, in1, tf.shape(in1, out_type=tf.int32))\n    return tf.transpose(sparse_tensor)",
            "def transform(in1, in2):\n    indices = tf.math.top_k(in2, k=1).values\n    return tf.scatter_nd(indices, in1, shape=[in2.shape[0], tf.reduce_max(in2) + 1])",
            "def transform(in1, in2):\n    return tf.scatter_nd(in2, in1, [3, 5])",
            "def transform(in1, in2):\n    return tf.scatter_nd(in2, in1, [3, 5])",
            "def transform(in1, in2):\n    shape = tf.cast(tf.reduce_max(in2, axis=0) + 1, tf.int32)\n    sparse_vals = tf.scatter_nd(in2, in1, shape)\n    return sparse_vals",
            "def transform(in1, in2):\n    return tf.scatter_nd(in2, in1, [3, 5])",
            "def transform(in1, in2):\n    indices = tf.nn.top_k(in2, tf.shape(in1)[0])[1]\n    sparse_updates = tf.gather_nd(in1, indices)\n    return tf.scatter_nd(indices, sparse_updates, tf.shape(in2))",
            "def transform(in1, in2):\n    values, indices = tf.math.top_k(in1, k=tf.shape(in1)[0])\n    return tf.scatter_nd(in2, values, [3, 5])",
            "def transform(in1, in2):\n    values, indices = tf.math.top_k(in1, k=tf.shape(in1)[0])\n    shape = [tf.reduce_max(in2[:, 0]) + 1, tf.reduce_max(in2[:, 1]) + 1]\n    sparse_tensor = tf.scatter_nd(in2, values, shape)\n    return sparse_tensor",
            "def transform(in1, in2):\n    updates, indices = tf.math.top_k(in1, k=tf.shape(in2)[0])\n    return tf.scatter_nd(in2, updates.values, tf.reduce_max(in2, axis=0) + [1])",
            "def transform(in1, in2):\n    indices, values = tf.split(in2, [1, 1], axis=1)\n    updates = tf.gather_nd(in1, indices)\n    return tf.scatter_nd(indices, updates, [tf.reduce_max(indices) + 1, tf.reduce_max(values) + 1])",
            "def transform(in1, in2):\n    shape = tf.reduce_max(in2, axis=0) + 1\n    return tf.scatter_nd(in2, in1, shape)",
            "def transform(in1, in2):\n    top_k_indices = tf.math.top_k(in1, k=1).indices\n    updates = tf.gather_nd(in1, tf.expand_dims(top_k_indices, -1))\n    sparse_tensor = tf.scatter_nd(in2, updates, tf.reduce_max(in2, axis=0) + 1)\n    return sparse_tensor",
            "def transform(in1, in2):\n    values, idx = tf.math.top_k(in1, k=1)\n    sparse_shape = tf.reduce_max(in2, axis=0) + 1\n    return tf.scatter_nd(in2, values, sparse_shape)",
            "def transform(in1, in2):\n    indices = in2\n    updates = in1\n    shape = [3, 5]\n    return tf.scatter_nd(indices, updates, shape)",
            "def transform(in1, in2):\n    indices = tf.unstack(in2, axis=1)\n    updates = tf.gather(in1, indices[0])\n    shape = [tf.reduce_max(in2[:, 0]) + 1, tf.reduce_max(in2[:, 1]) + 1]\n    return tf.scatter_nd(in2, updates, shape)",
            "def transform(in1, in2):\n    values, indices = tf.math.top_k(in1, k=2, sorted=False)\n    dense_shape = [tf.reduce_max(in2[:, 0]) + 1, tf.reduce_max(in2[:, 1]) + 1]\n    sparse_indices = in2\n    sparse_values = in1\n    return tf.scatter_nd(sparse_indices, sparse_values, dense_shape)",
            "def transform(in1, in2):\n    sparse = tf.scatter_nd(in2, in1, shape=[3, 5])\n    return sparse",
            "def transform(in1, in2):\n    updates = tf.gather_nd(in1, tf.expand_dims(tf.range(tf.shape(in1)[0]), 1))\n    return tf.scatter_nd(in2, updates, (3, 5))",
            "def transform(in1, in2):\n    indices = tf.cast(in2, tf.int64)\n    updates = tf.gather(in1, tf.range(tf.shape(in1)[0]))\n    shape = tf.reduce_max(indices, axis=0) + 1\n    return tf.scatter_nd(indices, updates, shape)",
            "def transform(in1, in2):\n    indices = tf.cast(in2, dtype=tf.int64)\n    updates = in1\n    shape = tf.math.maximum(tf.reduce_max(indices, axis=0), tf.reduce_max(indices)) + 1\n    return tf.scatter_nd(indices, updates, [shape, shape])",
            "def transform(in1, in2):\n    k = tf.gather_nd(in1, in2)\n    indices = tf.cast(in2, tf.int64)\n    shape = [tf.reduce_max(indices[:, 0]) + 1, tf.reduce_max(indices[:, 1]) + 1]\n    return tf.scatter_nd(indices, k, shape)"
        ],
        "tf_operators": {
            "tf.scatter_nd": 30,
            "tf.math.top_k": 14,
            "tf.shape": 11,
            "tf.squeeze": 2,
            "tf.expand_dims": 4,
            "tf.cast": 5,
            "tf.int64": 5,
            "tf.argsort": 1,
            "tf.sort": 1,
            "tf.gather": 4,
            "tf.constant": 1,
            "tf.concat": 1,
            "tf.unstack": 2,
            "tf.transpose": 1,
            "tf.int32": 2,
            "tf.reduce_max": 13,
            "tf.nn.top_k": 1,
            "tf.gather_nd": 5,
            "tf.split": 1,
            "tf.range": 2,
            "tf.math.maximum": 1
        },
        "coverage_percentage": 50.0,
        "total_covered": 2,
        "total_in_target": 4,
        "parsed_constants": [
            [
                1,
                -1
            ],
            [
                1,
                1,
                3,
                5
            ],
            [
                -1,
                1,
                1
            ],
            [
                3,
                5
            ],
            [
                0,
                3,
                5
            ],
            [
                1,
                1,
                1,
                3,
                5
            ],
            [
                0,
                3,
                5
            ],
            [
                2,
                3,
                5
            ],
            [
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                3,
                5
            ],
            [
                3,
                5
            ],
            [
                0,
                1
            ],
            [
                3,
                5
            ],
            [
                0,
                1
            ],
            [
                0,
                3,
                5
            ],
            [
                0,
                0,
                1,
                1,
                1
            ],
            [
                0,
                0,
                1
            ],
            [
                1,
                1,
                1,
                1,
                1
            ],
            [
                0,
                1
            ],
            [
                1,
                -1,
                0,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                3,
                5
            ],
            [
                1,
                0,
                0,
                1,
                1,
                1
            ],
            [
                2,
                0,
                1,
                1,
                1
            ],
            [
                3,
                5
            ],
            [
                0,
                1,
                3,
                5
            ],
            [
                0,
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1,
                1,
                1
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            3,
            5,
            -1
        ],
        "constant_counts": [
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 1,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 7,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 1
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 1,
                "tf_bool": 0,
                "input_var": 5,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 5,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 7,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 5,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 7,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 9,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 5,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 5,
                "shape_tuple": 1
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 1,
                "tf_bool": 0,
                "input_var": 8,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 1,
                "tf_bool": 0,
                "input_var": 8,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 1,
                "tf_bool": 0,
                "input_var": 7,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 2,
            "tf_bool": 0,
            "axis": 2,
            "common": 56,
            "tf_float32": 0,
            "shape_tuple": 2,
            "shape": 0,
            "tf_int64": 5,
            "provided": 22,
            "input_var": 136
        }
    },
    {
        "name": "stackoverflow_41",
        "description": "copy all elements except at the given index",
        "target_program": "tf.boolean_mask(in1, tf.not_equal(tf.constant(in2), tf.range(10)))",
        "source": "https://stackoverflow.com/questions/54499051/elegant-way-to-access-python-list-and-tensor-in-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[5, 2, 8, 2, 4, 1, 1, 0, 2, 1],3,]",
            "outputs": "[5, 2, 8, 4, 1, 1, 0, 2, 1]"
        },
        "completions": [
            "```python\n    mask = tf.not_equal(tf.range(tf.shape(in1)[0]), in2)\n    return tf.boolean_mask(in1, mask)\n```",
            "```python\n    mask = tf.not_equal(tf.range(tf.shape(in1)[0]), in2)\n    return tf.boolean_mask(in1, mask)\n```",
            "```python\n    return tf.concat([in1[:in2], in1[in2+1:]], axis=0)\n```",
            "```python\n    mask = tf.not_equal(tf.range(tf.size(in1)), in2)\n    return tf.boolean_mask(in1, mask)\n```",
            "```python\n    mask = tf.concat([tf.ones_like(in1[:in2]), tf.zeros_like(in1[in2:in2+1]), tf.ones_like(in1[in2+1:])], axis=0)\n    return tf.boolean_mask(in1, mask)\n```",
            "```python\n    return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))\n```",
            "```\n    mask = tf.not_equal(tf.range(tf.shape(in1)[0]), in2)\n    return tf.boolean_mask(in1, mask)\n```",
            "```python\n    return tf.concat([in1[:in2], in1[in2+1:]], axis=0)\n```",
            "```python\n    return tf.concat([in1[:in2], in1[in2+1:]], axis=0)\n```",
            "```python\n    return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))\n```",
            "```python\n    mask = tf.not_equal(tf.range(tf.shape(in1)[0]), in2)\n    return tf.boolean_mask(in1, mask)\n```",
            "```python\n    mask = tf.not_equal(tf.range(tf.shape(in1)[0]), in2)\n    return tf.boolean_mask(in1, mask)\n```",
            "```python\n    mask = tf.not_equal(tf.range(tf.shape(in1)[0]), in2)\n    return tf.boolean_mask(in1, mask)\n```",
            "```python\n    mask = tf.not_equal(tf.range(tf.shape(in1)[0]), in2)\n    return tf.boolean_mask(in1, mask)\n```",
            "```\n    mask = tf.not_equal(tf.range(tf.shape(in1)[0]), in2)\n    return tf.boolean_mask(in1, mask)\n```",
            "```python\n    mask = tf.not_equal(tf.range(tf.shape(in1)[0]), in2)\n    return tf.boolean_mask(in1, mask)\n```",
            "```python\n    mask=tf.not_equal(tf.range(tf.shape(in1)[0]), in2)\n    return tf.boolean_mask(in1, mask)\n```",
            "```python\n    indices = tf.range(tf.shape(in1)[0])\n    mask = tf.not_equal(indices, in2)\n    return tf.boolean_mask(in1, mask)\n```",
            "```python\n    mask = tf.not_equal(tf.range(tf.shape(in1)[0]), in2)\n    return tf.boolean_mask(in1, mask)\n```",
            "```python\n    return tf.concat([in1[:in2], in1[in2+1:]], axis=0)\n```",
            "```python\n    mask = tf.cast(tf.not_equal(tf.range(tf.shape(in1)[0]), in2), tf.bool)\n    return tf.boolean_mask(in1, mask)\n```",
            "```python\n    return tf.concat([in1[:in2], in1[in2 + 1:]], axis=0)\n```",
            "```python\n    mask = tf.not_equal(tf.range(tf.shape(in1)[0]), in2)\n    return tf.boolean_mask(in1, mask)\n```",
            "```python\n    mask = tf.not_equal(tf.range(tf.shape(in1)[0]), in2)\n    return tf.boolean_mask(in1, mask)\n```",
            "```python\n    mask = tf.not_equal(tf.range(tf.shape(in1)[0]), in2)\n    return tf.boolean_mask(in1, mask)\n```",
            "```python\n    mask = tf.not_equal(tf.range(tf.shape(in1)[0]), in2)\n    return tf.boolean_mask(in1, mask)\n```",
            "```python\n    mask = tf.cast(tf.not_equal(tf.range(tf.shape(in1)[0]), in2), tf.bool)\n    return tf.boolean_mask(in1, mask)\n```",
            "```python\n    mask = tf.not_equal(tf.range(tf.shape(in1)[0]), in2)\n    return tf.boolean_mask(in1, mask)\n```",
            "```python\n    mask = tf.not_equal(tf.range(tf.shape(in1)[0]), in2)\n    return tf.boolean_mask(in1, mask)\n```",
            "```python\n    return tf.concat([in1[:in2], in1[in2+1:]], axis=0)\n```"
        ],
        "normalized_completions": [
            "def transform(in1, in2):\n    mask = tf.not_equal(tf.range(tf.shape(in1)[0]), in2)\n    return tf.boolean_mask(in1, mask)",
            "def transform(in1, in2):\n    mask = tf.not_equal(tf.range(tf.shape(in1)[0]), in2)\n    return tf.boolean_mask(in1, mask)",
            "def transform(in1, in2):\n    return tf.concat([in1[:in2], in1[in2+1:]], axis=0)",
            "def transform(in1, in2):\n    mask = tf.not_equal(tf.range(tf.size(in1)), in2)\n    return tf.boolean_mask(in1, mask)",
            "def transform(in1, in2):\n    mask = tf.concat([tf.ones_like(in1[:in2]), tf.zeros_like(in1[in2:in2+1]), tf.ones_like(in1[in2+1:])], axis=0)\n    return tf.boolean_mask(in1, mask)",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "def transform(in1, in2):\n    mask = tf.not_equal(tf.range(tf.shape(in1)[0]), in2)\n    return tf.boolean_mask(in1, mask)",
            "def transform(in1, in2):\n    return tf.concat([in1[:in2], in1[in2+1:]], axis=0)",
            "def transform(in1, in2):\n    return tf.concat([in1[:in2], in1[in2+1:]], axis=0)",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "def transform(in1, in2):\n    mask = tf.not_equal(tf.range(tf.shape(in1)[0]), in2)\n    return tf.boolean_mask(in1, mask)",
            "def transform(in1, in2):\n    mask = tf.not_equal(tf.range(tf.shape(in1)[0]), in2)\n    return tf.boolean_mask(in1, mask)",
            "def transform(in1, in2):\n    mask = tf.not_equal(tf.range(tf.shape(in1)[0]), in2)\n    return tf.boolean_mask(in1, mask)",
            "def transform(in1, in2):\n    mask = tf.not_equal(tf.range(tf.shape(in1)[0]), in2)\n    return tf.boolean_mask(in1, mask)",
            "def transform(in1, in2):\n    mask = tf.not_equal(tf.range(tf.shape(in1)[0]), in2)\n    return tf.boolean_mask(in1, mask)",
            "def transform(in1, in2):\n    mask = tf.not_equal(tf.range(tf.shape(in1)[0]), in2)\n    return tf.boolean_mask(in1, mask)",
            "def transform(in1, in2):\n    mask=tf.not_equal(tf.range(tf.shape(in1)[0]), in2)\n    return tf.boolean_mask(in1, mask)",
            "def transform(in1, in2):\n    indices = tf.range(tf.shape(in1)[0])\n    mask = tf.not_equal(indices, in2)\n    return tf.boolean_mask(in1, mask)",
            "def transform(in1, in2):\n    mask = tf.not_equal(tf.range(tf.shape(in1)[0]), in2)\n    return tf.boolean_mask(in1, mask)",
            "def transform(in1, in2):\n    return tf.concat([in1[:in2], in1[in2+1:]], axis=0)",
            "def transform(in1, in2):\n    mask = tf.cast(tf.not_equal(tf.range(tf.shape(in1)[0]), in2), tf.bool)\n    return tf.boolean_mask(in1, mask)",
            "def transform(in1, in2):\n    return tf.concat([in1[:in2], in1[in2 + 1:]], axis=0)",
            "def transform(in1, in2):\n    mask = tf.not_equal(tf.range(tf.shape(in1)[0]), in2)\n    return tf.boolean_mask(in1, mask)",
            "def transform(in1, in2):\n    mask = tf.not_equal(tf.range(tf.shape(in1)[0]), in2)\n    return tf.boolean_mask(in1, mask)",
            "def transform(in1, in2):\n    mask = tf.not_equal(tf.range(tf.shape(in1)[0]), in2)\n    return tf.boolean_mask(in1, mask)",
            "def transform(in1, in2):\n    mask = tf.not_equal(tf.range(tf.shape(in1)[0]), in2)\n    return tf.boolean_mask(in1, mask)",
            "def transform(in1, in2):\n    mask = tf.cast(tf.not_equal(tf.range(tf.shape(in1)[0]), in2), tf.bool)\n    return tf.boolean_mask(in1, mask)",
            "def transform(in1, in2):\n    mask = tf.not_equal(tf.range(tf.shape(in1)[0]), in2)\n    return tf.boolean_mask(in1, mask)",
            "def transform(in1, in2):\n    mask = tf.not_equal(tf.range(tf.shape(in1)[0]), in2)\n    return tf.boolean_mask(in1, mask)",
            "def transform(in1, in2):\n    return tf.concat([in1[:in2], in1[in2+1:]], axis=0)"
        ],
        "tf_operators": {
            "tf.shape": 22,
            "tf.range": 23,
            "tf.boolean_mask": 24,
            "tf.not_equal": 23,
            "tf.concat": 7,
            "tf.size": 1,
            "tf.zeros_like": 1,
            "tf.ones_like": 1,
            "tf.cast": 2,
            "tf.bool": 2
        },
        "coverage_percentage": 75.0,
        "total_covered": 3,
        "total_in_target": 4,
        "parsed_constants": [
            [
                0
            ],
            [
                0
            ],
            [
                1,
                0
            ],
            [],
            [
                1,
                1,
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                1,
                0
            ],
            [
                0
            ],
            [
                1,
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                1,
                0
            ]
        ],
        "all_constants": [
            0,
            1
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 8,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 5,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 0,
            "tf_bool": 2,
            "axis": 0,
            "common": 37,
            "tf_float32": 0,
            "shape_tuple": 0,
            "shape": 0,
            "tf_int64": 0,
            "provided": 0,
            "input_var": 103
        }
    },
    {
        "name": "stackoverflow_42",
        "description": "create a binary vector where the max element is 1",
        "target_program": "tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)",
        "source": "https://stackoverflow.com/questions/54493814/binary-vector-of-max",
        "constants": "[]",
        "examples": {
            "inputs": "[[4, 6, 2, 6, 7, 3, -3],]",
            "outputs": "[0, 0, 0, 0, 1, 0, 0]"
        },
        "completions": [
            "```python\n    return tf.one_hot(tf.argmax(in1, axis=0), tf.shape(in1)[0], on_value=1, off_value=0)\n```",
            "```python\ndef transform(in1):\n    return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)\n```",
            "```python\n    return tf.one_hot(tf.argmax(in1, axis=0), tf.shape(in1)[0], dtype=tf.int32)\n```",
            "```python\n    return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)\n```",
            "```python\ndef transform(in1):\n    return tf.one_hot(tf.argmax(in1, axis=0), depth=tf.shape(in1)[0])\n```",
            "```python\n    return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)\n```",
            "```python\n    return tf.one_hot(tf.argmax(in1), tf.shape(in1)[0], dtype=tf.int32)\n```",
            "```python\n    return tf.one_hot(tf.argmax(in1), tf.shape(in1)[0], dtype=tf.int32)\n```",
            "```python\n    return tf.one_hot(tf.argmax(in1, axis=0), depth=tf.shape(in1)[0])\n```",
            "```python\n    return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)\n```",
            "```python\n    return tf.one_hot(tf.argmax(in1), tf.size(in1), on_value=1, off_value=0)\n```",
            "```python\n    return tf.one_hot(tf.argmax(in1, axis=0), tf.shape(in1)[0], on_value=1, off_value=0, dtype=tf.int32)\n```",
            "```python\n    return tf.one_hot(tf.argmax(in1), tf.shape(in1)[0], dtype=tf.int32)\n```",
            "```python\n    return tf.one_hot(tf.argmax(in1, axis=0), tf.shape(in1)[0])[:tf.shape(in1)[0]]\n```",
            "```python\ndef transform(in1):\n    return tf.one_hot(tf.argmax(in1, axis=0), tf.shape(in1)[0], dtype=tf.int32)\n```",
            "```python\n    return tf.one_hot(tf.argmax(in1), depth=tf.shape(in1)[0])\n```",
            "```\n    return tf.one_hot(tf.argmax(in1), tf.shape(in1)[0])\n```",
            "```python\n    return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)\n```",
            "```python\ndef transform(in1):\n    return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)\n```",
            "```python\n    return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)\n```",
            "```python\n    return tf.one_hot(tf.argmax(in1), tf.shape(in1)[0])\n```",
            "```python\n    return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)\n```",
            "```python\n    return tf.one_hot(tf.argmax(in1), tf.shape(in1)[0])\n```",
            "```python\n    return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)\n```",
            "```python\ndef transform(in1):\n    return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)\n```",
            "```python\n    return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)\n```",
            "```python\n    return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)\n```",
            "```python\ndef transform(in1):\n    return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)\n```",
            "```python\nreturn tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)\n```",
            "```python\n    idx = tf.argmax(in1)\n    return tf.one_hot(idx, tf.shape(in1)[0], on_value=1, off_value=0)\n```"
        ],
        "normalized_completions": [
            "def transform(in1):\n    return tf.one_hot(tf.argmax(in1, axis=0), tf.shape(in1)[0], on_value=1, off_value=0)",
            "def transform(in1):\n    return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)",
            "def transform(in1):\n    return tf.one_hot(tf.argmax(in1, axis=0), tf.shape(in1)[0], dtype=tf.int32)",
            "def transform(in1):\n    return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)",
            "def transform(in1):\n    return tf.one_hot(tf.argmax(in1, axis=0), depth=tf.shape(in1)[0])",
            "def transform(in1):\n    return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)",
            "def transform(in1):\n    return tf.one_hot(tf.argmax(in1), tf.shape(in1)[0], dtype=tf.int32)",
            "def transform(in1):\n    return tf.one_hot(tf.argmax(in1), tf.shape(in1)[0], dtype=tf.int32)",
            "def transform(in1):\n    return tf.one_hot(tf.argmax(in1, axis=0), depth=tf.shape(in1)[0])",
            "def transform(in1):\n    return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)",
            "def transform(in1):\n    return tf.one_hot(tf.argmax(in1), tf.size(in1), on_value=1, off_value=0)",
            "def transform(in1):\n    return tf.one_hot(tf.argmax(in1, axis=0), tf.shape(in1)[0], on_value=1, off_value=0, dtype=tf.int32)",
            "def transform(in1):\n    return tf.one_hot(tf.argmax(in1), tf.shape(in1)[0], dtype=tf.int32)",
            "def transform(in1):\n    return tf.one_hot(tf.argmax(in1, axis=0), tf.shape(in1)[0])[:tf.shape(in1)[0]]",
            "def transform(in1):\n    return tf.one_hot(tf.argmax(in1, axis=0), tf.shape(in1)[0], dtype=tf.int32)",
            "def transform(in1):\n    return tf.one_hot(tf.argmax(in1), depth=tf.shape(in1)[0])",
            "def transform(in1):\n    return tf.one_hot(tf.argmax(in1), tf.shape(in1)[0])",
            "def transform(in1):\n    return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)",
            "def transform(in1):\n    return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)",
            "def transform(in1):\n    return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)",
            "def transform(in1):\n    return tf.one_hot(tf.argmax(in1), tf.shape(in1)[0])",
            "def transform(in1):\n    return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)",
            "def transform(in1):\n    return tf.one_hot(tf.argmax(in1), tf.shape(in1)[0])",
            "def transform(in1):\n    return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)",
            "def transform(in1):\n    return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)",
            "def transform(in1):\n    return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)",
            "def transform(in1):\n    return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)",
            "def transform(in1):\n    return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)",
            "def transform(in1):\n    return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)",
            "def transform(in1):\n    idx = tf.argmax(in1)\n    return tf.one_hot(idx, tf.shape(in1)[0], on_value=1, off_value=0)"
        ],
        "tf_operators": {
            "tf.argmax": 16,
            "tf.shape": 15,
            "tf.one_hot": 16,
            "tf.equal": 14,
            "tf.int32": 20,
            "tf.cast": 14,
            "tf.reduce_max": 14,
            "tf.size": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 4,
        "total_in_target": 4,
        "parsed_constants": [
            [
                0,
                0,
                1,
                0
            ],
            [],
            [
                0,
                0
            ],
            [],
            [
                0,
                0
            ],
            [],
            [
                0
            ],
            [
                0
            ],
            [
                0,
                0
            ],
            [],
            [
                1,
                0
            ],
            [
                0,
                0,
                1,
                0
            ],
            [
                0
            ],
            [
                0,
                0,
                0
            ],
            [
                0,
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [],
            [],
            [],
            [
                0
            ],
            [],
            [
                0
            ],
            [],
            [],
            [],
            [],
            [],
            [],
            [
                0,
                1,
                0
            ]
        ],
        "all_constants": [
            0,
            1
        ],
        "constant_counts": [
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 20,
            "tf_bool": 0,
            "axis": 0,
            "common": 31,
            "tf_float32": 0,
            "shape_tuple": 0,
            "shape": 0,
            "tf_int64": 0,
            "provided": 0,
            "input_var": 61
        }
    },
    {
        "name": "stackoverflow_43",
        "description": "extract elements of a tensor given row indices",
        "target_program": "tf.gather_nd(tf.transpose(in1), tf.expand_dims(in2, 1), batch_dims=1)",
        "source": "https://stackoverflow.com/questions/54455169/better-way-to-access-individual-elements-in-a-tensor",
        "constants": "[]",
        "examples": {
            "inputs": "[[[12, 34, 56, 78, 90, 10], [99, 88, 77, 55, 44, 33], [-1, -2, -3, -4, -5, -6]],[0, 1, 1, 0, 2, 0],]",
            "outputs": "[12, 88, 77, 78, -5, 10]"
        },
        "completions": [
            "```\n    return tf.gather(in1, in2, axis=0, batch_dims=1)\n```",
            "```python\n    return tf.gather_nd(in1, tf.expand_dims(in2, 1), batch_dims=1)\n```",
            "```python\n    return tf.gather_nd(in1, tf.expand_dims(in2, 1), batch_dims=1)\n```",
            "```python\n    return tf.gather_nd(in1, tf.expand_dims(in2, 1), batch_dims=1)\n```",
            "```python\n    indices = tf.stack([tf.range(tf.shape(in1)[1]), in2], axis=1)\n    return tf.gather_nd(in1, indices)\n```",
            "```python\n    return tf.gather_nd(in1, tf.expand_dims(in2, 1), batch_dims=1)\n```",
            "```python\n    return tf.gather(in1, in2, axis=0, batch_dims=1)\n```",
            "```python\n    return tf.gather_nd(in1, tf.expand_dims(in2, axis=1), batch_dims=1)\n```",
            "```python\n    return tf.gather_nd(in1, tf.expand_dims(in2, 1), batch_dims=1)\n```",
            "```python\n    return tf.gather(in1, in2, axis=0, batch_dims=1)\n```",
            "```\n    return tf.gather(in1, in2, axis=0, batch_dims=1)\n```",
            "```python\n    return tf.gather_nd(in1, tf.expand_dims(in2, axis=1), batch_dims=1)\n```",
            "```\n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1))\n```",
            "```\n    return tf.gather(in1, in2, axis=0, batch_dims=1)\n```",
            "```python\n    return tf.gather_nd(in1, tf.expand_dims(in2, 1), batch_dims=1)\n```",
            "```python\n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1))\n```",
            "```python\n    return tf.gather(in1, in2, axis=0, batch_dims=1)\n```",
            "```python\n    return tf.gather(in1, in2, batch_dims=1)\n```",
            "```python\n    return tf.gather_nd(in1, tf.expand_dims(in2, 1), batch_dims=1)\n```",
            "```python\n    return tf.gather_nd(in1, tf.stack([in2, tf.range(tf.shape(in1)[1])], axis=1))\n```",
            "```python\n    return tf.gather_nd(in1, tf.expand_dims(in2, 1), batch_dims=1)\n```",
            "```python\n    return tf.gather(in1, in2, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather(in1, in2, axis=0, batch_dims=1)\n```",
            "```python\n    return tf.gather_nd(in1, tf.expand_dims(in2, 1), batch_dims=1)\n```",
            "```python\n    return tf.gather(in1, in2, axis=0, batch_dims=1)\n```",
            "```python\n    return tf.gather(in1, in2, axis=0, batch_dims=1)\n```",
            "```python\n    indices = tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1)\n    return tf.gather_nd(in1, indices)\n```",
            "def transform(in1, in2):\n    return tf.gather(in1, in2, axis=0, batch_dims=1)",
            "```python\n    return tf.gather_nd(in1, tf.stack([in2, tf.range(tf.shape(in1)[1])], axis=1))\n```",
            "```python\n    return tf.gather(in1, in2, axis=0, batch_dims=1)\n```"
        ],
        "normalized_completions": [
            "def transform(in1, in2):\n    return tf.gather(in1, in2, axis=0, batch_dims=1)",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.expand_dims(in2, 1), batch_dims=1)",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.expand_dims(in2, 1), batch_dims=1)",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.expand_dims(in2, 1), batch_dims=1)",
            "def transform(in1, in2):\n    indices = tf.stack([tf.range(tf.shape(in1)[1]), in2], axis=1)\n    return tf.gather_nd(in1, indices)",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.expand_dims(in2, 1), batch_dims=1)",
            "def transform(in1, in2):\n    return tf.gather(in1, in2, axis=0, batch_dims=1)",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.expand_dims(in2, axis=1), batch_dims=1)",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.expand_dims(in2, 1), batch_dims=1)",
            "def transform(in1, in2):\n    return tf.gather(in1, in2, axis=0, batch_dims=1)",
            "def transform(in1, in2):\n    return tf.gather(in1, in2, axis=0, batch_dims=1)",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.expand_dims(in2, axis=1), batch_dims=1)",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1))",
            "def transform(in1, in2):\n    return tf.gather(in1, in2, axis=0, batch_dims=1)",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.expand_dims(in2, 1), batch_dims=1)",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1))",
            "def transform(in1, in2):\n    return tf.gather(in1, in2, axis=0, batch_dims=1)",
            "def transform(in1, in2):\n    return tf.gather(in1, in2, batch_dims=1)",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.expand_dims(in2, 1), batch_dims=1)",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.stack([in2, tf.range(tf.shape(in1)[1])], axis=1))",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.expand_dims(in2, 1), batch_dims=1)",
            "def transform(in1, in2):\n    return tf.gather(in1, in2, axis=1, batch_dims=1)",
            "def transform(in1, in2):\n    return tf.gather(in1, in2, axis=0, batch_dims=1)",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.expand_dims(in2, 1), batch_dims=1)",
            "def transform(in1, in2):\n    return tf.gather(in1, in2, axis=0, batch_dims=1)",
            "def transform(in1, in2):\n    return tf.gather(in1, in2, axis=0, batch_dims=1)",
            "def transform(in1, in2):\n    indices = tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1)\n    return tf.gather_nd(in1, indices)",
            "def transform(in1, in2):\n    return tf.gather(in1, in2, axis=0, batch_dims=1)",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.stack([in2, tf.range(tf.shape(in1)[1])], axis=1))",
            "def transform(in1, in2):\n    return tf.gather(in1, in2, axis=0, batch_dims=1)"
        ],
        "tf_operators": {
            "tf.gather": 13,
            "tf.expand_dims": 11,
            "tf.gather_nd": 17,
            "tf.shape": 6,
            "tf.range": 6,
            "tf.stack": 6
        },
        "coverage_percentage": 66.66666666666666,
        "total_covered": 2,
        "total_in_target": 3,
        "parsed_constants": [
            [
                0,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                0,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                1,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                1,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                0,
                1
            ],
            [
                1,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                1,
                1
            ],
            [
                0,
                1
            ]
        ],
        "all_constants": [
            0,
            1
        ],
        "constant_counts": [
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 5,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 5,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 0,
            "tf_bool": 0,
            "axis": 0,
            "common": 59,
            "tf_float32": 0,
            "shape_tuple": 0,
            "shape": 0,
            "tf_int64": 0,
            "provided": 0,
            "input_var": 70
        }
    },
    {
        "name": "stackoverflow_44",
        "description": "sum across columns for pairs of consecutive rows",
        "target_program": "tf.squeeze(tf.reduce_sum(tf.reshape(in1, (-1, 2, in1.shape[1])), axis=1))",
        "source": "https://stackoverflow.com/questions/54402389/sum-the-columns-for-each-two-consecutive-rows-of-a-tensor-of-3-dimensions",
        "constants": "[2]",
        "examples": {
            "inputs": "[[[3, 5, 2], [6, 2, 3], [8, 7, 1], [0, -3, 5], [-4, 7, 3], [2, 1, 6], [10, 20, 30], [4, 5, 6]],]",
            "outputs": "[[9, 7, 5],    [8, 4, 6],    [-2, 8, 9],    [14, 25, 36]]"
        },
        "completions": [
            "```python\n    return tf.add_n([tf.gather(in1, tf.range(0, tf.shape(in1)[0], 2)),\n                     tf.gather(in1, tf.range(1, tf.shape(in1)[0], 2))])\n```",
            "```python\ndef transform(in1):\n    return tf.add_n(tf.reshape(in1, (-1, 2, tf.shape(in1)[1])))\n```",
            "```python\ndef transform(in1):\n    return tf.reduce_sum(tf.reshape(in1, (-1, 2, in1.shape[1])), axis=1)\n```",
            "```python\ndef transform(in1):\n    return tf.add_n(tf.unstack(in1, axis=0)[i::2] for i in range(2))\n```",
            "```python\ndef transform(in1):\n    return tf.add_n(tf.split(in1, 2))\n```",
            "```python\n    return tf.reshape(tf.add_n(tf.unstack(in1, axis=0)[i:i+2] for i in range(0, tf.shape(in1)[0], 2)), [-1, tf.shape(in1)[1]])\n```",
            "```python\n    return tf.add_n(tf.unstack(in1, axis=0)[::2])\n```",
            "```python\n    return tf.reshape(tf.reduce_sum(tf.reshape(in1, (-1, 2, tf.shape(in1)[1])), axis=1), (-1, tf.shape(in1)[1]))\n```",
            "```python\nreturn tf.add_n(tf.unstack(in1, axis=0)[::2]) + tf.add_n(tf.unstack(in1, axis=0)[1::2])\n```",
            "```python\ndef transform(in1):\n    return tf.add_n(tf.unstack(tf.reshape(in1, [-1, 2, tf.shape(in1)[1]]), axis=1))\n```",
            "```python\ndef transform(in1):\n    return tf.add_n([in1[::2], in1[1::2]])\n```",
            "```python\ndef transform(in1):\n    return tf.reduce_sum(tf.reshape(in1, [-1, 2, tf.shape(in1)[1]]), axis=1)\n```",
            "```python\n    return tf.add_n(tf.reshape(in1, [-1, 2, tf.shape(in1)[1]]), axis=1)\n```",
            "```python\ndef transform(in1):\n    return tf.add_n([in1[::2], in1[1::2]])\n```",
            "```python\ndef transform(in1):\n    return tf.add_n([in1[::2], in1[1::2]])\n```",
            "```python\ndef transform(in1):\n    return tf.add_n(tf.split(in1, 2))\n```",
            "```python\n    return tf.math.add_n(tf.reshape(in1, (-1, 2, in1.shape[1])), axis=1)\n```",
            "```python\ndef transform(in1):\n    return tf.reduce_sum(tf.reshape(in1, (-1, 2, in1.shape[1])), axis=1)\n```",
            "```python\ndef transform(in1):\n    return tf.add_n(tf.unstack(in1, axis=0)[::2]) + tf.add_n(tf.unstack(in1, axis=0)[1::2])\n```",
            "```python\ndef transform(in1):\n    return tf.math.add_n(tf.reshape(in1, [-1, 2, in1.shape[1]]))\n```",
            "```python\ndef transform(in1):\n    return tf.add_n([in1[::2], in1[1::2]])\n```",
            "```python\ndef transform(in1):\n    pairs = tf.reshape(in1, (-1, 2, in1.shape[1]))\n    return tf.reduce_sum(pairs, axis=1)\n```",
            "```python\ndef transform(in1):\n    return tf.reshape(tf.reduce_sum(tf.reshape(in1, [-1, 2, tf.shape(in1)[1]]), axis=1), [-1, tf.shape(in1)[1]])\n```",
            "```python\ndef transform(in1):\n    in1 = tf.reshape(in1, [-1, 2, tf.shape(in1)[1]])\n    return tf.reduce_sum(in1, axis=1)\n```",
            "```python\ndef transform(in1):\n    return tf.reduce_sum(tf.reshape(in1, [-1, 2, in1.shape[1]]), axis=1)\n```",
            "```python\ndef transform(in1):\n    return tf.add_n(tf.unstack(tf.reshape(in1, [-1, 2, in1.shape[1]]), axis=1))\n```",
            "```python\ndef transform(in1):\n    reshaped = tf.reshape(in1, [-1, 2, tf.shape(in1)[1]])\n    summed = tf.reduce_sum(reshaped, axis=1)\n    return summed\n```",
            "```python\ndef transform(in1):\n    reshaped = tf.reshape(in1, [-1, 2, in1.shape[-1]])\n    return tf.reduce_sum(reshaped, axis=1)\n```",
            "```python\ndef transform(in1):\n    return tf.add_n([in1[::2], in1[1::2]])\n```",
            "```python\ndef transform(in1):\n    return tf.reduce_sum(tf.reshape(in1, (-1, 2, in1.shape[1])), axis=1)\n```"
        ],
        "normalized_completions": [
            "def transform(in1):\n return tf.add_n([tf.gather(in1, tf.range(0, tf.shape(in1)[0], 2)),\n                  tf.gather(in1, tf.range(1, tf.shape(in1)[0], 2))])",
            "def transform(in1):\n    return tf.add_n(tf.reshape(in1, (-1, 2, tf.shape(in1)[1])))",
            "def transform(in1):\n    return tf.reduce_sum(tf.reshape(in1, (-1, 2, in1.shape[1])), axis=1)",
            "def transform(in1):\n    return tf.add_n(tf.unstack(in1, axis=0)[i::2] for i in range(2))",
            "def transform(in1):\n    return tf.add_n(tf.split(in1, 2))",
            "def transform(in1):\n    return tf.reshape(tf.add_n(tf.unstack(in1, axis=0)[i:i+2] for i in range(0, tf.shape(in1)[0], 2)), [-1, tf.shape(in1)[1]])",
            "def transform(in1):\n    return tf.add_n(tf.unstack(in1, axis=0)[::2])",
            "def transform(in1):\n    return tf.reshape(tf.reduce_sum(tf.reshape(in1, (-1, 2, tf.shape(in1)[1])), axis=1), (-1, tf.shape(in1)[1]))",
            "def transform(in1):\n    return tf.add_n(tf.unstack(in1, axis=0)[::2]) + tf.add_n(tf.unstack(in1, axis=0)[1::2])",
            "def transform(in1):\n    return tf.add_n(tf.unstack(tf.reshape(in1, [-1, 2, tf.shape(in1)[1]]), axis=1))",
            "def transform(in1):\n    return tf.add_n([in1[::2], in1[1::2]])",
            "def transform(in1):\n    return tf.reduce_sum(tf.reshape(in1, [-1, 2, tf.shape(in1)[1]]), axis=1)",
            "def transform(in1):\n    return tf.add_n(tf.reshape(in1, [-1, 2, tf.shape(in1)[1]]), axis=1)",
            "def transform(in1):\n    return tf.add_n([in1[::2], in1[1::2]])",
            "def transform(in1):\n    return tf.add_n([in1[::2], in1[1::2]])",
            "def transform(in1):\n    return tf.add_n(tf.split(in1, 2))",
            "def transform(in1):\n    return tf.math.add_n(tf.reshape(in1, (-1, 2, in1.shape[1])), axis=1)",
            "def transform(in1):\n    return tf.reduce_sum(tf.reshape(in1, (-1, 2, in1.shape[1])), axis=1)",
            "def transform(in1):\n    return tf.add_n(tf.unstack(in1, axis=0)[::2]) + tf.add_n(tf.unstack(in1, axis=0)[1::2])",
            "def transform(in1):\n    return tf.math.add_n(tf.reshape(in1, [-1, 2, in1.shape[1]]))",
            "def transform(in1):\n    return tf.add_n([in1[::2], in1[1::2]])",
            "def transform(in1):\n    pairs = tf.reshape(in1, (-1, 2, in1.shape[1]))\n    return tf.reduce_sum(pairs, axis=1)",
            "def transform(in1):\n    return tf.reshape(tf.reduce_sum(tf.reshape(in1, [-1, 2, tf.shape(in1)[1]]), axis=1), [-1, tf.shape(in1)[1]])",
            "def transform(in1):\n    in1 = tf.reshape(in1, [-1, 2, tf.shape(in1)[1]])\n    return tf.reduce_sum(in1, axis=1)",
            "def transform(in1):\n    return tf.reduce_sum(tf.reshape(in1, [-1, 2, in1.shape[1]]), axis=1)",
            "def transform(in1):\n    return tf.add_n(tf.unstack(tf.reshape(in1, [-1, 2, in1.shape[1]]), axis=1))",
            "def transform(in1):\n    reshaped = tf.reshape(in1, [-1, 2, tf.shape(in1)[1]])\n    summed = tf.reduce_sum(reshaped, axis=1)\n    return summed",
            "def transform(in1):\n    reshaped = tf.reshape(in1, [-1, 2, in1.shape[-1]])\n    return tf.reduce_sum(reshaped, axis=1)",
            "def transform(in1):\n    return tf.add_n([in1[::2], in1[1::2]])",
            "def transform(in1):\n    return tf.reduce_sum(tf.reshape(in1, (-1, 2, in1.shape[1])), axis=1)"
        ],
        "tf_operators": {
            "tf.add_n": 17,
            "tf.shape": 10,
            "tf.gather": 1,
            "tf.range": 1,
            "tf.reshape": 18,
            "tf.reduce_sum": 11,
            "tf.unstack": 7,
            "tf.split": 2,
            "tf.math.add_n": 2
        },
        "coverage_percentage": 66.66666666666666,
        "total_covered": 2,
        "total_in_target": 3,
        "parsed_constants": [
            [
                0,
                0,
                2,
                1,
                0,
                2
            ],
            [
                -1,
                2,
                1
            ],
            [
                -1,
                2,
                1,
                1
            ],
            [
                0,
                2,
                2
            ],
            [
                2
            ],
            [
                0,
                2,
                0,
                0,
                2,
                -1,
                1
            ],
            [
                0,
                2
            ],
            [
                -1,
                2,
                1,
                1,
                -1,
                1
            ],
            [
                0,
                2,
                0,
                1,
                2
            ],
            [
                -1,
                2,
                1,
                1
            ],
            [
                2,
                1,
                2
            ],
            [
                -1,
                2,
                1,
                1
            ],
            [
                -1,
                2,
                1,
                1
            ],
            [
                2,
                1,
                2
            ],
            [
                2,
                1,
                2
            ],
            [
                2
            ],
            [
                -1,
                2,
                1,
                1
            ],
            [
                -1,
                2,
                1,
                1
            ],
            [
                0,
                2,
                0,
                1,
                2
            ],
            [
                -1,
                2,
                1
            ],
            [
                2,
                1,
                2
            ],
            [
                -1,
                2,
                1,
                1
            ],
            [
                -1,
                2,
                1,
                1,
                -1,
                1
            ],
            [
                -1,
                2,
                1,
                1
            ],
            [
                -1,
                2,
                1,
                1
            ],
            [
                -1,
                2,
                1,
                1
            ],
            [
                -1,
                2,
                1,
                1
            ],
            [
                -1,
                2,
                -1,
                1
            ],
            [
                2,
                1,
                2
            ],
            [
                -1,
                2,
                1,
                1
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            -1
        ],
        "constant_counts": [
            {
                "common": 4,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 0,
            "tf_bool": 0,
            "axis": 33,
            "common": 75,
            "tf_float32": 0,
            "shape_tuple": 0,
            "shape": 0,
            "tf_int64": 0,
            "provided": 0,
            "input_var": 54
        }
    },
    {
        "name": "stackoverflow_45",
        "description": "reverse the order in the marked rows",
        "target_program": "tf.where(tf.sequence_mask(in2), x=tf.roll(in1, 1, -1), y=in1)",
        "source": "https://stackoverflow.com/questions/54337925/reverse-order-of-some-elements-in-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[[[12, 34], [56, 78], [23, 54], [76, 78], [42, 24]]],[1, 0, 1, 0, 1],]",
            "outputs": "[[[34, 12], [56, 78], [54, 23], [76, 78], [24, 42]]]"
        },
        "completions": [
            "```python\n    mask = tf.expand_dims(tf.cast(in2, tf.bool), -1)\n    reversed_rows = tf.reverse(in1, axis=[2])\n    return tf.where(mask, reversed_rows, in1)\n```",
            "```python\n    mask = tf.cast(in2, tf.bool)\n    reversed_rows = tf.reverse(in1[mask], axis=[1])\n    regular_rows = in1[~mask]\n    return tf.concat([reversed_rows, regular_rows], axis=0)\n```",
            "```python\n    mask = tf.cast(in2, tf.bool)\n    reversed_rows = tf.where(mask[:, None], tf.reverse(in1, axis=[-1]), in1)\n    return reversed_rows\n```",
            "```\ndef transform(in1, in2):\n    return tf.where(tf.expand_dims(tf.cast(in2, tf.bool), -1), tf.reverse(in1, axis=[2]), in1)\n```",
            "```python\n    return tf.where(tf.expand_dims(tf.cast(in2, tf.bool), -1), tf.reverse(in1, axis=[2]), in1)\n```",
            "```python\n    mask = tf.cast(in2, tf.bool)\n    reversed_rows = tf.where(mask, tf.reverse(in1[0], axis=[1]), in1[0])\n    return tf.expand_dims(reversed_rows, axis=0)\n```",
            "```python\n    mask = tf.cast(in2, tf.bool)\n    return tf.where(tf.expand_dims(mask, -1), tf.reverse(in1, axis=[2]), in1)\n```",
            "```python\n    mask = tf.cast(in2, tf.bool)\n    in1_rev = tf.reverse(in1, axis=[2])\n    return tf.where(tf.expand_dims(mask, axis=-1), in1_rev, in1)\n```",
            "```python\n    return tf.where(tf.cast(tf.expand_dims(in2, axis=-1), tf.bool), tf.reverse(in1, axis=[-1]), in1)\n```",
            "```python\n    mask = tf.cast(in2, tf.bool)\n    return tf.where(mask[:, None], tf.reverse(in1, axis=[2]), in1)\n```",
            "```python\n    mask = tf.cast(in2, tf.bool)\n    reversed_rows = tf.where(tf.expand_dims(mask, -1), tf.reverse(in1, axis=[2]), in1)\n    return reversed_rows\n```",
            "```python\n    mask = tf.cast(in2, tf.bool)\n    unstacked = tf.unstack(in1, axis=1)\n    for i in range(len(unstacked)):\n        unstacked[i] = tf.where(mask, tf.reverse(unstacked[i], axis=[1]), unstacked[i])\n    return tf.stack(unstacked, axis=1)\n```",
            "def transform(in1, in2):\n    mask = tf.cast(in2, tf.bool)\n    in1_masked = tf.reverse(tf.boolean_mask(in1, mask), axis=[-1])\n    result = tf.tensor_scatter_nd_update(in1, tf.where(mask), in1_masked)\n    return result",
            "```\n    return tf.where(tf.expand_dims(tf.cast(in2, tf.bool), -1), tf.reverse(in1, axis=[2]), in1)\n```",
            "```python\n    mask = tf.cast(in2, tf.bool)\n    reversed_rows = tf.where(mask, tf.reverse(in1, [2]), in1)\n    return reversed_rows\n```",
            "```python\n    return tf.where(tf.expand_dims(in2, -1), tf.reverse(in1, [2]), in1)\n```",
            "```python\n    mask = tf.cast(in2, tf.bool)\n    rev_rows = tf.tensor_scatter_nd_update(in1, tf.where(mask), tf.reverse(tf.boolean_mask(in1, mask), axis=[1]))\n    return tf.where(tf.expand_dims(mask, -1), rev_rows, in1)\n```",
            "```python\n    return tf.where(tf.cast(tf.expand_dims(in2, -1), tf.bool), tf.reverse(in1, axis=[2]), in1)\n```",
            "```python\n    mask = tf.expand_dims(tf.cast(in2, tf.bool), -1)\n    reversed_rows = tf.reverse(in1, axis=[2])\n    return tf.where(mask, reversed_rows, in1)\n```",
            "```python\n    return tf.where(tf.expand_dims(in2, -1), tf.reverse(in1, axis=[2]), in1)\n```",
            "```python\n    mask = tf.cast(in2, tf.bool)\n    reversed_rows = tf.where(mask[:, None, None], tf.reverse(in1, axis=[2]), in1)\n    return reversed_rows\n```",
            "```\n    mask = tf.cast(in2, tf.bool)\n    reversed_rows = tf.reverse(in1, axis=[2])\n    return tf.where(tf.expand_dims(mask, -1), reversed_rows, in1)\n```",
            "```python\n    mask = tf.cast(in2, tf.bool)\n    reversed_rows = tf.where(mask[:, None], tf.reverse(in1, axis=[2]), in1)\n    return reversed_rows\n```",
            "```python\n    return tf.where(tf.expand_dims(in2, -1), tf.reverse(in1, [2]), in1)\n```",
            "```python\n    mask = tf.expand_dims(tf.cast(in2, tf.bool), -1)\n    return tf.where(mask, tf.reverse(in1, axis=[2]), in1)\n```",
            "```\n    mask = tf.cast(in2, tf.bool)\n    in1 = tf.transpose(in1, perm=[1, 0, 2])\n    in1 = tf.where(mask, tf.reverse(in1, axis=[-1]), in1)\n    return tf.transpose(in1, perm=[1, 0, 2])\n```",
            "```python\n    return tf.where(tf.expand_dims(in2, -1), tf.reverse(in1, axis=[2]), in1)\n```",
            "```python\n    return tf.where(tf.expand_dims(in2, -1), tf.reverse(in1, axis=[-1]), in1)\n```",
            "```python\n    mask = tf.cast(in2, tf.bool)\n    reversed_rows = tf.where(mask, tf.reverse(in1, axis=[-1]), in1)\n    return reversed_rows\n```",
            "```python\n    return tf.where(tf.expand_dims(tf.cast(in2, tf.bool), -1), tf.reverse(in1, [2]), in1)\n```"
        ],
        "normalized_completions": [
            "def transform(in1, in2):\n    mask = tf.expand_dims(tf.cast(in2, tf.bool), -1)\n    reversed_rows = tf.reverse(in1, axis=[2])\n    return tf.where(mask, reversed_rows, in1)",
            "def transform(in1, in2):\n    mask = tf.cast(in2, tf.bool)\n    reversed_rows = tf.reverse(in1[mask], axis=[1])\n    regular_rows = in1[~mask]\n    return tf.concat([reversed_rows, regular_rows], axis=0)",
            "def transform(in1, in2):\n    mask = tf.cast(in2, tf.bool)\n    reversed_rows = tf.where(mask[:, None], tf.reverse(in1, axis=[-1]), in1)\n    return reversed_rows",
            "def transform(in1, in2):\n    return tf.where(tf.expand_dims(tf.cast(in2, tf.bool), -1), tf.reverse(in1, axis=[2]), in1)",
            "def transform(in1, in2):\n    return tf.where(tf.expand_dims(tf.cast(in2, tf.bool), -1), tf.reverse(in1, axis=[2]), in1)",
            "def transform(in1, in2):\n    mask = tf.cast(in2, tf.bool)\n    reversed_rows = tf.where(mask, tf.reverse(in1[0], axis=[1]), in1[0])\n    return tf.expand_dims(reversed_rows, axis=0)",
            "def transform(in1, in2):\n    mask = tf.cast(in2, tf.bool)\n    return tf.where(tf.expand_dims(mask, -1), tf.reverse(in1, axis=[2]), in1)",
            "def transform(in1, in2):\n    mask = tf.cast(in2, tf.bool)\n    in1_rev = tf.reverse(in1, axis=[2])\n    return tf.where(tf.expand_dims(mask, axis=-1), in1_rev, in1)",
            "def transform(in1, in2):\n    return tf.where(tf.cast(tf.expand_dims(in2, axis=-1), tf.bool), tf.reverse(in1, axis=[-1]), in1)",
            "def transform(in1, in2):\n    mask = tf.cast(in2, tf.bool)\n    return tf.where(mask[:, None], tf.reverse(in1, axis=[2]), in1)",
            "def transform(in1, in2):\n    mask = tf.cast(in2, tf.bool)\n    reversed_rows = tf.where(tf.expand_dims(mask, -1), tf.reverse(in1, axis=[2]), in1)\n    return reversed_rows",
            "def transform(in1, in2):\n    mask = tf.cast(in2, tf.bool)\n    unstacked = tf.unstack(in1, axis=1)\n    for i in range(len(unstacked)):\n        unstacked[i] = tf.where(mask, tf.reverse(unstacked[i], axis=[1]), unstacked[i])\n    return tf.stack(unstacked, axis=1)",
            "def transform(in1, in2):\n    mask = tf.cast(in2, tf.bool)\n    in1_masked = tf.reverse(tf.boolean_mask(in1, mask), axis=[-1])\n    result = tf.tensor_scatter_nd_update(in1, tf.where(mask), in1_masked)\n    return result",
            "def transform(in1, in2):\n    return tf.where(tf.expand_dims(tf.cast(in2, tf.bool), -1), tf.reverse(in1, axis=[2]), in1)",
            "def transform(in1, in2):\n    mask = tf.cast(in2, tf.bool)\n    reversed_rows = tf.where(mask, tf.reverse(in1, [2]), in1)\n    return reversed_rows",
            "def transform(in1, in2):\n    return tf.where(tf.expand_dims(in2, -1), tf.reverse(in1, [2]), in1)",
            "def transform(in1, in2):\n    mask = tf.cast(in2, tf.bool)\n    rev_rows = tf.tensor_scatter_nd_update(in1, tf.where(mask), tf.reverse(tf.boolean_mask(in1, mask), axis=[1]))\n    return tf.where(tf.expand_dims(mask, -1), rev_rows, in1)",
            "def transform(in1, in2):\n    return tf.where(tf.cast(tf.expand_dims(in2, -1), tf.bool), tf.reverse(in1, axis=[2]), in1)",
            "def transform(in1, in2):\n    mask = tf.expand_dims(tf.cast(in2, tf.bool), -1)\n    reversed_rows = tf.reverse(in1, axis=[2])\n    return tf.where(mask, reversed_rows, in1)",
            "def transform(in1, in2):\n    return tf.where(tf.expand_dims(in2, -1), tf.reverse(in1, axis=[2]), in1)",
            "def transform(in1, in2):\n    mask = tf.cast(in2, tf.bool)\n    reversed_rows = tf.where(mask[:, None, None], tf.reverse(in1, axis=[2]), in1)\n    return reversed_rows",
            "def transform(in1, in2):\n    mask = tf.cast(in2, tf.bool)\n    reversed_rows = tf.reverse(in1, axis=[2])\n    return tf.where(tf.expand_dims(mask, -1), reversed_rows, in1)",
            "def transform(in1, in2):\n    mask = tf.cast(in2, tf.bool)\n    reversed_rows = tf.where(mask[:, None], tf.reverse(in1, axis=[2]), in1)\n    return reversed_rows",
            "def transform(in1, in2):\n    return tf.where(tf.expand_dims(in2, -1), tf.reverse(in1, [2]), in1)",
            "def transform(in1, in2):\n    mask = tf.expand_dims(tf.cast(in2, tf.bool), -1)\n    return tf.where(mask, tf.reverse(in1, axis=[2]), in1)",
            "def transform(in1, in2):\n    mask = tf.cast(in2, tf.bool)\n    in1 = tf.transpose(in1, perm=[1, 0, 2])\n    in1 = tf.where(mask, tf.reverse(in1, axis=[-1]), in1)\n    return tf.transpose(in1, perm=[1, 0, 2])",
            "def transform(in1, in2):\n    return tf.where(tf.expand_dims(in2, -1), tf.reverse(in1, axis=[2]), in1)",
            "def transform(in1, in2):\n    return tf.where(tf.expand_dims(in2, -1), tf.reverse(in1, axis=[-1]), in1)",
            "def transform(in1, in2):\n    mask = tf.cast(in2, tf.bool)\n    reversed_rows = tf.where(mask, tf.reverse(in1, axis=[-1]), in1)\n    return reversed_rows",
            "def transform(in1, in2):\n    return tf.where(tf.expand_dims(tf.cast(in2, tf.bool), -1), tf.reverse(in1, [2]), in1)"
        ],
        "tf_operators": {
            "tf.expand_dims": 20,
            "tf.where": 29,
            "tf.reverse": 30,
            "tf.cast": 25,
            "tf.bool": 25,
            "tf.concat": 1,
            "tf.unstack": 1,
            "tf.stack": 1,
            "tf.boolean_mask": 2,
            "tf.tensor_scatter_nd_update": 2,
            "tf.transpose": 1
        },
        "coverage_percentage": 33.33333333333333,
        "total_covered": 1,
        "total_in_target": 3,
        "parsed_constants": [
            [
                -1,
                2
            ],
            [
                1,
                0
            ],
            [
                -1
            ],
            [
                -1,
                2
            ],
            [
                -1,
                2
            ],
            [
                0,
                1,
                0,
                0
            ],
            [
                -1,
                2
            ],
            [
                2,
                -1
            ],
            [
                -1,
                -1
            ],
            [
                2
            ],
            [
                -1,
                2
            ],
            [
                1,
                1,
                1
            ],
            [
                -1
            ],
            [
                -1,
                2
            ],
            [
                2
            ],
            [
                -1,
                2
            ],
            [
                1,
                -1
            ],
            [
                -1,
                2
            ],
            [
                -1,
                2
            ],
            [
                -1,
                2
            ],
            [
                2
            ],
            [
                2,
                -1
            ],
            [
                2
            ],
            [
                -1,
                2
            ],
            [
                -1,
                2
            ],
            [
                1,
                0,
                2,
                -1,
                1,
                0,
                2
            ],
            [
                -1,
                2
            ],
            [
                -1,
                -1
            ],
            [
                -1
            ],
            [
                -1,
                2
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            -1
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 5,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 5,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 7,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 3,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 0,
            "tf_bool": 25,
            "axis": 22,
            "common": 39,
            "tf_float32": 0,
            "shape_tuple": 0,
            "shape": 0,
            "tf_int64": 0,
            "provided": 0,
            "input_var": 98
        }
    },
    {
        "name": "stackoverflow_46",
        "description": "convert segment lengths to segment ids",
        "target_program": "tf.cast(tf.where(tf.sequence_mask(in1))[:, 0], tf.int32)",
        "source": "https://stackoverflow.com/questions/58652161/how-to-convert-2-3-4-to-0-0-1-1-1-2-2-2-2-to-utilize-tf-math-segment-sum",
        "constants": "[]",
        "examples": {
            "inputs": "[[3, 4, 1],]",
            "outputs": "[0, 0, 0, 1, 1, 1, 1, 2]"
        },
        "completions": [
            "```python\n    return tf.cast(tf.sequence_mask(in1, tf.reduce_sum(in1)), tf.int32)\n```",
            "```python\n    return tf.cast(tf.sequence_mask(in1), tf.int32)\n```",
            "```python\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)\n```",
            "```python\n    return tf.sequence_mask(in1, in1.shape[0]).numpy().astype(int).sum(axis=1).cumsum() - 1\n```",
            "```python\n    return tf.cast(tf.sequence_mask(in1, maxlen=tf.reduce_sum(in1)), tf.int32)\n```",
            "```python\n    return tf.reshape(tf.sequence_mask(in1, tf.reduce_sum(in1)), [-1])\n```",
            "```python\n    return tf.repeat(tf.range(tf.size(in1)), in1)\n```",
            "```python\n    return tf.where(tf.sequence_mask(in1), tf.range(tf.size(in1)), -1)[tf.where(tf.sequence_mask(in1))]\n```",
            "```python\n    return tf.cast(tf.sequence_mask(in1, tf.reduce_sum(in1)), tf.int32)\n```",
            "```python\n    return tf.reshape(tf.sequence_mask(in1, tf.reduce_sum(in1)), [-1])\n```",
            "```python\n    return tf.sequence_mask(in1, tf.reduce_sum(in1))\n```",
            "```python\n    return tf.reshape(tf.sequence_mask(in1, tf.reduce_sum(in1)), [-1])\n```",
            "```python\n    return tf.cast(tf.sequence_mask(in1, tf.reduce_sum(in1)), tf.int32)\n```",
            "```python\n    return tf.reshape(tf.repeat(tf.range(tf.shape(in1)[0]), in1), [-1])\n```",
            "```python\n    return tf.cast(tf.sequence_mask(in1, tf.reduce_sum(in1)), tf.int32)\n```",
            "```python\n    return tf.cast(tf.sequence_mask(in1, tf.reduce_sum(in1)), tf.int32)\n```",
            "```\n    return tf.sequence_mask(in1, tf.reduce_sum(in1))\n        .eval()\n        .numpy()\n        .nonzero()[1]\n```",
            "```python\n    return tf.reshape(tf.repeat(tf.range(tf.shape(in1)[0]), in1), [-1])\n```",
            "```python\n    return tf.sequence_mask(in1)[..., 0]\n```",
            "```python\n    return tf.concat([tf.fill([length], i) for i, length in enumerate(in1)], axis=0)\n```",
            "```python\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)\n```",
            "```\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)\n```",
            "```python\n    return tf.cast(tf.sequence_mask(in1, tf.reduce_sum(in1)), tf.int32)\n```",
            "```\n    return tf.cast(tf.sequence_mask(in1, maxlen=tf.reduce_sum(in1)), tf.int32)\n```",
            "```python\n    return tf.cast(tf.sequence_mask(in1, tf.reduce_sum(in1)), tf.int32)\n```",
            "```python\n    return tf.sequence_mask(in1, tf.reduce_sum(in1))\n```",
            "```\n    return tf.math.cumsum(tf.one_hot(tf.range(tf.reduce_sum(in1)), tf.reduce_sum(in1)), axis=0)[:, :-1] @ tf.sequence_mask(in1)\n```",
            "```python\n    return tf.cast(tf.sequence_mask(in1, tf.reduce_sum(in1)), tf.int32)\n```",
            "```python\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)\n```",
            "```python\n    return tf.cast(tf.sequence_mask(in1, tf.reduce_sum(in1)), tf.int32)\n```"
        ],
        "normalized_completions": [
            "def transform(in1):\n    return tf.cast(tf.sequence_mask(in1, tf.reduce_sum(in1)), tf.int32)",
            "def transform(in1):\n    return tf.cast(tf.sequence_mask(in1), tf.int32)",
            "def transform(in1):\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)",
            "def transform(in1):\n    return tf.sequence_mask(in1, in1.shape[0]).numpy().astype(int).sum(axis=1).cumsum() - 1",
            "def transform(in1):\n    return tf.cast(tf.sequence_mask(in1, maxlen=tf.reduce_sum(in1)), tf.int32)",
            "def transform(in1):\n    return tf.reshape(tf.sequence_mask(in1, tf.reduce_sum(in1)), [-1])",
            "def transform(in1):\n    return tf.repeat(tf.range(tf.size(in1)), in1)",
            "def transform(in1):\n    return tf.where(tf.sequence_mask(in1), tf.range(tf.size(in1)), -1)[tf.where(tf.sequence_mask(in1))]",
            "def transform(in1):\n    return tf.cast(tf.sequence_mask(in1, tf.reduce_sum(in1)), tf.int32)",
            "def transform(in1):\n    return tf.reshape(tf.sequence_mask(in1, tf.reduce_sum(in1)), [-1])",
            "def transform(in1):\n    return tf.sequence_mask(in1, tf.reduce_sum(in1))",
            "def transform(in1):\n    return tf.reshape(tf.sequence_mask(in1, tf.reduce_sum(in1)), [-1])",
            "def transform(in1):\n    return tf.cast(tf.sequence_mask(in1, tf.reduce_sum(in1)), tf.int32)",
            "def transform(in1):\n    return tf.reshape(tf.repeat(tf.range(tf.shape(in1)[0]), in1), [-1])",
            "def transform(in1):\n    return tf.cast(tf.sequence_mask(in1, tf.reduce_sum(in1)), tf.int32)",
            "def transform(in1):\n    return tf.cast(tf.sequence_mask(in1, tf.reduce_sum(in1)), tf.int32)",
            null,
            "def transform(in1):\n    return tf.reshape(tf.repeat(tf.range(tf.shape(in1)[0]), in1), [-1])",
            "def transform(in1):\n    return tf.sequence_mask(in1)[..., 0]",
            "def transform(in1):\n    return tf.concat([tf.fill([length], i) for i, length in enumerate(in1)], axis=0)",
            "def transform(in1):\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)",
            "def transform(in1):\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)",
            "def transform(in1):\n    return tf.cast(tf.sequence_mask(in1, tf.reduce_sum(in1)), tf.int32)",
            "def transform(in1):\n    return tf.cast(tf.sequence_mask(in1, maxlen=tf.reduce_sum(in1)), tf.int32)",
            "def transform(in1):\n    return tf.cast(tf.sequence_mask(in1, tf.reduce_sum(in1)), tf.int32)",
            "def transform(in1):\n    return tf.sequence_mask(in1, tf.reduce_sum(in1))",
            "def transform(in1):\n    return tf.math.cumsum(tf.one_hot(tf.range(tf.reduce_sum(in1)), tf.reduce_sum(in1)), axis=0)[:, :-1] @ tf.sequence_mask(in1)",
            "def transform(in1):\n    return tf.cast(tf.sequence_mask(in1, tf.reduce_sum(in1)), tf.int32)",
            "def transform(in1):\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)",
            "def transform(in1):\n    return tf.cast(tf.sequence_mask(in1, tf.reduce_sum(in1)), tf.int32)"
        ],
        "tf_operators": {
            "tf.sequence_mask": 22,
            "tf.reduce_sum": 18,
            "tf.int32": 12,
            "tf.cast": 12,
            "tf.shape": 6,
            "tf.range": 9,
            "tf.repeat": 7,
            "tf.reshape": 5,
            "tf.size": 2,
            "tf.where": 1,
            "tf.fill": 1,
            "tf.concat": 1,
            "tf.one_hot": 1,
            "tf.math.cumsum": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 4,
        "total_in_target": 4,
        "parsed_constants": [
            [],
            [],
            [
                0
            ],
            [
                0,
                1,
                1
            ],
            [],
            [
                -1
            ],
            [],
            [
                -1
            ],
            [],
            [
                -1
            ],
            [],
            [
                -1
            ],
            [],
            [
                0,
                -1
            ],
            [],
            [],
            [],
            [
                0,
                -1
            ],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [],
            [],
            [],
            [],
            [
                0,
                -1
            ],
            [],
            [
                0
            ],
            []
        ],
        "all_constants": [
            0,
            1,
            -1
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 0,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 12,
            "tf_bool": 0,
            "axis": 0,
            "common": 18,
            "tf_float32": 0,
            "shape_tuple": 0,
            "shape": 0,
            "tf_int64": 0,
            "provided": 0,
            "input_var": 57
        }
    },
    {
        "name": "stackoverflow_47",
        "description": "put given values into a sequence mask",
        "target_program": "tf.reshape(tf.gather(in1, tf.cumsum(tf.reshape(tf.cast(in2, tf.int32), [-1]), exclusive=True) * tf.reshape(tf.cast(in2, tf.int32), [-1])), in2.shape)",
        "source": "https://stackoverflow.com/questions/58641546/how-can-i-put-the-sequential-values-to-the-sequence-mask",
        "constants": "[]",
        "examples": {
            "inputs": "[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16],[[True, True, True, False, False], [True, True, False, False, False], [True, True, True, True, True], [True, True, True, True, False], [True, False, False, False, False], [True, True, False, False, False]],]",
            "outputs": "[[0, 1, 2, 0, 0],    [3, 4, 0, 0, 0],    [5, 6, 7, 8, 9],    [10, 11, 12, 13, 0],    [14, 0, 0, 0, 0],    [15, 16, 0, 0, 0]]"
        },
        "completions": [
            "```python\n    return tf.reshape(tf.where(in2, in1, 0), tf.shape(in2))\n```",
            "```python\n    return tf.reshape(tf.where(in2, in1, 0), tf.shape(in2))\n```",
            "```python\nreturn tf.tensor_scatter_nd_update(tf.zeros_like(in2, dtype=tf.int32), tf.where(in2), tf.gather_nd(in1, tf.where(in2)))\n```",
            "```python\n    return tf.reshape(tf.where(in2, in1, 0), tf.shape(in2))\n```",
            "```python\n    return tf.reshape(tf.where(in2, in1, 0), tf.shape(in2))\n```",
            "```python\n    return tf.reshape(tf.where(in2, in1, 0), tf.shape(in2))\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tf.zeros_like(in2, dtype=in1.dtype), tf.where(in2), tf.boolean_mask(in1, in2))\n```",
            "```python\n    return tf.reshape(tf.where(in2, tf.cast(in1, tf.float32), 0), tf.shape(in2))\n```",
            "```python\n    return tf.where(in2, tf.gather(in1, tf.range(tf.size(in1))), 0)\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tf.zeros_like(in2, dtype=in1.dtype), tf.where(in2), tf.boolean_mask(in1, in2))\n```",
            "```python\n    return tf.reshape(tf.where(in2, in1, 0), tf.shape(in2))\n```",
            "```python\n    return tf.where(in2, tf.reshape(in1, in2.shape), 0)\n```",
            "```\n    return tf.tensor_scatter_nd_update(tf.zeros_like(in2, dtype=tf.int32), tf.where(in2), tf.boolean_mask(in1, in2))\n```",
            "```python\n    return tf.where(in2, tf.reshape(in1, tf.shape(in2)), 0)\n```",
            "```python\n    return tf.reshape(tf.boolean_mask(in1, tf.reshape(in2, [-1])), tf.shape(in2))\n```",
            "```python\n    return tf.reshape(tf.where(in2, in1, 0), tf.shape(in2))\n```",
            "```python\n    return tf.where(in2, in1, 0)\n```",
            "```python\n    return tf.where(in2, in1, 0)\n```",
            "```python\n    return tf.reshape(tf.scatter_nd(tf.where(in2), tf.boolean_mask(in1, in2), tf.shape(in2)), tf.shape(in2))\n```",
            "```python\n    return tf.where(in2, in1, 0)\n```",
            "```python\n    return tf.where(in2, in1, 0)\n```",
            "```python\n    return tf.reshape(tf.where(in2, in1, 0), tf.shape(in2))\n```",
            "```python\n    return tf.where(in2, tf.gather(in1, tf.cumsum(tf.cast(in2, tf.int32)) - 1), 0)\n```",
            "```python\n    return tf.where(in2, in1, 0)\n```",
            "```python\n    return tf.where(in2, tf.reshape(in1, [-1]), 0)\n```",
            "```python\n    return tf.where(in2, in1, tf.zeros_like(in1))\n```",
            "```python\n    return tf.where(in2, in1, 0)\n```",
            "```python\n    return tf.where(in2, in1, 0)\n```",
            "```python\n    return tf.where(in2, in1[:tf.reduce_sum(tf.cast(in2, tf.int32))], 0)\n```",
            "```python\n    return tf.reshape(tf.where(in2, in1, 0), tf.shape(in2))\n```"
        ],
        "normalized_completions": [
            "def transform(in1, in2):\n    return tf.reshape(tf.where(in2, in1, 0), tf.shape(in2))",
            "def transform(in1, in2):\n    return tf.reshape(tf.where(in2, in1, 0), tf.shape(in2))",
            "def transform(in1, in2):\n    return tf.tensor_scatter_nd_update(tf.zeros_like(in2, dtype=tf.int32), tf.where(in2), tf.gather_nd(in1, tf.where(in2)))",
            "def transform(in1, in2):\n    return tf.reshape(tf.where(in2, in1, 0), tf.shape(in2))",
            "def transform(in1, in2):\n    return tf.reshape(tf.where(in2, in1, 0), tf.shape(in2))",
            "def transform(in1, in2):\n    return tf.reshape(tf.where(in2, in1, 0), tf.shape(in2))",
            "def transform(in1, in2):\n    return tf.tensor_scatter_nd_update(tf.zeros_like(in2, dtype=in1.dtype), tf.where(in2), tf.boolean_mask(in1, in2))",
            "def transform(in1, in2):\n    return tf.reshape(tf.where(in2, tf.cast(in1, tf.float32), 0), tf.shape(in2))",
            "def transform(in1, in2):\n    return tf.where(in2, tf.gather(in1, tf.range(tf.size(in1))), 0)",
            "def transform(in1, in2):\n    return tf.tensor_scatter_nd_update(tf.zeros_like(in2, dtype=in1.dtype), tf.where(in2), tf.boolean_mask(in1, in2))",
            "def transform(in1, in2):\n    return tf.reshape(tf.where(in2, in1, 0), tf.shape(in2))",
            "def transform(in1, in2):\n    return tf.where(in2, tf.reshape(in1, in2.shape), 0)",
            "def transform(in1, in2):\n    return tf.tensor_scatter_nd_update(tf.zeros_like(in2, dtype=tf.int32), tf.where(in2), tf.boolean_mask(in1, in2))",
            "def transform(in1, in2):\n    return tf.where(in2, tf.reshape(in1, tf.shape(in2)), 0)",
            "def transform(in1, in2):\n    return tf.reshape(tf.boolean_mask(in1, tf.reshape(in2, [-1])), tf.shape(in2))",
            "def transform(in1, in2):\n    return tf.reshape(tf.where(in2, in1, 0), tf.shape(in2))",
            "def transform(in1, in2):\n    return tf.where(in2, in1, 0)",
            "def transform(in1, in2):\n    return tf.where(in2, in1, 0)",
            "def transform(in1, in2):\n    return tf.reshape(tf.scatter_nd(tf.where(in2), tf.boolean_mask(in1, in2), tf.shape(in2)), tf.shape(in2))",
            "def transform(in1, in2):\n    return tf.where(in2, in1, 0)",
            "def transform(in1, in2):\n    return tf.where(in2, in1, 0)",
            "def transform(in1, in2):\n    return tf.reshape(tf.where(in2, in1, 0), tf.shape(in2))",
            "def transform(in1, in2):\n    return tf.where(in2, tf.gather(in1, tf.cumsum(tf.cast(in2, tf.int32)) - 1), 0)",
            "def transform(in1, in2):\n    return tf.where(in2, in1, 0)",
            "def transform(in1, in2):\n    return tf.where(in2, tf.reshape(in1, [-1]), 0)",
            "def transform(in1, in2):\n    return tf.where(in2, in1, tf.zeros_like(in1))",
            "def transform(in1, in2):\n    return tf.where(in2, in1, 0)",
            "def transform(in1, in2):\n    return tf.where(in2, in1, 0)",
            "def transform(in1, in2):\n    return tf.where(in2, in1[:tf.reduce_sum(tf.cast(in2, tf.int32))], 0)",
            "def transform(in1, in2):\n    return tf.reshape(tf.where(in2, in1, 0), tf.shape(in2))"
        ],
        "tf_operators": {
            "tf.reshape": 15,
            "tf.shape": 13,
            "tf.where": 29,
            "tf.zeros_like": 5,
            "tf.tensor_scatter_nd_update": 4,
            "tf.int32": 4,
            "tf.gather_nd": 1,
            "tf.boolean_mask": 5,
            "tf.float32": 1,
            "tf.cast": 3,
            "tf.size": 1,
            "tf.gather": 2,
            "tf.range": 1,
            "tf.scatter_nd": 1,
            "tf.cumsum": 1,
            "tf.reduce_sum": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 5,
        "total_in_target": 5,
        "parsed_constants": [
            [
                0
            ],
            [
                0
            ],
            [],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [],
            [
                0
            ],
            [
                0
            ],
            [],
            [
                0
            ],
            [
                0
            ],
            [],
            [
                0
            ],
            [
                -1
            ],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                1,
                0
            ],
            [
                0
            ],
            [
                -1,
                0
            ],
            [],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ]
        ],
        "all_constants": [
            0,
            1,
            -1
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 5,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 4,
            "tf_bool": 0,
            "axis": 0,
            "common": 26,
            "tf_float32": 1,
            "shape_tuple": 0,
            "shape": 0,
            "tf_int64": 0,
            "provided": 0,
            "input_var": 87
        }
    },
    {
        "name": "stackoverflow_48",
        "description": "find the indices of all elements",
        "target_program": "tf.cast(tf.argmax(tf.cast(tf.equal(in1, tf.expand_dims(in2, 1)), tf.int32), axis=1), tf.int32)",
        "source": "https://stackoverflow.com/questions/58481332/getting-the-indices-of-several-elements-in-a-tensorflow-at-once",
        "constants": "[]",
        "examples": {
            "inputs": "[[32, 53, 45, 38, 29, 89, 64, 23],[38, 53, 89, 38, 32, 64],]",
            "outputs": "[3, 1, 5, 3, 0, 6]"
        },
        "completions": [
            "```python\n    return tf.searchsorted(in1, in2, side='left')\n```",
            "```python\n    return tf.searchsorted(in1, in2, side='left')\n```",
            "```python\n    return tf.searchsorted(in1, in2, side='left')\n```",
            "```python\n    return tf.searchsorted(in1, in2, side='left')\n```",
            "```python\n    return tf.searchsorted(in1, in2, side='left')\n```",
            "```python\n    return tf.searchsorted(in1, in2, side='left')\n```",
            "```python\n    return tf.searchsorted(in1, in2, side='left')\n```",
            "```python\n    return tf.searchsorted(tf.sort(in1), in2, side='left')\n```",
            "```python\n    return tf.gather_nd(tf.expand_dims(tf.range(tf.size(in1)), 1), tf.expand_dims(tf.searchsorted(in1, in2), 1))\n```",
            "```python\n    return tf.searchsorted(tf.sort(in1), in2, side='left')\n```",
            "```python\n    return tf.cast(tf.searchsorted(in1, in2, side='left'), tf.int32)\n```",
            "```python\n    return tf.searchsorted(in1, in2)\n```",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='left')",
            "```python\n    return tf.gather(tf.argsort(in1), tf.searchsorted(tf.sort(in1), in2))\n```",
            "```python\n    return tf.searchsorted(in1, in2, side='left')\n```",
            "```python\n    return tf.searchsorted(in1, in2, side='left')\n```",
            "```python\n    return tf.gather(tf.argsort(in1), tf.searchsorted(in1, in2))\n```",
            "```python\n    return tf.gather(tf.argsort(in1), tf.searchsorted(tf.sort(in1), in2))\n```",
            "```python\n    return tf.searchsorted(in1, in2, side='left')\n```",
            "```python\n    return tf.searchsorted(in1, in2, side='left')\n```",
            "```\n    return tf.searchsorted(in1, in2, side='left')\n```",
            "```python\n    return tf.searchsorted(in1, in2, side='left')\n```",
            "```python\n    return tf.searchsorted(in1, in2, side='left')\n```",
            "```python\n    return tf.searchsorted(in1, in2, side='left')\n```",
            "```python\n    return tf.searchsorted(in1, in2, side='left')\n```",
            "```python\n    return tf.searchsorted(in1, in2, side='left')\n```",
            "```python\n    return tf.searchsorted(in1, in2, side='left')\n```",
            "```python\n    return tf.searchsorted(in1, in2, side='left')\n```",
            "```python\n    return tf.searchsorted(in1, in2, side='left')\n```",
            "```python\n    return tf.searchsorted(in1, in2, side='left')\n```"
        ],
        "normalized_completions": [
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='left')",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='left')",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='left')",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='left')",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='left')",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='left')",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='left')",
            "def transform(in1, in2):\n    return tf.searchsorted(tf.sort(in1), in2, side='left')",
            "def transform(in1, in2):\n    return tf.gather_nd(tf.expand_dims(tf.range(tf.size(in1)), 1), tf.expand_dims(tf.searchsorted(in1, in2), 1))",
            "def transform(in1, in2):\n    return tf.searchsorted(tf.sort(in1), in2, side='left')",
            "def transform(in1, in2):\n    return tf.cast(tf.searchsorted(in1, in2, side='left'), tf.int32)",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2)",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='left')",
            "def transform(in1, in2):\n    return tf.gather(tf.argsort(in1), tf.searchsorted(tf.sort(in1), in2))",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='left')",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='left')",
            "def transform(in1, in2):\n    return tf.gather(tf.argsort(in1), tf.searchsorted(in1, in2))",
            "def transform(in1, in2):\n    return tf.gather(tf.argsort(in1), tf.searchsorted(tf.sort(in1), in2))",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='left')",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='left')",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='left')",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='left')",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='left')",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='left')",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='left')",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='left')",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='left')",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='left')",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='left')",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='left')"
        ],
        "tf_operators": {
            "tf.searchsorted": 30,
            "tf.sort": 4,
            "tf.expand_dims": 1,
            "tf.range": 1,
            "tf.gather_nd": 1,
            "tf.size": 1,
            "tf.int32": 1,
            "tf.cast": 1,
            "tf.argsort": 3,
            "tf.gather": 3
        },
        "coverage_percentage": 60.0,
        "total_covered": 3,
        "total_in_target": 5,
        "parsed_constants": [
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [
                1,
                1
            ],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            []
        ],
        "all_constants": [
            1
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 1,
            "tf_bool": 0,
            "axis": 0,
            "common": 2,
            "tf_float32": 0,
            "shape_tuple": 0,
            "shape": 0,
            "tf_int64": 0,
            "provided": 0,
            "input_var": 64
        }
    },
    {
        "name": "stackoverflow_49",
        "description": "multiply tensors by scalars in a batched way",
        "target_program": "tf.transpose(tf.multiply(in2, tf.transpose(in1)))",
        "source": "https://stackoverflow.com/questions/58466562/given-a-batch-of-n-images-how-to-scalar-multiply-each-image-by-a-different-scal",
        "constants": "[]",
        "examples": {
            "inputs": "[[[[[0.1, 0.2, 0.3], [0.4, 0.5, 0.6]]], [[[0.8, 1.0, 0.0], [0.6, 0.4, 0.2]]], [[[0.9, 0.8, 0.7], [0.1, 0.2, 0.3]]]],[2.0, 0.5, 1.0],]",
            "outputs": "[[[[0.2, 0.4, 0.6], [0.8, 1.0, 1.2]]],    [[[0.4, 0.5, 0.0], [0.3, 0.2, 0.1]]],    [[[0.9, 0.8, 0.7], [0.1, 0.2, 0.3]]]]"
        },
        "completions": [
            "```python\n    return tf.multiply(in1, tf.expand_dims(tf.expand_dims(tf.expand_dims(in2, 0), 0), 0))\n```",
            "```python\n    return tf.multiply(in1, tf.reshape(in2, (-1, 1, 1, 1)))\n```",
            "```python\n    return tf.multiply(in1, tf.reshape(in2, [-1, 1, 1, 1]))\n```",
            "```python\n    return tf.multiply(in1, tf.reshape(in2, [-1, 1, 1, 1]))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(tf.expand_dims(tf.expand_dims(in2, 1), 2), 3))\n```",
            "```python\n    return tf.multiply(in1, tf.reshape(in2, (-1, 1, 1, 1)))\n```",
            "```python\n    return tf.multiply(in1, tf.reshape(in2, (3, 1, 1, 1)))\n```",
            "```python\n    return tf.multiply(in1, tf.reshape(in2, (-1, 1, 1, 1)))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, 1), 2))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, 1), 1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(tf.expand_dims(tf.expand_dims(in2, axis=0), axis=1), axis=1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, [1, 2, 3]))\n```",
            "```python\n    return tf.multiply(in1, tf.reshape(in2, [-1, 1, 1, 1]))\n```",
            "```python\n    return tf.multiply(in1, tf.reshape(in2, (-1, 1, 1, 1)))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, axis=[1, 2, 3]))\n```",
            "```python\n    return tf.multiply(in1, tf.reshape(in2, [-1, 1, 1, 1]))\n```",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.reshape(in2, [-1, 1, 1, 1]))",
            "```python\n    return tf.multiply(in1, tf.expand_dims(tf.expand_dims(tf.expand_dims(in2, 0), 1), 2))\n```",
            "```python\n    return tf.multiply(in1, tf.reshape(in2, [3, 1, 1, 1]))\n```",
            "```python\n    return tf.multiply(in1, tf.reshape(in2, (-1, 1, 1, 1)))\n```",
            "```python\n    return in1 * tf.reshape(in2, (3, 1, 1, 1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, 1), 1))\n```",
            "```python\n    return tf.multiply(in1, tf.reshape(in2, (-1, 1, 1, 3)))\n```",
            "```python\n    return tf.multiply(in1, tf.reshape(in2, [3, 1, 1, 1]))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, axis=[1, 2, 3]))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, 1), 1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(tf.expand_dims(tf.expand_dims(in2, -1), -1), -1))\n```",
            "```python\n    return tf.multiply(in1, tf.reshape(in2, (-1, 1, 1, 1)))\n```",
            "```python\n    return tf.multiply(in1, tf.reshape(in2, [-1, 1, 1, 1]))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(tf.expand_dims(tf.expand_dims(in2, -1), -1), -1))\n```"
        ],
        "normalized_completions": [
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(tf.expand_dims(tf.expand_dims(in2, 0), 0), 0))",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.reshape(in2, (-1, 1, 1, 1)))",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.reshape(in2, [-1, 1, 1, 1]))",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.reshape(in2, [-1, 1, 1, 1]))",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(tf.expand_dims(tf.expand_dims(in2, 1), 2), 3))",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.reshape(in2, (-1, 1, 1, 1)))",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.reshape(in2, (3, 1, 1, 1)))",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.reshape(in2, (-1, 1, 1, 1)))",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, 1), 2))",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, 1), 1))",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(tf.expand_dims(tf.expand_dims(in2, axis=0), axis=1), axis=1))",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(in2, [1, 2, 3]))",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.reshape(in2, [-1, 1, 1, 1]))",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.reshape(in2, (-1, 1, 1, 1)))",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(in2, axis=[1, 2, 3]))",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.reshape(in2, [-1, 1, 1, 1]))",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.reshape(in2, [-1, 1, 1, 1]))",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(tf.expand_dims(tf.expand_dims(in2, 0), 1), 2))",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.reshape(in2, [3, 1, 1, 1]))",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.reshape(in2, (-1, 1, 1, 1)))",
            "def transform(in1, in2):\n    return in1 * tf.reshape(in2, (3, 1, 1, 1))",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, 1), 1))",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.reshape(in2, (-1, 1, 1, 3)))",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.reshape(in2, [3, 1, 1, 1]))",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(in2, axis=[1, 2, 3]))",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, 1), 1))",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(tf.expand_dims(tf.expand_dims(in2, -1), -1), -1))",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.reshape(in2, (-1, 1, 1, 1)))",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.reshape(in2, [-1, 1, 1, 1]))",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(tf.expand_dims(tf.expand_dims(in2, -1), -1), -1))"
        ],
        "tf_operators": {
            "tf.expand_dims": 13,
            "tf.multiply": 29,
            "tf.reshape": 17
        },
        "coverage_percentage": 50.0,
        "total_covered": 1,
        "total_in_target": 2,
        "parsed_constants": [
            [
                0,
                0,
                0
            ],
            [
                -1,
                1,
                1,
                1
            ],
            [
                -1,
                1,
                1,
                1
            ],
            [
                -1,
                1,
                1,
                1
            ],
            [
                1,
                2,
                3
            ],
            [
                -1,
                1,
                1,
                1
            ],
            [
                3,
                1,
                1,
                1
            ],
            [
                -1,
                1,
                1,
                1
            ],
            [
                1,
                2
            ],
            [
                1,
                1
            ],
            [
                0,
                1,
                1
            ],
            [
                1,
                2,
                3
            ],
            [
                -1,
                1,
                1,
                1
            ],
            [
                -1,
                1,
                1,
                1
            ],
            [
                1,
                2,
                3
            ],
            [
                -1,
                1,
                1,
                1
            ],
            [
                -1,
                1,
                1,
                1
            ],
            [
                0,
                1,
                2
            ],
            [
                3,
                1,
                1,
                1
            ],
            [
                -1,
                1,
                1,
                1
            ],
            [
                3,
                1,
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                -1,
                1,
                1,
                3
            ],
            [
                3,
                1,
                1,
                1
            ],
            [
                1,
                2,
                3
            ],
            [
                1,
                1
            ],
            [
                -1,
                -1,
                -1
            ],
            [
                -1,
                1,
                1,
                1
            ],
            [
                -1,
                1,
                1,
                1
            ],
            [
                -1,
                -1,
                -1
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            3,
            -1
        ],
        "constant_counts": [
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 0,
            "tf_bool": 0,
            "axis": 12,
            "common": 62,
            "tf_float32": 0,
            "shape_tuple": 0,
            "shape": 0,
            "tf_int64": 0,
            "provided": 0,
            "input_var": 60
        }
    },
    {
        "name": "stackoverflow_50",
        "description": "create a binary matrix where a specified column is set to one",
        "target_program": "tf.cast(tf.one_hot(tf.fill((in1,), in3), in2), tf.int32)",
        "source": "https://stackoverflow.com/questions/58537495/tensorflow-initialize-a-sparse-tensor-with-only-one-line-column-not-zero",
        "constants": "[]",
        "examples": {
            "inputs": "[5]",
            "outputs": "[[0, 0, 0, 1, 0, 0],    [0, 0, 0, 1, 0, 0],    [0, 0, 0, 1, 0, 0],    [0, 0, 0, 1, 0, 0],    [0, 0, 0, 1, 0, 0]]"
        },
        "completions": [
            "```python\n    return tf.one_hot([in1], 6, on_value=1, off_value=0, axis=-1)[:, 0].numpy()\n```",
            "```python\n    return tf.one_hot([in1]*5, 6)\n```",
            "```python\n    return tf.one_hot(tf.zeros(in1, dtype=tf.int32), in1, on_value=1, off_value=0)\n```",
            "```python\n    return tf.expand_dims(tf.one_hot(3, in1 + 1, dtype=tf.int32), 0) * tf.ones([in1, in1 + 1], dtype=tf.int32)\n```",
            "```python\n    return tf.one_hot([3] * in1, in1 + 1, dtype=tf.int32)\n```",
            "```python\n    return tf.transpose(tf.one_hot([3] * 5, in1 + 1), perm=[1, 0])\n```",
            "```python\n    return tf.one_hot([3] * 5, 6, dtype=tf.int32)\n```",
            "```python\n    return tf.one_hot(tf.fill([5], in1), 6, axis=1)\n```",
            "```python\n    return tf.one_hot([3] * in1, in1 + 1, dtype=tf.int32)\n```",
            "```python\n    return tf.one_hot([3]*in1, in1+1, dtype=tf.int32)\n```",
            "```python\n    return tf.one_hot(tf.fill([5], 3), 6, dtype=tf.int32)\n```",
            "```python\n    return tf.one_hot([3] * in1, in1 + 1, dtype=tf.int32)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(tf.one_hot(3, in1 + 1), 0), in1, axis=0)\n```",
            "```python\n    return tf.one_hot(tf.constant(3), in1 + 1, dtype=tf.int32)\n```",
            "```python\ndef transform(in1):\n    return tf.one_hot([3] * in1, in1 + 1, dtype=tf.int32)\n```",
            "```python\n    return tf.one_hot([3] * 5, 6, dtype=tf.int32)\n```",
            "```python\n    return tf.one_hot([3] * 5, 6, on_value=1, off_value=0, dtype=tf.int32)\n```",
            "```python\n    return tf.one_hot([3]*in1, in1, dtype=tf.int32)\n```",
            "```python\n    return tf.eye(5, 6, dtype=tf.int32)[:, 3:4]\n```",
            "```python\n    return tf.one_hot([3]*in1, in1+1, dtype=tf.int32)\n```",
            "```python\n    return tf.one_hot([3] * 5, 6, on_value=1, off_value=0, dtype=tf.int32)\n```",
            "```python\n    return tf.one_hot([3]*in1, in1)\n```",
            "```python\n    return tf.one_hot([3]*in1, in1+1)\n```",
            "```python\n    return tf.one_hot(tf.zeros(in1, dtype=tf.int32) + 3, in1 + 1, dtype=tf.int32)\n```",
            "```python\n    return tf.one_hot([3] * in1, in1 * 2, dtype=tf.int32)\n```",
            "```python\n    return tf.one_hot(tf.fill([5], 3), 6, dtype=tf.int32)\n```",
            "```python\n    return tf.one_hot([in1] * 5, 6, on_value=1, off_value=0)\n```",
            "```python\n    return tf.expand_dims(tf.one_hot(3, in1 + 1), axis=0) * in1\n```",
            "```python\n    return tf.one_hot([3] * in1, in1 + 1, dtype=tf.int32)\n```",
            "```python\n    return tf.one_hot([3], in1+1, dtype=tf.int32)[:-1, :]\n```"
        ],
        "normalized_completions": [
            "def transform(in1):\n    return tf.one_hot([in1], 6, on_value=1, off_value=0, axis=-1)[:, 0].numpy()",
            "def transform(in1):\n    return tf.one_hot([in1]*5, 6)",
            "def transform(in1):\n    return tf.one_hot(tf.zeros(in1, dtype=tf.int32), in1, on_value=1, off_value=0)",
            "def transform(in1):\n    return tf.expand_dims(tf.one_hot(3, in1 + 1, dtype=tf.int32), 0) * tf.ones([in1, in1 + 1], dtype=tf.int32)",
            "def transform(in1):\n    return tf.one_hot([3] * in1, in1 + 1, dtype=tf.int32)",
            "def transform(in1):\n    return tf.transpose(tf.one_hot([3] * 5, in1 + 1), perm=[1, 0])",
            "def transform(in1):\n    return tf.one_hot([3] * 5, 6, dtype=tf.int32)",
            "def transform(in1):\n    return tf.one_hot(tf.fill([5], in1), 6, axis=1)",
            "def transform(in1):\n    return tf.one_hot([3] * in1, in1 + 1, dtype=tf.int32)",
            "def transform(in1):\n    return tf.one_hot([3]*in1, in1+1, dtype=tf.int32)",
            "def transform(in1):\n    return tf.one_hot(tf.fill([5], 3), 6, dtype=tf.int32)",
            "def transform(in1):\n    return tf.one_hot([3] * in1, in1 + 1, dtype=tf.int32)",
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(tf.one_hot(3, in1 + 1), 0), in1, axis=0)",
            "def transform(in1):\n    return tf.one_hot(tf.constant(3), in1 + 1, dtype=tf.int32)",
            "def transform(in1):\n    return tf.one_hot([3] * in1, in1 + 1, dtype=tf.int32)",
            "def transform(in1):\n    return tf.one_hot([3] * 5, 6, dtype=tf.int32)",
            "def transform(in1):\n    return tf.one_hot([3] * 5, 6, on_value=1, off_value=0, dtype=tf.int32)",
            "def transform(in1):\n    return tf.one_hot([3]*in1, in1, dtype=tf.int32)",
            "def transform(in1):\n    return tf.eye(5, 6, dtype=tf.int32)[:, 3:4]",
            "def transform(in1):\n    return tf.one_hot([3]*in1, in1+1, dtype=tf.int32)",
            "def transform(in1):\n    return tf.one_hot([3] * 5, 6, on_value=1, off_value=0, dtype=tf.int32)",
            "def transform(in1):\n    return tf.one_hot([3]*in1, in1)",
            "def transform(in1):\n    return tf.one_hot([3]*in1, in1+1)",
            "def transform(in1):\n    return tf.one_hot(tf.zeros(in1, dtype=tf.int32) + 3, in1 + 1, dtype=tf.int32)",
            "def transform(in1):\n    return tf.one_hot([3] * in1, in1 * 2, dtype=tf.int32)",
            "def transform(in1):\n    return tf.one_hot(tf.fill([5], 3), 6, dtype=tf.int32)",
            "def transform(in1):\n    return tf.one_hot([in1] * 5, 6, on_value=1, off_value=0)",
            "def transform(in1):\n    return tf.expand_dims(tf.one_hot(3, in1 + 1), axis=0) * in1",
            "def transform(in1):\n    return tf.one_hot([3] * in1, in1 + 1, dtype=tf.int32)",
            "def transform(in1):\n    return tf.one_hot([3], in1+1, dtype=tf.int32)[:-1, :]"
        ],
        "tf_operators": {
            "tf.one_hot": 29,
            "tf.zeros": 2,
            "tf.int32": 21,
            "tf.ones": 1,
            "tf.expand_dims": 3,
            "tf.transpose": 1,
            "tf.fill": 3,
            "tf.repeat": 1,
            "tf.constant": 1,
            "tf.eye": 1
        },
        "coverage_percentage": 75.0,
        "total_covered": 3,
        "total_in_target": 4,
        "parsed_constants": [
            [
                6,
                1,
                0,
                -1,
                0
            ],
            [
                5,
                6
            ],
            [
                1,
                0
            ],
            [
                3,
                1,
                0,
                1
            ],
            [
                3,
                1
            ],
            [
                3,
                5,
                1,
                1,
                0
            ],
            [
                3,
                5,
                6
            ],
            [
                5,
                6,
                1
            ],
            [
                3,
                1
            ],
            [
                3,
                1
            ],
            [
                5,
                3,
                6
            ],
            [
                3,
                1
            ],
            [
                3,
                1,
                0,
                0
            ],
            [
                3,
                1
            ],
            [
                3,
                1
            ],
            [
                3,
                5,
                6
            ],
            [
                3,
                5,
                6,
                1,
                0
            ],
            [
                3
            ],
            [
                5,
                6,
                3,
                4
            ],
            [
                3,
                1
            ],
            [
                3,
                5,
                6,
                1,
                0
            ],
            [
                3
            ],
            [
                3,
                1
            ],
            [
                3,
                1
            ],
            [
                3,
                2
            ],
            [
                5,
                3,
                6
            ],
            [
                5,
                6,
                1,
                0
            ],
            [
                3,
                1,
                0
            ],
            [
                3,
                1
            ],
            [
                3,
                1,
                -1
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            -1
        ],
        "constant_counts": [
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 2,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 3,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 0,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 3,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 0,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 3,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 0,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 3,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 0,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 4,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 0,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 3,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 0,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 2,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 3,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 0,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 23,
            "tf_bool": 0,
            "axis": 0,
            "common": 35,
            "tf_float32": 0,
            "shape_tuple": 0,
            "shape": 0,
            "tf_int64": 0,
            "provided": 49,
            "input_var": 40
        }
    }
]