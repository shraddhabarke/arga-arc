[
    {
        "name": "google_01",
        "description": "Convert index tensor into pairs for SparseTensor indexing",
        "target_program": "tf.cast(tf.where(tf.sequence_mask(tf.math.bincount(in1))), tf.int32)",
        "source": "From an internal Google chat room, 09/07/2018",
        "constants": "[]",
        "examples": {
            "inputs": "[[0, 0, 0, 1, 3, 3],]",
            "outputs": "[[0, 0], [0, 1], [0, 2], [1, 0], [3, 0], [3, 1]]"
        },
        "completions": [
            "return tf.stack([in1, tf.range(tf.shape(in1)[0])], axis=1)",
            "def transform(in1):\n    indices = tf.expand_dims(in1, axis=1)\n    indices = tf.repeat(indices, 2, axis=1)\n    values = tf.range(tf.reduce_max(indices) + 1)\n    output = tf.gather(values, indices)\n    return output\n",
            "return tf.transpose([tf.broadcast_to(in1, [2, tf.reduce_prod(tf.shape(in1))])])",
            "return tf.stack([in1, tf.range(tf.size(in1))], axis=1)\n",
            "return tf.transpose(tf.stack([in1, tf.range(tf.size(in1))]))",
            "return tf.stack([in1, tf.argsort(in1)], axis=1)\n",
            "return tf.transpose(tf.stack([in1, tf.range(tf.shape(in1)[0])]))",
            "def transform(in1):\n    indices = tf.expand_dims(in1, axis=1)\n    row_indices = tf.tile(tf.range(tf.shape(indices)[0])[:, tf.newaxis], [1, tf.shape(indices)[1]])\n    return tf.stack([row_indices, indices], axis=2)\n",
            "def transform(in1):\n    indices = tf.expand_dims(tf.range(tf.size(in1), dtype=tf.int64), axis=1)\n    values = tf.cast(tf.expand_dims(in1, axis=1), tf.int64)\n    return tf.concat([indices, values], axis=1)\n",
            "def transform(in1):\n    idx = tf.argsort(in1)\n    idx_pairs = tf.stack([tf.range(tf.shape(idx)[0]), idx], axis=1)\n    return idx_pairs\n",
            "return tf.transpose(tf.stack([in1, tf.range(tf.size(in1))]))",
            "def transform(in1):\n    indices = tf.stack([tf.range(tf.size(in1)), in1], axis=1)\n    return indices\n",
            "return tf.transpose(tf.stack([in1, tf.range(in1.shape[0])]))",
            "return tf.concat([tf.expand_dims(in1, -1), tf.range(tf.size(in1), dtype=tf.int32)], axis=1)",
            "return tf.stack([in1, tf.range(tf.size(in1))], axis=1)",
            "\nreturn tf.stack([in1, tf.range(tf.size(in1))], axis=1)\n",
            "return tf.stack([tf.range(tf.size(in1)), in1], axis=1)",
            "return tf.transpose(tf.stack([in1, tf.range(tf.size(in1))]))",
            "return tf.math.cumsum(tf.one_hot(in1, depth=tf.reduce_max(in1)+1), exclusive=True)",
            "return tf.transpose(tf.stack([in1, tf.range(tf.size(in1))]))"
        ],
        "tf_operators": {
            "tf.range": 17,
            "tf.shape": 5,
            "tf.stack": 15,
            "tf.gather": 1,
            "tf.reduce_max": 2,
            "tf.repeat": 1,
            "tf.expand_dims": 4,
            "tf.transpose": 7,
            "tf.reduce_prod": 1,
            "tf.broadcast_to": 1,
            "tf.size": 11,
            "tf.argsort": 2,
            "tf.tile": 1,
            "tf.newaxis": 1,
            "tf.concat": 2,
            "tf.int64": 1,
            "tf.cast": 1,
            "tf.int32": 1,
            "tf.math.cumsum": 1,
            "tf.one_hot": 1
        },
        "coverage_percentage": 40.0,
        "total_covered": 2,
        "total_in_target": 5,
        "parsed_constants": [
            [
                0,
                1
            ],
            [
                1,
                2,
                1,
                1
            ],
            [
                2
            ],
            [
                1
            ],
            [],
            [
                1
            ],
            [
                0
            ],
            [
                1,
                0,
                1,
                1,
                2
            ],
            [
                1,
                1,
                1
            ],
            [
                0,
                1
            ],
            [],
            [
                1
            ],
            [
                0
            ],
            [
                -1,
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [],
            [
                1
            ],
            []
        ],
        "all_constants": [
            0,
            1,
            2,
            -1
        ],
        "constant_counts": [
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 5,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 2,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 49,
            "shape": 0,
            "tf_bool": 0,
            "provided": 3,
            "common": 26,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 0,
            "tf_int64": 2,
            "tf_int32": 1
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.003278688524590164,
                "tf.add(x, y)": 0.003278688524590164,
                "tf.add_n(inputs)": 0.003278688524590164,
                "tf.argmax(input, axis)": 0.003278688524590164,
                "tf.argmin(input, axis)": 0.003278688524590164,
                "tf.argsort(values, axis, stable=True)": 0.003278688524590164,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.003278688524590164,
                "tf.boolean_mask(tensor, mask)": 0.003278688524590164,
                "tf.broadcast_to(input, shape)": 0.006557377049180328,
                "tf.cast(x, dtype)": 0.006557377049180328,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.003278688524590164,
                "tf.concat(values, axis)": 0.009836065573770493,
                "tf.constant(value)": 0.003278688524590164,
                "tf.constant(value, dtype)": 0.003278688524590164,
                "tf.divide(x, y)": 0.003278688524590164,
                "tf.equal(x, y)": 0.003278688524590164,
                "tf.exp(x)": 0.003278688524590164,
                "tf.expand_dims(input, axis)": 0.019672131147540985,
                "tf.eye(num_rows)": 0.003278688524590164,
                "tf.eye(num_rows, num_columns)": 0.003278688524590164,
                "tf.eye(num_rows, dtype)": 0.003278688524590164,
                "tf.fill(dims, value)": 0.003278688524590164,
                "tf.gather(params, indices)": 0.006557377049180328,
                "tf.gather(params, indices, axis, batch_dims)": 0.003278688524590164,
                "tf.gather_nd(params, indices)": 0.003278688524590164,
                "tf.gather_nd(params, indices, batch_dims)": 0.003278688524590164,
                "tf.greater(x, y)": 0.003278688524590164,
                "tf.greater_equal(x, y)": 0.003278688524590164,
                "tf.math.bincount(arr)": 0.003278688524590164,
                "tf.math.ceil(x)": 0.003278688524590164,
                "tf.math.count_nonzero(input)": 0.003278688524590164,
                "tf.math.count_nonzero(input, axis)": 0.003278688524590164,
                "tf.math.cumsum(x, axis)": 0.003278688524590164,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.006557377049180328,
                "tf.math.divide_no_nan(x, y)": 0.003278688524590164,
                "tf.math.floor(x)": 0.003278688524590164,
                "tf.math.log(x)": 0.003278688524590164,
                "tf.math.logical_and(x, y)": 0.003278688524590164,
                "tf.math.logical_not(x)": 0.003278688524590164,
                "tf.math.logical_or(x, y)": 0.003278688524590164,
                "tf.math.logical_xor(x, y)": 0.003278688524590164,
                "tf.math.negative(x)": 0.003278688524590164,
                "tf.math.reciprocal(x)": 0.003278688524590164,
                "tf.math.reciprocal_no_nan(x)": 0.003278688524590164,
                "tf.math.segment_max(data, segment_ids)": 0.003278688524590164,
                "tf.math.segment_mean(data, segment_ids)": 0.003278688524590164,
                "tf.math.segment_min(data, segment_ids)": 0.003278688524590164,
                "tf.math.segment_prod(data, segment_ids)": 0.003278688524590164,
                "tf.math.segment_sum(data, segment_ids)": 0.003278688524590164,
                "tf.math.squared_difference(x, y)": 0.003278688524590164,
                "tf.math.top_k(input, k)": 0.003278688524590164,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.003278688524590164,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.003278688524590164,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.003278688524590164,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.003278688524590164,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.003278688524590164,
                "tf.matmul(a, b)": 0.003278688524590164,
                "tf.maximum(x, y)": 0.003278688524590164,
                "tf.minimum(x, y)": 0.003278688524590164,
                "tf.multiply(x, y)": 0.003278688524590164,
                "tf.not_equal(x, y)": 0.003278688524590164,
                "tf.one_hot(indices, depth)": 0.006557377049180328,
                "tf.ones(shape)": 0.003278688524590164,
                "tf.ones_like(input)": 0.003278688524590164,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.003278688524590164,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.003278688524590164,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.003278688524590164,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.003278688524590164,
                "tf.range(start)": 0.05245901639344262,
                "tf.range(start, limit, delta)": 0.009836065573770493,
                "tf.reduce_any(input_tensor, axis)": 0.003278688524590164,
                "tf.reduce_all(input_tensor, axis)": 0.003278688524590164,
                "tf.reduce_max(input_tensor)": 0.009836065573770493,
                "tf.reduce_max(input_tensor, axis)": 0.003278688524590164,
                "tf.reduce_mean(input_tensor)": 0.003278688524590164,
                "tf.reduce_mean(input_tensor, axis)": 0.003278688524590164,
                "tf.reduce_min(input_tensor)": 0.003278688524590164,
                "tf.reduce_min(input_tensor, axis)": 0.003278688524590164,
                "tf.reduce_prod(input_tensor, axis)": 0.006557377049180328,
                "tf.reduce_sum(input_tensor)": 0.003278688524590164,
                "tf.reduce_sum(input_tensor, axis)": 0.003278688524590164,
                "tf.repeat(input, repeats)": 0.003278688524590164,
                "tf.repeat(input, repeats, axis)": 0.003278688524590164,
                "tf.reshape(tensor, shape)": 0.003278688524590164,
                "tf.reverse(tensor, axis)": 0.003278688524590164,
                "tf.roll(input, shift, axis)": 0.003278688524590164,
                "tf.round(x)": 0.003278688524590164,
                "tf.scatter_nd(indices, updates, shape)": 0.003278688524590164,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.003278688524590164,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.003278688524590164,
                "tf.sequence_mask(lengths)": 0.003278688524590164,
                "tf.sequence_mask(lengths, maxlen)": 0.003278688524590164,
                "tf.shape(input)": 0.022950819672131147,
                "tf.sign(x)": 0.003278688524590164,
                "tf.sort(values, axis)": 0.003278688524590164,
                "tf.sort(values, axis, direction='DESCENDING')": 0.003278688524590164,
                "tf.sqrt(x)": 0.003278688524590164,
                "tf.square(x)": 0.003278688524590164,
                "tf.squeeze(input)": 0.003278688524590164,
                "tf.squeeze(input, axis)": 0.003278688524590164,
                "tf.stack(values, axis)": 0.05245901639344262,
                "tf.subtract(x, y)": 0.003278688524590164,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.003278688524590164,
                "tf.tensordot(a, b, axes)": 0.003278688524590164,
                "tf.tile(input, multiples)": 0.006557377049180328,
                "tf.transpose(a)": 0.02622950819672131,
                "tf.transpose(a, perm)": 0.003278688524590164,
                "tf.unique_with_counts(x)": 0.003278688524590164,
                "tf.unstack(value, axis)": 0.003278688524590164,
                "tf.where(condition)": 0.003278688524590164,
                "tf.where(condition, x, y)": 0.003278688524590164,
                "tf.zeros(shape)": 0.003278688524590164,
                "tf.zeros_like(input)": 0.003278688524590164,
                "tf.SparseTensor(indices, values, dense_shape)": 0.003278688524590164,
                "tf.sparse.add(a, b)": 0.003278688524590164,
                "tf.sparse.concat(axis, sp_inputs)": 0.003278688524590164,
                "tf.sparse.expand_dims(sp_input, axis)": 0.003278688524590164,
                "tf.sparse.from_dense(tensor)": 0.003278688524590164,
                "tf.sparse.maximum(sp_a, sp_b)": 0.003278688524590164,
                "tf.sparse.minimum(sp_a, sp_b)": 0.003278688524590164,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.003278688524590164,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.003278688524590164,
                "tf.sparse.reset_shape(sp_input)": 0.003278688524590164,
                "tf.sparse.reshape(sp_input, shape)": 0.003278688524590164,
                "tf.sparse.retain(sp_input, to_retain)": 0.003278688524590164,
                "tf.sparse.slice(sp_input, start, size)": 0.003278688524590164,
                "tf.sparse.split(sp_input, num_split, axis)": 0.003278688524590164,
                "tf.sparse.to_dense(sp_input)": 0.003278688524590164,
                "tf.sparse.to_dense(sp_input, default_value)": 0.003278688524590164,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.003278688524590164,
                "tf.sparse.transpose(sp_input)": 0.003278688524590164,
                "tf.sparse.transpose(sp_input, perm)": 0.003278688524590164,
                "IndexingAxis1Operation": 0.006557377049180328,
                "IndexingOperation": 0.022950819672131147,
                "PairCreationOperation": 0.006557377049180328,
                "SingletonTupleCreationOperation": 0.003278688524590164,
                "SlicingAxis0BothOperation": 0.003278688524590164,
                "SlicingAxis0LeftOperation": 0.003278688524590164,
                "SlicingAxis0RightOperation": 0.003278688524590164,
                "SlicingAxis1BothOperation": 0.003278688524590164,
                "SlicingAxis1LeftOperation": 0.003278688524590164,
                "SlicingAxis1RightOperation": 0.003278688524590164,
                "TripleCreationOperation": 0.003278688524590164,
                "PROVIDED_CONSTANT_WEIGHT": 0.013114754098360656,
                "COMMON_CONSTANT_WEIGHT": 0.08852459016393442,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.003278688524590164,
                "INPUT_VARIABLE_WEIGHT": 0.16393442622950818,
                "AXIS_CONSTANT_WEIGHT": 0.003278688524590164,
                "SHAPE_CONSTANT_WEIGHT": 0.003278688524590164,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.003278688524590164,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.006557377049180328,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.003278688524590164,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.003278688524590164,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.009836065573770493
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 7,
                "tf.cast(x, dtype)": 7,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 7,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 6,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 7,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 7,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 7,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 8,
                "tf.pad(tensor, paddings, mode='REFLECT')": 8,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 8,
                "tf.range(start)": 4,
                "tf.range(start, limit, delta)": 7,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 7,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 7,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side='left')": 8,
                "tf.searchsorted(sorted_sequence, values, side='right')": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 5,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction='DESCENDING')": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 4,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 7,
                "tf.transpose(a)": 5,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 7,
                "IndexingOperation": 5,
                "PairCreationOperation": 7,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 6,
                "COMMON_CONSTANT_WEIGHT": 3,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 3,
                "AXIS_CONSTANT_WEIGHT": 8,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 7,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 7
            }
        }
    },
    {
        "name": "google_03",
        "description": "Slice the first dimension of a SparseTensor",
        "target_program": "tf.divide(in1, tf.expand_dims(tf.reduce_sum(in1, axis=1), 1))",
        "source": "Real task encountered by Googler, 11/01/2018",
        "constants": "[]",
        "examples": {
            "inputs": "tf.SparseTensor(indices=[[0, 0, 0], [0, 1, 1], [1, 1, 1], [1, 1, 2]], values=[1., 1., 1., 1.], dense_shape=[2, 2, 800])",
            "outputs": "tf.SparseTensor(indices=[[0, 0, 0], [0, 1, 1]], values=[1., 1.], dense_shape=[1, 2, 800])"
        },
        "completions": [
            "result = tf.sparse.slice(in1, start=[0, 0, 0], size=[1, -1, -1])\nreturn result\n",
            "return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])",
            "return tf.sparse.slice(in1, [0, 0, 0], [1, -1, -1])",
            "return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])",
            "return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])",
            "return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])",
            "return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])\n",
            "return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])",
            "return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])\n",
            "return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])",
            "return tf.sparse.slice(in1, start=[0, 0, 0], size=[1, 2, 800])",
            "output_indices = tf.sparse.slice(in1.indices, [0, 0], [2, -1])\noutput_values = tf.sparse.slice(in1.values, [0], [2])\noutput_dense_shape = tf.sparse.slice(in1.dense_shape, [0], [1, -1])\noutput = tf.SparseTensor(indices=output_indices, values=output_values, dense_shape=output_dense_shape)\nreturn output\n",
            "return tf.sparse.slice(in1, [0, 0, 0], [1, in1.dense_shape[1], in1.dense_shape[2]])\n",
            "return tf.sparse.slice(in1, start=[0, 0, 0], size=[1, 2, 800])",
            "output_indices = tf.sparse.slice(in1, [0, 0, 0], [2, -1, -1]).indices\noutput_values = tf.sparse.slice(in1, [0, 0, 0], [2, -1, -1]).values\noutput_dense_shape = tf.concat([[1], in1.dense_shape[1:]], axis=0)\noutput = tf.SparseTensor(indices=output_indices, values=output_values, dense_shape=output_dense_shape)\nreturn output\n",
            "return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])",
            "def transform(in1):\n    return tf.sparse.slice(in1, [0, 0, 0], [2, 2, 800])",
            "return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])\n",
            "def transform(in1):\n    return tf.sparse.slice(in1, tf.constant([0, 0, 0], dtype=tf.int64), tf.constant([1, 2, 800], dtype=tf.int64))",
            "return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])\n"
        ],
        "tf_operators": {
            "tf.sparse.slice": 20,
            "tf.SparseTensor": 2,
            "tf.concat": 1,
            "tf.int64": 1,
            "tf.constant": 1
        },
        "coverage_percentage": 0.0,
        "total_covered": 0,
        "total_in_target": 3,
        "parsed_constants": [
            [
                0,
                0,
                0,
                1,
                -1,
                -1
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                -1,
                -1
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                2,
                -1,
                0,
                2,
                0,
                1,
                -1
            ],
            [
                0,
                0,
                0,
                1,
                1,
                2
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                2,
                -1,
                -1,
                0,
                0,
                0,
                2,
                -1,
                -1,
                1,
                1,
                0
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                2,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            800,
            -1
        ],
        "constant_counts": [
            {
                "common": 6,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 6,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 7,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 0,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 13,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 2,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 2,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 20,
            "shape": 15,
            "tf_bool": 0,
            "provided": 0,
            "common": 96,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 21,
            "tf_int64": 2,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.0029585798816568047,
                "tf.add(x, y)": 0.0029585798816568047,
                "tf.add_n(inputs)": 0.0029585798816568047,
                "tf.argmax(input, axis)": 0.0029585798816568047,
                "tf.argmin(input, axis)": 0.0029585798816568047,
                "tf.argsort(values, axis, stable=True)": 0.0029585798816568047,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.0029585798816568047,
                "tf.boolean_mask(tensor, mask)": 0.0029585798816568047,
                "tf.broadcast_to(input, shape)": 0.0029585798816568047,
                "tf.cast(x, dtype)": 0.0029585798816568047,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.0029585798816568047,
                "tf.concat(values, axis)": 0.005917159763313609,
                "tf.constant(value)": 0.0029585798816568047,
                "tf.constant(value, dtype)": 0.0029585798816568047,
                "tf.divide(x, y)": 0.0029585798816568047,
                "tf.equal(x, y)": 0.0029585798816568047,
                "tf.exp(x)": 0.0029585798816568047,
                "tf.expand_dims(input, axis)": 0.0029585798816568047,
                "tf.eye(num_rows)": 0.0029585798816568047,
                "tf.eye(num_rows, num_columns)": 0.0029585798816568047,
                "tf.eye(num_rows, dtype)": 0.0029585798816568047,
                "tf.fill(dims, value)": 0.0029585798816568047,
                "tf.gather(params, indices)": 0.0029585798816568047,
                "tf.gather(params, indices, axis, batch_dims)": 0.0029585798816568047,
                "tf.gather_nd(params, indices)": 0.0029585798816568047,
                "tf.gather_nd(params, indices, batch_dims)": 0.0029585798816568047,
                "tf.greater(x, y)": 0.0029585798816568047,
                "tf.greater_equal(x, y)": 0.0029585798816568047,
                "tf.math.bincount(arr)": 0.0029585798816568047,
                "tf.math.ceil(x)": 0.0029585798816568047,
                "tf.math.count_nonzero(input)": 0.0029585798816568047,
                "tf.math.count_nonzero(input, axis)": 0.0029585798816568047,
                "tf.math.cumsum(x, axis)": 0.0029585798816568047,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.0029585798816568047,
                "tf.math.divide_no_nan(x, y)": 0.0029585798816568047,
                "tf.math.floor(x)": 0.0029585798816568047,
                "tf.math.log(x)": 0.0029585798816568047,
                "tf.math.logical_and(x, y)": 0.0029585798816568047,
                "tf.math.logical_not(x)": 0.0029585798816568047,
                "tf.math.logical_or(x, y)": 0.0029585798816568047,
                "tf.math.logical_xor(x, y)": 0.0029585798816568047,
                "tf.math.negative(x)": 0.0029585798816568047,
                "tf.math.reciprocal(x)": 0.0029585798816568047,
                "tf.math.reciprocal_no_nan(x)": 0.0029585798816568047,
                "tf.math.segment_max(data, segment_ids)": 0.0029585798816568047,
                "tf.math.segment_mean(data, segment_ids)": 0.0029585798816568047,
                "tf.math.segment_min(data, segment_ids)": 0.0029585798816568047,
                "tf.math.segment_prod(data, segment_ids)": 0.0029585798816568047,
                "tf.math.segment_sum(data, segment_ids)": 0.0029585798816568047,
                "tf.math.squared_difference(x, y)": 0.0029585798816568047,
                "tf.math.top_k(input, k)": 0.0029585798816568047,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.0029585798816568047,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.0029585798816568047,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.0029585798816568047,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.0029585798816568047,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.0029585798816568047,
                "tf.matmul(a, b)": 0.0029585798816568047,
                "tf.maximum(x, y)": 0.0029585798816568047,
                "tf.minimum(x, y)": 0.0029585798816568047,
                "tf.multiply(x, y)": 0.0029585798816568047,
                "tf.not_equal(x, y)": 0.0029585798816568047,
                "tf.one_hot(indices, depth)": 0.0029585798816568047,
                "tf.ones(shape)": 0.0029585798816568047,
                "tf.ones_like(input)": 0.0029585798816568047,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.0029585798816568047,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.0029585798816568047,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.0029585798816568047,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.0029585798816568047,
                "tf.range(start)": 0.0029585798816568047,
                "tf.range(start, limit, delta)": 0.0029585798816568047,
                "tf.reduce_any(input_tensor, axis)": 0.0029585798816568047,
                "tf.reduce_all(input_tensor, axis)": 0.0029585798816568047,
                "tf.reduce_max(input_tensor)": 0.0029585798816568047,
                "tf.reduce_max(input_tensor, axis)": 0.0029585798816568047,
                "tf.reduce_mean(input_tensor)": 0.0029585798816568047,
                "tf.reduce_mean(input_tensor, axis)": 0.0029585798816568047,
                "tf.reduce_min(input_tensor)": 0.0029585798816568047,
                "tf.reduce_min(input_tensor, axis)": 0.0029585798816568047,
                "tf.reduce_prod(input_tensor, axis)": 0.0029585798816568047,
                "tf.reduce_sum(input_tensor)": 0.0029585798816568047,
                "tf.reduce_sum(input_tensor, axis)": 0.0029585798816568047,
                "tf.repeat(input, repeats)": 0.0029585798816568047,
                "tf.repeat(input, repeats, axis)": 0.0029585798816568047,
                "tf.reshape(tensor, shape)": 0.0029585798816568047,
                "tf.reverse(tensor, axis)": 0.0029585798816568047,
                "tf.roll(input, shift, axis)": 0.0029585798816568047,
                "tf.round(x)": 0.0029585798816568047,
                "tf.scatter_nd(indices, updates, shape)": 0.0029585798816568047,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.0029585798816568047,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.0029585798816568047,
                "tf.sequence_mask(lengths)": 0.0029585798816568047,
                "tf.sequence_mask(lengths, maxlen)": 0.0029585798816568047,
                "tf.shape(input)": 0.0029585798816568047,
                "tf.sign(x)": 0.0029585798816568047,
                "tf.sort(values, axis)": 0.0029585798816568047,
                "tf.sort(values, axis, direction='DESCENDING')": 0.0029585798816568047,
                "tf.sqrt(x)": 0.0029585798816568047,
                "tf.square(x)": 0.0029585798816568047,
                "tf.squeeze(input)": 0.0029585798816568047,
                "tf.squeeze(input, axis)": 0.0029585798816568047,
                "tf.stack(values, axis)": 0.0029585798816568047,
                "tf.subtract(x, y)": 0.0029585798816568047,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.0029585798816568047,
                "tf.tensordot(a, b, axes)": 0.0029585798816568047,
                "tf.tile(input, multiples)": 0.0029585798816568047,
                "tf.transpose(a)": 0.0029585798816568047,
                "tf.transpose(a, perm)": 0.0029585798816568047,
                "tf.unique_with_counts(x)": 0.0029585798816568047,
                "tf.unstack(value, axis)": 0.0029585798816568047,
                "tf.where(condition)": 0.0029585798816568047,
                "tf.where(condition, x, y)": 0.0029585798816568047,
                "tf.zeros(shape)": 0.0029585798816568047,
                "tf.zeros_like(input)": 0.0029585798816568047,
                "tf.SparseTensor(indices, values, dense_shape)": 0.008875739644970414,
                "tf.sparse.add(a, b)": 0.0029585798816568047,
                "tf.sparse.concat(axis, sp_inputs)": 0.0029585798816568047,
                "tf.sparse.expand_dims(sp_input, axis)": 0.0029585798816568047,
                "tf.sparse.from_dense(tensor)": 0.0029585798816568047,
                "tf.sparse.maximum(sp_a, sp_b)": 0.0029585798816568047,
                "tf.sparse.minimum(sp_a, sp_b)": 0.0029585798816568047,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.0029585798816568047,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.0029585798816568047,
                "tf.sparse.reset_shape(sp_input)": 0.0029585798816568047,
                "tf.sparse.reshape(sp_input, shape)": 0.0029585798816568047,
                "tf.sparse.retain(sp_input, to_retain)": 0.0029585798816568047,
                "tf.sparse.slice(sp_input, start, size)": 0.07100591715976332,
                "tf.sparse.split(sp_input, num_split, axis)": 0.0029585798816568047,
                "tf.sparse.to_dense(sp_input)": 0.0029585798816568047,
                "tf.sparse.to_dense(sp_input, default_value)": 0.0029585798816568047,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.0029585798816568047,
                "tf.sparse.transpose(sp_input)": 0.0029585798816568047,
                "tf.sparse.transpose(sp_input, perm)": 0.0029585798816568047,
                "IndexingAxis1Operation": 0.0029585798816568047,
                "IndexingOperation": 0.008875739644970414,
                "PairCreationOperation": 0.0029585798816568047,
                "SingletonTupleCreationOperation": 0.0029585798816568047,
                "SlicingAxis0BothOperation": 0.0029585798816568047,
                "SlicingAxis0LeftOperation": 0.005917159763313609,
                "SlicingAxis0RightOperation": 0.0029585798816568047,
                "SlicingAxis1BothOperation": 0.0029585798816568047,
                "SlicingAxis1LeftOperation": 0.0029585798816568047,
                "SlicingAxis1RightOperation": 0.0029585798816568047,
                "TripleCreationOperation": 0.0029585798816568047,
                "PROVIDED_CONSTANT_WEIGHT": 0.0029585798816568047,
                "COMMON_CONSTANT_WEIGHT": 0.2869822485207101,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.0029585798816568047,
                "INPUT_VARIABLE_WEIGHT": 0.0621301775147929,
                "AXIS_CONSTANT_WEIGHT": 0.0650887573964497,
                "SHAPE_CONSTANT_WEIGHT": 0.047337278106508875,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.0029585798816568047,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.0029585798816568047,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.0029585798816568047,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.0029585798816568047,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.008875739644970414
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 8,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 7,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 8,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 8,
                "tf.pad(tensor, paddings, mode='REFLECT')": 8,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side='left')": 8,
                "tf.searchsorted(sorted_sequence, values, side='right')": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 8,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction='DESCENDING')": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 7,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 4,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 7,
                "PairCreationOperation": 8,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 7,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 2,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 4,
                "AXIS_CONSTANT_WEIGHT": 4,
                "SHAPE_CONSTANT_WEIGHT": 4,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 7
            }
        }
    },
    {
        "name": "google_04",
        "description": "Reshape a flat array into a rank 3 tensor",
        "target_program": "tf.reshape(in1, shape=(4, 3, 2))",
        "source": "Real task encountered by Googler, 3/21/2019",
        "constants": "[]",
        "examples": {
            "inputs": "[[111, 112, 121, 122, 131, 132, 211, 212, 221, 222, 231, 232, 311, 312, 321, 322, 331, 332, 411, 412, 421, 422, 431, 432],]",
            "outputs": "[[[111, 112], [121, 122], [131, 132]],    [[211, 212], [221, 222], [231, 232]],    [[311, 312], [321, 322], [331, 332]],    [[411, 412], [421, 422], [431, 432]]]"
        },
        "completions": [
            "return tf.reshape(in1, (4, 3, 2))",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))\n",
            "return tf.reshape(in1, (4, 3, 2))\n",
            "return tf.reshape(in1, (4, 3, 2))",
            "return tf.reshape(in1, (4, 3, 2))",
            "return tf.reshape(in1, (4, 3, 2))",
            "return tf.reshape(in1, (4, 3, 2))",
            "return tf.reshape(in1, (4, 3, 2))\n",
            "return tf.reshape(in1, (4, 3, 2))",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))\n",
            "return tf.reshape(in1, (4, 3, 2))",
            "return tf.reshape(in1, (4, 3, 2))\n",
            "return tf.reshape(in1, (4, 3, 2))\n",
            "return tf.reshape(in1, (4, 3, 2))",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))\n",
            "return tf.reshape(in1, (4, 3, 2))\n",
            "return tf.reshape(in1, (4, 3, 2))",
            "return tf.reshape(in1, (4, 3, 2))\n",
            "return tf.reshape(in1, (4, 3, 2))",
            "return tf.reshape(in1, (4, 3, 2))"
        ],
        "tf_operators": {
            "tf.reshape": 20
        },
        "coverage_percentage": 100.0,
        "total_covered": 1,
        "total_in_target": 1,
        "parsed_constants": [
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ]
        ],
        "all_constants": [
            2,
            3,
            4
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            }
        ],
        "aggregate_constant_count": {
            "input_var": 20,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 0,
            "shape_tuple": 20,
            "tf_float32": 0,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.00425531914893617,
                "tf.add(x, y)": 0.00425531914893617,
                "tf.add_n(inputs)": 0.00425531914893617,
                "tf.argmax(input, axis)": 0.00425531914893617,
                "tf.argmin(input, axis)": 0.00425531914893617,
                "tf.argsort(values, axis, stable=True)": 0.00425531914893617,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.00425531914893617,
                "tf.boolean_mask(tensor, mask)": 0.00425531914893617,
                "tf.broadcast_to(input, shape)": 0.00425531914893617,
                "tf.cast(x, dtype)": 0.00425531914893617,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.00425531914893617,
                "tf.concat(values, axis)": 0.00425531914893617,
                "tf.constant(value)": 0.00425531914893617,
                "tf.constant(value, dtype)": 0.00425531914893617,
                "tf.divide(x, y)": 0.00425531914893617,
                "tf.equal(x, y)": 0.00425531914893617,
                "tf.exp(x)": 0.00425531914893617,
                "tf.expand_dims(input, axis)": 0.00425531914893617,
                "tf.eye(num_rows)": 0.00425531914893617,
                "tf.eye(num_rows, num_columns)": 0.00425531914893617,
                "tf.eye(num_rows, dtype)": 0.00425531914893617,
                "tf.fill(dims, value)": 0.00425531914893617,
                "tf.gather(params, indices)": 0.00425531914893617,
                "tf.gather(params, indices, axis, batch_dims)": 0.00425531914893617,
                "tf.gather_nd(params, indices)": 0.00425531914893617,
                "tf.gather_nd(params, indices, batch_dims)": 0.00425531914893617,
                "tf.greater(x, y)": 0.00425531914893617,
                "tf.greater_equal(x, y)": 0.00425531914893617,
                "tf.math.bincount(arr)": 0.00425531914893617,
                "tf.math.ceil(x)": 0.00425531914893617,
                "tf.math.count_nonzero(input)": 0.00425531914893617,
                "tf.math.count_nonzero(input, axis)": 0.00425531914893617,
                "tf.math.cumsum(x, axis)": 0.00425531914893617,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.00425531914893617,
                "tf.math.divide_no_nan(x, y)": 0.00425531914893617,
                "tf.math.floor(x)": 0.00425531914893617,
                "tf.math.log(x)": 0.00425531914893617,
                "tf.math.logical_and(x, y)": 0.00425531914893617,
                "tf.math.logical_not(x)": 0.00425531914893617,
                "tf.math.logical_or(x, y)": 0.00425531914893617,
                "tf.math.logical_xor(x, y)": 0.00425531914893617,
                "tf.math.negative(x)": 0.00425531914893617,
                "tf.math.reciprocal(x)": 0.00425531914893617,
                "tf.math.reciprocal_no_nan(x)": 0.00425531914893617,
                "tf.math.segment_max(data, segment_ids)": 0.00425531914893617,
                "tf.math.segment_mean(data, segment_ids)": 0.00425531914893617,
                "tf.math.segment_min(data, segment_ids)": 0.00425531914893617,
                "tf.math.segment_prod(data, segment_ids)": 0.00425531914893617,
                "tf.math.segment_sum(data, segment_ids)": 0.00425531914893617,
                "tf.math.squared_difference(x, y)": 0.00425531914893617,
                "tf.math.top_k(input, k)": 0.00425531914893617,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.00425531914893617,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.00425531914893617,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.00425531914893617,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.00425531914893617,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.00425531914893617,
                "tf.matmul(a, b)": 0.00425531914893617,
                "tf.maximum(x, y)": 0.00425531914893617,
                "tf.minimum(x, y)": 0.00425531914893617,
                "tf.multiply(x, y)": 0.00425531914893617,
                "tf.not_equal(x, y)": 0.00425531914893617,
                "tf.one_hot(indices, depth)": 0.00425531914893617,
                "tf.ones(shape)": 0.00425531914893617,
                "tf.ones_like(input)": 0.00425531914893617,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.00425531914893617,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.00425531914893617,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.00425531914893617,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.00425531914893617,
                "tf.range(start)": 0.00425531914893617,
                "tf.range(start, limit, delta)": 0.00425531914893617,
                "tf.reduce_any(input_tensor, axis)": 0.00425531914893617,
                "tf.reduce_all(input_tensor, axis)": 0.00425531914893617,
                "tf.reduce_max(input_tensor)": 0.00425531914893617,
                "tf.reduce_max(input_tensor, axis)": 0.00425531914893617,
                "tf.reduce_mean(input_tensor)": 0.00425531914893617,
                "tf.reduce_mean(input_tensor, axis)": 0.00425531914893617,
                "tf.reduce_min(input_tensor)": 0.00425531914893617,
                "tf.reduce_min(input_tensor, axis)": 0.00425531914893617,
                "tf.reduce_prod(input_tensor, axis)": 0.00425531914893617,
                "tf.reduce_sum(input_tensor)": 0.00425531914893617,
                "tf.reduce_sum(input_tensor, axis)": 0.00425531914893617,
                "tf.repeat(input, repeats)": 0.00425531914893617,
                "tf.repeat(input, repeats, axis)": 0.00425531914893617,
                "tf.reshape(tensor, shape)": 0.08936170212765958,
                "tf.reverse(tensor, axis)": 0.00425531914893617,
                "tf.roll(input, shift, axis)": 0.00425531914893617,
                "tf.round(x)": 0.00425531914893617,
                "tf.scatter_nd(indices, updates, shape)": 0.00425531914893617,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.00425531914893617,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.00425531914893617,
                "tf.sequence_mask(lengths)": 0.00425531914893617,
                "tf.sequence_mask(lengths, maxlen)": 0.00425531914893617,
                "tf.shape(input)": 0.00425531914893617,
                "tf.sign(x)": 0.00425531914893617,
                "tf.sort(values, axis)": 0.00425531914893617,
                "tf.sort(values, axis, direction='DESCENDING')": 0.00425531914893617,
                "tf.sqrt(x)": 0.00425531914893617,
                "tf.square(x)": 0.00425531914893617,
                "tf.squeeze(input)": 0.00425531914893617,
                "tf.squeeze(input, axis)": 0.00425531914893617,
                "tf.stack(values, axis)": 0.00425531914893617,
                "tf.subtract(x, y)": 0.00425531914893617,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.00425531914893617,
                "tf.tensordot(a, b, axes)": 0.00425531914893617,
                "tf.tile(input, multiples)": 0.00425531914893617,
                "tf.transpose(a)": 0.00425531914893617,
                "tf.transpose(a, perm)": 0.00425531914893617,
                "tf.unique_with_counts(x)": 0.00425531914893617,
                "tf.unstack(value, axis)": 0.00425531914893617,
                "tf.where(condition)": 0.00425531914893617,
                "tf.where(condition, x, y)": 0.00425531914893617,
                "tf.zeros(shape)": 0.00425531914893617,
                "tf.zeros_like(input)": 0.00425531914893617,
                "tf.SparseTensor(indices, values, dense_shape)": 0.00425531914893617,
                "tf.sparse.add(a, b)": 0.00425531914893617,
                "tf.sparse.concat(axis, sp_inputs)": 0.00425531914893617,
                "tf.sparse.expand_dims(sp_input, axis)": 0.00425531914893617,
                "tf.sparse.from_dense(tensor)": 0.00425531914893617,
                "tf.sparse.maximum(sp_a, sp_b)": 0.00425531914893617,
                "tf.sparse.minimum(sp_a, sp_b)": 0.00425531914893617,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.00425531914893617,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.00425531914893617,
                "tf.sparse.reset_shape(sp_input)": 0.00425531914893617,
                "tf.sparse.reshape(sp_input, shape)": 0.00425531914893617,
                "tf.sparse.retain(sp_input, to_retain)": 0.00425531914893617,
                "tf.sparse.slice(sp_input, start, size)": 0.00425531914893617,
                "tf.sparse.split(sp_input, num_split, axis)": 0.00425531914893617,
                "tf.sparse.to_dense(sp_input)": 0.00425531914893617,
                "tf.sparse.to_dense(sp_input, default_value)": 0.00425531914893617,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.00425531914893617,
                "tf.sparse.transpose(sp_input)": 0.00425531914893617,
                "tf.sparse.transpose(sp_input, perm)": 0.00425531914893617,
                "IndexingAxis1Operation": 0.00425531914893617,
                "IndexingOperation": 0.00425531914893617,
                "PairCreationOperation": 0.00425531914893617,
                "SingletonTupleCreationOperation": 0.00425531914893617,
                "SlicingAxis0BothOperation": 0.00425531914893617,
                "SlicingAxis0LeftOperation": 0.00425531914893617,
                "SlicingAxis0RightOperation": 0.00425531914893617,
                "SlicingAxis1BothOperation": 0.00425531914893617,
                "SlicingAxis1LeftOperation": 0.00425531914893617,
                "SlicingAxis1RightOperation": 0.00425531914893617,
                "TripleCreationOperation": 0.08936170212765958,
                "PROVIDED_CONSTANT_WEIGHT": 0.00425531914893617,
                "COMMON_CONSTANT_WEIGHT": 0.00425531914893617,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.00425531914893617,
                "INPUT_VARIABLE_WEIGHT": 0.08936170212765958,
                "AXIS_CONSTANT_WEIGHT": 0.00425531914893617,
                "SHAPE_CONSTANT_WEIGHT": 0.00425531914893617,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.08936170212765958,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.00425531914893617,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.00425531914893617,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.00425531914893617,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.00425531914893617
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 8,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 8,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 8,
                "tf.pad(tensor, paddings, mode='REFLECT')": 8,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 3,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side='left')": 8,
                "tf.searchsorted(sorted_sequence, values, side='right')": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 8,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction='DESCENDING')": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 8,
                "PairCreationOperation": 8,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 3,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 8,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 3,
                "AXIS_CONSTANT_WEIGHT": 8,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 3,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "google_05",
        "description": "Repeat each input entry 6 times",
        "target_program": "tf.tile(tf.expand_dims(in1, 1), (1, 6, 1))",
        "source": "Real task encountered by Googler, 3/22/2019",
        "constants": "[6]",
        "examples": {
            "inputs": "[[[1, 2, 3, 4], [5, 6, 7, 8]],]",
            "outputs": "[[[1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4],     [1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4]],    [[5, 6, 7, 8], [5, 6, 7, 8], [5, 6, 7, 8],     [5, 6, 7, 8], [5, 6, 7, 8], [5, 6, 7, 8]]]"
        },
        "completions": [
            "return tf.repeat(in1, repeats=6, axis=1)\n",
            "return tf.tile(in1, [1, 6])",
            "return tf.repeat(in1, repeats=6, axis=1)",
            "return tf.repeat(in1, repeats=6, axis=1)\n",
            "return tf.tile(tf.expand_dims(in1, 2), [1, 1, 6])\n",
            "return tf.repeat(in1, 6, axis=1)",
            "return tf.repeat(tf.expand_dims(in1, axis=2), 6, axis=2)",
            "return tf.repeat(tf.expand_dims(in1, axis=2), repeats=6, axis=2)",
            "return tf.repeat(in1, repeats=6, axis=1)\n",
            "return tf.repeat(in1, 6, axis=1)\n",
            "return tf.repeat(in1, repeats=6, axis=1)\n",
            "return tf.repeat(in1, 6, axis=1)",
            "return tf.repeat(in1, repeats=6, axis=1)",
            "return tf.repeat(in1, 6, axis=1)\n",
            "return tf.tile(tf.expand_dims(in1, axis=2), [1, 1, 6])",
            "return tf.repeat(in1, repeats=6, axis=1)",
            "return tf.repeat(in1, repeats=6, axis=1)\n",
            "return tf.repeat(in1, 6, axis=1)\n",
            "return tf.repeat(in1, 6, axis=1)",
            "return tf.tile(in1, [1, 6])\n"
        ],
        "tf_operators": {
            "tf.repeat": 16,
            "tf.tile": 4,
            "tf.expand_dims": 4
        },
        "coverage_percentage": 100.0,
        "total_covered": 2,
        "total_in_target": 2,
        "parsed_constants": [
            [
                6,
                1
            ],
            [
                1,
                6
            ],
            [
                6,
                1
            ],
            [
                6,
                1
            ],
            [
                2,
                1,
                1,
                6
            ],
            [
                6,
                1
            ],
            [
                2,
                6,
                2
            ],
            [
                2,
                6,
                2
            ],
            [
                6,
                1
            ],
            [
                6,
                1
            ],
            [
                6,
                1
            ],
            [
                6,
                1
            ],
            [
                6,
                1
            ],
            [
                6,
                1
            ],
            [
                2,
                1,
                1,
                6
            ],
            [
                6,
                1
            ],
            [
                6,
                1
            ],
            [
                6,
                1
            ],
            [
                6,
                1
            ],
            [
                1,
                6
            ]
        ],
        "all_constants": [
            1,
            2,
            6
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 2,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 2,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 20,
            "shape": 0,
            "tf_bool": 0,
            "provided": 20,
            "common": 20,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 6,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.004366812227074236,
                "tf.add(x, y)": 0.004366812227074236,
                "tf.add_n(inputs)": 0.004366812227074236,
                "tf.argmax(input, axis)": 0.004366812227074236,
                "tf.argmin(input, axis)": 0.004366812227074236,
                "tf.argsort(values, axis, stable=True)": 0.004366812227074236,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.004366812227074236,
                "tf.boolean_mask(tensor, mask)": 0.004366812227074236,
                "tf.broadcast_to(input, shape)": 0.004366812227074236,
                "tf.cast(x, dtype)": 0.004366812227074236,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.004366812227074236,
                "tf.concat(values, axis)": 0.004366812227074236,
                "tf.constant(value)": 0.004366812227074236,
                "tf.constant(value, dtype)": 0.004366812227074236,
                "tf.divide(x, y)": 0.004366812227074236,
                "tf.equal(x, y)": 0.004366812227074236,
                "tf.exp(x)": 0.004366812227074236,
                "tf.expand_dims(input, axis)": 0.021834061135371178,
                "tf.eye(num_rows)": 0.004366812227074236,
                "tf.eye(num_rows, num_columns)": 0.004366812227074236,
                "tf.eye(num_rows, dtype)": 0.004366812227074236,
                "tf.fill(dims, value)": 0.004366812227074236,
                "tf.gather(params, indices)": 0.004366812227074236,
                "tf.gather(params, indices, axis, batch_dims)": 0.004366812227074236,
                "tf.gather_nd(params, indices)": 0.004366812227074236,
                "tf.gather_nd(params, indices, batch_dims)": 0.004366812227074236,
                "tf.greater(x, y)": 0.004366812227074236,
                "tf.greater_equal(x, y)": 0.004366812227074236,
                "tf.math.bincount(arr)": 0.004366812227074236,
                "tf.math.ceil(x)": 0.004366812227074236,
                "tf.math.count_nonzero(input)": 0.004366812227074236,
                "tf.math.count_nonzero(input, axis)": 0.004366812227074236,
                "tf.math.cumsum(x, axis)": 0.004366812227074236,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.004366812227074236,
                "tf.math.divide_no_nan(x, y)": 0.004366812227074236,
                "tf.math.floor(x)": 0.004366812227074236,
                "tf.math.log(x)": 0.004366812227074236,
                "tf.math.logical_and(x, y)": 0.004366812227074236,
                "tf.math.logical_not(x)": 0.004366812227074236,
                "tf.math.logical_or(x, y)": 0.004366812227074236,
                "tf.math.logical_xor(x, y)": 0.004366812227074236,
                "tf.math.negative(x)": 0.004366812227074236,
                "tf.math.reciprocal(x)": 0.004366812227074236,
                "tf.math.reciprocal_no_nan(x)": 0.004366812227074236,
                "tf.math.segment_max(data, segment_ids)": 0.004366812227074236,
                "tf.math.segment_mean(data, segment_ids)": 0.004366812227074236,
                "tf.math.segment_min(data, segment_ids)": 0.004366812227074236,
                "tf.math.segment_prod(data, segment_ids)": 0.004366812227074236,
                "tf.math.segment_sum(data, segment_ids)": 0.004366812227074236,
                "tf.math.squared_difference(x, y)": 0.004366812227074236,
                "tf.math.top_k(input, k)": 0.004366812227074236,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.004366812227074236,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.004366812227074236,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.004366812227074236,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.004366812227074236,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.004366812227074236,
                "tf.matmul(a, b)": 0.004366812227074236,
                "tf.maximum(x, y)": 0.004366812227074236,
                "tf.minimum(x, y)": 0.004366812227074236,
                "tf.multiply(x, y)": 0.004366812227074236,
                "tf.not_equal(x, y)": 0.004366812227074236,
                "tf.one_hot(indices, depth)": 0.004366812227074236,
                "tf.ones(shape)": 0.004366812227074236,
                "tf.ones_like(input)": 0.004366812227074236,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.004366812227074236,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.004366812227074236,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.004366812227074236,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.004366812227074236,
                "tf.range(start)": 0.004366812227074236,
                "tf.range(start, limit, delta)": 0.004366812227074236,
                "tf.reduce_any(input_tensor, axis)": 0.004366812227074236,
                "tf.reduce_all(input_tensor, axis)": 0.004366812227074236,
                "tf.reduce_max(input_tensor)": 0.004366812227074236,
                "tf.reduce_max(input_tensor, axis)": 0.004366812227074236,
                "tf.reduce_mean(input_tensor)": 0.004366812227074236,
                "tf.reduce_mean(input_tensor, axis)": 0.004366812227074236,
                "tf.reduce_min(input_tensor)": 0.004366812227074236,
                "tf.reduce_min(input_tensor, axis)": 0.004366812227074236,
                "tf.reduce_prod(input_tensor, axis)": 0.004366812227074236,
                "tf.reduce_sum(input_tensor)": 0.004366812227074236,
                "tf.reduce_sum(input_tensor, axis)": 0.004366812227074236,
                "tf.repeat(input, repeats)": 0.004366812227074236,
                "tf.repeat(input, repeats, axis)": 0.004366812227074236,
                "tf.reshape(tensor, shape)": 0.004366812227074236,
                "tf.reverse(tensor, axis)": 0.004366812227074236,
                "tf.roll(input, shift, axis)": 0.004366812227074236,
                "tf.round(x)": 0.004366812227074236,
                "tf.scatter_nd(indices, updates, shape)": 0.004366812227074236,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.004366812227074236,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.004366812227074236,
                "tf.sequence_mask(lengths)": 0.004366812227074236,
                "tf.sequence_mask(lengths, maxlen)": 0.004366812227074236,
                "tf.shape(input)": 0.004366812227074236,
                "tf.sign(x)": 0.004366812227074236,
                "tf.sort(values, axis)": 0.004366812227074236,
                "tf.sort(values, axis, direction='DESCENDING')": 0.004366812227074236,
                "tf.sqrt(x)": 0.004366812227074236,
                "tf.square(x)": 0.004366812227074236,
                "tf.squeeze(input)": 0.004366812227074236,
                "tf.squeeze(input, axis)": 0.004366812227074236,
                "tf.stack(values, axis)": 0.004366812227074236,
                "tf.subtract(x, y)": 0.004366812227074236,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.004366812227074236,
                "tf.tensordot(a, b, axes)": 0.004366812227074236,
                "tf.tile(input, multiples)": 0.021834061135371178,
                "tf.transpose(a)": 0.004366812227074236,
                "tf.transpose(a, perm)": 0.004366812227074236,
                "tf.unique_with_counts(x)": 0.004366812227074236,
                "tf.unstack(value, axis)": 0.004366812227074236,
                "tf.where(condition)": 0.004366812227074236,
                "tf.where(condition, x, y)": 0.004366812227074236,
                "tf.zeros(shape)": 0.004366812227074236,
                "tf.zeros_like(input)": 0.004366812227074236,
                "tf.SparseTensor(indices, values, dense_shape)": 0.004366812227074236,
                "tf.sparse.add(a, b)": 0.004366812227074236,
                "tf.sparse.concat(axis, sp_inputs)": 0.004366812227074236,
                "tf.sparse.expand_dims(sp_input, axis)": 0.004366812227074236,
                "tf.sparse.from_dense(tensor)": 0.004366812227074236,
                "tf.sparse.maximum(sp_a, sp_b)": 0.004366812227074236,
                "tf.sparse.minimum(sp_a, sp_b)": 0.004366812227074236,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.004366812227074236,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.004366812227074236,
                "tf.sparse.reset_shape(sp_input)": 0.004366812227074236,
                "tf.sparse.reshape(sp_input, shape)": 0.004366812227074236,
                "tf.sparse.retain(sp_input, to_retain)": 0.004366812227074236,
                "tf.sparse.slice(sp_input, start, size)": 0.004366812227074236,
                "tf.sparse.split(sp_input, num_split, axis)": 0.004366812227074236,
                "tf.sparse.to_dense(sp_input)": 0.004366812227074236,
                "tf.sparse.to_dense(sp_input, default_value)": 0.004366812227074236,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.004366812227074236,
                "tf.sparse.transpose(sp_input)": 0.004366812227074236,
                "tf.sparse.transpose(sp_input, perm)": 0.004366812227074236,
                "IndexingAxis1Operation": 0.004366812227074236,
                "IndexingOperation": 0.004366812227074236,
                "PairCreationOperation": 0.004366812227074236,
                "SingletonTupleCreationOperation": 0.004366812227074236,
                "SlicingAxis0BothOperation": 0.004366812227074236,
                "SlicingAxis0LeftOperation": 0.004366812227074236,
                "SlicingAxis0RightOperation": 0.004366812227074236,
                "SlicingAxis1BothOperation": 0.004366812227074236,
                "SlicingAxis1LeftOperation": 0.004366812227074236,
                "SlicingAxis1RightOperation": 0.004366812227074236,
                "TripleCreationOperation": 0.004366812227074236,
                "PROVIDED_CONSTANT_WEIGHT": 0.09170305676855896,
                "COMMON_CONSTANT_WEIGHT": 0.09170305676855896,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.004366812227074236,
                "INPUT_VARIABLE_WEIGHT": 0.09170305676855896,
                "AXIS_CONSTANT_WEIGHT": 0.03056768558951965,
                "SHAPE_CONSTANT_WEIGHT": 0.004366812227074236,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.004366812227074236,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.004366812227074236,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.004366812227074236,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.004366812227074236,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.004366812227074236
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 8,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 6,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 8,
                "tf.pad(tensor, paddings, mode='REFLECT')": 8,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side='left')": 8,
                "tf.searchsorted(sorted_sequence, values, side='right')": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 8,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction='DESCENDING')": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 6,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 8,
                "PairCreationOperation": 8,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 3,
                "COMMON_CONSTANT_WEIGHT": 3,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 3,
                "AXIS_CONSTANT_WEIGHT": 5,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "google_06",
        "description": "Take the max from each group of elements",
        "target_program": "tf.math.segment_max(in2, in1)",
        "source": "Real task encountered by Googler, 3/28/2019",
        "constants": "[]",
        "examples": {
            "inputs": "[[0, 1, 1, 2, 3, 3, 3, 3],[1, 3, 4, 5, 10, 8, 9, 4],]",
            "outputs": "[1, 4, 5, 10]"
        },
        "completions": [
            "return tf.math.segment_max(in2, in1)",
            "return tf.math.segment_max(in2, in1)\n",
            "return tf.math.segment_max(in2, in1)\n",
            "return tf.math.segment_max(in2, in1)",
            "return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    indices = tf.argsort(in1)\n    unique_values, _ = tf.unique_with_counts(in1)\n    max_values = tf.math.segment_max(in2, segment_ids=indices)\n    return max_values\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              ",
            "return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    max_group = tf.math.segment_max(in2, in1)\n    return max_group\n",
            "return tf.math.segment_max(in2, in1)",
            "return tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1)+1)",
            "return tf.math.segment_max(in2, in1)",
            "return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    return tf.gather(params=in2, indices=tf.math.segment_max(data=in1, segment_ids=in2))\n",
            "return tf.gather(in2, tf.argmax(in2, axis=1))\n",
            "return tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1) + 1)",
            "return tf.math.segment_max(in2, in1)",
            "return tf.math.segment_max(in2, in1)\n",
            "return tf.math.unsorted_segment_max(tf.cast(in2, tf.int32), tf.cast(in1, tf.int32), tf.reduce_max(in1)+1)",
            "def transform(in1, in2):\n    segments = tf.math.segment_max(in2, in1)\n    return segments\n",
            "return tf.math.segment_max(in2, in1)"
        ],
        "tf_operators": {
            "tf.math.segment_max": 16,
            "tf.unique_with_counts": 1,
            "tf.argsort": 1,
            "tf.math.unsorted_segment_max": 3,
            "tf.reduce_max": 3,
            "tf.gather": 2,
            "tf.argmax": 1,
            "tf.cast": 1,
            "tf.int32": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 1,
        "total_in_target": 1,
        "parsed_constants": [
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [
                1
            ],
            [],
            [],
            [],
            [
                1
            ],
            [
                1
            ],
            [],
            [],
            [
                1
            ],
            [],
            []
        ],
        "all_constants": [
            1
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 5,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 2,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 47,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 4,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 2
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.004219409282700422,
                "tf.add(x, y)": 0.004219409282700422,
                "tf.add_n(inputs)": 0.004219409282700422,
                "tf.argmax(input, axis)": 0.008438818565400843,
                "tf.argmin(input, axis)": 0.004219409282700422,
                "tf.argsort(values, axis, stable=True)": 0.004219409282700422,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.004219409282700422,
                "tf.boolean_mask(tensor, mask)": 0.004219409282700422,
                "tf.broadcast_to(input, shape)": 0.004219409282700422,
                "tf.cast(x, dtype)": 0.012658227848101266,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.004219409282700422,
                "tf.concat(values, axis)": 0.004219409282700422,
                "tf.constant(value)": 0.004219409282700422,
                "tf.constant(value, dtype)": 0.004219409282700422,
                "tf.divide(x, y)": 0.004219409282700422,
                "tf.equal(x, y)": 0.004219409282700422,
                "tf.exp(x)": 0.004219409282700422,
                "tf.expand_dims(input, axis)": 0.004219409282700422,
                "tf.eye(num_rows)": 0.004219409282700422,
                "tf.eye(num_rows, num_columns)": 0.004219409282700422,
                "tf.eye(num_rows, dtype)": 0.004219409282700422,
                "tf.fill(dims, value)": 0.004219409282700422,
                "tf.gather(params, indices)": 0.008438818565400843,
                "tf.gather(params, indices, axis, batch_dims)": 0.008438818565400843,
                "tf.gather_nd(params, indices)": 0.004219409282700422,
                "tf.gather_nd(params, indices, batch_dims)": 0.004219409282700422,
                "tf.greater(x, y)": 0.004219409282700422,
                "tf.greater_equal(x, y)": 0.004219409282700422,
                "tf.math.bincount(arr)": 0.004219409282700422,
                "tf.math.ceil(x)": 0.004219409282700422,
                "tf.math.count_nonzero(input)": 0.004219409282700422,
                "tf.math.count_nonzero(input, axis)": 0.004219409282700422,
                "tf.math.cumsum(x, axis)": 0.004219409282700422,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.004219409282700422,
                "tf.math.divide_no_nan(x, y)": 0.004219409282700422,
                "tf.math.floor(x)": 0.004219409282700422,
                "tf.math.log(x)": 0.004219409282700422,
                "tf.math.logical_and(x, y)": 0.004219409282700422,
                "tf.math.logical_not(x)": 0.004219409282700422,
                "tf.math.logical_or(x, y)": 0.004219409282700422,
                "tf.math.logical_xor(x, y)": 0.004219409282700422,
                "tf.math.negative(x)": 0.004219409282700422,
                "tf.math.reciprocal(x)": 0.004219409282700422,
                "tf.math.reciprocal_no_nan(x)": 0.004219409282700422,
                "tf.math.segment_max(data, segment_ids)": 0.07172995780590717,
                "tf.math.segment_mean(data, segment_ids)": 0.004219409282700422,
                "tf.math.segment_min(data, segment_ids)": 0.004219409282700422,
                "tf.math.segment_prod(data, segment_ids)": 0.004219409282700422,
                "tf.math.segment_sum(data, segment_ids)": 0.004219409282700422,
                "tf.math.squared_difference(x, y)": 0.004219409282700422,
                "tf.math.top_k(input, k)": 0.004219409282700422,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.016877637130801686,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.004219409282700422,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.004219409282700422,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.004219409282700422,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.004219409282700422,
                "tf.matmul(a, b)": 0.004219409282700422,
                "tf.maximum(x, y)": 0.004219409282700422,
                "tf.minimum(x, y)": 0.004219409282700422,
                "tf.multiply(x, y)": 0.004219409282700422,
                "tf.not_equal(x, y)": 0.004219409282700422,
                "tf.one_hot(indices, depth)": 0.004219409282700422,
                "tf.ones(shape)": 0.004219409282700422,
                "tf.ones_like(input)": 0.004219409282700422,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.004219409282700422,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.004219409282700422,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.004219409282700422,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.004219409282700422,
                "tf.range(start)": 0.004219409282700422,
                "tf.range(start, limit, delta)": 0.004219409282700422,
                "tf.reduce_any(input_tensor, axis)": 0.004219409282700422,
                "tf.reduce_all(input_tensor, axis)": 0.004219409282700422,
                "tf.reduce_max(input_tensor)": 0.016877637130801686,
                "tf.reduce_max(input_tensor, axis)": 0.004219409282700422,
                "tf.reduce_mean(input_tensor)": 0.004219409282700422,
                "tf.reduce_mean(input_tensor, axis)": 0.004219409282700422,
                "tf.reduce_min(input_tensor)": 0.004219409282700422,
                "tf.reduce_min(input_tensor, axis)": 0.004219409282700422,
                "tf.reduce_prod(input_tensor, axis)": 0.004219409282700422,
                "tf.reduce_sum(input_tensor)": 0.004219409282700422,
                "tf.reduce_sum(input_tensor, axis)": 0.004219409282700422,
                "tf.repeat(input, repeats)": 0.004219409282700422,
                "tf.repeat(input, repeats, axis)": 0.004219409282700422,
                "tf.reshape(tensor, shape)": 0.004219409282700422,
                "tf.reverse(tensor, axis)": 0.004219409282700422,
                "tf.roll(input, shift, axis)": 0.004219409282700422,
                "tf.round(x)": 0.004219409282700422,
                "tf.scatter_nd(indices, updates, shape)": 0.004219409282700422,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.004219409282700422,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.004219409282700422,
                "tf.sequence_mask(lengths)": 0.004219409282700422,
                "tf.sequence_mask(lengths, maxlen)": 0.004219409282700422,
                "tf.shape(input)": 0.004219409282700422,
                "tf.sign(x)": 0.004219409282700422,
                "tf.sort(values, axis)": 0.004219409282700422,
                "tf.sort(values, axis, direction='DESCENDING')": 0.004219409282700422,
                "tf.sqrt(x)": 0.004219409282700422,
                "tf.square(x)": 0.004219409282700422,
                "tf.squeeze(input)": 0.004219409282700422,
                "tf.squeeze(input, axis)": 0.004219409282700422,
                "tf.stack(values, axis)": 0.004219409282700422,
                "tf.subtract(x, y)": 0.004219409282700422,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.004219409282700422,
                "tf.tensordot(a, b, axes)": 0.004219409282700422,
                "tf.tile(input, multiples)": 0.004219409282700422,
                "tf.transpose(a)": 0.004219409282700422,
                "tf.transpose(a, perm)": 0.004219409282700422,
                "tf.unique_with_counts(x)": 0.008438818565400843,
                "tf.unstack(value, axis)": 0.004219409282700422,
                "tf.where(condition)": 0.004219409282700422,
                "tf.where(condition, x, y)": 0.004219409282700422,
                "tf.zeros(shape)": 0.004219409282700422,
                "tf.zeros_like(input)": 0.004219409282700422,
                "tf.SparseTensor(indices, values, dense_shape)": 0.004219409282700422,
                "tf.sparse.add(a, b)": 0.004219409282700422,
                "tf.sparse.concat(axis, sp_inputs)": 0.004219409282700422,
                "tf.sparse.expand_dims(sp_input, axis)": 0.004219409282700422,
                "tf.sparse.from_dense(tensor)": 0.004219409282700422,
                "tf.sparse.maximum(sp_a, sp_b)": 0.004219409282700422,
                "tf.sparse.minimum(sp_a, sp_b)": 0.004219409282700422,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.004219409282700422,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.004219409282700422,
                "tf.sparse.reset_shape(sp_input)": 0.004219409282700422,
                "tf.sparse.reshape(sp_input, shape)": 0.004219409282700422,
                "tf.sparse.retain(sp_input, to_retain)": 0.004219409282700422,
                "tf.sparse.slice(sp_input, start, size)": 0.004219409282700422,
                "tf.sparse.split(sp_input, num_split, axis)": 0.004219409282700422,
                "tf.sparse.to_dense(sp_input)": 0.004219409282700422,
                "tf.sparse.to_dense(sp_input, default_value)": 0.004219409282700422,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.004219409282700422,
                "tf.sparse.transpose(sp_input)": 0.004219409282700422,
                "tf.sparse.transpose(sp_input, perm)": 0.004219409282700422,
                "IndexingAxis1Operation": 0.004219409282700422,
                "IndexingOperation": 0.004219409282700422,
                "PairCreationOperation": 0.008438818565400843,
                "SingletonTupleCreationOperation": 0.004219409282700422,
                "SlicingAxis0BothOperation": 0.004219409282700422,
                "SlicingAxis0LeftOperation": 0.004219409282700422,
                "SlicingAxis0RightOperation": 0.004219409282700422,
                "SlicingAxis1BothOperation": 0.004219409282700422,
                "SlicingAxis1LeftOperation": 0.004219409282700422,
                "SlicingAxis1RightOperation": 0.004219409282700422,
                "TripleCreationOperation": 0.004219409282700422,
                "PROVIDED_CONSTANT_WEIGHT": 0.004219409282700422,
                "COMMON_CONSTANT_WEIGHT": 0.02109704641350211,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.004219409282700422,
                "INPUT_VARIABLE_WEIGHT": 0.20253164556962025,
                "AXIS_CONSTANT_WEIGHT": 0.004219409282700422,
                "SHAPE_CONSTANT_WEIGHT": 0.004219409282700422,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.004219409282700422,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.012658227848101266,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.004219409282700422,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.004219409282700422,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.004219409282700422
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 7,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 6,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 8,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 7,
                "tf.gather(params, indices, axis, batch_dims)": 7,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 4,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 6,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 8,
                "tf.pad(tensor, paddings, mode='REFLECT')": 8,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 6,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side='left')": 8,
                "tf.searchsorted(sorted_sequence, values, side='right')": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 8,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction='DESCENDING')": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 7,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 8,
                "PairCreationOperation": 7,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 6,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 2,
                "AXIS_CONSTANT_WEIGHT": 8,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 6,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "google_07",
        "description": "Take the argmax of each group of elements",
        "target_program": "tf.cast(tf.argmax((tf.sequence_mask(tf.cumsum(tf.math.bincount(in1)), dtype=tf.int32) - tf.sequence_mask(tf.cumsum(tf.math.bincount(in1), exclusive=True), dtype=tf.int32, maxlen=in1.shape[0])) * in2, axis=1), tf.int32) - tf.cumsum(tf.math.bincount(in1), exclusive=True)",
        "source": "Real task encountered by Googler, 3/29/2019",
        "constants": "[]",
        "examples": {
            "inputs": "[[0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 4, 4, 5, 5],[4, 1, 8, 2, 5, 7, 9, 3, 7, 3, 1, 42, 1, 2, 4, 0],]",
            "outputs": "[2, 3, 1, 0, 1, 0]"
        },
        "completions": [
            "def transform(in1, in2):\n    groups = tf.argsort(in1)\n    sorted_values = tf.gather(in2, groups)\n    max_indices = tf.argmax(sorted_values, axis=-1, output_type=tf.int32)\n    return tf.gather(groups, max_indices)\n",
            "return tf.math.segment_max(in2, in1)\n",
            "return tf.argmax(tf.math.segment_max(in2, in1), axis=1)\n      ",
            "return tf.math.segment_max(in2, in1)\n",
            "return tf.math.segment_max(in2, in1)\n",
            "return tf.argmax(tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1) + 1), axis=0)\n",
            "return tf.argmax(tf.unsorted_segment_max(in2, in1, tf.reduce_max(in1) + 1), axis=0)\n",
            "return tf.math.segment_max(in2, in1)",
            "segment_ids = in1\ndata = in2\nmax_values = tf.math.segment_max(data, segment_ids)\nreturn tf.argmax(tf.equal(data, tf.expand_dims(max_values, 1)), axis=0)\n",
            "return tf.math.segment_max(in2, in1)",
            "return tf.math.segment_max(in2, in1)",
            "return tf.math.segment_max(in2, in1)",
            "return tf.argmax(tf.math.segment_max(in2, in1), axis=1)\n",
            "def transform(in1, in2):\n    unique_values, unique_idx, _ = tf.unique_with_counts(in1)\n    group_max_values = tf.gather(in2, tf.math.unsorted_segment_max(in2, unique_idx, tf.size(unique_values)))\n    return group_max_values\n",
            "def transform(in1, in2):\n    unique_values, unique_indices = tf.unique(in1)\n    return tf.math.argmax(tf.gather(in2, unique_indices))",
            "return tf.argmax(tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1) + 1), axis=0)",
            "max_values, _ = tf.math.top_k(in2, k=1)\nreturn tf.unsorted_segment_max(max_values, in1, num_segments=tf.reduce_max(in1)+1)\n",
            "return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    segments = tf.math.segment_max(in2, in1)\n    return tf.math.argmax(in2, axis=0)\n",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)\n"
        ],
        "tf_operators": {
            "tf.gather": 3,
            "tf.argmax": 7,
            "tf.argsort": 1,
            "tf.int32": 1,
            "tf.math.segment_max": 13,
            "tf.math.unsorted_segment_max": 3,
            "tf.reduce_max": 4,
            "tf.unsorted_segment_max": 2,
            "tf.expand_dims": 1,
            "tf.equal": 1,
            "tf.unique_with_counts": 1,
            "tf.size": 1,
            "tf.unique": 1,
            "tf.math.argmax": 2,
            "tf.math.top_k": 1
        },
        "coverage_percentage": 33.33333333333333,
        "total_covered": 2,
        "total_in_target": 6,
        "parsed_constants": [
            [
                -1
            ],
            [],
            [
                1
            ],
            [],
            [],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [],
            [
                1,
                0
            ],
            [],
            [],
            [],
            [
                1
            ],
            [],
            [],
            [
                1,
                0
            ],
            [
                1,
                1
            ],
            [],
            [
                0
            ],
            []
        ],
        "all_constants": [
            0,
            1,
            -1
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 46,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 14,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 1
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.003937007874015748,
                "tf.add(x, y)": 0.003937007874015748,
                "tf.add_n(inputs)": 0.003937007874015748,
                "tf.argmax(input, axis)": 0.031496062992125984,
                "tf.argmin(input, axis)": 0.003937007874015748,
                "tf.argsort(values, axis, stable=True)": 0.003937007874015748,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.003937007874015748,
                "tf.boolean_mask(tensor, mask)": 0.003937007874015748,
                "tf.broadcast_to(input, shape)": 0.003937007874015748,
                "tf.cast(x, dtype)": 0.003937007874015748,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.003937007874015748,
                "tf.concat(values, axis)": 0.003937007874015748,
                "tf.constant(value)": 0.003937007874015748,
                "tf.constant(value, dtype)": 0.003937007874015748,
                "tf.divide(x, y)": 0.003937007874015748,
                "tf.equal(x, y)": 0.007874015748031496,
                "tf.exp(x)": 0.003937007874015748,
                "tf.expand_dims(input, axis)": 0.007874015748031496,
                "tf.eye(num_rows)": 0.003937007874015748,
                "tf.eye(num_rows, num_columns)": 0.003937007874015748,
                "tf.eye(num_rows, dtype)": 0.003937007874015748,
                "tf.fill(dims, value)": 0.003937007874015748,
                "tf.gather(params, indices)": 0.01968503937007874,
                "tf.gather(params, indices, axis, batch_dims)": 0.003937007874015748,
                "tf.gather_nd(params, indices)": 0.003937007874015748,
                "tf.gather_nd(params, indices, batch_dims)": 0.003937007874015748,
                "tf.greater(x, y)": 0.003937007874015748,
                "tf.greater_equal(x, y)": 0.003937007874015748,
                "tf.math.bincount(arr)": 0.003937007874015748,
                "tf.math.ceil(x)": 0.003937007874015748,
                "tf.math.count_nonzero(input)": 0.003937007874015748,
                "tf.math.count_nonzero(input, axis)": 0.003937007874015748,
                "tf.math.cumsum(x, axis)": 0.003937007874015748,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.003937007874015748,
                "tf.math.divide_no_nan(x, y)": 0.003937007874015748,
                "tf.math.floor(x)": 0.003937007874015748,
                "tf.math.log(x)": 0.003937007874015748,
                "tf.math.logical_and(x, y)": 0.003937007874015748,
                "tf.math.logical_not(x)": 0.003937007874015748,
                "tf.math.logical_or(x, y)": 0.003937007874015748,
                "tf.math.logical_xor(x, y)": 0.003937007874015748,
                "tf.math.negative(x)": 0.003937007874015748,
                "tf.math.reciprocal(x)": 0.003937007874015748,
                "tf.math.reciprocal_no_nan(x)": 0.003937007874015748,
                "tf.math.segment_max(data, segment_ids)": 0.05511811023622047,
                "tf.math.segment_mean(data, segment_ids)": 0.003937007874015748,
                "tf.math.segment_min(data, segment_ids)": 0.003937007874015748,
                "tf.math.segment_prod(data, segment_ids)": 0.003937007874015748,
                "tf.math.segment_sum(data, segment_ids)": 0.003937007874015748,
                "tf.math.squared_difference(x, y)": 0.003937007874015748,
                "tf.math.top_k(input, k)": 0.007874015748031496,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.015748031496062992,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.003937007874015748,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.003937007874015748,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.003937007874015748,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.003937007874015748,
                "tf.matmul(a, b)": 0.003937007874015748,
                "tf.maximum(x, y)": 0.003937007874015748,
                "tf.minimum(x, y)": 0.003937007874015748,
                "tf.multiply(x, y)": 0.003937007874015748,
                "tf.not_equal(x, y)": 0.003937007874015748,
                "tf.one_hot(indices, depth)": 0.003937007874015748,
                "tf.ones(shape)": 0.003937007874015748,
                "tf.ones_like(input)": 0.003937007874015748,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.003937007874015748,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.003937007874015748,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.003937007874015748,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.003937007874015748,
                "tf.range(start)": 0.003937007874015748,
                "tf.range(start, limit, delta)": 0.003937007874015748,
                "tf.reduce_any(input_tensor, axis)": 0.003937007874015748,
                "tf.reduce_all(input_tensor, axis)": 0.003937007874015748,
                "tf.reduce_max(input_tensor)": 0.01968503937007874,
                "tf.reduce_max(input_tensor, axis)": 0.003937007874015748,
                "tf.reduce_mean(input_tensor)": 0.003937007874015748,
                "tf.reduce_mean(input_tensor, axis)": 0.003937007874015748,
                "tf.reduce_min(input_tensor)": 0.003937007874015748,
                "tf.reduce_min(input_tensor, axis)": 0.003937007874015748,
                "tf.reduce_prod(input_tensor, axis)": 0.003937007874015748,
                "tf.reduce_sum(input_tensor)": 0.003937007874015748,
                "tf.reduce_sum(input_tensor, axis)": 0.003937007874015748,
                "tf.repeat(input, repeats)": 0.003937007874015748,
                "tf.repeat(input, repeats, axis)": 0.003937007874015748,
                "tf.reshape(tensor, shape)": 0.003937007874015748,
                "tf.reverse(tensor, axis)": 0.003937007874015748,
                "tf.roll(input, shift, axis)": 0.003937007874015748,
                "tf.round(x)": 0.003937007874015748,
                "tf.scatter_nd(indices, updates, shape)": 0.003937007874015748,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.003937007874015748,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.003937007874015748,
                "tf.sequence_mask(lengths)": 0.003937007874015748,
                "tf.sequence_mask(lengths, maxlen)": 0.003937007874015748,
                "tf.shape(input)": 0.003937007874015748,
                "tf.sign(x)": 0.003937007874015748,
                "tf.sort(values, axis)": 0.003937007874015748,
                "tf.sort(values, axis, direction='DESCENDING')": 0.003937007874015748,
                "tf.sqrt(x)": 0.003937007874015748,
                "tf.square(x)": 0.003937007874015748,
                "tf.squeeze(input)": 0.003937007874015748,
                "tf.squeeze(input, axis)": 0.003937007874015748,
                "tf.stack(values, axis)": 0.003937007874015748,
                "tf.subtract(x, y)": 0.003937007874015748,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.003937007874015748,
                "tf.tensordot(a, b, axes)": 0.003937007874015748,
                "tf.tile(input, multiples)": 0.003937007874015748,
                "tf.transpose(a)": 0.003937007874015748,
                "tf.transpose(a, perm)": 0.003937007874015748,
                "tf.unique_with_counts(x)": 0.007874015748031496,
                "tf.unstack(value, axis)": 0.003937007874015748,
                "tf.where(condition)": 0.003937007874015748,
                "tf.where(condition, x, y)": 0.003937007874015748,
                "tf.zeros(shape)": 0.003937007874015748,
                "tf.zeros_like(input)": 0.003937007874015748,
                "tf.SparseTensor(indices, values, dense_shape)": 0.003937007874015748,
                "tf.sparse.add(a, b)": 0.003937007874015748,
                "tf.sparse.concat(axis, sp_inputs)": 0.003937007874015748,
                "tf.sparse.expand_dims(sp_input, axis)": 0.003937007874015748,
                "tf.sparse.from_dense(tensor)": 0.003937007874015748,
                "tf.sparse.maximum(sp_a, sp_b)": 0.003937007874015748,
                "tf.sparse.minimum(sp_a, sp_b)": 0.003937007874015748,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.003937007874015748,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.003937007874015748,
                "tf.sparse.reset_shape(sp_input)": 0.003937007874015748,
                "tf.sparse.reshape(sp_input, shape)": 0.003937007874015748,
                "tf.sparse.retain(sp_input, to_retain)": 0.003937007874015748,
                "tf.sparse.slice(sp_input, start, size)": 0.003937007874015748,
                "tf.sparse.split(sp_input, num_split, axis)": 0.003937007874015748,
                "tf.sparse.to_dense(sp_input)": 0.003937007874015748,
                "tf.sparse.to_dense(sp_input, default_value)": 0.003937007874015748,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.003937007874015748,
                "tf.sparse.transpose(sp_input)": 0.003937007874015748,
                "tf.sparse.transpose(sp_input, perm)": 0.003937007874015748,
                "IndexingAxis1Operation": 0.003937007874015748,
                "IndexingOperation": 0.003937007874015748,
                "PairCreationOperation": 0.011811023622047244,
                "SingletonTupleCreationOperation": 0.003937007874015748,
                "SlicingAxis0BothOperation": 0.003937007874015748,
                "SlicingAxis0LeftOperation": 0.003937007874015748,
                "SlicingAxis0RightOperation": 0.003937007874015748,
                "SlicingAxis1BothOperation": 0.003937007874015748,
                "SlicingAxis1LeftOperation": 0.003937007874015748,
                "SlicingAxis1RightOperation": 0.003937007874015748,
                "TripleCreationOperation": 0.007874015748031496,
                "PROVIDED_CONSTANT_WEIGHT": 0.003937007874015748,
                "COMMON_CONSTANT_WEIGHT": 0.05905511811023622,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.003937007874015748,
                "INPUT_VARIABLE_WEIGHT": 0.18503937007874016,
                "AXIS_CONSTANT_WEIGHT": 0.003937007874015748,
                "SHAPE_CONSTANT_WEIGHT": 0.003937007874015748,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.003937007874015748,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.007874015748031496,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.003937007874015748,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.003937007874015748,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.003937007874015748
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 5,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 8,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 7,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 7,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 6,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 4,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 7,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 6,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 8,
                "tf.pad(tensor, paddings, mode='REFLECT')": 8,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 6,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side='left')": 8,
                "tf.searchsorted(sorted_sequence, values, side='right')": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 8,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction='DESCENDING')": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 7,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 8,
                "PairCreationOperation": 6,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 7,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 4,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 2,
                "AXIS_CONSTANT_WEIGHT": 8,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 7,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "google_08",
        "description": "create a mask for sequences of the given lengths",
        "target_program": "tf.cast(tf.greater(tf.expand_dims(in1, 1), tf.range(5)), tf.int32)",
        "source": "Real task encountered by Googler, 4/11/2019",
        "constants": "[5]",
        "examples": {
            "inputs": "[[3, 4, 2, 1],]",
            "outputs": "[[1, 1, 1, 0, 0],    [1, 1, 1, 1, 0],    [1, 1, 0, 0, 0],    [1, 0, 0, 0, 0]]"
        },
        "completions": [
            "def transform(in1):\n    return tf.sequence_mask(in1)",
            "return tf.sequence_mask(in1, maxlen=5)\n",
            "def transform(in1):\n    return tf.sequence_mask(in1)",
            "def transform(in1):\n    return tf.sequence_mask(in1)",
            "def transform(in1):\n    return tf.sequence_mask(in1)\n",
            "return tf.sequence_mask(in1)\n",
            "return tf.sequence_mask(in1)",
            "return tf.sequence_mask(in1, maxlen=5)",
            "return tf.sequence_mask(in1)\n",
            "return tf.sequence_mask(in1, maxlen=5)\n",
            "return tf.sequence_mask(in1)\n",
            "\nreturn tf.sequence_mask(in1)\n",
            "return tf.sequence_mask(in1)",
            "def transform(in1):\n    return tf.sequence_mask(in1)\n",
            "return tf.sequence_mask(in1)\n",
            "return tf.sequence_mask(in1)",
            "return tf.sequence_mask(in1, maxlen=5)\n",
            "return tf.sequence_mask(in1)\n",
            "def transform(in1):\n    return tf.sequence_mask(in1)",
            "return tf.sequence_mask(in1)\n"
        ],
        "tf_operators": {
            "tf.sequence_mask": 20
        },
        "coverage_percentage": 0.0,
        "total_covered": 0,
        "total_in_target": 5,
        "parsed_constants": [
            [],
            [
                5
            ],
            [],
            [],
            [],
            [],
            [],
            [
                5
            ],
            [],
            [
                5
            ],
            [],
            [],
            [],
            [],
            [],
            [],
            [
                5
            ],
            [],
            [],
            []
        ],
        "all_constants": [
            5
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 20,
            "shape": 0,
            "tf_bool": 0,
            "provided": 4,
            "common": 0,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.005128205128205128,
                "tf.add(x, y)": 0.005128205128205128,
                "tf.add_n(inputs)": 0.005128205128205128,
                "tf.argmax(input, axis)": 0.005128205128205128,
                "tf.argmin(input, axis)": 0.005128205128205128,
                "tf.argsort(values, axis, stable=True)": 0.005128205128205128,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.005128205128205128,
                "tf.boolean_mask(tensor, mask)": 0.005128205128205128,
                "tf.broadcast_to(input, shape)": 0.005128205128205128,
                "tf.cast(x, dtype)": 0.005128205128205128,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.005128205128205128,
                "tf.concat(values, axis)": 0.005128205128205128,
                "tf.constant(value)": 0.005128205128205128,
                "tf.constant(value, dtype)": 0.005128205128205128,
                "tf.divide(x, y)": 0.005128205128205128,
                "tf.equal(x, y)": 0.005128205128205128,
                "tf.exp(x)": 0.005128205128205128,
                "tf.expand_dims(input, axis)": 0.005128205128205128,
                "tf.eye(num_rows)": 0.005128205128205128,
                "tf.eye(num_rows, num_columns)": 0.005128205128205128,
                "tf.eye(num_rows, dtype)": 0.005128205128205128,
                "tf.fill(dims, value)": 0.005128205128205128,
                "tf.gather(params, indices)": 0.005128205128205128,
                "tf.gather(params, indices, axis, batch_dims)": 0.005128205128205128,
                "tf.gather_nd(params, indices)": 0.005128205128205128,
                "tf.gather_nd(params, indices, batch_dims)": 0.005128205128205128,
                "tf.greater(x, y)": 0.005128205128205128,
                "tf.greater_equal(x, y)": 0.005128205128205128,
                "tf.math.bincount(arr)": 0.005128205128205128,
                "tf.math.ceil(x)": 0.005128205128205128,
                "tf.math.count_nonzero(input)": 0.005128205128205128,
                "tf.math.count_nonzero(input, axis)": 0.005128205128205128,
                "tf.math.cumsum(x, axis)": 0.005128205128205128,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.005128205128205128,
                "tf.math.divide_no_nan(x, y)": 0.005128205128205128,
                "tf.math.floor(x)": 0.005128205128205128,
                "tf.math.log(x)": 0.005128205128205128,
                "tf.math.logical_and(x, y)": 0.005128205128205128,
                "tf.math.logical_not(x)": 0.005128205128205128,
                "tf.math.logical_or(x, y)": 0.005128205128205128,
                "tf.math.logical_xor(x, y)": 0.005128205128205128,
                "tf.math.negative(x)": 0.005128205128205128,
                "tf.math.reciprocal(x)": 0.005128205128205128,
                "tf.math.reciprocal_no_nan(x)": 0.005128205128205128,
                "tf.math.segment_max(data, segment_ids)": 0.005128205128205128,
                "tf.math.segment_mean(data, segment_ids)": 0.005128205128205128,
                "tf.math.segment_min(data, segment_ids)": 0.005128205128205128,
                "tf.math.segment_prod(data, segment_ids)": 0.005128205128205128,
                "tf.math.segment_sum(data, segment_ids)": 0.005128205128205128,
                "tf.math.squared_difference(x, y)": 0.005128205128205128,
                "tf.math.top_k(input, k)": 0.005128205128205128,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.005128205128205128,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.005128205128205128,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.005128205128205128,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.005128205128205128,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.005128205128205128,
                "tf.matmul(a, b)": 0.005128205128205128,
                "tf.maximum(x, y)": 0.005128205128205128,
                "tf.minimum(x, y)": 0.005128205128205128,
                "tf.multiply(x, y)": 0.005128205128205128,
                "tf.not_equal(x, y)": 0.005128205128205128,
                "tf.one_hot(indices, depth)": 0.005128205128205128,
                "tf.ones(shape)": 0.005128205128205128,
                "tf.ones_like(input)": 0.005128205128205128,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.005128205128205128,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.005128205128205128,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.005128205128205128,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.005128205128205128,
                "tf.range(start)": 0.005128205128205128,
                "tf.range(start, limit, delta)": 0.005128205128205128,
                "tf.reduce_any(input_tensor, axis)": 0.005128205128205128,
                "tf.reduce_all(input_tensor, axis)": 0.005128205128205128,
                "tf.reduce_max(input_tensor)": 0.005128205128205128,
                "tf.reduce_max(input_tensor, axis)": 0.005128205128205128,
                "tf.reduce_mean(input_tensor)": 0.005128205128205128,
                "tf.reduce_mean(input_tensor, axis)": 0.005128205128205128,
                "tf.reduce_min(input_tensor)": 0.005128205128205128,
                "tf.reduce_min(input_tensor, axis)": 0.005128205128205128,
                "tf.reduce_prod(input_tensor, axis)": 0.005128205128205128,
                "tf.reduce_sum(input_tensor)": 0.005128205128205128,
                "tf.reduce_sum(input_tensor, axis)": 0.005128205128205128,
                "tf.repeat(input, repeats)": 0.005128205128205128,
                "tf.repeat(input, repeats, axis)": 0.005128205128205128,
                "tf.reshape(tensor, shape)": 0.005128205128205128,
                "tf.reverse(tensor, axis)": 0.005128205128205128,
                "tf.roll(input, shift, axis)": 0.005128205128205128,
                "tf.round(x)": 0.005128205128205128,
                "tf.scatter_nd(indices, updates, shape)": 0.005128205128205128,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.005128205128205128,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.005128205128205128,
                "tf.sequence_mask(lengths)": 0.08717948717948718,
                "tf.sequence_mask(lengths, maxlen)": 0.005128205128205128,
                "tf.shape(input)": 0.005128205128205128,
                "tf.sign(x)": 0.005128205128205128,
                "tf.sort(values, axis)": 0.005128205128205128,
                "tf.sort(values, axis, direction='DESCENDING')": 0.005128205128205128,
                "tf.sqrt(x)": 0.005128205128205128,
                "tf.square(x)": 0.005128205128205128,
                "tf.squeeze(input)": 0.005128205128205128,
                "tf.squeeze(input, axis)": 0.005128205128205128,
                "tf.stack(values, axis)": 0.005128205128205128,
                "tf.subtract(x, y)": 0.005128205128205128,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.005128205128205128,
                "tf.tensordot(a, b, axes)": 0.005128205128205128,
                "tf.tile(input, multiples)": 0.005128205128205128,
                "tf.transpose(a)": 0.005128205128205128,
                "tf.transpose(a, perm)": 0.005128205128205128,
                "tf.unique_with_counts(x)": 0.005128205128205128,
                "tf.unstack(value, axis)": 0.005128205128205128,
                "tf.where(condition)": 0.005128205128205128,
                "tf.where(condition, x, y)": 0.005128205128205128,
                "tf.zeros(shape)": 0.005128205128205128,
                "tf.zeros_like(input)": 0.005128205128205128,
                "tf.SparseTensor(indices, values, dense_shape)": 0.005128205128205128,
                "tf.sparse.add(a, b)": 0.005128205128205128,
                "tf.sparse.concat(axis, sp_inputs)": 0.005128205128205128,
                "tf.sparse.expand_dims(sp_input, axis)": 0.005128205128205128,
                "tf.sparse.from_dense(tensor)": 0.005128205128205128,
                "tf.sparse.maximum(sp_a, sp_b)": 0.005128205128205128,
                "tf.sparse.minimum(sp_a, sp_b)": 0.005128205128205128,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.005128205128205128,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.005128205128205128,
                "tf.sparse.reset_shape(sp_input)": 0.005128205128205128,
                "tf.sparse.reshape(sp_input, shape)": 0.005128205128205128,
                "tf.sparse.retain(sp_input, to_retain)": 0.005128205128205128,
                "tf.sparse.slice(sp_input, start, size)": 0.005128205128205128,
                "tf.sparse.split(sp_input, num_split, axis)": 0.005128205128205128,
                "tf.sparse.to_dense(sp_input)": 0.005128205128205128,
                "tf.sparse.to_dense(sp_input, default_value)": 0.005128205128205128,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.005128205128205128,
                "tf.sparse.transpose(sp_input)": 0.005128205128205128,
                "tf.sparse.transpose(sp_input, perm)": 0.005128205128205128,
                "IndexingAxis1Operation": 0.005128205128205128,
                "IndexingOperation": 0.005128205128205128,
                "PairCreationOperation": 0.005128205128205128,
                "SingletonTupleCreationOperation": 0.005128205128205128,
                "SlicingAxis0BothOperation": 0.005128205128205128,
                "SlicingAxis0LeftOperation": 0.005128205128205128,
                "SlicingAxis0RightOperation": 0.005128205128205128,
                "SlicingAxis1BothOperation": 0.005128205128205128,
                "SlicingAxis1LeftOperation": 0.005128205128205128,
                "SlicingAxis1RightOperation": 0.005128205128205128,
                "TripleCreationOperation": 0.005128205128205128,
                "PROVIDED_CONSTANT_WEIGHT": 0.02564102564102564,
                "COMMON_CONSTANT_WEIGHT": 0.005128205128205128,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.005128205128205128,
                "INPUT_VARIABLE_WEIGHT": 0.1076923076923077,
                "AXIS_CONSTANT_WEIGHT": 0.005128205128205128,
                "SHAPE_CONSTANT_WEIGHT": 0.005128205128205128,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.005128205128205128,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.005128205128205128,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.005128205128205128,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.005128205128205128,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.005128205128205128
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 8,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 8,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 8,
                "tf.pad(tensor, paddings, mode='REFLECT')": 8,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side='left')": 8,
                "tf.searchsorted(sorted_sequence, values, side='right')": 8,
                "tf.sequence_mask(lengths)": 4,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 8,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction='DESCENDING')": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 8,
                "PairCreationOperation": 8,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 5,
                "COMMON_CONSTANT_WEIGHT": 8,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 3,
                "AXIS_CONSTANT_WEIGHT": 8,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "google_09",
        "description": "sort the segments",
        "target_program": "tf.gather(in2, tf.argsort(in1, stable=True))",
        "source": "Real task encountered by Googler, 8/9/2019",
        "constants": "[]",
        "examples": {
            "inputs": "[[1, 1, 1, 0, 0, 2],[10, 20, 30, 14, 15, 26],]",
            "outputs": "[14, 15, 10, 20, 30, 26]"
        },
        "completions": [
            "sorted_indices = tf.argsort(in1)\nout = tf.gather(in2, sorted_indices)\nreturn out\n",
            "sorted_indices = tf.argsort(in1)\nreturn tf.gather(in2, sorted_indices)\n",
            "return tf.math.unsorted_segment_min(in2, in1, tf.reduce_max(in1)+1)\n",
            "def transform(in1, in2):\n    sorted_indices = tf.argsort(in1)\n    out1 = tf.gather(in2, sorted_indices)\n    return out1\n",
            "return tf.boolean_mask(in2, tf.argsort(in1))",
            "return tf.gather(in2, tf.argsort(in1))",
            "def transform(in1, in2):\n    segments = tf.argsort(in1)\n    sorted_values = tf.gather(in2, segments)\n    return sorted_values\n",
            "values = tf.gather(in2, tf.argsort(in1))\nreturn values\n",
            "return tf.gather(in2, tf.argsort(in1))",
            "segmented_data = tf.math.unsorted_segment_sum(in2, in1, 3)\nsorted_indices = tf.argsort(in1)\nreturn tf.gather(segmented_data, sorted_indices)\n",
            "return tf.math.unsorted_segment_max(in2, in1, 3)\n  ",
            "def transform(in1, in2):\n    sorted_indices = tf.argsort(in1)\n    return tf.gather(in2, sorted_indices)\n",
            "values = tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1)+1)\nsorted_values, _ = tf.sort(values)\nreturn sorted_values\n",
            "sorted_indices = tf.argsort(in1)\nsorted_values = tf.gather(in2, sorted_indices)\nreturn tf.scatter_nd(tf.expand_dims(tf.cast(tf.range(tf.size(in1)), tf.int32), 1), sorted_values, tf.shape(in2))\n",
            "indices = tf.argsort(in1)\nreturn tf.gather(in2, indices)\n",
            "return tf.gather_nd(tf.stack([in2, in1], axis=1), tf.argsort(in1))",
            "sorted_indices = tf.argsort(in1)\nreturn tf.gather(in2, sorted_indices)\n",
            "def transform(in1, in2):\n    sorted_indices = tf.argsort(in1)\n    return tf.gather(in2, sorted_indices)\n",
            "return tf.gather(in2, tf.argsort(in1))",
            "def transform(in1, in2):\n    indices = tf.argsort(in1)\n    out = tf.gather(in2, indices)\n    return out\n"
        ],
        "tf_operators": {
            "tf.gather": 15,
            "tf.argsort": 17,
            "tf.reduce_max": 2,
            "tf.math.unsorted_segment_min": 1,
            "tf.boolean_mask": 1,
            "tf.math.unsorted_segment_sum": 1,
            "tf.math.unsorted_segment_max": 2,
            "tf.sort": 1,
            "tf.shape": 1,
            "tf.scatter_nd": 1,
            "tf.range": 1,
            "tf.cast": 1,
            "tf.int32": 1,
            "tf.expand_dims": 1,
            "tf.size": 1,
            "tf.gather_nd": 1,
            "tf.stack": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 2,
        "total_in_target": 2,
        "parsed_constants": [
            [],
            [],
            [
                1
            ],
            [],
            [],
            [],
            [],
            [],
            [],
            [
                3
            ],
            [
                3
            ],
            [],
            [
                1
            ],
            [
                1
            ],
            [],
            [
                1
            ],
            [],
            [],
            [],
            []
        ],
        "all_constants": [
            1,
            3
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 50,
            "shape": 0,
            "tf_bool": 0,
            "provided": 2,
            "common": 4,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 1
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.004132231404958678,
                "tf.add(x, y)": 0.004132231404958678,
                "tf.add_n(inputs)": 0.004132231404958678,
                "tf.argmax(input, axis)": 0.004132231404958678,
                "tf.argmin(input, axis)": 0.004132231404958678,
                "tf.argsort(values, axis, stable=True)": 0.004132231404958678,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.004132231404958678,
                "tf.boolean_mask(tensor, mask)": 0.008264462809917356,
                "tf.broadcast_to(input, shape)": 0.004132231404958678,
                "tf.cast(x, dtype)": 0.008264462809917356,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.004132231404958678,
                "tf.concat(values, axis)": 0.004132231404958678,
                "tf.constant(value)": 0.004132231404958678,
                "tf.constant(value, dtype)": 0.004132231404958678,
                "tf.divide(x, y)": 0.004132231404958678,
                "tf.equal(x, y)": 0.004132231404958678,
                "tf.exp(x)": 0.004132231404958678,
                "tf.expand_dims(input, axis)": 0.008264462809917356,
                "tf.eye(num_rows)": 0.004132231404958678,
                "tf.eye(num_rows, num_columns)": 0.004132231404958678,
                "tf.eye(num_rows, dtype)": 0.004132231404958678,
                "tf.fill(dims, value)": 0.004132231404958678,
                "tf.gather(params, indices)": 0.06611570247933884,
                "tf.gather(params, indices, axis, batch_dims)": 0.004132231404958678,
                "tf.gather_nd(params, indices)": 0.008264462809917356,
                "tf.gather_nd(params, indices, batch_dims)": 0.004132231404958678,
                "tf.greater(x, y)": 0.004132231404958678,
                "tf.greater_equal(x, y)": 0.004132231404958678,
                "tf.math.bincount(arr)": 0.004132231404958678,
                "tf.math.ceil(x)": 0.004132231404958678,
                "tf.math.count_nonzero(input)": 0.004132231404958678,
                "tf.math.count_nonzero(input, axis)": 0.004132231404958678,
                "tf.math.cumsum(x, axis)": 0.004132231404958678,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.004132231404958678,
                "tf.math.divide_no_nan(x, y)": 0.004132231404958678,
                "tf.math.floor(x)": 0.004132231404958678,
                "tf.math.log(x)": 0.004132231404958678,
                "tf.math.logical_and(x, y)": 0.004132231404958678,
                "tf.math.logical_not(x)": 0.004132231404958678,
                "tf.math.logical_or(x, y)": 0.004132231404958678,
                "tf.math.logical_xor(x, y)": 0.004132231404958678,
                "tf.math.negative(x)": 0.004132231404958678,
                "tf.math.reciprocal(x)": 0.004132231404958678,
                "tf.math.reciprocal_no_nan(x)": 0.004132231404958678,
                "tf.math.segment_max(data, segment_ids)": 0.004132231404958678,
                "tf.math.segment_mean(data, segment_ids)": 0.004132231404958678,
                "tf.math.segment_min(data, segment_ids)": 0.004132231404958678,
                "tf.math.segment_prod(data, segment_ids)": 0.004132231404958678,
                "tf.math.segment_sum(data, segment_ids)": 0.004132231404958678,
                "tf.math.squared_difference(x, y)": 0.004132231404958678,
                "tf.math.top_k(input, k)": 0.004132231404958678,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.012396694214876033,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.004132231404958678,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.008264462809917356,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.004132231404958678,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.008264462809917356,
                "tf.matmul(a, b)": 0.004132231404958678,
                "tf.maximum(x, y)": 0.004132231404958678,
                "tf.minimum(x, y)": 0.004132231404958678,
                "tf.multiply(x, y)": 0.004132231404958678,
                "tf.not_equal(x, y)": 0.004132231404958678,
                "tf.one_hot(indices, depth)": 0.004132231404958678,
                "tf.ones(shape)": 0.004132231404958678,
                "tf.ones_like(input)": 0.004132231404958678,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.004132231404958678,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.004132231404958678,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.004132231404958678,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.004132231404958678,
                "tf.range(start)": 0.008264462809917356,
                "tf.range(start, limit, delta)": 0.004132231404958678,
                "tf.reduce_any(input_tensor, axis)": 0.004132231404958678,
                "tf.reduce_all(input_tensor, axis)": 0.004132231404958678,
                "tf.reduce_max(input_tensor)": 0.012396694214876033,
                "tf.reduce_max(input_tensor, axis)": 0.004132231404958678,
                "tf.reduce_mean(input_tensor)": 0.004132231404958678,
                "tf.reduce_mean(input_tensor, axis)": 0.004132231404958678,
                "tf.reduce_min(input_tensor)": 0.004132231404958678,
                "tf.reduce_min(input_tensor, axis)": 0.004132231404958678,
                "tf.reduce_prod(input_tensor, axis)": 0.004132231404958678,
                "tf.reduce_sum(input_tensor)": 0.004132231404958678,
                "tf.reduce_sum(input_tensor, axis)": 0.004132231404958678,
                "tf.repeat(input, repeats)": 0.004132231404958678,
                "tf.repeat(input, repeats, axis)": 0.004132231404958678,
                "tf.reshape(tensor, shape)": 0.004132231404958678,
                "tf.reverse(tensor, axis)": 0.004132231404958678,
                "tf.roll(input, shift, axis)": 0.004132231404958678,
                "tf.round(x)": 0.004132231404958678,
                "tf.scatter_nd(indices, updates, shape)": 0.008264462809917356,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.004132231404958678,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.004132231404958678,
                "tf.sequence_mask(lengths)": 0.004132231404958678,
                "tf.sequence_mask(lengths, maxlen)": 0.004132231404958678,
                "tf.shape(input)": 0.008264462809917356,
                "tf.sign(x)": 0.004132231404958678,
                "tf.sort(values, axis)": 0.004132231404958678,
                "tf.sort(values, axis, direction='DESCENDING')": 0.004132231404958678,
                "tf.sqrt(x)": 0.004132231404958678,
                "tf.square(x)": 0.004132231404958678,
                "tf.squeeze(input)": 0.004132231404958678,
                "tf.squeeze(input, axis)": 0.004132231404958678,
                "tf.stack(values, axis)": 0.008264462809917356,
                "tf.subtract(x, y)": 0.004132231404958678,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.004132231404958678,
                "tf.tensordot(a, b, axes)": 0.004132231404958678,
                "tf.tile(input, multiples)": 0.004132231404958678,
                "tf.transpose(a)": 0.004132231404958678,
                "tf.transpose(a, perm)": 0.004132231404958678,
                "tf.unique_with_counts(x)": 0.004132231404958678,
                "tf.unstack(value, axis)": 0.004132231404958678,
                "tf.where(condition)": 0.004132231404958678,
                "tf.where(condition, x, y)": 0.004132231404958678,
                "tf.zeros(shape)": 0.004132231404958678,
                "tf.zeros_like(input)": 0.004132231404958678,
                "tf.SparseTensor(indices, values, dense_shape)": 0.004132231404958678,
                "tf.sparse.add(a, b)": 0.004132231404958678,
                "tf.sparse.concat(axis, sp_inputs)": 0.004132231404958678,
                "tf.sparse.expand_dims(sp_input, axis)": 0.004132231404958678,
                "tf.sparse.from_dense(tensor)": 0.004132231404958678,
                "tf.sparse.maximum(sp_a, sp_b)": 0.004132231404958678,
                "tf.sparse.minimum(sp_a, sp_b)": 0.004132231404958678,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.004132231404958678,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.004132231404958678,
                "tf.sparse.reset_shape(sp_input)": 0.004132231404958678,
                "tf.sparse.reshape(sp_input, shape)": 0.004132231404958678,
                "tf.sparse.retain(sp_input, to_retain)": 0.004132231404958678,
                "tf.sparse.slice(sp_input, start, size)": 0.004132231404958678,
                "tf.sparse.split(sp_input, num_split, axis)": 0.004132231404958678,
                "tf.sparse.to_dense(sp_input)": 0.004132231404958678,
                "tf.sparse.to_dense(sp_input, default_value)": 0.004132231404958678,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.004132231404958678,
                "tf.sparse.transpose(sp_input)": 0.004132231404958678,
                "tf.sparse.transpose(sp_input, perm)": 0.004132231404958678,
                "IndexingAxis1Operation": 0.004132231404958678,
                "IndexingOperation": 0.004132231404958678,
                "PairCreationOperation": 0.008264462809917356,
                "SingletonTupleCreationOperation": 0.004132231404958678,
                "SlicingAxis0BothOperation": 0.004132231404958678,
                "SlicingAxis0LeftOperation": 0.004132231404958678,
                "SlicingAxis0RightOperation": 0.004132231404958678,
                "SlicingAxis1BothOperation": 0.004132231404958678,
                "SlicingAxis1LeftOperation": 0.004132231404958678,
                "SlicingAxis1RightOperation": 0.004132231404958678,
                "TripleCreationOperation": 0.004132231404958678,
                "PROVIDED_CONSTANT_WEIGHT": 0.012396694214876033,
                "COMMON_CONSTANT_WEIGHT": 0.02066115702479339,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.004132231404958678,
                "INPUT_VARIABLE_WEIGHT": 0.21074380165289255,
                "AXIS_CONSTANT_WEIGHT": 0.004132231404958678,
                "SHAPE_CONSTANT_WEIGHT": 0.004132231404958678,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.004132231404958678,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.008264462809917356,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.004132231404958678,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.004132231404958678,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.004132231404958678
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 7,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 7,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 7,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 4,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 7,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 6,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 7,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 8,
                "tf.pad(tensor, paddings, mode='REFLECT')": 8,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 8,
                "tf.range(start)": 7,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 6,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 7,
                "tf.searchsorted(sorted_sequence, values, side='left')": 8,
                "tf.searchsorted(sorted_sequence, values, side='right')": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 7,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction='DESCENDING')": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 7,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 8,
                "PairCreationOperation": 7,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 6,
                "COMMON_CONSTANT_WEIGHT": 6,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 2,
                "AXIS_CONSTANT_WEIGHT": 8,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 7,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "google_11",
        "description": "count the number of elements greater than 0 in each row",
        "target_program": "tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)",
        "source": "Real task encountered by Googler, 8/26/2019",
        "constants": "[]",
        "examples": {
            "inputs": "[[[1.0, 0.3, -4.2, 0.0, 2.1, 0.4], [-0.1, 0.0, 1.4, -1.0, 0.4, 0.0], [0.1, 0.0, 0.7, -0.3, 0.5, -0.1], [1.4, 2.5, 0.3, 0.01, 0.0, 1.2]],]",
            "outputs": "[4, 2, 3, 5]"
        },
        "completions": [
            "def transform(in1):\n    return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n",
            "return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n",
            "return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n",
            "return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n",
            "return tf.reduce_sum(tf.cast(tf.greater(in1, 0.0), tf.int32), axis=1)\n",
            "return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n",
            "return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n",
            "return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n",
            "return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n",
            "return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n",
            "return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n",
            "return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n",
            "return tf.reduce_sum(tf.cast(tf.greater(in1, 0.0), tf.int32), axis=1)\n",
            "return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n",
            "return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n",
            "return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n",
            "return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)",
            "return tf.cast(tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1), tf.int32)\n",
            "return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n",
            "return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n"
        ],
        "tf_operators": {
            "tf.cast": 15,
            "tf.reduce_sum": 15,
            "tf.greater": 20,
            "tf.int32": 15,
            "tf.math.count_nonzero": 5
        },
        "coverage_percentage": 100.0,
        "total_covered": 4,
        "total_in_target": 4,
        "parsed_constants": [
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ]
        ],
        "all_constants": [
            0,
            1
        ],
        "constant_counts": [
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 2,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 20,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 38,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 16
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.0037735849056603774,
                "tf.add(x, y)": 0.0037735849056603774,
                "tf.add_n(inputs)": 0.0037735849056603774,
                "tf.argmax(input, axis)": 0.0037735849056603774,
                "tf.argmin(input, axis)": 0.0037735849056603774,
                "tf.argsort(values, axis, stable=True)": 0.0037735849056603774,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.0037735849056603774,
                "tf.boolean_mask(tensor, mask)": 0.0037735849056603774,
                "tf.broadcast_to(input, shape)": 0.0037735849056603774,
                "tf.cast(x, dtype)": 0.06415094339622641,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.0037735849056603774,
                "tf.concat(values, axis)": 0.0037735849056603774,
                "tf.constant(value)": 0.0037735849056603774,
                "tf.constant(value, dtype)": 0.0037735849056603774,
                "tf.divide(x, y)": 0.0037735849056603774,
                "tf.equal(x, y)": 0.0037735849056603774,
                "tf.exp(x)": 0.0037735849056603774,
                "tf.expand_dims(input, axis)": 0.0037735849056603774,
                "tf.eye(num_rows)": 0.0037735849056603774,
                "tf.eye(num_rows, num_columns)": 0.0037735849056603774,
                "tf.eye(num_rows, dtype)": 0.0037735849056603774,
                "tf.fill(dims, value)": 0.0037735849056603774,
                "tf.gather(params, indices)": 0.0037735849056603774,
                "tf.gather(params, indices, axis, batch_dims)": 0.0037735849056603774,
                "tf.gather_nd(params, indices)": 0.0037735849056603774,
                "tf.gather_nd(params, indices, batch_dims)": 0.0037735849056603774,
                "tf.greater(x, y)": 0.07924528301886792,
                "tf.greater_equal(x, y)": 0.0037735849056603774,
                "tf.math.bincount(arr)": 0.0037735849056603774,
                "tf.math.ceil(x)": 0.0037735849056603774,
                "tf.math.count_nonzero(input)": 0.0037735849056603774,
                "tf.math.count_nonzero(input, axis)": 0.0037735849056603774,
                "tf.math.cumsum(x, axis)": 0.0037735849056603774,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.0037735849056603774,
                "tf.math.divide_no_nan(x, y)": 0.0037735849056603774,
                "tf.math.floor(x)": 0.0037735849056603774,
                "tf.math.log(x)": 0.0037735849056603774,
                "tf.math.logical_and(x, y)": 0.0037735849056603774,
                "tf.math.logical_not(x)": 0.0037735849056603774,
                "tf.math.logical_or(x, y)": 0.0037735849056603774,
                "tf.math.logical_xor(x, y)": 0.0037735849056603774,
                "tf.math.negative(x)": 0.0037735849056603774,
                "tf.math.reciprocal(x)": 0.0037735849056603774,
                "tf.math.reciprocal_no_nan(x)": 0.0037735849056603774,
                "tf.math.segment_max(data, segment_ids)": 0.0037735849056603774,
                "tf.math.segment_mean(data, segment_ids)": 0.0037735849056603774,
                "tf.math.segment_min(data, segment_ids)": 0.0037735849056603774,
                "tf.math.segment_prod(data, segment_ids)": 0.0037735849056603774,
                "tf.math.segment_sum(data, segment_ids)": 0.0037735849056603774,
                "tf.math.squared_difference(x, y)": 0.0037735849056603774,
                "tf.math.top_k(input, k)": 0.0037735849056603774,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.0037735849056603774,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.0037735849056603774,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.0037735849056603774,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.0037735849056603774,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.0037735849056603774,
                "tf.matmul(a, b)": 0.0037735849056603774,
                "tf.maximum(x, y)": 0.0037735849056603774,
                "tf.minimum(x, y)": 0.0037735849056603774,
                "tf.multiply(x, y)": 0.0037735849056603774,
                "tf.not_equal(x, y)": 0.0037735849056603774,
                "tf.one_hot(indices, depth)": 0.0037735849056603774,
                "tf.ones(shape)": 0.0037735849056603774,
                "tf.ones_like(input)": 0.0037735849056603774,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.0037735849056603774,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.0037735849056603774,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.0037735849056603774,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.0037735849056603774,
                "tf.range(start)": 0.0037735849056603774,
                "tf.range(start, limit, delta)": 0.0037735849056603774,
                "tf.reduce_any(input_tensor, axis)": 0.0037735849056603774,
                "tf.reduce_all(input_tensor, axis)": 0.0037735849056603774,
                "tf.reduce_max(input_tensor)": 0.0037735849056603774,
                "tf.reduce_max(input_tensor, axis)": 0.0037735849056603774,
                "tf.reduce_mean(input_tensor)": 0.0037735849056603774,
                "tf.reduce_mean(input_tensor, axis)": 0.0037735849056603774,
                "tf.reduce_min(input_tensor)": 0.0037735849056603774,
                "tf.reduce_min(input_tensor, axis)": 0.0037735849056603774,
                "tf.reduce_prod(input_tensor, axis)": 0.0037735849056603774,
                "tf.reduce_sum(input_tensor)": 0.0037735849056603774,
                "tf.reduce_sum(input_tensor, axis)": 0.0037735849056603774,
                "tf.repeat(input, repeats)": 0.0037735849056603774,
                "tf.repeat(input, repeats, axis)": 0.0037735849056603774,
                "tf.reshape(tensor, shape)": 0.0037735849056603774,
                "tf.reverse(tensor, axis)": 0.0037735849056603774,
                "tf.roll(input, shift, axis)": 0.0037735849056603774,
                "tf.round(x)": 0.0037735849056603774,
                "tf.scatter_nd(indices, updates, shape)": 0.0037735849056603774,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.0037735849056603774,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.0037735849056603774,
                "tf.sequence_mask(lengths)": 0.0037735849056603774,
                "tf.sequence_mask(lengths, maxlen)": 0.0037735849056603774,
                "tf.shape(input)": 0.0037735849056603774,
                "tf.sign(x)": 0.0037735849056603774,
                "tf.sort(values, axis)": 0.0037735849056603774,
                "tf.sort(values, axis, direction='DESCENDING')": 0.0037735849056603774,
                "tf.sqrt(x)": 0.0037735849056603774,
                "tf.square(x)": 0.0037735849056603774,
                "tf.squeeze(input)": 0.0037735849056603774,
                "tf.squeeze(input, axis)": 0.0037735849056603774,
                "tf.stack(values, axis)": 0.0037735849056603774,
                "tf.subtract(x, y)": 0.0037735849056603774,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.0037735849056603774,
                "tf.tensordot(a, b, axes)": 0.0037735849056603774,
                "tf.tile(input, multiples)": 0.0037735849056603774,
                "tf.transpose(a)": 0.0037735849056603774,
                "tf.transpose(a, perm)": 0.0037735849056603774,
                "tf.unique_with_counts(x)": 0.0037735849056603774,
                "tf.unstack(value, axis)": 0.0037735849056603774,
                "tf.where(condition)": 0.0037735849056603774,
                "tf.where(condition, x, y)": 0.0037735849056603774,
                "tf.zeros(shape)": 0.0037735849056603774,
                "tf.zeros_like(input)": 0.0037735849056603774,
                "tf.SparseTensor(indices, values, dense_shape)": 0.0037735849056603774,
                "tf.sparse.add(a, b)": 0.0037735849056603774,
                "tf.sparse.concat(axis, sp_inputs)": 0.0037735849056603774,
                "tf.sparse.expand_dims(sp_input, axis)": 0.0037735849056603774,
                "tf.sparse.from_dense(tensor)": 0.0037735849056603774,
                "tf.sparse.maximum(sp_a, sp_b)": 0.0037735849056603774,
                "tf.sparse.minimum(sp_a, sp_b)": 0.0037735849056603774,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.0037735849056603774,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.0037735849056603774,
                "tf.sparse.reset_shape(sp_input)": 0.0037735849056603774,
                "tf.sparse.reshape(sp_input, shape)": 0.0037735849056603774,
                "tf.sparse.retain(sp_input, to_retain)": 0.0037735849056603774,
                "tf.sparse.slice(sp_input, start, size)": 0.0037735849056603774,
                "tf.sparse.split(sp_input, num_split, axis)": 0.0037735849056603774,
                "tf.sparse.to_dense(sp_input)": 0.0037735849056603774,
                "tf.sparse.to_dense(sp_input, default_value)": 0.0037735849056603774,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.0037735849056603774,
                "tf.sparse.transpose(sp_input)": 0.0037735849056603774,
                "tf.sparse.transpose(sp_input, perm)": 0.0037735849056603774,
                "IndexingAxis1Operation": 0.0037735849056603774,
                "IndexingOperation": 0.0037735849056603774,
                "PairCreationOperation": 0.0037735849056603774,
                "SingletonTupleCreationOperation": 0.0037735849056603774,
                "SlicingAxis0BothOperation": 0.0037735849056603774,
                "SlicingAxis0LeftOperation": 0.0037735849056603774,
                "SlicingAxis0RightOperation": 0.0037735849056603774,
                "SlicingAxis1BothOperation": 0.0037735849056603774,
                "SlicingAxis1LeftOperation": 0.0037735849056603774,
                "SlicingAxis1RightOperation": 0.0037735849056603774,
                "TripleCreationOperation": 0.0037735849056603774,
                "PROVIDED_CONSTANT_WEIGHT": 0.0037735849056603774,
                "COMMON_CONSTANT_WEIGHT": 0.1471698113207547,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.0037735849056603774,
                "INPUT_VARIABLE_WEIGHT": 0.07924528301886792,
                "AXIS_CONSTANT_WEIGHT": 0.0037735849056603774,
                "SHAPE_CONSTANT_WEIGHT": 0.0037735849056603774,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.0037735849056603774,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.06415094339622641,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.0037735849056603774,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.0037735849056603774,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.0037735849056603774
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 4,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 8,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 4,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 8,
                "tf.pad(tensor, paddings, mode='REFLECT')": 8,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side='left')": 8,
                "tf.searchsorted(sorted_sequence, values, side='right')": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 8,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction='DESCENDING')": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 8,
                "PairCreationOperation": 8,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 3,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 4,
                "AXIS_CONSTANT_WEIGHT": 8,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 4,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "google_12",
        "description": "identify elements between 0 and 1",
        "target_program": "tf.cast(tf.logical_and(0 <= in1, in1 <= 1), tf.int32)",
        "source": "Real task encountered by Googler, 8/26/2019",
        "constants": "[]",
        "examples": {
            "inputs": "[[[1.0, 0.3, -4.2, 0.0, 2.1], [-0.1, 0.0, 1.4, -1.0, 0.4], [0.1, 0.0, 0.7, -0.3, 0.5], [1.4, 2.5, 0.3, -0.1, 0.0]],]",
            "outputs": "[[1, 1, 0, 1, 0],    [0, 1, 0, 0, 1],    [1, 1, 1, 0, 1],    [0, 0, 1, 0, 1]]"
        },
        "completions": [
            "return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))\n",
            "return tf.cast(tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1)), tf.int32)",
            "return tf.cast(tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1)), tf.int32)",
            "return tf.cast(tf.logical_and(tf.greater_equal(in1, 0), tf.less(in1, 1)), tf.int32)",
            "return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))\n",
            "result = tf.cast(tf.logical_and(in1 >= 0, in1 <= 1), tf.int32)\nreturn result\n",
            "return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))",
            "return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))\n",
            "return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))\n",
            "return tf.cast(tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1)), tf.int32)",
            "return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))\n",
            "return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))\n",
            "return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))\n",
            "return tf.cast(tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1)), tf.int32)",
            "return tf.cast((tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))), tf.int32)",
            "return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))",
            "return tf.where(tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1)), 1, 0)\n",
            "return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))\n",
            "return tf.cast(tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1)), tf.int32)",
            "return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))"
        ],
        "tf_operators": {
            "tf.greater_equal": 19,
            "tf.less_equal": 18,
            "tf.logical_and": 20,
            "tf.cast": 8,
            "tf.int32": 8,
            "tf.less": 1,
            "tf.where": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 3,
        "total_in_target": 3,
        "parsed_constants": [
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1,
                1,
                0
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ]
        ],
        "all_constants": [
            0,
            1
        ],
        "constant_counts": [
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 40,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 42,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 8
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.003663003663003663,
                "tf.add(x, y)": 0.003663003663003663,
                "tf.add_n(inputs)": 0.003663003663003663,
                "tf.argmax(input, axis)": 0.003663003663003663,
                "tf.argmin(input, axis)": 0.003663003663003663,
                "tf.argsort(values, axis, stable=True)": 0.003663003663003663,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.003663003663003663,
                "tf.boolean_mask(tensor, mask)": 0.003663003663003663,
                "tf.broadcast_to(input, shape)": 0.003663003663003663,
                "tf.cast(x, dtype)": 0.03296703296703297,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.003663003663003663,
                "tf.concat(values, axis)": 0.003663003663003663,
                "tf.constant(value)": 0.003663003663003663,
                "tf.constant(value, dtype)": 0.003663003663003663,
                "tf.divide(x, y)": 0.003663003663003663,
                "tf.equal(x, y)": 0.003663003663003663,
                "tf.exp(x)": 0.003663003663003663,
                "tf.expand_dims(input, axis)": 0.003663003663003663,
                "tf.eye(num_rows)": 0.003663003663003663,
                "tf.eye(num_rows, num_columns)": 0.003663003663003663,
                "tf.eye(num_rows, dtype)": 0.003663003663003663,
                "tf.fill(dims, value)": 0.003663003663003663,
                "tf.gather(params, indices)": 0.003663003663003663,
                "tf.gather(params, indices, axis, batch_dims)": 0.003663003663003663,
                "tf.gather_nd(params, indices)": 0.003663003663003663,
                "tf.gather_nd(params, indices, batch_dims)": 0.003663003663003663,
                "tf.greater(x, y)": 0.003663003663003663,
                "tf.greater_equal(x, y)": 0.07326007326007326,
                "tf.math.bincount(arr)": 0.003663003663003663,
                "tf.math.ceil(x)": 0.003663003663003663,
                "tf.math.count_nonzero(input)": 0.003663003663003663,
                "tf.math.count_nonzero(input, axis)": 0.003663003663003663,
                "tf.math.cumsum(x, axis)": 0.003663003663003663,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.003663003663003663,
                "tf.math.divide_no_nan(x, y)": 0.003663003663003663,
                "tf.math.floor(x)": 0.003663003663003663,
                "tf.math.log(x)": 0.003663003663003663,
                "tf.math.logical_and(x, y)": 0.003663003663003663,
                "tf.math.logical_not(x)": 0.003663003663003663,
                "tf.math.logical_or(x, y)": 0.003663003663003663,
                "tf.math.logical_xor(x, y)": 0.003663003663003663,
                "tf.math.negative(x)": 0.003663003663003663,
                "tf.math.reciprocal(x)": 0.003663003663003663,
                "tf.math.reciprocal_no_nan(x)": 0.003663003663003663,
                "tf.math.segment_max(data, segment_ids)": 0.003663003663003663,
                "tf.math.segment_mean(data, segment_ids)": 0.003663003663003663,
                "tf.math.segment_min(data, segment_ids)": 0.003663003663003663,
                "tf.math.segment_prod(data, segment_ids)": 0.003663003663003663,
                "tf.math.segment_sum(data, segment_ids)": 0.003663003663003663,
                "tf.math.squared_difference(x, y)": 0.003663003663003663,
                "tf.math.top_k(input, k)": 0.003663003663003663,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.003663003663003663,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.003663003663003663,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.003663003663003663,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.003663003663003663,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.003663003663003663,
                "tf.matmul(a, b)": 0.003663003663003663,
                "tf.maximum(x, y)": 0.003663003663003663,
                "tf.minimum(x, y)": 0.003663003663003663,
                "tf.multiply(x, y)": 0.003663003663003663,
                "tf.not_equal(x, y)": 0.003663003663003663,
                "tf.one_hot(indices, depth)": 0.003663003663003663,
                "tf.ones(shape)": 0.003663003663003663,
                "tf.ones_like(input)": 0.003663003663003663,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.003663003663003663,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.003663003663003663,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.003663003663003663,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.003663003663003663,
                "tf.range(start)": 0.003663003663003663,
                "tf.range(start, limit, delta)": 0.003663003663003663,
                "tf.reduce_any(input_tensor, axis)": 0.003663003663003663,
                "tf.reduce_all(input_tensor, axis)": 0.003663003663003663,
                "tf.reduce_max(input_tensor)": 0.003663003663003663,
                "tf.reduce_max(input_tensor, axis)": 0.003663003663003663,
                "tf.reduce_mean(input_tensor)": 0.003663003663003663,
                "tf.reduce_mean(input_tensor, axis)": 0.003663003663003663,
                "tf.reduce_min(input_tensor)": 0.003663003663003663,
                "tf.reduce_min(input_tensor, axis)": 0.003663003663003663,
                "tf.reduce_prod(input_tensor, axis)": 0.003663003663003663,
                "tf.reduce_sum(input_tensor)": 0.003663003663003663,
                "tf.reduce_sum(input_tensor, axis)": 0.003663003663003663,
                "tf.repeat(input, repeats)": 0.003663003663003663,
                "tf.repeat(input, repeats, axis)": 0.003663003663003663,
                "tf.reshape(tensor, shape)": 0.003663003663003663,
                "tf.reverse(tensor, axis)": 0.003663003663003663,
                "tf.roll(input, shift, axis)": 0.003663003663003663,
                "tf.round(x)": 0.003663003663003663,
                "tf.scatter_nd(indices, updates, shape)": 0.003663003663003663,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.003663003663003663,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.003663003663003663,
                "tf.sequence_mask(lengths)": 0.003663003663003663,
                "tf.sequence_mask(lengths, maxlen)": 0.003663003663003663,
                "tf.shape(input)": 0.003663003663003663,
                "tf.sign(x)": 0.003663003663003663,
                "tf.sort(values, axis)": 0.003663003663003663,
                "tf.sort(values, axis, direction='DESCENDING')": 0.003663003663003663,
                "tf.sqrt(x)": 0.003663003663003663,
                "tf.square(x)": 0.003663003663003663,
                "tf.squeeze(input)": 0.003663003663003663,
                "tf.squeeze(input, axis)": 0.003663003663003663,
                "tf.stack(values, axis)": 0.003663003663003663,
                "tf.subtract(x, y)": 0.003663003663003663,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.003663003663003663,
                "tf.tensordot(a, b, axes)": 0.003663003663003663,
                "tf.tile(input, multiples)": 0.003663003663003663,
                "tf.transpose(a)": 0.003663003663003663,
                "tf.transpose(a, perm)": 0.003663003663003663,
                "tf.unique_with_counts(x)": 0.003663003663003663,
                "tf.unstack(value, axis)": 0.003663003663003663,
                "tf.where(condition)": 0.003663003663003663,
                "tf.where(condition, x, y)": 0.007326007326007326,
                "tf.zeros(shape)": 0.003663003663003663,
                "tf.zeros_like(input)": 0.003663003663003663,
                "tf.SparseTensor(indices, values, dense_shape)": 0.003663003663003663,
                "tf.sparse.add(a, b)": 0.003663003663003663,
                "tf.sparse.concat(axis, sp_inputs)": 0.003663003663003663,
                "tf.sparse.expand_dims(sp_input, axis)": 0.003663003663003663,
                "tf.sparse.from_dense(tensor)": 0.003663003663003663,
                "tf.sparse.maximum(sp_a, sp_b)": 0.003663003663003663,
                "tf.sparse.minimum(sp_a, sp_b)": 0.003663003663003663,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.003663003663003663,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.003663003663003663,
                "tf.sparse.reset_shape(sp_input)": 0.003663003663003663,
                "tf.sparse.reshape(sp_input, shape)": 0.003663003663003663,
                "tf.sparse.retain(sp_input, to_retain)": 0.003663003663003663,
                "tf.sparse.slice(sp_input, start, size)": 0.003663003663003663,
                "tf.sparse.split(sp_input, num_split, axis)": 0.003663003663003663,
                "tf.sparse.to_dense(sp_input)": 0.003663003663003663,
                "tf.sparse.to_dense(sp_input, default_value)": 0.003663003663003663,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.003663003663003663,
                "tf.sparse.transpose(sp_input)": 0.003663003663003663,
                "tf.sparse.transpose(sp_input, perm)": 0.003663003663003663,
                "IndexingAxis1Operation": 0.003663003663003663,
                "IndexingOperation": 0.003663003663003663,
                "PairCreationOperation": 0.003663003663003663,
                "SingletonTupleCreationOperation": 0.003663003663003663,
                "SlicingAxis0BothOperation": 0.003663003663003663,
                "SlicingAxis0LeftOperation": 0.003663003663003663,
                "SlicingAxis0RightOperation": 0.003663003663003663,
                "SlicingAxis1BothOperation": 0.003663003663003663,
                "SlicingAxis1LeftOperation": 0.003663003663003663,
                "SlicingAxis1RightOperation": 0.003663003663003663,
                "TripleCreationOperation": 0.003663003663003663,
                "PROVIDED_CONSTANT_WEIGHT": 0.003663003663003663,
                "COMMON_CONSTANT_WEIGHT": 0.1575091575091575,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.003663003663003663,
                "INPUT_VARIABLE_WEIGHT": 0.15018315018315018,
                "AXIS_CONSTANT_WEIGHT": 0.003663003663003663,
                "SHAPE_CONSTANT_WEIGHT": 0.003663003663003663,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.003663003663003663,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.03296703296703297,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.003663003663003663,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.003663003663003663,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.003663003663003663
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 5,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 8,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 4,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 8,
                "tf.pad(tensor, paddings, mode='REFLECT')": 8,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side='left')": 8,
                "tf.searchsorted(sorted_sequence, values, side='right')": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 8,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction='DESCENDING')": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 7,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 8,
                "PairCreationOperation": 8,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 3,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 3,
                "AXIS_CONSTANT_WEIGHT": 8,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 5,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "google_13",
        "description": "Concatenate batches of sequences",
        "target_program": "tf.concat([in1, in2], axis=1)",
        "source": "Real task encountered by Googler, 9/13/2019",
        "constants": "[]",
        "examples": {
            "inputs": "[[[1, 2], [10, 20]],[[3, 4, 5], [30, 40, 50]],]",
            "outputs": "[[1, 2, 3, 4, 5], [10, 20, 30, 40, 50]]"
        },
        "completions": [
            "return tf.concat([in1, in2], axis=1)\n",
            "import tensorflow as tf\n\ndef transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=1)\n",
            "output = tf.concat([in1, in2], axis=1)\nreturn output\n",
            "return tf.concat([in1, in2], axis=-1)\n",
            "return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=-1)\n",
            "return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=1)"
        ],
        "tf_operators": {
            "tf.concat": 20
        },
        "coverage_percentage": 100.0,
        "total_covered": 1,
        "total_in_target": 1,
        "parsed_constants": [
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                -1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                -1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ]
        ],
        "all_constants": [
            1,
            -1
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 40,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 20,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.00425531914893617,
                "tf.add(x, y)": 0.00425531914893617,
                "tf.add_n(inputs)": 0.00425531914893617,
                "tf.argmax(input, axis)": 0.00425531914893617,
                "tf.argmin(input, axis)": 0.00425531914893617,
                "tf.argsort(values, axis, stable=True)": 0.00425531914893617,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.00425531914893617,
                "tf.boolean_mask(tensor, mask)": 0.00425531914893617,
                "tf.broadcast_to(input, shape)": 0.00425531914893617,
                "tf.cast(x, dtype)": 0.00425531914893617,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.00425531914893617,
                "tf.concat(values, axis)": 0.08936170212765958,
                "tf.constant(value)": 0.00425531914893617,
                "tf.constant(value, dtype)": 0.00425531914893617,
                "tf.divide(x, y)": 0.00425531914893617,
                "tf.equal(x, y)": 0.00425531914893617,
                "tf.exp(x)": 0.00425531914893617,
                "tf.expand_dims(input, axis)": 0.00425531914893617,
                "tf.eye(num_rows)": 0.00425531914893617,
                "tf.eye(num_rows, num_columns)": 0.00425531914893617,
                "tf.eye(num_rows, dtype)": 0.00425531914893617,
                "tf.fill(dims, value)": 0.00425531914893617,
                "tf.gather(params, indices)": 0.00425531914893617,
                "tf.gather(params, indices, axis, batch_dims)": 0.00425531914893617,
                "tf.gather_nd(params, indices)": 0.00425531914893617,
                "tf.gather_nd(params, indices, batch_dims)": 0.00425531914893617,
                "tf.greater(x, y)": 0.00425531914893617,
                "tf.greater_equal(x, y)": 0.00425531914893617,
                "tf.math.bincount(arr)": 0.00425531914893617,
                "tf.math.ceil(x)": 0.00425531914893617,
                "tf.math.count_nonzero(input)": 0.00425531914893617,
                "tf.math.count_nonzero(input, axis)": 0.00425531914893617,
                "tf.math.cumsum(x, axis)": 0.00425531914893617,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.00425531914893617,
                "tf.math.divide_no_nan(x, y)": 0.00425531914893617,
                "tf.math.floor(x)": 0.00425531914893617,
                "tf.math.log(x)": 0.00425531914893617,
                "tf.math.logical_and(x, y)": 0.00425531914893617,
                "tf.math.logical_not(x)": 0.00425531914893617,
                "tf.math.logical_or(x, y)": 0.00425531914893617,
                "tf.math.logical_xor(x, y)": 0.00425531914893617,
                "tf.math.negative(x)": 0.00425531914893617,
                "tf.math.reciprocal(x)": 0.00425531914893617,
                "tf.math.reciprocal_no_nan(x)": 0.00425531914893617,
                "tf.math.segment_max(data, segment_ids)": 0.00425531914893617,
                "tf.math.segment_mean(data, segment_ids)": 0.00425531914893617,
                "tf.math.segment_min(data, segment_ids)": 0.00425531914893617,
                "tf.math.segment_prod(data, segment_ids)": 0.00425531914893617,
                "tf.math.segment_sum(data, segment_ids)": 0.00425531914893617,
                "tf.math.squared_difference(x, y)": 0.00425531914893617,
                "tf.math.top_k(input, k)": 0.00425531914893617,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.00425531914893617,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.00425531914893617,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.00425531914893617,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.00425531914893617,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.00425531914893617,
                "tf.matmul(a, b)": 0.00425531914893617,
                "tf.maximum(x, y)": 0.00425531914893617,
                "tf.minimum(x, y)": 0.00425531914893617,
                "tf.multiply(x, y)": 0.00425531914893617,
                "tf.not_equal(x, y)": 0.00425531914893617,
                "tf.one_hot(indices, depth)": 0.00425531914893617,
                "tf.ones(shape)": 0.00425531914893617,
                "tf.ones_like(input)": 0.00425531914893617,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.00425531914893617,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.00425531914893617,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.00425531914893617,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.00425531914893617,
                "tf.range(start)": 0.00425531914893617,
                "tf.range(start, limit, delta)": 0.00425531914893617,
                "tf.reduce_any(input_tensor, axis)": 0.00425531914893617,
                "tf.reduce_all(input_tensor, axis)": 0.00425531914893617,
                "tf.reduce_max(input_tensor)": 0.00425531914893617,
                "tf.reduce_max(input_tensor, axis)": 0.00425531914893617,
                "tf.reduce_mean(input_tensor)": 0.00425531914893617,
                "tf.reduce_mean(input_tensor, axis)": 0.00425531914893617,
                "tf.reduce_min(input_tensor)": 0.00425531914893617,
                "tf.reduce_min(input_tensor, axis)": 0.00425531914893617,
                "tf.reduce_prod(input_tensor, axis)": 0.00425531914893617,
                "tf.reduce_sum(input_tensor)": 0.00425531914893617,
                "tf.reduce_sum(input_tensor, axis)": 0.00425531914893617,
                "tf.repeat(input, repeats)": 0.00425531914893617,
                "tf.repeat(input, repeats, axis)": 0.00425531914893617,
                "tf.reshape(tensor, shape)": 0.00425531914893617,
                "tf.reverse(tensor, axis)": 0.00425531914893617,
                "tf.roll(input, shift, axis)": 0.00425531914893617,
                "tf.round(x)": 0.00425531914893617,
                "tf.scatter_nd(indices, updates, shape)": 0.00425531914893617,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.00425531914893617,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.00425531914893617,
                "tf.sequence_mask(lengths)": 0.00425531914893617,
                "tf.sequence_mask(lengths, maxlen)": 0.00425531914893617,
                "tf.shape(input)": 0.00425531914893617,
                "tf.sign(x)": 0.00425531914893617,
                "tf.sort(values, axis)": 0.00425531914893617,
                "tf.sort(values, axis, direction='DESCENDING')": 0.00425531914893617,
                "tf.sqrt(x)": 0.00425531914893617,
                "tf.square(x)": 0.00425531914893617,
                "tf.squeeze(input)": 0.00425531914893617,
                "tf.squeeze(input, axis)": 0.00425531914893617,
                "tf.stack(values, axis)": 0.00425531914893617,
                "tf.subtract(x, y)": 0.00425531914893617,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.00425531914893617,
                "tf.tensordot(a, b, axes)": 0.00425531914893617,
                "tf.tile(input, multiples)": 0.00425531914893617,
                "tf.transpose(a)": 0.00425531914893617,
                "tf.transpose(a, perm)": 0.00425531914893617,
                "tf.unique_with_counts(x)": 0.00425531914893617,
                "tf.unstack(value, axis)": 0.00425531914893617,
                "tf.where(condition)": 0.00425531914893617,
                "tf.where(condition, x, y)": 0.00425531914893617,
                "tf.zeros(shape)": 0.00425531914893617,
                "tf.zeros_like(input)": 0.00425531914893617,
                "tf.SparseTensor(indices, values, dense_shape)": 0.00425531914893617,
                "tf.sparse.add(a, b)": 0.00425531914893617,
                "tf.sparse.concat(axis, sp_inputs)": 0.00425531914893617,
                "tf.sparse.expand_dims(sp_input, axis)": 0.00425531914893617,
                "tf.sparse.from_dense(tensor)": 0.00425531914893617,
                "tf.sparse.maximum(sp_a, sp_b)": 0.00425531914893617,
                "tf.sparse.minimum(sp_a, sp_b)": 0.00425531914893617,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.00425531914893617,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.00425531914893617,
                "tf.sparse.reset_shape(sp_input)": 0.00425531914893617,
                "tf.sparse.reshape(sp_input, shape)": 0.00425531914893617,
                "tf.sparse.retain(sp_input, to_retain)": 0.00425531914893617,
                "tf.sparse.slice(sp_input, start, size)": 0.00425531914893617,
                "tf.sparse.split(sp_input, num_split, axis)": 0.00425531914893617,
                "tf.sparse.to_dense(sp_input)": 0.00425531914893617,
                "tf.sparse.to_dense(sp_input, default_value)": 0.00425531914893617,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.00425531914893617,
                "tf.sparse.transpose(sp_input)": 0.00425531914893617,
                "tf.sparse.transpose(sp_input, perm)": 0.00425531914893617,
                "IndexingAxis1Operation": 0.00425531914893617,
                "IndexingOperation": 0.00425531914893617,
                "PairCreationOperation": 0.00425531914893617,
                "SingletonTupleCreationOperation": 0.00425531914893617,
                "SlicingAxis0BothOperation": 0.00425531914893617,
                "SlicingAxis0LeftOperation": 0.00425531914893617,
                "SlicingAxis0RightOperation": 0.00425531914893617,
                "SlicingAxis1BothOperation": 0.00425531914893617,
                "SlicingAxis1LeftOperation": 0.00425531914893617,
                "SlicingAxis1RightOperation": 0.00425531914893617,
                "TripleCreationOperation": 0.00425531914893617,
                "PROVIDED_CONSTANT_WEIGHT": 0.00425531914893617,
                "COMMON_CONSTANT_WEIGHT": 0.08936170212765958,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.00425531914893617,
                "INPUT_VARIABLE_WEIGHT": 0.17446808510638298,
                "AXIS_CONSTANT_WEIGHT": 0.00425531914893617,
                "SHAPE_CONSTANT_WEIGHT": 0.00425531914893617,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.00425531914893617,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.00425531914893617,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.00425531914893617,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.00425531914893617,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.00425531914893617
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 8,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 3,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 8,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 8,
                "tf.pad(tensor, paddings, mode='REFLECT')": 8,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side='left')": 8,
                "tf.searchsorted(sorted_sequence, values, side='right')": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 8,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction='DESCENDING')": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 8,
                "PairCreationOperation": 8,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 3,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 3,
                "AXIS_CONSTANT_WEIGHT": 8,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "google_14",
        "description": "circular buffer",
        "target_program": "tf.roll(in1, 1, 1)",
        "source": "From internal Colab, 10/17/2019",
        "constants": "[]",
        "examples": {
            "inputs": "[[[1, 3, 2, 0, 0], [4, 6, 5, 0, 0], [8, 7, 9, 0, 0]],]",
            "outputs": "[[0, 1, 3, 2, 0], [0, 4, 6, 5, 0], [0, 8, 7, 9, 0]]"
        },
        "completions": [
            "return tf.roll(in1, shift=1, axis=-1)\n",
            "return tf.roll(in1, 1, axis=1)",
            "return tf.roll(in1, shift=1, axis=1)\n",
            "return tf.roll(in1, shift=1, axis=1)\n",
            "return tf.roll(in1, shift=-1, axis=1)\n",
            "return tf.roll(in1, shift=1, axis=1)\n",
            "return tf.roll(in1, shift=-1, axis=1)",
            "return tf.roll(in1, shift=1, axis=1)\n",
            "return tf.roll(in1, shift=1, axis=1)",
            "return tf.roll(in1, 1, axis=1)\n",
            "return tf.roll(in1, shift=1, axis=1)\n",
            "return tf.roll(in1, shift=1, axis=1)",
            "return tf.roll(in1, shift=1, axis=1)\n",
            "return tf.roll(in1, shift=1, axis=1)\n",
            "return tf.roll(in1, shift=1, axis=1)\n",
            "return tf.roll(in1, shift=1, axis=1)",
            "return tf.roll(tf.transpose(in1), shift=1, axis=0)\n",
            "return tf.roll(in1, shift=-1, axis=1)\n",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)\n",
            "return tf.roll(in1, shift=-1, axis=1)\n"
        ],
        "tf_operators": {
            "tf.roll": 20,
            "tf.transpose": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 1,
        "total_in_target": 1,
        "parsed_constants": [
            [
                1,
                -1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                -1,
                1
            ],
            [
                1,
                1
            ],
            [
                -1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                0
            ],
            [
                -1,
                1
            ],
            [
                1,
                1
            ],
            [
                -1,
                1
            ]
        ],
        "all_constants": [
            0,
            1,
            -1
        ],
        "constant_counts": [
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 20,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 40,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.00423728813559322,
                "tf.add(x, y)": 0.00423728813559322,
                "tf.add_n(inputs)": 0.00423728813559322,
                "tf.argmax(input, axis)": 0.00423728813559322,
                "tf.argmin(input, axis)": 0.00423728813559322,
                "tf.argsort(values, axis, stable=True)": 0.00423728813559322,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.00423728813559322,
                "tf.boolean_mask(tensor, mask)": 0.00423728813559322,
                "tf.broadcast_to(input, shape)": 0.00423728813559322,
                "tf.cast(x, dtype)": 0.00423728813559322,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.00423728813559322,
                "tf.concat(values, axis)": 0.00423728813559322,
                "tf.constant(value)": 0.00423728813559322,
                "tf.constant(value, dtype)": 0.00423728813559322,
                "tf.divide(x, y)": 0.00423728813559322,
                "tf.equal(x, y)": 0.00423728813559322,
                "tf.exp(x)": 0.00423728813559322,
                "tf.expand_dims(input, axis)": 0.00423728813559322,
                "tf.eye(num_rows)": 0.00423728813559322,
                "tf.eye(num_rows, num_columns)": 0.00423728813559322,
                "tf.eye(num_rows, dtype)": 0.00423728813559322,
                "tf.fill(dims, value)": 0.00423728813559322,
                "tf.gather(params, indices)": 0.00423728813559322,
                "tf.gather(params, indices, axis, batch_dims)": 0.00423728813559322,
                "tf.gather_nd(params, indices)": 0.00423728813559322,
                "tf.gather_nd(params, indices, batch_dims)": 0.00423728813559322,
                "tf.greater(x, y)": 0.00423728813559322,
                "tf.greater_equal(x, y)": 0.00423728813559322,
                "tf.math.bincount(arr)": 0.00423728813559322,
                "tf.math.ceil(x)": 0.00423728813559322,
                "tf.math.count_nonzero(input)": 0.00423728813559322,
                "tf.math.count_nonzero(input, axis)": 0.00423728813559322,
                "tf.math.cumsum(x, axis)": 0.00423728813559322,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.00423728813559322,
                "tf.math.divide_no_nan(x, y)": 0.00423728813559322,
                "tf.math.floor(x)": 0.00423728813559322,
                "tf.math.log(x)": 0.00423728813559322,
                "tf.math.logical_and(x, y)": 0.00423728813559322,
                "tf.math.logical_not(x)": 0.00423728813559322,
                "tf.math.logical_or(x, y)": 0.00423728813559322,
                "tf.math.logical_xor(x, y)": 0.00423728813559322,
                "tf.math.negative(x)": 0.00423728813559322,
                "tf.math.reciprocal(x)": 0.00423728813559322,
                "tf.math.reciprocal_no_nan(x)": 0.00423728813559322,
                "tf.math.segment_max(data, segment_ids)": 0.00423728813559322,
                "tf.math.segment_mean(data, segment_ids)": 0.00423728813559322,
                "tf.math.segment_min(data, segment_ids)": 0.00423728813559322,
                "tf.math.segment_prod(data, segment_ids)": 0.00423728813559322,
                "tf.math.segment_sum(data, segment_ids)": 0.00423728813559322,
                "tf.math.squared_difference(x, y)": 0.00423728813559322,
                "tf.math.top_k(input, k)": 0.00423728813559322,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.00423728813559322,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.00423728813559322,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.00423728813559322,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.00423728813559322,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.00423728813559322,
                "tf.matmul(a, b)": 0.00423728813559322,
                "tf.maximum(x, y)": 0.00423728813559322,
                "tf.minimum(x, y)": 0.00423728813559322,
                "tf.multiply(x, y)": 0.00423728813559322,
                "tf.not_equal(x, y)": 0.00423728813559322,
                "tf.one_hot(indices, depth)": 0.00423728813559322,
                "tf.ones(shape)": 0.00423728813559322,
                "tf.ones_like(input)": 0.00423728813559322,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.00423728813559322,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.00423728813559322,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.00423728813559322,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.00423728813559322,
                "tf.range(start)": 0.00423728813559322,
                "tf.range(start, limit, delta)": 0.00423728813559322,
                "tf.reduce_any(input_tensor, axis)": 0.00423728813559322,
                "tf.reduce_all(input_tensor, axis)": 0.00423728813559322,
                "tf.reduce_max(input_tensor)": 0.00423728813559322,
                "tf.reduce_max(input_tensor, axis)": 0.00423728813559322,
                "tf.reduce_mean(input_tensor)": 0.00423728813559322,
                "tf.reduce_mean(input_tensor, axis)": 0.00423728813559322,
                "tf.reduce_min(input_tensor)": 0.00423728813559322,
                "tf.reduce_min(input_tensor, axis)": 0.00423728813559322,
                "tf.reduce_prod(input_tensor, axis)": 0.00423728813559322,
                "tf.reduce_sum(input_tensor)": 0.00423728813559322,
                "tf.reduce_sum(input_tensor, axis)": 0.00423728813559322,
                "tf.repeat(input, repeats)": 0.00423728813559322,
                "tf.repeat(input, repeats, axis)": 0.00423728813559322,
                "tf.reshape(tensor, shape)": 0.00423728813559322,
                "tf.reverse(tensor, axis)": 0.00423728813559322,
                "tf.roll(input, shift, axis)": 0.08898305084745763,
                "tf.round(x)": 0.00423728813559322,
                "tf.scatter_nd(indices, updates, shape)": 0.00423728813559322,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.00423728813559322,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.00423728813559322,
                "tf.sequence_mask(lengths)": 0.00423728813559322,
                "tf.sequence_mask(lengths, maxlen)": 0.00423728813559322,
                "tf.shape(input)": 0.00423728813559322,
                "tf.sign(x)": 0.00423728813559322,
                "tf.sort(values, axis)": 0.00423728813559322,
                "tf.sort(values, axis, direction='DESCENDING')": 0.00423728813559322,
                "tf.sqrt(x)": 0.00423728813559322,
                "tf.square(x)": 0.00423728813559322,
                "tf.squeeze(input)": 0.00423728813559322,
                "tf.squeeze(input, axis)": 0.00423728813559322,
                "tf.stack(values, axis)": 0.00423728813559322,
                "tf.subtract(x, y)": 0.00423728813559322,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.00423728813559322,
                "tf.tensordot(a, b, axes)": 0.00423728813559322,
                "tf.tile(input, multiples)": 0.00423728813559322,
                "tf.transpose(a)": 0.00847457627118644,
                "tf.transpose(a, perm)": 0.00423728813559322,
                "tf.unique_with_counts(x)": 0.00423728813559322,
                "tf.unstack(value, axis)": 0.00423728813559322,
                "tf.where(condition)": 0.00423728813559322,
                "tf.where(condition, x, y)": 0.00423728813559322,
                "tf.zeros(shape)": 0.00423728813559322,
                "tf.zeros_like(input)": 0.00423728813559322,
                "tf.SparseTensor(indices, values, dense_shape)": 0.00423728813559322,
                "tf.sparse.add(a, b)": 0.00423728813559322,
                "tf.sparse.concat(axis, sp_inputs)": 0.00423728813559322,
                "tf.sparse.expand_dims(sp_input, axis)": 0.00423728813559322,
                "tf.sparse.from_dense(tensor)": 0.00423728813559322,
                "tf.sparse.maximum(sp_a, sp_b)": 0.00423728813559322,
                "tf.sparse.minimum(sp_a, sp_b)": 0.00423728813559322,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.00423728813559322,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.00423728813559322,
                "tf.sparse.reset_shape(sp_input)": 0.00423728813559322,
                "tf.sparse.reshape(sp_input, shape)": 0.00423728813559322,
                "tf.sparse.retain(sp_input, to_retain)": 0.00423728813559322,
                "tf.sparse.slice(sp_input, start, size)": 0.00423728813559322,
                "tf.sparse.split(sp_input, num_split, axis)": 0.00423728813559322,
                "tf.sparse.to_dense(sp_input)": 0.00423728813559322,
                "tf.sparse.to_dense(sp_input, default_value)": 0.00423728813559322,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.00423728813559322,
                "tf.sparse.transpose(sp_input)": 0.00423728813559322,
                "tf.sparse.transpose(sp_input, perm)": 0.00423728813559322,
                "IndexingAxis1Operation": 0.00423728813559322,
                "IndexingOperation": 0.00423728813559322,
                "PairCreationOperation": 0.00423728813559322,
                "SingletonTupleCreationOperation": 0.00423728813559322,
                "SlicingAxis0BothOperation": 0.00423728813559322,
                "SlicingAxis0LeftOperation": 0.00423728813559322,
                "SlicingAxis0RightOperation": 0.00423728813559322,
                "SlicingAxis1BothOperation": 0.00423728813559322,
                "SlicingAxis1LeftOperation": 0.00423728813559322,
                "SlicingAxis1RightOperation": 0.00423728813559322,
                "TripleCreationOperation": 0.00423728813559322,
                "PROVIDED_CONSTANT_WEIGHT": 0.00423728813559322,
                "COMMON_CONSTANT_WEIGHT": 0.17372881355932204,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.00423728813559322,
                "INPUT_VARIABLE_WEIGHT": 0.08898305084745763,
                "AXIS_CONSTANT_WEIGHT": 0.00423728813559322,
                "SHAPE_CONSTANT_WEIGHT": 0.00423728813559322,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.00423728813559322,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.00423728813559322,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.00423728813559322,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.00423728813559322,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.00423728813559322
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 8,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 8,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 8,
                "tf.pad(tensor, paddings, mode='REFLECT')": 8,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 3,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side='left')": 8,
                "tf.searchsorted(sorted_sequence, values, side='right')": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 8,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction='DESCENDING')": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 7,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 8,
                "PairCreationOperation": 8,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 3,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 3,
                "AXIS_CONSTANT_WEIGHT": 8,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "google_15",
        "description": "pad a zero column",
        "target_program": "tf.pad(in1, [[0, 0], [0, 1]], 'CONSTANT')",
        "source": "Real task encountered by Googler, 10/23/2019",
        "constants": "[]",
        "examples": {
            "inputs": "[[[1, 3, 5, 7], [2, 4, 6, 8]],]",
            "outputs": "[[1, 3, 5, 7, 0], [2, 4, 6, 8, 0]]"
        },
        "completions": [
            "def transform(in1):\n    return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n",
            "def transform(in1):\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n",
            "return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n",
            "return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')",
            "return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')",
            "def transform(in1):\n    return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n",
            "return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n",
            "return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')",
            "return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n",
            "return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n",
            "return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n",
            "return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n",
            "return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')",
            "return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n",
            "return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n",
            "return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n",
            "return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n",
            "return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n",
            "def transform(in1):\n    return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n",
            "return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n"
        ],
        "tf_operators": {
            "tf.pad": 20
        },
        "coverage_percentage": 100.0,
        "total_covered": 1,
        "total_in_target": 1,
        "parsed_constants": [
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ]
        ],
        "all_constants": [
            0,
            1
        ],
        "constant_counts": [
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 20,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 80,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.0036363636363636364,
                "tf.add(x, y)": 0.0036363636363636364,
                "tf.add_n(inputs)": 0.0036363636363636364,
                "tf.argmax(input, axis)": 0.0036363636363636364,
                "tf.argmin(input, axis)": 0.0036363636363636364,
                "tf.argsort(values, axis, stable=True)": 0.0036363636363636364,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.0036363636363636364,
                "tf.boolean_mask(tensor, mask)": 0.0036363636363636364,
                "tf.broadcast_to(input, shape)": 0.0036363636363636364,
                "tf.cast(x, dtype)": 0.0036363636363636364,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.0036363636363636364,
                "tf.concat(values, axis)": 0.0036363636363636364,
                "tf.constant(value)": 0.0036363636363636364,
                "tf.constant(value, dtype)": 0.0036363636363636364,
                "tf.divide(x, y)": 0.0036363636363636364,
                "tf.equal(x, y)": 0.0036363636363636364,
                "tf.exp(x)": 0.0036363636363636364,
                "tf.expand_dims(input, axis)": 0.0036363636363636364,
                "tf.eye(num_rows)": 0.0036363636363636364,
                "tf.eye(num_rows, num_columns)": 0.0036363636363636364,
                "tf.eye(num_rows, dtype)": 0.0036363636363636364,
                "tf.fill(dims, value)": 0.0036363636363636364,
                "tf.gather(params, indices)": 0.0036363636363636364,
                "tf.gather(params, indices, axis, batch_dims)": 0.0036363636363636364,
                "tf.gather_nd(params, indices)": 0.0036363636363636364,
                "tf.gather_nd(params, indices, batch_dims)": 0.0036363636363636364,
                "tf.greater(x, y)": 0.0036363636363636364,
                "tf.greater_equal(x, y)": 0.0036363636363636364,
                "tf.math.bincount(arr)": 0.0036363636363636364,
                "tf.math.ceil(x)": 0.0036363636363636364,
                "tf.math.count_nonzero(input)": 0.0036363636363636364,
                "tf.math.count_nonzero(input, axis)": 0.0036363636363636364,
                "tf.math.cumsum(x, axis)": 0.0036363636363636364,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.0036363636363636364,
                "tf.math.divide_no_nan(x, y)": 0.0036363636363636364,
                "tf.math.floor(x)": 0.0036363636363636364,
                "tf.math.log(x)": 0.0036363636363636364,
                "tf.math.logical_and(x, y)": 0.0036363636363636364,
                "tf.math.logical_not(x)": 0.0036363636363636364,
                "tf.math.logical_or(x, y)": 0.0036363636363636364,
                "tf.math.logical_xor(x, y)": 0.0036363636363636364,
                "tf.math.negative(x)": 0.0036363636363636364,
                "tf.math.reciprocal(x)": 0.0036363636363636364,
                "tf.math.reciprocal_no_nan(x)": 0.0036363636363636364,
                "tf.math.segment_max(data, segment_ids)": 0.0036363636363636364,
                "tf.math.segment_mean(data, segment_ids)": 0.0036363636363636364,
                "tf.math.segment_min(data, segment_ids)": 0.0036363636363636364,
                "tf.math.segment_prod(data, segment_ids)": 0.0036363636363636364,
                "tf.math.segment_sum(data, segment_ids)": 0.0036363636363636364,
                "tf.math.squared_difference(x, y)": 0.0036363636363636364,
                "tf.math.top_k(input, k)": 0.0036363636363636364,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.0036363636363636364,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.0036363636363636364,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.0036363636363636364,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.0036363636363636364,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.0036363636363636364,
                "tf.matmul(a, b)": 0.0036363636363636364,
                "tf.maximum(x, y)": 0.0036363636363636364,
                "tf.minimum(x, y)": 0.0036363636363636364,
                "tf.multiply(x, y)": 0.0036363636363636364,
                "tf.not_equal(x, y)": 0.0036363636363636364,
                "tf.one_hot(indices, depth)": 0.0036363636363636364,
                "tf.ones(shape)": 0.0036363636363636364,
                "tf.ones_like(input)": 0.0036363636363636364,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.05454545454545454,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.025454545454545455,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.0036363636363636364,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.0036363636363636364,
                "tf.range(start)": 0.0036363636363636364,
                "tf.range(start, limit, delta)": 0.0036363636363636364,
                "tf.reduce_any(input_tensor, axis)": 0.0036363636363636364,
                "tf.reduce_all(input_tensor, axis)": 0.0036363636363636364,
                "tf.reduce_max(input_tensor)": 0.0036363636363636364,
                "tf.reduce_max(input_tensor, axis)": 0.0036363636363636364,
                "tf.reduce_mean(input_tensor)": 0.0036363636363636364,
                "tf.reduce_mean(input_tensor, axis)": 0.0036363636363636364,
                "tf.reduce_min(input_tensor)": 0.0036363636363636364,
                "tf.reduce_min(input_tensor, axis)": 0.0036363636363636364,
                "tf.reduce_prod(input_tensor, axis)": 0.0036363636363636364,
                "tf.reduce_sum(input_tensor)": 0.0036363636363636364,
                "tf.reduce_sum(input_tensor, axis)": 0.0036363636363636364,
                "tf.repeat(input, repeats)": 0.0036363636363636364,
                "tf.repeat(input, repeats, axis)": 0.0036363636363636364,
                "tf.reshape(tensor, shape)": 0.0036363636363636364,
                "tf.reverse(tensor, axis)": 0.0036363636363636364,
                "tf.roll(input, shift, axis)": 0.0036363636363636364,
                "tf.round(x)": 0.0036363636363636364,
                "tf.scatter_nd(indices, updates, shape)": 0.0036363636363636364,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.0036363636363636364,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.0036363636363636364,
                "tf.sequence_mask(lengths)": 0.0036363636363636364,
                "tf.sequence_mask(lengths, maxlen)": 0.0036363636363636364,
                "tf.shape(input)": 0.0036363636363636364,
                "tf.sign(x)": 0.0036363636363636364,
                "tf.sort(values, axis)": 0.0036363636363636364,
                "tf.sort(values, axis, direction='DESCENDING')": 0.0036363636363636364,
                "tf.sqrt(x)": 0.0036363636363636364,
                "tf.square(x)": 0.0036363636363636364,
                "tf.squeeze(input)": 0.0036363636363636364,
                "tf.squeeze(input, axis)": 0.0036363636363636364,
                "tf.stack(values, axis)": 0.0036363636363636364,
                "tf.subtract(x, y)": 0.0036363636363636364,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.0036363636363636364,
                "tf.tensordot(a, b, axes)": 0.0036363636363636364,
                "tf.tile(input, multiples)": 0.0036363636363636364,
                "tf.transpose(a)": 0.0036363636363636364,
                "tf.transpose(a, perm)": 0.0036363636363636364,
                "tf.unique_with_counts(x)": 0.0036363636363636364,
                "tf.unstack(value, axis)": 0.0036363636363636364,
                "tf.where(condition)": 0.0036363636363636364,
                "tf.where(condition, x, y)": 0.0036363636363636364,
                "tf.zeros(shape)": 0.0036363636363636364,
                "tf.zeros_like(input)": 0.0036363636363636364,
                "tf.SparseTensor(indices, values, dense_shape)": 0.0036363636363636364,
                "tf.sparse.add(a, b)": 0.0036363636363636364,
                "tf.sparse.concat(axis, sp_inputs)": 0.0036363636363636364,
                "tf.sparse.expand_dims(sp_input, axis)": 0.0036363636363636364,
                "tf.sparse.from_dense(tensor)": 0.0036363636363636364,
                "tf.sparse.maximum(sp_a, sp_b)": 0.0036363636363636364,
                "tf.sparse.minimum(sp_a, sp_b)": 0.0036363636363636364,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.0036363636363636364,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.0036363636363636364,
                "tf.sparse.reset_shape(sp_input)": 0.0036363636363636364,
                "tf.sparse.reshape(sp_input, shape)": 0.0036363636363636364,
                "tf.sparse.retain(sp_input, to_retain)": 0.0036363636363636364,
                "tf.sparse.slice(sp_input, start, size)": 0.0036363636363636364,
                "tf.sparse.split(sp_input, num_split, axis)": 0.0036363636363636364,
                "tf.sparse.to_dense(sp_input)": 0.0036363636363636364,
                "tf.sparse.to_dense(sp_input, default_value)": 0.0036363636363636364,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.0036363636363636364,
                "tf.sparse.transpose(sp_input)": 0.0036363636363636364,
                "tf.sparse.transpose(sp_input, perm)": 0.0036363636363636364,
                "IndexingAxis1Operation": 0.0036363636363636364,
                "IndexingOperation": 0.0036363636363636364,
                "PairCreationOperation": 0.0036363636363636364,
                "SingletonTupleCreationOperation": 0.0036363636363636364,
                "SlicingAxis0BothOperation": 0.0036363636363636364,
                "SlicingAxis0LeftOperation": 0.0036363636363636364,
                "SlicingAxis0RightOperation": 0.0036363636363636364,
                "SlicingAxis1BothOperation": 0.0036363636363636364,
                "SlicingAxis1LeftOperation": 0.0036363636363636364,
                "SlicingAxis1RightOperation": 0.0036363636363636364,
                "TripleCreationOperation": 0.0036363636363636364,
                "PROVIDED_CONSTANT_WEIGHT": 0.0036363636363636364,
                "COMMON_CONSTANT_WEIGHT": 0.29454545454545455,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.0036363636363636364,
                "INPUT_VARIABLE_WEIGHT": 0.07636363636363637,
                "AXIS_CONSTANT_WEIGHT": 0.0036363636363636364,
                "SHAPE_CONSTANT_WEIGHT": 0.0036363636363636364,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.0036363636363636364,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.0036363636363636364,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.0036363636363636364,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.0036363636363636364,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.0036363636363636364
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 8,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 8,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 4,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 5,
                "tf.pad(tensor, paddings, mode='REFLECT')": 8,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side='left')": 8,
                "tf.searchsorted(sorted_sequence, values, side='right')": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 8,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction='DESCENDING')": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 8,
                "PairCreationOperation": 8,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 2,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 4,
                "AXIS_CONSTANT_WEIGHT": 8,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "google_16",
        "description": "replicate elements a given number of times",
        "target_program": "tf.gather(in1, tf.where(tf.sequence_mask(in2))[:, 0])",
        "source": "From an internal Google forum",
        "constants": "[]",
        "examples": {
            "inputs": "[[1, 2, 0, 3],[2, 1, 2, 3],]",
            "outputs": "[1, 1, 2, 0, 0, 3, 3, 3]"
        },
        "completions": [
            "return tf.repeat(in1, in2)\n",
            "return tf.repeat(in1, in2)",
            "out = tf.repeat(in1, in2)\nreturn out\n",
            "return tf.repeat(in1, in2)",
            "return tf.repeat(in1, repeats=in2)\n",
            "return tf.repeat(in1, in2)",
            "return tf.repeat(in1, in2)",
            "return tf.repeat(in1, in2)",
            "return tf.repeat(in1, in2)\n",
            "return tf.repeat(in1, in2)\n",
            "return tf.repeat(in1, in2)\n",
            "result = tf.repeat(in1, in2)\nreturn result\n",
            "return tf.repeat(in1, in2)",
            "return tf.repeat(in1, in2)",
            "result = tf.repeat(in1, in2)\nreturn result\n",
            "out = tf.repeat(in1, in2)\nreturn out\n",
            "return tf.repeat(in1, in2)",
            "return tf.repeat(in1, in2)\n",
            "return tf.repeat(in1, in2)",
            "return tf.repeat(in1, in2)"
        ],
        "tf_operators": {
            "tf.repeat": 20
        },
        "coverage_percentage": 0.0,
        "total_covered": 0,
        "total_in_target": 3,
        "parsed_constants": [
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            []
        ],
        "all_constants": [],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 40,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 0,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.004651162790697674,
                "tf.add(x, y)": 0.004651162790697674,
                "tf.add_n(inputs)": 0.004651162790697674,
                "tf.argmax(input, axis)": 0.004651162790697674,
                "tf.argmin(input, axis)": 0.004651162790697674,
                "tf.argsort(values, axis, stable=True)": 0.004651162790697674,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.004651162790697674,
                "tf.boolean_mask(tensor, mask)": 0.004651162790697674,
                "tf.broadcast_to(input, shape)": 0.004651162790697674,
                "tf.cast(x, dtype)": 0.004651162790697674,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.004651162790697674,
                "tf.concat(values, axis)": 0.004651162790697674,
                "tf.constant(value)": 0.004651162790697674,
                "tf.constant(value, dtype)": 0.004651162790697674,
                "tf.divide(x, y)": 0.004651162790697674,
                "tf.equal(x, y)": 0.004651162790697674,
                "tf.exp(x)": 0.004651162790697674,
                "tf.expand_dims(input, axis)": 0.004651162790697674,
                "tf.eye(num_rows)": 0.004651162790697674,
                "tf.eye(num_rows, num_columns)": 0.004651162790697674,
                "tf.eye(num_rows, dtype)": 0.004651162790697674,
                "tf.fill(dims, value)": 0.004651162790697674,
                "tf.gather(params, indices)": 0.004651162790697674,
                "tf.gather(params, indices, axis, batch_dims)": 0.004651162790697674,
                "tf.gather_nd(params, indices)": 0.004651162790697674,
                "tf.gather_nd(params, indices, batch_dims)": 0.004651162790697674,
                "tf.greater(x, y)": 0.004651162790697674,
                "tf.greater_equal(x, y)": 0.004651162790697674,
                "tf.math.bincount(arr)": 0.004651162790697674,
                "tf.math.ceil(x)": 0.004651162790697674,
                "tf.math.count_nonzero(input)": 0.004651162790697674,
                "tf.math.count_nonzero(input, axis)": 0.004651162790697674,
                "tf.math.cumsum(x, axis)": 0.004651162790697674,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.004651162790697674,
                "tf.math.divide_no_nan(x, y)": 0.004651162790697674,
                "tf.math.floor(x)": 0.004651162790697674,
                "tf.math.log(x)": 0.004651162790697674,
                "tf.math.logical_and(x, y)": 0.004651162790697674,
                "tf.math.logical_not(x)": 0.004651162790697674,
                "tf.math.logical_or(x, y)": 0.004651162790697674,
                "tf.math.logical_xor(x, y)": 0.004651162790697674,
                "tf.math.negative(x)": 0.004651162790697674,
                "tf.math.reciprocal(x)": 0.004651162790697674,
                "tf.math.reciprocal_no_nan(x)": 0.004651162790697674,
                "tf.math.segment_max(data, segment_ids)": 0.004651162790697674,
                "tf.math.segment_mean(data, segment_ids)": 0.004651162790697674,
                "tf.math.segment_min(data, segment_ids)": 0.004651162790697674,
                "tf.math.segment_prod(data, segment_ids)": 0.004651162790697674,
                "tf.math.segment_sum(data, segment_ids)": 0.004651162790697674,
                "tf.math.squared_difference(x, y)": 0.004651162790697674,
                "tf.math.top_k(input, k)": 0.004651162790697674,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.004651162790697674,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.004651162790697674,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.004651162790697674,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.004651162790697674,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.004651162790697674,
                "tf.matmul(a, b)": 0.004651162790697674,
                "tf.maximum(x, y)": 0.004651162790697674,
                "tf.minimum(x, y)": 0.004651162790697674,
                "tf.multiply(x, y)": 0.004651162790697674,
                "tf.not_equal(x, y)": 0.004651162790697674,
                "tf.one_hot(indices, depth)": 0.004651162790697674,
                "tf.ones(shape)": 0.004651162790697674,
                "tf.ones_like(input)": 0.004651162790697674,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.004651162790697674,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.004651162790697674,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.004651162790697674,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.004651162790697674,
                "tf.range(start)": 0.004651162790697674,
                "tf.range(start, limit, delta)": 0.004651162790697674,
                "tf.reduce_any(input_tensor, axis)": 0.004651162790697674,
                "tf.reduce_all(input_tensor, axis)": 0.004651162790697674,
                "tf.reduce_max(input_tensor)": 0.004651162790697674,
                "tf.reduce_max(input_tensor, axis)": 0.004651162790697674,
                "tf.reduce_mean(input_tensor)": 0.004651162790697674,
                "tf.reduce_mean(input_tensor, axis)": 0.004651162790697674,
                "tf.reduce_min(input_tensor)": 0.004651162790697674,
                "tf.reduce_min(input_tensor, axis)": 0.004651162790697674,
                "tf.reduce_prod(input_tensor, axis)": 0.004651162790697674,
                "tf.reduce_sum(input_tensor)": 0.004651162790697674,
                "tf.reduce_sum(input_tensor, axis)": 0.004651162790697674,
                "tf.repeat(input, repeats)": 0.09302325581395349,
                "tf.repeat(input, repeats, axis)": 0.009302325581395349,
                "tf.reshape(tensor, shape)": 0.004651162790697674,
                "tf.reverse(tensor, axis)": 0.004651162790697674,
                "tf.roll(input, shift, axis)": 0.004651162790697674,
                "tf.round(x)": 0.004651162790697674,
                "tf.scatter_nd(indices, updates, shape)": 0.004651162790697674,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.004651162790697674,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.004651162790697674,
                "tf.sequence_mask(lengths)": 0.004651162790697674,
                "tf.sequence_mask(lengths, maxlen)": 0.004651162790697674,
                "tf.shape(input)": 0.004651162790697674,
                "tf.sign(x)": 0.004651162790697674,
                "tf.sort(values, axis)": 0.004651162790697674,
                "tf.sort(values, axis, direction='DESCENDING')": 0.004651162790697674,
                "tf.sqrt(x)": 0.004651162790697674,
                "tf.square(x)": 0.004651162790697674,
                "tf.squeeze(input)": 0.004651162790697674,
                "tf.squeeze(input, axis)": 0.004651162790697674,
                "tf.stack(values, axis)": 0.004651162790697674,
                "tf.subtract(x, y)": 0.004651162790697674,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.004651162790697674,
                "tf.tensordot(a, b, axes)": 0.004651162790697674,
                "tf.tile(input, multiples)": 0.004651162790697674,
                "tf.transpose(a)": 0.004651162790697674,
                "tf.transpose(a, perm)": 0.004651162790697674,
                "tf.unique_with_counts(x)": 0.004651162790697674,
                "tf.unstack(value, axis)": 0.004651162790697674,
                "tf.where(condition)": 0.004651162790697674,
                "tf.where(condition, x, y)": 0.004651162790697674,
                "tf.zeros(shape)": 0.004651162790697674,
                "tf.zeros_like(input)": 0.004651162790697674,
                "tf.SparseTensor(indices, values, dense_shape)": 0.004651162790697674,
                "tf.sparse.add(a, b)": 0.004651162790697674,
                "tf.sparse.concat(axis, sp_inputs)": 0.004651162790697674,
                "tf.sparse.expand_dims(sp_input, axis)": 0.004651162790697674,
                "tf.sparse.from_dense(tensor)": 0.004651162790697674,
                "tf.sparse.maximum(sp_a, sp_b)": 0.004651162790697674,
                "tf.sparse.minimum(sp_a, sp_b)": 0.004651162790697674,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.004651162790697674,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.004651162790697674,
                "tf.sparse.reset_shape(sp_input)": 0.004651162790697674,
                "tf.sparse.reshape(sp_input, shape)": 0.004651162790697674,
                "tf.sparse.retain(sp_input, to_retain)": 0.004651162790697674,
                "tf.sparse.slice(sp_input, start, size)": 0.004651162790697674,
                "tf.sparse.split(sp_input, num_split, axis)": 0.004651162790697674,
                "tf.sparse.to_dense(sp_input)": 0.004651162790697674,
                "tf.sparse.to_dense(sp_input, default_value)": 0.004651162790697674,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.004651162790697674,
                "tf.sparse.transpose(sp_input)": 0.004651162790697674,
                "tf.sparse.transpose(sp_input, perm)": 0.004651162790697674,
                "IndexingAxis1Operation": 0.004651162790697674,
                "IndexingOperation": 0.004651162790697674,
                "PairCreationOperation": 0.004651162790697674,
                "SingletonTupleCreationOperation": 0.004651162790697674,
                "SlicingAxis0BothOperation": 0.004651162790697674,
                "SlicingAxis0LeftOperation": 0.004651162790697674,
                "SlicingAxis0RightOperation": 0.004651162790697674,
                "SlicingAxis1BothOperation": 0.004651162790697674,
                "SlicingAxis1LeftOperation": 0.004651162790697674,
                "SlicingAxis1RightOperation": 0.004651162790697674,
                "TripleCreationOperation": 0.004651162790697674,
                "PROVIDED_CONSTANT_WEIGHT": 0.004651162790697674,
                "COMMON_CONSTANT_WEIGHT": 0.004651162790697674,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.004651162790697674,
                "INPUT_VARIABLE_WEIGHT": 0.19069767441860466,
                "AXIS_CONSTANT_WEIGHT": 0.004651162790697674,
                "SHAPE_CONSTANT_WEIGHT": 0.004651162790697674,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.004651162790697674,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.004651162790697674,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.004651162790697674,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.004651162790697674,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.004651162790697674
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 8,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 8,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 8,
                "tf.pad(tensor, paddings, mode='REFLECT')": 8,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 3,
                "tf.repeat(input, repeats, axis)": 7,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side='left')": 8,
                "tf.searchsorted(sorted_sequence, values, side='right')": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 8,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction='DESCENDING')": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 8,
                "PairCreationOperation": 8,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 8,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 2,
                "AXIS_CONSTANT_WEIGHT": 8,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "google_17",
        "description": "use bool tensor as condition",
        "target_program": "tf.where(in1, in2, tf.multiply(in2, -10))",
        "source": "From an internal Google forum",
        "constants": "[-10]",
        "examples": {
            "inputs": "[[True, False, False, True, False],[1, 2, 3, 4, 5],]",
            "outputs": "[1, -20, -30, 4, -50]"
        },
        "completions": [
            "return tf.where(in1, in2, tf.math.negative(in2))",
            "return tf.where(in1, in2, -in2)",
            "return tf.where(in1, in2, -1 * in2)",
            "return tf.where(in1, in2, tf.math.negative(in2))",
            "return tf.where(in1, in2, -in2)",
            "return tf.where(in1, in2, -in2)",
            "return tf.where(tf.expand_dims(in1, axis=-1), in2, -1*in2)",
            "return tf.where(in1, in2, -10*in2)",
            "return tf.where(in1, in2, -in2)",
            "return tf.where(in1, in2, -in2)",
            "return tf.where(in1, in2, tf.math.negative(in2))",
            "output = tf.where(in1, in2, -10 * in2)\n",
            "return tf.where(tf.expand_dims(in1, axis=-1), in2, -10 * in2)",
            "def transform(in1, in2):\n    result = tf.where(in1, in2, -10*in2)\n    return result\n",
            "return tf.where(in1, in2, -in2)",
            "return tf.where(in1, in2, -10*in2)",
            "def transform(in1, in2):\n    result = tf.where(in1, in2, -10*in2)\n    return result\n",
            "def transform(in1, in2):\n    result = tf.where(in1, in2, -10*in2)\n    return result\n",
            "return tf.where(in1, in2, -in2)",
            "return tf.where(in1, in2, -in2)"
        ],
        "tf_operators": {
            "tf.where": 20,
            "tf.math.negative": 3,
            "tf.expand_dims": 2
        },
        "coverage_percentage": 50.0,
        "total_covered": 1,
        "total_in_target": 2,
        "parsed_constants": [
            [],
            [],
            [
                -1
            ],
            [],
            [],
            [],
            [
                -1,
                -1
            ],
            [
                -10
            ],
            [],
            [],
            [],
            [
                -10
            ],
            [
                -1,
                -10
            ],
            [
                -10
            ],
            [],
            [
                -10
            ],
            [
                -10
            ],
            [
                -10
            ],
            [],
            []
        ],
        "all_constants": [
            -1,
            -10
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 60,
            "shape": 0,
            "tf_bool": 0,
            "provided": 7,
            "common": 4,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.00398406374501992,
                "tf.add(x, y)": 0.00398406374501992,
                "tf.add_n(inputs)": 0.00398406374501992,
                "tf.argmax(input, axis)": 0.00398406374501992,
                "tf.argmin(input, axis)": 0.00398406374501992,
                "tf.argsort(values, axis, stable=True)": 0.00398406374501992,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.00398406374501992,
                "tf.boolean_mask(tensor, mask)": 0.00398406374501992,
                "tf.broadcast_to(input, shape)": 0.00398406374501992,
                "tf.cast(x, dtype)": 0.00398406374501992,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.00398406374501992,
                "tf.concat(values, axis)": 0.00398406374501992,
                "tf.constant(value)": 0.00398406374501992,
                "tf.constant(value, dtype)": 0.00398406374501992,
                "tf.divide(x, y)": 0.00398406374501992,
                "tf.equal(x, y)": 0.00398406374501992,
                "tf.exp(x)": 0.00398406374501992,
                "tf.expand_dims(input, axis)": 0.01195219123505976,
                "tf.eye(num_rows)": 0.00398406374501992,
                "tf.eye(num_rows, num_columns)": 0.00398406374501992,
                "tf.eye(num_rows, dtype)": 0.00398406374501992,
                "tf.fill(dims, value)": 0.00398406374501992,
                "tf.gather(params, indices)": 0.00398406374501992,
                "tf.gather(params, indices, axis, batch_dims)": 0.00398406374501992,
                "tf.gather_nd(params, indices)": 0.00398406374501992,
                "tf.gather_nd(params, indices, batch_dims)": 0.00398406374501992,
                "tf.greater(x, y)": 0.00398406374501992,
                "tf.greater_equal(x, y)": 0.00398406374501992,
                "tf.math.bincount(arr)": 0.00398406374501992,
                "tf.math.ceil(x)": 0.00398406374501992,
                "tf.math.count_nonzero(input)": 0.00398406374501992,
                "tf.math.count_nonzero(input, axis)": 0.00398406374501992,
                "tf.math.cumsum(x, axis)": 0.00398406374501992,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.00398406374501992,
                "tf.math.divide_no_nan(x, y)": 0.00398406374501992,
                "tf.math.floor(x)": 0.00398406374501992,
                "tf.math.log(x)": 0.00398406374501992,
                "tf.math.logical_and(x, y)": 0.00398406374501992,
                "tf.math.logical_not(x)": 0.00398406374501992,
                "tf.math.logical_or(x, y)": 0.00398406374501992,
                "tf.math.logical_xor(x, y)": 0.00398406374501992,
                "tf.math.negative(x)": 0.01593625498007968,
                "tf.math.reciprocal(x)": 0.00398406374501992,
                "tf.math.reciprocal_no_nan(x)": 0.00398406374501992,
                "tf.math.segment_max(data, segment_ids)": 0.00398406374501992,
                "tf.math.segment_mean(data, segment_ids)": 0.00398406374501992,
                "tf.math.segment_min(data, segment_ids)": 0.00398406374501992,
                "tf.math.segment_prod(data, segment_ids)": 0.00398406374501992,
                "tf.math.segment_sum(data, segment_ids)": 0.00398406374501992,
                "tf.math.squared_difference(x, y)": 0.00398406374501992,
                "tf.math.top_k(input, k)": 0.00398406374501992,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.00398406374501992,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.00398406374501992,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.00398406374501992,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.00398406374501992,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.00398406374501992,
                "tf.matmul(a, b)": 0.00398406374501992,
                "tf.maximum(x, y)": 0.00398406374501992,
                "tf.minimum(x, y)": 0.00398406374501992,
                "tf.multiply(x, y)": 0.00398406374501992,
                "tf.not_equal(x, y)": 0.00398406374501992,
                "tf.one_hot(indices, depth)": 0.00398406374501992,
                "tf.ones(shape)": 0.00398406374501992,
                "tf.ones_like(input)": 0.00398406374501992,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.00398406374501992,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.00398406374501992,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.00398406374501992,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.00398406374501992,
                "tf.range(start)": 0.00398406374501992,
                "tf.range(start, limit, delta)": 0.00398406374501992,
                "tf.reduce_any(input_tensor, axis)": 0.00398406374501992,
                "tf.reduce_all(input_tensor, axis)": 0.00398406374501992,
                "tf.reduce_max(input_tensor)": 0.00398406374501992,
                "tf.reduce_max(input_tensor, axis)": 0.00398406374501992,
                "tf.reduce_mean(input_tensor)": 0.00398406374501992,
                "tf.reduce_mean(input_tensor, axis)": 0.00398406374501992,
                "tf.reduce_min(input_tensor)": 0.00398406374501992,
                "tf.reduce_min(input_tensor, axis)": 0.00398406374501992,
                "tf.reduce_prod(input_tensor, axis)": 0.00398406374501992,
                "tf.reduce_sum(input_tensor)": 0.00398406374501992,
                "tf.reduce_sum(input_tensor, axis)": 0.00398406374501992,
                "tf.repeat(input, repeats)": 0.00398406374501992,
                "tf.repeat(input, repeats, axis)": 0.00398406374501992,
                "tf.reshape(tensor, shape)": 0.00398406374501992,
                "tf.reverse(tensor, axis)": 0.00398406374501992,
                "tf.roll(input, shift, axis)": 0.00398406374501992,
                "tf.round(x)": 0.00398406374501992,
                "tf.scatter_nd(indices, updates, shape)": 0.00398406374501992,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.00398406374501992,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.00398406374501992,
                "tf.sequence_mask(lengths)": 0.00398406374501992,
                "tf.sequence_mask(lengths, maxlen)": 0.00398406374501992,
                "tf.shape(input)": 0.00398406374501992,
                "tf.sign(x)": 0.00398406374501992,
                "tf.sort(values, axis)": 0.00398406374501992,
                "tf.sort(values, axis, direction='DESCENDING')": 0.00398406374501992,
                "tf.sqrt(x)": 0.00398406374501992,
                "tf.square(x)": 0.00398406374501992,
                "tf.squeeze(input)": 0.00398406374501992,
                "tf.squeeze(input, axis)": 0.00398406374501992,
                "tf.stack(values, axis)": 0.00398406374501992,
                "tf.subtract(x, y)": 0.00398406374501992,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.00398406374501992,
                "tf.tensordot(a, b, axes)": 0.00398406374501992,
                "tf.tile(input, multiples)": 0.00398406374501992,
                "tf.transpose(a)": 0.00398406374501992,
                "tf.transpose(a, perm)": 0.00398406374501992,
                "tf.unique_with_counts(x)": 0.00398406374501992,
                "tf.unstack(value, axis)": 0.00398406374501992,
                "tf.where(condition)": 0.00398406374501992,
                "tf.where(condition, x, y)": 0.08366533864541832,
                "tf.zeros(shape)": 0.00398406374501992,
                "tf.zeros_like(input)": 0.00398406374501992,
                "tf.SparseTensor(indices, values, dense_shape)": 0.00398406374501992,
                "tf.sparse.add(a, b)": 0.00398406374501992,
                "tf.sparse.concat(axis, sp_inputs)": 0.00398406374501992,
                "tf.sparse.expand_dims(sp_input, axis)": 0.00398406374501992,
                "tf.sparse.from_dense(tensor)": 0.00398406374501992,
                "tf.sparse.maximum(sp_a, sp_b)": 0.00398406374501992,
                "tf.sparse.minimum(sp_a, sp_b)": 0.00398406374501992,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.00398406374501992,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.00398406374501992,
                "tf.sparse.reset_shape(sp_input)": 0.00398406374501992,
                "tf.sparse.reshape(sp_input, shape)": 0.00398406374501992,
                "tf.sparse.retain(sp_input, to_retain)": 0.00398406374501992,
                "tf.sparse.slice(sp_input, start, size)": 0.00398406374501992,
                "tf.sparse.split(sp_input, num_split, axis)": 0.00398406374501992,
                "tf.sparse.to_dense(sp_input)": 0.00398406374501992,
                "tf.sparse.to_dense(sp_input, default_value)": 0.00398406374501992,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.00398406374501992,
                "tf.sparse.transpose(sp_input)": 0.00398406374501992,
                "tf.sparse.transpose(sp_input, perm)": 0.00398406374501992,
                "IndexingAxis1Operation": 0.00398406374501992,
                "IndexingOperation": 0.00398406374501992,
                "PairCreationOperation": 0.00398406374501992,
                "SingletonTupleCreationOperation": 0.00398406374501992,
                "SlicingAxis0BothOperation": 0.00398406374501992,
                "SlicingAxis0LeftOperation": 0.00398406374501992,
                "SlicingAxis0RightOperation": 0.00398406374501992,
                "SlicingAxis1BothOperation": 0.00398406374501992,
                "SlicingAxis1LeftOperation": 0.00398406374501992,
                "SlicingAxis1RightOperation": 0.00398406374501992,
                "TripleCreationOperation": 0.00398406374501992,
                "PROVIDED_CONSTANT_WEIGHT": 0.03187250996015936,
                "COMMON_CONSTANT_WEIGHT": 0.0199203187250996,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.00398406374501992,
                "INPUT_VARIABLE_WEIGHT": 0.24302788844621515,
                "AXIS_CONSTANT_WEIGHT": 0.00398406374501992,
                "SHAPE_CONSTANT_WEIGHT": 0.00398406374501992,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.00398406374501992,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.00398406374501992,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.00398406374501992,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.00398406374501992,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.00398406374501992
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 8,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 6,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 6,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 8,
                "tf.pad(tensor, paddings, mode='REFLECT')": 8,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side='left')": 8,
                "tf.searchsorted(sorted_sequence, values, side='right')": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 8,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction='DESCENDING')": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 4,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 8,
                "PairCreationOperation": 8,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 5,
                "COMMON_CONSTANT_WEIGHT": 6,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 2,
                "AXIS_CONSTANT_WEIGHT": 8,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "google_18",
        "description": "(\\'sum of elements in the first tensor but partitioned by the second tensor\\')",
        "target_program": "tf.linalg.matvec(tf.cast(tf.equal(in2[:, None], in2), tf.int32), in1)",
        "source": "From an internal Google forum",
        "constants": "[]",
        "examples": {
            "inputs": "[[5, 7, -12, 10, 20],[1, 2, 3, 1, 2],]",
            "outputs": "[15, 27, -12, 15, 27]"
        },
        "completions": [
            "return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2)+1)",
            "return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2)+1)",
            "return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2) + 1)",
            "return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2) + 1)",
            "return tf.math.segment_sum(in1, in2)",
            "\nreturn tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2) + 1)\n",
            "return tf.math.segment_sum(in1, in2)",
            "return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2)+1)",
            "return tf.math.segment_sum(in1, in2)",
            "return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2) + 1)",
            "return tf.unsorted_segment_sum(in1, in2, tf.reduce_max(in2)+1)",
            "return tf.math.unsorted_segment_sum(in1, in2, 4)",
            "return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2)+1)",
            "return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2) + 1)",
            "segmented_sum = tf.math.segment_sum(in1, in2)\nreturn segmented_sum\n",
            "segmented_sum = tf.math.segment_sum(in1, in2)\nreturn segmented_sum\n",
            "# Sum of elements in the first tensor but partitioned by the second tensor\nresult = tf.math.segment_sum(in1, in2)\nreturn result\n",
            "sum_segments = tf.math.segment_sum(in1, in2)\nreturn sum_segments\n",
            "result = tf.math.segment_sum(in1, in2)\nreturn result\n",
            "result = tf.math.segment_sum(in1, in2)\nreturn result\n"
        ],
        "tf_operators": {
            "tf.reduce_max": 10,
            "tf.math.unsorted_segment_sum": 10,
            "tf.math.segment_sum": 9,
            "tf.unsorted_segment_sum": 1
        },
        "coverage_percentage": 0.0,
        "total_covered": 0,
        "total_in_target": 4,
        "parsed_constants": [
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [],
            [
                1
            ],
            [],
            [
                1
            ],
            [],
            [
                1
            ],
            [
                1
            ],
            [
                4
            ],
            [
                1
            ],
            [
                1
            ],
            [],
            [],
            [],
            [],
            [],
            []
        ],
        "all_constants": [
            1,
            4
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 50,
            "shape": 0,
            "tf_bool": 0,
            "provided": 1,
            "common": 10,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.004081632653061225,
                "tf.add(x, y)": 0.004081632653061225,
                "tf.add_n(inputs)": 0.004081632653061225,
                "tf.argmax(input, axis)": 0.004081632653061225,
                "tf.argmin(input, axis)": 0.004081632653061225,
                "tf.argsort(values, axis, stable=True)": 0.004081632653061225,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.004081632653061225,
                "tf.boolean_mask(tensor, mask)": 0.004081632653061225,
                "tf.broadcast_to(input, shape)": 0.004081632653061225,
                "tf.cast(x, dtype)": 0.004081632653061225,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.004081632653061225,
                "tf.concat(values, axis)": 0.004081632653061225,
                "tf.constant(value)": 0.004081632653061225,
                "tf.constant(value, dtype)": 0.004081632653061225,
                "tf.divide(x, y)": 0.004081632653061225,
                "tf.equal(x, y)": 0.004081632653061225,
                "tf.exp(x)": 0.004081632653061225,
                "tf.expand_dims(input, axis)": 0.004081632653061225,
                "tf.eye(num_rows)": 0.004081632653061225,
                "tf.eye(num_rows, num_columns)": 0.004081632653061225,
                "tf.eye(num_rows, dtype)": 0.004081632653061225,
                "tf.fill(dims, value)": 0.004081632653061225,
                "tf.gather(params, indices)": 0.004081632653061225,
                "tf.gather(params, indices, axis, batch_dims)": 0.004081632653061225,
                "tf.gather_nd(params, indices)": 0.004081632653061225,
                "tf.gather_nd(params, indices, batch_dims)": 0.004081632653061225,
                "tf.greater(x, y)": 0.004081632653061225,
                "tf.greater_equal(x, y)": 0.004081632653061225,
                "tf.math.bincount(arr)": 0.004081632653061225,
                "tf.math.ceil(x)": 0.004081632653061225,
                "tf.math.count_nonzero(input)": 0.004081632653061225,
                "tf.math.count_nonzero(input, axis)": 0.004081632653061225,
                "tf.math.cumsum(x, axis)": 0.004081632653061225,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.004081632653061225,
                "tf.math.divide_no_nan(x, y)": 0.004081632653061225,
                "tf.math.floor(x)": 0.004081632653061225,
                "tf.math.log(x)": 0.004081632653061225,
                "tf.math.logical_and(x, y)": 0.004081632653061225,
                "tf.math.logical_not(x)": 0.004081632653061225,
                "tf.math.logical_or(x, y)": 0.004081632653061225,
                "tf.math.logical_xor(x, y)": 0.004081632653061225,
                "tf.math.negative(x)": 0.004081632653061225,
                "tf.math.reciprocal(x)": 0.004081632653061225,
                "tf.math.reciprocal_no_nan(x)": 0.004081632653061225,
                "tf.math.segment_max(data, segment_ids)": 0.004081632653061225,
                "tf.math.segment_mean(data, segment_ids)": 0.004081632653061225,
                "tf.math.segment_min(data, segment_ids)": 0.004081632653061225,
                "tf.math.segment_prod(data, segment_ids)": 0.004081632653061225,
                "tf.math.segment_sum(data, segment_ids)": 0.04081632653061224,
                "tf.math.squared_difference(x, y)": 0.004081632653061225,
                "tf.math.top_k(input, k)": 0.004081632653061225,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.004081632653061225,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.004081632653061225,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.004081632653061225,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.004081632653061225,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.044897959183673466,
                "tf.matmul(a, b)": 0.004081632653061225,
                "tf.maximum(x, y)": 0.004081632653061225,
                "tf.minimum(x, y)": 0.004081632653061225,
                "tf.multiply(x, y)": 0.004081632653061225,
                "tf.not_equal(x, y)": 0.004081632653061225,
                "tf.one_hot(indices, depth)": 0.004081632653061225,
                "tf.ones(shape)": 0.004081632653061225,
                "tf.ones_like(input)": 0.004081632653061225,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.004081632653061225,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.004081632653061225,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.004081632653061225,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.004081632653061225,
                "tf.range(start)": 0.004081632653061225,
                "tf.range(start, limit, delta)": 0.004081632653061225,
                "tf.reduce_any(input_tensor, axis)": 0.004081632653061225,
                "tf.reduce_all(input_tensor, axis)": 0.004081632653061225,
                "tf.reduce_max(input_tensor)": 0.044897959183673466,
                "tf.reduce_max(input_tensor, axis)": 0.004081632653061225,
                "tf.reduce_mean(input_tensor)": 0.004081632653061225,
                "tf.reduce_mean(input_tensor, axis)": 0.004081632653061225,
                "tf.reduce_min(input_tensor)": 0.004081632653061225,
                "tf.reduce_min(input_tensor, axis)": 0.004081632653061225,
                "tf.reduce_prod(input_tensor, axis)": 0.004081632653061225,
                "tf.reduce_sum(input_tensor)": 0.004081632653061225,
                "tf.reduce_sum(input_tensor, axis)": 0.004081632653061225,
                "tf.repeat(input, repeats)": 0.004081632653061225,
                "tf.repeat(input, repeats, axis)": 0.004081632653061225,
                "tf.reshape(tensor, shape)": 0.004081632653061225,
                "tf.reverse(tensor, axis)": 0.004081632653061225,
                "tf.roll(input, shift, axis)": 0.004081632653061225,
                "tf.round(x)": 0.004081632653061225,
                "tf.scatter_nd(indices, updates, shape)": 0.004081632653061225,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.004081632653061225,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.004081632653061225,
                "tf.sequence_mask(lengths)": 0.004081632653061225,
                "tf.sequence_mask(lengths, maxlen)": 0.004081632653061225,
                "tf.shape(input)": 0.004081632653061225,
                "tf.sign(x)": 0.004081632653061225,
                "tf.sort(values, axis)": 0.004081632653061225,
                "tf.sort(values, axis, direction='DESCENDING')": 0.004081632653061225,
                "tf.sqrt(x)": 0.004081632653061225,
                "tf.square(x)": 0.004081632653061225,
                "tf.squeeze(input)": 0.004081632653061225,
                "tf.squeeze(input, axis)": 0.004081632653061225,
                "tf.stack(values, axis)": 0.004081632653061225,
                "tf.subtract(x, y)": 0.004081632653061225,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.004081632653061225,
                "tf.tensordot(a, b, axes)": 0.004081632653061225,
                "tf.tile(input, multiples)": 0.004081632653061225,
                "tf.transpose(a)": 0.004081632653061225,
                "tf.transpose(a, perm)": 0.004081632653061225,
                "tf.unique_with_counts(x)": 0.004081632653061225,
                "tf.unstack(value, axis)": 0.004081632653061225,
                "tf.where(condition)": 0.004081632653061225,
                "tf.where(condition, x, y)": 0.004081632653061225,
                "tf.zeros(shape)": 0.004081632653061225,
                "tf.zeros_like(input)": 0.004081632653061225,
                "tf.SparseTensor(indices, values, dense_shape)": 0.004081632653061225,
                "tf.sparse.add(a, b)": 0.004081632653061225,
                "tf.sparse.concat(axis, sp_inputs)": 0.004081632653061225,
                "tf.sparse.expand_dims(sp_input, axis)": 0.004081632653061225,
                "tf.sparse.from_dense(tensor)": 0.004081632653061225,
                "tf.sparse.maximum(sp_a, sp_b)": 0.004081632653061225,
                "tf.sparse.minimum(sp_a, sp_b)": 0.004081632653061225,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.004081632653061225,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.004081632653061225,
                "tf.sparse.reset_shape(sp_input)": 0.004081632653061225,
                "tf.sparse.reshape(sp_input, shape)": 0.004081632653061225,
                "tf.sparse.retain(sp_input, to_retain)": 0.004081632653061225,
                "tf.sparse.slice(sp_input, start, size)": 0.004081632653061225,
                "tf.sparse.split(sp_input, num_split, axis)": 0.004081632653061225,
                "tf.sparse.to_dense(sp_input)": 0.004081632653061225,
                "tf.sparse.to_dense(sp_input, default_value)": 0.004081632653061225,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.004081632653061225,
                "tf.sparse.transpose(sp_input)": 0.004081632653061225,
                "tf.sparse.transpose(sp_input, perm)": 0.004081632653061225,
                "IndexingAxis1Operation": 0.004081632653061225,
                "IndexingOperation": 0.004081632653061225,
                "PairCreationOperation": 0.004081632653061225,
                "SingletonTupleCreationOperation": 0.004081632653061225,
                "SlicingAxis0BothOperation": 0.004081632653061225,
                "SlicingAxis0LeftOperation": 0.004081632653061225,
                "SlicingAxis0RightOperation": 0.004081632653061225,
                "SlicingAxis1BothOperation": 0.004081632653061225,
                "SlicingAxis1LeftOperation": 0.004081632653061225,
                "SlicingAxis1RightOperation": 0.004081632653061225,
                "TripleCreationOperation": 0.004081632653061225,
                "PROVIDED_CONSTANT_WEIGHT": 0.00816326530612245,
                "COMMON_CONSTANT_WEIGHT": 0.044897959183673466,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.004081632653061225,
                "INPUT_VARIABLE_WEIGHT": 0.20816326530612245,
                "AXIS_CONSTANT_WEIGHT": 0.004081632653061225,
                "SHAPE_CONSTANT_WEIGHT": 0.004081632653061225,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.004081632653061225,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.004081632653061225,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.004081632653061225,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.004081632653061225,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.004081632653061225
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 8,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 8,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 5,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 4,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 8,
                "tf.pad(tensor, paddings, mode='REFLECT')": 8,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 4,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side='left')": 8,
                "tf.searchsorted(sorted_sequence, values, side='right')": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 8,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction='DESCENDING')": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 8,
                "PairCreationOperation": 8,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 7,
                "COMMON_CONSTANT_WEIGHT": 4,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 2,
                "AXIS_CONSTANT_WEIGHT": 8,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "google_19",
        "description": "scatter a 2-D tensor with indices",
        "target_program": "tf.gather(in1, tf.argsort(in2, axis=1), batch_dims=1)",
        "source": "From an internal Google forum",
        "constants": "[]",
        "examples": {
            "inputs": "[[[11, 12, 13], [30, 20, 10], [77, 88, 99]],[[2, 0, 1], [1, 0, 2], [0, 2, 1]],]",
            "outputs": "[[12, 13, 11],    [20, 30, 10],    [77, 99, 88]]"
        },
        "completions": [
            "return tf.gather_nd(in1, tf.transpose(in2))",
            "output = tf.tensor_scatter_nd_update(in1, in2, tf.gather_nd(in1, in2))\nreturn output\n",
            "return tf.gather_nd(in1, tf.stack([tf.range(in1.shape[0]), in2], axis=1))\n",
            "return tf.gather_nd(in1, in2)\n",
            "return tf.scatter_nd(indices=tf.transpose(in2), updates=in1, shape=tf.shape(in1))\n",
            "return tf.gather_nd(in1, tf.transpose(in2))\n",
            "return tf.gather_nd(in1, in2)",
            "return tf.gather_nd(in1, in2)\n",
            "return tf.transpose(tf.gather_nd(in1, in2))",
            "return tf.gather_nd(in1, tf.stack([tf.range(in1.shape[0]), in2], axis=1))\n",
            "return tf.gather_nd(in1, tf.transpose(tf.stack([tf.range(tf.shape(in1)[0]), in2])))",
            "return tf.gather_nd(in1, tf.transpose(in2))",
            "return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=1))",
            "return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=1))",
            "return tf.gather_nd(in1, tf.stack([tf.range(in1.shape[0]), in2], axis=1))\n",
            "return tf.scatter_nd(in2, in1, [3,3])\n",
            "return tf.scatter_nd(tf.expand_dims(in2, 1), in1, in1.shape)",
            "return tf.scatter_nd(in2, in1, [3, 3])\n",
            "return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1))",
            "output = tf.scatter_nd(indices=tf.transpose(in2), updates=in1, shape=(3,3))\nreturn output\n"
        ],
        "tf_operators": {
            "tf.transpose": 7,
            "tf.gather_nd": 15,
            "tf.tensor_scatter_nd_update": 1,
            "tf.range": 7,
            "tf.stack": 7,
            "tf.shape": 5,
            "tf.scatter_nd": 5,
            "tf.expand_dims": 1
        },
        "coverage_percentage": 0.0,
        "total_covered": 0,
        "total_in_target": 2,
        "parsed_constants": [
            [],
            [],
            [
                0,
                1
            ],
            [],
            [],
            [],
            [],
            [],
            [],
            [
                0,
                1
            ],
            [
                0
            ],
            [],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                3,
                3
            ],
            [
                1
            ],
            [
                3,
                3
            ],
            [
                0,
                1
            ],
            [
                3,
                3
            ]
        ],
        "all_constants": [
            0,
            1,
            3
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 2,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 2,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 1
            }
        ],
        "aggregate_constant_count": {
            "input_var": 47,
            "shape": 4,
            "tf_bool": 0,
            "provided": 0,
            "common": 14,
            "shape_tuple": 1,
            "tf_float32": 0,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.0036101083032490976,
                "tf.add(x, y)": 0.0036101083032490976,
                "tf.add_n(inputs)": 0.0036101083032490976,
                "tf.argmax(input, axis)": 0.0036101083032490976,
                "tf.argmin(input, axis)": 0.0036101083032490976,
                "tf.argsort(values, axis, stable=True)": 0.0036101083032490976,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.0036101083032490976,
                "tf.boolean_mask(tensor, mask)": 0.0036101083032490976,
                "tf.broadcast_to(input, shape)": 0.0036101083032490976,
                "tf.cast(x, dtype)": 0.0036101083032490976,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.0036101083032490976,
                "tf.concat(values, axis)": 0.0036101083032490976,
                "tf.constant(value)": 0.0036101083032490976,
                "tf.constant(value, dtype)": 0.0036101083032490976,
                "tf.divide(x, y)": 0.0036101083032490976,
                "tf.equal(x, y)": 0.0036101083032490976,
                "tf.exp(x)": 0.0036101083032490976,
                "tf.expand_dims(input, axis)": 0.007220216606498195,
                "tf.eye(num_rows)": 0.0036101083032490976,
                "tf.eye(num_rows, num_columns)": 0.0036101083032490976,
                "tf.eye(num_rows, dtype)": 0.0036101083032490976,
                "tf.fill(dims, value)": 0.0036101083032490976,
                "tf.gather(params, indices)": 0.0036101083032490976,
                "tf.gather(params, indices, axis, batch_dims)": 0.0036101083032490976,
                "tf.gather_nd(params, indices)": 0.05776173285198556,
                "tf.gather_nd(params, indices, batch_dims)": 0.0036101083032490976,
                "tf.greater(x, y)": 0.0036101083032490976,
                "tf.greater_equal(x, y)": 0.0036101083032490976,
                "tf.math.bincount(arr)": 0.0036101083032490976,
                "tf.math.ceil(x)": 0.0036101083032490976,
                "tf.math.count_nonzero(input)": 0.0036101083032490976,
                "tf.math.count_nonzero(input, axis)": 0.0036101083032490976,
                "tf.math.cumsum(x, axis)": 0.0036101083032490976,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.0036101083032490976,
                "tf.math.divide_no_nan(x, y)": 0.0036101083032490976,
                "tf.math.floor(x)": 0.0036101083032490976,
                "tf.math.log(x)": 0.0036101083032490976,
                "tf.math.logical_and(x, y)": 0.0036101083032490976,
                "tf.math.logical_not(x)": 0.0036101083032490976,
                "tf.math.logical_or(x, y)": 0.0036101083032490976,
                "tf.math.logical_xor(x, y)": 0.0036101083032490976,
                "tf.math.negative(x)": 0.0036101083032490976,
                "tf.math.reciprocal(x)": 0.0036101083032490976,
                "tf.math.reciprocal_no_nan(x)": 0.0036101083032490976,
                "tf.math.segment_max(data, segment_ids)": 0.0036101083032490976,
                "tf.math.segment_mean(data, segment_ids)": 0.0036101083032490976,
                "tf.math.segment_min(data, segment_ids)": 0.0036101083032490976,
                "tf.math.segment_prod(data, segment_ids)": 0.0036101083032490976,
                "tf.math.segment_sum(data, segment_ids)": 0.0036101083032490976,
                "tf.math.squared_difference(x, y)": 0.0036101083032490976,
                "tf.math.top_k(input, k)": 0.0036101083032490976,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.0036101083032490976,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.0036101083032490976,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.0036101083032490976,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.0036101083032490976,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.0036101083032490976,
                "tf.matmul(a, b)": 0.0036101083032490976,
                "tf.maximum(x, y)": 0.0036101083032490976,
                "tf.minimum(x, y)": 0.0036101083032490976,
                "tf.multiply(x, y)": 0.0036101083032490976,
                "tf.not_equal(x, y)": 0.0036101083032490976,
                "tf.one_hot(indices, depth)": 0.0036101083032490976,
                "tf.ones(shape)": 0.0036101083032490976,
                "tf.ones_like(input)": 0.0036101083032490976,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.0036101083032490976,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.0036101083032490976,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.0036101083032490976,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.0036101083032490976,
                "tf.range(start)": 0.02888086642599278,
                "tf.range(start, limit, delta)": 0.0036101083032490976,
                "tf.reduce_any(input_tensor, axis)": 0.0036101083032490976,
                "tf.reduce_all(input_tensor, axis)": 0.0036101083032490976,
                "tf.reduce_max(input_tensor)": 0.0036101083032490976,
                "tf.reduce_max(input_tensor, axis)": 0.0036101083032490976,
                "tf.reduce_mean(input_tensor)": 0.0036101083032490976,
                "tf.reduce_mean(input_tensor, axis)": 0.0036101083032490976,
                "tf.reduce_min(input_tensor)": 0.0036101083032490976,
                "tf.reduce_min(input_tensor, axis)": 0.0036101083032490976,
                "tf.reduce_prod(input_tensor, axis)": 0.0036101083032490976,
                "tf.reduce_sum(input_tensor)": 0.0036101083032490976,
                "tf.reduce_sum(input_tensor, axis)": 0.0036101083032490976,
                "tf.repeat(input, repeats)": 0.0036101083032490976,
                "tf.repeat(input, repeats, axis)": 0.0036101083032490976,
                "tf.reshape(tensor, shape)": 0.0036101083032490976,
                "tf.reverse(tensor, axis)": 0.0036101083032490976,
                "tf.roll(input, shift, axis)": 0.0036101083032490976,
                "tf.round(x)": 0.0036101083032490976,
                "tf.scatter_nd(indices, updates, shape)": 0.021660649819494584,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.0036101083032490976,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.0036101083032490976,
                "tf.sequence_mask(lengths)": 0.0036101083032490976,
                "tf.sequence_mask(lengths, maxlen)": 0.0036101083032490976,
                "tf.shape(input)": 0.021660649819494584,
                "tf.sign(x)": 0.0036101083032490976,
                "tf.sort(values, axis)": 0.0036101083032490976,
                "tf.sort(values, axis, direction='DESCENDING')": 0.0036101083032490976,
                "tf.sqrt(x)": 0.0036101083032490976,
                "tf.square(x)": 0.0036101083032490976,
                "tf.squeeze(input)": 0.0036101083032490976,
                "tf.squeeze(input, axis)": 0.0036101083032490976,
                "tf.stack(values, axis)": 0.02888086642599278,
                "tf.subtract(x, y)": 0.0036101083032490976,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.007220216606498195,
                "tf.tensordot(a, b, axes)": 0.0036101083032490976,
                "tf.tile(input, multiples)": 0.0036101083032490976,
                "tf.transpose(a)": 0.02888086642599278,
                "tf.transpose(a, perm)": 0.0036101083032490976,
                "tf.unique_with_counts(x)": 0.0036101083032490976,
                "tf.unstack(value, axis)": 0.0036101083032490976,
                "tf.where(condition)": 0.0036101083032490976,
                "tf.where(condition, x, y)": 0.0036101083032490976,
                "tf.zeros(shape)": 0.0036101083032490976,
                "tf.zeros_like(input)": 0.0036101083032490976,
                "tf.SparseTensor(indices, values, dense_shape)": 0.0036101083032490976,
                "tf.sparse.add(a, b)": 0.0036101083032490976,
                "tf.sparse.concat(axis, sp_inputs)": 0.0036101083032490976,
                "tf.sparse.expand_dims(sp_input, axis)": 0.0036101083032490976,
                "tf.sparse.from_dense(tensor)": 0.0036101083032490976,
                "tf.sparse.maximum(sp_a, sp_b)": 0.0036101083032490976,
                "tf.sparse.minimum(sp_a, sp_b)": 0.0036101083032490976,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.0036101083032490976,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.0036101083032490976,
                "tf.sparse.reset_shape(sp_input)": 0.0036101083032490976,
                "tf.sparse.reshape(sp_input, shape)": 0.0036101083032490976,
                "tf.sparse.retain(sp_input, to_retain)": 0.0036101083032490976,
                "tf.sparse.slice(sp_input, start, size)": 0.0036101083032490976,
                "tf.sparse.split(sp_input, num_split, axis)": 0.0036101083032490976,
                "tf.sparse.to_dense(sp_input)": 0.0036101083032490976,
                "tf.sparse.to_dense(sp_input, default_value)": 0.0036101083032490976,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.0036101083032490976,
                "tf.sparse.transpose(sp_input)": 0.0036101083032490976,
                "tf.sparse.transpose(sp_input, perm)": 0.0036101083032490976,
                "IndexingAxis1Operation": 0.0036101083032490976,
                "IndexingOperation": 0.02888086642599278,
                "PairCreationOperation": 0.007220216606498195,
                "SingletonTupleCreationOperation": 0.0036101083032490976,
                "SlicingAxis0BothOperation": 0.0036101083032490976,
                "SlicingAxis0LeftOperation": 0.0036101083032490976,
                "SlicingAxis0RightOperation": 0.0036101083032490976,
                "SlicingAxis1BothOperation": 0.0036101083032490976,
                "SlicingAxis1LeftOperation": 0.0036101083032490976,
                "SlicingAxis1RightOperation": 0.0036101083032490976,
                "TripleCreationOperation": 0.0036101083032490976,
                "PROVIDED_CONSTANT_WEIGHT": 0.0036101083032490976,
                "COMMON_CONSTANT_WEIGHT": 0.05415162454873646,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.0036101083032490976,
                "INPUT_VARIABLE_WEIGHT": 0.17328519855595667,
                "AXIS_CONSTANT_WEIGHT": 0.0036101083032490976,
                "SHAPE_CONSTANT_WEIGHT": 0.018050541516245487,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.007220216606498195,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.0036101083032490976,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.0036101083032490976,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.0036101083032490976,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.0036101083032490976
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 8,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 7,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 4,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 8,
                "tf.pad(tensor, paddings, mode='REFLECT')": 8,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 8,
                "tf.range(start)": 5,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 6,
                "tf.searchsorted(sorted_sequence, values, side='left')": 8,
                "tf.searchsorted(sorted_sequence, values, side='right')": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 6,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction='DESCENDING')": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 5,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 7,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 5,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 5,
                "PairCreationOperation": 7,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 4,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 3,
                "AXIS_CONSTANT_WEIGHT": 8,
                "SHAPE_CONSTANT_WEIGHT": 6,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 7,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "google_20",
        "description": "sort a tensor and return sorted index in original order",
        "target_program": "tf.cast(tf.argsort(tf.argsort(in1)), tf.int32)",
        "source": "From an internal Google forum",
        "constants": "[]",
        "examples": {
            "inputs": "[[10, 7, 4, 3, 2, 8],]",
            "outputs": "[5, 3, 2, 1, 0, 4]"
        },
        "completions": [
            "def transform(in1):\n    sorted_indices = tf.argsort(in1)\n    return sorted_indices\n",
            "return tf.argsort(in1)",
            "sorted_indices = tf.argsort(in1)\n",
            "return tf.argsort(in1)",
            "return tf.argsort(in1, axis=-1)",
            "return tf.argsort(in1, direction='ASCENDING')",
            "return tf.argsort(in1, axis=0)\n",
            "return tf.argsort(in1)",
            "return tf.argsort(in1)",
            "return tf.argsort(in1)",
            "return tf.argsort(in1, axis=0)",
            "return tf.argsort(in1)",
            "sorted_indices = tf.argsort(in1)\n",
            "sorted_indices = tf.argsort(in1)\n",
            "return tf.argsort(in1)",
            "def transform(in1):\n    return tf.argsort(in1)\n",
            "return tf.argsort(in1)",
            "sorted_indices = tf.argsort(in1)\n",
            "return tf.argsort(in1)",
            "return tf.argsort(in1)\n"
        ],
        "tf_operators": {
            "tf.argsort": 20
        },
        "coverage_percentage": 33.33333333333333,
        "total_covered": 1,
        "total_in_target": 3,
        "parsed_constants": [
            [],
            [],
            [],
            [],
            [
                -1
            ],
            [],
            [
                0
            ],
            [],
            [],
            [],
            [
                0
            ],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            []
        ],
        "all_constants": [
            0,
            -1
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 20,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 3,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.005494505494505495,
                "tf.add(x, y)": 0.005494505494505495,
                "tf.add_n(inputs)": 0.005494505494505495,
                "tf.argmax(input, axis)": 0.005494505494505495,
                "tf.argmin(input, axis)": 0.005494505494505495,
                "tf.argsort(values, axis, stable=True)": 0.027472527472527472,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.005494505494505495,
                "tf.boolean_mask(tensor, mask)": 0.005494505494505495,
                "tf.broadcast_to(input, shape)": 0.005494505494505495,
                "tf.cast(x, dtype)": 0.005494505494505495,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.005494505494505495,
                "tf.concat(values, axis)": 0.005494505494505495,
                "tf.constant(value)": 0.005494505494505495,
                "tf.constant(value, dtype)": 0.005494505494505495,
                "tf.divide(x, y)": 0.005494505494505495,
                "tf.equal(x, y)": 0.005494505494505495,
                "tf.exp(x)": 0.005494505494505495,
                "tf.expand_dims(input, axis)": 0.005494505494505495,
                "tf.eye(num_rows)": 0.005494505494505495,
                "tf.eye(num_rows, num_columns)": 0.005494505494505495,
                "tf.eye(num_rows, dtype)": 0.005494505494505495,
                "tf.fill(dims, value)": 0.005494505494505495,
                "tf.gather(params, indices)": 0.005494505494505495,
                "tf.gather(params, indices, axis, batch_dims)": 0.005494505494505495,
                "tf.gather_nd(params, indices)": 0.005494505494505495,
                "tf.gather_nd(params, indices, batch_dims)": 0.005494505494505495,
                "tf.greater(x, y)": 0.005494505494505495,
                "tf.greater_equal(x, y)": 0.005494505494505495,
                "tf.math.bincount(arr)": 0.005494505494505495,
                "tf.math.ceil(x)": 0.005494505494505495,
                "tf.math.count_nonzero(input)": 0.005494505494505495,
                "tf.math.count_nonzero(input, axis)": 0.005494505494505495,
                "tf.math.cumsum(x, axis)": 0.005494505494505495,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.005494505494505495,
                "tf.math.divide_no_nan(x, y)": 0.005494505494505495,
                "tf.math.floor(x)": 0.005494505494505495,
                "tf.math.log(x)": 0.005494505494505495,
                "tf.math.logical_and(x, y)": 0.005494505494505495,
                "tf.math.logical_not(x)": 0.005494505494505495,
                "tf.math.logical_or(x, y)": 0.005494505494505495,
                "tf.math.logical_xor(x, y)": 0.005494505494505495,
                "tf.math.negative(x)": 0.005494505494505495,
                "tf.math.reciprocal(x)": 0.005494505494505495,
                "tf.math.reciprocal_no_nan(x)": 0.005494505494505495,
                "tf.math.segment_max(data, segment_ids)": 0.005494505494505495,
                "tf.math.segment_mean(data, segment_ids)": 0.005494505494505495,
                "tf.math.segment_min(data, segment_ids)": 0.005494505494505495,
                "tf.math.segment_prod(data, segment_ids)": 0.005494505494505495,
                "tf.math.segment_sum(data, segment_ids)": 0.005494505494505495,
                "tf.math.squared_difference(x, y)": 0.005494505494505495,
                "tf.math.top_k(input, k)": 0.005494505494505495,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.005494505494505495,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.005494505494505495,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.005494505494505495,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.005494505494505495,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.005494505494505495,
                "tf.matmul(a, b)": 0.005494505494505495,
                "tf.maximum(x, y)": 0.005494505494505495,
                "tf.minimum(x, y)": 0.005494505494505495,
                "tf.multiply(x, y)": 0.005494505494505495,
                "tf.not_equal(x, y)": 0.005494505494505495,
                "tf.one_hot(indices, depth)": 0.005494505494505495,
                "tf.ones(shape)": 0.005494505494505495,
                "tf.ones_like(input)": 0.005494505494505495,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.005494505494505495,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.005494505494505495,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.005494505494505495,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.005494505494505495,
                "tf.range(start)": 0.005494505494505495,
                "tf.range(start, limit, delta)": 0.005494505494505495,
                "tf.reduce_any(input_tensor, axis)": 0.005494505494505495,
                "tf.reduce_all(input_tensor, axis)": 0.005494505494505495,
                "tf.reduce_max(input_tensor)": 0.005494505494505495,
                "tf.reduce_max(input_tensor, axis)": 0.005494505494505495,
                "tf.reduce_mean(input_tensor)": 0.005494505494505495,
                "tf.reduce_mean(input_tensor, axis)": 0.005494505494505495,
                "tf.reduce_min(input_tensor)": 0.005494505494505495,
                "tf.reduce_min(input_tensor, axis)": 0.005494505494505495,
                "tf.reduce_prod(input_tensor, axis)": 0.005494505494505495,
                "tf.reduce_sum(input_tensor)": 0.005494505494505495,
                "tf.reduce_sum(input_tensor, axis)": 0.005494505494505495,
                "tf.repeat(input, repeats)": 0.005494505494505495,
                "tf.repeat(input, repeats, axis)": 0.005494505494505495,
                "tf.reshape(tensor, shape)": 0.005494505494505495,
                "tf.reverse(tensor, axis)": 0.005494505494505495,
                "tf.roll(input, shift, axis)": 0.005494505494505495,
                "tf.round(x)": 0.005494505494505495,
                "tf.scatter_nd(indices, updates, shape)": 0.005494505494505495,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.005494505494505495,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.005494505494505495,
                "tf.sequence_mask(lengths)": 0.005494505494505495,
                "tf.sequence_mask(lengths, maxlen)": 0.005494505494505495,
                "tf.shape(input)": 0.005494505494505495,
                "tf.sign(x)": 0.005494505494505495,
                "tf.sort(values, axis)": 0.005494505494505495,
                "tf.sort(values, axis, direction='DESCENDING')": 0.005494505494505495,
                "tf.sqrt(x)": 0.005494505494505495,
                "tf.square(x)": 0.005494505494505495,
                "tf.squeeze(input)": 0.005494505494505495,
                "tf.squeeze(input, axis)": 0.005494505494505495,
                "tf.stack(values, axis)": 0.005494505494505495,
                "tf.subtract(x, y)": 0.005494505494505495,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.005494505494505495,
                "tf.tensordot(a, b, axes)": 0.005494505494505495,
                "tf.tile(input, multiples)": 0.005494505494505495,
                "tf.transpose(a)": 0.005494505494505495,
                "tf.transpose(a, perm)": 0.005494505494505495,
                "tf.unique_with_counts(x)": 0.005494505494505495,
                "tf.unstack(value, axis)": 0.005494505494505495,
                "tf.where(condition)": 0.005494505494505495,
                "tf.where(condition, x, y)": 0.005494505494505495,
                "tf.zeros(shape)": 0.005494505494505495,
                "tf.zeros_like(input)": 0.005494505494505495,
                "tf.SparseTensor(indices, values, dense_shape)": 0.005494505494505495,
                "tf.sparse.add(a, b)": 0.005494505494505495,
                "tf.sparse.concat(axis, sp_inputs)": 0.005494505494505495,
                "tf.sparse.expand_dims(sp_input, axis)": 0.005494505494505495,
                "tf.sparse.from_dense(tensor)": 0.005494505494505495,
                "tf.sparse.maximum(sp_a, sp_b)": 0.005494505494505495,
                "tf.sparse.minimum(sp_a, sp_b)": 0.005494505494505495,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.005494505494505495,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.005494505494505495,
                "tf.sparse.reset_shape(sp_input)": 0.005494505494505495,
                "tf.sparse.reshape(sp_input, shape)": 0.005494505494505495,
                "tf.sparse.retain(sp_input, to_retain)": 0.005494505494505495,
                "tf.sparse.slice(sp_input, start, size)": 0.005494505494505495,
                "tf.sparse.split(sp_input, num_split, axis)": 0.005494505494505495,
                "tf.sparse.to_dense(sp_input)": 0.005494505494505495,
                "tf.sparse.to_dense(sp_input, default_value)": 0.005494505494505495,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.005494505494505495,
                "tf.sparse.transpose(sp_input)": 0.005494505494505495,
                "tf.sparse.transpose(sp_input, perm)": 0.005494505494505495,
                "IndexingAxis1Operation": 0.005494505494505495,
                "IndexingOperation": 0.005494505494505495,
                "PairCreationOperation": 0.005494505494505495,
                "SingletonTupleCreationOperation": 0.005494505494505495,
                "SlicingAxis0BothOperation": 0.005494505494505495,
                "SlicingAxis0LeftOperation": 0.005494505494505495,
                "SlicingAxis0RightOperation": 0.005494505494505495,
                "SlicingAxis1BothOperation": 0.005494505494505495,
                "SlicingAxis1LeftOperation": 0.005494505494505495,
                "SlicingAxis1RightOperation": 0.005494505494505495,
                "TripleCreationOperation": 0.005494505494505495,
                "PROVIDED_CONSTANT_WEIGHT": 0.005494505494505495,
                "COMMON_CONSTANT_WEIGHT": 0.02197802197802198,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.005494505494505495,
                "INPUT_VARIABLE_WEIGHT": 0.11538461538461539,
                "AXIS_CONSTANT_WEIGHT": 0.005494505494505495,
                "SHAPE_CONSTANT_WEIGHT": 0.005494505494505495,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.005494505494505495,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.005494505494505495,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.005494505494505495,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.005494505494505495,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.005494505494505495
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 5,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 8,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 8,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 8,
                "tf.pad(tensor, paddings, mode='REFLECT')": 8,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side='left')": 8,
                "tf.searchsorted(sorted_sequence, values, side='right')": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 8,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction='DESCENDING')": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 8,
                "PairCreationOperation": 8,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 6,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 3,
                "AXIS_CONSTANT_WEIGHT": 8,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "google_21",
        "description": "update a tensor at the given indices",
        "target_program": "tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, (-1,)))",
        "source": "Real task encountered by Googler, 12/15/2020",
        "constants": "[]",
        "examples": {
            "inputs": "{'tensor': [[1, 2, 3, 4, 5], [4, 5, 6, 7, 8], [7, 8, 9, 10, 11]], 'indices': [[0, 0], [0, 2], [1, 1], [1, 3], [2, 2], [2, 4]], 'updates': [[0, -2], [-1, -3], [-2, -4]],}",
            "outputs": "[[0, 2, -2, 4, 5], [4, -1, 6, -3, 8], [7, 8, -2, 10, -4]]"
        },
        "completions": [
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n"
        ],
        "tf_operators": {
            "tf.tensor_scatter_nd_update": 20
        },
        "coverage_percentage": 50.0,
        "total_covered": 1,
        "total_in_target": 2,
        "parsed_constants": [
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            []
        ],
        "all_constants": [],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 60,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 0,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.00425531914893617,
                "tf.add(x, y)": 0.00425531914893617,
                "tf.add_n(inputs)": 0.00425531914893617,
                "tf.argmax(input, axis)": 0.00425531914893617,
                "tf.argmin(input, axis)": 0.00425531914893617,
                "tf.argsort(values, axis, stable=True)": 0.00425531914893617,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.00425531914893617,
                "tf.boolean_mask(tensor, mask)": 0.00425531914893617,
                "tf.broadcast_to(input, shape)": 0.00425531914893617,
                "tf.cast(x, dtype)": 0.00425531914893617,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.00425531914893617,
                "tf.concat(values, axis)": 0.00425531914893617,
                "tf.constant(value)": 0.00425531914893617,
                "tf.constant(value, dtype)": 0.00425531914893617,
                "tf.divide(x, y)": 0.00425531914893617,
                "tf.equal(x, y)": 0.00425531914893617,
                "tf.exp(x)": 0.00425531914893617,
                "tf.expand_dims(input, axis)": 0.00425531914893617,
                "tf.eye(num_rows)": 0.00425531914893617,
                "tf.eye(num_rows, num_columns)": 0.00425531914893617,
                "tf.eye(num_rows, dtype)": 0.00425531914893617,
                "tf.fill(dims, value)": 0.00425531914893617,
                "tf.gather(params, indices)": 0.00425531914893617,
                "tf.gather(params, indices, axis, batch_dims)": 0.00425531914893617,
                "tf.gather_nd(params, indices)": 0.00425531914893617,
                "tf.gather_nd(params, indices, batch_dims)": 0.00425531914893617,
                "tf.greater(x, y)": 0.00425531914893617,
                "tf.greater_equal(x, y)": 0.00425531914893617,
                "tf.math.bincount(arr)": 0.00425531914893617,
                "tf.math.ceil(x)": 0.00425531914893617,
                "tf.math.count_nonzero(input)": 0.00425531914893617,
                "tf.math.count_nonzero(input, axis)": 0.00425531914893617,
                "tf.math.cumsum(x, axis)": 0.00425531914893617,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.00425531914893617,
                "tf.math.divide_no_nan(x, y)": 0.00425531914893617,
                "tf.math.floor(x)": 0.00425531914893617,
                "tf.math.log(x)": 0.00425531914893617,
                "tf.math.logical_and(x, y)": 0.00425531914893617,
                "tf.math.logical_not(x)": 0.00425531914893617,
                "tf.math.logical_or(x, y)": 0.00425531914893617,
                "tf.math.logical_xor(x, y)": 0.00425531914893617,
                "tf.math.negative(x)": 0.00425531914893617,
                "tf.math.reciprocal(x)": 0.00425531914893617,
                "tf.math.reciprocal_no_nan(x)": 0.00425531914893617,
                "tf.math.segment_max(data, segment_ids)": 0.00425531914893617,
                "tf.math.segment_mean(data, segment_ids)": 0.00425531914893617,
                "tf.math.segment_min(data, segment_ids)": 0.00425531914893617,
                "tf.math.segment_prod(data, segment_ids)": 0.00425531914893617,
                "tf.math.segment_sum(data, segment_ids)": 0.00425531914893617,
                "tf.math.squared_difference(x, y)": 0.00425531914893617,
                "tf.math.top_k(input, k)": 0.00425531914893617,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.00425531914893617,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.00425531914893617,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.00425531914893617,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.00425531914893617,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.00425531914893617,
                "tf.matmul(a, b)": 0.00425531914893617,
                "tf.maximum(x, y)": 0.00425531914893617,
                "tf.minimum(x, y)": 0.00425531914893617,
                "tf.multiply(x, y)": 0.00425531914893617,
                "tf.not_equal(x, y)": 0.00425531914893617,
                "tf.one_hot(indices, depth)": 0.00425531914893617,
                "tf.ones(shape)": 0.00425531914893617,
                "tf.ones_like(input)": 0.00425531914893617,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.00425531914893617,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.00425531914893617,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.00425531914893617,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.00425531914893617,
                "tf.range(start)": 0.00425531914893617,
                "tf.range(start, limit, delta)": 0.00425531914893617,
                "tf.reduce_any(input_tensor, axis)": 0.00425531914893617,
                "tf.reduce_all(input_tensor, axis)": 0.00425531914893617,
                "tf.reduce_max(input_tensor)": 0.00425531914893617,
                "tf.reduce_max(input_tensor, axis)": 0.00425531914893617,
                "tf.reduce_mean(input_tensor)": 0.00425531914893617,
                "tf.reduce_mean(input_tensor, axis)": 0.00425531914893617,
                "tf.reduce_min(input_tensor)": 0.00425531914893617,
                "tf.reduce_min(input_tensor, axis)": 0.00425531914893617,
                "tf.reduce_prod(input_tensor, axis)": 0.00425531914893617,
                "tf.reduce_sum(input_tensor)": 0.00425531914893617,
                "tf.reduce_sum(input_tensor, axis)": 0.00425531914893617,
                "tf.repeat(input, repeats)": 0.00425531914893617,
                "tf.repeat(input, repeats, axis)": 0.00425531914893617,
                "tf.reshape(tensor, shape)": 0.00425531914893617,
                "tf.reverse(tensor, axis)": 0.00425531914893617,
                "tf.roll(input, shift, axis)": 0.00425531914893617,
                "tf.round(x)": 0.00425531914893617,
                "tf.scatter_nd(indices, updates, shape)": 0.00425531914893617,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.00425531914893617,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.00425531914893617,
                "tf.sequence_mask(lengths)": 0.00425531914893617,
                "tf.sequence_mask(lengths, maxlen)": 0.00425531914893617,
                "tf.shape(input)": 0.00425531914893617,
                "tf.sign(x)": 0.00425531914893617,
                "tf.sort(values, axis)": 0.00425531914893617,
                "tf.sort(values, axis, direction='DESCENDING')": 0.00425531914893617,
                "tf.sqrt(x)": 0.00425531914893617,
                "tf.square(x)": 0.00425531914893617,
                "tf.squeeze(input)": 0.00425531914893617,
                "tf.squeeze(input, axis)": 0.00425531914893617,
                "tf.stack(values, axis)": 0.00425531914893617,
                "tf.subtract(x, y)": 0.00425531914893617,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.08936170212765958,
                "tf.tensordot(a, b, axes)": 0.00425531914893617,
                "tf.tile(input, multiples)": 0.00425531914893617,
                "tf.transpose(a)": 0.00425531914893617,
                "tf.transpose(a, perm)": 0.00425531914893617,
                "tf.unique_with_counts(x)": 0.00425531914893617,
                "tf.unstack(value, axis)": 0.00425531914893617,
                "tf.where(condition)": 0.00425531914893617,
                "tf.where(condition, x, y)": 0.00425531914893617,
                "tf.zeros(shape)": 0.00425531914893617,
                "tf.zeros_like(input)": 0.00425531914893617,
                "tf.SparseTensor(indices, values, dense_shape)": 0.00425531914893617,
                "tf.sparse.add(a, b)": 0.00425531914893617,
                "tf.sparse.concat(axis, sp_inputs)": 0.00425531914893617,
                "tf.sparse.expand_dims(sp_input, axis)": 0.00425531914893617,
                "tf.sparse.from_dense(tensor)": 0.00425531914893617,
                "tf.sparse.maximum(sp_a, sp_b)": 0.00425531914893617,
                "tf.sparse.minimum(sp_a, sp_b)": 0.00425531914893617,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.00425531914893617,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.00425531914893617,
                "tf.sparse.reset_shape(sp_input)": 0.00425531914893617,
                "tf.sparse.reshape(sp_input, shape)": 0.00425531914893617,
                "tf.sparse.retain(sp_input, to_retain)": 0.00425531914893617,
                "tf.sparse.slice(sp_input, start, size)": 0.00425531914893617,
                "tf.sparse.split(sp_input, num_split, axis)": 0.00425531914893617,
                "tf.sparse.to_dense(sp_input)": 0.00425531914893617,
                "tf.sparse.to_dense(sp_input, default_value)": 0.00425531914893617,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.00425531914893617,
                "tf.sparse.transpose(sp_input)": 0.00425531914893617,
                "tf.sparse.transpose(sp_input, perm)": 0.00425531914893617,
                "IndexingAxis1Operation": 0.00425531914893617,
                "IndexingOperation": 0.00425531914893617,
                "PairCreationOperation": 0.00425531914893617,
                "SingletonTupleCreationOperation": 0.00425531914893617,
                "SlicingAxis0BothOperation": 0.00425531914893617,
                "SlicingAxis0LeftOperation": 0.00425531914893617,
                "SlicingAxis0RightOperation": 0.00425531914893617,
                "SlicingAxis1BothOperation": 0.00425531914893617,
                "SlicingAxis1LeftOperation": 0.00425531914893617,
                "SlicingAxis1RightOperation": 0.00425531914893617,
                "TripleCreationOperation": 0.00425531914893617,
                "PROVIDED_CONSTANT_WEIGHT": 0.00425531914893617,
                "COMMON_CONSTANT_WEIGHT": 0.00425531914893617,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.00425531914893617,
                "INPUT_VARIABLE_WEIGHT": 0.25957446808510637,
                "AXIS_CONSTANT_WEIGHT": 0.00425531914893617,
                "SHAPE_CONSTANT_WEIGHT": 0.00425531914893617,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.00425531914893617,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.00425531914893617,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.00425531914893617,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.00425531914893617,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.00425531914893617
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 8,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 8,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 8,
                "tf.pad(tensor, paddings, mode='REFLECT')": 8,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side='left')": 8,
                "tf.searchsorted(sorted_sequence, values, side='right')": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 8,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction='DESCENDING')": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 3,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 8,
                "PairCreationOperation": 8,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 8,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 2,
                "AXIS_CONSTANT_WEIGHT": 8,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "google_22",
        "description": "pair with row index",
        "target_program": "tf.cast(tf.where(tf.reduce_max(tf.one_hot(in1, tf.reduce_max(in1) + 1), axis=1)), tf.int32)",
        "source": "Real task encountered by Googler, 12/15/2020",
        "constants": "[]",
        "examples": {
            "inputs": "[[[0, 2], [1, 3], [2, 4]],]",
            "outputs": "[[0, 0], [0, 2], [1, 1], [1, 3], [2, 2], [2, 4]]"
        },
        "completions": [
            "return tf.tile(tf.expand_dims(in1, 1), [1, 2])\n",
            "def transform(in1):\n    return tf.repeat(in1, repeats=2, axis=0)  # pair with row index\n",
            "def transform(in1):\n    row_indices = tf.range(tf.cast(tf.shape(in1)[0], tf.int64))\n    pair_indices = tf.repeat(row_indices, repeats=2)\n    new_indices = tf.transpose(tf.stack([pair_indices, tf.reshape(in1, [-1])]))\n    return new_indices\n",
            "return tf.repeat(in1, repeats=2, axis=1)\n",
            "indices = tf.expand_dims(tf.range(tf.shape(in1)[0]), 1)\nreturn tf.concat([tf.reshape(tf.tile(indices, [1, 2]), [-1, 1]), in1], axis=1)\n",
            "indices = tf.reshape(tf.stack(tf.meshgrid(tf.range(tf.shape(in1)[0]), tf.constant([0]), indexing='ij'), -1), [-1, 1])\nreturn tf.concat([indices, in1], axis=1)\n",
            "def transform(in1):\n    pair_indices = tf.repeat(tf.range(tf.shape(in1)[0]), 2)\n    row_indices = tf.tile(tf.range(2), tf.shape(in1)[0])\n    return tf.stack([pair_indices, in1[row_indices]], axis=1)\n",
            "indices = tf.argsort(tf.reshape(tf.range(tf.shape(in1)[0]), [-1, 1]), direction='ASCENDING')\nreturn tf.gather_nd(tf.tile(in1, [2, 1]), indices)\n",
            "indices = tf.range(tf.shape(in1)[0])\nreturn tf.tile(tf.expand_dims(indices, 1), [1, 2])\n",
            "return tf.repeat(in1, [2, 2, 2], axis=0)",
            "return tf.repeat(in1, repeats=2, axis=0) // tf.shape(in1)[1]\n",
            "return tf.repeat(in1, 2, axis=0)\n",
            "indices = tf.argsort(in1[:, 0])\nreturn tf.gather(in1, indices)\n",
            "return tf.repeat(in1, 2, axis=0)",
            "return tf.repeat(in1, 2, axis=1)\n",
            "return tf.tile(in1, multiples=[2, 1])",
            "return tf.repeat(in1, repeats=2, axis=0)\n",
            "row_indices = tf.range(in1.shape[0])\nrepeated_indices = tf.repeat(row_indices, repeats=2, axis=0)\nreturn tf.stack([tf.tile(in1, multiples=[1, 1]), tf.tile(tf.expand_dims(in1, axis=1), multiples=[1, 2])], axis=1)\n",
            "return tf.repeat(in1, 2, axis=0)\n",
            "return tf.repeat(in1, repeats=2, axis=0) - tf.concat([tf.range(tf.shape(in1)[0]), tf.range(tf.shape(in1)[0])], axis=0)\n"
        ],
        "tf_operators": {
            "tf.tile": 7,
            "tf.expand_dims": 4,
            "tf.repeat": 13,
            "tf.transpose": 1,
            "tf.int64": 1,
            "tf.shape": 8,
            "tf.range": 8,
            "tf.cast": 1,
            "tf.stack": 4,
            "tf.reshape": 4,
            "tf.concat": 3,
            "tf.meshgrid": 1,
            "tf.constant": 1,
            "tf.gather_nd": 1,
            "tf.argsort": 2,
            "tf.gather": 1
        },
        "coverage_percentage": 20.0,
        "total_covered": 1,
        "total_in_target": 5,
        "parsed_constants": [
            [
                1,
                1,
                2
            ],
            [
                2,
                0
            ],
            [
                0,
                2,
                -1
            ],
            [
                2,
                1
            ],
            [
                0,
                1,
                1,
                2,
                -1,
                1,
                1
            ],
            [
                0,
                0,
                -1,
                -1,
                1,
                1
            ],
            [
                0,
                2,
                2,
                0,
                1
            ],
            [
                0,
                -1,
                1,
                2,
                1
            ],
            [
                0,
                1,
                1,
                2
            ],
            [
                2,
                2,
                2,
                0
            ],
            [
                2,
                0,
                1
            ],
            [
                2,
                0
            ],
            [
                0
            ],
            [
                2,
                0
            ],
            [
                2,
                1
            ],
            [
                2,
                1
            ],
            [
                2,
                0
            ],
            [
                0,
                2,
                0,
                1,
                1,
                1,
                1,
                2,
                1
            ],
            [
                2,
                0
            ],
            [
                2,
                0,
                0,
                0,
                0
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            -1
        ],
        "constant_counts": [
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 1,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 6,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 6,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 3,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 7,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 41,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 48,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 22,
            "tf_int64": 1,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.0030120481927710845,
                "tf.add(x, y)": 0.0030120481927710845,
                "tf.add_n(inputs)": 0.0030120481927710845,
                "tf.argmax(input, axis)": 0.0030120481927710845,
                "tf.argmin(input, axis)": 0.0030120481927710845,
                "tf.argsort(values, axis, stable=True)": 0.006024096385542169,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.0030120481927710845,
                "tf.boolean_mask(tensor, mask)": 0.0030120481927710845,
                "tf.broadcast_to(input, shape)": 0.0030120481927710845,
                "tf.cast(x, dtype)": 0.006024096385542169,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.0030120481927710845,
                "tf.concat(values, axis)": 0.012048192771084338,
                "tf.constant(value)": 0.006024096385542169,
                "tf.constant(value, dtype)": 0.0030120481927710845,
                "tf.divide(x, y)": 0.0030120481927710845,
                "tf.equal(x, y)": 0.0030120481927710845,
                "tf.exp(x)": 0.0030120481927710845,
                "tf.expand_dims(input, axis)": 0.015060240963855422,
                "tf.eye(num_rows)": 0.0030120481927710845,
                "tf.eye(num_rows, num_columns)": 0.0030120481927710845,
                "tf.eye(num_rows, dtype)": 0.0030120481927710845,
                "tf.fill(dims, value)": 0.0030120481927710845,
                "tf.gather(params, indices)": 0.006024096385542169,
                "tf.gather(params, indices, axis, batch_dims)": 0.0030120481927710845,
                "tf.gather_nd(params, indices)": 0.006024096385542169,
                "tf.gather_nd(params, indices, batch_dims)": 0.0030120481927710845,
                "tf.greater(x, y)": 0.0030120481927710845,
                "tf.greater_equal(x, y)": 0.0030120481927710845,
                "tf.math.bincount(arr)": 0.0030120481927710845,
                "tf.math.ceil(x)": 0.0030120481927710845,
                "tf.math.count_nonzero(input)": 0.0030120481927710845,
                "tf.math.count_nonzero(input, axis)": 0.0030120481927710845,
                "tf.math.cumsum(x, axis)": 0.0030120481927710845,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.0030120481927710845,
                "tf.math.divide_no_nan(x, y)": 0.0030120481927710845,
                "tf.math.floor(x)": 0.0030120481927710845,
                "tf.math.log(x)": 0.0030120481927710845,
                "tf.math.logical_and(x, y)": 0.0030120481927710845,
                "tf.math.logical_not(x)": 0.0030120481927710845,
                "tf.math.logical_or(x, y)": 0.0030120481927710845,
                "tf.math.logical_xor(x, y)": 0.0030120481927710845,
                "tf.math.negative(x)": 0.0030120481927710845,
                "tf.math.reciprocal(x)": 0.0030120481927710845,
                "tf.math.reciprocal_no_nan(x)": 0.0030120481927710845,
                "tf.math.segment_max(data, segment_ids)": 0.0030120481927710845,
                "tf.math.segment_mean(data, segment_ids)": 0.0030120481927710845,
                "tf.math.segment_min(data, segment_ids)": 0.0030120481927710845,
                "tf.math.segment_prod(data, segment_ids)": 0.0030120481927710845,
                "tf.math.segment_sum(data, segment_ids)": 0.0030120481927710845,
                "tf.math.squared_difference(x, y)": 0.0030120481927710845,
                "tf.math.top_k(input, k)": 0.0030120481927710845,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.0030120481927710845,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.0030120481927710845,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.0030120481927710845,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.0030120481927710845,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.0030120481927710845,
                "tf.matmul(a, b)": 0.0030120481927710845,
                "tf.maximum(x, y)": 0.0030120481927710845,
                "tf.minimum(x, y)": 0.0030120481927710845,
                "tf.multiply(x, y)": 0.0030120481927710845,
                "tf.not_equal(x, y)": 0.0030120481927710845,
                "tf.one_hot(indices, depth)": 0.0030120481927710845,
                "tf.ones(shape)": 0.0030120481927710845,
                "tf.ones_like(input)": 0.0030120481927710845,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.0030120481927710845,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.0030120481927710845,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.0030120481927710845,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.0030120481927710845,
                "tf.range(start)": 0.03313253012048193,
                "tf.range(start, limit, delta)": 0.0030120481927710845,
                "tf.reduce_any(input_tensor, axis)": 0.0030120481927710845,
                "tf.reduce_all(input_tensor, axis)": 0.0030120481927710845,
                "tf.reduce_max(input_tensor)": 0.0030120481927710845,
                "tf.reduce_max(input_tensor, axis)": 0.0030120481927710845,
                "tf.reduce_mean(input_tensor)": 0.0030120481927710845,
                "tf.reduce_mean(input_tensor, axis)": 0.0030120481927710845,
                "tf.reduce_min(input_tensor)": 0.0030120481927710845,
                "tf.reduce_min(input_tensor, axis)": 0.0030120481927710845,
                "tf.reduce_prod(input_tensor, axis)": 0.0030120481927710845,
                "tf.reduce_sum(input_tensor)": 0.0030120481927710845,
                "tf.reduce_sum(input_tensor, axis)": 0.0030120481927710845,
                "tf.repeat(input, repeats)": 0.006024096385542169,
                "tf.repeat(input, repeats, axis)": 0.006024096385542169,
                "tf.reshape(tensor, shape)": 0.015060240963855422,
                "tf.reverse(tensor, axis)": 0.0030120481927710845,
                "tf.roll(input, shift, axis)": 0.0030120481927710845,
                "tf.round(x)": 0.0030120481927710845,
                "tf.scatter_nd(indices, updates, shape)": 0.0030120481927710845,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.0030120481927710845,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.0030120481927710845,
                "tf.sequence_mask(lengths)": 0.0030120481927710845,
                "tf.sequence_mask(lengths, maxlen)": 0.0030120481927710845,
                "tf.shape(input)": 0.03313253012048193,
                "tf.sign(x)": 0.0030120481927710845,
                "tf.sort(values, axis)": 0.0030120481927710845,
                "tf.sort(values, axis, direction='DESCENDING')": 0.0030120481927710845,
                "tf.sqrt(x)": 0.0030120481927710845,
                "tf.square(x)": 0.0030120481927710845,
                "tf.squeeze(input)": 0.0030120481927710845,
                "tf.squeeze(input, axis)": 0.0030120481927710845,
                "tf.stack(values, axis)": 0.015060240963855422,
                "tf.subtract(x, y)": 0.0030120481927710845,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.0030120481927710845,
                "tf.tensordot(a, b, axes)": 0.0030120481927710845,
                "tf.tile(input, multiples)": 0.02710843373493976,
                "tf.transpose(a)": 0.006024096385542169,
                "tf.transpose(a, perm)": 0.0030120481927710845,
                "tf.unique_with_counts(x)": 0.0030120481927710845,
                "tf.unstack(value, axis)": 0.0030120481927710845,
                "tf.where(condition)": 0.0030120481927710845,
                "tf.where(condition, x, y)": 0.0030120481927710845,
                "tf.zeros(shape)": 0.0030120481927710845,
                "tf.zeros_like(input)": 0.0030120481927710845,
                "tf.SparseTensor(indices, values, dense_shape)": 0.0030120481927710845,
                "tf.sparse.add(a, b)": 0.0030120481927710845,
                "tf.sparse.concat(axis, sp_inputs)": 0.0030120481927710845,
                "tf.sparse.expand_dims(sp_input, axis)": 0.0030120481927710845,
                "tf.sparse.from_dense(tensor)": 0.0030120481927710845,
                "tf.sparse.maximum(sp_a, sp_b)": 0.0030120481927710845,
                "tf.sparse.minimum(sp_a, sp_b)": 0.0030120481927710845,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.0030120481927710845,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.0030120481927710845,
                "tf.sparse.reset_shape(sp_input)": 0.0030120481927710845,
                "tf.sparse.reshape(sp_input, shape)": 0.0030120481927710845,
                "tf.sparse.retain(sp_input, to_retain)": 0.0030120481927710845,
                "tf.sparse.slice(sp_input, start, size)": 0.0030120481927710845,
                "tf.sparse.split(sp_input, num_split, axis)": 0.0030120481927710845,
                "tf.sparse.to_dense(sp_input)": 0.0030120481927710845,
                "tf.sparse.to_dense(sp_input, default_value)": 0.0030120481927710845,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.0030120481927710845,
                "tf.sparse.transpose(sp_input)": 0.0030120481927710845,
                "tf.sparse.transpose(sp_input, perm)": 0.0030120481927710845,
                "IndexingAxis1Operation": 0.006024096385542169,
                "IndexingOperation": 0.0391566265060241,
                "PairCreationOperation": 0.006024096385542169,
                "SingletonTupleCreationOperation": 0.0030120481927710845,
                "SlicingAxis0BothOperation": 0.0030120481927710845,
                "SlicingAxis0LeftOperation": 0.0030120481927710845,
                "SlicingAxis0RightOperation": 0.0030120481927710845,
                "SlicingAxis1BothOperation": 0.0030120481927710845,
                "SlicingAxis1LeftOperation": 0.0030120481927710845,
                "SlicingAxis1RightOperation": 0.0030120481927710845,
                "TripleCreationOperation": 0.0030120481927710845,
                "PROVIDED_CONSTANT_WEIGHT": 0.0030120481927710845,
                "COMMON_CONSTANT_WEIGHT": 0.14759036144578314,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.0030120481927710845,
                "INPUT_VARIABLE_WEIGHT": 0.12650602409638553,
                "AXIS_CONSTANT_WEIGHT": 0.06927710843373494,
                "SHAPE_CONSTANT_WEIGHT": 0.0030120481927710845,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.0030120481927710845,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.0030120481927710845,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.0030120481927710845,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.0030120481927710845,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.006024096385542169
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 7,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 7,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 6,
                "tf.constant(value)": 7,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 6,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 7,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 7,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 8,
                "tf.pad(tensor, paddings, mode='REFLECT')": 8,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 8,
                "tf.range(start)": 5,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 7,
                "tf.repeat(input, repeats, axis)": 7,
                "tf.reshape(tensor, shape)": 6,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side='left')": 8,
                "tf.searchsorted(sorted_sequence, values, side='right')": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 5,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction='DESCENDING')": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 6,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 5,
                "tf.transpose(a)": 7,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 7,
                "IndexingOperation": 5,
                "PairCreationOperation": 7,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 3,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 3,
                "AXIS_CONSTANT_WEIGHT": 4,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 7
            }
        }
    },
    {
        "name": "stackoverflow_01",
        "description": "reshape by separating and duplicating columns",
        "target_program": "tf.transpose(tf.cast((in1, in1), tf.float32))",
        "source": "https://stackoverflow.com/questions/40441503/tensorflow-tensor-reshape",
        "constants": "[]",
        "examples": {
            "inputs": "[[[5., 2.], [1., 3.], [0., -1.]],]",
            "outputs": "[[[5., 5.], [1., 1.], [0., 0.]],    [[2., 2.], [3., 3.], [-1., -1.]]]"
        },
        "completions": [
            "return tf.stack([in1, in1], axis=2)\n",
            "def transform(in1):\n    return tf.transpose(tf.stack([in1, in1], axis=1), perm=[2, 0, 1])\n",
            "return tf.stack([in1, in1], axis=2)",
            "return tf.repeat(tf.expand_dims(in1, 2), 2, axis=2)",
            "return tf.stack([in1, in1], axis=2)\n",
            "return tf.repeat(tf.expand_dims(in1, axis=2), 2, axis=2)",
            "return tf.stack([in1, in1], axis=2)\n",
            "return tf.repeat(tf.expand_dims(in1, axis=-1), 2, axis=-1)\n",
            "return tf.cast(tf.stack([in1, in1], axis=2), tf.float32)",
            "return tf.repeat(input=in1, repeats=2, axis=1)",
            "return tf.tile(tf.expand_dims(in1, axis=2), [1, 1, 2])",
            "return tf.stack([in1, in1], axis=2)",
            "def transform(input_tensor):\n    transposed = tf.transpose(input_tensor)\n    reshaped = tf.stack([transposed, transposed], axis=2)\n    return reshaped\n",
            "return tf.reshape(tf.tile(in1, [1, 2]), [-1, 2])",
            "return tf.reshape(tf.tile(in1, [1, 2]), [-1, 2])",
            "return tf.stack([in1, in1], axis=2)",
            "return tf.unstack(tf.tile(in1, [1, 2]), axis=1)",
            "output = tf.stack([in1, in1], axis=2)\noutput = tf.transpose(output, [0, 2, 1])\nreturn output\n",
            "return tf.stack([in1, in1], axis=2)",
            "return tf.transpose(tf.stack([in1, in1], axis=1))"
        ],
        "tf_operators": {
            "tf.stack": 12,
            "tf.transpose": 4,
            "tf.expand_dims": 4,
            "tf.repeat": 4,
            "tf.float32": 1,
            "tf.cast": 1,
            "tf.tile": 4,
            "tf.reshape": 2,
            "tf.unstack": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 3,
        "total_in_target": 3,
        "parsed_constants": [
            [
                2
            ],
            [
                1,
                2,
                0,
                1
            ],
            [
                2
            ],
            [
                2,
                2,
                2
            ],
            [
                2
            ],
            [
                2,
                2,
                2
            ],
            [
                2
            ],
            [
                -1,
                2,
                -1
            ],
            [
                2
            ],
            [
                2,
                1
            ],
            [
                2,
                1,
                1,
                2
            ],
            [
                2
            ],
            [
                2
            ],
            [
                1,
                2,
                -1,
                2
            ],
            [
                1,
                2,
                -1,
                2
            ],
            [
                2
            ],
            [
                1,
                2,
                1
            ],
            [
                2,
                0,
                2,
                1
            ],
            [
                2
            ],
            [
                1
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            -1
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 3,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 3,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 31,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 17,
            "shape_tuple": 0,
            "tf_float32": 1,
            "axis": 27,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.003875968992248062,
                "tf.add(x, y)": 0.003875968992248062,
                "tf.add_n(inputs)": 0.003875968992248062,
                "tf.argmax(input, axis)": 0.003875968992248062,
                "tf.argmin(input, axis)": 0.003875968992248062,
                "tf.argsort(values, axis, stable=True)": 0.003875968992248062,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.003875968992248062,
                "tf.boolean_mask(tensor, mask)": 0.003875968992248062,
                "tf.broadcast_to(input, shape)": 0.003875968992248062,
                "tf.cast(x, dtype)": 0.007751937984496124,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.003875968992248062,
                "tf.concat(values, axis)": 0.003875968992248062,
                "tf.constant(value)": 0.003875968992248062,
                "tf.constant(value, dtype)": 0.003875968992248062,
                "tf.divide(x, y)": 0.003875968992248062,
                "tf.equal(x, y)": 0.003875968992248062,
                "tf.exp(x)": 0.003875968992248062,
                "tf.expand_dims(input, axis)": 0.01937984496124031,
                "tf.eye(num_rows)": 0.003875968992248062,
                "tf.eye(num_rows, num_columns)": 0.003875968992248062,
                "tf.eye(num_rows, dtype)": 0.003875968992248062,
                "tf.fill(dims, value)": 0.003875968992248062,
                "tf.gather(params, indices)": 0.003875968992248062,
                "tf.gather(params, indices, axis, batch_dims)": 0.003875968992248062,
                "tf.gather_nd(params, indices)": 0.003875968992248062,
                "tf.gather_nd(params, indices, batch_dims)": 0.003875968992248062,
                "tf.greater(x, y)": 0.003875968992248062,
                "tf.greater_equal(x, y)": 0.003875968992248062,
                "tf.math.bincount(arr)": 0.003875968992248062,
                "tf.math.ceil(x)": 0.003875968992248062,
                "tf.math.count_nonzero(input)": 0.003875968992248062,
                "tf.math.count_nonzero(input, axis)": 0.003875968992248062,
                "tf.math.cumsum(x, axis)": 0.003875968992248062,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.003875968992248062,
                "tf.math.divide_no_nan(x, y)": 0.003875968992248062,
                "tf.math.floor(x)": 0.003875968992248062,
                "tf.math.log(x)": 0.003875968992248062,
                "tf.math.logical_and(x, y)": 0.003875968992248062,
                "tf.math.logical_not(x)": 0.003875968992248062,
                "tf.math.logical_or(x, y)": 0.003875968992248062,
                "tf.math.logical_xor(x, y)": 0.003875968992248062,
                "tf.math.negative(x)": 0.003875968992248062,
                "tf.math.reciprocal(x)": 0.003875968992248062,
                "tf.math.reciprocal_no_nan(x)": 0.003875968992248062,
                "tf.math.segment_max(data, segment_ids)": 0.003875968992248062,
                "tf.math.segment_mean(data, segment_ids)": 0.003875968992248062,
                "tf.math.segment_min(data, segment_ids)": 0.003875968992248062,
                "tf.math.segment_prod(data, segment_ids)": 0.003875968992248062,
                "tf.math.segment_sum(data, segment_ids)": 0.003875968992248062,
                "tf.math.squared_difference(x, y)": 0.003875968992248062,
                "tf.math.top_k(input, k)": 0.003875968992248062,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.003875968992248062,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.003875968992248062,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.003875968992248062,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.003875968992248062,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.003875968992248062,
                "tf.matmul(a, b)": 0.003875968992248062,
                "tf.maximum(x, y)": 0.003875968992248062,
                "tf.minimum(x, y)": 0.003875968992248062,
                "tf.multiply(x, y)": 0.003875968992248062,
                "tf.not_equal(x, y)": 0.003875968992248062,
                "tf.one_hot(indices, depth)": 0.003875968992248062,
                "tf.ones(shape)": 0.003875968992248062,
                "tf.ones_like(input)": 0.003875968992248062,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.003875968992248062,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.003875968992248062,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.003875968992248062,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.003875968992248062,
                "tf.range(start)": 0.003875968992248062,
                "tf.range(start, limit, delta)": 0.003875968992248062,
                "tf.reduce_any(input_tensor, axis)": 0.003875968992248062,
                "tf.reduce_all(input_tensor, axis)": 0.003875968992248062,
                "tf.reduce_max(input_tensor)": 0.003875968992248062,
                "tf.reduce_max(input_tensor, axis)": 0.003875968992248062,
                "tf.reduce_mean(input_tensor)": 0.003875968992248062,
                "tf.reduce_mean(input_tensor, axis)": 0.003875968992248062,
                "tf.reduce_min(input_tensor)": 0.003875968992248062,
                "tf.reduce_min(input_tensor, axis)": 0.003875968992248062,
                "tf.reduce_prod(input_tensor, axis)": 0.003875968992248062,
                "tf.reduce_sum(input_tensor)": 0.003875968992248062,
                "tf.reduce_sum(input_tensor, axis)": 0.003875968992248062,
                "tf.repeat(input, repeats)": 0.003875968992248062,
                "tf.repeat(input, repeats, axis)": 0.003875968992248062,
                "tf.reshape(tensor, shape)": 0.011627906976744186,
                "tf.reverse(tensor, axis)": 0.003875968992248062,
                "tf.roll(input, shift, axis)": 0.003875968992248062,
                "tf.round(x)": 0.003875968992248062,
                "tf.scatter_nd(indices, updates, shape)": 0.003875968992248062,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.003875968992248062,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.003875968992248062,
                "tf.sequence_mask(lengths)": 0.003875968992248062,
                "tf.sequence_mask(lengths, maxlen)": 0.003875968992248062,
                "tf.shape(input)": 0.003875968992248062,
                "tf.sign(x)": 0.003875968992248062,
                "tf.sort(values, axis)": 0.003875968992248062,
                "tf.sort(values, axis, direction='DESCENDING')": 0.003875968992248062,
                "tf.sqrt(x)": 0.003875968992248062,
                "tf.square(x)": 0.003875968992248062,
                "tf.squeeze(input)": 0.003875968992248062,
                "tf.squeeze(input, axis)": 0.003875968992248062,
                "tf.stack(values, axis)": 0.050387596899224806,
                "tf.subtract(x, y)": 0.003875968992248062,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.003875968992248062,
                "tf.tensordot(a, b, axes)": 0.003875968992248062,
                "tf.tile(input, multiples)": 0.01937984496124031,
                "tf.transpose(a)": 0.011627906976744186,
                "tf.transpose(a, perm)": 0.007751937984496124,
                "tf.unique_with_counts(x)": 0.003875968992248062,
                "tf.unstack(value, axis)": 0.007751937984496124,
                "tf.where(condition)": 0.003875968992248062,
                "tf.where(condition, x, y)": 0.003875968992248062,
                "tf.zeros(shape)": 0.003875968992248062,
                "tf.zeros_like(input)": 0.003875968992248062,
                "tf.SparseTensor(indices, values, dense_shape)": 0.003875968992248062,
                "tf.sparse.add(a, b)": 0.003875968992248062,
                "tf.sparse.concat(axis, sp_inputs)": 0.003875968992248062,
                "tf.sparse.expand_dims(sp_input, axis)": 0.003875968992248062,
                "tf.sparse.from_dense(tensor)": 0.003875968992248062,
                "tf.sparse.maximum(sp_a, sp_b)": 0.003875968992248062,
                "tf.sparse.minimum(sp_a, sp_b)": 0.003875968992248062,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.003875968992248062,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.003875968992248062,
                "tf.sparse.reset_shape(sp_input)": 0.003875968992248062,
                "tf.sparse.reshape(sp_input, shape)": 0.003875968992248062,
                "tf.sparse.retain(sp_input, to_retain)": 0.003875968992248062,
                "tf.sparse.slice(sp_input, start, size)": 0.003875968992248062,
                "tf.sparse.split(sp_input, num_split, axis)": 0.003875968992248062,
                "tf.sparse.to_dense(sp_input)": 0.003875968992248062,
                "tf.sparse.to_dense(sp_input, default_value)": 0.003875968992248062,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.003875968992248062,
                "tf.sparse.transpose(sp_input)": 0.003875968992248062,
                "tf.sparse.transpose(sp_input, perm)": 0.003875968992248062,
                "IndexingAxis1Operation": 0.003875968992248062,
                "IndexingOperation": 0.003875968992248062,
                "PairCreationOperation": 0.003875968992248062,
                "SingletonTupleCreationOperation": 0.003875968992248062,
                "SlicingAxis0BothOperation": 0.003875968992248062,
                "SlicingAxis0LeftOperation": 0.003875968992248062,
                "SlicingAxis0RightOperation": 0.003875968992248062,
                "SlicingAxis1BothOperation": 0.003875968992248062,
                "SlicingAxis1LeftOperation": 0.003875968992248062,
                "SlicingAxis1RightOperation": 0.003875968992248062,
                "TripleCreationOperation": 0.003875968992248062,
                "PROVIDED_CONSTANT_WEIGHT": 0.003875968992248062,
                "COMMON_CONSTANT_WEIGHT": 0.06976744186046512,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.003875968992248062,
                "INPUT_VARIABLE_WEIGHT": 0.12403100775193798,
                "AXIS_CONSTANT_WEIGHT": 0.10852713178294573,
                "SHAPE_CONSTANT_WEIGHT": 0.003875968992248062,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.003875968992248062,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.003875968992248062,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.007751937984496124,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.003875968992248062,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.003875968992248062
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 7,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 6,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 8,
                "tf.pad(tensor, paddings, mode='REFLECT')": 8,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 6,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side='left')": 8,
                "tf.searchsorted(sorted_sequence, values, side='right')": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 8,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction='DESCENDING')": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 4,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 6,
                "tf.transpose(a)": 6,
                "tf.transpose(a, perm)": 7,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 7,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 8,
                "PairCreationOperation": 8,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 4,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 3,
                "AXIS_CONSTANT_WEIGHT": 3,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 7,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "stackoverflow_02",
        "description": "clip values that are greater than 1",
        "target_program": "tf.minimum(in1, tf.constant(1))",
        "source": "https://stackoverflow.com/questions/46408839/tensorflow-trim-values-in-tensor",
        "constants": "[1]",
        "examples": {
            "inputs": "[[5, 1, 0, 3, 0, -1, 2, -10, 2],]",
            "outputs": "[[1, 1, 0, 1, 0, -1, 1, -10, 1]]"
        },
        "completions": [
            "def transform(in1):\n    return tf.clip_by_value(in1, clip_value_min=-1e9, clip_value_max=1)\n",
            "return tf.clip_by_value(in1, clip_value_min=-float('inf'), clip_value_max=1)",
            "return tf.minimum(in1, 1)\n",
            "\nreturn tf.minimum(in1, 1)\n",
            "return tf.minimum(in1, 1)\n",
            "return tf.clip_by_value(in1, clip_value_min=-float('inf'), clip_value_max=1)\n",
            "def transform(in1):\n    return tf.clip_by_value(in1, clip_value_min=-float('inf'), clip_value_max=1)\n",
            "return tf.minimum(in1, tf.constant(1))\n",
            "return tf.minimum(in1, 1)",
            "return tf.minimum(in1, 1)\n",
            "return tf.clip_by_value(in1, clip_value_min=-np.inf, clip_value_max=1)\n",
            "return tf.minimum(tf.maximum(in1, -1), 1)\n",
            "return tf.clip_by_value(in1, clip_value_min=-np.inf, clip_value_max=1)",
            "return tf.minimum(in1, 1)",
            "return tf.minimum(in1, 1)\n",
            "return tf.clip_by_value(in1, clip_value_min=-float('inf'), clip_value_max=1)\n",
            "return tf.clip_by_value(in1, clip_value_min=-np.inf, clip_value_max=1)",
            "return tf.clip_by_value(in1, 0, 1)\n",
            "return tf.clip_by_value(in1, clip_value_min=-float('inf'), clip_value_max=1)\n",
            "return tf.minimum(in1, 1)\n"
        ],
        "tf_operators": {
            "tf.clip_by_value": 10,
            "tf.minimum": 10,
            "tf.constant": 1,
            "tf.maximum": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 2,
        "total_in_target": 2,
        "parsed_constants": [
            [
                -1000000000.0,
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                -1,
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                0,
                1
            ],
            [
                1
            ],
            [
                1
            ]
        ],
        "all_constants": [
            -1000000000.0,
            1,
            -1,
            0
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 20,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 22,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.0045662100456621,
                "tf.add(x, y)": 0.0045662100456621,
                "tf.add_n(inputs)": 0.0045662100456621,
                "tf.argmax(input, axis)": 0.0045662100456621,
                "tf.argmin(input, axis)": 0.0045662100456621,
                "tf.argsort(values, axis, stable=True)": 0.0045662100456621,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.0045662100456621,
                "tf.boolean_mask(tensor, mask)": 0.0045662100456621,
                "tf.broadcast_to(input, shape)": 0.0045662100456621,
                "tf.cast(x, dtype)": 0.0045662100456621,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.0502283105022831,
                "tf.concat(values, axis)": 0.0045662100456621,
                "tf.constant(value)": 0.0091324200913242,
                "tf.constant(value, dtype)": 0.0045662100456621,
                "tf.divide(x, y)": 0.0045662100456621,
                "tf.equal(x, y)": 0.0045662100456621,
                "tf.exp(x)": 0.0045662100456621,
                "tf.expand_dims(input, axis)": 0.0045662100456621,
                "tf.eye(num_rows)": 0.0045662100456621,
                "tf.eye(num_rows, num_columns)": 0.0045662100456621,
                "tf.eye(num_rows, dtype)": 0.0045662100456621,
                "tf.fill(dims, value)": 0.0045662100456621,
                "tf.gather(params, indices)": 0.0045662100456621,
                "tf.gather(params, indices, axis, batch_dims)": 0.0045662100456621,
                "tf.gather_nd(params, indices)": 0.0045662100456621,
                "tf.gather_nd(params, indices, batch_dims)": 0.0045662100456621,
                "tf.greater(x, y)": 0.0045662100456621,
                "tf.greater_equal(x, y)": 0.0045662100456621,
                "tf.math.bincount(arr)": 0.0045662100456621,
                "tf.math.ceil(x)": 0.0045662100456621,
                "tf.math.count_nonzero(input)": 0.0045662100456621,
                "tf.math.count_nonzero(input, axis)": 0.0045662100456621,
                "tf.math.cumsum(x, axis)": 0.0045662100456621,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.0045662100456621,
                "tf.math.divide_no_nan(x, y)": 0.0045662100456621,
                "tf.math.floor(x)": 0.0045662100456621,
                "tf.math.log(x)": 0.0045662100456621,
                "tf.math.logical_and(x, y)": 0.0045662100456621,
                "tf.math.logical_not(x)": 0.0045662100456621,
                "tf.math.logical_or(x, y)": 0.0045662100456621,
                "tf.math.logical_xor(x, y)": 0.0045662100456621,
                "tf.math.negative(x)": 0.0045662100456621,
                "tf.math.reciprocal(x)": 0.0045662100456621,
                "tf.math.reciprocal_no_nan(x)": 0.0045662100456621,
                "tf.math.segment_max(data, segment_ids)": 0.0045662100456621,
                "tf.math.segment_mean(data, segment_ids)": 0.0045662100456621,
                "tf.math.segment_min(data, segment_ids)": 0.0045662100456621,
                "tf.math.segment_prod(data, segment_ids)": 0.0045662100456621,
                "tf.math.segment_sum(data, segment_ids)": 0.0045662100456621,
                "tf.math.squared_difference(x, y)": 0.0045662100456621,
                "tf.math.top_k(input, k)": 0.0045662100456621,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.0045662100456621,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.0045662100456621,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.0045662100456621,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.0045662100456621,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.0045662100456621,
                "tf.matmul(a, b)": 0.0045662100456621,
                "tf.maximum(x, y)": 0.0091324200913242,
                "tf.minimum(x, y)": 0.0502283105022831,
                "tf.multiply(x, y)": 0.0045662100456621,
                "tf.not_equal(x, y)": 0.0045662100456621,
                "tf.one_hot(indices, depth)": 0.0045662100456621,
                "tf.ones(shape)": 0.0045662100456621,
                "tf.ones_like(input)": 0.0045662100456621,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.0045662100456621,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.0045662100456621,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.0045662100456621,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.0045662100456621,
                "tf.range(start)": 0.0045662100456621,
                "tf.range(start, limit, delta)": 0.0045662100456621,
                "tf.reduce_any(input_tensor, axis)": 0.0045662100456621,
                "tf.reduce_all(input_tensor, axis)": 0.0045662100456621,
                "tf.reduce_max(input_tensor)": 0.0045662100456621,
                "tf.reduce_max(input_tensor, axis)": 0.0045662100456621,
                "tf.reduce_mean(input_tensor)": 0.0045662100456621,
                "tf.reduce_mean(input_tensor, axis)": 0.0045662100456621,
                "tf.reduce_min(input_tensor)": 0.0045662100456621,
                "tf.reduce_min(input_tensor, axis)": 0.0045662100456621,
                "tf.reduce_prod(input_tensor, axis)": 0.0045662100456621,
                "tf.reduce_sum(input_tensor)": 0.0045662100456621,
                "tf.reduce_sum(input_tensor, axis)": 0.0045662100456621,
                "tf.repeat(input, repeats)": 0.0045662100456621,
                "tf.repeat(input, repeats, axis)": 0.0045662100456621,
                "tf.reshape(tensor, shape)": 0.0045662100456621,
                "tf.reverse(tensor, axis)": 0.0045662100456621,
                "tf.roll(input, shift, axis)": 0.0045662100456621,
                "tf.round(x)": 0.0045662100456621,
                "tf.scatter_nd(indices, updates, shape)": 0.0045662100456621,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.0045662100456621,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.0045662100456621,
                "tf.sequence_mask(lengths)": 0.0045662100456621,
                "tf.sequence_mask(lengths, maxlen)": 0.0045662100456621,
                "tf.shape(input)": 0.0045662100456621,
                "tf.sign(x)": 0.0045662100456621,
                "tf.sort(values, axis)": 0.0045662100456621,
                "tf.sort(values, axis, direction='DESCENDING')": 0.0045662100456621,
                "tf.sqrt(x)": 0.0045662100456621,
                "tf.square(x)": 0.0045662100456621,
                "tf.squeeze(input)": 0.0045662100456621,
                "tf.squeeze(input, axis)": 0.0045662100456621,
                "tf.stack(values, axis)": 0.0045662100456621,
                "tf.subtract(x, y)": 0.0045662100456621,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.0045662100456621,
                "tf.tensordot(a, b, axes)": 0.0045662100456621,
                "tf.tile(input, multiples)": 0.0045662100456621,
                "tf.transpose(a)": 0.0045662100456621,
                "tf.transpose(a, perm)": 0.0045662100456621,
                "tf.unique_with_counts(x)": 0.0045662100456621,
                "tf.unstack(value, axis)": 0.0045662100456621,
                "tf.where(condition)": 0.0045662100456621,
                "tf.where(condition, x, y)": 0.0045662100456621,
                "tf.zeros(shape)": 0.0045662100456621,
                "tf.zeros_like(input)": 0.0045662100456621,
                "tf.SparseTensor(indices, values, dense_shape)": 0.0045662100456621,
                "tf.sparse.add(a, b)": 0.0045662100456621,
                "tf.sparse.concat(axis, sp_inputs)": 0.0045662100456621,
                "tf.sparse.expand_dims(sp_input, axis)": 0.0045662100456621,
                "tf.sparse.from_dense(tensor)": 0.0045662100456621,
                "tf.sparse.maximum(sp_a, sp_b)": 0.0045662100456621,
                "tf.sparse.minimum(sp_a, sp_b)": 0.0045662100456621,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.0045662100456621,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.0045662100456621,
                "tf.sparse.reset_shape(sp_input)": 0.0045662100456621,
                "tf.sparse.reshape(sp_input, shape)": 0.0045662100456621,
                "tf.sparse.retain(sp_input, to_retain)": 0.0045662100456621,
                "tf.sparse.slice(sp_input, start, size)": 0.0045662100456621,
                "tf.sparse.split(sp_input, num_split, axis)": 0.0045662100456621,
                "tf.sparse.to_dense(sp_input)": 0.0045662100456621,
                "tf.sparse.to_dense(sp_input, default_value)": 0.0045662100456621,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.0045662100456621,
                "tf.sparse.transpose(sp_input)": 0.0045662100456621,
                "tf.sparse.transpose(sp_input, perm)": 0.0045662100456621,
                "IndexingAxis1Operation": 0.0045662100456621,
                "IndexingOperation": 0.0045662100456621,
                "PairCreationOperation": 0.0045662100456621,
                "SingletonTupleCreationOperation": 0.0045662100456621,
                "SlicingAxis0BothOperation": 0.0045662100456621,
                "SlicingAxis0LeftOperation": 0.0045662100456621,
                "SlicingAxis0RightOperation": 0.0045662100456621,
                "SlicingAxis1BothOperation": 0.0045662100456621,
                "SlicingAxis1LeftOperation": 0.0045662100456621,
                "SlicingAxis1RightOperation": 0.0045662100456621,
                "TripleCreationOperation": 0.0045662100456621,
                "PROVIDED_CONSTANT_WEIGHT": 0.0045662100456621,
                "COMMON_CONSTANT_WEIGHT": 0.1050228310502283,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.0045662100456621,
                "INPUT_VARIABLE_WEIGHT": 0.0958904109589041,
                "AXIS_CONSTANT_WEIGHT": 0.0045662100456621,
                "SHAPE_CONSTANT_WEIGHT": 0.0045662100456621,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.0045662100456621,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.0045662100456621,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.0045662100456621,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.0045662100456621,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.0045662100456621
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 8,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 4,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 7,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 8,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 7,
                "tf.minimum(x, y)": 4,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 8,
                "tf.pad(tensor, paddings, mode='REFLECT')": 8,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side='left')": 8,
                "tf.searchsorted(sorted_sequence, values, side='right')": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 8,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction='DESCENDING')": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 8,
                "PairCreationOperation": 8,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 3,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 3,
                "AXIS_CONSTANT_WEIGHT": 8,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "stackoverflow_03",
        "description": "replace certain columns with columns from the other tensor",
        "target_program": "tf.reduce_sum(tf.one_hot(tf.range(3, 5), depth=in1.shape[1], dtype=tf.int32), axis=0) * in2 + (1 - tf.reduce_sum(tf.one_hot(tf.range(3, 5), depth=in1.shape[1], dtype=tf.int32), axis=0)) * in1",
        "source": "https://stackoverflow.com/questions/44657388/how-to-replace-certain-values-in-tensorflow-tensor-with-the-values-of-the-other",
        "constants": "[3, 4, 5]",
        "examples": {
            "inputs": "[[[11, 22, 33, 44, 55, 66, 77], [70, 60, 50, 40, 30, 20, 10]],[[-9, -8, -7, -6, -5, -4, -3], [11, 12, 13, 14, 15, 16, 17]],]",
            "outputs": "[[[11, 22, 33, -6, -5, 66, 77], [70, 60, 50, 14, 15, 20, 10]]]"
        },
        "completions": [
            "return tf.concat([in1[:,:3], in2[:,3:5], in1[:,5:]], axis=1)",
            "return tf.concat([tf.slice(in1, [0, 0, 0], [2, 3, 3]), tf.slice(in2, [0, 0, 3], [2, 3, 4])], axis=2)\n",
            "return tf.tensor_scatter_nd_update(in1, tf.constant([[0, 3], [1, 3], [0, 4], [1, 4]]), tf.gather(in2, [2, 3, 4, 5], axis=1))\n",
            "return tf.concat([tf.concat([in1[:,:3], in2[:,:-4], in1[:,5:]], axis=1), tf.concat([in1[:,3:4], in2[:,3:4], in1[:,4:5], in2[:,4:5], in1[:,6:]], axis=1)], axis=0)",
            "return tf.concat([tf.concat([in1[:, :3], in2[:, 3:5], in1[:, 5:]], axis=1),\n                      tf.concat([in1[:, :3], in2[:, 3:5], in1[:, 5:]], axis=1)], axis=0)",
            "return tf.concat([tf.concat([in1[:, :3], in2[:, 3:5], in1[:, 5:]], axis=1), tf.concat([in1[:, :3], in2[:, 3:5], in1[:, 5:]], axis=1)], axis=0)",
            "return tf.concat([in1[:,:3], in2[:,3:5], in1[:,5:]], axis=1)",
            "updated_columns = tf.concat([in1[:,:3], in2[:,3:5], in1[:,5:]], axis=1)\nreturn tf.expand_dims(updated_columns, axis=0)\n",
            "output = tf.tensor_scatter_nd_update(in1, [[0, 3], [0, 4], [1, 3], [1, 4]], tf.gather(in2, [3, 4, 3, 4], axis=1))\nreturn output\n",
            "return tf.tensor_scatter_nd_update(in1, [[0, 3], [0, 4], [1, 3], [1, 4]], tf.gather(in2, [0, 1, 3, 4], axis=1))",
            "out = tf.tensor_scatter_nd_update(in1, [[0, 3], [0, 4]], tf.gather(in2, [0, 0]))\nout = tf.tensor_scatter_nd_update(out, [[1, 3], [1, 4]], tf.gather(in2, [1, 1]))\nreturn out\n",
            "return tf.concat([tf.slice(in1, [0, 0, 0], [2, 3, 3]), tf.slice(in2, [0, 0, 3], [2, 2, 4]), tf.slice(in1, [0, 0, 6], [2, 3, 1])], axis=2)",
            "def transform(in1, in2):\n    in1[:, 3:5] = in2[:, 3:5]\n    return tf.constant(in1)\n",
            "assign_areas = in1\nassign_areas = tf.transpose(in1)\nindex_areas = in2\nindex_areas = tf.transpose(in2)\nupdated = tf.tensor_scatter_nd_update(assign_areas, [[index_areas]], tf.gather(index_areas, in2, in2))\n",
            "return tf.tensor_scatter_nd_update(in1, [[0, 3], [0, 4]], tf.gather(in2, [0, 3], axis=1))",
            "return tf.tensor_scatter_nd_update(in1, [[0, 3], [0, 4], [1, 3], [1, 4]], tf.gather(in2, [3, 4, 3, 4], axis=1))",
            "def transform(in1, in2):\n    result = tf.tensor_scatter_nd_update(in1, [[0, 3], [0, 4], [1, 3],[1, 4]], tf.gather(in2, [3, 4, 3, 4], axis=1))\n    return result\n",
            "updates = tf.gather(in2, [3, 4], axis=1)\nreturn tf.tensor_scatter_nd_update(in1, [[0, 3], [1, 3]], updates)\n",
            "return tf.concat([in1[:, :3], in2[:, 3:5], in1[:, 5:]], axis=1)",
            "return tf.concat([tf.concat([in1[:, :3] ,in2[:, 3:5] , in1[:, 5:]], axis=1), tf.concat([in1[:, :3] ,in2[:, 3:5] , in1[:, 5:]], axis=1)], axis=0)"
        ],
        "tf_operators": {
            "tf.concat": 10,
            "tf.slice": 2,
            "tf.tensor_scatter_nd_update": 9,
            "tf.gather": 9,
            "tf.constant": 2,
            "tf.expand_dims": 1,
            "tf.transpose": 1
        },
        "coverage_percentage": 0.0,
        "total_covered": 0,
        "total_in_target": 4,
        "parsed_constants": [
            [
                3,
                3,
                5,
                5,
                1
            ],
            [
                0,
                0,
                0,
                2,
                3,
                3,
                0,
                0,
                3,
                2,
                3,
                4,
                2
            ],
            [
                0,
                3,
                1,
                3,
                0,
                4,
                1,
                4,
                2,
                3,
                4,
                5,
                1
            ],
            [
                3,
                -4,
                5,
                1,
                3,
                4,
                3,
                4,
                4,
                5,
                4,
                5,
                6,
                1,
                0
            ],
            [
                3,
                3,
                5,
                5,
                1,
                3,
                3,
                5,
                5,
                1,
                0
            ],
            [
                3,
                3,
                5,
                5,
                1,
                3,
                3,
                5,
                5,
                1,
                0
            ],
            [
                3,
                3,
                5,
                5,
                1
            ],
            [
                3,
                3,
                5,
                5,
                1,
                0
            ],
            [
                0,
                3,
                0,
                4,
                1,
                3,
                1,
                4,
                3,
                4,
                3,
                4,
                1
            ],
            [
                0,
                3,
                0,
                4,
                1,
                3,
                1,
                4,
                0,
                1,
                3,
                4,
                1
            ],
            [
                0,
                3,
                0,
                4,
                0,
                0,
                1,
                3,
                1,
                4,
                1,
                1
            ],
            [
                0,
                0,
                0,
                2,
                3,
                3,
                0,
                0,
                3,
                2,
                2,
                4,
                0,
                0,
                6,
                2,
                3,
                1,
                2
            ],
            [
                3,
                5,
                3,
                5
            ],
            [],
            [
                0,
                3,
                0,
                4,
                0,
                3,
                1
            ],
            [
                0,
                3,
                0,
                4,
                1,
                3,
                1,
                4,
                3,
                4,
                3,
                4,
                1
            ],
            [
                0,
                3,
                0,
                4,
                1,
                3,
                1,
                4,
                3,
                4,
                3,
                4,
                1
            ],
            [
                3,
                4,
                1,
                0,
                3,
                1,
                3
            ],
            [
                3,
                3,
                5,
                5,
                1
            ],
            [
                3,
                3,
                5,
                5,
                1,
                3,
                3,
                5,
                5,
                1,
                0
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            -4
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 4,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 3,
                "shape": 0,
                "provided": 5,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 1,
                "shape": 0,
                "provided": 7,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 12,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 8,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 8,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 8,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 4,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 4,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 0,
                "shape": 0,
                "provided": 8,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 7,
                "axis": 0,
                "shape": 0,
                "provided": 6,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 8,
                "axis": 0,
                "shape": 0,
                "provided": 4,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 8,
                "axis": 5,
                "shape": 0,
                "provided": 6,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 4,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 10,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 3,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 0,
                "shape": 0,
                "provided": 8,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 0,
                "shape": 0,
                "provided": 8,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 4,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 4,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 8,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 75,
            "shape": 0,
            "tf_bool": 0,
            "provided": 115,
            "common": 72,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 9,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.0018248175182481751,
                "tf.add(x, y)": 0.0018248175182481751,
                "tf.add_n(inputs)": 0.0018248175182481751,
                "tf.argmax(input, axis)": 0.0018248175182481751,
                "tf.argmin(input, axis)": 0.0018248175182481751,
                "tf.argsort(values, axis, stable=True)": 0.0018248175182481751,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.0018248175182481751,
                "tf.boolean_mask(tensor, mask)": 0.0018248175182481751,
                "tf.broadcast_to(input, shape)": 0.0018248175182481751,
                "tf.cast(x, dtype)": 0.0018248175182481751,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.0018248175182481751,
                "tf.concat(values, axis)": 0.03467153284671533,
                "tf.constant(value)": 0.005474452554744526,
                "tf.constant(value, dtype)": 0.0018248175182481751,
                "tf.divide(x, y)": 0.0018248175182481751,
                "tf.equal(x, y)": 0.0018248175182481751,
                "tf.exp(x)": 0.0018248175182481751,
                "tf.expand_dims(input, axis)": 0.0036496350364963502,
                "tf.eye(num_rows)": 0.0018248175182481751,
                "tf.eye(num_rows, num_columns)": 0.0018248175182481751,
                "tf.eye(num_rows, dtype)": 0.0018248175182481751,
                "tf.fill(dims, value)": 0.0018248175182481751,
                "tf.gather(params, indices)": 0.005474452554744526,
                "tf.gather(params, indices, axis, batch_dims)": 0.014598540145985401,
                "tf.gather_nd(params, indices)": 0.0018248175182481751,
                "tf.gather_nd(params, indices, batch_dims)": 0.0018248175182481751,
                "tf.greater(x, y)": 0.0018248175182481751,
                "tf.greater_equal(x, y)": 0.0018248175182481751,
                "tf.math.bincount(arr)": 0.0018248175182481751,
                "tf.math.ceil(x)": 0.0018248175182481751,
                "tf.math.count_nonzero(input)": 0.0018248175182481751,
                "tf.math.count_nonzero(input, axis)": 0.0018248175182481751,
                "tf.math.cumsum(x, axis)": 0.0018248175182481751,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.0018248175182481751,
                "tf.math.divide_no_nan(x, y)": 0.0018248175182481751,
                "tf.math.floor(x)": 0.0018248175182481751,
                "tf.math.log(x)": 0.0018248175182481751,
                "tf.math.logical_and(x, y)": 0.0018248175182481751,
                "tf.math.logical_not(x)": 0.0018248175182481751,
                "tf.math.logical_or(x, y)": 0.0018248175182481751,
                "tf.math.logical_xor(x, y)": 0.0018248175182481751,
                "tf.math.negative(x)": 0.0018248175182481751,
                "tf.math.reciprocal(x)": 0.0018248175182481751,
                "tf.math.reciprocal_no_nan(x)": 0.0018248175182481751,
                "tf.math.segment_max(data, segment_ids)": 0.0018248175182481751,
                "tf.math.segment_mean(data, segment_ids)": 0.0018248175182481751,
                "tf.math.segment_min(data, segment_ids)": 0.0018248175182481751,
                "tf.math.segment_prod(data, segment_ids)": 0.0018248175182481751,
                "tf.math.segment_sum(data, segment_ids)": 0.0018248175182481751,
                "tf.math.squared_difference(x, y)": 0.0018248175182481751,
                "tf.math.top_k(input, k)": 0.0018248175182481751,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.0018248175182481751,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.0018248175182481751,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.0018248175182481751,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.0018248175182481751,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.0018248175182481751,
                "tf.matmul(a, b)": 0.0018248175182481751,
                "tf.maximum(x, y)": 0.0018248175182481751,
                "tf.minimum(x, y)": 0.0018248175182481751,
                "tf.multiply(x, y)": 0.0018248175182481751,
                "tf.not_equal(x, y)": 0.0018248175182481751,
                "tf.one_hot(indices, depth)": 0.0018248175182481751,
                "tf.ones(shape)": 0.0018248175182481751,
                "tf.ones_like(input)": 0.0018248175182481751,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.0018248175182481751,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.0018248175182481751,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.0018248175182481751,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.0018248175182481751,
                "tf.range(start)": 0.0018248175182481751,
                "tf.range(start, limit, delta)": 0.0018248175182481751,
                "tf.reduce_any(input_tensor, axis)": 0.0018248175182481751,
                "tf.reduce_all(input_tensor, axis)": 0.0018248175182481751,
                "tf.reduce_max(input_tensor)": 0.0018248175182481751,
                "tf.reduce_max(input_tensor, axis)": 0.0018248175182481751,
                "tf.reduce_mean(input_tensor)": 0.0018248175182481751,
                "tf.reduce_mean(input_tensor, axis)": 0.0018248175182481751,
                "tf.reduce_min(input_tensor)": 0.0018248175182481751,
                "tf.reduce_min(input_tensor, axis)": 0.0018248175182481751,
                "tf.reduce_prod(input_tensor, axis)": 0.0018248175182481751,
                "tf.reduce_sum(input_tensor)": 0.0018248175182481751,
                "tf.reduce_sum(input_tensor, axis)": 0.0018248175182481751,
                "tf.repeat(input, repeats)": 0.0018248175182481751,
                "tf.repeat(input, repeats, axis)": 0.0018248175182481751,
                "tf.reshape(tensor, shape)": 0.0018248175182481751,
                "tf.reverse(tensor, axis)": 0.0018248175182481751,
                "tf.roll(input, shift, axis)": 0.0018248175182481751,
                "tf.round(x)": 0.0018248175182481751,
                "tf.scatter_nd(indices, updates, shape)": 0.0018248175182481751,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.0018248175182481751,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.0018248175182481751,
                "tf.sequence_mask(lengths)": 0.0018248175182481751,
                "tf.sequence_mask(lengths, maxlen)": 0.0018248175182481751,
                "tf.shape(input)": 0.0018248175182481751,
                "tf.sign(x)": 0.0018248175182481751,
                "tf.sort(values, axis)": 0.0018248175182481751,
                "tf.sort(values, axis, direction='DESCENDING')": 0.0018248175182481751,
                "tf.sqrt(x)": 0.0018248175182481751,
                "tf.square(x)": 0.0018248175182481751,
                "tf.squeeze(input)": 0.0018248175182481751,
                "tf.squeeze(input, axis)": 0.0018248175182481751,
                "tf.stack(values, axis)": 0.0018248175182481751,
                "tf.subtract(x, y)": 0.0018248175182481751,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.020072992700729927,
                "tf.tensordot(a, b, axes)": 0.0018248175182481751,
                "tf.tile(input, multiples)": 0.0018248175182481751,
                "tf.transpose(a)": 0.005474452554744526,
                "tf.transpose(a, perm)": 0.0018248175182481751,
                "tf.unique_with_counts(x)": 0.0018248175182481751,
                "tf.unstack(value, axis)": 0.0018248175182481751,
                "tf.where(condition)": 0.0018248175182481751,
                "tf.where(condition, x, y)": 0.0018248175182481751,
                "tf.zeros(shape)": 0.0018248175182481751,
                "tf.zeros_like(input)": 0.0018248175182481751,
                "tf.SparseTensor(indices, values, dense_shape)": 0.0018248175182481751,
                "tf.sparse.add(a, b)": 0.0018248175182481751,
                "tf.sparse.concat(axis, sp_inputs)": 0.0018248175182481751,
                "tf.sparse.expand_dims(sp_input, axis)": 0.0018248175182481751,
                "tf.sparse.from_dense(tensor)": 0.0018248175182481751,
                "tf.sparse.maximum(sp_a, sp_b)": 0.0018248175182481751,
                "tf.sparse.minimum(sp_a, sp_b)": 0.0018248175182481751,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.0018248175182481751,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.0018248175182481751,
                "tf.sparse.reset_shape(sp_input)": 0.0018248175182481751,
                "tf.sparse.reshape(sp_input, shape)": 0.0018248175182481751,
                "tf.sparse.retain(sp_input, to_retain)": 0.0018248175182481751,
                "tf.sparse.slice(sp_input, start, size)": 0.0018248175182481751,
                "tf.sparse.split(sp_input, num_split, axis)": 0.0018248175182481751,
                "tf.sparse.to_dense(sp_input)": 0.0018248175182481751,
                "tf.sparse.to_dense(sp_input, default_value)": 0.0018248175182481751,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.0018248175182481751,
                "tf.sparse.transpose(sp_input)": 0.0018248175182481751,
                "tf.sparse.transpose(sp_input, perm)": 0.0018248175182481751,
                "IndexingAxis1Operation": 0.0018248175182481751,
                "IndexingOperation": 0.0018248175182481751,
                "PairCreationOperation": 0.07481751824817519,
                "SingletonTupleCreationOperation": 0.0018248175182481751,
                "SlicingAxis0BothOperation": 0.0018248175182481751,
                "SlicingAxis0LeftOperation": 0.0018248175182481751,
                "SlicingAxis0RightOperation": 0.0018248175182481751,
                "SlicingAxis1BothOperation": 0.03102189781021898,
                "SlicingAxis1LeftOperation": 0.023722627737226276,
                "SlicingAxis1RightOperation": 0.023722627737226276,
                "TripleCreationOperation": 0.0018248175182481751,
                "PROVIDED_CONSTANT_WEIGHT": 0.2116788321167883,
                "COMMON_CONSTANT_WEIGHT": 0.1332116788321168,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.0018248175182481751,
                "INPUT_VARIABLE_WEIGHT": 0.1386861313868613,
                "AXIS_CONSTANT_WEIGHT": 0.01824817518248175,
                "SHAPE_CONSTANT_WEIGHT": 0.0018248175182481751,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.0018248175182481751,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.0018248175182481751,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.0018248175182481751,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.0018248175182481751,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.0018248175182481751
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 9,
                "tf.add(x, y)": 9,
                "tf.add_n(inputs)": 9,
                "tf.argmax(input, axis)": 9,
                "tf.argmin(input, axis)": 9,
                "tf.argsort(values, axis, stable=True)": 9,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 9,
                "tf.boolean_mask(tensor, mask)": 9,
                "tf.broadcast_to(input, shape)": 9,
                "tf.cast(x, dtype)": 9,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 9,
                "tf.concat(values, axis)": 5,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 9,
                "tf.divide(x, y)": 9,
                "tf.equal(x, y)": 9,
                "tf.exp(x)": 9,
                "tf.expand_dims(input, axis)": 8,
                "tf.eye(num_rows)": 9,
                "tf.eye(num_rows, num_columns)": 9,
                "tf.eye(num_rows, dtype)": 9,
                "tf.fill(dims, value)": 9,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 6,
                "tf.gather_nd(params, indices)": 9,
                "tf.gather_nd(params, indices, batch_dims)": 9,
                "tf.greater(x, y)": 9,
                "tf.greater_equal(x, y)": 9,
                "tf.math.bincount(arr)": 9,
                "tf.math.ceil(x)": 9,
                "tf.math.count_nonzero(input)": 9,
                "tf.math.count_nonzero(input, axis)": 9,
                "tf.math.cumsum(x, axis)": 9,
                "tf.math.cumsum(x, axis, exclusive=True)": 9,
                "tf.math.divide_no_nan(x, y)": 9,
                "tf.math.floor(x)": 9,
                "tf.math.log(x)": 9,
                "tf.math.logical_and(x, y)": 9,
                "tf.math.logical_not(x)": 9,
                "tf.math.logical_or(x, y)": 9,
                "tf.math.logical_xor(x, y)": 9,
                "tf.math.negative(x)": 9,
                "tf.math.reciprocal(x)": 9,
                "tf.math.reciprocal_no_nan(x)": 9,
                "tf.math.segment_max(data, segment_ids)": 9,
                "tf.math.segment_mean(data, segment_ids)": 9,
                "tf.math.segment_min(data, segment_ids)": 9,
                "tf.math.segment_prod(data, segment_ids)": 9,
                "tf.math.segment_sum(data, segment_ids)": 9,
                "tf.math.squared_difference(x, y)": 9,
                "tf.math.top_k(input, k)": 9,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 9,
                "tf.matmul(a, b)": 9,
                "tf.maximum(x, y)": 9,
                "tf.minimum(x, y)": 9,
                "tf.multiply(x, y)": 9,
                "tf.not_equal(x, y)": 9,
                "tf.one_hot(indices, depth)": 9,
                "tf.ones(shape)": 9,
                "tf.ones_like(input)": 9,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 9,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 9,
                "tf.pad(tensor, paddings, mode='REFLECT')": 9,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 9,
                "tf.range(start)": 9,
                "tf.range(start, limit, delta)": 9,
                "tf.reduce_any(input_tensor, axis)": 9,
                "tf.reduce_all(input_tensor, axis)": 9,
                "tf.reduce_max(input_tensor)": 9,
                "tf.reduce_max(input_tensor, axis)": 9,
                "tf.reduce_mean(input_tensor)": 9,
                "tf.reduce_mean(input_tensor, axis)": 9,
                "tf.reduce_min(input_tensor)": 9,
                "tf.reduce_min(input_tensor, axis)": 9,
                "tf.reduce_prod(input_tensor, axis)": 9,
                "tf.reduce_sum(input_tensor)": 9,
                "tf.reduce_sum(input_tensor, axis)": 9,
                "tf.repeat(input, repeats)": 9,
                "tf.repeat(input, repeats, axis)": 9,
                "tf.reshape(tensor, shape)": 9,
                "tf.reverse(tensor, axis)": 9,
                "tf.roll(input, shift, axis)": 9,
                "tf.round(x)": 9,
                "tf.scatter_nd(indices, updates, shape)": 9,
                "tf.searchsorted(sorted_sequence, values, side='left')": 9,
                "tf.searchsorted(sorted_sequence, values, side='right')": 9,
                "tf.sequence_mask(lengths)": 9,
                "tf.sequence_mask(lengths, maxlen)": 9,
                "tf.shape(input)": 9,
                "tf.sign(x)": 9,
                "tf.sort(values, axis)": 9,
                "tf.sort(values, axis, direction='DESCENDING')": 9,
                "tf.sqrt(x)": 9,
                "tf.square(x)": 9,
                "tf.squeeze(input)": 9,
                "tf.squeeze(input, axis)": 9,
                "tf.stack(values, axis)": 9,
                "tf.subtract(x, y)": 9,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 6,
                "tf.tensordot(a, b, axes)": 9,
                "tf.tile(input, multiples)": 9,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 9,
                "tf.unique_with_counts(x)": 9,
                "tf.unstack(value, axis)": 9,
                "tf.where(condition)": 9,
                "tf.where(condition, x, y)": 9,
                "tf.zeros(shape)": 9,
                "tf.zeros_like(input)": 9,
                "tf.SparseTensor(indices, values, dense_shape)": 9,
                "tf.sparse.add(a, b)": 9,
                "tf.sparse.concat(axis, sp_inputs)": 9,
                "tf.sparse.expand_dims(sp_input, axis)": 9,
                "tf.sparse.from_dense(tensor)": 9,
                "tf.sparse.maximum(sp_a, sp_b)": 9,
                "tf.sparse.minimum(sp_a, sp_b)": 9,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 9,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 9,
                "tf.sparse.reset_shape(sp_input)": 9,
                "tf.sparse.reshape(sp_input, shape)": 9,
                "tf.sparse.retain(sp_input, to_retain)": 9,
                "tf.sparse.slice(sp_input, start, size)": 9,
                "tf.sparse.split(sp_input, num_split, axis)": 9,
                "tf.sparse.to_dense(sp_input)": 9,
                "tf.sparse.to_dense(sp_input, default_value)": 9,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 9,
                "tf.sparse.transpose(sp_input)": 9,
                "tf.sparse.transpose(sp_input, perm)": 9,
                "IndexingAxis1Operation": 9,
                "IndexingOperation": 9,
                "PairCreationOperation": 4,
                "SingletonTupleCreationOperation": 9,
                "SlicingAxis0BothOperation": 9,
                "SlicingAxis0LeftOperation": 9,
                "SlicingAxis0RightOperation": 9,
                "SlicingAxis1BothOperation": 5,
                "SlicingAxis1LeftOperation": 5,
                "SlicingAxis1RightOperation": 5,
                "TripleCreationOperation": 9,
                "PROVIDED_CONSTANT_WEIGHT": 2,
                "COMMON_CONSTANT_WEIGHT": 3,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 9,
                "INPUT_VARIABLE_WEIGHT": 3,
                "AXIS_CONSTANT_WEIGHT": 6,
                "SHAPE_CONSTANT_WEIGHT": 9,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 9
            }
        }
    },
    {
        "name": "stackoverflow_04",
        "description": "index into the tensor",
        "target_program": "tf.gather_nd(in1, tf.stack((in2, in3), axis=-1))",
        "source": "https://stackoverflow.com/questions/33736795/tensorflow-numpy-like-tensor-indexing",
        "constants": "[]",
        "examples": {
            "inputs": "[  [[5., 2.], [1., 3.], [0., -1.]]]",
            "outputs": "[[[5., 5.], [1., 1.], [0., 0.]],  [[2., 2.], [3., 3.], [-1., -1.]]]"
        },
        "completions": [
            "return tf.tile(tf.expand_dims(in1, -1), [1, 1, 2])",
            "return tf.tile(tf.expand_dims(in1, -1), [1, 1, 2])\n",
            "indices = tf.stack([tf.range(in1.shape[0]), tf.cast(in1, tf.int32)], axis=1)\nreturn tf.gather_nd(in1, indices)\n",
            "return tf.stack([in1, in1], axis=2)",
            "return tf.tile(tf.expand_dims(in1, axis=-1), [1, 1, 2])\n",
            "def transform(in1):\n    return tf.gather_nd(in1, [[0], [1], [2]])\n",
            "return tf.tile(tf.expand_dims(in1, 1), [1, 2, 2])\n",
            "indices = tf.stack([tf.range(tf.shape(in1)[0]), tf.argmax(in1, axis=1)], axis=1)\nreturn tf.expand_dims(tf.gather_nd(in1, indices), axis=1)\n",
            "return tf.repeat(tf.expand_dims(in1, axis=-1), 2, axis=2)\n",
            "return tf.stack([in1, in1], axis=2)",
            "return tf.repeat(tf.expand_dims(in1, -1), 2, axis=2)\n",
            "return tf.tile(tf.expand_dims(in1, axis=2), [1, 1, 2])",
            "return tf.gather(tf.expand_dims(in1, axis=-1), [0, 1, 1], axis=-1)",
            "def transform(in1):\n    indices = [[0], [1], [2]]\n    return tf.gather_nd(in1, indices)\n",
            "def transform(in1):\n    return tf.gather_nd(in1, [[0], [1], [2]])\n",
            "return tf.expand_dims(in1, axis=1)\n",
            "return tf.repeat(tf.expand_dims(in1, axis=-1), 2, axis=-1)\n",
            "return tf.broadcast_to(tf.expand_dims(in1, axis=-1), [in1.shape[0], in1.shape[1], 2])",
            "return tf.tile(tf.expand_dims(in1, -1), [1, 1, 2])\n",
            "return tf.gather_nd(tf.expand_dims(in1, axis=2), [[[0]], [[1]]])"
        ],
        "tf_operators": {
            "tf.tile": 6,
            "tf.expand_dims": 14,
            "tf.stack": 4,
            "tf.range": 2,
            "tf.cast": 1,
            "tf.int32": 1,
            "tf.gather_nd": 6,
            "tf.shape": 1,
            "tf.argmax": 1,
            "tf.repeat": 3,
            "tf.gather": 1,
            "tf.broadcast_to": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 2,
        "total_in_target": 2,
        "parsed_constants": [
            [
                -1,
                1,
                1,
                2
            ],
            [
                -1,
                1,
                1,
                2
            ],
            [
                0,
                1
            ],
            [
                2
            ],
            [
                -1,
                1,
                1,
                2
            ],
            [
                0,
                1,
                2
            ],
            [
                1,
                1,
                2,
                2
            ],
            [
                0,
                1,
                1,
                1
            ],
            [
                -1,
                2,
                2
            ],
            [
                2
            ],
            [
                -1,
                2,
                2
            ],
            [
                2,
                1,
                1,
                2
            ],
            [
                -1,
                0,
                1,
                1,
                -1
            ],
            [
                0,
                1,
                2
            ],
            [
                0,
                1,
                2
            ],
            [
                1
            ],
            [
                -1,
                2,
                -1
            ],
            [
                -1,
                0,
                1,
                2
            ],
            [
                -1,
                1,
                1,
                2
            ],
            [
                2,
                0,
                1
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            -1
        ],
        "constant_counts": [
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 5,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 31,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 43,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 20,
            "tf_int64": 0,
            "tf_int32": 1
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.003436426116838488,
                "tf.add(x, y)": 0.003436426116838488,
                "tf.add_n(inputs)": 0.003436426116838488,
                "tf.argmax(input, axis)": 0.006872852233676976,
                "tf.argmin(input, axis)": 0.003436426116838488,
                "tf.argsort(values, axis, stable=True)": 0.003436426116838488,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.003436426116838488,
                "tf.boolean_mask(tensor, mask)": 0.003436426116838488,
                "tf.broadcast_to(input, shape)": 0.006872852233676976,
                "tf.cast(x, dtype)": 0.006872852233676976,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.003436426116838488,
                "tf.concat(values, axis)": 0.003436426116838488,
                "tf.constant(value)": 0.003436426116838488,
                "tf.constant(value, dtype)": 0.003436426116838488,
                "tf.divide(x, y)": 0.003436426116838488,
                "tf.equal(x, y)": 0.003436426116838488,
                "tf.exp(x)": 0.003436426116838488,
                "tf.expand_dims(input, axis)": 0.05154639175257732,
                "tf.eye(num_rows)": 0.003436426116838488,
                "tf.eye(num_rows, num_columns)": 0.003436426116838488,
                "tf.eye(num_rows, dtype)": 0.003436426116838488,
                "tf.fill(dims, value)": 0.003436426116838488,
                "tf.gather(params, indices)": 0.003436426116838488,
                "tf.gather(params, indices, axis, batch_dims)": 0.006872852233676976,
                "tf.gather_nd(params, indices)": 0.024054982817869417,
                "tf.gather_nd(params, indices, batch_dims)": 0.003436426116838488,
                "tf.greater(x, y)": 0.003436426116838488,
                "tf.greater_equal(x, y)": 0.003436426116838488,
                "tf.math.bincount(arr)": 0.003436426116838488,
                "tf.math.ceil(x)": 0.003436426116838488,
                "tf.math.count_nonzero(input)": 0.003436426116838488,
                "tf.math.count_nonzero(input, axis)": 0.003436426116838488,
                "tf.math.cumsum(x, axis)": 0.003436426116838488,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.003436426116838488,
                "tf.math.divide_no_nan(x, y)": 0.003436426116838488,
                "tf.math.floor(x)": 0.003436426116838488,
                "tf.math.log(x)": 0.003436426116838488,
                "tf.math.logical_and(x, y)": 0.003436426116838488,
                "tf.math.logical_not(x)": 0.003436426116838488,
                "tf.math.logical_or(x, y)": 0.003436426116838488,
                "tf.math.logical_xor(x, y)": 0.003436426116838488,
                "tf.math.negative(x)": 0.003436426116838488,
                "tf.math.reciprocal(x)": 0.003436426116838488,
                "tf.math.reciprocal_no_nan(x)": 0.003436426116838488,
                "tf.math.segment_max(data, segment_ids)": 0.003436426116838488,
                "tf.math.segment_mean(data, segment_ids)": 0.003436426116838488,
                "tf.math.segment_min(data, segment_ids)": 0.003436426116838488,
                "tf.math.segment_prod(data, segment_ids)": 0.003436426116838488,
                "tf.math.segment_sum(data, segment_ids)": 0.003436426116838488,
                "tf.math.squared_difference(x, y)": 0.003436426116838488,
                "tf.math.top_k(input, k)": 0.003436426116838488,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.003436426116838488,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.003436426116838488,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.003436426116838488,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.003436426116838488,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.003436426116838488,
                "tf.matmul(a, b)": 0.003436426116838488,
                "tf.maximum(x, y)": 0.003436426116838488,
                "tf.minimum(x, y)": 0.003436426116838488,
                "tf.multiply(x, y)": 0.003436426116838488,
                "tf.not_equal(x, y)": 0.003436426116838488,
                "tf.one_hot(indices, depth)": 0.003436426116838488,
                "tf.ones(shape)": 0.003436426116838488,
                "tf.ones_like(input)": 0.003436426116838488,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.003436426116838488,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.003436426116838488,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.003436426116838488,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.003436426116838488,
                "tf.range(start)": 0.010309278350515464,
                "tf.range(start, limit, delta)": 0.003436426116838488,
                "tf.reduce_any(input_tensor, axis)": 0.003436426116838488,
                "tf.reduce_all(input_tensor, axis)": 0.003436426116838488,
                "tf.reduce_max(input_tensor)": 0.003436426116838488,
                "tf.reduce_max(input_tensor, axis)": 0.003436426116838488,
                "tf.reduce_mean(input_tensor)": 0.003436426116838488,
                "tf.reduce_mean(input_tensor, axis)": 0.003436426116838488,
                "tf.reduce_min(input_tensor)": 0.003436426116838488,
                "tf.reduce_min(input_tensor, axis)": 0.003436426116838488,
                "tf.reduce_prod(input_tensor, axis)": 0.003436426116838488,
                "tf.reduce_sum(input_tensor)": 0.003436426116838488,
                "tf.reduce_sum(input_tensor, axis)": 0.003436426116838488,
                "tf.repeat(input, repeats)": 0.003436426116838488,
                "tf.repeat(input, repeats, axis)": 0.003436426116838488,
                "tf.reshape(tensor, shape)": 0.003436426116838488,
                "tf.reverse(tensor, axis)": 0.003436426116838488,
                "tf.roll(input, shift, axis)": 0.003436426116838488,
                "tf.round(x)": 0.003436426116838488,
                "tf.scatter_nd(indices, updates, shape)": 0.003436426116838488,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.003436426116838488,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.003436426116838488,
                "tf.sequence_mask(lengths)": 0.003436426116838488,
                "tf.sequence_mask(lengths, maxlen)": 0.003436426116838488,
                "tf.shape(input)": 0.006872852233676976,
                "tf.sign(x)": 0.003436426116838488,
                "tf.sort(values, axis)": 0.003436426116838488,
                "tf.sort(values, axis, direction='DESCENDING')": 0.003436426116838488,
                "tf.sqrt(x)": 0.003436426116838488,
                "tf.square(x)": 0.003436426116838488,
                "tf.squeeze(input)": 0.003436426116838488,
                "tf.squeeze(input, axis)": 0.003436426116838488,
                "tf.stack(values, axis)": 0.01718213058419244,
                "tf.subtract(x, y)": 0.003436426116838488,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.003436426116838488,
                "tf.tensordot(a, b, axes)": 0.003436426116838488,
                "tf.tile(input, multiples)": 0.024054982817869417,
                "tf.transpose(a)": 0.003436426116838488,
                "tf.transpose(a, perm)": 0.003436426116838488,
                "tf.unique_with_counts(x)": 0.003436426116838488,
                "tf.unstack(value, axis)": 0.003436426116838488,
                "tf.where(condition)": 0.003436426116838488,
                "tf.where(condition, x, y)": 0.003436426116838488,
                "tf.zeros(shape)": 0.003436426116838488,
                "tf.zeros_like(input)": 0.003436426116838488,
                "tf.SparseTensor(indices, values, dense_shape)": 0.003436426116838488,
                "tf.sparse.add(a, b)": 0.003436426116838488,
                "tf.sparse.concat(axis, sp_inputs)": 0.003436426116838488,
                "tf.sparse.expand_dims(sp_input, axis)": 0.003436426116838488,
                "tf.sparse.from_dense(tensor)": 0.003436426116838488,
                "tf.sparse.maximum(sp_a, sp_b)": 0.003436426116838488,
                "tf.sparse.minimum(sp_a, sp_b)": 0.003436426116838488,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.003436426116838488,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.003436426116838488,
                "tf.sparse.reset_shape(sp_input)": 0.003436426116838488,
                "tf.sparse.reshape(sp_input, shape)": 0.003436426116838488,
                "tf.sparse.retain(sp_input, to_retain)": 0.003436426116838488,
                "tf.sparse.slice(sp_input, start, size)": 0.003436426116838488,
                "tf.sparse.split(sp_input, num_split, axis)": 0.003436426116838488,
                "tf.sparse.to_dense(sp_input)": 0.003436426116838488,
                "tf.sparse.to_dense(sp_input, default_value)": 0.003436426116838488,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.003436426116838488,
                "tf.sparse.transpose(sp_input)": 0.003436426116838488,
                "tf.sparse.transpose(sp_input, perm)": 0.003436426116838488,
                "IndexingAxis1Operation": 0.003436426116838488,
                "IndexingOperation": 0.01718213058419244,
                "PairCreationOperation": 0.003436426116838488,
                "SingletonTupleCreationOperation": 0.003436426116838488,
                "SlicingAxis0BothOperation": 0.003436426116838488,
                "SlicingAxis0LeftOperation": 0.003436426116838488,
                "SlicingAxis0RightOperation": 0.003436426116838488,
                "SlicingAxis1BothOperation": 0.003436426116838488,
                "SlicingAxis1LeftOperation": 0.003436426116838488,
                "SlicingAxis1RightOperation": 0.003436426116838488,
                "TripleCreationOperation": 0.003436426116838488,
                "PROVIDED_CONSTANT_WEIGHT": 0.003436426116838488,
                "COMMON_CONSTANT_WEIGHT": 0.15120274914089346,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.003436426116838488,
                "INPUT_VARIABLE_WEIGHT": 0.10996563573883161,
                "AXIS_CONSTANT_WEIGHT": 0.07216494845360824,
                "SHAPE_CONSTANT_WEIGHT": 0.003436426116838488,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.003436426116838488,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.006872852233676976,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.003436426116838488,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.003436426116838488,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.003436426116838488
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 7,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 7,
                "tf.cast(x, dtype)": 7,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 4,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 7,
                "tf.gather_nd(params, indices)": 5,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 8,
                "tf.pad(tensor, paddings, mode='REFLECT')": 8,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 8,
                "tf.range(start)": 7,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side='left')": 8,
                "tf.searchsorted(sorted_sequence, values, side='right')": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 7,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction='DESCENDING')": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 6,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 5,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 6,
                "PairCreationOperation": 8,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 3,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 3,
                "AXIS_CONSTANT_WEIGHT": 4,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 7,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "stackoverflow_05",
        "description": "tensor multiplication like np.tensordot",
        "target_program": "tf.tensordot(in1, in2, 1)",
        "source": "https://stackoverflow.com/questions/43067338/tensor-multiplication-in-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[[4, 3, 1], [6, 5, 2]],[[[5, 5]], [[1, 5]], [[6, 0]]],]",
            "outputs": "[[[29, 35]], [[47, 55]]]"
        },
        "completions": [
            "output = tf.tensordot(in1, in2, axes=1)\nreturn output\n",
            "return tf.tensordot(in1, in2, axes=1)\n",
            "return tf.tensordot(in1, in2, axes=1)\n",
            "return tf.tensordot(in1, in2, axes=1)\n",
            "return tf.tensordot(in1, in2, [[1], [0]])\n  ",
            "return tf.tensordot(in1, in2, axes=1)\n",
            "return tf.tensordot(in1, in2, axes=1)",
            "output = tf.tensordot(in1, in2, axes=1)\nreturn output\n",
            "return tf.tensordot(in1, in2, axes=[[1], [0]])\n",
            "return tf.tensordot(in1, in2, axes=1)",
            "return tf.tensordot(in1, in2, axes=([1], [0]))\n",
            "return tf.matmul(in1, in2)",
            "return tf.tensordot(in1, in2, axes=1)",
            "return tf.tensordot(in1, in2, axes=1)\n",
            "return tf.tensordot(in1, in2, axes=1)",
            "result = tf.tensordot(in1, in2, axes=1)\nreturn result\n",
            "return tf.tensordot(in1, in2, axes=1)",
            "return tf.tensordot(in1, in2, axes=1)\n",
            "return tf.tensordot(in1, in2, axes=[[1], [0]])\n",
            "return tf.tensordot(in1, in2, axes=1)\n"
        ],
        "tf_operators": {
            "tf.tensordot": 19,
            "tf.matmul": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 1,
        "total_in_target": 1,
        "parsed_constants": [
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1
            ]
        ],
        "all_constants": [
            0,
            1
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 40,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 23,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.0041841004184100415,
                "tf.add(x, y)": 0.0041841004184100415,
                "tf.add_n(inputs)": 0.0041841004184100415,
                "tf.argmax(input, axis)": 0.0041841004184100415,
                "tf.argmin(input, axis)": 0.0041841004184100415,
                "tf.argsort(values, axis, stable=True)": 0.0041841004184100415,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.0041841004184100415,
                "tf.boolean_mask(tensor, mask)": 0.0041841004184100415,
                "tf.broadcast_to(input, shape)": 0.0041841004184100415,
                "tf.cast(x, dtype)": 0.0041841004184100415,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.0041841004184100415,
                "tf.concat(values, axis)": 0.0041841004184100415,
                "tf.constant(value)": 0.0041841004184100415,
                "tf.constant(value, dtype)": 0.0041841004184100415,
                "tf.divide(x, y)": 0.0041841004184100415,
                "tf.equal(x, y)": 0.0041841004184100415,
                "tf.exp(x)": 0.0041841004184100415,
                "tf.expand_dims(input, axis)": 0.0041841004184100415,
                "tf.eye(num_rows)": 0.0041841004184100415,
                "tf.eye(num_rows, num_columns)": 0.0041841004184100415,
                "tf.eye(num_rows, dtype)": 0.0041841004184100415,
                "tf.fill(dims, value)": 0.0041841004184100415,
                "tf.gather(params, indices)": 0.0041841004184100415,
                "tf.gather(params, indices, axis, batch_dims)": 0.0041841004184100415,
                "tf.gather_nd(params, indices)": 0.0041841004184100415,
                "tf.gather_nd(params, indices, batch_dims)": 0.0041841004184100415,
                "tf.greater(x, y)": 0.0041841004184100415,
                "tf.greater_equal(x, y)": 0.0041841004184100415,
                "tf.math.bincount(arr)": 0.0041841004184100415,
                "tf.math.ceil(x)": 0.0041841004184100415,
                "tf.math.count_nonzero(input)": 0.0041841004184100415,
                "tf.math.count_nonzero(input, axis)": 0.0041841004184100415,
                "tf.math.cumsum(x, axis)": 0.0041841004184100415,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.0041841004184100415,
                "tf.math.divide_no_nan(x, y)": 0.0041841004184100415,
                "tf.math.floor(x)": 0.0041841004184100415,
                "tf.math.log(x)": 0.0041841004184100415,
                "tf.math.logical_and(x, y)": 0.0041841004184100415,
                "tf.math.logical_not(x)": 0.0041841004184100415,
                "tf.math.logical_or(x, y)": 0.0041841004184100415,
                "tf.math.logical_xor(x, y)": 0.0041841004184100415,
                "tf.math.negative(x)": 0.0041841004184100415,
                "tf.math.reciprocal(x)": 0.0041841004184100415,
                "tf.math.reciprocal_no_nan(x)": 0.0041841004184100415,
                "tf.math.segment_max(data, segment_ids)": 0.0041841004184100415,
                "tf.math.segment_mean(data, segment_ids)": 0.0041841004184100415,
                "tf.math.segment_min(data, segment_ids)": 0.0041841004184100415,
                "tf.math.segment_prod(data, segment_ids)": 0.0041841004184100415,
                "tf.math.segment_sum(data, segment_ids)": 0.0041841004184100415,
                "tf.math.squared_difference(x, y)": 0.0041841004184100415,
                "tf.math.top_k(input, k)": 0.0041841004184100415,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.0041841004184100415,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.0041841004184100415,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.0041841004184100415,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.0041841004184100415,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.0041841004184100415,
                "tf.matmul(a, b)": 0.008368200836820083,
                "tf.maximum(x, y)": 0.0041841004184100415,
                "tf.minimum(x, y)": 0.0041841004184100415,
                "tf.multiply(x, y)": 0.0041841004184100415,
                "tf.not_equal(x, y)": 0.0041841004184100415,
                "tf.one_hot(indices, depth)": 0.0041841004184100415,
                "tf.ones(shape)": 0.0041841004184100415,
                "tf.ones_like(input)": 0.0041841004184100415,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.0041841004184100415,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.0041841004184100415,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.0041841004184100415,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.0041841004184100415,
                "tf.range(start)": 0.0041841004184100415,
                "tf.range(start, limit, delta)": 0.0041841004184100415,
                "tf.reduce_any(input_tensor, axis)": 0.0041841004184100415,
                "tf.reduce_all(input_tensor, axis)": 0.0041841004184100415,
                "tf.reduce_max(input_tensor)": 0.0041841004184100415,
                "tf.reduce_max(input_tensor, axis)": 0.0041841004184100415,
                "tf.reduce_mean(input_tensor)": 0.0041841004184100415,
                "tf.reduce_mean(input_tensor, axis)": 0.0041841004184100415,
                "tf.reduce_min(input_tensor)": 0.0041841004184100415,
                "tf.reduce_min(input_tensor, axis)": 0.0041841004184100415,
                "tf.reduce_prod(input_tensor, axis)": 0.0041841004184100415,
                "tf.reduce_sum(input_tensor)": 0.0041841004184100415,
                "tf.reduce_sum(input_tensor, axis)": 0.0041841004184100415,
                "tf.repeat(input, repeats)": 0.0041841004184100415,
                "tf.repeat(input, repeats, axis)": 0.0041841004184100415,
                "tf.reshape(tensor, shape)": 0.0041841004184100415,
                "tf.reverse(tensor, axis)": 0.0041841004184100415,
                "tf.roll(input, shift, axis)": 0.0041841004184100415,
                "tf.round(x)": 0.0041841004184100415,
                "tf.scatter_nd(indices, updates, shape)": 0.0041841004184100415,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.0041841004184100415,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.0041841004184100415,
                "tf.sequence_mask(lengths)": 0.0041841004184100415,
                "tf.sequence_mask(lengths, maxlen)": 0.0041841004184100415,
                "tf.shape(input)": 0.0041841004184100415,
                "tf.sign(x)": 0.0041841004184100415,
                "tf.sort(values, axis)": 0.0041841004184100415,
                "tf.sort(values, axis, direction='DESCENDING')": 0.0041841004184100415,
                "tf.sqrt(x)": 0.0041841004184100415,
                "tf.square(x)": 0.0041841004184100415,
                "tf.squeeze(input)": 0.0041841004184100415,
                "tf.squeeze(input, axis)": 0.0041841004184100415,
                "tf.stack(values, axis)": 0.0041841004184100415,
                "tf.subtract(x, y)": 0.0041841004184100415,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.0041841004184100415,
                "tf.tensordot(a, b, axes)": 0.08368200836820083,
                "tf.tile(input, multiples)": 0.0041841004184100415,
                "tf.transpose(a)": 0.0041841004184100415,
                "tf.transpose(a, perm)": 0.0041841004184100415,
                "tf.unique_with_counts(x)": 0.0041841004184100415,
                "tf.unstack(value, axis)": 0.0041841004184100415,
                "tf.where(condition)": 0.0041841004184100415,
                "tf.where(condition, x, y)": 0.0041841004184100415,
                "tf.zeros(shape)": 0.0041841004184100415,
                "tf.zeros_like(input)": 0.0041841004184100415,
                "tf.SparseTensor(indices, values, dense_shape)": 0.0041841004184100415,
                "tf.sparse.add(a, b)": 0.0041841004184100415,
                "tf.sparse.concat(axis, sp_inputs)": 0.0041841004184100415,
                "tf.sparse.expand_dims(sp_input, axis)": 0.0041841004184100415,
                "tf.sparse.from_dense(tensor)": 0.0041841004184100415,
                "tf.sparse.maximum(sp_a, sp_b)": 0.0041841004184100415,
                "tf.sparse.minimum(sp_a, sp_b)": 0.0041841004184100415,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.0041841004184100415,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.0041841004184100415,
                "tf.sparse.reset_shape(sp_input)": 0.0041841004184100415,
                "tf.sparse.reshape(sp_input, shape)": 0.0041841004184100415,
                "tf.sparse.retain(sp_input, to_retain)": 0.0041841004184100415,
                "tf.sparse.slice(sp_input, start, size)": 0.0041841004184100415,
                "tf.sparse.split(sp_input, num_split, axis)": 0.0041841004184100415,
                "tf.sparse.to_dense(sp_input)": 0.0041841004184100415,
                "tf.sparse.to_dense(sp_input, default_value)": 0.0041841004184100415,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.0041841004184100415,
                "tf.sparse.transpose(sp_input)": 0.0041841004184100415,
                "tf.sparse.transpose(sp_input, perm)": 0.0041841004184100415,
                "IndexingAxis1Operation": 0.0041841004184100415,
                "IndexingOperation": 0.0041841004184100415,
                "PairCreationOperation": 0.008368200836820083,
                "SingletonTupleCreationOperation": 0.0041841004184100415,
                "SlicingAxis0BothOperation": 0.0041841004184100415,
                "SlicingAxis0LeftOperation": 0.0041841004184100415,
                "SlicingAxis0RightOperation": 0.0041841004184100415,
                "SlicingAxis1BothOperation": 0.0041841004184100415,
                "SlicingAxis1LeftOperation": 0.0041841004184100415,
                "SlicingAxis1RightOperation": 0.0041841004184100415,
                "TripleCreationOperation": 0.0041841004184100415,
                "PROVIDED_CONSTANT_WEIGHT": 0.0041841004184100415,
                "COMMON_CONSTANT_WEIGHT": 0.100418410041841,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.0041841004184100415,
                "INPUT_VARIABLE_WEIGHT": 0.17154811715481172,
                "AXIS_CONSTANT_WEIGHT": 0.0041841004184100415,
                "SHAPE_CONSTANT_WEIGHT": 0.0041841004184100415,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.0041841004184100415,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.0041841004184100415,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.0041841004184100415,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.0041841004184100415,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.0041841004184100415
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 8,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 8,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 7,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 8,
                "tf.pad(tensor, paddings, mode='REFLECT')": 8,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side='left')": 8,
                "tf.searchsorted(sorted_sequence, values, side='right')": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 8,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction='DESCENDING')": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 4,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 8,
                "PairCreationOperation": 7,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 3,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 3,
                "AXIS_CONSTANT_WEIGHT": 8,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "stackoverflow_06",
        "description": "binary tensor from vector indicating if elements are equal",
        "target_program": "tf.cast(tf.equal(in1, tf.expand_dims(in1, 1)), tf.float32)",
        "source": "https://stackoverflow.com/questions/47816231/create-binary-tensor-from-vector-in-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[3, 5, 0, 2, 3, 3, 0],]",
            "outputs": "[[1., 0., 0., 0., 1., 1., 0.],    [0., 1., 0., 0., 0., 0., 0.],    [0., 0., 1., 0., 0., 0., 1.],    [0., 0., 0., 1., 0., 0., 0.],    [1., 0., 0., 0., 1., 1., 0.],    [1., 0., 0., 0., 1., 1., 0.],    [0., 0., 1., 0., 0., 0., 1.]]"
        },
        "completions": [
            "return tf.transpose(tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0)), perm=[2, 0, 1])",
            "def transform(in1):\n    return tf.equal(tf.expand_dims(in1, axis=1), in1)\n",
            "return tf.cast(tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0)), tf.float32)",
            "return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))",
            "return tf.equal(tf.expand_dims(in1, axis=1), tf.expand_dims(in1, axis=0))",
            "result = tf.equal(tf.expand_dims(in1, 1), in1)\nreturn tf.cast(result, dtype=tf.float32)\n",
            "return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))",
            "return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))\n",
            "return tf.cast(tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0)), tf.float32)",
            "return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))\n",
            "return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))",
            "def transform(in1):\n    return tf.equal(tf.expand_dims(in1, 1), in1)\n",
            "return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))",
            "return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))\n",
            "return tf.cast(tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0)), tf.float32)\n",
            "return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))",
            "equal_matrix = tf.cast(tf.math.equal(tf.expand_dims(in1, 1), in1), tf.float32)\nreturn equal_matrix\n",
            "return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))",
            "return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))\n",
            "return tf.equal(tf.expand_dims(in1, 1), in1)\n"
        ],
        "tf_operators": {
            "tf.expand_dims": 20,
            "tf.transpose": 1,
            "tf.equal": 19,
            "tf.float32": 5,
            "tf.cast": 5,
            "tf.math.equal": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 4,
        "total_in_target": 4,
        "parsed_constants": [
            [
                1,
                0,
                2,
                0,
                1
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1
            ]
        ],
        "all_constants": [
            0,
            1,
            2
        ],
        "constant_counts": [
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 40,
            "shape": 0,
            "tf_bool": 0,
            "provided": 1,
            "common": 37,
            "shape_tuple": 0,
            "tf_float32": 5,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.003367003367003367,
                "tf.add(x, y)": 0.003367003367003367,
                "tf.add_n(inputs)": 0.003367003367003367,
                "tf.argmax(input, axis)": 0.003367003367003367,
                "tf.argmin(input, axis)": 0.003367003367003367,
                "tf.argsort(values, axis, stable=True)": 0.003367003367003367,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.003367003367003367,
                "tf.boolean_mask(tensor, mask)": 0.003367003367003367,
                "tf.broadcast_to(input, shape)": 0.003367003367003367,
                "tf.cast(x, dtype)": 0.020202020202020204,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.003367003367003367,
                "tf.concat(values, axis)": 0.003367003367003367,
                "tf.constant(value)": 0.003367003367003367,
                "tf.constant(value, dtype)": 0.003367003367003367,
                "tf.divide(x, y)": 0.003367003367003367,
                "tf.equal(x, y)": 0.06734006734006734,
                "tf.exp(x)": 0.003367003367003367,
                "tf.expand_dims(input, axis)": 0.12121212121212122,
                "tf.eye(num_rows)": 0.003367003367003367,
                "tf.eye(num_rows, num_columns)": 0.003367003367003367,
                "tf.eye(num_rows, dtype)": 0.003367003367003367,
                "tf.fill(dims, value)": 0.003367003367003367,
                "tf.gather(params, indices)": 0.003367003367003367,
                "tf.gather(params, indices, axis, batch_dims)": 0.003367003367003367,
                "tf.gather_nd(params, indices)": 0.003367003367003367,
                "tf.gather_nd(params, indices, batch_dims)": 0.003367003367003367,
                "tf.greater(x, y)": 0.003367003367003367,
                "tf.greater_equal(x, y)": 0.003367003367003367,
                "tf.math.bincount(arr)": 0.003367003367003367,
                "tf.math.ceil(x)": 0.003367003367003367,
                "tf.math.count_nonzero(input)": 0.003367003367003367,
                "tf.math.count_nonzero(input, axis)": 0.003367003367003367,
                "tf.math.cumsum(x, axis)": 0.003367003367003367,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.003367003367003367,
                "tf.math.divide_no_nan(x, y)": 0.003367003367003367,
                "tf.math.floor(x)": 0.003367003367003367,
                "tf.math.log(x)": 0.003367003367003367,
                "tf.math.logical_and(x, y)": 0.003367003367003367,
                "tf.math.logical_not(x)": 0.003367003367003367,
                "tf.math.logical_or(x, y)": 0.003367003367003367,
                "tf.math.logical_xor(x, y)": 0.003367003367003367,
                "tf.math.negative(x)": 0.003367003367003367,
                "tf.math.reciprocal(x)": 0.003367003367003367,
                "tf.math.reciprocal_no_nan(x)": 0.003367003367003367,
                "tf.math.segment_max(data, segment_ids)": 0.003367003367003367,
                "tf.math.segment_mean(data, segment_ids)": 0.003367003367003367,
                "tf.math.segment_min(data, segment_ids)": 0.003367003367003367,
                "tf.math.segment_prod(data, segment_ids)": 0.003367003367003367,
                "tf.math.segment_sum(data, segment_ids)": 0.003367003367003367,
                "tf.math.squared_difference(x, y)": 0.003367003367003367,
                "tf.math.top_k(input, k)": 0.003367003367003367,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.003367003367003367,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.003367003367003367,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.003367003367003367,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.003367003367003367,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.003367003367003367,
                "tf.matmul(a, b)": 0.003367003367003367,
                "tf.maximum(x, y)": 0.003367003367003367,
                "tf.minimum(x, y)": 0.003367003367003367,
                "tf.multiply(x, y)": 0.003367003367003367,
                "tf.not_equal(x, y)": 0.003367003367003367,
                "tf.one_hot(indices, depth)": 0.003367003367003367,
                "tf.ones(shape)": 0.003367003367003367,
                "tf.ones_like(input)": 0.003367003367003367,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.003367003367003367,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.003367003367003367,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.003367003367003367,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.003367003367003367,
                "tf.range(start)": 0.003367003367003367,
                "tf.range(start, limit, delta)": 0.003367003367003367,
                "tf.reduce_any(input_tensor, axis)": 0.003367003367003367,
                "tf.reduce_all(input_tensor, axis)": 0.003367003367003367,
                "tf.reduce_max(input_tensor)": 0.003367003367003367,
                "tf.reduce_max(input_tensor, axis)": 0.003367003367003367,
                "tf.reduce_mean(input_tensor)": 0.003367003367003367,
                "tf.reduce_mean(input_tensor, axis)": 0.003367003367003367,
                "tf.reduce_min(input_tensor)": 0.003367003367003367,
                "tf.reduce_min(input_tensor, axis)": 0.003367003367003367,
                "tf.reduce_prod(input_tensor, axis)": 0.003367003367003367,
                "tf.reduce_sum(input_tensor)": 0.003367003367003367,
                "tf.reduce_sum(input_tensor, axis)": 0.003367003367003367,
                "tf.repeat(input, repeats)": 0.003367003367003367,
                "tf.repeat(input, repeats, axis)": 0.003367003367003367,
                "tf.reshape(tensor, shape)": 0.003367003367003367,
                "tf.reverse(tensor, axis)": 0.003367003367003367,
                "tf.roll(input, shift, axis)": 0.003367003367003367,
                "tf.round(x)": 0.003367003367003367,
                "tf.scatter_nd(indices, updates, shape)": 0.003367003367003367,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.003367003367003367,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.003367003367003367,
                "tf.sequence_mask(lengths)": 0.003367003367003367,
                "tf.sequence_mask(lengths, maxlen)": 0.003367003367003367,
                "tf.shape(input)": 0.003367003367003367,
                "tf.sign(x)": 0.003367003367003367,
                "tf.sort(values, axis)": 0.003367003367003367,
                "tf.sort(values, axis, direction='DESCENDING')": 0.003367003367003367,
                "tf.sqrt(x)": 0.003367003367003367,
                "tf.square(x)": 0.003367003367003367,
                "tf.squeeze(input)": 0.003367003367003367,
                "tf.squeeze(input, axis)": 0.003367003367003367,
                "tf.stack(values, axis)": 0.003367003367003367,
                "tf.subtract(x, y)": 0.003367003367003367,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.003367003367003367,
                "tf.tensordot(a, b, axes)": 0.003367003367003367,
                "tf.tile(input, multiples)": 0.003367003367003367,
                "tf.transpose(a)": 0.003367003367003367,
                "tf.transpose(a, perm)": 0.003367003367003367,
                "tf.unique_with_counts(x)": 0.003367003367003367,
                "tf.unstack(value, axis)": 0.003367003367003367,
                "tf.where(condition)": 0.003367003367003367,
                "tf.where(condition, x, y)": 0.003367003367003367,
                "tf.zeros(shape)": 0.003367003367003367,
                "tf.zeros_like(input)": 0.003367003367003367,
                "tf.SparseTensor(indices, values, dense_shape)": 0.003367003367003367,
                "tf.sparse.add(a, b)": 0.003367003367003367,
                "tf.sparse.concat(axis, sp_inputs)": 0.003367003367003367,
                "tf.sparse.expand_dims(sp_input, axis)": 0.003367003367003367,
                "tf.sparse.from_dense(tensor)": 0.003367003367003367,
                "tf.sparse.maximum(sp_a, sp_b)": 0.003367003367003367,
                "tf.sparse.minimum(sp_a, sp_b)": 0.003367003367003367,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.003367003367003367,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.003367003367003367,
                "tf.sparse.reset_shape(sp_input)": 0.003367003367003367,
                "tf.sparse.reshape(sp_input, shape)": 0.003367003367003367,
                "tf.sparse.retain(sp_input, to_retain)": 0.003367003367003367,
                "tf.sparse.slice(sp_input, start, size)": 0.003367003367003367,
                "tf.sparse.split(sp_input, num_split, axis)": 0.003367003367003367,
                "tf.sparse.to_dense(sp_input)": 0.003367003367003367,
                "tf.sparse.to_dense(sp_input, default_value)": 0.003367003367003367,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.003367003367003367,
                "tf.sparse.transpose(sp_input)": 0.003367003367003367,
                "tf.sparse.transpose(sp_input, perm)": 0.003367003367003367,
                "IndexingAxis1Operation": 0.003367003367003367,
                "IndexingOperation": 0.003367003367003367,
                "PairCreationOperation": 0.003367003367003367,
                "SingletonTupleCreationOperation": 0.003367003367003367,
                "SlicingAxis0BothOperation": 0.003367003367003367,
                "SlicingAxis0LeftOperation": 0.003367003367003367,
                "SlicingAxis0RightOperation": 0.003367003367003367,
                "SlicingAxis1BothOperation": 0.003367003367003367,
                "SlicingAxis1LeftOperation": 0.003367003367003367,
                "SlicingAxis1RightOperation": 0.003367003367003367,
                "TripleCreationOperation": 0.003367003367003367,
                "PROVIDED_CONSTANT_WEIGHT": 0.006734006734006734,
                "COMMON_CONSTANT_WEIGHT": 0.12794612794612795,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.003367003367003367,
                "INPUT_VARIABLE_WEIGHT": 0.13804713804713806,
                "AXIS_CONSTANT_WEIGHT": 0.003367003367003367,
                "SHAPE_CONSTANT_WEIGHT": 0.003367003367003367,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.003367003367003367,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.003367003367003367,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.020202020202020204,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.003367003367003367,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.003367003367003367
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 6,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 4,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 3,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 8,
                "tf.pad(tensor, paddings, mode='REFLECT')": 8,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side='left')": 8,
                "tf.searchsorted(sorted_sequence, values, side='right')": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 8,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction='DESCENDING')": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 8,
                "PairCreationOperation": 8,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 7,
                "COMMON_CONSTANT_WEIGHT": 3,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 3,
                "AXIS_CONSTANT_WEIGHT": 8,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 6,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "stackoverflow_08",
        "description": "(\\'select the values in the second tensor where the first tensor is greater than 1\\')",
        "target_program": "tf.boolean_mask(in2, tf.greater(in1, tf.constant(1)))",
        "source": "https://stackoverflow.com/questions/33769041/tensorflow-indexing-with-boolean-tensor",
        "constants": "[1]",
        "examples": {
            "inputs": "[[-1, 0, -3, 2, 1, 3, 5, -1, -9, 2, 10],[12, 3, 45, 6, 7, 8, 9, 87, 65, 4, 32],]",
            "outputs": "[6, 8, 9, 4, 32]"
        },
        "completions": [
            "return tf.gather(in2, tf.where(tf.greater(in1, 1)))",
            "return tf.boolean_mask(in2, tf.greater(in1, 1))\n",
            "return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "return tf.gather(in2, tf.where(tf.greater(in1, 1)))",
            "return tf.boolean_mask(in2, tf.greater(in1, 1))\n",
            "return tf.boolean_mask(in2, tf.greater(in1, 1))\n",
            "return tf.boolean_mask(in2, tf.math.greater(in1, 1))",
            "return tf.boolean_mask(in2, in1 > 1)",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n",
            "return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "return tf.boolean_mask(in2, tf.greater(in1, 1))\n",
            "return tf.boolean_mask(in2, tf.greater(tf.cast(in1, tf.int32), 1))\n  ",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n",
            "return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "return tf.gather(in2, tf.where(tf.greater(in1, 1)))",
            "import tensorflow as tf\n\ndef transform(in1, in2):\n    tensor1 = tf.constant(in1)\n    tensor2 = tf.constant(in2)\n    output = tf.boolean_mask(tensor2, tf.greater(tensor1, 1))\n    return output.numpy()\n",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n",
            "return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "return tf.gather(in2, tf.boolean_mask(tf.where(tf.greater(in1, 1)), in1))"
        ],
        "tf_operators": {
            "tf.where": 4,
            "tf.gather": 4,
            "tf.greater": 18,
            "tf.boolean_mask": 17,
            "tf.math.greater": 1,
            "tf.cast": 1,
            "tf.int32": 1,
            "tf.constant": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 3,
        "total_in_target": 3,
        "parsed_constants": [
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ]
        ],
        "all_constants": [
            1
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 41,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 20,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 1
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.0038022813688212928,
                "tf.add(x, y)": 0.0038022813688212928,
                "tf.add_n(inputs)": 0.0038022813688212928,
                "tf.argmax(input, axis)": 0.0038022813688212928,
                "tf.argmin(input, axis)": 0.0038022813688212928,
                "tf.argsort(values, axis, stable=True)": 0.0038022813688212928,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.0038022813688212928,
                "tf.boolean_mask(tensor, mask)": 0.06844106463878327,
                "tf.broadcast_to(input, shape)": 0.0038022813688212928,
                "tf.cast(x, dtype)": 0.0076045627376425855,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.0038022813688212928,
                "tf.concat(values, axis)": 0.0038022813688212928,
                "tf.constant(value)": 0.011406844106463879,
                "tf.constant(value, dtype)": 0.0038022813688212928,
                "tf.divide(x, y)": 0.0038022813688212928,
                "tf.equal(x, y)": 0.0038022813688212928,
                "tf.exp(x)": 0.0038022813688212928,
                "tf.expand_dims(input, axis)": 0.0038022813688212928,
                "tf.eye(num_rows)": 0.0038022813688212928,
                "tf.eye(num_rows, num_columns)": 0.0038022813688212928,
                "tf.eye(num_rows, dtype)": 0.0038022813688212928,
                "tf.fill(dims, value)": 0.0038022813688212928,
                "tf.gather(params, indices)": 0.019011406844106463,
                "tf.gather(params, indices, axis, batch_dims)": 0.0038022813688212928,
                "tf.gather_nd(params, indices)": 0.0038022813688212928,
                "tf.gather_nd(params, indices, batch_dims)": 0.0038022813688212928,
                "tf.greater(x, y)": 0.07224334600760456,
                "tf.greater_equal(x, y)": 0.0038022813688212928,
                "tf.math.bincount(arr)": 0.0038022813688212928,
                "tf.math.ceil(x)": 0.0038022813688212928,
                "tf.math.count_nonzero(input)": 0.0038022813688212928,
                "tf.math.count_nonzero(input, axis)": 0.0038022813688212928,
                "tf.math.cumsum(x, axis)": 0.0038022813688212928,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.0038022813688212928,
                "tf.math.divide_no_nan(x, y)": 0.0038022813688212928,
                "tf.math.floor(x)": 0.0038022813688212928,
                "tf.math.log(x)": 0.0038022813688212928,
                "tf.math.logical_and(x, y)": 0.0038022813688212928,
                "tf.math.logical_not(x)": 0.0038022813688212928,
                "tf.math.logical_or(x, y)": 0.0038022813688212928,
                "tf.math.logical_xor(x, y)": 0.0038022813688212928,
                "tf.math.negative(x)": 0.0038022813688212928,
                "tf.math.reciprocal(x)": 0.0038022813688212928,
                "tf.math.reciprocal_no_nan(x)": 0.0038022813688212928,
                "tf.math.segment_max(data, segment_ids)": 0.0038022813688212928,
                "tf.math.segment_mean(data, segment_ids)": 0.0038022813688212928,
                "tf.math.segment_min(data, segment_ids)": 0.0038022813688212928,
                "tf.math.segment_prod(data, segment_ids)": 0.0038022813688212928,
                "tf.math.segment_sum(data, segment_ids)": 0.0038022813688212928,
                "tf.math.squared_difference(x, y)": 0.0038022813688212928,
                "tf.math.top_k(input, k)": 0.0038022813688212928,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.0038022813688212928,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.0038022813688212928,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.0038022813688212928,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.0038022813688212928,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.0038022813688212928,
                "tf.matmul(a, b)": 0.0038022813688212928,
                "tf.maximum(x, y)": 0.0038022813688212928,
                "tf.minimum(x, y)": 0.0038022813688212928,
                "tf.multiply(x, y)": 0.0038022813688212928,
                "tf.not_equal(x, y)": 0.0038022813688212928,
                "tf.one_hot(indices, depth)": 0.0038022813688212928,
                "tf.ones(shape)": 0.0038022813688212928,
                "tf.ones_like(input)": 0.0038022813688212928,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.0038022813688212928,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.0038022813688212928,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.0038022813688212928,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.0038022813688212928,
                "tf.range(start)": 0.0038022813688212928,
                "tf.range(start, limit, delta)": 0.0038022813688212928,
                "tf.reduce_any(input_tensor, axis)": 0.0038022813688212928,
                "tf.reduce_all(input_tensor, axis)": 0.0038022813688212928,
                "tf.reduce_max(input_tensor)": 0.0038022813688212928,
                "tf.reduce_max(input_tensor, axis)": 0.0038022813688212928,
                "tf.reduce_mean(input_tensor)": 0.0038022813688212928,
                "tf.reduce_mean(input_tensor, axis)": 0.0038022813688212928,
                "tf.reduce_min(input_tensor)": 0.0038022813688212928,
                "tf.reduce_min(input_tensor, axis)": 0.0038022813688212928,
                "tf.reduce_prod(input_tensor, axis)": 0.0038022813688212928,
                "tf.reduce_sum(input_tensor)": 0.0038022813688212928,
                "tf.reduce_sum(input_tensor, axis)": 0.0038022813688212928,
                "tf.repeat(input, repeats)": 0.0038022813688212928,
                "tf.repeat(input, repeats, axis)": 0.0038022813688212928,
                "tf.reshape(tensor, shape)": 0.0038022813688212928,
                "tf.reverse(tensor, axis)": 0.0038022813688212928,
                "tf.roll(input, shift, axis)": 0.0038022813688212928,
                "tf.round(x)": 0.0038022813688212928,
                "tf.scatter_nd(indices, updates, shape)": 0.0038022813688212928,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.0038022813688212928,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.0038022813688212928,
                "tf.sequence_mask(lengths)": 0.0038022813688212928,
                "tf.sequence_mask(lengths, maxlen)": 0.0038022813688212928,
                "tf.shape(input)": 0.0038022813688212928,
                "tf.sign(x)": 0.0038022813688212928,
                "tf.sort(values, axis)": 0.0038022813688212928,
                "tf.sort(values, axis, direction='DESCENDING')": 0.0038022813688212928,
                "tf.sqrt(x)": 0.0038022813688212928,
                "tf.square(x)": 0.0038022813688212928,
                "tf.squeeze(input)": 0.0038022813688212928,
                "tf.squeeze(input, axis)": 0.0038022813688212928,
                "tf.stack(values, axis)": 0.0038022813688212928,
                "tf.subtract(x, y)": 0.0038022813688212928,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.0038022813688212928,
                "tf.tensordot(a, b, axes)": 0.0038022813688212928,
                "tf.tile(input, multiples)": 0.0038022813688212928,
                "tf.transpose(a)": 0.0038022813688212928,
                "tf.transpose(a, perm)": 0.0038022813688212928,
                "tf.unique_with_counts(x)": 0.0038022813688212928,
                "tf.unstack(value, axis)": 0.0038022813688212928,
                "tf.where(condition)": 0.019011406844106463,
                "tf.where(condition, x, y)": 0.0038022813688212928,
                "tf.zeros(shape)": 0.0038022813688212928,
                "tf.zeros_like(input)": 0.0038022813688212928,
                "tf.SparseTensor(indices, values, dense_shape)": 0.0038022813688212928,
                "tf.sparse.add(a, b)": 0.0038022813688212928,
                "tf.sparse.concat(axis, sp_inputs)": 0.0038022813688212928,
                "tf.sparse.expand_dims(sp_input, axis)": 0.0038022813688212928,
                "tf.sparse.from_dense(tensor)": 0.0038022813688212928,
                "tf.sparse.maximum(sp_a, sp_b)": 0.0038022813688212928,
                "tf.sparse.minimum(sp_a, sp_b)": 0.0038022813688212928,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.0038022813688212928,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.0038022813688212928,
                "tf.sparse.reset_shape(sp_input)": 0.0038022813688212928,
                "tf.sparse.reshape(sp_input, shape)": 0.0038022813688212928,
                "tf.sparse.retain(sp_input, to_retain)": 0.0038022813688212928,
                "tf.sparse.slice(sp_input, start, size)": 0.0038022813688212928,
                "tf.sparse.split(sp_input, num_split, axis)": 0.0038022813688212928,
                "tf.sparse.to_dense(sp_input)": 0.0038022813688212928,
                "tf.sparse.to_dense(sp_input, default_value)": 0.0038022813688212928,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.0038022813688212928,
                "tf.sparse.transpose(sp_input)": 0.0038022813688212928,
                "tf.sparse.transpose(sp_input, perm)": 0.0038022813688212928,
                "IndexingAxis1Operation": 0.0038022813688212928,
                "IndexingOperation": 0.0038022813688212928,
                "PairCreationOperation": 0.0038022813688212928,
                "SingletonTupleCreationOperation": 0.0038022813688212928,
                "SlicingAxis0BothOperation": 0.0038022813688212928,
                "SlicingAxis0LeftOperation": 0.0038022813688212928,
                "SlicingAxis0RightOperation": 0.0038022813688212928,
                "SlicingAxis1BothOperation": 0.0038022813688212928,
                "SlicingAxis1LeftOperation": 0.0038022813688212928,
                "SlicingAxis1RightOperation": 0.0038022813688212928,
                "TripleCreationOperation": 0.0038022813688212928,
                "PROVIDED_CONSTANT_WEIGHT": 0.0038022813688212928,
                "COMMON_CONSTANT_WEIGHT": 0.07984790874524715,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.0038022813688212928,
                "INPUT_VARIABLE_WEIGHT": 0.1596958174904943,
                "AXIS_CONSTANT_WEIGHT": 0.0038022813688212928,
                "SHAPE_CONSTANT_WEIGHT": 0.0038022813688212928,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.0038022813688212928,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.0076045627376425855,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.0038022813688212928,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.0038022813688212928,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.0038022813688212928
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 4,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 7,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 6,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 8,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 6,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 4,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 8,
                "tf.pad(tensor, paddings, mode='REFLECT')": 8,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side='left')": 8,
                "tf.searchsorted(sorted_sequence, values, side='right')": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 8,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction='DESCENDING')": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 6,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 8,
                "PairCreationOperation": 8,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 4,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 3,
                "AXIS_CONSTANT_WEIGHT": 8,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 7,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "stackoverflow_09",
        "description": "group items by value and get the group indices",
        "target_program": "tf.unique_with_counts(in1)[1]",
        "source": "https://stackoverflow.com/questions/53054668/assign-values-between-0-and-n-1-for-a-vector-of-length-l-with-n-different-eleme",
        "constants": "[]",
        "examples": {
            "inputs": "[[37, 42, 42, 37, 28, 15, 42, 15],]",
            "outputs": "[0, 1, 1, 0, 2, 3, 1, 3]"
        },
        "completions": [
            "values, _ = tf.unique(in1)\nreturn tf.searchsorted(values, in1, side='left')\n",
            "return tf.unique(in1).idices",
            "_, unique_idx, _ = tf.unique_with_counts(in1)\nreturn tf.gather(unique_idx - 1, tf.argsort(unique_idx))\n",
            "return tf.unique(in1).indices",
            "return tf.cast(tf.unique_with_counts(in1).y, tf.int32)\n",
            "_, idx = tf.unique(in1)\nreturn idx\n",
            "return tf.unique(in1)[2]\n",
            "_, idx = tf.unique(in1)\nreturn tf.gather(idx, tf.argsort(idx))\n",
            "return tf.argsort(tf.unique_with_counts(in1).y, stable=True)\n",
            "values, _ = tf.unique(in1)\nreturn tf.searchsorted(values, in1, side='left')\n",
            "return tf.unique(in1).indices",
            "return tf.nn.top_k(-tf.nn.top_k(-in1, k=in1.shape[0]).indices, k=in1.shape[0]).indices[:,0]\n",
            "def transform(in1):\n    return tf.math.unsorted_segment_max(in1, tf.range(tf.size(in1)), tf.reduce_max(in1) + 1) - 1\n",
            "return tf.unique(in1).idx[tf.unique(in1).idx]",
            "return tf.searchsorted(tf.math.segment_max(in1, in1), in1, side='left')\n",
            "def transform(in1):\n    _, idx = tf.unique(in1)\n    return idx",
            "values, _ = tf.unique(in1)\nreturn tf.searchsorted(values, in1)\n",
            "return tf.unique(in1)[2]\n",
            "return tf.cast(tf.unique_with_counts(in1).y, tf.int32)\n",
            "def transform(in1):\n    group_indices = tf.argsort(in1)\n    sorted_values = tf.gather(in1, group_indices)\n    unique_values, _ = tf.unique_with_counts(sorted_values)\n    group_indices = tf.searchsorted(unique_values, sorted_values)\n    return group_indices\n  "
        ],
        "tf_operators": {
            "tf.searchsorted": 5,
            "tf.unique": 12,
            "tf.unique_with_counts": 5,
            "tf.gather": 3,
            "tf.argsort": 4,
            "tf.cast": 2,
            "tf.int32": 2,
            "tf.nn.top_k": 1,
            "tf.range": 1,
            "tf.math.unsorted_segment_max": 1,
            "tf.reduce_max": 1,
            "tf.size": 1,
            "tf.math.segment_max": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 1,
        "total_in_target": 1,
        "parsed_constants": [
            [],
            [],
            [
                1
            ],
            [],
            [],
            [],
            [
                2
            ],
            [],
            [],
            [],
            [],
            [
                0,
                0,
                0
            ],
            [
                1,
                1
            ],
            [],
            [],
            [],
            [],
            [
                2
            ],
            [],
            []
        ],
        "all_constants": [
            0,
            1,
            2
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 29,
            "shape": 0,
            "tf_bool": 0,
            "provided": 2,
            "common": 6,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 2
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.004464285714285714,
                "tf.add(x, y)": 0.004464285714285714,
                "tf.add_n(inputs)": 0.004464285714285714,
                "tf.argmax(input, axis)": 0.004464285714285714,
                "tf.argmin(input, axis)": 0.004464285714285714,
                "tf.argsort(values, axis, stable=True)": 0.008928571428571428,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.004464285714285714,
                "tf.boolean_mask(tensor, mask)": 0.004464285714285714,
                "tf.broadcast_to(input, shape)": 0.004464285714285714,
                "tf.cast(x, dtype)": 0.013392857142857142,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.004464285714285714,
                "tf.concat(values, axis)": 0.004464285714285714,
                "tf.constant(value)": 0.004464285714285714,
                "tf.constant(value, dtype)": 0.004464285714285714,
                "tf.divide(x, y)": 0.004464285714285714,
                "tf.equal(x, y)": 0.004464285714285714,
                "tf.exp(x)": 0.004464285714285714,
                "tf.expand_dims(input, axis)": 0.004464285714285714,
                "tf.eye(num_rows)": 0.004464285714285714,
                "tf.eye(num_rows, num_columns)": 0.004464285714285714,
                "tf.eye(num_rows, dtype)": 0.004464285714285714,
                "tf.fill(dims, value)": 0.004464285714285714,
                "tf.gather(params, indices)": 0.017857142857142856,
                "tf.gather(params, indices, axis, batch_dims)": 0.004464285714285714,
                "tf.gather_nd(params, indices)": 0.004464285714285714,
                "tf.gather_nd(params, indices, batch_dims)": 0.004464285714285714,
                "tf.greater(x, y)": 0.004464285714285714,
                "tf.greater_equal(x, y)": 0.004464285714285714,
                "tf.math.bincount(arr)": 0.004464285714285714,
                "tf.math.ceil(x)": 0.004464285714285714,
                "tf.math.count_nonzero(input)": 0.004464285714285714,
                "tf.math.count_nonzero(input, axis)": 0.004464285714285714,
                "tf.math.cumsum(x, axis)": 0.004464285714285714,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.004464285714285714,
                "tf.math.divide_no_nan(x, y)": 0.004464285714285714,
                "tf.math.floor(x)": 0.004464285714285714,
                "tf.math.log(x)": 0.004464285714285714,
                "tf.math.logical_and(x, y)": 0.004464285714285714,
                "tf.math.logical_not(x)": 0.004464285714285714,
                "tf.math.logical_or(x, y)": 0.004464285714285714,
                "tf.math.logical_xor(x, y)": 0.004464285714285714,
                "tf.math.negative(x)": 0.004464285714285714,
                "tf.math.reciprocal(x)": 0.004464285714285714,
                "tf.math.reciprocal_no_nan(x)": 0.004464285714285714,
                "tf.math.segment_max(data, segment_ids)": 0.008928571428571428,
                "tf.math.segment_mean(data, segment_ids)": 0.004464285714285714,
                "tf.math.segment_min(data, segment_ids)": 0.004464285714285714,
                "tf.math.segment_prod(data, segment_ids)": 0.004464285714285714,
                "tf.math.segment_sum(data, segment_ids)": 0.004464285714285714,
                "tf.math.squared_difference(x, y)": 0.004464285714285714,
                "tf.math.top_k(input, k)": 0.004464285714285714,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.008928571428571428,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.004464285714285714,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.004464285714285714,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.004464285714285714,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.004464285714285714,
                "tf.matmul(a, b)": 0.004464285714285714,
                "tf.maximum(x, y)": 0.004464285714285714,
                "tf.minimum(x, y)": 0.004464285714285714,
                "tf.multiply(x, y)": 0.004464285714285714,
                "tf.not_equal(x, y)": 0.004464285714285714,
                "tf.one_hot(indices, depth)": 0.004464285714285714,
                "tf.ones(shape)": 0.004464285714285714,
                "tf.ones_like(input)": 0.004464285714285714,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.004464285714285714,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.004464285714285714,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.004464285714285714,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.004464285714285714,
                "tf.range(start)": 0.008928571428571428,
                "tf.range(start, limit, delta)": 0.004464285714285714,
                "tf.reduce_any(input_tensor, axis)": 0.004464285714285714,
                "tf.reduce_all(input_tensor, axis)": 0.004464285714285714,
                "tf.reduce_max(input_tensor)": 0.008928571428571428,
                "tf.reduce_max(input_tensor, axis)": 0.004464285714285714,
                "tf.reduce_mean(input_tensor)": 0.004464285714285714,
                "tf.reduce_mean(input_tensor, axis)": 0.004464285714285714,
                "tf.reduce_min(input_tensor)": 0.004464285714285714,
                "tf.reduce_min(input_tensor, axis)": 0.004464285714285714,
                "tf.reduce_prod(input_tensor, axis)": 0.004464285714285714,
                "tf.reduce_sum(input_tensor)": 0.004464285714285714,
                "tf.reduce_sum(input_tensor, axis)": 0.004464285714285714,
                "tf.repeat(input, repeats)": 0.004464285714285714,
                "tf.repeat(input, repeats, axis)": 0.004464285714285714,
                "tf.reshape(tensor, shape)": 0.004464285714285714,
                "tf.reverse(tensor, axis)": 0.004464285714285714,
                "tf.roll(input, shift, axis)": 0.004464285714285714,
                "tf.round(x)": 0.004464285714285714,
                "tf.scatter_nd(indices, updates, shape)": 0.004464285714285714,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.004464285714285714,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.004464285714285714,
                "tf.sequence_mask(lengths)": 0.004464285714285714,
                "tf.sequence_mask(lengths, maxlen)": 0.004464285714285714,
                "tf.shape(input)": 0.004464285714285714,
                "tf.sign(x)": 0.004464285714285714,
                "tf.sort(values, axis)": 0.004464285714285714,
                "tf.sort(values, axis, direction='DESCENDING')": 0.004464285714285714,
                "tf.sqrt(x)": 0.004464285714285714,
                "tf.square(x)": 0.004464285714285714,
                "tf.squeeze(input)": 0.004464285714285714,
                "tf.squeeze(input, axis)": 0.004464285714285714,
                "tf.stack(values, axis)": 0.004464285714285714,
                "tf.subtract(x, y)": 0.004464285714285714,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.004464285714285714,
                "tf.tensordot(a, b, axes)": 0.004464285714285714,
                "tf.tile(input, multiples)": 0.004464285714285714,
                "tf.transpose(a)": 0.004464285714285714,
                "tf.transpose(a, perm)": 0.004464285714285714,
                "tf.unique_with_counts(x)": 0.026785714285714284,
                "tf.unstack(value, axis)": 0.004464285714285714,
                "tf.where(condition)": 0.004464285714285714,
                "tf.where(condition, x, y)": 0.004464285714285714,
                "tf.zeros(shape)": 0.004464285714285714,
                "tf.zeros_like(input)": 0.004464285714285714,
                "tf.SparseTensor(indices, values, dense_shape)": 0.004464285714285714,
                "tf.sparse.add(a, b)": 0.004464285714285714,
                "tf.sparse.concat(axis, sp_inputs)": 0.004464285714285714,
                "tf.sparse.expand_dims(sp_input, axis)": 0.004464285714285714,
                "tf.sparse.from_dense(tensor)": 0.004464285714285714,
                "tf.sparse.maximum(sp_a, sp_b)": 0.004464285714285714,
                "tf.sparse.minimum(sp_a, sp_b)": 0.004464285714285714,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.004464285714285714,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.004464285714285714,
                "tf.sparse.reset_shape(sp_input)": 0.004464285714285714,
                "tf.sparse.reshape(sp_input, shape)": 0.004464285714285714,
                "tf.sparse.retain(sp_input, to_retain)": 0.004464285714285714,
                "tf.sparse.slice(sp_input, start, size)": 0.004464285714285714,
                "tf.sparse.split(sp_input, num_split, axis)": 0.004464285714285714,
                "tf.sparse.to_dense(sp_input)": 0.004464285714285714,
                "tf.sparse.to_dense(sp_input, default_value)": 0.004464285714285714,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.004464285714285714,
                "tf.sparse.transpose(sp_input)": 0.004464285714285714,
                "tf.sparse.transpose(sp_input, perm)": 0.004464285714285714,
                "IndexingAxis1Operation": 0.008928571428571428,
                "IndexingOperation": 0.026785714285714284,
                "PairCreationOperation": 0.04017857142857143,
                "SingletonTupleCreationOperation": 0.004464285714285714,
                "SlicingAxis0BothOperation": 0.004464285714285714,
                "SlicingAxis0LeftOperation": 0.004464285714285714,
                "SlicingAxis0RightOperation": 0.004464285714285714,
                "SlicingAxis1BothOperation": 0.004464285714285714,
                "SlicingAxis1LeftOperation": 0.004464285714285714,
                "SlicingAxis1RightOperation": 0.004464285714285714,
                "TripleCreationOperation": 0.008928571428571428,
                "PROVIDED_CONSTANT_WEIGHT": 0.013392857142857142,
                "COMMON_CONSTANT_WEIGHT": 0.03125,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.004464285714285714,
                "INPUT_VARIABLE_WEIGHT": 0.13392857142857142,
                "AXIS_CONSTANT_WEIGHT": 0.004464285714285714,
                "SHAPE_CONSTANT_WEIGHT": 0.004464285714285714,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.004464285714285714,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.013392857142857142,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.004464285714285714,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.004464285714285714,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.004464285714285714
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 7,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 6,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 8,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 6,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 7,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 8,
                "tf.pad(tensor, paddings, mode='REFLECT')": 8,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 8,
                "tf.range(start)": 7,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 7,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side='left')": 8,
                "tf.searchsorted(sorted_sequence, values, side='right')": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 8,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction='DESCENDING')": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 5,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 7,
                "IndexingOperation": 5,
                "PairCreationOperation": 5,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 7,
                "PROVIDED_CONSTANT_WEIGHT": 6,
                "COMMON_CONSTANT_WEIGHT": 5,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 3,
                "AXIS_CONSTANT_WEIGHT": 8,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 6,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "stackoverflow_10",
        "description": "perform matrix multiplication",
        "target_program": "tf.matmul(tf.expand_dims(in1, -1), tf.expand_dims(in2, 1))",
        "source": "https://stackoverflow.com/questions/53094212/tensorflow-sxn-matrix-multiply-with-sxd-matrix-to-output-sxnxd-array",
        "constants": "[]",
        "examples": {
            "inputs": "[[[15, 10], [20, -5]],[[2, 3, 1], [-2, 5, 0]],]",
            "outputs": "[[[30, 45, 15], [20, 30, 10]],[[-40, 100, 0], [10, -25, 0]]]"
        },
        "completions": [
            "return tf.transpose(tf.matmul(tf.transpose(in1), tf.transpose(in2)), perm=[2, 0, 1])",
            "return tf.matmul(in1, in2)",
            "return tf.matmul(in1, in2)\n",
            "return tf.matmul(in1, in2)",
            "return tf.matmul(in1, in2)",
            "return tf.matmul(in1, tf.expand_dims(in2, axis=0))",
            "return tf.matmul(in1, in2)\n",
            "return tf.matmul(in1, in2)\n",
            "return tf.matmul(in1, in2)\n",
            "def transform(in1, in2):\n    return tf.matmul(in1, in2)\n",
            "return tf.matmul(in1, in2)\n",
            "return tf.matmul(in1, in2)",
            "return tf.matmul(in1, in2)",
            "return tf.matmul(in1, in2)",
            "return tf.matmul(in1, in2)\n",
            "return tf.reshape(tf.matmul(tf.expand_dims(in1, axis=1), tf.expand_dims(in2, axis=0)), [-1, tf.shape(in2)[1]])",
            "return tf.matmul(in1, in2)\n",
            "return tf.matmul(in1, in2)",
            "return tf.matmul(in1, in2)\n",
            "return tf.transpose(tf.tensordot(in1, in2, axes=1), perm=[0, 2, 1])"
        ],
        "tf_operators": {
            "tf.transpose": 2,
            "tf.matmul": 19,
            "tf.expand_dims": 2,
            "tf.reshape": 1,
            "tf.shape": 1,
            "tf.tensordot": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 2,
        "total_in_target": 2,
        "parsed_constants": [
            [
                2,
                0,
                1
            ],
            [],
            [],
            [],
            [],
            [
                0
            ],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [
                1,
                0,
                -1,
                1
            ],
            [],
            [],
            [],
            [
                1,
                0,
                2,
                1
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            -1
        ],
        "constant_counts": [
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 41,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 10,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 2,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.00423728813559322,
                "tf.add(x, y)": 0.00423728813559322,
                "tf.add_n(inputs)": 0.00423728813559322,
                "tf.argmax(input, axis)": 0.00423728813559322,
                "tf.argmin(input, axis)": 0.00423728813559322,
                "tf.argsort(values, axis, stable=True)": 0.00423728813559322,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.00423728813559322,
                "tf.boolean_mask(tensor, mask)": 0.00423728813559322,
                "tf.broadcast_to(input, shape)": 0.00423728813559322,
                "tf.cast(x, dtype)": 0.00423728813559322,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.00423728813559322,
                "tf.concat(values, axis)": 0.00423728813559322,
                "tf.constant(value)": 0.00423728813559322,
                "tf.constant(value, dtype)": 0.00423728813559322,
                "tf.divide(x, y)": 0.00423728813559322,
                "tf.equal(x, y)": 0.00423728813559322,
                "tf.exp(x)": 0.00423728813559322,
                "tf.expand_dims(input, axis)": 0.01694915254237288,
                "tf.eye(num_rows)": 0.00423728813559322,
                "tf.eye(num_rows, num_columns)": 0.00423728813559322,
                "tf.eye(num_rows, dtype)": 0.00423728813559322,
                "tf.fill(dims, value)": 0.00423728813559322,
                "tf.gather(params, indices)": 0.00423728813559322,
                "tf.gather(params, indices, axis, batch_dims)": 0.00423728813559322,
                "tf.gather_nd(params, indices)": 0.00423728813559322,
                "tf.gather_nd(params, indices, batch_dims)": 0.00423728813559322,
                "tf.greater(x, y)": 0.00423728813559322,
                "tf.greater_equal(x, y)": 0.00423728813559322,
                "tf.math.bincount(arr)": 0.00423728813559322,
                "tf.math.ceil(x)": 0.00423728813559322,
                "tf.math.count_nonzero(input)": 0.00423728813559322,
                "tf.math.count_nonzero(input, axis)": 0.00423728813559322,
                "tf.math.cumsum(x, axis)": 0.00423728813559322,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.00423728813559322,
                "tf.math.divide_no_nan(x, y)": 0.00423728813559322,
                "tf.math.floor(x)": 0.00423728813559322,
                "tf.math.log(x)": 0.00423728813559322,
                "tf.math.logical_and(x, y)": 0.00423728813559322,
                "tf.math.logical_not(x)": 0.00423728813559322,
                "tf.math.logical_or(x, y)": 0.00423728813559322,
                "tf.math.logical_xor(x, y)": 0.00423728813559322,
                "tf.math.negative(x)": 0.00423728813559322,
                "tf.math.reciprocal(x)": 0.00423728813559322,
                "tf.math.reciprocal_no_nan(x)": 0.00423728813559322,
                "tf.math.segment_max(data, segment_ids)": 0.00423728813559322,
                "tf.math.segment_mean(data, segment_ids)": 0.00423728813559322,
                "tf.math.segment_min(data, segment_ids)": 0.00423728813559322,
                "tf.math.segment_prod(data, segment_ids)": 0.00423728813559322,
                "tf.math.segment_sum(data, segment_ids)": 0.00423728813559322,
                "tf.math.squared_difference(x, y)": 0.00423728813559322,
                "tf.math.top_k(input, k)": 0.00423728813559322,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.00423728813559322,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.00423728813559322,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.00423728813559322,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.00423728813559322,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.00423728813559322,
                "tf.matmul(a, b)": 0.0847457627118644,
                "tf.maximum(x, y)": 0.00423728813559322,
                "tf.minimum(x, y)": 0.00423728813559322,
                "tf.multiply(x, y)": 0.00423728813559322,
                "tf.not_equal(x, y)": 0.00423728813559322,
                "tf.one_hot(indices, depth)": 0.00423728813559322,
                "tf.ones(shape)": 0.00423728813559322,
                "tf.ones_like(input)": 0.00423728813559322,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.00423728813559322,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.00423728813559322,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.00423728813559322,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.00423728813559322,
                "tf.range(start)": 0.00423728813559322,
                "tf.range(start, limit, delta)": 0.00423728813559322,
                "tf.reduce_any(input_tensor, axis)": 0.00423728813559322,
                "tf.reduce_all(input_tensor, axis)": 0.00423728813559322,
                "tf.reduce_max(input_tensor)": 0.00423728813559322,
                "tf.reduce_max(input_tensor, axis)": 0.00423728813559322,
                "tf.reduce_mean(input_tensor)": 0.00423728813559322,
                "tf.reduce_mean(input_tensor, axis)": 0.00423728813559322,
                "tf.reduce_min(input_tensor)": 0.00423728813559322,
                "tf.reduce_min(input_tensor, axis)": 0.00423728813559322,
                "tf.reduce_prod(input_tensor, axis)": 0.00423728813559322,
                "tf.reduce_sum(input_tensor)": 0.00423728813559322,
                "tf.reduce_sum(input_tensor, axis)": 0.00423728813559322,
                "tf.repeat(input, repeats)": 0.00423728813559322,
                "tf.repeat(input, repeats, axis)": 0.00423728813559322,
                "tf.reshape(tensor, shape)": 0.00847457627118644,
                "tf.reverse(tensor, axis)": 0.00423728813559322,
                "tf.roll(input, shift, axis)": 0.00423728813559322,
                "tf.round(x)": 0.00423728813559322,
                "tf.scatter_nd(indices, updates, shape)": 0.00423728813559322,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.00423728813559322,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.00423728813559322,
                "tf.sequence_mask(lengths)": 0.00423728813559322,
                "tf.sequence_mask(lengths, maxlen)": 0.00423728813559322,
                "tf.shape(input)": 0.00847457627118644,
                "tf.sign(x)": 0.00423728813559322,
                "tf.sort(values, axis)": 0.00423728813559322,
                "tf.sort(values, axis, direction='DESCENDING')": 0.00423728813559322,
                "tf.sqrt(x)": 0.00423728813559322,
                "tf.square(x)": 0.00423728813559322,
                "tf.squeeze(input)": 0.00423728813559322,
                "tf.squeeze(input, axis)": 0.00423728813559322,
                "tf.stack(values, axis)": 0.00423728813559322,
                "tf.subtract(x, y)": 0.00423728813559322,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.00423728813559322,
                "tf.tensordot(a, b, axes)": 0.00847457627118644,
                "tf.tile(input, multiples)": 0.00423728813559322,
                "tf.transpose(a)": 0.012711864406779662,
                "tf.transpose(a, perm)": 0.00423728813559322,
                "tf.unique_with_counts(x)": 0.00423728813559322,
                "tf.unstack(value, axis)": 0.00423728813559322,
                "tf.where(condition)": 0.00423728813559322,
                "tf.where(condition, x, y)": 0.00423728813559322,
                "tf.zeros(shape)": 0.00423728813559322,
                "tf.zeros_like(input)": 0.00423728813559322,
                "tf.SparseTensor(indices, values, dense_shape)": 0.00423728813559322,
                "tf.sparse.add(a, b)": 0.00423728813559322,
                "tf.sparse.concat(axis, sp_inputs)": 0.00423728813559322,
                "tf.sparse.expand_dims(sp_input, axis)": 0.00423728813559322,
                "tf.sparse.from_dense(tensor)": 0.00423728813559322,
                "tf.sparse.maximum(sp_a, sp_b)": 0.00423728813559322,
                "tf.sparse.minimum(sp_a, sp_b)": 0.00423728813559322,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.00423728813559322,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.00423728813559322,
                "tf.sparse.reset_shape(sp_input)": 0.00423728813559322,
                "tf.sparse.reshape(sp_input, shape)": 0.00423728813559322,
                "tf.sparse.retain(sp_input, to_retain)": 0.00423728813559322,
                "tf.sparse.slice(sp_input, start, size)": 0.00423728813559322,
                "tf.sparse.split(sp_input, num_split, axis)": 0.00423728813559322,
                "tf.sparse.to_dense(sp_input)": 0.00423728813559322,
                "tf.sparse.to_dense(sp_input, default_value)": 0.00423728813559322,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.00423728813559322,
                "tf.sparse.transpose(sp_input)": 0.00423728813559322,
                "tf.sparse.transpose(sp_input, perm)": 0.00423728813559322,
                "IndexingAxis1Operation": 0.00423728813559322,
                "IndexingOperation": 0.00847457627118644,
                "PairCreationOperation": 0.00423728813559322,
                "SingletonTupleCreationOperation": 0.00423728813559322,
                "SlicingAxis0BothOperation": 0.00423728813559322,
                "SlicingAxis0LeftOperation": 0.00423728813559322,
                "SlicingAxis0RightOperation": 0.00423728813559322,
                "SlicingAxis1BothOperation": 0.00423728813559322,
                "SlicingAxis1LeftOperation": 0.00423728813559322,
                "SlicingAxis1RightOperation": 0.00423728813559322,
                "TripleCreationOperation": 0.00423728813559322,
                "PROVIDED_CONSTANT_WEIGHT": 0.00423728813559322,
                "COMMON_CONSTANT_WEIGHT": 0.046610169491525424,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.00423728813559322,
                "INPUT_VARIABLE_WEIGHT": 0.17796610169491525,
                "AXIS_CONSTANT_WEIGHT": 0.012711864406779662,
                "SHAPE_CONSTANT_WEIGHT": 0.00423728813559322,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.00423728813559322,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.00423728813559322,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.00423728813559322,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.00423728813559322,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.00423728813559322
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 8,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 6,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 4,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 8,
                "tf.pad(tensor, paddings, mode='REFLECT')": 8,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 7,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side='left')": 8,
                "tf.searchsorted(sorted_sequence, values, side='right')": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 7,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction='DESCENDING')": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 7,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 6,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 7,
                "PairCreationOperation": 8,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 4,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 2,
                "AXIS_CONSTANT_WEIGHT": 6,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "stackoverflow_11",
        "description": "count the number of occurences of each distinct number",
        "target_program": "tf.math.bincount(in1)",
        "source": "https://stackoverflow.com/questions/45194672/how-to-count-elements-in-tensorflow-tensor",
        "constants": "[]",
        "examples": {
            "inputs": "[[4, 0, 1, 1, 0, 4, 0, 0, 3, 4, 1],]",
            "outputs": "[4, 3, 0, 1, 3]"
        },
        "completions": [
            "return tf.math.bincount(in1)",
            "return tf.math.bincount(in1)",
            "return tf.math.bincount(in1)",
            "return tf.math.bincount(in1)",
            "return tf.math.bincount(in1)",
            "return tf.math.bincount(in1)",
            "return tf.math.bincount(in1)",
            "return tf.math.bincount(in1)",
            "def transform(in1):\n    counts = tf.math.bincount(in1)\n    return counts[counts > 0]\n",
            "result = tf.math.bincount(in1)\nreturn result[result > 0]\n",
            "return tf.math.bincount(in1)",
            "return tf.math.bincount(in1)",
            "def transform(in1):\n    return tf.math.segment_sum(tf.ones_like(in1, dtype=tf.int32), in1)\n",
            "return tf.math.bincount(in1)",
            "return tf.math.bincount(in1)",
            "return tf.math.bincount(in1)",
            "return tf.math.bincount(in1)",
            "return tf.math.bincount(in1)",
            "return tf.math.bincount(in1)",
            "return tf.math.bincount(in1)"
        ],
        "tf_operators": {
            "tf.math.bincount": 19,
            "tf.math.segment_sum": 1,
            "tf.ones_like": 1,
            "tf.int32": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 1,
        "total_in_target": 1,
        "parsed_constants": [
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [
                0
            ],
            [
                0
            ],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            []
        ],
        "all_constants": [
            0
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 21,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 2,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 1
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.0049504950495049506,
                "tf.add(x, y)": 0.0049504950495049506,
                "tf.add_n(inputs)": 0.0049504950495049506,
                "tf.argmax(input, axis)": 0.0049504950495049506,
                "tf.argmin(input, axis)": 0.0049504950495049506,
                "tf.argsort(values, axis, stable=True)": 0.0049504950495049506,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.0049504950495049506,
                "tf.boolean_mask(tensor, mask)": 0.0049504950495049506,
                "tf.broadcast_to(input, shape)": 0.0049504950495049506,
                "tf.cast(x, dtype)": 0.0049504950495049506,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.0049504950495049506,
                "tf.concat(values, axis)": 0.0049504950495049506,
                "tf.constant(value)": 0.0049504950495049506,
                "tf.constant(value, dtype)": 0.0049504950495049506,
                "tf.divide(x, y)": 0.0049504950495049506,
                "tf.equal(x, y)": 0.0049504950495049506,
                "tf.exp(x)": 0.0049504950495049506,
                "tf.expand_dims(input, axis)": 0.0049504950495049506,
                "tf.eye(num_rows)": 0.0049504950495049506,
                "tf.eye(num_rows, num_columns)": 0.0049504950495049506,
                "tf.eye(num_rows, dtype)": 0.0049504950495049506,
                "tf.fill(dims, value)": 0.0049504950495049506,
                "tf.gather(params, indices)": 0.0049504950495049506,
                "tf.gather(params, indices, axis, batch_dims)": 0.0049504950495049506,
                "tf.gather_nd(params, indices)": 0.0049504950495049506,
                "tf.gather_nd(params, indices, batch_dims)": 0.0049504950495049506,
                "tf.greater(x, y)": 0.0049504950495049506,
                "tf.greater_equal(x, y)": 0.0049504950495049506,
                "tf.math.bincount(arr)": 0.09900990099009901,
                "tf.math.ceil(x)": 0.0049504950495049506,
                "tf.math.count_nonzero(input)": 0.0049504950495049506,
                "tf.math.count_nonzero(input, axis)": 0.0049504950495049506,
                "tf.math.cumsum(x, axis)": 0.0049504950495049506,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.0049504950495049506,
                "tf.math.divide_no_nan(x, y)": 0.0049504950495049506,
                "tf.math.floor(x)": 0.0049504950495049506,
                "tf.math.log(x)": 0.0049504950495049506,
                "tf.math.logical_and(x, y)": 0.0049504950495049506,
                "tf.math.logical_not(x)": 0.0049504950495049506,
                "tf.math.logical_or(x, y)": 0.0049504950495049506,
                "tf.math.logical_xor(x, y)": 0.0049504950495049506,
                "tf.math.negative(x)": 0.0049504950495049506,
                "tf.math.reciprocal(x)": 0.0049504950495049506,
                "tf.math.reciprocal_no_nan(x)": 0.0049504950495049506,
                "tf.math.segment_max(data, segment_ids)": 0.0049504950495049506,
                "tf.math.segment_mean(data, segment_ids)": 0.0049504950495049506,
                "tf.math.segment_min(data, segment_ids)": 0.0049504950495049506,
                "tf.math.segment_prod(data, segment_ids)": 0.0049504950495049506,
                "tf.math.segment_sum(data, segment_ids)": 0.009900990099009901,
                "tf.math.squared_difference(x, y)": 0.0049504950495049506,
                "tf.math.top_k(input, k)": 0.0049504950495049506,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.0049504950495049506,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.0049504950495049506,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.0049504950495049506,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.0049504950495049506,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.0049504950495049506,
                "tf.matmul(a, b)": 0.0049504950495049506,
                "tf.maximum(x, y)": 0.0049504950495049506,
                "tf.minimum(x, y)": 0.0049504950495049506,
                "tf.multiply(x, y)": 0.0049504950495049506,
                "tf.not_equal(x, y)": 0.0049504950495049506,
                "tf.one_hot(indices, depth)": 0.0049504950495049506,
                "tf.ones(shape)": 0.0049504950495049506,
                "tf.ones_like(input)": 0.009900990099009901,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.0049504950495049506,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.0049504950495049506,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.0049504950495049506,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.0049504950495049506,
                "tf.range(start)": 0.0049504950495049506,
                "tf.range(start, limit, delta)": 0.0049504950495049506,
                "tf.reduce_any(input_tensor, axis)": 0.0049504950495049506,
                "tf.reduce_all(input_tensor, axis)": 0.0049504950495049506,
                "tf.reduce_max(input_tensor)": 0.0049504950495049506,
                "tf.reduce_max(input_tensor, axis)": 0.0049504950495049506,
                "tf.reduce_mean(input_tensor)": 0.0049504950495049506,
                "tf.reduce_mean(input_tensor, axis)": 0.0049504950495049506,
                "tf.reduce_min(input_tensor)": 0.0049504950495049506,
                "tf.reduce_min(input_tensor, axis)": 0.0049504950495049506,
                "tf.reduce_prod(input_tensor, axis)": 0.0049504950495049506,
                "tf.reduce_sum(input_tensor)": 0.0049504950495049506,
                "tf.reduce_sum(input_tensor, axis)": 0.0049504950495049506,
                "tf.repeat(input, repeats)": 0.0049504950495049506,
                "tf.repeat(input, repeats, axis)": 0.0049504950495049506,
                "tf.reshape(tensor, shape)": 0.0049504950495049506,
                "tf.reverse(tensor, axis)": 0.0049504950495049506,
                "tf.roll(input, shift, axis)": 0.0049504950495049506,
                "tf.round(x)": 0.0049504950495049506,
                "tf.scatter_nd(indices, updates, shape)": 0.0049504950495049506,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.0049504950495049506,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.0049504950495049506,
                "tf.sequence_mask(lengths)": 0.0049504950495049506,
                "tf.sequence_mask(lengths, maxlen)": 0.0049504950495049506,
                "tf.shape(input)": 0.0049504950495049506,
                "tf.sign(x)": 0.0049504950495049506,
                "tf.sort(values, axis)": 0.0049504950495049506,
                "tf.sort(values, axis, direction='DESCENDING')": 0.0049504950495049506,
                "tf.sqrt(x)": 0.0049504950495049506,
                "tf.square(x)": 0.0049504950495049506,
                "tf.squeeze(input)": 0.0049504950495049506,
                "tf.squeeze(input, axis)": 0.0049504950495049506,
                "tf.stack(values, axis)": 0.0049504950495049506,
                "tf.subtract(x, y)": 0.0049504950495049506,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.0049504950495049506,
                "tf.tensordot(a, b, axes)": 0.0049504950495049506,
                "tf.tile(input, multiples)": 0.0049504950495049506,
                "tf.transpose(a)": 0.0049504950495049506,
                "tf.transpose(a, perm)": 0.0049504950495049506,
                "tf.unique_with_counts(x)": 0.0049504950495049506,
                "tf.unstack(value, axis)": 0.0049504950495049506,
                "tf.where(condition)": 0.0049504950495049506,
                "tf.where(condition, x, y)": 0.0049504950495049506,
                "tf.zeros(shape)": 0.0049504950495049506,
                "tf.zeros_like(input)": 0.0049504950495049506,
                "tf.SparseTensor(indices, values, dense_shape)": 0.0049504950495049506,
                "tf.sparse.add(a, b)": 0.0049504950495049506,
                "tf.sparse.concat(axis, sp_inputs)": 0.0049504950495049506,
                "tf.sparse.expand_dims(sp_input, axis)": 0.0049504950495049506,
                "tf.sparse.from_dense(tensor)": 0.0049504950495049506,
                "tf.sparse.maximum(sp_a, sp_b)": 0.0049504950495049506,
                "tf.sparse.minimum(sp_a, sp_b)": 0.0049504950495049506,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.0049504950495049506,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.0049504950495049506,
                "tf.sparse.reset_shape(sp_input)": 0.0049504950495049506,
                "tf.sparse.reshape(sp_input, shape)": 0.0049504950495049506,
                "tf.sparse.retain(sp_input, to_retain)": 0.0049504950495049506,
                "tf.sparse.slice(sp_input, start, size)": 0.0049504950495049506,
                "tf.sparse.split(sp_input, num_split, axis)": 0.0049504950495049506,
                "tf.sparse.to_dense(sp_input)": 0.0049504950495049506,
                "tf.sparse.to_dense(sp_input, default_value)": 0.0049504950495049506,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.0049504950495049506,
                "tf.sparse.transpose(sp_input)": 0.0049504950495049506,
                "tf.sparse.transpose(sp_input, perm)": 0.0049504950495049506,
                "IndexingAxis1Operation": 0.0049504950495049506,
                "IndexingOperation": 0.01485148514851485,
                "PairCreationOperation": 0.0049504950495049506,
                "SingletonTupleCreationOperation": 0.0049504950495049506,
                "SlicingAxis0BothOperation": 0.0049504950495049506,
                "SlicingAxis0LeftOperation": 0.0049504950495049506,
                "SlicingAxis0RightOperation": 0.0049504950495049506,
                "SlicingAxis1BothOperation": 0.0049504950495049506,
                "SlicingAxis1LeftOperation": 0.0049504950495049506,
                "SlicingAxis1RightOperation": 0.0049504950495049506,
                "TripleCreationOperation": 0.0049504950495049506,
                "PROVIDED_CONSTANT_WEIGHT": 0.0049504950495049506,
                "COMMON_CONSTANT_WEIGHT": 0.01485148514851485,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.0049504950495049506,
                "INPUT_VARIABLE_WEIGHT": 0.10891089108910891,
                "AXIS_CONSTANT_WEIGHT": 0.0049504950495049506,
                "SHAPE_CONSTANT_WEIGHT": 0.0049504950495049506,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.0049504950495049506,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.009900990099009901,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.0049504950495049506,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.0049504950495049506,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.0049504950495049506
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 8,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 8,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 3,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 7,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 7,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 8,
                "tf.pad(tensor, paddings, mode='REFLECT')": 8,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side='left')": 8,
                "tf.searchsorted(sorted_sequence, values, side='right')": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 8,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction='DESCENDING')": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 6,
                "PairCreationOperation": 8,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 6,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 3,
                "AXIS_CONSTANT_WEIGHT": 8,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 7,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "stackoverflow_12",
        "description": "remove a column from the tensor",
        "target_program": "tf.gather(in1, (0, 2), axis=1, batch_dims=0)",
        "source": "https://stackoverflow.com/questions/47447183/remove-a-set-of-tensors-from-a-tensor-in-tensorflow",
        "constants": "[0, 1, 2]",
        "examples": {
            "inputs": "[[[12, 34, 56], [33, 22, 11]]]",
            "outputs": "[[12, 56], [33, 11]]"
        },
        "completions": [
            "return tf.gather(in1, [0, 2], axis=1)\n",
            "return tf.concat([in1[:, :1], in1[:, 2:]], axis=1)\n",
            "return tf.stack((in1[:,0], in1[:,2]), axis=1)\n",
            "def transform(in1):\n    return in1[:, [0, 2]]\n",
            "def transform(in1):\n    return tf.gather(in1, [0, 2], axis=1)\n",
            "return tf.concat([in1[:,:1], in1[:,2:]], axis=1)\n",
            "return tf.slice(in1, [0, 0], [2, 1])\n",
            "return tf.boolean_mask(in1, [True, False, True], axis=1)\n",
            "return tf.slice(in1, [0, 0], [-1, 2])\n",
            "result = tf.concat([in1[:,0:1], in1[:,2:3]], axis=1)\nreturn result\n",
            "return tf.slice(in1, [0, 0], [2, 1])\n",
            "return tf.unsorted_segment_max(in1, tf.range(in1.shape[1]), in1.shape[1])\n",
            "return tf.gather(in1, [0, 2], axis=1)\n",
            "return tf.stack([in1[:, 0], in1[:, 2]], axis=1)\n",
            "return tf.concat([in1[:, :1], in1[:, 2:]], axis=1)\n",
            "return tf.gather(in1, [0, 2], axis=1)\n",
            "result = tf.gather(in1, indices=[0, 2], axis=1)\nreturn result\n",
            "result = tf.concat([in1[:,0:1], in1[:,2:3]], axis=1)\nreturn result\n",
            "return tf.gather(in1, [0, 2], axis=1)\n",
            "return tf.slice(in1, [0, 0], [2, 1])\n"
        ],
        "tf_operators": {
            "tf.gather": 6,
            "tf.concat": 5,
            "tf.stack": 2,
            "tf.slice": 4,
            "tf.boolean_mask": 1,
            "tf.range": 1,
            "tf.unsorted_segment_max": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 1,
        "total_in_target": 1,
        "parsed_constants": [
            [
                0,
                2,
                1
            ],
            [
                1,
                2,
                1
            ],
            [
                0,
                2,
                1
            ],
            [
                0,
                2
            ],
            [
                0,
                2,
                1
            ],
            [
                1,
                2,
                1
            ],
            [
                0,
                0,
                2,
                1
            ],
            [
                1
            ],
            [
                0,
                0,
                -1,
                2
            ],
            [
                0,
                1,
                2,
                3,
                1
            ],
            [
                0,
                0,
                2,
                1
            ],
            [
                1,
                1
            ],
            [
                0,
                2,
                1
            ],
            [
                0,
                2,
                1
            ],
            [
                1,
                2,
                1
            ],
            [
                0,
                2,
                1
            ],
            [
                0,
                2,
                1
            ],
            [
                0,
                1,
                2,
                3,
                1
            ],
            [
                0,
                2,
                1
            ],
            [
                0,
                0,
                2,
                1
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            3,
            -1
        ],
        "constant_counts": [
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 27,
            "shape": 2,
            "tf_bool": 0,
            "provided": 0,
            "common": 45,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 16,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.003424657534246575,
                "tf.add(x, y)": 0.003424657534246575,
                "tf.add_n(inputs)": 0.003424657534246575,
                "tf.argmax(input, axis)": 0.003424657534246575,
                "tf.argmin(input, axis)": 0.003424657534246575,
                "tf.argsort(values, axis, stable=True)": 0.003424657534246575,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.003424657534246575,
                "tf.boolean_mask(tensor, mask)": 0.00684931506849315,
                "tf.broadcast_to(input, shape)": 0.003424657534246575,
                "tf.cast(x, dtype)": 0.003424657534246575,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.003424657534246575,
                "tf.concat(values, axis)": 0.02054794520547945,
                "tf.constant(value)": 0.003424657534246575,
                "tf.constant(value, dtype)": 0.003424657534246575,
                "tf.divide(x, y)": 0.003424657534246575,
                "tf.equal(x, y)": 0.003424657534246575,
                "tf.exp(x)": 0.003424657534246575,
                "tf.expand_dims(input, axis)": 0.003424657534246575,
                "tf.eye(num_rows)": 0.003424657534246575,
                "tf.eye(num_rows, num_columns)": 0.003424657534246575,
                "tf.eye(num_rows, dtype)": 0.003424657534246575,
                "tf.fill(dims, value)": 0.003424657534246575,
                "tf.gather(params, indices)": 0.003424657534246575,
                "tf.gather(params, indices, axis, batch_dims)": 0.02054794520547945,
                "tf.gather_nd(params, indices)": 0.003424657534246575,
                "tf.gather_nd(params, indices, batch_dims)": 0.003424657534246575,
                "tf.greater(x, y)": 0.003424657534246575,
                "tf.greater_equal(x, y)": 0.003424657534246575,
                "tf.math.bincount(arr)": 0.003424657534246575,
                "tf.math.ceil(x)": 0.003424657534246575,
                "tf.math.count_nonzero(input)": 0.003424657534246575,
                "tf.math.count_nonzero(input, axis)": 0.003424657534246575,
                "tf.math.cumsum(x, axis)": 0.003424657534246575,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.003424657534246575,
                "tf.math.divide_no_nan(x, y)": 0.003424657534246575,
                "tf.math.floor(x)": 0.003424657534246575,
                "tf.math.log(x)": 0.003424657534246575,
                "tf.math.logical_and(x, y)": 0.003424657534246575,
                "tf.math.logical_not(x)": 0.003424657534246575,
                "tf.math.logical_or(x, y)": 0.003424657534246575,
                "tf.math.logical_xor(x, y)": 0.003424657534246575,
                "tf.math.negative(x)": 0.003424657534246575,
                "tf.math.reciprocal(x)": 0.003424657534246575,
                "tf.math.reciprocal_no_nan(x)": 0.003424657534246575,
                "tf.math.segment_max(data, segment_ids)": 0.003424657534246575,
                "tf.math.segment_mean(data, segment_ids)": 0.003424657534246575,
                "tf.math.segment_min(data, segment_ids)": 0.003424657534246575,
                "tf.math.segment_prod(data, segment_ids)": 0.003424657534246575,
                "tf.math.segment_sum(data, segment_ids)": 0.003424657534246575,
                "tf.math.squared_difference(x, y)": 0.003424657534246575,
                "tf.math.top_k(input, k)": 0.003424657534246575,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.003424657534246575,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.003424657534246575,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.003424657534246575,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.003424657534246575,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.003424657534246575,
                "tf.matmul(a, b)": 0.003424657534246575,
                "tf.maximum(x, y)": 0.003424657534246575,
                "tf.minimum(x, y)": 0.003424657534246575,
                "tf.multiply(x, y)": 0.003424657534246575,
                "tf.not_equal(x, y)": 0.003424657534246575,
                "tf.one_hot(indices, depth)": 0.003424657534246575,
                "tf.ones(shape)": 0.003424657534246575,
                "tf.ones_like(input)": 0.003424657534246575,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.003424657534246575,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.003424657534246575,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.003424657534246575,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.003424657534246575,
                "tf.range(start)": 0.00684931506849315,
                "tf.range(start, limit, delta)": 0.003424657534246575,
                "tf.reduce_any(input_tensor, axis)": 0.003424657534246575,
                "tf.reduce_all(input_tensor, axis)": 0.003424657534246575,
                "tf.reduce_max(input_tensor)": 0.003424657534246575,
                "tf.reduce_max(input_tensor, axis)": 0.003424657534246575,
                "tf.reduce_mean(input_tensor)": 0.003424657534246575,
                "tf.reduce_mean(input_tensor, axis)": 0.003424657534246575,
                "tf.reduce_min(input_tensor)": 0.003424657534246575,
                "tf.reduce_min(input_tensor, axis)": 0.003424657534246575,
                "tf.reduce_prod(input_tensor, axis)": 0.003424657534246575,
                "tf.reduce_sum(input_tensor)": 0.003424657534246575,
                "tf.reduce_sum(input_tensor, axis)": 0.003424657534246575,
                "tf.repeat(input, repeats)": 0.003424657534246575,
                "tf.repeat(input, repeats, axis)": 0.003424657534246575,
                "tf.reshape(tensor, shape)": 0.003424657534246575,
                "tf.reverse(tensor, axis)": 0.003424657534246575,
                "tf.roll(input, shift, axis)": 0.003424657534246575,
                "tf.round(x)": 0.003424657534246575,
                "tf.scatter_nd(indices, updates, shape)": 0.003424657534246575,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.003424657534246575,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.003424657534246575,
                "tf.sequence_mask(lengths)": 0.003424657534246575,
                "tf.sequence_mask(lengths, maxlen)": 0.003424657534246575,
                "tf.shape(input)": 0.003424657534246575,
                "tf.sign(x)": 0.003424657534246575,
                "tf.sort(values, axis)": 0.003424657534246575,
                "tf.sort(values, axis, direction='DESCENDING')": 0.003424657534246575,
                "tf.sqrt(x)": 0.003424657534246575,
                "tf.square(x)": 0.003424657534246575,
                "tf.squeeze(input)": 0.003424657534246575,
                "tf.squeeze(input, axis)": 0.003424657534246575,
                "tf.stack(values, axis)": 0.010273972602739725,
                "tf.subtract(x, y)": 0.003424657534246575,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.003424657534246575,
                "tf.tensordot(a, b, axes)": 0.003424657534246575,
                "tf.tile(input, multiples)": 0.003424657534246575,
                "tf.transpose(a)": 0.003424657534246575,
                "tf.transpose(a, perm)": 0.003424657534246575,
                "tf.unique_with_counts(x)": 0.003424657534246575,
                "tf.unstack(value, axis)": 0.003424657534246575,
                "tf.where(condition)": 0.003424657534246575,
                "tf.where(condition, x, y)": 0.003424657534246575,
                "tf.zeros(shape)": 0.003424657534246575,
                "tf.zeros_like(input)": 0.003424657534246575,
                "tf.SparseTensor(indices, values, dense_shape)": 0.003424657534246575,
                "tf.sparse.add(a, b)": 0.003424657534246575,
                "tf.sparse.concat(axis, sp_inputs)": 0.003424657534246575,
                "tf.sparse.expand_dims(sp_input, axis)": 0.003424657534246575,
                "tf.sparse.from_dense(tensor)": 0.003424657534246575,
                "tf.sparse.maximum(sp_a, sp_b)": 0.003424657534246575,
                "tf.sparse.minimum(sp_a, sp_b)": 0.003424657534246575,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.003424657534246575,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.003424657534246575,
                "tf.sparse.reset_shape(sp_input)": 0.003424657534246575,
                "tf.sparse.reshape(sp_input, shape)": 0.003424657534246575,
                "tf.sparse.retain(sp_input, to_retain)": 0.003424657534246575,
                "tf.sparse.slice(sp_input, start, size)": 0.003424657534246575,
                "tf.sparse.split(sp_input, num_split, axis)": 0.003424657534246575,
                "tf.sparse.to_dense(sp_input)": 0.003424657534246575,
                "tf.sparse.to_dense(sp_input, default_value)": 0.003424657534246575,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.003424657534246575,
                "tf.sparse.transpose(sp_input)": 0.003424657534246575,
                "tf.sparse.transpose(sp_input, perm)": 0.003424657534246575,
                "IndexingAxis1Operation": 0.02054794520547945,
                "IndexingOperation": 0.010273972602739725,
                "PairCreationOperation": 0.05821917808219178,
                "SingletonTupleCreationOperation": 0.003424657534246575,
                "SlicingAxis0BothOperation": 0.003424657534246575,
                "SlicingAxis0LeftOperation": 0.003424657534246575,
                "SlicingAxis0RightOperation": 0.003424657534246575,
                "SlicingAxis1BothOperation": 0.017123287671232876,
                "SlicingAxis1LeftOperation": 0.0136986301369863,
                "SlicingAxis1RightOperation": 0.0136986301369863,
                "TripleCreationOperation": 0.003424657534246575,
                "PROVIDED_CONSTANT_WEIGHT": 0.003424657534246575,
                "COMMON_CONSTANT_WEIGHT": 0.15753424657534246,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.003424657534246575,
                "INPUT_VARIABLE_WEIGHT": 0.0958904109589041,
                "AXIS_CONSTANT_WEIGHT": 0.05821917808219178,
                "SHAPE_CONSTANT_WEIGHT": 0.010273972602739725,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.003424657534246575,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.003424657534246575,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.003424657534246575,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.003424657534246575,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.003424657534246575
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 7,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 8,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 6,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 8,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 6,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 8,
                "tf.pad(tensor, paddings, mode='REFLECT')": 8,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 8,
                "tf.range(start)": 7,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side='left')": 8,
                "tf.searchsorted(sorted_sequence, values, side='right')": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 8,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction='DESCENDING')": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 7,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 6,
                "IndexingOperation": 7,
                "PairCreationOperation": 4,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 6,
                "SlicingAxis1LeftOperation": 6,
                "SlicingAxis1RightOperation": 6,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 3,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 3,
                "AXIS_CONSTANT_WEIGHT": 4,
                "SHAPE_CONSTANT_WEIGHT": 7,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "stackoverflow_13",
        "description": "multiply vectors by tensor",
        "target_program": "tf.tensordot(in1, in2, (1, 1))",
        "source": "https://stackoverflow.com/questions/50777704/n-d-tensor-matrix-multiplication-with-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[[3, 5], [10, 2]],[[[1, 0], [5, 4]], [[3, 10], [2, -2]]],]",
            "outputs": "[[[28, 20], [19, 20]], [[20, 8], [34, 96]]]"
        },
        "completions": [
            "return tf.tensordot(in2, in1, axes=1)\n",
            "result = tf.tensordot(in2, in1, axes=1)\nreturn result\n",
            "return tf.matmul(in2, in1)\n",
            "return tf.matmul(in2, in1)\n",
            "return tf.matmul(in2, tf.reshape(in1, [2, 1, 2]))\n",
            "return tf.tensordot(in1, in2, axes=1)\n",
            "return tf.matmul(in2, in1)\n",
            "return tf.tensordot(in2, in1, axes=1)\n",
            "result = tf.tensordot(tf.expand_dims(in1, axis=-1), in2, axes=[[-1], [-1]])\nresult = tf.squeeze(result, axis=-1)\nreturn result\n",
            "return tf.tensordot(in2, in1, axes=1)\n",
            "result = tf.tensordot(in2, in1, axes=1)\nresult = tf.transpose(result, perm=[0, 2, 1])\n",
            "return tf.tensordot(in2, in1, axes=1)\n",
            "return tf.tensordot(in2, in1, axes=1)\n",
            "return tf.tensordot(in2, in1, axes=1)\n",
            "return tf.multiply(in1, in2)\n",
            "return tf.tensordot(in2, in1, axes=1)\n",
            "result = tf.tensordot(in2, in1, axes=1)\nreturn result\n  ",
            "return tf.tensordot(in2, in1, axes=1)\n",
            "return tf.tensordot(in2, in1, axes=1)",
            "return tf.tensordot(in2, in1, 1)"
        ],
        "tf_operators": {
            "tf.tensordot": 15,
            "tf.matmul": 4,
            "tf.reshape": 1,
            "tf.squeeze": 1,
            "tf.expand_dims": 1,
            "tf.transpose": 1,
            "tf.multiply": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 1,
        "total_in_target": 1,
        "parsed_constants": [
            [
                1
            ],
            [
                1
            ],
            [],
            [],
            [
                2,
                1,
                2
            ],
            [
                1
            ],
            [],
            [
                1
            ],
            [
                -1,
                -1,
                -1,
                -1
            ],
            [
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            -1
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 40,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 21,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 3,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.004149377593360996,
                "tf.add(x, y)": 0.004149377593360996,
                "tf.add_n(inputs)": 0.004149377593360996,
                "tf.argmax(input, axis)": 0.004149377593360996,
                "tf.argmin(input, axis)": 0.004149377593360996,
                "tf.argsort(values, axis, stable=True)": 0.004149377593360996,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.004149377593360996,
                "tf.boolean_mask(tensor, mask)": 0.004149377593360996,
                "tf.broadcast_to(input, shape)": 0.004149377593360996,
                "tf.cast(x, dtype)": 0.004149377593360996,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.004149377593360996,
                "tf.concat(values, axis)": 0.004149377593360996,
                "tf.constant(value)": 0.004149377593360996,
                "tf.constant(value, dtype)": 0.004149377593360996,
                "tf.divide(x, y)": 0.004149377593360996,
                "tf.equal(x, y)": 0.004149377593360996,
                "tf.exp(x)": 0.004149377593360996,
                "tf.expand_dims(input, axis)": 0.008298755186721992,
                "tf.eye(num_rows)": 0.004149377593360996,
                "tf.eye(num_rows, num_columns)": 0.004149377593360996,
                "tf.eye(num_rows, dtype)": 0.004149377593360996,
                "tf.fill(dims, value)": 0.004149377593360996,
                "tf.gather(params, indices)": 0.004149377593360996,
                "tf.gather(params, indices, axis, batch_dims)": 0.004149377593360996,
                "tf.gather_nd(params, indices)": 0.004149377593360996,
                "tf.gather_nd(params, indices, batch_dims)": 0.004149377593360996,
                "tf.greater(x, y)": 0.004149377593360996,
                "tf.greater_equal(x, y)": 0.004149377593360996,
                "tf.math.bincount(arr)": 0.004149377593360996,
                "tf.math.ceil(x)": 0.004149377593360996,
                "tf.math.count_nonzero(input)": 0.004149377593360996,
                "tf.math.count_nonzero(input, axis)": 0.004149377593360996,
                "tf.math.cumsum(x, axis)": 0.004149377593360996,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.004149377593360996,
                "tf.math.divide_no_nan(x, y)": 0.004149377593360996,
                "tf.math.floor(x)": 0.004149377593360996,
                "tf.math.log(x)": 0.004149377593360996,
                "tf.math.logical_and(x, y)": 0.004149377593360996,
                "tf.math.logical_not(x)": 0.004149377593360996,
                "tf.math.logical_or(x, y)": 0.004149377593360996,
                "tf.math.logical_xor(x, y)": 0.004149377593360996,
                "tf.math.negative(x)": 0.004149377593360996,
                "tf.math.reciprocal(x)": 0.004149377593360996,
                "tf.math.reciprocal_no_nan(x)": 0.004149377593360996,
                "tf.math.segment_max(data, segment_ids)": 0.004149377593360996,
                "tf.math.segment_mean(data, segment_ids)": 0.004149377593360996,
                "tf.math.segment_min(data, segment_ids)": 0.004149377593360996,
                "tf.math.segment_prod(data, segment_ids)": 0.004149377593360996,
                "tf.math.segment_sum(data, segment_ids)": 0.004149377593360996,
                "tf.math.squared_difference(x, y)": 0.004149377593360996,
                "tf.math.top_k(input, k)": 0.004149377593360996,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.004149377593360996,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.004149377593360996,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.004149377593360996,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.004149377593360996,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.004149377593360996,
                "tf.matmul(a, b)": 0.02074688796680498,
                "tf.maximum(x, y)": 0.004149377593360996,
                "tf.minimum(x, y)": 0.004149377593360996,
                "tf.multiply(x, y)": 0.008298755186721992,
                "tf.not_equal(x, y)": 0.004149377593360996,
                "tf.one_hot(indices, depth)": 0.004149377593360996,
                "tf.ones(shape)": 0.004149377593360996,
                "tf.ones_like(input)": 0.004149377593360996,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.004149377593360996,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.004149377593360996,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.004149377593360996,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.004149377593360996,
                "tf.range(start)": 0.004149377593360996,
                "tf.range(start, limit, delta)": 0.004149377593360996,
                "tf.reduce_any(input_tensor, axis)": 0.004149377593360996,
                "tf.reduce_all(input_tensor, axis)": 0.004149377593360996,
                "tf.reduce_max(input_tensor)": 0.004149377593360996,
                "tf.reduce_max(input_tensor, axis)": 0.004149377593360996,
                "tf.reduce_mean(input_tensor)": 0.004149377593360996,
                "tf.reduce_mean(input_tensor, axis)": 0.004149377593360996,
                "tf.reduce_min(input_tensor)": 0.004149377593360996,
                "tf.reduce_min(input_tensor, axis)": 0.004149377593360996,
                "tf.reduce_prod(input_tensor, axis)": 0.004149377593360996,
                "tf.reduce_sum(input_tensor)": 0.004149377593360996,
                "tf.reduce_sum(input_tensor, axis)": 0.004149377593360996,
                "tf.repeat(input, repeats)": 0.004149377593360996,
                "tf.repeat(input, repeats, axis)": 0.004149377593360996,
                "tf.reshape(tensor, shape)": 0.008298755186721992,
                "tf.reverse(tensor, axis)": 0.004149377593360996,
                "tf.roll(input, shift, axis)": 0.004149377593360996,
                "tf.round(x)": 0.004149377593360996,
                "tf.scatter_nd(indices, updates, shape)": 0.004149377593360996,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.004149377593360996,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.004149377593360996,
                "tf.sequence_mask(lengths)": 0.004149377593360996,
                "tf.sequence_mask(lengths, maxlen)": 0.004149377593360996,
                "tf.shape(input)": 0.004149377593360996,
                "tf.sign(x)": 0.004149377593360996,
                "tf.sort(values, axis)": 0.004149377593360996,
                "tf.sort(values, axis, direction='DESCENDING')": 0.004149377593360996,
                "tf.sqrt(x)": 0.004149377593360996,
                "tf.square(x)": 0.004149377593360996,
                "tf.squeeze(input)": 0.004149377593360996,
                "tf.squeeze(input, axis)": 0.004149377593360996,
                "tf.stack(values, axis)": 0.004149377593360996,
                "tf.subtract(x, y)": 0.004149377593360996,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.004149377593360996,
                "tf.tensordot(a, b, axes)": 0.06639004149377593,
                "tf.tile(input, multiples)": 0.004149377593360996,
                "tf.transpose(a)": 0.004149377593360996,
                "tf.transpose(a, perm)": 0.004149377593360996,
                "tf.unique_with_counts(x)": 0.004149377593360996,
                "tf.unstack(value, axis)": 0.004149377593360996,
                "tf.where(condition)": 0.004149377593360996,
                "tf.where(condition, x, y)": 0.004149377593360996,
                "tf.zeros(shape)": 0.004149377593360996,
                "tf.zeros_like(input)": 0.004149377593360996,
                "tf.SparseTensor(indices, values, dense_shape)": 0.004149377593360996,
                "tf.sparse.add(a, b)": 0.004149377593360996,
                "tf.sparse.concat(axis, sp_inputs)": 0.004149377593360996,
                "tf.sparse.expand_dims(sp_input, axis)": 0.004149377593360996,
                "tf.sparse.from_dense(tensor)": 0.004149377593360996,
                "tf.sparse.maximum(sp_a, sp_b)": 0.004149377593360996,
                "tf.sparse.minimum(sp_a, sp_b)": 0.004149377593360996,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.004149377593360996,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.004149377593360996,
                "tf.sparse.reset_shape(sp_input)": 0.004149377593360996,
                "tf.sparse.reshape(sp_input, shape)": 0.004149377593360996,
                "tf.sparse.retain(sp_input, to_retain)": 0.004149377593360996,
                "tf.sparse.slice(sp_input, start, size)": 0.004149377593360996,
                "tf.sparse.split(sp_input, num_split, axis)": 0.004149377593360996,
                "tf.sparse.to_dense(sp_input)": 0.004149377593360996,
                "tf.sparse.to_dense(sp_input, default_value)": 0.004149377593360996,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.004149377593360996,
                "tf.sparse.transpose(sp_input)": 0.004149377593360996,
                "tf.sparse.transpose(sp_input, perm)": 0.004149377593360996,
                "IndexingAxis1Operation": 0.004149377593360996,
                "IndexingOperation": 0.004149377593360996,
                "PairCreationOperation": 0.004149377593360996,
                "SingletonTupleCreationOperation": 0.004149377593360996,
                "SlicingAxis0BothOperation": 0.004149377593360996,
                "SlicingAxis0LeftOperation": 0.004149377593360996,
                "SlicingAxis0RightOperation": 0.004149377593360996,
                "SlicingAxis1BothOperation": 0.004149377593360996,
                "SlicingAxis1LeftOperation": 0.004149377593360996,
                "SlicingAxis1RightOperation": 0.004149377593360996,
                "TripleCreationOperation": 0.004149377593360996,
                "PROVIDED_CONSTANT_WEIGHT": 0.004149377593360996,
                "COMMON_CONSTANT_WEIGHT": 0.0912863070539419,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.004149377593360996,
                "INPUT_VARIABLE_WEIGHT": 0.17012448132780084,
                "AXIS_CONSTANT_WEIGHT": 0.016597510373443983,
                "SHAPE_CONSTANT_WEIGHT": 0.004149377593360996,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.004149377593360996,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.004149377593360996,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.004149377593360996,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.004149377593360996,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.004149377593360996
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 8,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 7,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 6,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 7,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 8,
                "tf.pad(tensor, paddings, mode='REFLECT')": 8,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 7,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side='left')": 8,
                "tf.searchsorted(sorted_sequence, values, side='right')": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 8,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction='DESCENDING')": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 4,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 8,
                "PairCreationOperation": 8,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 3,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 3,
                "AXIS_CONSTANT_WEIGHT": 6,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "stackoverflow_14",
        "description": "choose True if any value in a row is True, False otherwise",
        "target_program": "tf.reduce_any(in1, axis=-1)",
        "source": "https://stackoverflow.com/questions/35657003/aggregate-each-element-of-tensor-in-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[[[False, False, True],  [False, False, False],  [True, False, True],  [False, True, False],  [False, False, False],  [True, True, True],  [True, True, False]]],]",
            "outputs": "[[True, False, True, True, False, True, True]]"
        },
        "completions": [
            "return tf.reduce_any(in1, axis=1)\n",
            "return tf.reduce_any(in1, axis=1)\n",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=2)\n",
            "return tf.reduce_any(in1, axis=1)\n",
            "return tf.reduce_any(in1, axis=1)\n",
            "return tf.reduce_any(in1, axis=2)\n",
            "return tf.reduce_any(in1, axis=1)\n",
            "return tf.reduce_any(in1, axis=1)",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=-1)\n",
            "return tf.reduce_any(in1, axis=1)\n",
            "return tf.reduce_any(in1, axis=1)\n",
            "return tf.reduce_any(in1, axis=1)\n",
            "return tf.reduce_any(in1, axis=1)\n",
            "return tf.reduce_any(in1, axis=1)",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=1)",
            "return tf.reduce_any(in1, axis=1)\n",
            "return tf.reduce_any(in1, axis=1)",
            "return tf.reduce_any(in1, axis=1)\n",
            "return tf.reduce_any(in1, axis=-1)\n",
            "return tf.reduce_any(in1, axis=1)"
        ],
        "tf_operators": {
            "tf.reduce_any": 20
        },
        "coverage_percentage": 100.0,
        "total_covered": 1,
        "total_in_target": 1,
        "parsed_constants": [
            [
                1
            ],
            [
                1
            ],
            [
                2
            ],
            [
                1
            ],
            [
                1
            ],
            [
                2
            ],
            [
                1
            ],
            [
                1
            ],
            [
                -1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                -1
            ],
            [
                1
            ]
        ],
        "all_constants": [
            1,
            2,
            -1
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 20,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 18,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 2,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.004651162790697674,
                "tf.add(x, y)": 0.004651162790697674,
                "tf.add_n(inputs)": 0.004651162790697674,
                "tf.argmax(input, axis)": 0.004651162790697674,
                "tf.argmin(input, axis)": 0.004651162790697674,
                "tf.argsort(values, axis, stable=True)": 0.004651162790697674,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.004651162790697674,
                "tf.boolean_mask(tensor, mask)": 0.004651162790697674,
                "tf.broadcast_to(input, shape)": 0.004651162790697674,
                "tf.cast(x, dtype)": 0.004651162790697674,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.004651162790697674,
                "tf.concat(values, axis)": 0.004651162790697674,
                "tf.constant(value)": 0.004651162790697674,
                "tf.constant(value, dtype)": 0.004651162790697674,
                "tf.divide(x, y)": 0.004651162790697674,
                "tf.equal(x, y)": 0.004651162790697674,
                "tf.exp(x)": 0.004651162790697674,
                "tf.expand_dims(input, axis)": 0.004651162790697674,
                "tf.eye(num_rows)": 0.004651162790697674,
                "tf.eye(num_rows, num_columns)": 0.004651162790697674,
                "tf.eye(num_rows, dtype)": 0.004651162790697674,
                "tf.fill(dims, value)": 0.004651162790697674,
                "tf.gather(params, indices)": 0.004651162790697674,
                "tf.gather(params, indices, axis, batch_dims)": 0.004651162790697674,
                "tf.gather_nd(params, indices)": 0.004651162790697674,
                "tf.gather_nd(params, indices, batch_dims)": 0.004651162790697674,
                "tf.greater(x, y)": 0.004651162790697674,
                "tf.greater_equal(x, y)": 0.004651162790697674,
                "tf.math.bincount(arr)": 0.004651162790697674,
                "tf.math.ceil(x)": 0.004651162790697674,
                "tf.math.count_nonzero(input)": 0.004651162790697674,
                "tf.math.count_nonzero(input, axis)": 0.004651162790697674,
                "tf.math.cumsum(x, axis)": 0.004651162790697674,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.004651162790697674,
                "tf.math.divide_no_nan(x, y)": 0.004651162790697674,
                "tf.math.floor(x)": 0.004651162790697674,
                "tf.math.log(x)": 0.004651162790697674,
                "tf.math.logical_and(x, y)": 0.004651162790697674,
                "tf.math.logical_not(x)": 0.004651162790697674,
                "tf.math.logical_or(x, y)": 0.004651162790697674,
                "tf.math.logical_xor(x, y)": 0.004651162790697674,
                "tf.math.negative(x)": 0.004651162790697674,
                "tf.math.reciprocal(x)": 0.004651162790697674,
                "tf.math.reciprocal_no_nan(x)": 0.004651162790697674,
                "tf.math.segment_max(data, segment_ids)": 0.004651162790697674,
                "tf.math.segment_mean(data, segment_ids)": 0.004651162790697674,
                "tf.math.segment_min(data, segment_ids)": 0.004651162790697674,
                "tf.math.segment_prod(data, segment_ids)": 0.004651162790697674,
                "tf.math.segment_sum(data, segment_ids)": 0.004651162790697674,
                "tf.math.squared_difference(x, y)": 0.004651162790697674,
                "tf.math.top_k(input, k)": 0.004651162790697674,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.004651162790697674,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.004651162790697674,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.004651162790697674,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.004651162790697674,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.004651162790697674,
                "tf.matmul(a, b)": 0.004651162790697674,
                "tf.maximum(x, y)": 0.004651162790697674,
                "tf.minimum(x, y)": 0.004651162790697674,
                "tf.multiply(x, y)": 0.004651162790697674,
                "tf.not_equal(x, y)": 0.004651162790697674,
                "tf.one_hot(indices, depth)": 0.004651162790697674,
                "tf.ones(shape)": 0.004651162790697674,
                "tf.ones_like(input)": 0.004651162790697674,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.004651162790697674,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.004651162790697674,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.004651162790697674,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.004651162790697674,
                "tf.range(start)": 0.004651162790697674,
                "tf.range(start, limit, delta)": 0.004651162790697674,
                "tf.reduce_any(input_tensor, axis)": 0.09767441860465116,
                "tf.reduce_all(input_tensor, axis)": 0.004651162790697674,
                "tf.reduce_max(input_tensor)": 0.004651162790697674,
                "tf.reduce_max(input_tensor, axis)": 0.004651162790697674,
                "tf.reduce_mean(input_tensor)": 0.004651162790697674,
                "tf.reduce_mean(input_tensor, axis)": 0.004651162790697674,
                "tf.reduce_min(input_tensor)": 0.004651162790697674,
                "tf.reduce_min(input_tensor, axis)": 0.004651162790697674,
                "tf.reduce_prod(input_tensor, axis)": 0.004651162790697674,
                "tf.reduce_sum(input_tensor)": 0.004651162790697674,
                "tf.reduce_sum(input_tensor, axis)": 0.004651162790697674,
                "tf.repeat(input, repeats)": 0.004651162790697674,
                "tf.repeat(input, repeats, axis)": 0.004651162790697674,
                "tf.reshape(tensor, shape)": 0.004651162790697674,
                "tf.reverse(tensor, axis)": 0.004651162790697674,
                "tf.roll(input, shift, axis)": 0.004651162790697674,
                "tf.round(x)": 0.004651162790697674,
                "tf.scatter_nd(indices, updates, shape)": 0.004651162790697674,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.004651162790697674,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.004651162790697674,
                "tf.sequence_mask(lengths)": 0.004651162790697674,
                "tf.sequence_mask(lengths, maxlen)": 0.004651162790697674,
                "tf.shape(input)": 0.004651162790697674,
                "tf.sign(x)": 0.004651162790697674,
                "tf.sort(values, axis)": 0.004651162790697674,
                "tf.sort(values, axis, direction='DESCENDING')": 0.004651162790697674,
                "tf.sqrt(x)": 0.004651162790697674,
                "tf.square(x)": 0.004651162790697674,
                "tf.squeeze(input)": 0.004651162790697674,
                "tf.squeeze(input, axis)": 0.004651162790697674,
                "tf.stack(values, axis)": 0.004651162790697674,
                "tf.subtract(x, y)": 0.004651162790697674,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.004651162790697674,
                "tf.tensordot(a, b, axes)": 0.004651162790697674,
                "tf.tile(input, multiples)": 0.004651162790697674,
                "tf.transpose(a)": 0.004651162790697674,
                "tf.transpose(a, perm)": 0.004651162790697674,
                "tf.unique_with_counts(x)": 0.004651162790697674,
                "tf.unstack(value, axis)": 0.004651162790697674,
                "tf.where(condition)": 0.004651162790697674,
                "tf.where(condition, x, y)": 0.004651162790697674,
                "tf.zeros(shape)": 0.004651162790697674,
                "tf.zeros_like(input)": 0.004651162790697674,
                "tf.SparseTensor(indices, values, dense_shape)": 0.004651162790697674,
                "tf.sparse.add(a, b)": 0.004651162790697674,
                "tf.sparse.concat(axis, sp_inputs)": 0.004651162790697674,
                "tf.sparse.expand_dims(sp_input, axis)": 0.004651162790697674,
                "tf.sparse.from_dense(tensor)": 0.004651162790697674,
                "tf.sparse.maximum(sp_a, sp_b)": 0.004651162790697674,
                "tf.sparse.minimum(sp_a, sp_b)": 0.004651162790697674,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.004651162790697674,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.004651162790697674,
                "tf.sparse.reset_shape(sp_input)": 0.004651162790697674,
                "tf.sparse.reshape(sp_input, shape)": 0.004651162790697674,
                "tf.sparse.retain(sp_input, to_retain)": 0.004651162790697674,
                "tf.sparse.slice(sp_input, start, size)": 0.004651162790697674,
                "tf.sparse.split(sp_input, num_split, axis)": 0.004651162790697674,
                "tf.sparse.to_dense(sp_input)": 0.004651162790697674,
                "tf.sparse.to_dense(sp_input, default_value)": 0.004651162790697674,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.004651162790697674,
                "tf.sparse.transpose(sp_input)": 0.004651162790697674,
                "tf.sparse.transpose(sp_input, perm)": 0.004651162790697674,
                "IndexingAxis1Operation": 0.004651162790697674,
                "IndexingOperation": 0.004651162790697674,
                "PairCreationOperation": 0.004651162790697674,
                "SingletonTupleCreationOperation": 0.004651162790697674,
                "SlicingAxis0BothOperation": 0.004651162790697674,
                "SlicingAxis0LeftOperation": 0.004651162790697674,
                "SlicingAxis0RightOperation": 0.004651162790697674,
                "SlicingAxis1BothOperation": 0.004651162790697674,
                "SlicingAxis1LeftOperation": 0.004651162790697674,
                "SlicingAxis1RightOperation": 0.004651162790697674,
                "TripleCreationOperation": 0.004651162790697674,
                "PROVIDED_CONSTANT_WEIGHT": 0.004651162790697674,
                "COMMON_CONSTANT_WEIGHT": 0.08837209302325581,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.004651162790697674,
                "INPUT_VARIABLE_WEIGHT": 0.09767441860465116,
                "AXIS_CONSTANT_WEIGHT": 0.013953488372093023,
                "SHAPE_CONSTANT_WEIGHT": 0.004651162790697674,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.004651162790697674,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.004651162790697674,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.004651162790697674,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.004651162790697674,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.004651162790697674
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 8,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 8,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 8,
                "tf.pad(tensor, paddings, mode='REFLECT')": 8,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 3,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side='left')": 8,
                "tf.searchsorted(sorted_sequence, values, side='right')": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 8,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction='DESCENDING')": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 8,
                "PairCreationOperation": 8,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 4,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 3,
                "AXIS_CONSTANT_WEIGHT": 6,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "stackoverflow_15",
        "description": "set all instances of 1 to 0",
        "target_program": "tf.subtract(in1, tf.cast(tf.equal(in1, tf.constant(1)), tf.int32))",
        "source": "https://stackoverflow.com/questions/39045797/conditional-assignment-of-tensor-values-in-tensorflow",
        "constants": "[0, 1]",
        "examples": {
            "inputs": "[[3, 1, 2, 0, 1, -1, 10, 1, -10],]",
            "outputs": "[3, 0, 2, 0, 0, -1, 10, 0, -10]"
        },
        "completions": [
            "return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n",
            "return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)",
            "return tf.math.logical_not(tf.equal(in1, 1)) * in1\n",
            "return tf.where(tf.equal(in1, 1), 0, in1)\n",
            "return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n",
            "return tf.where(tf.equal(in1, 1), 0, in1)\n",
            "def transform(in1):\n    return tf.not_equal(in1, 1) * in1\n",
            "return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n",
            "return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n",
            "return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n",
            "return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n",
            "return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n",
            "return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), 0, in1)\n",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n",
            "return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n",
            "return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n",
            "return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n",
            "return tf.where(tf.equal(in1, 1), tf.constant(0), in1)\n",
            "return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n"
        ],
        "tf_operators": {
            "tf.where": 18,
            "tf.zeros_like": 14,
            "tf.equal": 19,
            "tf.math.logical_not": 1,
            "tf.not_equal": 1,
            "tf.constant": 1
        },
        "coverage_percentage": 40.0,
        "total_covered": 2,
        "total_in_target": 5,
        "parsed_constants": [
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1
            ]
        ],
        "all_constants": [
            0,
            1
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 54,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 24,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.003484320557491289,
                "tf.add(x, y)": 0.003484320557491289,
                "tf.add_n(inputs)": 0.003484320557491289,
                "tf.argmax(input, axis)": 0.003484320557491289,
                "tf.argmin(input, axis)": 0.003484320557491289,
                "tf.argsort(values, axis, stable=True)": 0.003484320557491289,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.003484320557491289,
                "tf.boolean_mask(tensor, mask)": 0.003484320557491289,
                "tf.broadcast_to(input, shape)": 0.003484320557491289,
                "tf.cast(x, dtype)": 0.003484320557491289,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.003484320557491289,
                "tf.concat(values, axis)": 0.003484320557491289,
                "tf.constant(value)": 0.006968641114982578,
                "tf.constant(value, dtype)": 0.003484320557491289,
                "tf.divide(x, y)": 0.003484320557491289,
                "tf.equal(x, y)": 0.06968641114982578,
                "tf.exp(x)": 0.003484320557491289,
                "tf.expand_dims(input, axis)": 0.003484320557491289,
                "tf.eye(num_rows)": 0.003484320557491289,
                "tf.eye(num_rows, num_columns)": 0.003484320557491289,
                "tf.eye(num_rows, dtype)": 0.003484320557491289,
                "tf.fill(dims, value)": 0.003484320557491289,
                "tf.gather(params, indices)": 0.003484320557491289,
                "tf.gather(params, indices, axis, batch_dims)": 0.003484320557491289,
                "tf.gather_nd(params, indices)": 0.003484320557491289,
                "tf.gather_nd(params, indices, batch_dims)": 0.003484320557491289,
                "tf.greater(x, y)": 0.003484320557491289,
                "tf.greater_equal(x, y)": 0.003484320557491289,
                "tf.math.bincount(arr)": 0.003484320557491289,
                "tf.math.ceil(x)": 0.003484320557491289,
                "tf.math.count_nonzero(input)": 0.003484320557491289,
                "tf.math.count_nonzero(input, axis)": 0.003484320557491289,
                "tf.math.cumsum(x, axis)": 0.003484320557491289,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.003484320557491289,
                "tf.math.divide_no_nan(x, y)": 0.003484320557491289,
                "tf.math.floor(x)": 0.003484320557491289,
                "tf.math.log(x)": 0.003484320557491289,
                "tf.math.logical_and(x, y)": 0.003484320557491289,
                "tf.math.logical_not(x)": 0.006968641114982578,
                "tf.math.logical_or(x, y)": 0.003484320557491289,
                "tf.math.logical_xor(x, y)": 0.003484320557491289,
                "tf.math.negative(x)": 0.003484320557491289,
                "tf.math.reciprocal(x)": 0.003484320557491289,
                "tf.math.reciprocal_no_nan(x)": 0.003484320557491289,
                "tf.math.segment_max(data, segment_ids)": 0.003484320557491289,
                "tf.math.segment_mean(data, segment_ids)": 0.003484320557491289,
                "tf.math.segment_min(data, segment_ids)": 0.003484320557491289,
                "tf.math.segment_prod(data, segment_ids)": 0.003484320557491289,
                "tf.math.segment_sum(data, segment_ids)": 0.003484320557491289,
                "tf.math.squared_difference(x, y)": 0.003484320557491289,
                "tf.math.top_k(input, k)": 0.003484320557491289,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.003484320557491289,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.003484320557491289,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.003484320557491289,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.003484320557491289,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.003484320557491289,
                "tf.matmul(a, b)": 0.003484320557491289,
                "tf.maximum(x, y)": 0.003484320557491289,
                "tf.minimum(x, y)": 0.003484320557491289,
                "tf.multiply(x, y)": 0.003484320557491289,
                "tf.not_equal(x, y)": 0.006968641114982578,
                "tf.one_hot(indices, depth)": 0.003484320557491289,
                "tf.ones(shape)": 0.003484320557491289,
                "tf.ones_like(input)": 0.003484320557491289,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.003484320557491289,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.003484320557491289,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.003484320557491289,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.003484320557491289,
                "tf.range(start)": 0.003484320557491289,
                "tf.range(start, limit, delta)": 0.003484320557491289,
                "tf.reduce_any(input_tensor, axis)": 0.003484320557491289,
                "tf.reduce_all(input_tensor, axis)": 0.003484320557491289,
                "tf.reduce_max(input_tensor)": 0.003484320557491289,
                "tf.reduce_max(input_tensor, axis)": 0.003484320557491289,
                "tf.reduce_mean(input_tensor)": 0.003484320557491289,
                "tf.reduce_mean(input_tensor, axis)": 0.003484320557491289,
                "tf.reduce_min(input_tensor)": 0.003484320557491289,
                "tf.reduce_min(input_tensor, axis)": 0.003484320557491289,
                "tf.reduce_prod(input_tensor, axis)": 0.003484320557491289,
                "tf.reduce_sum(input_tensor)": 0.003484320557491289,
                "tf.reduce_sum(input_tensor, axis)": 0.003484320557491289,
                "tf.repeat(input, repeats)": 0.003484320557491289,
                "tf.repeat(input, repeats, axis)": 0.003484320557491289,
                "tf.reshape(tensor, shape)": 0.003484320557491289,
                "tf.reverse(tensor, axis)": 0.003484320557491289,
                "tf.roll(input, shift, axis)": 0.003484320557491289,
                "tf.round(x)": 0.003484320557491289,
                "tf.scatter_nd(indices, updates, shape)": 0.003484320557491289,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.003484320557491289,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.003484320557491289,
                "tf.sequence_mask(lengths)": 0.003484320557491289,
                "tf.sequence_mask(lengths, maxlen)": 0.003484320557491289,
                "tf.shape(input)": 0.003484320557491289,
                "tf.sign(x)": 0.003484320557491289,
                "tf.sort(values, axis)": 0.003484320557491289,
                "tf.sort(values, axis, direction='DESCENDING')": 0.003484320557491289,
                "tf.sqrt(x)": 0.003484320557491289,
                "tf.square(x)": 0.003484320557491289,
                "tf.squeeze(input)": 0.003484320557491289,
                "tf.squeeze(input, axis)": 0.003484320557491289,
                "tf.stack(values, axis)": 0.003484320557491289,
                "tf.subtract(x, y)": 0.003484320557491289,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.003484320557491289,
                "tf.tensordot(a, b, axes)": 0.003484320557491289,
                "tf.tile(input, multiples)": 0.003484320557491289,
                "tf.transpose(a)": 0.003484320557491289,
                "tf.transpose(a, perm)": 0.003484320557491289,
                "tf.unique_with_counts(x)": 0.003484320557491289,
                "tf.unstack(value, axis)": 0.003484320557491289,
                "tf.where(condition)": 0.003484320557491289,
                "tf.where(condition, x, y)": 0.06620209059233449,
                "tf.zeros(shape)": 0.003484320557491289,
                "tf.zeros_like(input)": 0.05226480836236934,
                "tf.SparseTensor(indices, values, dense_shape)": 0.003484320557491289,
                "tf.sparse.add(a, b)": 0.003484320557491289,
                "tf.sparse.concat(axis, sp_inputs)": 0.003484320557491289,
                "tf.sparse.expand_dims(sp_input, axis)": 0.003484320557491289,
                "tf.sparse.from_dense(tensor)": 0.003484320557491289,
                "tf.sparse.maximum(sp_a, sp_b)": 0.003484320557491289,
                "tf.sparse.minimum(sp_a, sp_b)": 0.003484320557491289,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.003484320557491289,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.003484320557491289,
                "tf.sparse.reset_shape(sp_input)": 0.003484320557491289,
                "tf.sparse.reshape(sp_input, shape)": 0.003484320557491289,
                "tf.sparse.retain(sp_input, to_retain)": 0.003484320557491289,
                "tf.sparse.slice(sp_input, start, size)": 0.003484320557491289,
                "tf.sparse.split(sp_input, num_split, axis)": 0.003484320557491289,
                "tf.sparse.to_dense(sp_input)": 0.003484320557491289,
                "tf.sparse.to_dense(sp_input, default_value)": 0.003484320557491289,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.003484320557491289,
                "tf.sparse.transpose(sp_input)": 0.003484320557491289,
                "tf.sparse.transpose(sp_input, perm)": 0.003484320557491289,
                "IndexingAxis1Operation": 0.003484320557491289,
                "IndexingOperation": 0.003484320557491289,
                "PairCreationOperation": 0.003484320557491289,
                "SingletonTupleCreationOperation": 0.003484320557491289,
                "SlicingAxis0BothOperation": 0.003484320557491289,
                "SlicingAxis0LeftOperation": 0.003484320557491289,
                "SlicingAxis0RightOperation": 0.003484320557491289,
                "SlicingAxis1BothOperation": 0.003484320557491289,
                "SlicingAxis1LeftOperation": 0.003484320557491289,
                "SlicingAxis1RightOperation": 0.003484320557491289,
                "TripleCreationOperation": 0.003484320557491289,
                "PROVIDED_CONSTANT_WEIGHT": 0.003484320557491289,
                "COMMON_CONSTANT_WEIGHT": 0.08710801393728224,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.003484320557491289,
                "INPUT_VARIABLE_WEIGHT": 0.1916376306620209,
                "AXIS_CONSTANT_WEIGHT": 0.003484320557491289,
                "SHAPE_CONSTANT_WEIGHT": 0.003484320557491289,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.003484320557491289,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.003484320557491289,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.003484320557491289,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.003484320557491289,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.003484320557491289
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 8,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 7,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 4,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 8,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 7,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 7,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 8,
                "tf.pad(tensor, paddings, mode='REFLECT')": 8,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side='left')": 8,
                "tf.searchsorted(sorted_sequence, values, side='right')": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 8,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction='DESCENDING')": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 4,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 4,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 8,
                "PairCreationOperation": 8,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 4,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 2,
                "AXIS_CONSTANT_WEIGHT": 8,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "stackoverflow_16",
        "description": "multiply tensors across the first axis",
        "target_program": "tf.multiply(in1, tf.expand_dims(in2, 1))",
        "source": "https://stackoverflow.com/questions/46240646/tensor-multiply-along-axis-in-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[[2, 5], [3, 0], [8, -7]],[4, 10, -6],]",
            "outputs": "[[8, 20], [30, 0], [-48, 42]]"
        },
        "completions": [
            "result = tf.multiply(in1, tf.expand_dims(in2, axis=1))\n",
            "return tf.multiply(in1, tf.expand_dims(in2, 1))",
            "return tf.multiply(tf.expand_dims(in1, 2), in2)\n",
            "return tf.multiply(tf.expand_dims(in1, 2), tf.expand_dims(in2, 1))\n",
            "return tf.matmul(tf.expand_dims(in1, -1), tf.expand_dims(in2, 0))\n",
            "return tf.multiply(in1, tf.expand_dims(in2, 1))",
            "return tf.multiply(tf.expand_dims(in1, -1), tf.expand_dims(in2, 0))\n",
            "return tf.multiply(tf.expand_dims(in1, axis=2), tf.expand_dims(in2, axis=1))",
            "output = tf.multiply(in1, tf.expand_dims(in2, axis=1))\n",
            "return tf.broadcast_to(tf.expand_dims(in1, 2), in2.shape) * tf.expand_dims(in2, 1)",
            "return tf.multiply(tf.expand_dims(in1, -1), tf.expand_dims(in2, 0))",
            "return tf.multiply(tf.expand_dims(in1, 2), tf.expand_dims(in2, 1))",
            "result = tf.multiply(in1, tf.expand_dims(in2, axis=1))\nreturn result\n",
            "return tf.multiply(tf.expand_dims(in1, -1), tf.expand_dims(in2, 0))\n",
            "return tf.multiply(tf.expand_dims(in1, 2), tf.expand_dims(in2, 1))",
            "return tf.multiply(tf.expand_dims(in1, -1), tf.expand_dims(in2, 0))",
            "return tf.multiply(tf.expand_dims(in1, 2), tf.expand_dims(in2, 1))",
            "return tf.multiply(tf.expand_dims(in1, -1), tf.expand_dims(in2, 0))\n",
            "return tf.matmul(tf.expand_dims(in1, -1), tf.expand_dims(in2, 0))",
            "return tf.tensordot(in1, in2, axes=1)\n"
        ],
        "tf_operators": {
            "tf.expand_dims": 19,
            "tf.multiply": 16,
            "tf.matmul": 2,
            "tf.broadcast_to": 1,
            "tf.tensordot": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 2,
        "total_in_target": 2,
        "parsed_constants": [
            [
                1
            ],
            [
                1
            ],
            [
                2
            ],
            [
                2,
                1
            ],
            [
                -1,
                0
            ],
            [
                1
            ],
            [
                -1,
                0
            ],
            [
                2,
                1
            ],
            [
                1
            ],
            [
                2,
                1
            ],
            [
                -1,
                0
            ],
            [
                2,
                1
            ],
            [
                1
            ],
            [
                -1,
                0
            ],
            [
                2,
                1
            ],
            [
                -1,
                0
            ],
            [
                2,
                1
            ],
            [
                -1,
                0
            ],
            [
                -1,
                0
            ],
            [
                1
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            -1
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 40,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 26,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 7,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.0035714285714285713,
                "tf.add(x, y)": 0.0035714285714285713,
                "tf.add_n(inputs)": 0.0035714285714285713,
                "tf.argmax(input, axis)": 0.0035714285714285713,
                "tf.argmin(input, axis)": 0.0035714285714285713,
                "tf.argsort(values, axis, stable=True)": 0.0035714285714285713,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.0035714285714285713,
                "tf.boolean_mask(tensor, mask)": 0.0035714285714285713,
                "tf.broadcast_to(input, shape)": 0.007142857142857143,
                "tf.cast(x, dtype)": 0.0035714285714285713,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.0035714285714285713,
                "tf.concat(values, axis)": 0.0035714285714285713,
                "tf.constant(value)": 0.0035714285714285713,
                "tf.constant(value, dtype)": 0.0035714285714285713,
                "tf.divide(x, y)": 0.0035714285714285713,
                "tf.equal(x, y)": 0.0035714285714285713,
                "tf.exp(x)": 0.0035714285714285713,
                "tf.expand_dims(input, axis)": 0.11785714285714285,
                "tf.eye(num_rows)": 0.0035714285714285713,
                "tf.eye(num_rows, num_columns)": 0.0035714285714285713,
                "tf.eye(num_rows, dtype)": 0.0035714285714285713,
                "tf.fill(dims, value)": 0.0035714285714285713,
                "tf.gather(params, indices)": 0.0035714285714285713,
                "tf.gather(params, indices, axis, batch_dims)": 0.0035714285714285713,
                "tf.gather_nd(params, indices)": 0.0035714285714285713,
                "tf.gather_nd(params, indices, batch_dims)": 0.0035714285714285713,
                "tf.greater(x, y)": 0.0035714285714285713,
                "tf.greater_equal(x, y)": 0.0035714285714285713,
                "tf.math.bincount(arr)": 0.0035714285714285713,
                "tf.math.ceil(x)": 0.0035714285714285713,
                "tf.math.count_nonzero(input)": 0.0035714285714285713,
                "tf.math.count_nonzero(input, axis)": 0.0035714285714285713,
                "tf.math.cumsum(x, axis)": 0.0035714285714285713,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.0035714285714285713,
                "tf.math.divide_no_nan(x, y)": 0.0035714285714285713,
                "tf.math.floor(x)": 0.0035714285714285713,
                "tf.math.log(x)": 0.0035714285714285713,
                "tf.math.logical_and(x, y)": 0.0035714285714285713,
                "tf.math.logical_not(x)": 0.0035714285714285713,
                "tf.math.logical_or(x, y)": 0.0035714285714285713,
                "tf.math.logical_xor(x, y)": 0.0035714285714285713,
                "tf.math.negative(x)": 0.0035714285714285713,
                "tf.math.reciprocal(x)": 0.0035714285714285713,
                "tf.math.reciprocal_no_nan(x)": 0.0035714285714285713,
                "tf.math.segment_max(data, segment_ids)": 0.0035714285714285713,
                "tf.math.segment_mean(data, segment_ids)": 0.0035714285714285713,
                "tf.math.segment_min(data, segment_ids)": 0.0035714285714285713,
                "tf.math.segment_prod(data, segment_ids)": 0.0035714285714285713,
                "tf.math.segment_sum(data, segment_ids)": 0.0035714285714285713,
                "tf.math.squared_difference(x, y)": 0.0035714285714285713,
                "tf.math.top_k(input, k)": 0.0035714285714285713,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.0035714285714285713,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.0035714285714285713,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.0035714285714285713,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.0035714285714285713,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.0035714285714285713,
                "tf.matmul(a, b)": 0.010714285714285714,
                "tf.maximum(x, y)": 0.0035714285714285713,
                "tf.minimum(x, y)": 0.0035714285714285713,
                "tf.multiply(x, y)": 0.060714285714285714,
                "tf.not_equal(x, y)": 0.0035714285714285713,
                "tf.one_hot(indices, depth)": 0.0035714285714285713,
                "tf.ones(shape)": 0.0035714285714285713,
                "tf.ones_like(input)": 0.0035714285714285713,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.0035714285714285713,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.0035714285714285713,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.0035714285714285713,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.0035714285714285713,
                "tf.range(start)": 0.0035714285714285713,
                "tf.range(start, limit, delta)": 0.0035714285714285713,
                "tf.reduce_any(input_tensor, axis)": 0.0035714285714285713,
                "tf.reduce_all(input_tensor, axis)": 0.0035714285714285713,
                "tf.reduce_max(input_tensor)": 0.0035714285714285713,
                "tf.reduce_max(input_tensor, axis)": 0.0035714285714285713,
                "tf.reduce_mean(input_tensor)": 0.0035714285714285713,
                "tf.reduce_mean(input_tensor, axis)": 0.0035714285714285713,
                "tf.reduce_min(input_tensor)": 0.0035714285714285713,
                "tf.reduce_min(input_tensor, axis)": 0.0035714285714285713,
                "tf.reduce_prod(input_tensor, axis)": 0.0035714285714285713,
                "tf.reduce_sum(input_tensor)": 0.0035714285714285713,
                "tf.reduce_sum(input_tensor, axis)": 0.0035714285714285713,
                "tf.repeat(input, repeats)": 0.0035714285714285713,
                "tf.repeat(input, repeats, axis)": 0.0035714285714285713,
                "tf.reshape(tensor, shape)": 0.0035714285714285713,
                "tf.reverse(tensor, axis)": 0.0035714285714285713,
                "tf.roll(input, shift, axis)": 0.0035714285714285713,
                "tf.round(x)": 0.0035714285714285713,
                "tf.scatter_nd(indices, updates, shape)": 0.0035714285714285713,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.0035714285714285713,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.0035714285714285713,
                "tf.sequence_mask(lengths)": 0.0035714285714285713,
                "tf.sequence_mask(lengths, maxlen)": 0.0035714285714285713,
                "tf.shape(input)": 0.0035714285714285713,
                "tf.sign(x)": 0.0035714285714285713,
                "tf.sort(values, axis)": 0.0035714285714285713,
                "tf.sort(values, axis, direction='DESCENDING')": 0.0035714285714285713,
                "tf.sqrt(x)": 0.0035714285714285713,
                "tf.square(x)": 0.0035714285714285713,
                "tf.squeeze(input)": 0.0035714285714285713,
                "tf.squeeze(input, axis)": 0.0035714285714285713,
                "tf.stack(values, axis)": 0.0035714285714285713,
                "tf.subtract(x, y)": 0.0035714285714285713,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.0035714285714285713,
                "tf.tensordot(a, b, axes)": 0.007142857142857143,
                "tf.tile(input, multiples)": 0.0035714285714285713,
                "tf.transpose(a)": 0.0035714285714285713,
                "tf.transpose(a, perm)": 0.0035714285714285713,
                "tf.unique_with_counts(x)": 0.0035714285714285713,
                "tf.unstack(value, axis)": 0.0035714285714285713,
                "tf.where(condition)": 0.0035714285714285713,
                "tf.where(condition, x, y)": 0.0035714285714285713,
                "tf.zeros(shape)": 0.0035714285714285713,
                "tf.zeros_like(input)": 0.0035714285714285713,
                "tf.SparseTensor(indices, values, dense_shape)": 0.0035714285714285713,
                "tf.sparse.add(a, b)": 0.0035714285714285713,
                "tf.sparse.concat(axis, sp_inputs)": 0.0035714285714285713,
                "tf.sparse.expand_dims(sp_input, axis)": 0.0035714285714285713,
                "tf.sparse.from_dense(tensor)": 0.0035714285714285713,
                "tf.sparse.maximum(sp_a, sp_b)": 0.0035714285714285713,
                "tf.sparse.minimum(sp_a, sp_b)": 0.0035714285714285713,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.0035714285714285713,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.0035714285714285713,
                "tf.sparse.reset_shape(sp_input)": 0.0035714285714285713,
                "tf.sparse.reshape(sp_input, shape)": 0.0035714285714285713,
                "tf.sparse.retain(sp_input, to_retain)": 0.0035714285714285713,
                "tf.sparse.slice(sp_input, start, size)": 0.0035714285714285713,
                "tf.sparse.split(sp_input, num_split, axis)": 0.0035714285714285713,
                "tf.sparse.to_dense(sp_input)": 0.0035714285714285713,
                "tf.sparse.to_dense(sp_input, default_value)": 0.0035714285714285713,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.0035714285714285713,
                "tf.sparse.transpose(sp_input)": 0.0035714285714285713,
                "tf.sparse.transpose(sp_input, perm)": 0.0035714285714285713,
                "IndexingAxis1Operation": 0.0035714285714285713,
                "IndexingOperation": 0.0035714285714285713,
                "PairCreationOperation": 0.0035714285714285713,
                "SingletonTupleCreationOperation": 0.0035714285714285713,
                "SlicingAxis0BothOperation": 0.0035714285714285713,
                "SlicingAxis0LeftOperation": 0.0035714285714285713,
                "SlicingAxis0RightOperation": 0.0035714285714285713,
                "SlicingAxis1BothOperation": 0.0035714285714285713,
                "SlicingAxis1LeftOperation": 0.0035714285714285713,
                "SlicingAxis1RightOperation": 0.0035714285714285713,
                "TripleCreationOperation": 0.0035714285714285713,
                "PROVIDED_CONSTANT_WEIGHT": 0.0035714285714285713,
                "COMMON_CONSTANT_WEIGHT": 0.09642857142857143,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.0035714285714285713,
                "INPUT_VARIABLE_WEIGHT": 0.14642857142857144,
                "AXIS_CONSTANT_WEIGHT": 0.02857142857142857,
                "SHAPE_CONSTANT_WEIGHT": 0.0035714285714285713,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.0035714285714285713,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.0035714285714285713,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.0035714285714285713,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.0035714285714285713,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.0035714285714285713
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 7,
                "tf.cast(x, dtype)": 8,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 3,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 7,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 4,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 8,
                "tf.pad(tensor, paddings, mode='REFLECT')": 8,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side='left')": 8,
                "tf.searchsorted(sorted_sequence, values, side='right')": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 8,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction='DESCENDING')": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 7,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 8,
                "PairCreationOperation": 8,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 3,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 3,
                "AXIS_CONSTANT_WEIGHT": 5,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "stackoverflow_17",
        "description": "duplicate each element of a tensor",
        "target_program": "tf.stack((in1, in1), axis=1)",
        "source": "https://stackoverflow.com/questions/51761353/about-tensor-of-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[17, -32, 99],]",
            "outputs": "[[17, 17], [-32, -32], [99, 99]]"
        },
        "completions": [
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(in1, 1), repeats=2, axis=1)\n",
            "return tf.repeat(in1, 2)\n",
            "return tf.repeat(tf.expand_dims(in1, 1), 2, axis=1)\n",
            "return tf.tile(tf.expand_dims(in1, -1), [1, 2])\n",
            "def transform(in1):\n    return tf.repeat(in1, repeats=2, axis=1)\n",
            "def transform(in1):\n    return tf.reshape(tf.tile(tf.expand_dims(in1, 1), [1, 2]), [-1, 2])\n",
            "def transform(in1):\n    return tf.repeat(in1, repeats=2)\n",
            "def transform(input_tensor):\n    return tf.repeat(input_tensor, 2)\n",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, 1), [1, 2])\n",
            "return tf.repeat(input, 2)\n",
            "return tf.repeat(in1, 2)\n",
            "result = tf.stack([in1, in1], axis=1)\nreturn result\n",
            "def transform(in1):\n    return tf.reshape(tf.tile(in1, [1, 2]), [-1, 2])\n",
            "return tf.repeat(in1, repeats=2)\n",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, -1), [1, 2])\n",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, 1), [1, 2])\n",
            "def transform(in1):\n    return tf.repeat(in1, 2)\n",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, 1), [1, 2])\n",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, 1), [1, 2])\n",
            "return tf.repeat(tf.expand_dims(in1, 1), 2, axis=1)\n"
        ],
        "tf_operators": {
            "tf.expand_dims": 10,
            "tf.repeat": 11,
            "tf.tile": 8,
            "tf.reshape": 2,
            "tf.stack": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 1,
        "total_in_target": 1,
        "parsed_constants": [
            [
                1,
                2,
                1
            ],
            [
                2
            ],
            [
                1,
                2,
                1
            ],
            [
                -1,
                1,
                2
            ],
            [
                2,
                1
            ],
            [
                1,
                1,
                2,
                -1,
                2
            ],
            [
                2
            ],
            [
                2
            ],
            [
                1,
                1,
                2
            ],
            [
                2
            ],
            [
                2
            ],
            [
                1
            ],
            [
                1,
                2,
                -1,
                2
            ],
            [
                2
            ],
            [
                -1,
                1,
                2
            ],
            [
                1,
                1,
                2
            ],
            [
                2
            ],
            [
                1,
                1,
                2
            ],
            [
                1,
                1,
                2
            ],
            [
                1,
                2,
                1
            ]
        ],
        "all_constants": [
            1,
            2,
            -1
        ],
        "constant_counts": [
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 21,
            "shape": 0,
            "tf_bool": 0,
            "provided": 21,
            "common": 25,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.004,
                "tf.add(x, y)": 0.004,
                "tf.add_n(inputs)": 0.004,
                "tf.argmax(input, axis)": 0.004,
                "tf.argmin(input, axis)": 0.004,
                "tf.argsort(values, axis, stable=True)": 0.004,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.004,
                "tf.boolean_mask(tensor, mask)": 0.004,
                "tf.broadcast_to(input, shape)": 0.004,
                "tf.cast(x, dtype)": 0.004,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.004,
                "tf.concat(values, axis)": 0.004,
                "tf.constant(value)": 0.004,
                "tf.constant(value, dtype)": 0.004,
                "tf.divide(x, y)": 0.004,
                "tf.equal(x, y)": 0.004,
                "tf.exp(x)": 0.004,
                "tf.expand_dims(input, axis)": 0.044,
                "tf.eye(num_rows)": 0.004,
                "tf.eye(num_rows, num_columns)": 0.004,
                "tf.eye(num_rows, dtype)": 0.004,
                "tf.fill(dims, value)": 0.004,
                "tf.gather(params, indices)": 0.004,
                "tf.gather(params, indices, axis, batch_dims)": 0.004,
                "tf.gather_nd(params, indices)": 0.004,
                "tf.gather_nd(params, indices, batch_dims)": 0.004,
                "tf.greater(x, y)": 0.004,
                "tf.greater_equal(x, y)": 0.004,
                "tf.math.bincount(arr)": 0.004,
                "tf.math.ceil(x)": 0.004,
                "tf.math.count_nonzero(input)": 0.004,
                "tf.math.count_nonzero(input, axis)": 0.004,
                "tf.math.cumsum(x, axis)": 0.004,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.004,
                "tf.math.divide_no_nan(x, y)": 0.004,
                "tf.math.floor(x)": 0.004,
                "tf.math.log(x)": 0.004,
                "tf.math.logical_and(x, y)": 0.004,
                "tf.math.logical_not(x)": 0.004,
                "tf.math.logical_or(x, y)": 0.004,
                "tf.math.logical_xor(x, y)": 0.004,
                "tf.math.negative(x)": 0.004,
                "tf.math.reciprocal(x)": 0.004,
                "tf.math.reciprocal_no_nan(x)": 0.004,
                "tf.math.segment_max(data, segment_ids)": 0.004,
                "tf.math.segment_mean(data, segment_ids)": 0.004,
                "tf.math.segment_min(data, segment_ids)": 0.004,
                "tf.math.segment_prod(data, segment_ids)": 0.004,
                "tf.math.segment_sum(data, segment_ids)": 0.004,
                "tf.math.squared_difference(x, y)": 0.004,
                "tf.math.top_k(input, k)": 0.004,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.004,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.004,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.004,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.004,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.004,
                "tf.matmul(a, b)": 0.004,
                "tf.maximum(x, y)": 0.004,
                "tf.minimum(x, y)": 0.004,
                "tf.multiply(x, y)": 0.004,
                "tf.not_equal(x, y)": 0.004,
                "tf.one_hot(indices, depth)": 0.004,
                "tf.ones(shape)": 0.004,
                "tf.ones_like(input)": 0.004,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.004,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.004,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.004,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.004,
                "tf.range(start)": 0.004,
                "tf.range(start, limit, delta)": 0.004,
                "tf.reduce_any(input_tensor, axis)": 0.004,
                "tf.reduce_all(input_tensor, axis)": 0.004,
                "tf.reduce_max(input_tensor)": 0.004,
                "tf.reduce_max(input_tensor, axis)": 0.004,
                "tf.reduce_mean(input_tensor)": 0.004,
                "tf.reduce_mean(input_tensor, axis)": 0.004,
                "tf.reduce_min(input_tensor)": 0.004,
                "tf.reduce_min(input_tensor, axis)": 0.004,
                "tf.reduce_prod(input_tensor, axis)": 0.004,
                "tf.reduce_sum(input_tensor)": 0.004,
                "tf.reduce_sum(input_tensor, axis)": 0.004,
                "tf.repeat(input, repeats)": 0.024,
                "tf.repeat(input, repeats, axis)": 0.012,
                "tf.reshape(tensor, shape)": 0.012,
                "tf.reverse(tensor, axis)": 0.004,
                "tf.roll(input, shift, axis)": 0.004,
                "tf.round(x)": 0.004,
                "tf.scatter_nd(indices, updates, shape)": 0.004,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.004,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.004,
                "tf.sequence_mask(lengths)": 0.004,
                "tf.sequence_mask(lengths, maxlen)": 0.004,
                "tf.shape(input)": 0.004,
                "tf.sign(x)": 0.004,
                "tf.sort(values, axis)": 0.004,
                "tf.sort(values, axis, direction='DESCENDING')": 0.004,
                "tf.sqrt(x)": 0.004,
                "tf.square(x)": 0.004,
                "tf.squeeze(input)": 0.004,
                "tf.squeeze(input, axis)": 0.004,
                "tf.stack(values, axis)": 0.008,
                "tf.subtract(x, y)": 0.004,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.004,
                "tf.tensordot(a, b, axes)": 0.004,
                "tf.tile(input, multiples)": 0.036,
                "tf.transpose(a)": 0.004,
                "tf.transpose(a, perm)": 0.004,
                "tf.unique_with_counts(x)": 0.004,
                "tf.unstack(value, axis)": 0.004,
                "tf.where(condition)": 0.004,
                "tf.where(condition, x, y)": 0.004,
                "tf.zeros(shape)": 0.004,
                "tf.zeros_like(input)": 0.004,
                "tf.SparseTensor(indices, values, dense_shape)": 0.004,
                "tf.sparse.add(a, b)": 0.004,
                "tf.sparse.concat(axis, sp_inputs)": 0.004,
                "tf.sparse.expand_dims(sp_input, axis)": 0.004,
                "tf.sparse.from_dense(tensor)": 0.004,
                "tf.sparse.maximum(sp_a, sp_b)": 0.004,
                "tf.sparse.minimum(sp_a, sp_b)": 0.004,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.004,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.004,
                "tf.sparse.reset_shape(sp_input)": 0.004,
                "tf.sparse.reshape(sp_input, shape)": 0.004,
                "tf.sparse.retain(sp_input, to_retain)": 0.004,
                "tf.sparse.slice(sp_input, start, size)": 0.004,
                "tf.sparse.split(sp_input, num_split, axis)": 0.004,
                "tf.sparse.to_dense(sp_input)": 0.004,
                "tf.sparse.to_dense(sp_input, default_value)": 0.004,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.004,
                "tf.sparse.transpose(sp_input)": 0.004,
                "tf.sparse.transpose(sp_input, perm)": 0.004,
                "IndexingAxis1Operation": 0.004,
                "IndexingOperation": 0.004,
                "PairCreationOperation": 0.004,
                "SingletonTupleCreationOperation": 0.004,
                "SlicingAxis0BothOperation": 0.004,
                "SlicingAxis0LeftOperation": 0.004,
                "SlicingAxis0RightOperation": 0.004,
                "SlicingAxis1BothOperation": 0.004,
                "SlicingAxis1LeftOperation": 0.004,
                "SlicingAxis1RightOperation": 0.004,
                "TripleCreationOperation": 0.004,
                "PROVIDED_CONSTANT_WEIGHT": 0.088,
                "COMMON_CONSTANT_WEIGHT": 0.104,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.004,
                "INPUT_VARIABLE_WEIGHT": 0.088,
                "AXIS_CONSTANT_WEIGHT": 0.004,
                "SHAPE_CONSTANT_WEIGHT": 0.004,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.004,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.004,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.004,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.004,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.004
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 8,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 5,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 8,
                "tf.pad(tensor, paddings, mode='REFLECT')": 8,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 5,
                "tf.repeat(input, repeats, axis)": 6,
                "tf.reshape(tensor, shape)": 6,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side='left')": 8,
                "tf.searchsorted(sorted_sequence, values, side='right')": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 8,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction='DESCENDING')": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 7,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 5,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 8,
                "PairCreationOperation": 8,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 4,
                "COMMON_CONSTANT_WEIGHT": 3,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 4,
                "AXIS_CONSTANT_WEIGHT": 8,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "stackoverflow_18",
        "description": "multiply 3D tensor and 2D tensor and add another tensor",
        "target_program": "tf.add(in3, tf.matmul(in1, in2))",
        "source": "https://stackoverflow.com/questions/38222126/tensorflow-efficient-way-for-tensor-multiplication",
        "constants": "[]",
        "examples": {
            "inputs": "[[[[1, 1, 1], [1, 0, 1]], [[1, 2, 3], [4, 5, 6]]], [[1, 1, 1, 1], [1, 2, 3, 4], [5, 6, 7, 8]], [100, 200, 300, 400],]",
            "outputs": "[[[107, 209, 311, 413], [106, 207, 308, 409]], [[118, 223, 328, 433], [139, 250, 361, 472]]]"
        },
        "completions": [
            "return tf.matmul(in1, in2) + tf.expand_dims(in3, axis=1)\n",
            "return tf.add(tf.tensordot(in1, in2, axes=[[2], [1]]), tf.reshape(in3, [2, 2, 4]))\n",
            "return tf.math.add(tf.tensordot(tf.cast(in1, tf.int32), in2, axes=1), tf.constant(in3))\n",
            "return tf.add(tf.tensordot(in1, in2, axes=[[2], [0]]), in3)\n",
            "temp = tf.matmul(in1, in2)\nreturn tf.add(temp, in3)\n",
            "return tf.add(tf.tensordot(in1, in2, 1), in3)\n",
            "return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n",
            "return tf.add(tf.matmul(in1, in2), tf.expand_dims(in3, 1))\n",
            "result = tf.add(tf.matmul(in1, in2), in3)\nreturn result\n",
            "return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n",
            "result = tf.add(tf.multiply(in1, in2), in3)\nreturn result\n",
            "return tf.add(tf.tensordot(in1, in2, axes=1), tf.reshape(in3, [1, 2, 4]))\n",
            "prod = tf.matmul(in1, in2)\nreturn tf.add(prod, in3)\n",
            "return tf.add(tf.tensordot(in1, in2, 1), in3)\n",
            "return tf.add(tf.tensordot(in1, in2, axes=[[2], [1]]), in3)\n",
            "return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n",
            "return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n",
            "return tf.add(tf.tensordot(in1, in2, 1), in3)\n",
            "result = tf.add(tf.matmul(in1, in2), in3)\nreturn result\n",
            "return tf.add(tf.tensordot(in1, in2, axes=1), tf.expand_dims(in3, axis=0))\n"
        ],
        "tf_operators": {
            "tf.expand_dims": 3,
            "tf.matmul": 6,
            "tf.reshape": 2,
            "tf.tensordot": 13,
            "tf.add": 18,
            "tf.cast": 1,
            "tf.int32": 1,
            "tf.math.add": 1,
            "tf.constant": 1,
            "tf.multiply": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 2,
        "total_in_target": 2,
        "parsed_constants": [
            [
                1
            ],
            [
                2,
                1,
                2,
                2,
                4
            ],
            [
                1
            ],
            [
                2,
                0
            ],
            [],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [],
            [
                1
            ],
            [],
            [
                1,
                1,
                2,
                4
            ],
            [],
            [
                1
            ],
            [
                2,
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [],
            [
                1,
                0
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            4
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 3,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 60,
            "shape": 2,
            "tf_bool": 0,
            "provided": 0,
            "common": 17,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 6,
            "tf_int64": 0,
            "tf_int32": 1
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.0034965034965034965,
                "tf.add(x, y)": 0.06643356643356643,
                "tf.add_n(inputs)": 0.0034965034965034965,
                "tf.argmax(input, axis)": 0.0034965034965034965,
                "tf.argmin(input, axis)": 0.0034965034965034965,
                "tf.argsort(values, axis, stable=True)": 0.0034965034965034965,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.0034965034965034965,
                "tf.boolean_mask(tensor, mask)": 0.0034965034965034965,
                "tf.broadcast_to(input, shape)": 0.0034965034965034965,
                "tf.cast(x, dtype)": 0.006993006993006993,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.0034965034965034965,
                "tf.concat(values, axis)": 0.0034965034965034965,
                "tf.constant(value)": 0.006993006993006993,
                "tf.constant(value, dtype)": 0.0034965034965034965,
                "tf.divide(x, y)": 0.0034965034965034965,
                "tf.equal(x, y)": 0.0034965034965034965,
                "tf.exp(x)": 0.0034965034965034965,
                "tf.expand_dims(input, axis)": 0.013986013986013986,
                "tf.eye(num_rows)": 0.0034965034965034965,
                "tf.eye(num_rows, num_columns)": 0.0034965034965034965,
                "tf.eye(num_rows, dtype)": 0.0034965034965034965,
                "tf.fill(dims, value)": 0.0034965034965034965,
                "tf.gather(params, indices)": 0.0034965034965034965,
                "tf.gather(params, indices, axis, batch_dims)": 0.0034965034965034965,
                "tf.gather_nd(params, indices)": 0.0034965034965034965,
                "tf.gather_nd(params, indices, batch_dims)": 0.0034965034965034965,
                "tf.greater(x, y)": 0.0034965034965034965,
                "tf.greater_equal(x, y)": 0.0034965034965034965,
                "tf.math.bincount(arr)": 0.0034965034965034965,
                "tf.math.ceil(x)": 0.0034965034965034965,
                "tf.math.count_nonzero(input)": 0.0034965034965034965,
                "tf.math.count_nonzero(input, axis)": 0.0034965034965034965,
                "tf.math.cumsum(x, axis)": 0.0034965034965034965,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.0034965034965034965,
                "tf.math.divide_no_nan(x, y)": 0.0034965034965034965,
                "tf.math.floor(x)": 0.0034965034965034965,
                "tf.math.log(x)": 0.0034965034965034965,
                "tf.math.logical_and(x, y)": 0.0034965034965034965,
                "tf.math.logical_not(x)": 0.0034965034965034965,
                "tf.math.logical_or(x, y)": 0.0034965034965034965,
                "tf.math.logical_xor(x, y)": 0.0034965034965034965,
                "tf.math.negative(x)": 0.0034965034965034965,
                "tf.math.reciprocal(x)": 0.0034965034965034965,
                "tf.math.reciprocal_no_nan(x)": 0.0034965034965034965,
                "tf.math.segment_max(data, segment_ids)": 0.0034965034965034965,
                "tf.math.segment_mean(data, segment_ids)": 0.0034965034965034965,
                "tf.math.segment_min(data, segment_ids)": 0.0034965034965034965,
                "tf.math.segment_prod(data, segment_ids)": 0.0034965034965034965,
                "tf.math.segment_sum(data, segment_ids)": 0.0034965034965034965,
                "tf.math.squared_difference(x, y)": 0.0034965034965034965,
                "tf.math.top_k(input, k)": 0.0034965034965034965,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.0034965034965034965,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.0034965034965034965,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.0034965034965034965,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.0034965034965034965,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.0034965034965034965,
                "tf.matmul(a, b)": 0.024475524475524476,
                "tf.maximum(x, y)": 0.0034965034965034965,
                "tf.minimum(x, y)": 0.0034965034965034965,
                "tf.multiply(x, y)": 0.006993006993006993,
                "tf.not_equal(x, y)": 0.0034965034965034965,
                "tf.one_hot(indices, depth)": 0.0034965034965034965,
                "tf.ones(shape)": 0.0034965034965034965,
                "tf.ones_like(input)": 0.0034965034965034965,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.0034965034965034965,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.0034965034965034965,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.0034965034965034965,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.0034965034965034965,
                "tf.range(start)": 0.0034965034965034965,
                "tf.range(start, limit, delta)": 0.0034965034965034965,
                "tf.reduce_any(input_tensor, axis)": 0.0034965034965034965,
                "tf.reduce_all(input_tensor, axis)": 0.0034965034965034965,
                "tf.reduce_max(input_tensor)": 0.0034965034965034965,
                "tf.reduce_max(input_tensor, axis)": 0.0034965034965034965,
                "tf.reduce_mean(input_tensor)": 0.0034965034965034965,
                "tf.reduce_mean(input_tensor, axis)": 0.0034965034965034965,
                "tf.reduce_min(input_tensor)": 0.0034965034965034965,
                "tf.reduce_min(input_tensor, axis)": 0.0034965034965034965,
                "tf.reduce_prod(input_tensor, axis)": 0.0034965034965034965,
                "tf.reduce_sum(input_tensor)": 0.0034965034965034965,
                "tf.reduce_sum(input_tensor, axis)": 0.0034965034965034965,
                "tf.repeat(input, repeats)": 0.0034965034965034965,
                "tf.repeat(input, repeats, axis)": 0.0034965034965034965,
                "tf.reshape(tensor, shape)": 0.01048951048951049,
                "tf.reverse(tensor, axis)": 0.0034965034965034965,
                "tf.roll(input, shift, axis)": 0.0034965034965034965,
                "tf.round(x)": 0.0034965034965034965,
                "tf.scatter_nd(indices, updates, shape)": 0.0034965034965034965,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.0034965034965034965,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.0034965034965034965,
                "tf.sequence_mask(lengths)": 0.0034965034965034965,
                "tf.sequence_mask(lengths, maxlen)": 0.0034965034965034965,
                "tf.shape(input)": 0.0034965034965034965,
                "tf.sign(x)": 0.0034965034965034965,
                "tf.sort(values, axis)": 0.0034965034965034965,
                "tf.sort(values, axis, direction='DESCENDING')": 0.0034965034965034965,
                "tf.sqrt(x)": 0.0034965034965034965,
                "tf.square(x)": 0.0034965034965034965,
                "tf.squeeze(input)": 0.0034965034965034965,
                "tf.squeeze(input, axis)": 0.0034965034965034965,
                "tf.stack(values, axis)": 0.0034965034965034965,
                "tf.subtract(x, y)": 0.0034965034965034965,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.0034965034965034965,
                "tf.tensordot(a, b, axes)": 0.04895104895104895,
                "tf.tile(input, multiples)": 0.0034965034965034965,
                "tf.transpose(a)": 0.0034965034965034965,
                "tf.transpose(a, perm)": 0.0034965034965034965,
                "tf.unique_with_counts(x)": 0.0034965034965034965,
                "tf.unstack(value, axis)": 0.0034965034965034965,
                "tf.where(condition)": 0.0034965034965034965,
                "tf.where(condition, x, y)": 0.0034965034965034965,
                "tf.zeros(shape)": 0.0034965034965034965,
                "tf.zeros_like(input)": 0.0034965034965034965,
                "tf.SparseTensor(indices, values, dense_shape)": 0.0034965034965034965,
                "tf.sparse.add(a, b)": 0.0034965034965034965,
                "tf.sparse.concat(axis, sp_inputs)": 0.0034965034965034965,
                "tf.sparse.expand_dims(sp_input, axis)": 0.0034965034965034965,
                "tf.sparse.from_dense(tensor)": 0.0034965034965034965,
                "tf.sparse.maximum(sp_a, sp_b)": 0.0034965034965034965,
                "tf.sparse.minimum(sp_a, sp_b)": 0.0034965034965034965,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.0034965034965034965,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.0034965034965034965,
                "tf.sparse.reset_shape(sp_input)": 0.0034965034965034965,
                "tf.sparse.reshape(sp_input, shape)": 0.0034965034965034965,
                "tf.sparse.retain(sp_input, to_retain)": 0.0034965034965034965,
                "tf.sparse.slice(sp_input, start, size)": 0.0034965034965034965,
                "tf.sparse.split(sp_input, num_split, axis)": 0.0034965034965034965,
                "tf.sparse.to_dense(sp_input)": 0.0034965034965034965,
                "tf.sparse.to_dense(sp_input, default_value)": 0.0034965034965034965,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.0034965034965034965,
                "tf.sparse.transpose(sp_input)": 0.0034965034965034965,
                "tf.sparse.transpose(sp_input, perm)": 0.0034965034965034965,
                "IndexingAxis1Operation": 0.0034965034965034965,
                "IndexingOperation": 0.0034965034965034965,
                "PairCreationOperation": 0.0034965034965034965,
                "SingletonTupleCreationOperation": 0.0034965034965034965,
                "SlicingAxis0BothOperation": 0.0034965034965034965,
                "SlicingAxis0LeftOperation": 0.0034965034965034965,
                "SlicingAxis0RightOperation": 0.0034965034965034965,
                "SlicingAxis1BothOperation": 0.0034965034965034965,
                "SlicingAxis1LeftOperation": 0.0034965034965034965,
                "SlicingAxis1RightOperation": 0.0034965034965034965,
                "TripleCreationOperation": 0.0034965034965034965,
                "PROVIDED_CONSTANT_WEIGHT": 0.0034965034965034965,
                "COMMON_CONSTANT_WEIGHT": 0.06293706293706294,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.0034965034965034965,
                "INPUT_VARIABLE_WEIGHT": 0.21328671328671328,
                "AXIS_CONSTANT_WEIGHT": 0.024475524475524476,
                "SHAPE_CONSTANT_WEIGHT": 0.01048951048951049,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.0034965034965034965,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.006993006993006993,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.0034965034965034965,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.0034965034965034965,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.0034965034965034965
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 4,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 7,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 7,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 6,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 5,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 7,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 8,
                "tf.pad(tensor, paddings, mode='REFLECT')": 8,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 7,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side='left')": 8,
                "tf.searchsorted(sorted_sequence, values, side='right')": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 8,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction='DESCENDING')": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 4,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 8,
                "PairCreationOperation": 8,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 4,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 2,
                "AXIS_CONSTANT_WEIGHT": 5,
                "SHAPE_CONSTANT_WEIGHT": 7,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 7,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "stackoverflow_19",
        "description": "(\\'sort a tensor considering the first column, breaking ties using the second column\\')",
        "target_program": "tf.gather(tf.gather(in1, tf.argsort(in1[:, 1], stable=True)), tf.argsort(tf.gather(in1, tf.argsort(in1[:, 1], stable=True))[:, 0], stable=True))",
        "source": "https://stackoverflow.com/questions/49399198/sort-a-tensor-based-on-two-columns-in-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[[3, 1, 2], [1, 0, 4], [1, 2, 3], [0, 5, 1], [1, 1, 2], [2, 3, 1], [2, 1, 0]],]",
            "outputs": "[[0, 5, 1],    [1, 0, 4],    [1, 1, 2],    [1, 2, 3],    [2, 1, 0],    [2, 3, 1],    [3, 1, 2]]"
        },
        "completions": [
            "return tf.gather(params=in1, indices=tf.argsort(in1[:, 1]*10 + in1[:, 2], stable=True))\n",
            "return tf.gather(in1, tf.argsort(in1[:, 1], axis=0, stable=True), axis=0)",
            "return tf.gather(tf.argsort(in1, axis=0, stable=True), tf.argsort(in1[:,1], stable=True))\n",
            "return tf.gather(in1, tf.argsort(in1[:, 1], axis=0, direction='ASCENDING'), axis=0)\n",
            "return tf.gather(in1, tf.argsort(in1[:, 0], stable=True), axis=0)",
            "return tf.gather(in1, tf.argsort(in1[:, 1]))",
            "return tf.gather(in1, tf.argsort(in1[:, 1]*1000 + in1[:, 0]))\n",
            "return tf.cast(tf.sort(in1, axis=1), tf.int32)\n",
            "return tf.gather(in1, tf.argsort(tf.reverse(in1, axis=1), axis=0)[:,0])\n  ",
            "return tf.gather(in1, tf.argsort(in1[:, 1]))",
            "return tf.gather(in1, tf.argsort(tf.transpose(in1), axis=1)[:, 0])",
            "return tf.gather(in1, tf.argsort(in1[:, 1]), batch_dims=1)",
            "return tf.gather(in1, tf.argsort(tf.stack([in1[:, 0], in1[:, 1]]), axis=1, stable=True))",
            "return tf.gather(in1, tf.argsort(tf.stack([in1[:, 0], in1[:, 1]]), axis=1))\n",
            "return tf.gather(in1, tf.argsort(tf.stack([in1[:,0], in1[:,1]], axis=1)))",
            "return tf.gather(params=in1, indices=tf.argsort(values=in1[:, 0], axis=0, stable=True), axis=0)\n",
            "return tf.gather(in1, tf.argsort(tf.stack([in1[:, 0], in1[:, 1]]), axis=1))",
            "return tf.gather(in1, tf.argsort(in1[:,1], stable=True), axis=0)",
            "sorted_indices = tf.argsort(in1[:, 0])\nsorted_in1 = tf.gather(in1, sorted_indices)\nsecond_indices = tf.argsort(sorted_in1[:, 1])\nout = tf.gather(sorted_in1, second_indices)\nreturn out\n",
            "return tf.gather(in1, tf.argsort(in1[:, 1]))"
        ],
        "tf_operators": {
            "tf.gather": 19,
            "tf.argsort": 19,
            "tf.cast": 1,
            "tf.sort": 1,
            "tf.int32": 1,
            "tf.reverse": 1,
            "tf.transpose": 1,
            "tf.stack": 4
        },
        "coverage_percentage": 100.0,
        "total_covered": 2,
        "total_in_target": 2,
        "parsed_constants": [
            [
                1,
                10,
                2
            ],
            [
                1,
                0,
                0
            ],
            [
                0,
                1
            ],
            [
                1,
                0,
                0
            ],
            [
                0,
                0
            ],
            [
                1
            ],
            [
                1,
                1000,
                0
            ],
            [
                1
            ],
            [
                1,
                0,
                0
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1,
                1
            ],
            [
                0,
                1,
                1
            ],
            [
                0,
                1,
                1
            ],
            [
                0,
                1,
                1
            ],
            [
                0,
                0,
                0
            ],
            [
                0,
                1,
                1
            ],
            [
                1,
                0
            ],
            [
                0,
                1
            ],
            [
                1
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            1000,
            10
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 45,
            "shape": 0,
            "tf_bool": 0,
            "provided": 2,
            "common": 26,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 1
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.0031645569620253164,
                "tf.add(x, y)": 0.0031645569620253164,
                "tf.add_n(inputs)": 0.0031645569620253164,
                "tf.argmax(input, axis)": 0.0031645569620253164,
                "tf.argmin(input, axis)": 0.0031645569620253164,
                "tf.argsort(values, axis, stable=True)": 0.028481012658227847,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.0031645569620253164,
                "tf.boolean_mask(tensor, mask)": 0.0031645569620253164,
                "tf.broadcast_to(input, shape)": 0.0031645569620253164,
                "tf.cast(x, dtype)": 0.006329113924050633,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.0031645569620253164,
                "tf.concat(values, axis)": 0.0031645569620253164,
                "tf.constant(value)": 0.0031645569620253164,
                "tf.constant(value, dtype)": 0.0031645569620253164,
                "tf.divide(x, y)": 0.0031645569620253164,
                "tf.equal(x, y)": 0.0031645569620253164,
                "tf.exp(x)": 0.0031645569620253164,
                "tf.expand_dims(input, axis)": 0.0031645569620253164,
                "tf.eye(num_rows)": 0.0031645569620253164,
                "tf.eye(num_rows, num_columns)": 0.0031645569620253164,
                "tf.eye(num_rows, dtype)": 0.0031645569620253164,
                "tf.fill(dims, value)": 0.0031645569620253164,
                "tf.gather(params, indices)": 0.04430379746835443,
                "tf.gather(params, indices, axis, batch_dims)": 0.022151898734177215,
                "tf.gather_nd(params, indices)": 0.0031645569620253164,
                "tf.gather_nd(params, indices, batch_dims)": 0.0031645569620253164,
                "tf.greater(x, y)": 0.0031645569620253164,
                "tf.greater_equal(x, y)": 0.0031645569620253164,
                "tf.math.bincount(arr)": 0.0031645569620253164,
                "tf.math.ceil(x)": 0.0031645569620253164,
                "tf.math.count_nonzero(input)": 0.0031645569620253164,
                "tf.math.count_nonzero(input, axis)": 0.0031645569620253164,
                "tf.math.cumsum(x, axis)": 0.0031645569620253164,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.0031645569620253164,
                "tf.math.divide_no_nan(x, y)": 0.0031645569620253164,
                "tf.math.floor(x)": 0.0031645569620253164,
                "tf.math.log(x)": 0.0031645569620253164,
                "tf.math.logical_and(x, y)": 0.0031645569620253164,
                "tf.math.logical_not(x)": 0.0031645569620253164,
                "tf.math.logical_or(x, y)": 0.0031645569620253164,
                "tf.math.logical_xor(x, y)": 0.0031645569620253164,
                "tf.math.negative(x)": 0.0031645569620253164,
                "tf.math.reciprocal(x)": 0.0031645569620253164,
                "tf.math.reciprocal_no_nan(x)": 0.0031645569620253164,
                "tf.math.segment_max(data, segment_ids)": 0.0031645569620253164,
                "tf.math.segment_mean(data, segment_ids)": 0.0031645569620253164,
                "tf.math.segment_min(data, segment_ids)": 0.0031645569620253164,
                "tf.math.segment_prod(data, segment_ids)": 0.0031645569620253164,
                "tf.math.segment_sum(data, segment_ids)": 0.0031645569620253164,
                "tf.math.squared_difference(x, y)": 0.0031645569620253164,
                "tf.math.top_k(input, k)": 0.0031645569620253164,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.0031645569620253164,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.0031645569620253164,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.0031645569620253164,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.0031645569620253164,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.0031645569620253164,
                "tf.matmul(a, b)": 0.0031645569620253164,
                "tf.maximum(x, y)": 0.0031645569620253164,
                "tf.minimum(x, y)": 0.0031645569620253164,
                "tf.multiply(x, y)": 0.0031645569620253164,
                "tf.not_equal(x, y)": 0.0031645569620253164,
                "tf.one_hot(indices, depth)": 0.0031645569620253164,
                "tf.ones(shape)": 0.0031645569620253164,
                "tf.ones_like(input)": 0.0031645569620253164,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.0031645569620253164,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.0031645569620253164,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.0031645569620253164,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.0031645569620253164,
                "tf.range(start)": 0.0031645569620253164,
                "tf.range(start, limit, delta)": 0.0031645569620253164,
                "tf.reduce_any(input_tensor, axis)": 0.0031645569620253164,
                "tf.reduce_all(input_tensor, axis)": 0.0031645569620253164,
                "tf.reduce_max(input_tensor)": 0.0031645569620253164,
                "tf.reduce_max(input_tensor, axis)": 0.0031645569620253164,
                "tf.reduce_mean(input_tensor)": 0.0031645569620253164,
                "tf.reduce_mean(input_tensor, axis)": 0.0031645569620253164,
                "tf.reduce_min(input_tensor)": 0.0031645569620253164,
                "tf.reduce_min(input_tensor, axis)": 0.0031645569620253164,
                "tf.reduce_prod(input_tensor, axis)": 0.0031645569620253164,
                "tf.reduce_sum(input_tensor)": 0.0031645569620253164,
                "tf.reduce_sum(input_tensor, axis)": 0.0031645569620253164,
                "tf.repeat(input, repeats)": 0.0031645569620253164,
                "tf.repeat(input, repeats, axis)": 0.0031645569620253164,
                "tf.reshape(tensor, shape)": 0.0031645569620253164,
                "tf.reverse(tensor, axis)": 0.006329113924050633,
                "tf.roll(input, shift, axis)": 0.0031645569620253164,
                "tf.round(x)": 0.0031645569620253164,
                "tf.scatter_nd(indices, updates, shape)": 0.0031645569620253164,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.0031645569620253164,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.0031645569620253164,
                "tf.sequence_mask(lengths)": 0.0031645569620253164,
                "tf.sequence_mask(lengths, maxlen)": 0.0031645569620253164,
                "tf.shape(input)": 0.0031645569620253164,
                "tf.sign(x)": 0.0031645569620253164,
                "tf.sort(values, axis)": 0.0031645569620253164,
                "tf.sort(values, axis, direction='DESCENDING')": 0.006329113924050633,
                "tf.sqrt(x)": 0.0031645569620253164,
                "tf.square(x)": 0.0031645569620253164,
                "tf.squeeze(input)": 0.0031645569620253164,
                "tf.squeeze(input, axis)": 0.0031645569620253164,
                "tf.stack(values, axis)": 0.015822784810126583,
                "tf.subtract(x, y)": 0.0031645569620253164,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.0031645569620253164,
                "tf.tensordot(a, b, axes)": 0.0031645569620253164,
                "tf.tile(input, multiples)": 0.0031645569620253164,
                "tf.transpose(a)": 0.006329113924050633,
                "tf.transpose(a, perm)": 0.0031645569620253164,
                "tf.unique_with_counts(x)": 0.0031645569620253164,
                "tf.unstack(value, axis)": 0.0031645569620253164,
                "tf.where(condition)": 0.0031645569620253164,
                "tf.where(condition, x, y)": 0.0031645569620253164,
                "tf.zeros(shape)": 0.0031645569620253164,
                "tf.zeros_like(input)": 0.0031645569620253164,
                "tf.SparseTensor(indices, values, dense_shape)": 0.0031645569620253164,
                "tf.sparse.add(a, b)": 0.0031645569620253164,
                "tf.sparse.concat(axis, sp_inputs)": 0.0031645569620253164,
                "tf.sparse.expand_dims(sp_input, axis)": 0.0031645569620253164,
                "tf.sparse.from_dense(tensor)": 0.0031645569620253164,
                "tf.sparse.maximum(sp_a, sp_b)": 0.0031645569620253164,
                "tf.sparse.minimum(sp_a, sp_b)": 0.0031645569620253164,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.0031645569620253164,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.0031645569620253164,
                "tf.sparse.reset_shape(sp_input)": 0.0031645569620253164,
                "tf.sparse.reshape(sp_input, shape)": 0.0031645569620253164,
                "tf.sparse.retain(sp_input, to_retain)": 0.0031645569620253164,
                "tf.sparse.slice(sp_input, start, size)": 0.0031645569620253164,
                "tf.sparse.split(sp_input, num_split, axis)": 0.0031645569620253164,
                "tf.sparse.to_dense(sp_input)": 0.0031645569620253164,
                "tf.sparse.to_dense(sp_input, default_value)": 0.0031645569620253164,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.0031645569620253164,
                "tf.sparse.transpose(sp_input)": 0.0031645569620253164,
                "tf.sparse.transpose(sp_input, perm)": 0.0031645569620253164,
                "IndexingAxis1Operation": 0.08544303797468354,
                "IndexingOperation": 0.0031645569620253164,
                "PairCreationOperation": 0.08544303797468354,
                "SingletonTupleCreationOperation": 0.0031645569620253164,
                "SlicingAxis0BothOperation": 0.0031645569620253164,
                "SlicingAxis0LeftOperation": 0.0031645569620253164,
                "SlicingAxis0RightOperation": 0.0031645569620253164,
                "SlicingAxis1BothOperation": 0.0031645569620253164,
                "SlicingAxis1LeftOperation": 0.0031645569620253164,
                "SlicingAxis1RightOperation": 0.0031645569620253164,
                "TripleCreationOperation": 0.0031645569620253164,
                "PROVIDED_CONSTANT_WEIGHT": 0.00949367088607595,
                "COMMON_CONSTANT_WEIGHT": 0.08544303797468354,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.0031645569620253164,
                "INPUT_VARIABLE_WEIGHT": 0.14556962025316456,
                "AXIS_CONSTANT_WEIGHT": 0.0031645569620253164,
                "SHAPE_CONSTANT_WEIGHT": 0.0031645569620253164,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.0031645569620253164,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.006329113924050633,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.0031645569620253164,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.0031645569620253164,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.0031645569620253164
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 5,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 7,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 8,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 4,
                "tf.gather(params, indices, axis, batch_dims)": 5,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 8,
                "tf.pad(tensor, paddings, mode='REFLECT')": 8,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 7,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side='left')": 8,
                "tf.searchsorted(sorted_sequence, values, side='right')": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 8,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction='DESCENDING')": 7,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 6,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 7,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 4,
                "IndexingOperation": 8,
                "PairCreationOperation": 4,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 7,
                "COMMON_CONSTANT_WEIGHT": 4,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 3,
                "AXIS_CONSTANT_WEIGHT": 8,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 7,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "stackoverflow_20",
        "description": "compute argmax in each tensor and set it to 1",
        "target_program": "tf.cast(tf.one_hot(tf.argmax(in1, axis=1), 3), tf.int32)",
        "source": "https://stackoverflow.com/questions/44834739/argmax-on-a-tensor-and-ceiling-in-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[[0.7, 0.2, 0.1], [0.4, 0.5, 0.1], [0.4, 0.4, 0.2], [0.3, 0.4, 0.3], [0.0, 0.0, 1.0]],]",
            "outputs": "[[1, 0, 0],    [0, 1, 0],    [1, 0, 0],    [0, 1, 0],    [0, 0, 1]]"
        },
        "completions": [
            "return tf.one_hot(tf.argmax(in1, axis=1), depth=tf.shape(in1)[1])\n",
            "def transform(in1):\n    indices = tf.argmax(in1, axis=1)\n    updates = tf.one_hot(indices, tf.shape(in1)[1])\n    return tf.tensor_scatter_nd_update(tf.zeros_like(in1), tf.expand_dims(indices, axis=1), updates)\n",
            "return tf.one_hot(tf.argmax(in1, axis=1), depth=tf.shape(in1)[1])\n",
            "max_indices = tf.argmax(in1, axis=1)\nreturn tf.one_hot(max_indices, depth=tf.shape(in1)[1])\n",
            "indices = tf.argmax(in1, axis=1)\none_hot = tf.one_hot(indices, tf.shape(in1)[1])\nreturn tf.cast(one_hot, tf.int32)\n",
            "return tf.cast(tf.one_hot(tf.argmax(in1, axis=1), tf.size(in1, axis=1)), tf.int32)\n",
            "return tf.cast(tf.eye(tf.argmax(in1, axis=1) + 1, depth=in1.shape[1]), tf.int32)\n",
            "max_indices = tf.argmax(in1, axis=1)\nreturn tf.one_hot(max_indices, depth=tf.shape(in1)[1])\n",
            "return tf.cast(tf.one_hot(tf.argmax(in1, axis=1), tf.dtypes.int32), tf.int32)\n",
            "return tf.cast(tf.equal(in1, tf.reduce_max(in1, axis=1, keepdims=True)), tf.int32)\n",
            "return tf.cast(tf.equal(in1, tf.reduce_max(in1, axis=1, keepdims=True)), tf.int32)\n",
            "max_indices = tf.expand_dims(tf.argmax(in1, axis=1), 1)\nreturn tf.cast(tf.equal(tf.range(tf.shape(in1)[1]), max_indices), tf.int32)\n",
            "return tf.cast(tf.equal(in1, tf.reduce_max(in1, axis=1, keepdims=True)), tf.int32)\n",
            "return tf.one_hot(tf.argmax(in1, axis=1), depth=in1.shape[1])\n",
            "return tf.cast(tf.one_hot(tf.argmax(in1, axis=1), depth=tf.shape(in1)[1]), tf.int32)\n",
            "max_indices = tf.cast(tf.argmax(in1, axis=1), tf.int32)\nreturn tf.one_hot(max_indices, tf.shape(in1)[1])\n",
            "max_indices = tf.argmax(in1, axis=1)\nresult = tf.one_hot(max_indices, in1.shape[1])\nreturn result\n",
            "return tf.one_hot(tf.argmax(in1, axis=1), depth=in1.shape[1])\n",
            "return tf.cast(tf.equal(in1, tf.reduce_max(in1, axis=1, keepdims=True)), tf.int32)",
            "indices = tf.cast(tf.argmax(in1, axis=1), tf.int32)\ndepth = tf.shape(in1)[1]\nreturn tf.one_hot(indices, depth)\n"
        ],
        "tf_operators": {
            "tf.one_hot": 14,
            "tf.argmax": 16,
            "tf.shape": 10,
            "tf.tensor_scatter_nd_update": 1,
            "tf.zeros_like": 1,
            "tf.expand_dims": 2,
            "tf.cast": 12,
            "tf.int32": 12,
            "tf.size": 1,
            "tf.eye": 1,
            "tf.dtypes.int32": 1,
            "tf.reduce_max": 4,
            "tf.equal": 5,
            "tf.range": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 4,
        "total_in_target": 4,
        "parsed_constants": [
            [
                1,
                1
            ],
            [
                1,
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                1,
                1
            ],
            [
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1
            ],
            [
                1,
                1
            ]
        ],
        "all_constants": [
            1
        ],
        "constant_counts": [
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 8,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 45,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 42,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 12
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.0030211480362537764,
                "tf.add(x, y)": 0.0030211480362537764,
                "tf.add_n(inputs)": 0.0030211480362537764,
                "tf.argmax(input, axis)": 0.0513595166163142,
                "tf.argmin(input, axis)": 0.0030211480362537764,
                "tf.argsort(values, axis, stable=True)": 0.0030211480362537764,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.0030211480362537764,
                "tf.boolean_mask(tensor, mask)": 0.0030211480362537764,
                "tf.broadcast_to(input, shape)": 0.0030211480362537764,
                "tf.cast(x, dtype)": 0.03927492447129909,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.0030211480362537764,
                "tf.concat(values, axis)": 0.0030211480362537764,
                "tf.constant(value)": 0.0030211480362537764,
                "tf.constant(value, dtype)": 0.0030211480362537764,
                "tf.divide(x, y)": 0.0030211480362537764,
                "tf.equal(x, y)": 0.01812688821752266,
                "tf.exp(x)": 0.0030211480362537764,
                "tf.expand_dims(input, axis)": 0.00906344410876133,
                "tf.eye(num_rows)": 0.0030211480362537764,
                "tf.eye(num_rows, num_columns)": 0.006042296072507553,
                "tf.eye(num_rows, dtype)": 0.0030211480362537764,
                "tf.fill(dims, value)": 0.0030211480362537764,
                "tf.gather(params, indices)": 0.0030211480362537764,
                "tf.gather(params, indices, axis, batch_dims)": 0.0030211480362537764,
                "tf.gather_nd(params, indices)": 0.0030211480362537764,
                "tf.gather_nd(params, indices, batch_dims)": 0.0030211480362537764,
                "tf.greater(x, y)": 0.0030211480362537764,
                "tf.greater_equal(x, y)": 0.0030211480362537764,
                "tf.math.bincount(arr)": 0.0030211480362537764,
                "tf.math.ceil(x)": 0.0030211480362537764,
                "tf.math.count_nonzero(input)": 0.0030211480362537764,
                "tf.math.count_nonzero(input, axis)": 0.0030211480362537764,
                "tf.math.cumsum(x, axis)": 0.0030211480362537764,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.0030211480362537764,
                "tf.math.divide_no_nan(x, y)": 0.0030211480362537764,
                "tf.math.floor(x)": 0.0030211480362537764,
                "tf.math.log(x)": 0.0030211480362537764,
                "tf.math.logical_and(x, y)": 0.0030211480362537764,
                "tf.math.logical_not(x)": 0.0030211480362537764,
                "tf.math.logical_or(x, y)": 0.0030211480362537764,
                "tf.math.logical_xor(x, y)": 0.0030211480362537764,
                "tf.math.negative(x)": 0.0030211480362537764,
                "tf.math.reciprocal(x)": 0.0030211480362537764,
                "tf.math.reciprocal_no_nan(x)": 0.0030211480362537764,
                "tf.math.segment_max(data, segment_ids)": 0.0030211480362537764,
                "tf.math.segment_mean(data, segment_ids)": 0.0030211480362537764,
                "tf.math.segment_min(data, segment_ids)": 0.0030211480362537764,
                "tf.math.segment_prod(data, segment_ids)": 0.0030211480362537764,
                "tf.math.segment_sum(data, segment_ids)": 0.0030211480362537764,
                "tf.math.squared_difference(x, y)": 0.0030211480362537764,
                "tf.math.top_k(input, k)": 0.0030211480362537764,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.0030211480362537764,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.0030211480362537764,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.0030211480362537764,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.0030211480362537764,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.0030211480362537764,
                "tf.matmul(a, b)": 0.0030211480362537764,
                "tf.maximum(x, y)": 0.0030211480362537764,
                "tf.minimum(x, y)": 0.0030211480362537764,
                "tf.multiply(x, y)": 0.0030211480362537764,
                "tf.not_equal(x, y)": 0.0030211480362537764,
                "tf.one_hot(indices, depth)": 0.045317220543806644,
                "tf.ones(shape)": 0.0030211480362537764,
                "tf.ones_like(input)": 0.0030211480362537764,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.0030211480362537764,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.0030211480362537764,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.0030211480362537764,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.0030211480362537764,
                "tf.range(start)": 0.006042296072507553,
                "tf.range(start, limit, delta)": 0.0030211480362537764,
                "tf.reduce_any(input_tensor, axis)": 0.0030211480362537764,
                "tf.reduce_all(input_tensor, axis)": 0.0030211480362537764,
                "tf.reduce_max(input_tensor)": 0.0030211480362537764,
                "tf.reduce_max(input_tensor, axis)": 0.0030211480362537764,
                "tf.reduce_mean(input_tensor)": 0.0030211480362537764,
                "tf.reduce_mean(input_tensor, axis)": 0.0030211480362537764,
                "tf.reduce_min(input_tensor)": 0.0030211480362537764,
                "tf.reduce_min(input_tensor, axis)": 0.0030211480362537764,
                "tf.reduce_prod(input_tensor, axis)": 0.0030211480362537764,
                "tf.reduce_sum(input_tensor)": 0.0030211480362537764,
                "tf.reduce_sum(input_tensor, axis)": 0.0030211480362537764,
                "tf.repeat(input, repeats)": 0.0030211480362537764,
                "tf.repeat(input, repeats, axis)": 0.0030211480362537764,
                "tf.reshape(tensor, shape)": 0.0030211480362537764,
                "tf.reverse(tensor, axis)": 0.0030211480362537764,
                "tf.roll(input, shift, axis)": 0.0030211480362537764,
                "tf.round(x)": 0.0030211480362537764,
                "tf.scatter_nd(indices, updates, shape)": 0.0030211480362537764,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.0030211480362537764,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.0030211480362537764,
                "tf.sequence_mask(lengths)": 0.0030211480362537764,
                "tf.sequence_mask(lengths, maxlen)": 0.0030211480362537764,
                "tf.shape(input)": 0.03323262839879154,
                "tf.sign(x)": 0.0030211480362537764,
                "tf.sort(values, axis)": 0.0030211480362537764,
                "tf.sort(values, axis, direction='DESCENDING')": 0.0030211480362537764,
                "tf.sqrt(x)": 0.0030211480362537764,
                "tf.square(x)": 0.0030211480362537764,
                "tf.squeeze(input)": 0.0030211480362537764,
                "tf.squeeze(input, axis)": 0.0030211480362537764,
                "tf.stack(values, axis)": 0.0030211480362537764,
                "tf.subtract(x, y)": 0.0030211480362537764,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.006042296072507553,
                "tf.tensordot(a, b, axes)": 0.0030211480362537764,
                "tf.tile(input, multiples)": 0.0030211480362537764,
                "tf.transpose(a)": 0.0030211480362537764,
                "tf.transpose(a, perm)": 0.0030211480362537764,
                "tf.unique_with_counts(x)": 0.0030211480362537764,
                "tf.unstack(value, axis)": 0.0030211480362537764,
                "tf.where(condition)": 0.0030211480362537764,
                "tf.where(condition, x, y)": 0.0030211480362537764,
                "tf.zeros(shape)": 0.0030211480362537764,
                "tf.zeros_like(input)": 0.006042296072507553,
                "tf.SparseTensor(indices, values, dense_shape)": 0.0030211480362537764,
                "tf.sparse.add(a, b)": 0.0030211480362537764,
                "tf.sparse.concat(axis, sp_inputs)": 0.0030211480362537764,
                "tf.sparse.expand_dims(sp_input, axis)": 0.0030211480362537764,
                "tf.sparse.from_dense(tensor)": 0.0030211480362537764,
                "tf.sparse.maximum(sp_a, sp_b)": 0.0030211480362537764,
                "tf.sparse.minimum(sp_a, sp_b)": 0.0030211480362537764,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.0030211480362537764,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.0030211480362537764,
                "tf.sparse.reset_shape(sp_input)": 0.0030211480362537764,
                "tf.sparse.reshape(sp_input, shape)": 0.0030211480362537764,
                "tf.sparse.retain(sp_input, to_retain)": 0.0030211480362537764,
                "tf.sparse.slice(sp_input, start, size)": 0.0030211480362537764,
                "tf.sparse.split(sp_input, num_split, axis)": 0.0030211480362537764,
                "tf.sparse.to_dense(sp_input)": 0.0030211480362537764,
                "tf.sparse.to_dense(sp_input, default_value)": 0.0030211480362537764,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.0030211480362537764,
                "tf.sparse.transpose(sp_input)": 0.0030211480362537764,
                "tf.sparse.transpose(sp_input, perm)": 0.0030211480362537764,
                "IndexingAxis1Operation": 0.0030211480362537764,
                "IndexingOperation": 0.045317220543806644,
                "PairCreationOperation": 0.0030211480362537764,
                "SingletonTupleCreationOperation": 0.0030211480362537764,
                "SlicingAxis0BothOperation": 0.0030211480362537764,
                "SlicingAxis0LeftOperation": 0.0030211480362537764,
                "SlicingAxis0RightOperation": 0.0030211480362537764,
                "SlicingAxis1BothOperation": 0.0030211480362537764,
                "SlicingAxis1LeftOperation": 0.0030211480362537764,
                "SlicingAxis1RightOperation": 0.0030211480362537764,
                "TripleCreationOperation": 0.0030211480362537764,
                "PROVIDED_CONSTANT_WEIGHT": 0.0030211480362537764,
                "COMMON_CONSTANT_WEIGHT": 0.1299093655589124,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.0030211480362537764,
                "INPUT_VARIABLE_WEIGHT": 0.13897280966767372,
                "AXIS_CONSTANT_WEIGHT": 0.0030211480362537764,
                "SHAPE_CONSTANT_WEIGHT": 0.0030211480362537764,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.0030211480362537764,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.03927492447129909,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.0030211480362537764,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.0030211480362537764,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.0030211480362537764
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 4,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 5,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 6,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 7,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 7,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 4,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 8,
                "tf.pad(tensor, paddings, mode='REFLECT')": 8,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 8,
                "tf.range(start)": 7,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side='left')": 8,
                "tf.searchsorted(sorted_sequence, values, side='right')": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 5,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction='DESCENDING')": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 7,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 7,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 4,
                "PairCreationOperation": 8,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 3,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 3,
                "AXIS_CONSTANT_WEIGHT": 8,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 5,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "stackoverflow_21",
        "description": "gather elements in a tensor along axis 1",
        "target_program": "tf.gather(in2, in1, axis=1, batch_dims=1)",
        "source": "https://stackoverflow.com/questions/51690095/how-to-gather-element-with-index-in-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[[2], [0], [1], [0]],[[0.2, 0.5, 0.3], [0.1, 0.3, 0.6], [0.1, 0.6, 0.3], [0.7, 0.0, 0.3]],]",
            "outputs": "[[0.3], [0.1], [0.6], [0.7]]"
        },
        "completions": [
            "return tf.gather_nd(in2, in1)\n",
            "return tf.gather_nd(in2, tf.expand_dims(in1, 1))",
            "return tf.gather_nd(in2, tf.expand_dims(in1, axis=1))",
            "return tf.gather(in2, tf.squeeze(in1, axis=1), axis=1)\n",
            "return tf.gather(in2, in1, axis=1)\n",
            "output = tf.gather_nd(in2, tf.expand_dims(in1, axis=1))\nreturn output\n",
            "return tf.gather_nd(in2, in1)\n",
            "return tf.gather(in2, in1, axis=1)",
            "return tf.gather_nd(in2, tf.expand_dims(in1, 1))",
            "return tf.gather_nd(in2, tf.stack([tf.range(tf.shape(in1)[0]), tf.squeeze(in1)], axis=1))\n",
            "return tf.gather_nd(in2, in1)\n",
            "return tf.gather_nd(in2, in1)",
            "return tf.gather_nd(in2, tf.expand_dims(in1, 1))",
            "output = tf.gather_nd(in2, in1, batch_dims=1)\nreturn output\n",
            "return tf.gather_nd(in2, tf.stack([tf.range(tf.shape(in1)[0]), tf.squeeze(in1)], axis=1))\n",
            "return tf.gather_nd(in2, tf.expand_dims(in1, 1))",
            "return tf.gather(in2, in1, axis=1)\n",
            "return tf.gather_nd(in2, in1)\n",
            "return tf.gather_nd(in2, in1)\n",
            "return tf.gather_nd(in2, tf.expand_dims(in1, 1))\n"
        ],
        "tf_operators": {
            "tf.gather_nd": 16,
            "tf.expand_dims": 7,
            "tf.squeeze": 3,
            "tf.gather": 4,
            "tf.shape": 2,
            "tf.range": 2,
            "tf.stack": 2
        },
        "coverage_percentage": 100.0,
        "total_covered": 1,
        "total_in_target": 1,
        "parsed_constants": [
            [],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [],
            [
                1
            ],
            [
                1
            ],
            [
                0,
                1
            ],
            [],
            [],
            [
                1
            ],
            [
                1
            ],
            [
                0,
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [],
            [],
            [
                1
            ]
        ],
        "all_constants": [
            0,
            1
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 42,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 17,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.004,
                "tf.add(x, y)": 0.004,
                "tf.add_n(inputs)": 0.004,
                "tf.argmax(input, axis)": 0.004,
                "tf.argmin(input, axis)": 0.004,
                "tf.argsort(values, axis, stable=True)": 0.004,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.004,
                "tf.boolean_mask(tensor, mask)": 0.004,
                "tf.broadcast_to(input, shape)": 0.004,
                "tf.cast(x, dtype)": 0.004,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.004,
                "tf.concat(values, axis)": 0.004,
                "tf.constant(value)": 0.004,
                "tf.constant(value, dtype)": 0.004,
                "tf.divide(x, y)": 0.004,
                "tf.equal(x, y)": 0.004,
                "tf.exp(x)": 0.004,
                "tf.expand_dims(input, axis)": 0.032,
                "tf.eye(num_rows)": 0.004,
                "tf.eye(num_rows, num_columns)": 0.004,
                "tf.eye(num_rows, dtype)": 0.004,
                "tf.fill(dims, value)": 0.004,
                "tf.gather(params, indices)": 0.004,
                "tf.gather(params, indices, axis, batch_dims)": 0.02,
                "tf.gather_nd(params, indices)": 0.064,
                "tf.gather_nd(params, indices, batch_dims)": 0.004,
                "tf.greater(x, y)": 0.004,
                "tf.greater_equal(x, y)": 0.004,
                "tf.math.bincount(arr)": 0.004,
                "tf.math.ceil(x)": 0.004,
                "tf.math.count_nonzero(input)": 0.004,
                "tf.math.count_nonzero(input, axis)": 0.004,
                "tf.math.cumsum(x, axis)": 0.004,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.004,
                "tf.math.divide_no_nan(x, y)": 0.004,
                "tf.math.floor(x)": 0.004,
                "tf.math.log(x)": 0.004,
                "tf.math.logical_and(x, y)": 0.004,
                "tf.math.logical_not(x)": 0.004,
                "tf.math.logical_or(x, y)": 0.004,
                "tf.math.logical_xor(x, y)": 0.004,
                "tf.math.negative(x)": 0.004,
                "tf.math.reciprocal(x)": 0.004,
                "tf.math.reciprocal_no_nan(x)": 0.004,
                "tf.math.segment_max(data, segment_ids)": 0.004,
                "tf.math.segment_mean(data, segment_ids)": 0.004,
                "tf.math.segment_min(data, segment_ids)": 0.004,
                "tf.math.segment_prod(data, segment_ids)": 0.004,
                "tf.math.segment_sum(data, segment_ids)": 0.004,
                "tf.math.squared_difference(x, y)": 0.004,
                "tf.math.top_k(input, k)": 0.004,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.004,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.004,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.004,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.004,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.004,
                "tf.matmul(a, b)": 0.004,
                "tf.maximum(x, y)": 0.004,
                "tf.minimum(x, y)": 0.004,
                "tf.multiply(x, y)": 0.004,
                "tf.not_equal(x, y)": 0.004,
                "tf.one_hot(indices, depth)": 0.004,
                "tf.ones(shape)": 0.004,
                "tf.ones_like(input)": 0.004,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.004,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.004,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.004,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.004,
                "tf.range(start)": 0.012,
                "tf.range(start, limit, delta)": 0.004,
                "tf.reduce_any(input_tensor, axis)": 0.004,
                "tf.reduce_all(input_tensor, axis)": 0.004,
                "tf.reduce_max(input_tensor)": 0.004,
                "tf.reduce_max(input_tensor, axis)": 0.004,
                "tf.reduce_mean(input_tensor)": 0.004,
                "tf.reduce_mean(input_tensor, axis)": 0.004,
                "tf.reduce_min(input_tensor)": 0.004,
                "tf.reduce_min(input_tensor, axis)": 0.004,
                "tf.reduce_prod(input_tensor, axis)": 0.004,
                "tf.reduce_sum(input_tensor)": 0.004,
                "tf.reduce_sum(input_tensor, axis)": 0.004,
                "tf.repeat(input, repeats)": 0.004,
                "tf.repeat(input, repeats, axis)": 0.004,
                "tf.reshape(tensor, shape)": 0.004,
                "tf.reverse(tensor, axis)": 0.004,
                "tf.roll(input, shift, axis)": 0.004,
                "tf.round(x)": 0.004,
                "tf.scatter_nd(indices, updates, shape)": 0.004,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.004,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.004,
                "tf.sequence_mask(lengths)": 0.004,
                "tf.sequence_mask(lengths, maxlen)": 0.004,
                "tf.shape(input)": 0.012,
                "tf.sign(x)": 0.004,
                "tf.sort(values, axis)": 0.004,
                "tf.sort(values, axis, direction='DESCENDING')": 0.004,
                "tf.sqrt(x)": 0.004,
                "tf.square(x)": 0.004,
                "tf.squeeze(input)": 0.012,
                "tf.squeeze(input, axis)": 0.004,
                "tf.stack(values, axis)": 0.012,
                "tf.subtract(x, y)": 0.004,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.004,
                "tf.tensordot(a, b, axes)": 0.004,
                "tf.tile(input, multiples)": 0.004,
                "tf.transpose(a)": 0.004,
                "tf.transpose(a, perm)": 0.004,
                "tf.unique_with_counts(x)": 0.004,
                "tf.unstack(value, axis)": 0.004,
                "tf.where(condition)": 0.004,
                "tf.where(condition, x, y)": 0.004,
                "tf.zeros(shape)": 0.004,
                "tf.zeros_like(input)": 0.004,
                "tf.SparseTensor(indices, values, dense_shape)": 0.004,
                "tf.sparse.add(a, b)": 0.004,
                "tf.sparse.concat(axis, sp_inputs)": 0.004,
                "tf.sparse.expand_dims(sp_input, axis)": 0.004,
                "tf.sparse.from_dense(tensor)": 0.004,
                "tf.sparse.maximum(sp_a, sp_b)": 0.004,
                "tf.sparse.minimum(sp_a, sp_b)": 0.004,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.004,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.004,
                "tf.sparse.reset_shape(sp_input)": 0.004,
                "tf.sparse.reshape(sp_input, shape)": 0.004,
                "tf.sparse.retain(sp_input, to_retain)": 0.004,
                "tf.sparse.slice(sp_input, start, size)": 0.004,
                "tf.sparse.split(sp_input, num_split, axis)": 0.004,
                "tf.sparse.to_dense(sp_input)": 0.004,
                "tf.sparse.to_dense(sp_input, default_value)": 0.004,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.004,
                "tf.sparse.transpose(sp_input)": 0.004,
                "tf.sparse.transpose(sp_input, perm)": 0.004,
                "IndexingAxis1Operation": 0.004,
                "IndexingOperation": 0.012,
                "PairCreationOperation": 0.004,
                "SingletonTupleCreationOperation": 0.004,
                "SlicingAxis0BothOperation": 0.004,
                "SlicingAxis0LeftOperation": 0.004,
                "SlicingAxis0RightOperation": 0.004,
                "SlicingAxis1BothOperation": 0.004,
                "SlicingAxis1LeftOperation": 0.004,
                "SlicingAxis1RightOperation": 0.004,
                "TripleCreationOperation": 0.004,
                "PROVIDED_CONSTANT_WEIGHT": 0.004,
                "COMMON_CONSTANT_WEIGHT": 0.072,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.004,
                "INPUT_VARIABLE_WEIGHT": 0.172,
                "AXIS_CONSTANT_WEIGHT": 0.004,
                "SHAPE_CONSTANT_WEIGHT": 0.004,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.004,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.004,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.004,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.004,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.004
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 8,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 5,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 6,
                "tf.gather_nd(params, indices)": 4,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 8,
                "tf.pad(tensor, paddings, mode='REFLECT')": 8,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 8,
                "tf.range(start)": 6,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side='left')": 8,
                "tf.searchsorted(sorted_sequence, values, side='right')": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 6,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction='DESCENDING')": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 6,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 6,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 6,
                "PairCreationOperation": 8,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 4,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 3,
                "AXIS_CONSTANT_WEIGHT": 8,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "stackoverflow_22",
        "description": "multiply a vector with a matrix without reshaping the vector",
        "target_program": "tf.tensordot(tf.cast(in1, tf.float32), in2, 1)",
        "source": "https://stackoverflow.com/questions/43284897/how-can-i-multiply-a-vector-and-a-matrix-in-tensorflow-without-reshaping",
        "constants": "[]",
        "examples": {
            "inputs": "[[3, 1, 10],[[0.6, 0.4], [0.5, 1.0], [3.0, 4.0]],]",
            "outputs": "[32.3, 42.2]"
        },
        "completions": [
            "return tf.tensordot(in1, in2, axes=1)",
            "return tf.reduce_sum(tf.multiply(in2, tf.expand_dims(in1, 1)), axis=1)",
            "return tf.reduce_sum(tf.multiply(in1, in2), axis=1)",
            "return tf.tensordot(in1, in2, 1)",
            "return tf.reduce_sum(tf.multiply(in1, in2), axis=1)\n",
            "return tf.reduce_sum(tf.multiply(in2, tf.expand_dims(in1, 1)), axis=1)",
            "return tf.reduce_sum(tf.multiply(in2, in1), axis=1)\n",
            "output = tf.tensordot(tf.expand_dims(in1, 0), in2, axes=1)\nreturn output[0]\n",
            "return tf.squeeze(tf.matmul(tf.expand_dims(in1, 1), in2), -1)\n",
            "result = tf.tensordot(in1, in2, axes=1)\n",
            "return tf.tensordot(in2, in1, axes=1)",
            "return tf.tensordot(in2, in1, 1)\n",
            "return tf.reduce_sum(tf.multiply(in2, tf.expand_dims(in1, 1)), axis=1)",
            "return tf.matmul(in2, tf.expand_dims(in1, 1))",
            "return tf.matmul(tf.expand_dims(in1, 0), in2)[0]\n",
            "out = tf.matmul(tf.expand_dims(in1, axis=0), in2)\nreturn out[0]\n",
            "return tf.tensordot(in1, in2, axes=1)",
            "return tf.reduce_sum(tf.multiply(in2, tf.expand_dims(in1, 1)), axis=1)",
            "return tf.reduce_sum(in1 * in2, axis=1)\n",
            "return tf.tensordot(in1, in2, axes=1)"
        ],
        "tf_operators": {
            "tf.tensordot": 8,
            "tf.expand_dims": 9,
            "tf.reduce_sum": 8,
            "tf.multiply": 7,
            "tf.squeeze": 1,
            "tf.matmul": 4
        },
        "coverage_percentage": 33.33333333333333,
        "total_covered": 1,
        "total_in_target": 3,
        "parsed_constants": [
            [
                1
            ],
            [
                1,
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                1
            ],
            [
                1
            ],
            [
                0,
                1,
                0
            ],
            [
                1,
                -1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                1
            ],
            [
                1
            ],
            [
                0,
                0
            ],
            [
                0,
                0
            ],
            [
                1
            ],
            [
                1,
                1
            ],
            [
                1
            ],
            [
                1
            ]
        ],
        "all_constants": [
            0,
            1,
            -1
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 40,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 29,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.00390625,
                "tf.add(x, y)": 0.00390625,
                "tf.add_n(inputs)": 0.00390625,
                "tf.argmax(input, axis)": 0.00390625,
                "tf.argmin(input, axis)": 0.00390625,
                "tf.argsort(values, axis, stable=True)": 0.00390625,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.00390625,
                "tf.boolean_mask(tensor, mask)": 0.00390625,
                "tf.broadcast_to(input, shape)": 0.00390625,
                "tf.cast(x, dtype)": 0.00390625,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.00390625,
                "tf.concat(values, axis)": 0.00390625,
                "tf.constant(value)": 0.00390625,
                "tf.constant(value, dtype)": 0.00390625,
                "tf.divide(x, y)": 0.00390625,
                "tf.equal(x, y)": 0.00390625,
                "tf.exp(x)": 0.00390625,
                "tf.expand_dims(input, axis)": 0.0390625,
                "tf.eye(num_rows)": 0.00390625,
                "tf.eye(num_rows, num_columns)": 0.00390625,
                "tf.eye(num_rows, dtype)": 0.00390625,
                "tf.fill(dims, value)": 0.00390625,
                "tf.gather(params, indices)": 0.00390625,
                "tf.gather(params, indices, axis, batch_dims)": 0.00390625,
                "tf.gather_nd(params, indices)": 0.00390625,
                "tf.gather_nd(params, indices, batch_dims)": 0.00390625,
                "tf.greater(x, y)": 0.00390625,
                "tf.greater_equal(x, y)": 0.00390625,
                "tf.math.bincount(arr)": 0.00390625,
                "tf.math.ceil(x)": 0.00390625,
                "tf.math.count_nonzero(input)": 0.00390625,
                "tf.math.count_nonzero(input, axis)": 0.00390625,
                "tf.math.cumsum(x, axis)": 0.00390625,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.00390625,
                "tf.math.divide_no_nan(x, y)": 0.00390625,
                "tf.math.floor(x)": 0.00390625,
                "tf.math.log(x)": 0.00390625,
                "tf.math.logical_and(x, y)": 0.00390625,
                "tf.math.logical_not(x)": 0.00390625,
                "tf.math.logical_or(x, y)": 0.00390625,
                "tf.math.logical_xor(x, y)": 0.00390625,
                "tf.math.negative(x)": 0.00390625,
                "tf.math.reciprocal(x)": 0.00390625,
                "tf.math.reciprocal_no_nan(x)": 0.00390625,
                "tf.math.segment_max(data, segment_ids)": 0.00390625,
                "tf.math.segment_mean(data, segment_ids)": 0.00390625,
                "tf.math.segment_min(data, segment_ids)": 0.00390625,
                "tf.math.segment_prod(data, segment_ids)": 0.00390625,
                "tf.math.segment_sum(data, segment_ids)": 0.00390625,
                "tf.math.squared_difference(x, y)": 0.00390625,
                "tf.math.top_k(input, k)": 0.00390625,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.00390625,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.00390625,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.00390625,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.00390625,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.00390625,
                "tf.matmul(a, b)": 0.01953125,
                "tf.maximum(x, y)": 0.00390625,
                "tf.minimum(x, y)": 0.00390625,
                "tf.multiply(x, y)": 0.03125,
                "tf.not_equal(x, y)": 0.00390625,
                "tf.one_hot(indices, depth)": 0.00390625,
                "tf.ones(shape)": 0.00390625,
                "tf.ones_like(input)": 0.00390625,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.00390625,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.00390625,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.00390625,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.00390625,
                "tf.range(start)": 0.00390625,
                "tf.range(start, limit, delta)": 0.00390625,
                "tf.reduce_any(input_tensor, axis)": 0.00390625,
                "tf.reduce_all(input_tensor, axis)": 0.00390625,
                "tf.reduce_max(input_tensor)": 0.00390625,
                "tf.reduce_max(input_tensor, axis)": 0.00390625,
                "tf.reduce_mean(input_tensor)": 0.00390625,
                "tf.reduce_mean(input_tensor, axis)": 0.00390625,
                "tf.reduce_min(input_tensor)": 0.00390625,
                "tf.reduce_min(input_tensor, axis)": 0.00390625,
                "tf.reduce_prod(input_tensor, axis)": 0.00390625,
                "tf.reduce_sum(input_tensor)": 0.00390625,
                "tf.reduce_sum(input_tensor, axis)": 0.00390625,
                "tf.repeat(input, repeats)": 0.00390625,
                "tf.repeat(input, repeats, axis)": 0.00390625,
                "tf.reshape(tensor, shape)": 0.00390625,
                "tf.reverse(tensor, axis)": 0.00390625,
                "tf.roll(input, shift, axis)": 0.00390625,
                "tf.round(x)": 0.00390625,
                "tf.scatter_nd(indices, updates, shape)": 0.00390625,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.00390625,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.00390625,
                "tf.sequence_mask(lengths)": 0.00390625,
                "tf.sequence_mask(lengths, maxlen)": 0.00390625,
                "tf.shape(input)": 0.00390625,
                "tf.sign(x)": 0.00390625,
                "tf.sort(values, axis)": 0.00390625,
                "tf.sort(values, axis, direction='DESCENDING')": 0.00390625,
                "tf.sqrt(x)": 0.00390625,
                "tf.square(x)": 0.00390625,
                "tf.squeeze(input)": 0.00390625,
                "tf.squeeze(input, axis)": 0.0078125,
                "tf.stack(values, axis)": 0.00390625,
                "tf.subtract(x, y)": 0.00390625,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.00390625,
                "tf.tensordot(a, b, axes)": 0.03515625,
                "tf.tile(input, multiples)": 0.00390625,
                "tf.transpose(a)": 0.00390625,
                "tf.transpose(a, perm)": 0.00390625,
                "tf.unique_with_counts(x)": 0.00390625,
                "tf.unstack(value, axis)": 0.00390625,
                "tf.where(condition)": 0.00390625,
                "tf.where(condition, x, y)": 0.00390625,
                "tf.zeros(shape)": 0.00390625,
                "tf.zeros_like(input)": 0.00390625,
                "tf.SparseTensor(indices, values, dense_shape)": 0.00390625,
                "tf.sparse.add(a, b)": 0.00390625,
                "tf.sparse.concat(axis, sp_inputs)": 0.00390625,
                "tf.sparse.expand_dims(sp_input, axis)": 0.00390625,
                "tf.sparse.from_dense(tensor)": 0.00390625,
                "tf.sparse.maximum(sp_a, sp_b)": 0.00390625,
                "tf.sparse.minimum(sp_a, sp_b)": 0.00390625,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.00390625,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.00390625,
                "tf.sparse.reset_shape(sp_input)": 0.00390625,
                "tf.sparse.reshape(sp_input, shape)": 0.00390625,
                "tf.sparse.retain(sp_input, to_retain)": 0.00390625,
                "tf.sparse.slice(sp_input, start, size)": 0.00390625,
                "tf.sparse.split(sp_input, num_split, axis)": 0.00390625,
                "tf.sparse.to_dense(sp_input)": 0.00390625,
                "tf.sparse.to_dense(sp_input, default_value)": 0.00390625,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.00390625,
                "tf.sparse.transpose(sp_input)": 0.00390625,
                "tf.sparse.transpose(sp_input, perm)": 0.00390625,
                "IndexingAxis1Operation": 0.00390625,
                "IndexingOperation": 0.015625,
                "PairCreationOperation": 0.00390625,
                "SingletonTupleCreationOperation": 0.00390625,
                "SlicingAxis0BothOperation": 0.00390625,
                "SlicingAxis0LeftOperation": 0.00390625,
                "SlicingAxis0RightOperation": 0.00390625,
                "SlicingAxis1BothOperation": 0.00390625,
                "SlicingAxis1LeftOperation": 0.00390625,
                "SlicingAxis1RightOperation": 0.00390625,
                "TripleCreationOperation": 0.00390625,
                "PROVIDED_CONSTANT_WEIGHT": 0.00390625,
                "COMMON_CONSTANT_WEIGHT": 0.1171875,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.00390625,
                "INPUT_VARIABLE_WEIGHT": 0.16015625,
                "AXIS_CONSTANT_WEIGHT": 0.00390625,
                "SHAPE_CONSTANT_WEIGHT": 0.00390625,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.00390625,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.00390625,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.00390625,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.00390625,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.00390625
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 8,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 5,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 6,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 5,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 8,
                "tf.pad(tensor, paddings, mode='REFLECT')": 8,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side='left')": 8,
                "tf.searchsorted(sorted_sequence, values, side='right')": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 8,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction='DESCENDING')": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 7,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 5,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 6,
                "PairCreationOperation": 8,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 3,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 3,
                "AXIS_CONSTANT_WEIGHT": 8,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "stackoverflow_23",
        "description": "place 1 at the indices in the input tensor",
        "target_program": "tf.cast(tf.reduce_max(tf.one_hot(in1, 9), axis=1), tf.int32)",
        "source": "https://stackoverflow.com/questions/53414433/tensorflow-tensor-binarization",
        "constants": "[]",
        "examples": {
            "inputs": "[[[0, 5, 2], [3, 1, 4], [5, 1, 5]],]",
            "outputs": "[[1, 0, 1, 0, 0, 1, 0, 0, 0],    [0, 1, 0, 1, 1, 0, 0, 0, 0],    [0, 1, 0, 0, 0, 1, 0, 0, 0]]"
        },
        "completions": [
            "indices = tf.where(in1)\nshape = tf.shape(in1, out_type=tf.dtypes.int64)\nreturn tf.scatter_nd(indices, tf.ones(tf.shape(indices)[0]), shape)\n",
            "indices = tf.where(tf.not_equal(in1, 0))\nupdates = tf.cast(tf.ones_like(indices[:, 0]), in1.dtype)\nreturn tf.tensor_scatter_nd_update(tf.zeros(tf.cast(tf.reduce_prod(tf.shape(in1)), tf.int64), dtype=in1.dtype), indices, updates)\n",
            "def transform(in1):\n    return tf.one_hot(in1, depth=9)\n",
            "return tf.one_hot(tf.cast(tf.cast(in1, tf.int64), tf.int32), depth=9)\n",
            "indices = tf.cast(tf.where(in1)[:, 1], tf.int64)\nupdates = tf.ones(tf.shape(indices)[0], dtype=tf.int64)\nreturn tf.scatter_nd(indices, updates, shape=(tf.shape(in1)[1],))\n",
            "def transform(in1):\n    return tf.one_hot(in1, depth=9)\n",
            "output = tf.one_hot(in1, tf.reduce_max(in1) + 1)\nreturn output\n",
            "indices = tf.where(in1)\nupdates = tf.ones([tf.shape(indices)[0]], dtype=tf.int32)\nreturn tf.scatter_nd(indices, updates, [3, 9])\n",
            "return tf.scatter_nd(tf.where(in1)[:, tf.newaxis], tf.where(in1)[:, tf.newaxis][:, 0], tf.shape(in1))\n",
            "indices = tf.where(in1)\nupdates = tf.ones(tf.shape(indices)[0], dtype=tf.int32)\nshape = tf.constant([in1.shape[0], in1.shape[1]+1])\nreturn tf.scatter_nd(indices, updates, shape)\n",
            "def transform(in1):\n    return tf.one_hot(tf.cast(in1, tf.int32), tf.reduce_max(in1)+1)\n",
            "indices = tf.where(in1)\nupdates = tf.ones(tf.shape(indices)[0])\nshape = tf.shape(in1, out_type=tf.int64)\nreturn tf.scatter_nd(indices, updates, shape)\n",
            "return tf.scatter_nd(tf.reshape(in1, [-1, 1]), tf.ones_like(tf.reshape(in1, [-1, 1])), [3, 9])",
            "return tf.one_hot(tf.cast(in1, tf.int32), depth=9)\n",
            "return tf.tensor_scatter_nd_update(tf.zeros([tf.reduce_max(in1) + 1, tf.shape(in1)[1]], tf.int32), tf.stack([tf.range(tf.shape(in1)[0])[:, tf.newaxis], in1], axis=1), tf.ones([tf.size(in1)], tf.int32))",
            "return tf.sparse.to_dense(tf.sparse.SparseTensor(tf.cast(in1, tf.int64, 1), tf.ones_like(in1), tf.shape(in1)))\n",
            "def transform(in1):\n    return tf.one_hot(in1, 6)\n",
            "updates = tf.ones_like(in1)\nreturn tf.tensor_scatter_nd_update(tf.zeros(tf.concat([tf.shape(in1)[0:1], [9]], axis=0), tf.int64), tf.reshape(in1, [-1, 1]), updates)\n",
            "indices = tf.where(in1)\nupdates = tf.ones_like(indices[:, 0])\nshape = tf.cast(tf.reduce_max(indices, axis=0) + 1, tf.int32)\nreturn tf.scatter_nd(indices, updates, shape)\n",
            "indices = tf.where(tf.not_equal(in1, 0))\nupdates = tf.ones(tf.shape(indices)[0], tf.int32)\nreturn tf.tensor_scatter_nd_update(tf.zeros(tf.cast(tf.reduce_max(in1) + 1, tf.int32), tf.int32), indices, updates)\n"
        ],
        "tf_operators": {
            "tf.where": 9,
            "tf.shape": 11,
            "tf.scatter_nd": 8,
            "tf.ones": 7,
            "tf.dtypes.int64": 1,
            "tf.tensor_scatter_nd_update": 4,
            "tf.not_equal": 2,
            "tf.ones_like": 5,
            "tf.int64": 6,
            "tf.cast": 8,
            "tf.reduce_prod": 1,
            "tf.zeros": 4,
            "tf.one_hot": 7,
            "tf.int32": 8,
            "tf.reduce_max": 5,
            "tf.newaxis": 2,
            "tf.constant": 1,
            "tf.reshape": 2,
            "tf.stack": 1,
            "tf.range": 1,
            "tf.size": 1,
            "tf.sparse.SparseTensor": 1,
            "tf.sparse.to_dense": 1,
            "tf.concat": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 4,
        "total_in_target": 4,
        "parsed_constants": [
            [
                0
            ],
            [
                0,
                0
            ],
            [
                9
            ],
            [
                9
            ],
            [
                1,
                0,
                1
            ],
            [
                9
            ],
            [
                1
            ],
            [
                0,
                3,
                9
            ],
            [
                0
            ],
            [
                0,
                0,
                1,
                1
            ],
            [
                1
            ],
            [
                0
            ],
            [
                -1,
                1,
                -1,
                1,
                3,
                9
            ],
            [
                9
            ],
            [
                1,
                1,
                0,
                1
            ],
            [
                1
            ],
            [
                6
            ],
            [
                0,
                1,
                9,
                0,
                -1,
                1
            ],
            [
                0,
                0,
                1
            ],
            [
                0,
                0,
                1
            ]
        ],
        "all_constants": [
            0,
            1,
            3,
            6,
            9,
            -1
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 5,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 1,
                "tf_bool": 0,
                "input_var": 7,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 1,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 2,
                "tf_bool": 0,
                "input_var": 7,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 1,
                "provided": 1,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 1,
                "tf_bool": 0,
                "input_var": 7,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 1,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 2,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 5,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 1,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 1,
                "tf_bool": 0,
                "input_var": 5,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 7,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 3,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 7,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 79,
            "shape": 2,
            "tf_bool": 0,
            "provided": 8,
            "common": 31,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 0,
            "tf_int64": 7,
            "tf_int32": 11
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.0024691358024691358,
                "tf.add(x, y)": 0.0024691358024691358,
                "tf.add_n(inputs)": 0.0024691358024691358,
                "tf.argmax(input, axis)": 0.0024691358024691358,
                "tf.argmin(input, axis)": 0.0024691358024691358,
                "tf.argsort(values, axis, stable=True)": 0.0024691358024691358,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.0024691358024691358,
                "tf.boolean_mask(tensor, mask)": 0.0024691358024691358,
                "tf.broadcast_to(input, shape)": 0.0024691358024691358,
                "tf.cast(x, dtype)": 0.027160493827160494,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.0024691358024691358,
                "tf.concat(values, axis)": 0.0049382716049382715,
                "tf.constant(value)": 0.0049382716049382715,
                "tf.constant(value, dtype)": 0.0024691358024691358,
                "tf.divide(x, y)": 0.0024691358024691358,
                "tf.equal(x, y)": 0.0024691358024691358,
                "tf.exp(x)": 0.0024691358024691358,
                "tf.expand_dims(input, axis)": 0.0024691358024691358,
                "tf.eye(num_rows)": 0.0024691358024691358,
                "tf.eye(num_rows, num_columns)": 0.0024691358024691358,
                "tf.eye(num_rows, dtype)": 0.0024691358024691358,
                "tf.fill(dims, value)": 0.0024691358024691358,
                "tf.gather(params, indices)": 0.0024691358024691358,
                "tf.gather(params, indices, axis, batch_dims)": 0.0024691358024691358,
                "tf.gather_nd(params, indices)": 0.0024691358024691358,
                "tf.gather_nd(params, indices, batch_dims)": 0.0024691358024691358,
                "tf.greater(x, y)": 0.0024691358024691358,
                "tf.greater_equal(x, y)": 0.0024691358024691358,
                "tf.math.bincount(arr)": 0.0024691358024691358,
                "tf.math.ceil(x)": 0.0024691358024691358,
                "tf.math.count_nonzero(input)": 0.0024691358024691358,
                "tf.math.count_nonzero(input, axis)": 0.0024691358024691358,
                "tf.math.cumsum(x, axis)": 0.0024691358024691358,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.0024691358024691358,
                "tf.math.divide_no_nan(x, y)": 0.0024691358024691358,
                "tf.math.floor(x)": 0.0024691358024691358,
                "tf.math.log(x)": 0.0024691358024691358,
                "tf.math.logical_and(x, y)": 0.0024691358024691358,
                "tf.math.logical_not(x)": 0.0024691358024691358,
                "tf.math.logical_or(x, y)": 0.0024691358024691358,
                "tf.math.logical_xor(x, y)": 0.0024691358024691358,
                "tf.math.negative(x)": 0.0024691358024691358,
                "tf.math.reciprocal(x)": 0.0024691358024691358,
                "tf.math.reciprocal_no_nan(x)": 0.0024691358024691358,
                "tf.math.segment_max(data, segment_ids)": 0.0024691358024691358,
                "tf.math.segment_mean(data, segment_ids)": 0.0024691358024691358,
                "tf.math.segment_min(data, segment_ids)": 0.0024691358024691358,
                "tf.math.segment_prod(data, segment_ids)": 0.0024691358024691358,
                "tf.math.segment_sum(data, segment_ids)": 0.0024691358024691358,
                "tf.math.squared_difference(x, y)": 0.0024691358024691358,
                "tf.math.top_k(input, k)": 0.0024691358024691358,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.0024691358024691358,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.0024691358024691358,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.0024691358024691358,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.0024691358024691358,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.0024691358024691358,
                "tf.matmul(a, b)": 0.0024691358024691358,
                "tf.maximum(x, y)": 0.0024691358024691358,
                "tf.minimum(x, y)": 0.0024691358024691358,
                "tf.multiply(x, y)": 0.0024691358024691358,
                "tf.not_equal(x, y)": 0.007407407407407408,
                "tf.one_hot(indices, depth)": 0.019753086419753086,
                "tf.ones(shape)": 0.019753086419753086,
                "tf.ones_like(input)": 0.014814814814814815,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.0024691358024691358,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.0024691358024691358,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.0024691358024691358,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.0024691358024691358,
                "tf.range(start)": 0.0049382716049382715,
                "tf.range(start, limit, delta)": 0.0024691358024691358,
                "tf.reduce_any(input_tensor, axis)": 0.0024691358024691358,
                "tf.reduce_all(input_tensor, axis)": 0.0024691358024691358,
                "tf.reduce_max(input_tensor)": 0.012345679012345678,
                "tf.reduce_max(input_tensor, axis)": 0.0024691358024691358,
                "tf.reduce_mean(input_tensor)": 0.0024691358024691358,
                "tf.reduce_mean(input_tensor, axis)": 0.0024691358024691358,
                "tf.reduce_min(input_tensor)": 0.0024691358024691358,
                "tf.reduce_min(input_tensor, axis)": 0.0024691358024691358,
                "tf.reduce_prod(input_tensor, axis)": 0.0049382716049382715,
                "tf.reduce_sum(input_tensor)": 0.0024691358024691358,
                "tf.reduce_sum(input_tensor, axis)": 0.0024691358024691358,
                "tf.repeat(input, repeats)": 0.0024691358024691358,
                "tf.repeat(input, repeats, axis)": 0.0024691358024691358,
                "tf.reshape(tensor, shape)": 0.009876543209876543,
                "tf.reverse(tensor, axis)": 0.0024691358024691358,
                "tf.roll(input, shift, axis)": 0.0024691358024691358,
                "tf.round(x)": 0.0024691358024691358,
                "tf.scatter_nd(indices, updates, shape)": 0.022222222222222223,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.0024691358024691358,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.0024691358024691358,
                "tf.sequence_mask(lengths)": 0.0024691358024691358,
                "tf.sequence_mask(lengths, maxlen)": 0.0024691358024691358,
                "tf.shape(input)": 0.03950617283950617,
                "tf.sign(x)": 0.0024691358024691358,
                "tf.sort(values, axis)": 0.0024691358024691358,
                "tf.sort(values, axis, direction='DESCENDING')": 0.0024691358024691358,
                "tf.sqrt(x)": 0.0024691358024691358,
                "tf.square(x)": 0.0024691358024691358,
                "tf.squeeze(input)": 0.0024691358024691358,
                "tf.squeeze(input, axis)": 0.0024691358024691358,
                "tf.stack(values, axis)": 0.0049382716049382715,
                "tf.subtract(x, y)": 0.0024691358024691358,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.012345679012345678,
                "tf.tensordot(a, b, axes)": 0.0024691358024691358,
                "tf.tile(input, multiples)": 0.0024691358024691358,
                "tf.transpose(a)": 0.0024691358024691358,
                "tf.transpose(a, perm)": 0.0024691358024691358,
                "tf.unique_with_counts(x)": 0.0024691358024691358,
                "tf.unstack(value, axis)": 0.0024691358024691358,
                "tf.where(condition)": 0.027160493827160494,
                "tf.where(condition, x, y)": 0.0024691358024691358,
                "tf.zeros(shape)": 0.012345679012345678,
                "tf.zeros_like(input)": 0.0024691358024691358,
                "tf.SparseTensor(indices, values, dense_shape)": 0.0024691358024691358,
                "tf.sparse.add(a, b)": 0.0024691358024691358,
                "tf.sparse.concat(axis, sp_inputs)": 0.0024691358024691358,
                "tf.sparse.expand_dims(sp_input, axis)": 0.0024691358024691358,
                "tf.sparse.from_dense(tensor)": 0.0024691358024691358,
                "tf.sparse.maximum(sp_a, sp_b)": 0.0024691358024691358,
                "tf.sparse.minimum(sp_a, sp_b)": 0.0024691358024691358,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.0024691358024691358,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.0024691358024691358,
                "tf.sparse.reset_shape(sp_input)": 0.0024691358024691358,
                "tf.sparse.reshape(sp_input, shape)": 0.0024691358024691358,
                "tf.sparse.retain(sp_input, to_retain)": 0.0024691358024691358,
                "tf.sparse.slice(sp_input, start, size)": 0.0024691358024691358,
                "tf.sparse.split(sp_input, num_split, axis)": 0.0024691358024691358,
                "tf.sparse.to_dense(sp_input)": 0.0049382716049382715,
                "tf.sparse.to_dense(sp_input, default_value)": 0.0024691358024691358,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.0024691358024691358,
                "tf.sparse.transpose(sp_input)": 0.0024691358024691358,
                "tf.sparse.transpose(sp_input, perm)": 0.0024691358024691358,
                "IndexingAxis1Operation": 0.019753086419753086,
                "IndexingOperation": 0.02962962962962963,
                "PairCreationOperation": 0.019753086419753086,
                "SingletonTupleCreationOperation": 0.0049382716049382715,
                "SlicingAxis0BothOperation": 0.0049382716049382715,
                "SlicingAxis0LeftOperation": 0.0024691358024691358,
                "SlicingAxis0RightOperation": 0.0024691358024691358,
                "SlicingAxis1BothOperation": 0.0024691358024691358,
                "SlicingAxis1LeftOperation": 0.0024691358024691358,
                "SlicingAxis1RightOperation": 0.0024691358024691358,
                "TripleCreationOperation": 0.0024691358024691358,
                "PROVIDED_CONSTANT_WEIGHT": 0.022222222222222223,
                "COMMON_CONSTANT_WEIGHT": 0.07901234567901234,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.0024691358024691358,
                "INPUT_VARIABLE_WEIGHT": 0.19753086419753085,
                "AXIS_CONSTANT_WEIGHT": 0.0024691358024691358,
                "SHAPE_CONSTANT_WEIGHT": 0.007407407407407408,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.0024691358024691358,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.02962962962962963,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.0024691358024691358,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.0024691358024691358,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.019753086419753086
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 9,
                "tf.add(x, y)": 9,
                "tf.add_n(inputs)": 9,
                "tf.argmax(input, axis)": 9,
                "tf.argmin(input, axis)": 9,
                "tf.argsort(values, axis, stable=True)": 9,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 9,
                "tf.boolean_mask(tensor, mask)": 9,
                "tf.broadcast_to(input, shape)": 9,
                "tf.cast(x, dtype)": 5,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 9,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 9,
                "tf.divide(x, y)": 9,
                "tf.equal(x, y)": 9,
                "tf.exp(x)": 9,
                "tf.expand_dims(input, axis)": 9,
                "tf.eye(num_rows)": 9,
                "tf.eye(num_rows, num_columns)": 9,
                "tf.eye(num_rows, dtype)": 9,
                "tf.fill(dims, value)": 9,
                "tf.gather(params, indices)": 9,
                "tf.gather(params, indices, axis, batch_dims)": 9,
                "tf.gather_nd(params, indices)": 9,
                "tf.gather_nd(params, indices, batch_dims)": 9,
                "tf.greater(x, y)": 9,
                "tf.greater_equal(x, y)": 9,
                "tf.math.bincount(arr)": 9,
                "tf.math.ceil(x)": 9,
                "tf.math.count_nonzero(input)": 9,
                "tf.math.count_nonzero(input, axis)": 9,
                "tf.math.cumsum(x, axis)": 9,
                "tf.math.cumsum(x, axis, exclusive=True)": 9,
                "tf.math.divide_no_nan(x, y)": 9,
                "tf.math.floor(x)": 9,
                "tf.math.log(x)": 9,
                "tf.math.logical_and(x, y)": 9,
                "tf.math.logical_not(x)": 9,
                "tf.math.logical_or(x, y)": 9,
                "tf.math.logical_xor(x, y)": 9,
                "tf.math.negative(x)": 9,
                "tf.math.reciprocal(x)": 9,
                "tf.math.reciprocal_no_nan(x)": 9,
                "tf.math.segment_max(data, segment_ids)": 9,
                "tf.math.segment_mean(data, segment_ids)": 9,
                "tf.math.segment_min(data, segment_ids)": 9,
                "tf.math.segment_prod(data, segment_ids)": 9,
                "tf.math.segment_sum(data, segment_ids)": 9,
                "tf.math.squared_difference(x, y)": 9,
                "tf.math.top_k(input, k)": 9,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 9,
                "tf.matmul(a, b)": 9,
                "tf.maximum(x, y)": 9,
                "tf.minimum(x, y)": 9,
                "tf.multiply(x, y)": 9,
                "tf.not_equal(x, y)": 7,
                "tf.one_hot(indices, depth)": 6,
                "tf.ones(shape)": 6,
                "tf.ones_like(input)": 6,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 9,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 9,
                "tf.pad(tensor, paddings, mode='REFLECT')": 9,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 9,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 9,
                "tf.reduce_any(input_tensor, axis)": 9,
                "tf.reduce_all(input_tensor, axis)": 9,
                "tf.reduce_max(input_tensor)": 6,
                "tf.reduce_max(input_tensor, axis)": 9,
                "tf.reduce_mean(input_tensor)": 9,
                "tf.reduce_mean(input_tensor, axis)": 9,
                "tf.reduce_min(input_tensor)": 9,
                "tf.reduce_min(input_tensor, axis)": 9,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 9,
                "tf.reduce_sum(input_tensor, axis)": 9,
                "tf.repeat(input, repeats)": 9,
                "tf.repeat(input, repeats, axis)": 9,
                "tf.reshape(tensor, shape)": 7,
                "tf.reverse(tensor, axis)": 9,
                "tf.roll(input, shift, axis)": 9,
                "tf.round(x)": 9,
                "tf.scatter_nd(indices, updates, shape)": 5,
                "tf.searchsorted(sorted_sequence, values, side='left')": 9,
                "tf.searchsorted(sorted_sequence, values, side='right')": 9,
                "tf.sequence_mask(lengths)": 9,
                "tf.sequence_mask(lengths, maxlen)": 9,
                "tf.shape(input)": 5,
                "tf.sign(x)": 9,
                "tf.sort(values, axis)": 9,
                "tf.sort(values, axis, direction='DESCENDING')": 9,
                "tf.sqrt(x)": 9,
                "tf.square(x)": 9,
                "tf.squeeze(input)": 9,
                "tf.squeeze(input, axis)": 9,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 9,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 6,
                "tf.tensordot(a, b, axes)": 9,
                "tf.tile(input, multiples)": 9,
                "tf.transpose(a)": 9,
                "tf.transpose(a, perm)": 9,
                "tf.unique_with_counts(x)": 9,
                "tf.unstack(value, axis)": 9,
                "tf.where(condition)": 5,
                "tf.where(condition, x, y)": 9,
                "tf.zeros(shape)": 6,
                "tf.zeros_like(input)": 9,
                "tf.SparseTensor(indices, values, dense_shape)": 9,
                "tf.sparse.add(a, b)": 9,
                "tf.sparse.concat(axis, sp_inputs)": 9,
                "tf.sparse.expand_dims(sp_input, axis)": 9,
                "tf.sparse.from_dense(tensor)": 9,
                "tf.sparse.maximum(sp_a, sp_b)": 9,
                "tf.sparse.minimum(sp_a, sp_b)": 9,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 9,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 9,
                "tf.sparse.reset_shape(sp_input)": 9,
                "tf.sparse.reshape(sp_input, shape)": 9,
                "tf.sparse.retain(sp_input, to_retain)": 9,
                "tf.sparse.slice(sp_input, start, size)": 9,
                "tf.sparse.split(sp_input, num_split, axis)": 9,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 9,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 9,
                "tf.sparse.transpose(sp_input)": 9,
                "tf.sparse.transpose(sp_input, perm)": 9,
                "IndexingAxis1Operation": 6,
                "IndexingOperation": 5,
                "PairCreationOperation": 6,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 9,
                "SlicingAxis0RightOperation": 9,
                "SlicingAxis1BothOperation": 9,
                "SlicingAxis1LeftOperation": 9,
                "SlicingAxis1RightOperation": 9,
                "TripleCreationOperation": 9,
                "PROVIDED_CONSTANT_WEIGHT": 5,
                "COMMON_CONSTANT_WEIGHT": 4,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 9,
                "INPUT_VARIABLE_WEIGHT": 2,
                "AXIS_CONSTANT_WEIGHT": 9,
                "SHAPE_CONSTANT_WEIGHT": 7,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 5,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 6
            }
        }
    },
    {
        "name": "stackoverflow_24",
        "description": "(\\'like tf.divide(), but when dividing by 0, return the numerator\\')",
        "target_program": "tf.where(tf.cast(in2, tf.bool), x=tf.divide(in1, in2), y=in1)",
        "source": "https://stackoverflow.com/questions/53643339/tensorflow-overriding-tf-divide-to-return-the-numerator-when-dividing-by-0",
        "constants": "[0]",
        "examples": {
            "inputs": "[[3.0, 1.0, 4.0, 5.0, 2.0, 8.0, -6.0, -7.0],[0.5, 0.0, -2.0, 0.0, 1.0, -1.0, 0.0, 2.0],]",
            "outputs": "[6.0, 1.0, -2.0, 5.0, 2.0, -8.0, -6.0, -3.5]"
        },
        "completions": [
            "return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))",
            "return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))",
            "return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, tf.maximum(in2, 1.0)))",
            "return tf.math.divide_no_nan(in1, in2)",
            "return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))",
            "return tf.divide_no_nan(in1, in2)",
            "return tf.divide_no_nan(in1, in2)",
            "return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n",
            "result = tf.divide(in1, in2)\nresult = tf.where(tf.equal(in2, 0), in1, result)\nreturn result\n",
            "return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, tf.abs(in2)))\n",
            "return tf.math.divide_no_nan(in1, in2)",
            "return tf.math.divide_no_nan(in1, in2)",
            "return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n",
            "return tf.math.divide_no_nan(in1, in2)\n",
            "return tf.math.divide_no_nan(in1, in2)\n",
            "return tf.math.divide_no_nan(in1, in2)",
            "return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))",
            "return tf.math.divide_no_nan(in1, in2)",
            "return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))",
            "return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n"
        ],
        "tf_operators": {
            "tf.where": 11,
            "tf.divide": 11,
            "tf.equal": 11,
            "tf.maximum": 1,
            "tf.math.divide_no_nan": 7,
            "tf.divide_no_nan": 2,
            "tf.abs": 1
        },
        "coverage_percentage": 50.0,
        "total_covered": 2,
        "total_in_target": 4,
        "parsed_constants": [
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [],
            [
                0
            ],
            [],
            [],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [],
            [],
            [
                0
            ],
            [],
            [],
            [],
            [
                0
            ],
            [],
            [
                0
            ],
            [
                0
            ]
        ],
        "all_constants": [
            0
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 62,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 11,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.007407407407407408,
                "tf.add(x, y)": 0.003703703703703704,
                "tf.add_n(inputs)": 0.003703703703703704,
                "tf.argmax(input, axis)": 0.003703703703703704,
                "tf.argmin(input, axis)": 0.003703703703703704,
                "tf.argsort(values, axis, stable=True)": 0.003703703703703704,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.003703703703703704,
                "tf.boolean_mask(tensor, mask)": 0.003703703703703704,
                "tf.broadcast_to(input, shape)": 0.003703703703703704,
                "tf.cast(x, dtype)": 0.003703703703703704,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.003703703703703704,
                "tf.concat(values, axis)": 0.003703703703703704,
                "tf.constant(value)": 0.003703703703703704,
                "tf.constant(value, dtype)": 0.003703703703703704,
                "tf.divide(x, y)": 0.044444444444444446,
                "tf.equal(x, y)": 0.044444444444444446,
                "tf.exp(x)": 0.003703703703703704,
                "tf.expand_dims(input, axis)": 0.003703703703703704,
                "tf.eye(num_rows)": 0.003703703703703704,
                "tf.eye(num_rows, num_columns)": 0.003703703703703704,
                "tf.eye(num_rows, dtype)": 0.003703703703703704,
                "tf.fill(dims, value)": 0.003703703703703704,
                "tf.gather(params, indices)": 0.003703703703703704,
                "tf.gather(params, indices, axis, batch_dims)": 0.003703703703703704,
                "tf.gather_nd(params, indices)": 0.003703703703703704,
                "tf.gather_nd(params, indices, batch_dims)": 0.003703703703703704,
                "tf.greater(x, y)": 0.003703703703703704,
                "tf.greater_equal(x, y)": 0.003703703703703704,
                "tf.math.bincount(arr)": 0.003703703703703704,
                "tf.math.ceil(x)": 0.003703703703703704,
                "tf.math.count_nonzero(input)": 0.003703703703703704,
                "tf.math.count_nonzero(input, axis)": 0.003703703703703704,
                "tf.math.cumsum(x, axis)": 0.003703703703703704,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.003703703703703704,
                "tf.math.divide_no_nan(x, y)": 0.02962962962962963,
                "tf.math.floor(x)": 0.003703703703703704,
                "tf.math.log(x)": 0.003703703703703704,
                "tf.math.logical_and(x, y)": 0.003703703703703704,
                "tf.math.logical_not(x)": 0.003703703703703704,
                "tf.math.logical_or(x, y)": 0.003703703703703704,
                "tf.math.logical_xor(x, y)": 0.003703703703703704,
                "tf.math.negative(x)": 0.003703703703703704,
                "tf.math.reciprocal(x)": 0.003703703703703704,
                "tf.math.reciprocal_no_nan(x)": 0.003703703703703704,
                "tf.math.segment_max(data, segment_ids)": 0.003703703703703704,
                "tf.math.segment_mean(data, segment_ids)": 0.003703703703703704,
                "tf.math.segment_min(data, segment_ids)": 0.003703703703703704,
                "tf.math.segment_prod(data, segment_ids)": 0.003703703703703704,
                "tf.math.segment_sum(data, segment_ids)": 0.003703703703703704,
                "tf.math.squared_difference(x, y)": 0.003703703703703704,
                "tf.math.top_k(input, k)": 0.003703703703703704,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.003703703703703704,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.003703703703703704,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.003703703703703704,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.003703703703703704,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.003703703703703704,
                "tf.matmul(a, b)": 0.003703703703703704,
                "tf.maximum(x, y)": 0.007407407407407408,
                "tf.minimum(x, y)": 0.003703703703703704,
                "tf.multiply(x, y)": 0.003703703703703704,
                "tf.not_equal(x, y)": 0.003703703703703704,
                "tf.one_hot(indices, depth)": 0.003703703703703704,
                "tf.ones(shape)": 0.003703703703703704,
                "tf.ones_like(input)": 0.003703703703703704,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.003703703703703704,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.003703703703703704,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.003703703703703704,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.003703703703703704,
                "tf.range(start)": 0.003703703703703704,
                "tf.range(start, limit, delta)": 0.003703703703703704,
                "tf.reduce_any(input_tensor, axis)": 0.003703703703703704,
                "tf.reduce_all(input_tensor, axis)": 0.003703703703703704,
                "tf.reduce_max(input_tensor)": 0.003703703703703704,
                "tf.reduce_max(input_tensor, axis)": 0.003703703703703704,
                "tf.reduce_mean(input_tensor)": 0.003703703703703704,
                "tf.reduce_mean(input_tensor, axis)": 0.003703703703703704,
                "tf.reduce_min(input_tensor)": 0.003703703703703704,
                "tf.reduce_min(input_tensor, axis)": 0.003703703703703704,
                "tf.reduce_prod(input_tensor, axis)": 0.003703703703703704,
                "tf.reduce_sum(input_tensor)": 0.003703703703703704,
                "tf.reduce_sum(input_tensor, axis)": 0.003703703703703704,
                "tf.repeat(input, repeats)": 0.003703703703703704,
                "tf.repeat(input, repeats, axis)": 0.003703703703703704,
                "tf.reshape(tensor, shape)": 0.003703703703703704,
                "tf.reverse(tensor, axis)": 0.003703703703703704,
                "tf.roll(input, shift, axis)": 0.003703703703703704,
                "tf.round(x)": 0.003703703703703704,
                "tf.scatter_nd(indices, updates, shape)": 0.003703703703703704,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.003703703703703704,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.003703703703703704,
                "tf.sequence_mask(lengths)": 0.003703703703703704,
                "tf.sequence_mask(lengths, maxlen)": 0.003703703703703704,
                "tf.shape(input)": 0.003703703703703704,
                "tf.sign(x)": 0.003703703703703704,
                "tf.sort(values, axis)": 0.003703703703703704,
                "tf.sort(values, axis, direction='DESCENDING')": 0.003703703703703704,
                "tf.sqrt(x)": 0.003703703703703704,
                "tf.square(x)": 0.003703703703703704,
                "tf.squeeze(input)": 0.003703703703703704,
                "tf.squeeze(input, axis)": 0.003703703703703704,
                "tf.stack(values, axis)": 0.003703703703703704,
                "tf.subtract(x, y)": 0.003703703703703704,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.003703703703703704,
                "tf.tensordot(a, b, axes)": 0.003703703703703704,
                "tf.tile(input, multiples)": 0.003703703703703704,
                "tf.transpose(a)": 0.003703703703703704,
                "tf.transpose(a, perm)": 0.003703703703703704,
                "tf.unique_with_counts(x)": 0.003703703703703704,
                "tf.unstack(value, axis)": 0.003703703703703704,
                "tf.where(condition)": 0.003703703703703704,
                "tf.where(condition, x, y)": 0.044444444444444446,
                "tf.zeros(shape)": 0.003703703703703704,
                "tf.zeros_like(input)": 0.003703703703703704,
                "tf.SparseTensor(indices, values, dense_shape)": 0.003703703703703704,
                "tf.sparse.add(a, b)": 0.003703703703703704,
                "tf.sparse.concat(axis, sp_inputs)": 0.003703703703703704,
                "tf.sparse.expand_dims(sp_input, axis)": 0.003703703703703704,
                "tf.sparse.from_dense(tensor)": 0.003703703703703704,
                "tf.sparse.maximum(sp_a, sp_b)": 0.003703703703703704,
                "tf.sparse.minimum(sp_a, sp_b)": 0.003703703703703704,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.003703703703703704,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.003703703703703704,
                "tf.sparse.reset_shape(sp_input)": 0.003703703703703704,
                "tf.sparse.reshape(sp_input, shape)": 0.003703703703703704,
                "tf.sparse.retain(sp_input, to_retain)": 0.003703703703703704,
                "tf.sparse.slice(sp_input, start, size)": 0.003703703703703704,
                "tf.sparse.split(sp_input, num_split, axis)": 0.003703703703703704,
                "tf.sparse.to_dense(sp_input)": 0.003703703703703704,
                "tf.sparse.to_dense(sp_input, default_value)": 0.003703703703703704,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.003703703703703704,
                "tf.sparse.transpose(sp_input)": 0.003703703703703704,
                "tf.sparse.transpose(sp_input, perm)": 0.003703703703703704,
                "IndexingAxis1Operation": 0.003703703703703704,
                "IndexingOperation": 0.003703703703703704,
                "PairCreationOperation": 0.003703703703703704,
                "SingletonTupleCreationOperation": 0.003703703703703704,
                "SlicingAxis0BothOperation": 0.003703703703703704,
                "SlicingAxis0LeftOperation": 0.003703703703703704,
                "SlicingAxis0RightOperation": 0.003703703703703704,
                "SlicingAxis1BothOperation": 0.003703703703703704,
                "SlicingAxis1LeftOperation": 0.003703703703703704,
                "SlicingAxis1RightOperation": 0.003703703703703704,
                "TripleCreationOperation": 0.003703703703703704,
                "PROVIDED_CONSTANT_WEIGHT": 0.003703703703703704,
                "COMMON_CONSTANT_WEIGHT": 0.044444444444444446,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.003703703703703704,
                "INPUT_VARIABLE_WEIGHT": 0.23333333333333334,
                "AXIS_CONSTANT_WEIGHT": 0.003703703703703704,
                "SHAPE_CONSTANT_WEIGHT": 0.003703703703703704,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.003703703703703704,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.003703703703703704,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.003703703703703704,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.003703703703703704,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.003703703703703704
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 7,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 8,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 4,
                "tf.equal(x, y)": 4,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 8,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 5,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 7,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 8,
                "tf.pad(tensor, paddings, mode='REFLECT')": 8,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side='left')": 8,
                "tf.searchsorted(sorted_sequence, values, side='right')": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 8,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction='DESCENDING')": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 4,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 8,
                "PairCreationOperation": 8,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 4,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 2,
                "AXIS_CONSTANT_WEIGHT": 8,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "stackoverflow_25",
        "description": "copy the tensor tf.eye(3), 4 times",
        "target_program": "tf.tile(tf.eye(in1), (in2, 1))",
        "source": "https://stackoverflow.com/questions/53602691/duplicate-a-tensor-n-times",
        "constants": "[]",
        "examples": {
            "inputs": "[3,4,]",
            "outputs": "[[1.0, 0.0, 0.0],    [0.0, 1.0, 0.0],    [0.0, 0.0, 1.0],    [1.0, 0.0, 0.0],    [0.0, 1.0, 0.0],    [0.0, 0.0, 1.0],    [1.0, 0.0, 0.0],    [0.0, 1.0, 0.0],    [0.0, 0.0, 1.0],    [1.0, 0.0, 0.0],    [0.0, 1.0, 0.0],    [0.0, 0.0, 1.0]]"
        },
        "completions": [
            "return tf.repeat(tf.eye(in1), in2, axis=0)",
            "return tf.tile(tf.eye(in1), [in2, 1])\n",
            "return tf.tile(tf.eye(in1), [in2, 1])\n",
            "return tf.tile(tf.eye(in1), [in2, 1])\n",
            "return tf.tile(tf.eye(in1), [in2, 1])",
            "return tf.tile(tf.eye(in1, dtype=tf.float32), [in2, 1])\n",
            "return tf.tile(tf.eye(in1), [in2, 1])",
            "return tf.tile(tf.eye(in1), [in2])",
            "res = tf.tile(tf.eye(in1), [in2, 1])\nreturn res\n",
            "return tf.stack([tf.tile(tf.eye(in1), [in2, 1])], axis=0)\n",
            "return tf.tile(tf.eye(in1), [in2, 1])\n",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])\n",
            "return tf.tile(tf.eye(in1), [in2, 1])",
            "return tf.repeat(tf.eye(in1, dtype=tf.float32), in2, axis=0)\n",
            "return tf.tile(tf.eye(in1), multiples=[in2, 1])\n",
            "return tf.tile(tf.eye(in1), [in2, 1])\n",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])\n",
            "return tf.tile(tf.eye(in1), [in2, 1])",
            "return tf.tile(tf.eye(in1), [in2, 1])",
            "return tf.tile(tf.eye(in1, dtype=tf.float32), [in2, 1])\n"
        ],
        "tf_operators": {
            "tf.eye": 20,
            "tf.repeat": 2,
            "tf.tile": 18,
            "tf.float32": 3,
            "tf.stack": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 2,
        "total_in_target": 2,
        "parsed_constants": [
            [
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ]
        ],
        "all_constants": [
            0,
            1
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 40,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 20,
            "shape_tuple": 0,
            "tf_float32": 3,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.0038910505836575876,
                "tf.add(x, y)": 0.0038910505836575876,
                "tf.add_n(inputs)": 0.0038910505836575876,
                "tf.argmax(input, axis)": 0.0038910505836575876,
                "tf.argmin(input, axis)": 0.0038910505836575876,
                "tf.argsort(values, axis, stable=True)": 0.0038910505836575876,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.0038910505836575876,
                "tf.boolean_mask(tensor, mask)": 0.0038910505836575876,
                "tf.broadcast_to(input, shape)": 0.0038910505836575876,
                "tf.cast(x, dtype)": 0.0038910505836575876,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.0038910505836575876,
                "tf.concat(values, axis)": 0.0038910505836575876,
                "tf.constant(value)": 0.0038910505836575876,
                "tf.constant(value, dtype)": 0.0038910505836575876,
                "tf.divide(x, y)": 0.0038910505836575876,
                "tf.equal(x, y)": 0.0038910505836575876,
                "tf.exp(x)": 0.0038910505836575876,
                "tf.expand_dims(input, axis)": 0.0038910505836575876,
                "tf.eye(num_rows)": 0.07003891050583658,
                "tf.eye(num_rows, num_columns)": 0.0038910505836575876,
                "tf.eye(num_rows, dtype)": 0.01556420233463035,
                "tf.fill(dims, value)": 0.0038910505836575876,
                "tf.gather(params, indices)": 0.0038910505836575876,
                "tf.gather(params, indices, axis, batch_dims)": 0.0038910505836575876,
                "tf.gather_nd(params, indices)": 0.0038910505836575876,
                "tf.gather_nd(params, indices, batch_dims)": 0.0038910505836575876,
                "tf.greater(x, y)": 0.0038910505836575876,
                "tf.greater_equal(x, y)": 0.0038910505836575876,
                "tf.math.bincount(arr)": 0.0038910505836575876,
                "tf.math.ceil(x)": 0.0038910505836575876,
                "tf.math.count_nonzero(input)": 0.0038910505836575876,
                "tf.math.count_nonzero(input, axis)": 0.0038910505836575876,
                "tf.math.cumsum(x, axis)": 0.0038910505836575876,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.0038910505836575876,
                "tf.math.divide_no_nan(x, y)": 0.0038910505836575876,
                "tf.math.floor(x)": 0.0038910505836575876,
                "tf.math.log(x)": 0.0038910505836575876,
                "tf.math.logical_and(x, y)": 0.0038910505836575876,
                "tf.math.logical_not(x)": 0.0038910505836575876,
                "tf.math.logical_or(x, y)": 0.0038910505836575876,
                "tf.math.logical_xor(x, y)": 0.0038910505836575876,
                "tf.math.negative(x)": 0.0038910505836575876,
                "tf.math.reciprocal(x)": 0.0038910505836575876,
                "tf.math.reciprocal_no_nan(x)": 0.0038910505836575876,
                "tf.math.segment_max(data, segment_ids)": 0.0038910505836575876,
                "tf.math.segment_mean(data, segment_ids)": 0.0038910505836575876,
                "tf.math.segment_min(data, segment_ids)": 0.0038910505836575876,
                "tf.math.segment_prod(data, segment_ids)": 0.0038910505836575876,
                "tf.math.segment_sum(data, segment_ids)": 0.0038910505836575876,
                "tf.math.squared_difference(x, y)": 0.0038910505836575876,
                "tf.math.top_k(input, k)": 0.0038910505836575876,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.0038910505836575876,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.0038910505836575876,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.0038910505836575876,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.0038910505836575876,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.0038910505836575876,
                "tf.matmul(a, b)": 0.0038910505836575876,
                "tf.maximum(x, y)": 0.0038910505836575876,
                "tf.minimum(x, y)": 0.0038910505836575876,
                "tf.multiply(x, y)": 0.0038910505836575876,
                "tf.not_equal(x, y)": 0.0038910505836575876,
                "tf.one_hot(indices, depth)": 0.0038910505836575876,
                "tf.ones(shape)": 0.0038910505836575876,
                "tf.ones_like(input)": 0.0038910505836575876,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.0038910505836575876,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.0038910505836575876,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.0038910505836575876,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.0038910505836575876,
                "tf.range(start)": 0.0038910505836575876,
                "tf.range(start, limit, delta)": 0.0038910505836575876,
                "tf.reduce_any(input_tensor, axis)": 0.0038910505836575876,
                "tf.reduce_all(input_tensor, axis)": 0.0038910505836575876,
                "tf.reduce_max(input_tensor)": 0.0038910505836575876,
                "tf.reduce_max(input_tensor, axis)": 0.0038910505836575876,
                "tf.reduce_mean(input_tensor)": 0.0038910505836575876,
                "tf.reduce_mean(input_tensor, axis)": 0.0038910505836575876,
                "tf.reduce_min(input_tensor)": 0.0038910505836575876,
                "tf.reduce_min(input_tensor, axis)": 0.0038910505836575876,
                "tf.reduce_prod(input_tensor, axis)": 0.0038910505836575876,
                "tf.reduce_sum(input_tensor)": 0.0038910505836575876,
                "tf.reduce_sum(input_tensor, axis)": 0.0038910505836575876,
                "tf.repeat(input, repeats)": 0.0038910505836575876,
                "tf.repeat(input, repeats, axis)": 0.0038910505836575876,
                "tf.reshape(tensor, shape)": 0.0038910505836575876,
                "tf.reverse(tensor, axis)": 0.0038910505836575876,
                "tf.roll(input, shift, axis)": 0.0038910505836575876,
                "tf.round(x)": 0.0038910505836575876,
                "tf.scatter_nd(indices, updates, shape)": 0.0038910505836575876,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.0038910505836575876,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.0038910505836575876,
                "tf.sequence_mask(lengths)": 0.0038910505836575876,
                "tf.sequence_mask(lengths, maxlen)": 0.0038910505836575876,
                "tf.shape(input)": 0.0038910505836575876,
                "tf.sign(x)": 0.0038910505836575876,
                "tf.sort(values, axis)": 0.0038910505836575876,
                "tf.sort(values, axis, direction='DESCENDING')": 0.0038910505836575876,
                "tf.sqrt(x)": 0.0038910505836575876,
                "tf.square(x)": 0.0038910505836575876,
                "tf.squeeze(input)": 0.0038910505836575876,
                "tf.squeeze(input, axis)": 0.0038910505836575876,
                "tf.stack(values, axis)": 0.007782101167315175,
                "tf.subtract(x, y)": 0.0038910505836575876,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.0038910505836575876,
                "tf.tensordot(a, b, axes)": 0.0038910505836575876,
                "tf.tile(input, multiples)": 0.07392996108949416,
                "tf.transpose(a)": 0.0038910505836575876,
                "tf.transpose(a, perm)": 0.0038910505836575876,
                "tf.unique_with_counts(x)": 0.0038910505836575876,
                "tf.unstack(value, axis)": 0.0038910505836575876,
                "tf.where(condition)": 0.0038910505836575876,
                "tf.where(condition, x, y)": 0.0038910505836575876,
                "tf.zeros(shape)": 0.0038910505836575876,
                "tf.zeros_like(input)": 0.0038910505836575876,
                "tf.SparseTensor(indices, values, dense_shape)": 0.0038910505836575876,
                "tf.sparse.add(a, b)": 0.0038910505836575876,
                "tf.sparse.concat(axis, sp_inputs)": 0.0038910505836575876,
                "tf.sparse.expand_dims(sp_input, axis)": 0.0038910505836575876,
                "tf.sparse.from_dense(tensor)": 0.0038910505836575876,
                "tf.sparse.maximum(sp_a, sp_b)": 0.0038910505836575876,
                "tf.sparse.minimum(sp_a, sp_b)": 0.0038910505836575876,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.0038910505836575876,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.0038910505836575876,
                "tf.sparse.reset_shape(sp_input)": 0.0038910505836575876,
                "tf.sparse.reshape(sp_input, shape)": 0.0038910505836575876,
                "tf.sparse.retain(sp_input, to_retain)": 0.0038910505836575876,
                "tf.sparse.slice(sp_input, start, size)": 0.0038910505836575876,
                "tf.sparse.split(sp_input, num_split, axis)": 0.0038910505836575876,
                "tf.sparse.to_dense(sp_input)": 0.0038910505836575876,
                "tf.sparse.to_dense(sp_input, default_value)": 0.0038910505836575876,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.0038910505836575876,
                "tf.sparse.transpose(sp_input)": 0.0038910505836575876,
                "tf.sparse.transpose(sp_input, perm)": 0.0038910505836575876,
                "IndexingAxis1Operation": 0.0038910505836575876,
                "IndexingOperation": 0.0038910505836575876,
                "PairCreationOperation": 0.0038910505836575876,
                "SingletonTupleCreationOperation": 0.0038910505836575876,
                "SlicingAxis0BothOperation": 0.0038910505836575876,
                "SlicingAxis0LeftOperation": 0.0038910505836575876,
                "SlicingAxis0RightOperation": 0.0038910505836575876,
                "SlicingAxis1BothOperation": 0.0038910505836575876,
                "SlicingAxis1LeftOperation": 0.0038910505836575876,
                "SlicingAxis1RightOperation": 0.0038910505836575876,
                "TripleCreationOperation": 0.0038910505836575876,
                "PROVIDED_CONSTANT_WEIGHT": 0.0038910505836575876,
                "COMMON_CONSTANT_WEIGHT": 0.08171206225680934,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.0038910505836575876,
                "INPUT_VARIABLE_WEIGHT": 0.15953307392996108,
                "AXIS_CONSTANT_WEIGHT": 0.0038910505836575876,
                "SHAPE_CONSTANT_WEIGHT": 0.0038910505836575876,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.0038910505836575876,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.0038910505836575876,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.01556420233463035,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.0038910505836575876,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.0038910505836575876
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 8,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 8,
                "tf.eye(num_rows)": 4,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 6,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 8,
                "tf.pad(tensor, paddings, mode='REFLECT')": 8,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side='left')": 8,
                "tf.searchsorted(sorted_sequence, values, side='right')": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 8,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction='DESCENDING')": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 7,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 4,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 8,
                "PairCreationOperation": 8,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 4,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 3,
                "AXIS_CONSTANT_WEIGHT": 8,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 6,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "stackoverflow_26",
        "description": "reduction operation for multiple dimensions simultaneously",
        "target_program": "tf.reduce_sum(tf.reduce_sum(in1, axis=1), axis=1)",
        "source": "https://stackoverflow.com/questions/54294780/how-to-perform-reduce-op-on-multiple-dimensions-at-once",
        "constants": "[]",
        "examples": {
            "inputs": "[[[[3, 4], [1, 2]], [[5, -2], [-10, 3]], [[10, 20], [-4, 7]]]]",
            "outputs": "[10, -4, 33]"
        },
        "completions": [
            "return tf.reduce_sum(in1, axis=[1, 2])\n",
            "return tf.reduce_sum(in1, axis=[1, 2])",
            "return tf.reduce_sum(in1, axis=[1, 2])\n",
            "result = tf.reduce_sum(in1, axis=(1, 2))\nreturn result\n",
            "return tf.reduce_sum(in1, axis=[1, 2])\n",
            "result = tf.reduce_sum(in1, axis=[1, 2])\nreturn result\n",
            "return tf.reduce_sum(in1, axis=[1, 2])\n",
            "return tf.reduce_sum(in1, axis=[1, 2])\n",
            "return tf.reduce_sum(in1, axis=[1,2])",
            "return tf.reduce_sum(in1, axis=[1, 2])\n",
            "return tf.reduce_sum(in1, axis=[1, 2])\n",
            "return tf.reduce_sum(in1, axis=[1, 2])",
            "return tf.reduce_sum(in1, axis=[1, 2])",
            "return tf.reduce_sum(in1, axis=[1, 2])\n",
            "return tf.reduce_sum(in1, axis=[1, 2])\n",
            "result = tf.reduce_sum(in1, axis=[1, 2])\nreturn result\n",
            "return tf.reduce_sum(in1, axis=(1, 2))\n",
            "result = tf.reduce_sum(in1, axis=[1, 2])\nreturn result\n",
            "return tf.reduce_sum(in1, axis=[1,2])\n",
            "return tf.reduce_sum(in1, axis=[1,2])\n"
        ],
        "tf_operators": {
            "tf.reduce_sum": 20
        },
        "coverage_percentage": 100.0,
        "total_covered": 1,
        "total_in_target": 1,
        "parsed_constants": [
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ]
        ],
        "all_constants": [
            1,
            2
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 20,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 18,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 18,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.004694835680751174,
                "tf.add(x, y)": 0.004694835680751174,
                "tf.add_n(inputs)": 0.004694835680751174,
                "tf.argmax(input, axis)": 0.004694835680751174,
                "tf.argmin(input, axis)": 0.004694835680751174,
                "tf.argsort(values, axis, stable=True)": 0.004694835680751174,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.004694835680751174,
                "tf.boolean_mask(tensor, mask)": 0.004694835680751174,
                "tf.broadcast_to(input, shape)": 0.004694835680751174,
                "tf.cast(x, dtype)": 0.004694835680751174,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.004694835680751174,
                "tf.concat(values, axis)": 0.004694835680751174,
                "tf.constant(value)": 0.004694835680751174,
                "tf.constant(value, dtype)": 0.004694835680751174,
                "tf.divide(x, y)": 0.004694835680751174,
                "tf.equal(x, y)": 0.004694835680751174,
                "tf.exp(x)": 0.004694835680751174,
                "tf.expand_dims(input, axis)": 0.004694835680751174,
                "tf.eye(num_rows)": 0.004694835680751174,
                "tf.eye(num_rows, num_columns)": 0.004694835680751174,
                "tf.eye(num_rows, dtype)": 0.004694835680751174,
                "tf.fill(dims, value)": 0.004694835680751174,
                "tf.gather(params, indices)": 0.004694835680751174,
                "tf.gather(params, indices, axis, batch_dims)": 0.004694835680751174,
                "tf.gather_nd(params, indices)": 0.004694835680751174,
                "tf.gather_nd(params, indices, batch_dims)": 0.004694835680751174,
                "tf.greater(x, y)": 0.004694835680751174,
                "tf.greater_equal(x, y)": 0.004694835680751174,
                "tf.math.bincount(arr)": 0.004694835680751174,
                "tf.math.ceil(x)": 0.004694835680751174,
                "tf.math.count_nonzero(input)": 0.004694835680751174,
                "tf.math.count_nonzero(input, axis)": 0.004694835680751174,
                "tf.math.cumsum(x, axis)": 0.004694835680751174,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.004694835680751174,
                "tf.math.divide_no_nan(x, y)": 0.004694835680751174,
                "tf.math.floor(x)": 0.004694835680751174,
                "tf.math.log(x)": 0.004694835680751174,
                "tf.math.logical_and(x, y)": 0.004694835680751174,
                "tf.math.logical_not(x)": 0.004694835680751174,
                "tf.math.logical_or(x, y)": 0.004694835680751174,
                "tf.math.logical_xor(x, y)": 0.004694835680751174,
                "tf.math.negative(x)": 0.004694835680751174,
                "tf.math.reciprocal(x)": 0.004694835680751174,
                "tf.math.reciprocal_no_nan(x)": 0.004694835680751174,
                "tf.math.segment_max(data, segment_ids)": 0.004694835680751174,
                "tf.math.segment_mean(data, segment_ids)": 0.004694835680751174,
                "tf.math.segment_min(data, segment_ids)": 0.004694835680751174,
                "tf.math.segment_prod(data, segment_ids)": 0.004694835680751174,
                "tf.math.segment_sum(data, segment_ids)": 0.004694835680751174,
                "tf.math.squared_difference(x, y)": 0.004694835680751174,
                "tf.math.top_k(input, k)": 0.004694835680751174,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.004694835680751174,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.004694835680751174,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.004694835680751174,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.004694835680751174,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.004694835680751174,
                "tf.matmul(a, b)": 0.004694835680751174,
                "tf.maximum(x, y)": 0.004694835680751174,
                "tf.minimum(x, y)": 0.004694835680751174,
                "tf.multiply(x, y)": 0.004694835680751174,
                "tf.not_equal(x, y)": 0.004694835680751174,
                "tf.one_hot(indices, depth)": 0.004694835680751174,
                "tf.ones(shape)": 0.004694835680751174,
                "tf.ones_like(input)": 0.004694835680751174,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.004694835680751174,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.004694835680751174,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.004694835680751174,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.004694835680751174,
                "tf.range(start)": 0.004694835680751174,
                "tf.range(start, limit, delta)": 0.004694835680751174,
                "tf.reduce_any(input_tensor, axis)": 0.004694835680751174,
                "tf.reduce_all(input_tensor, axis)": 0.004694835680751174,
                "tf.reduce_max(input_tensor)": 0.004694835680751174,
                "tf.reduce_max(input_tensor, axis)": 0.004694835680751174,
                "tf.reduce_mean(input_tensor)": 0.004694835680751174,
                "tf.reduce_mean(input_tensor, axis)": 0.004694835680751174,
                "tf.reduce_min(input_tensor)": 0.004694835680751174,
                "tf.reduce_min(input_tensor, axis)": 0.004694835680751174,
                "tf.reduce_prod(input_tensor, axis)": 0.004694835680751174,
                "tf.reduce_sum(input_tensor)": 0.004694835680751174,
                "tf.reduce_sum(input_tensor, axis)": 0.004694835680751174,
                "tf.repeat(input, repeats)": 0.004694835680751174,
                "tf.repeat(input, repeats, axis)": 0.004694835680751174,
                "tf.reshape(tensor, shape)": 0.004694835680751174,
                "tf.reverse(tensor, axis)": 0.004694835680751174,
                "tf.roll(input, shift, axis)": 0.004694835680751174,
                "tf.round(x)": 0.004694835680751174,
                "tf.scatter_nd(indices, updates, shape)": 0.004694835680751174,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.004694835680751174,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.004694835680751174,
                "tf.sequence_mask(lengths)": 0.004694835680751174,
                "tf.sequence_mask(lengths, maxlen)": 0.004694835680751174,
                "tf.shape(input)": 0.004694835680751174,
                "tf.sign(x)": 0.004694835680751174,
                "tf.sort(values, axis)": 0.004694835680751174,
                "tf.sort(values, axis, direction='DESCENDING')": 0.004694835680751174,
                "tf.sqrt(x)": 0.004694835680751174,
                "tf.square(x)": 0.004694835680751174,
                "tf.squeeze(input)": 0.004694835680751174,
                "tf.squeeze(input, axis)": 0.004694835680751174,
                "tf.stack(values, axis)": 0.004694835680751174,
                "tf.subtract(x, y)": 0.004694835680751174,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.004694835680751174,
                "tf.tensordot(a, b, axes)": 0.004694835680751174,
                "tf.tile(input, multiples)": 0.004694835680751174,
                "tf.transpose(a)": 0.004694835680751174,
                "tf.transpose(a, perm)": 0.004694835680751174,
                "tf.unique_with_counts(x)": 0.004694835680751174,
                "tf.unstack(value, axis)": 0.004694835680751174,
                "tf.where(condition)": 0.004694835680751174,
                "tf.where(condition, x, y)": 0.004694835680751174,
                "tf.zeros(shape)": 0.004694835680751174,
                "tf.zeros_like(input)": 0.004694835680751174,
                "tf.SparseTensor(indices, values, dense_shape)": 0.004694835680751174,
                "tf.sparse.add(a, b)": 0.004694835680751174,
                "tf.sparse.concat(axis, sp_inputs)": 0.004694835680751174,
                "tf.sparse.expand_dims(sp_input, axis)": 0.004694835680751174,
                "tf.sparse.from_dense(tensor)": 0.004694835680751174,
                "tf.sparse.maximum(sp_a, sp_b)": 0.004694835680751174,
                "tf.sparse.minimum(sp_a, sp_b)": 0.004694835680751174,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.004694835680751174,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.004694835680751174,
                "tf.sparse.reset_shape(sp_input)": 0.004694835680751174,
                "tf.sparse.reshape(sp_input, shape)": 0.004694835680751174,
                "tf.sparse.retain(sp_input, to_retain)": 0.004694835680751174,
                "tf.sparse.slice(sp_input, start, size)": 0.004694835680751174,
                "tf.sparse.split(sp_input, num_split, axis)": 0.004694835680751174,
                "tf.sparse.to_dense(sp_input)": 0.004694835680751174,
                "tf.sparse.to_dense(sp_input, default_value)": 0.004694835680751174,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.004694835680751174,
                "tf.sparse.transpose(sp_input)": 0.004694835680751174,
                "tf.sparse.transpose(sp_input, perm)": 0.004694835680751174,
                "IndexingAxis1Operation": 0.004694835680751174,
                "IndexingOperation": 0.004694835680751174,
                "PairCreationOperation": 0.014084507042253521,
                "SingletonTupleCreationOperation": 0.004694835680751174,
                "SlicingAxis0BothOperation": 0.004694835680751174,
                "SlicingAxis0LeftOperation": 0.004694835680751174,
                "SlicingAxis0RightOperation": 0.004694835680751174,
                "SlicingAxis1BothOperation": 0.004694835680751174,
                "SlicingAxis1LeftOperation": 0.004694835680751174,
                "SlicingAxis1RightOperation": 0.004694835680751174,
                "TripleCreationOperation": 0.004694835680751174,
                "PROVIDED_CONSTANT_WEIGHT": 0.004694835680751174,
                "COMMON_CONSTANT_WEIGHT": 0.0892018779342723,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.004694835680751174,
                "INPUT_VARIABLE_WEIGHT": 0.09859154929577464,
                "AXIS_CONSTANT_WEIGHT": 0.0892018779342723,
                "SHAPE_CONSTANT_WEIGHT": 0.004694835680751174,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.004694835680751174,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.004694835680751174,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.004694835680751174,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.004694835680751174,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.004694835680751174
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 8,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 8,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 8,
                "tf.pad(tensor, paddings, mode='REFLECT')": 8,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side='left')": 8,
                "tf.searchsorted(sorted_sequence, values, side='right')": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 8,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction='DESCENDING')": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 8,
                "PairCreationOperation": 6,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 3,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 3,
                "AXIS_CONSTANT_WEIGHT": 3,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "stackoverflow_27",
        "description": "boolean tensor with 1 at the indices in the input tensor",
        "target_program": "tf.cast(tf.reduce_max(tf.one_hot(in1, in2), axis=0), tf.int32)",
        "source": "https://stackoverflow.com/questions/54225704/how-do-i-get-a-tensor-representing-the-on-positions-in-the-original-tensor",
        "constants": "[]",
        "examples": {
            "inputs": "[[0, 3, 5, 6],8,]",
            "outputs": "[1, 0, 0, 1, 0, 1, 1, 0]"
        },
        "completions": [
            "result = tf.one_hot(indices=in1, depth=in2)\nreturn result\n",
            "return tf.one_hot(in1, in2)\n",
            "return tf.reduce_max(in1)",
            "return tf.sequence_mask(in1, in2)",
            "return tf.one_hot(in1, in2)",
            "return tf.scatter_nd(tf.expand_dims(in1, 1), tf.ones_like(in1, dtype=tf.int32), [in2])",
            "return tf.where(tf.equal(tf.range(in2), tf.expand_dims(in1, 1)), 1, 0)\n",
            "return tf.one_hot(in1, in2)",
            "return tf.cast(tf.sequence_mask(in1, in2), dtype=tf.int32)",
            "return tf.one_hot(in1, in2, dtype=tf.int32)\n",
            "return tf.one_hot(in1, in2)\n",
            "return tf.one_hot(in1, in2)",
            "return tf.sequence_mask(in1, in2)\n",
            "return tf.cast(tf.equal(tf.range(in2), tf.expand_dims(in1, 1)), tf.int32)",
            "return tf.one_hot(in1, in2)",
            "return tf.sequence_mask(in1, in2)",
            "return tf.sequence_mask(in1, in2)",
            "return tf.sequence_mask(in1, in2)",
            "return tf.one_hot(in1, in2)",
            "return tf.sequence_mask(in1, in2)"
        ],
        "tf_operators": {
            "tf.one_hot": 9,
            "tf.reduce_max": 1,
            "tf.sequence_mask": 7,
            "tf.int32": 4,
            "tf.expand_dims": 3,
            "tf.ones_like": 1,
            "tf.scatter_nd": 1,
            "tf.where": 1,
            "tf.range": 2,
            "tf.equal": 2,
            "tf.cast": 2
        },
        "coverage_percentage": 100.0,
        "total_covered": 4,
        "total_in_target": 4,
        "parsed_constants": [
            [],
            [],
            [],
            [],
            [],
            [
                1
            ],
            [
                1,
                1,
                0
            ],
            [],
            [],
            [],
            [],
            [],
            [],
            [
                1
            ],
            [],
            [],
            [],
            [],
            [],
            []
        ],
        "all_constants": [
            0,
            1
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 40,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 5,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 4
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.004291845493562232,
                "tf.add(x, y)": 0.004291845493562232,
                "tf.add_n(inputs)": 0.004291845493562232,
                "tf.argmax(input, axis)": 0.004291845493562232,
                "tf.argmin(input, axis)": 0.004291845493562232,
                "tf.argsort(values, axis, stable=True)": 0.004291845493562232,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.004291845493562232,
                "tf.boolean_mask(tensor, mask)": 0.004291845493562232,
                "tf.broadcast_to(input, shape)": 0.004291845493562232,
                "tf.cast(x, dtype)": 0.012875536480686695,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.004291845493562232,
                "tf.concat(values, axis)": 0.004291845493562232,
                "tf.constant(value)": 0.004291845493562232,
                "tf.constant(value, dtype)": 0.004291845493562232,
                "tf.divide(x, y)": 0.004291845493562232,
                "tf.equal(x, y)": 0.012875536480686695,
                "tf.exp(x)": 0.004291845493562232,
                "tf.expand_dims(input, axis)": 0.017167381974248927,
                "tf.eye(num_rows)": 0.004291845493562232,
                "tf.eye(num_rows, num_columns)": 0.004291845493562232,
                "tf.eye(num_rows, dtype)": 0.004291845493562232,
                "tf.fill(dims, value)": 0.004291845493562232,
                "tf.gather(params, indices)": 0.004291845493562232,
                "tf.gather(params, indices, axis, batch_dims)": 0.004291845493562232,
                "tf.gather_nd(params, indices)": 0.004291845493562232,
                "tf.gather_nd(params, indices, batch_dims)": 0.004291845493562232,
                "tf.greater(x, y)": 0.004291845493562232,
                "tf.greater_equal(x, y)": 0.004291845493562232,
                "tf.math.bincount(arr)": 0.004291845493562232,
                "tf.math.ceil(x)": 0.004291845493562232,
                "tf.math.count_nonzero(input)": 0.004291845493562232,
                "tf.math.count_nonzero(input, axis)": 0.004291845493562232,
                "tf.math.cumsum(x, axis)": 0.004291845493562232,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.004291845493562232,
                "tf.math.divide_no_nan(x, y)": 0.004291845493562232,
                "tf.math.floor(x)": 0.004291845493562232,
                "tf.math.log(x)": 0.004291845493562232,
                "tf.math.logical_and(x, y)": 0.004291845493562232,
                "tf.math.logical_not(x)": 0.004291845493562232,
                "tf.math.logical_or(x, y)": 0.004291845493562232,
                "tf.math.logical_xor(x, y)": 0.004291845493562232,
                "tf.math.negative(x)": 0.004291845493562232,
                "tf.math.reciprocal(x)": 0.004291845493562232,
                "tf.math.reciprocal_no_nan(x)": 0.004291845493562232,
                "tf.math.segment_max(data, segment_ids)": 0.004291845493562232,
                "tf.math.segment_mean(data, segment_ids)": 0.004291845493562232,
                "tf.math.segment_min(data, segment_ids)": 0.004291845493562232,
                "tf.math.segment_prod(data, segment_ids)": 0.004291845493562232,
                "tf.math.segment_sum(data, segment_ids)": 0.004291845493562232,
                "tf.math.squared_difference(x, y)": 0.004291845493562232,
                "tf.math.top_k(input, k)": 0.004291845493562232,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.004291845493562232,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.004291845493562232,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.004291845493562232,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.004291845493562232,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.004291845493562232,
                "tf.matmul(a, b)": 0.004291845493562232,
                "tf.maximum(x, y)": 0.004291845493562232,
                "tf.minimum(x, y)": 0.004291845493562232,
                "tf.multiply(x, y)": 0.004291845493562232,
                "tf.not_equal(x, y)": 0.004291845493562232,
                "tf.one_hot(indices, depth)": 0.04291845493562232,
                "tf.ones(shape)": 0.004291845493562232,
                "tf.ones_like(input)": 0.008583690987124463,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.004291845493562232,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.004291845493562232,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.004291845493562232,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.004291845493562232,
                "tf.range(start)": 0.012875536480686695,
                "tf.range(start, limit, delta)": 0.004291845493562232,
                "tf.reduce_any(input_tensor, axis)": 0.004291845493562232,
                "tf.reduce_all(input_tensor, axis)": 0.004291845493562232,
                "tf.reduce_max(input_tensor)": 0.008583690987124463,
                "tf.reduce_max(input_tensor, axis)": 0.004291845493562232,
                "tf.reduce_mean(input_tensor)": 0.004291845493562232,
                "tf.reduce_mean(input_tensor, axis)": 0.004291845493562232,
                "tf.reduce_min(input_tensor)": 0.004291845493562232,
                "tf.reduce_min(input_tensor, axis)": 0.004291845493562232,
                "tf.reduce_prod(input_tensor, axis)": 0.004291845493562232,
                "tf.reduce_sum(input_tensor)": 0.004291845493562232,
                "tf.reduce_sum(input_tensor, axis)": 0.004291845493562232,
                "tf.repeat(input, repeats)": 0.004291845493562232,
                "tf.repeat(input, repeats, axis)": 0.004291845493562232,
                "tf.reshape(tensor, shape)": 0.004291845493562232,
                "tf.reverse(tensor, axis)": 0.004291845493562232,
                "tf.roll(input, shift, axis)": 0.004291845493562232,
                "tf.round(x)": 0.004291845493562232,
                "tf.scatter_nd(indices, updates, shape)": 0.008583690987124463,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.004291845493562232,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.004291845493562232,
                "tf.sequence_mask(lengths)": 0.004291845493562232,
                "tf.sequence_mask(lengths, maxlen)": 0.034334763948497854,
                "tf.shape(input)": 0.004291845493562232,
                "tf.sign(x)": 0.004291845493562232,
                "tf.sort(values, axis)": 0.004291845493562232,
                "tf.sort(values, axis, direction='DESCENDING')": 0.004291845493562232,
                "tf.sqrt(x)": 0.004291845493562232,
                "tf.square(x)": 0.004291845493562232,
                "tf.squeeze(input)": 0.004291845493562232,
                "tf.squeeze(input, axis)": 0.004291845493562232,
                "tf.stack(values, axis)": 0.004291845493562232,
                "tf.subtract(x, y)": 0.004291845493562232,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.004291845493562232,
                "tf.tensordot(a, b, axes)": 0.004291845493562232,
                "tf.tile(input, multiples)": 0.004291845493562232,
                "tf.transpose(a)": 0.004291845493562232,
                "tf.transpose(a, perm)": 0.004291845493562232,
                "tf.unique_with_counts(x)": 0.004291845493562232,
                "tf.unstack(value, axis)": 0.004291845493562232,
                "tf.where(condition)": 0.004291845493562232,
                "tf.where(condition, x, y)": 0.008583690987124463,
                "tf.zeros(shape)": 0.004291845493562232,
                "tf.zeros_like(input)": 0.004291845493562232,
                "tf.SparseTensor(indices, values, dense_shape)": 0.004291845493562232,
                "tf.sparse.add(a, b)": 0.004291845493562232,
                "tf.sparse.concat(axis, sp_inputs)": 0.004291845493562232,
                "tf.sparse.expand_dims(sp_input, axis)": 0.004291845493562232,
                "tf.sparse.from_dense(tensor)": 0.004291845493562232,
                "tf.sparse.maximum(sp_a, sp_b)": 0.004291845493562232,
                "tf.sparse.minimum(sp_a, sp_b)": 0.004291845493562232,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.004291845493562232,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.004291845493562232,
                "tf.sparse.reset_shape(sp_input)": 0.004291845493562232,
                "tf.sparse.reshape(sp_input, shape)": 0.004291845493562232,
                "tf.sparse.retain(sp_input, to_retain)": 0.004291845493562232,
                "tf.sparse.slice(sp_input, start, size)": 0.004291845493562232,
                "tf.sparse.split(sp_input, num_split, axis)": 0.004291845493562232,
                "tf.sparse.to_dense(sp_input)": 0.004291845493562232,
                "tf.sparse.to_dense(sp_input, default_value)": 0.004291845493562232,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.004291845493562232,
                "tf.sparse.transpose(sp_input)": 0.004291845493562232,
                "tf.sparse.transpose(sp_input, perm)": 0.004291845493562232,
                "IndexingAxis1Operation": 0.004291845493562232,
                "IndexingOperation": 0.004291845493562232,
                "PairCreationOperation": 0.004291845493562232,
                "SingletonTupleCreationOperation": 0.004291845493562232,
                "SlicingAxis0BothOperation": 0.004291845493562232,
                "SlicingAxis0LeftOperation": 0.004291845493562232,
                "SlicingAxis0RightOperation": 0.004291845493562232,
                "SlicingAxis1BothOperation": 0.004291845493562232,
                "SlicingAxis1LeftOperation": 0.004291845493562232,
                "SlicingAxis1RightOperation": 0.004291845493562232,
                "TripleCreationOperation": 0.004291845493562232,
                "PROVIDED_CONSTANT_WEIGHT": 0.004291845493562232,
                "COMMON_CONSTANT_WEIGHT": 0.02575107296137339,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.004291845493562232,
                "INPUT_VARIABLE_WEIGHT": 0.1759656652360515,
                "AXIS_CONSTANT_WEIGHT": 0.004291845493562232,
                "SHAPE_CONSTANT_WEIGHT": 0.004291845493562232,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.004291845493562232,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.02145922746781116,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.004291845493562232,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.004291845493562232,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.004291845493562232
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 6,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 6,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 6,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 5,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 7,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 8,
                "tf.pad(tensor, paddings, mode='REFLECT')": 8,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 8,
                "tf.range(start)": 6,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 7,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 7,
                "tf.searchsorted(sorted_sequence, values, side='left')": 8,
                "tf.searchsorted(sorted_sequence, values, side='right')": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 5,
                "tf.shape(input)": 8,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction='DESCENDING')": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 7,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 8,
                "PairCreationOperation": 8,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 5,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 3,
                "AXIS_CONSTANT_WEIGHT": 8,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 6,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "stackoverflow_28",
        "description": "extract columns from a 3D tensor given column indices",
        "target_program": "tf.squeeze(tf.gather(in1, tf.expand_dims(in2, 1), axis=-1, batch_dims=1))",
        "source": "https://stackoverflow.com/questions/54274074/selecting-columns-from-3d-tensor-according-to-a-1d-tensor-of-indices-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[[[5, 3],  [0, 2]], [[7, 4],  [5, 1]], [[10, 20],  [15, 30]], [[11, 16],  [14, 12]], [[-2, -7],  [-4, 6]]],[1, 0, 1, 1, 0],]",
            "outputs": "[[3, 2], [7, 5], [20, 30], [16, 12], [-2, -4]]"
        },
        "completions": [
            "return tf.gather(in1, in2, axis=2)\n",
            "return tf.gather_nd(in1, indices=tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=1))",
            "return tf.gather_nd(in1, indices=in2, batch_dims=1)\n",
            "return tf.transpose(tf.gather(in1, in2, axis=1), perm=[0, 2, 1])\n",
            "return tf.gather(in1, in2, axis=1)\n",
            "return tf.cast(tf.unstack(in1, axis=2)[in2], tf.int32)\n",
            "return tf.transpose(tf.gather(in1, in2, axis=1), perm=[0, 2, 1])\n",
            "return tf.gather(in1, in2, axis=2)\n",
            "return tf.transpose(tf.gather(in1, in2, axis=1), perm=[0, 2, 1])\n",
            "return tf.gather(in1, in2, axis=1)\n",
            "return tf.gather(in1, in2, axis=1)\n",
            "return tf.gather(in1, in2, axis=2)\n",
            "return tf.gather(params=in1, indices=in2, axis=1)\n",
            "return tf.gather(in1, in2, axis=2)\n",
            "return tf.gather_nd(in1, indices=tf.stack((tf.range(tf.shape(in1)[0]), in2), axis=1))\n",
            "return tf.gather(in1, in2, axis=2)\n",
            "return tf.gather(in1, in2, axis=2)\n",
            "return tf.gather_nd(in1, indices=in2[:, tf.newaxis, tf.newaxis])\n",
            "return tf.gather(in1, in2, axis=2)\n",
            "indices = tf.convert_to_tensor(in2)\nreturn tf.squeeze(tf.gather(in1, indices, axis=1))\n"
        ],
        "tf_operators": {
            "tf.gather": 15,
            "tf.range": 2,
            "tf.gather_nd": 4,
            "tf.shape": 2,
            "tf.stack": 2,
            "tf.transpose": 3,
            "tf.int32": 1,
            "tf.cast": 1,
            "tf.unstack": 1,
            "tf.newaxis": 1,
            "tf.squeeze": 1,
            "tf.convert_to_tensor": 1
        },
        "coverage_percentage": 66.66666666666666,
        "total_covered": 2,
        "total_in_target": 3,
        "parsed_constants": [
            [
                2
            ],
            [
                0,
                1
            ],
            [
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1
            ],
            [
                2
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                2
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                2
            ],
            [
                1
            ],
            [
                2
            ],
            [
                0,
                1
            ],
            [
                2
            ],
            [
                2
            ],
            [],
            [
                2
            ],
            [
                1
            ]
        ],
        "all_constants": [
            0,
            1,
            2
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 43,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 19,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 11,
            "tf_int64": 0,
            "tf_int32": 1
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.0038461538461538464,
                "tf.add(x, y)": 0.0038461538461538464,
                "tf.add_n(inputs)": 0.0038461538461538464,
                "tf.argmax(input, axis)": 0.0038461538461538464,
                "tf.argmin(input, axis)": 0.0038461538461538464,
                "tf.argsort(values, axis, stable=True)": 0.0038461538461538464,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.0038461538461538464,
                "tf.boolean_mask(tensor, mask)": 0.0038461538461538464,
                "tf.broadcast_to(input, shape)": 0.0038461538461538464,
                "tf.cast(x, dtype)": 0.007692307692307693,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.0038461538461538464,
                "tf.concat(values, axis)": 0.0038461538461538464,
                "tf.constant(value)": 0.0038461538461538464,
                "tf.constant(value, dtype)": 0.0038461538461538464,
                "tf.divide(x, y)": 0.0038461538461538464,
                "tf.equal(x, y)": 0.0038461538461538464,
                "tf.exp(x)": 0.0038461538461538464,
                "tf.expand_dims(input, axis)": 0.0038461538461538464,
                "tf.eye(num_rows)": 0.0038461538461538464,
                "tf.eye(num_rows, num_columns)": 0.0038461538461538464,
                "tf.eye(num_rows, dtype)": 0.0038461538461538464,
                "tf.fill(dims, value)": 0.0038461538461538464,
                "tf.gather(params, indices)": 0.0038461538461538464,
                "tf.gather(params, indices, axis, batch_dims)": 0.057692307692307696,
                "tf.gather_nd(params, indices)": 0.0038461538461538464,
                "tf.gather_nd(params, indices, batch_dims)": 0.015384615384615385,
                "tf.greater(x, y)": 0.0038461538461538464,
                "tf.greater_equal(x, y)": 0.0038461538461538464,
                "tf.math.bincount(arr)": 0.0038461538461538464,
                "tf.math.ceil(x)": 0.0038461538461538464,
                "tf.math.count_nonzero(input)": 0.0038461538461538464,
                "tf.math.count_nonzero(input, axis)": 0.0038461538461538464,
                "tf.math.cumsum(x, axis)": 0.0038461538461538464,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.0038461538461538464,
                "tf.math.divide_no_nan(x, y)": 0.0038461538461538464,
                "tf.math.floor(x)": 0.0038461538461538464,
                "tf.math.log(x)": 0.0038461538461538464,
                "tf.math.logical_and(x, y)": 0.0038461538461538464,
                "tf.math.logical_not(x)": 0.0038461538461538464,
                "tf.math.logical_or(x, y)": 0.0038461538461538464,
                "tf.math.logical_xor(x, y)": 0.0038461538461538464,
                "tf.math.negative(x)": 0.0038461538461538464,
                "tf.math.reciprocal(x)": 0.0038461538461538464,
                "tf.math.reciprocal_no_nan(x)": 0.0038461538461538464,
                "tf.math.segment_max(data, segment_ids)": 0.0038461538461538464,
                "tf.math.segment_mean(data, segment_ids)": 0.0038461538461538464,
                "tf.math.segment_min(data, segment_ids)": 0.0038461538461538464,
                "tf.math.segment_prod(data, segment_ids)": 0.0038461538461538464,
                "tf.math.segment_sum(data, segment_ids)": 0.0038461538461538464,
                "tf.math.squared_difference(x, y)": 0.0038461538461538464,
                "tf.math.top_k(input, k)": 0.0038461538461538464,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.0038461538461538464,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.0038461538461538464,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.0038461538461538464,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.0038461538461538464,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.0038461538461538464,
                "tf.matmul(a, b)": 0.0038461538461538464,
                "tf.maximum(x, y)": 0.0038461538461538464,
                "tf.minimum(x, y)": 0.0038461538461538464,
                "tf.multiply(x, y)": 0.0038461538461538464,
                "tf.not_equal(x, y)": 0.0038461538461538464,
                "tf.one_hot(indices, depth)": 0.0038461538461538464,
                "tf.ones(shape)": 0.0038461538461538464,
                "tf.ones_like(input)": 0.0038461538461538464,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.0038461538461538464,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.0038461538461538464,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.0038461538461538464,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.0038461538461538464,
                "tf.range(start)": 0.011538461538461539,
                "tf.range(start, limit, delta)": 0.0038461538461538464,
                "tf.reduce_any(input_tensor, axis)": 0.0038461538461538464,
                "tf.reduce_all(input_tensor, axis)": 0.0038461538461538464,
                "tf.reduce_max(input_tensor)": 0.0038461538461538464,
                "tf.reduce_max(input_tensor, axis)": 0.0038461538461538464,
                "tf.reduce_mean(input_tensor)": 0.0038461538461538464,
                "tf.reduce_mean(input_tensor, axis)": 0.0038461538461538464,
                "tf.reduce_min(input_tensor)": 0.0038461538461538464,
                "tf.reduce_min(input_tensor, axis)": 0.0038461538461538464,
                "tf.reduce_prod(input_tensor, axis)": 0.0038461538461538464,
                "tf.reduce_sum(input_tensor)": 0.0038461538461538464,
                "tf.reduce_sum(input_tensor, axis)": 0.0038461538461538464,
                "tf.repeat(input, repeats)": 0.0038461538461538464,
                "tf.repeat(input, repeats, axis)": 0.0038461538461538464,
                "tf.reshape(tensor, shape)": 0.0038461538461538464,
                "tf.reverse(tensor, axis)": 0.0038461538461538464,
                "tf.roll(input, shift, axis)": 0.0038461538461538464,
                "tf.round(x)": 0.0038461538461538464,
                "tf.scatter_nd(indices, updates, shape)": 0.0038461538461538464,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.0038461538461538464,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.0038461538461538464,
                "tf.sequence_mask(lengths)": 0.0038461538461538464,
                "tf.sequence_mask(lengths, maxlen)": 0.0038461538461538464,
                "tf.shape(input)": 0.011538461538461539,
                "tf.sign(x)": 0.0038461538461538464,
                "tf.sort(values, axis)": 0.0038461538461538464,
                "tf.sort(values, axis, direction='DESCENDING')": 0.0038461538461538464,
                "tf.sqrt(x)": 0.0038461538461538464,
                "tf.square(x)": 0.0038461538461538464,
                "tf.squeeze(input)": 0.007692307692307693,
                "tf.squeeze(input, axis)": 0.0038461538461538464,
                "tf.stack(values, axis)": 0.011538461538461539,
                "tf.subtract(x, y)": 0.0038461538461538464,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.0038461538461538464,
                "tf.tensordot(a, b, axes)": 0.0038461538461538464,
                "tf.tile(input, multiples)": 0.0038461538461538464,
                "tf.transpose(a)": 0.0038461538461538464,
                "tf.transpose(a, perm)": 0.0038461538461538464,
                "tf.unique_with_counts(x)": 0.0038461538461538464,
                "tf.unstack(value, axis)": 0.007692307692307693,
                "tf.where(condition)": 0.0038461538461538464,
                "tf.where(condition, x, y)": 0.0038461538461538464,
                "tf.zeros(shape)": 0.0038461538461538464,
                "tf.zeros_like(input)": 0.0038461538461538464,
                "tf.SparseTensor(indices, values, dense_shape)": 0.0038461538461538464,
                "tf.sparse.add(a, b)": 0.0038461538461538464,
                "tf.sparse.concat(axis, sp_inputs)": 0.0038461538461538464,
                "tf.sparse.expand_dims(sp_input, axis)": 0.0038461538461538464,
                "tf.sparse.from_dense(tensor)": 0.0038461538461538464,
                "tf.sparse.maximum(sp_a, sp_b)": 0.0038461538461538464,
                "tf.sparse.minimum(sp_a, sp_b)": 0.0038461538461538464,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.0038461538461538464,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.0038461538461538464,
                "tf.sparse.reset_shape(sp_input)": 0.0038461538461538464,
                "tf.sparse.reshape(sp_input, shape)": 0.0038461538461538464,
                "tf.sparse.retain(sp_input, to_retain)": 0.0038461538461538464,
                "tf.sparse.slice(sp_input, start, size)": 0.0038461538461538464,
                "tf.sparse.split(sp_input, num_split, axis)": 0.0038461538461538464,
                "tf.sparse.to_dense(sp_input)": 0.0038461538461538464,
                "tf.sparse.to_dense(sp_input, default_value)": 0.0038461538461538464,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.0038461538461538464,
                "tf.sparse.transpose(sp_input)": 0.0038461538461538464,
                "tf.sparse.transpose(sp_input, perm)": 0.0038461538461538464,
                "IndexingAxis1Operation": 0.0038461538461538464,
                "IndexingOperation": 0.015384615384615385,
                "PairCreationOperation": 0.007692307692307693,
                "SingletonTupleCreationOperation": 0.0038461538461538464,
                "SlicingAxis0BothOperation": 0.0038461538461538464,
                "SlicingAxis0LeftOperation": 0.0038461538461538464,
                "SlicingAxis0RightOperation": 0.0038461538461538464,
                "SlicingAxis1BothOperation": 0.0038461538461538464,
                "SlicingAxis1LeftOperation": 0.0038461538461538464,
                "SlicingAxis1RightOperation": 0.0038461538461538464,
                "TripleCreationOperation": 0.007692307692307693,
                "PROVIDED_CONSTANT_WEIGHT": 0.0038461538461538464,
                "COMMON_CONSTANT_WEIGHT": 0.07692307692307693,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.0038461538461538464,
                "INPUT_VARIABLE_WEIGHT": 0.16923076923076924,
                "AXIS_CONSTANT_WEIGHT": 0.046153846153846156,
                "SHAPE_CONSTANT_WEIGHT": 0.0038461538461538464,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.0038461538461538464,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.007692307692307693,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.0038461538461538464,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.0038461538461538464,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.0038461538461538464
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 7,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 8,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 4,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 6,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 8,
                "tf.pad(tensor, paddings, mode='REFLECT')": 8,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 8,
                "tf.range(start)": 6,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side='left')": 8,
                "tf.searchsorted(sorted_sequence, values, side='right')": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 6,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction='DESCENDING')": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 7,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 6,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 7,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 6,
                "PairCreationOperation": 7,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 7,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 4,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 3,
                "AXIS_CONSTANT_WEIGHT": 4,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 7,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "stackoverflow_29",
        "description": "place continuous values into buckets given bucket boundaries",
        "target_program": "tf.searchsorted(in1, in2, side='left')",
        "source": "https://stackoverflow.com/questions/54155085/bucketing-continous-value-tensors-in-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[-1.0, -0.8, -0.6, -0.4, -0.2, 0.0, 0.2, 0.4, 0.6, 0.8, 1.0],[0.1, -10, -0.1, 1.1, 0.41],]",
            "outputs": "[6, 0, 5, 11, 8]"
        },
        "completions": [
            "return tf.searchsorted(in1, in2)\n",
            "return tf.searchsorted(in1, in2, side='right')\n",
            "return tf.searchsorted(in1, in2, side='right')\n",
            "def transform(in1, in2):\n    boundaries = [-0.2, 0, 0.2, 0.4, 0.6, 0.8]\n    output = tf.searchsorted(boundaries, in2, side='right')\n    return output\n",
            "return tf.searchsorted(in1, in2, side='right')\n",
            "boundaries = [-1.0, -0.5, 0.0, 0.5, 1.0]\nreturn tf.searchsorted(boundaries, in2)\n ",
            "return tf.searchsorted(in1, in2, side='left')\n",
            "return tf.searchsorted(tf.constant([-1., -0.8, -0.6, -0.4, -0.2, 0., 0.2, 0.4, 0.6, 0.8, 1.]), in2, side='left')\n",
            "return tf.searchsorted(in1, in2, side='left')\n",
            "return tf.searchsorted(in1, in2)\n",
            "return tf.searchsorted(in1, in2, side='right')",
            "return tf.searchsorted(in1, in2, side='right')\n",
            "def transform(in1, in2):\n    bucket_boundaries = [-0.2, 0.2, 0.6, 1.0]\n    return tf.searchsorted(bucket_boundaries, in2, side='right')\n",
            "def transform(in1, in2):\n    buckets = tf.searchsorted(in1, in2, side='right')\n    return buckets\n",
            "def transform(in1, in2):\n    bucket_boundaries = [-0.1, -0.05, 0, 0.05, 0.1]\n    return tf.searchsorted(bucket_boundaries, in2)\n",
            "return tf.searchsorted(in1, in2, side='left')\n",
            "return tf.searchsorted(in1, in2, side='right')\n",
            "return tf.searchsorted(tf.constant([-1.0, -0.8, -0.6, -0.4, -0.2, 0.0, 0.2, 0.4, 0.6, 0.8, 1.0]), in2, side='left')\n",
            "return tf.searchsorted(in1, in2, side='left')\n",
            "buckets = tf.searchsorted(in1, in2, side='right')\nreturn buckets\n"
        ],
        "tf_operators": {
            "tf.searchsorted": 20,
            "tf.constant": 2
        },
        "coverage_percentage": 100.0,
        "total_covered": 1,
        "total_in_target": 1,
        "parsed_constants": [
            [],
            [],
            [],
            [
                -0.2,
                0
            ],
            [],
            [
                -1.0,
                -0.5
            ],
            [],
            [
                -1.0,
                -0.8,
                -0.6,
                -0.4,
                -0.2
            ],
            [],
            [],
            [],
            [],
            [
                -0.2
            ],
            [],
            [
                -0.1,
                -0.05,
                0
            ],
            [],
            [],
            [
                -1.0,
                -0.8,
                -0.6,
                -0.4,
                -0.2
            ],
            [],
            []
        ],
        "all_constants": [
            -0.2,
            0,
            -0.8,
            -0.5,
            -0.6,
            -0.4,
            -0.1,
            -0.05,
            -1.0
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 34,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 2,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.0051813471502590676,
                "tf.add(x, y)": 0.0051813471502590676,
                "tf.add_n(inputs)": 0.0051813471502590676,
                "tf.argmax(input, axis)": 0.0051813471502590676,
                "tf.argmin(input, axis)": 0.0051813471502590676,
                "tf.argsort(values, axis, stable=True)": 0.0051813471502590676,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.0051813471502590676,
                "tf.boolean_mask(tensor, mask)": 0.0051813471502590676,
                "tf.broadcast_to(input, shape)": 0.0051813471502590676,
                "tf.cast(x, dtype)": 0.0051813471502590676,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.0051813471502590676,
                "tf.concat(values, axis)": 0.0051813471502590676,
                "tf.constant(value)": 0.015544041450777202,
                "tf.constant(value, dtype)": 0.0051813471502590676,
                "tf.divide(x, y)": 0.0051813471502590676,
                "tf.equal(x, y)": 0.0051813471502590676,
                "tf.exp(x)": 0.0051813471502590676,
                "tf.expand_dims(input, axis)": 0.0051813471502590676,
                "tf.eye(num_rows)": 0.0051813471502590676,
                "tf.eye(num_rows, num_columns)": 0.0051813471502590676,
                "tf.eye(num_rows, dtype)": 0.0051813471502590676,
                "tf.fill(dims, value)": 0.0051813471502590676,
                "tf.gather(params, indices)": 0.0051813471502590676,
                "tf.gather(params, indices, axis, batch_dims)": 0.0051813471502590676,
                "tf.gather_nd(params, indices)": 0.0051813471502590676,
                "tf.gather_nd(params, indices, batch_dims)": 0.0051813471502590676,
                "tf.greater(x, y)": 0.0051813471502590676,
                "tf.greater_equal(x, y)": 0.0051813471502590676,
                "tf.math.bincount(arr)": 0.0051813471502590676,
                "tf.math.ceil(x)": 0.0051813471502590676,
                "tf.math.count_nonzero(input)": 0.0051813471502590676,
                "tf.math.count_nonzero(input, axis)": 0.0051813471502590676,
                "tf.math.cumsum(x, axis)": 0.0051813471502590676,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.0051813471502590676,
                "tf.math.divide_no_nan(x, y)": 0.0051813471502590676,
                "tf.math.floor(x)": 0.0051813471502590676,
                "tf.math.log(x)": 0.0051813471502590676,
                "tf.math.logical_and(x, y)": 0.0051813471502590676,
                "tf.math.logical_not(x)": 0.0051813471502590676,
                "tf.math.logical_or(x, y)": 0.0051813471502590676,
                "tf.math.logical_xor(x, y)": 0.0051813471502590676,
                "tf.math.negative(x)": 0.0051813471502590676,
                "tf.math.reciprocal(x)": 0.0051813471502590676,
                "tf.math.reciprocal_no_nan(x)": 0.0051813471502590676,
                "tf.math.segment_max(data, segment_ids)": 0.0051813471502590676,
                "tf.math.segment_mean(data, segment_ids)": 0.0051813471502590676,
                "tf.math.segment_min(data, segment_ids)": 0.0051813471502590676,
                "tf.math.segment_prod(data, segment_ids)": 0.0051813471502590676,
                "tf.math.segment_sum(data, segment_ids)": 0.0051813471502590676,
                "tf.math.squared_difference(x, y)": 0.0051813471502590676,
                "tf.math.top_k(input, k)": 0.0051813471502590676,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.0051813471502590676,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.0051813471502590676,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.0051813471502590676,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.0051813471502590676,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.0051813471502590676,
                "tf.matmul(a, b)": 0.0051813471502590676,
                "tf.maximum(x, y)": 0.0051813471502590676,
                "tf.minimum(x, y)": 0.0051813471502590676,
                "tf.multiply(x, y)": 0.0051813471502590676,
                "tf.not_equal(x, y)": 0.0051813471502590676,
                "tf.one_hot(indices, depth)": 0.0051813471502590676,
                "tf.ones(shape)": 0.0051813471502590676,
                "tf.ones_like(input)": 0.0051813471502590676,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.0051813471502590676,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.0051813471502590676,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.0051813471502590676,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.0051813471502590676,
                "tf.range(start)": 0.0051813471502590676,
                "tf.range(start, limit, delta)": 0.0051813471502590676,
                "tf.reduce_any(input_tensor, axis)": 0.0051813471502590676,
                "tf.reduce_all(input_tensor, axis)": 0.0051813471502590676,
                "tf.reduce_max(input_tensor)": 0.0051813471502590676,
                "tf.reduce_max(input_tensor, axis)": 0.0051813471502590676,
                "tf.reduce_mean(input_tensor)": 0.0051813471502590676,
                "tf.reduce_mean(input_tensor, axis)": 0.0051813471502590676,
                "tf.reduce_min(input_tensor)": 0.0051813471502590676,
                "tf.reduce_min(input_tensor, axis)": 0.0051813471502590676,
                "tf.reduce_prod(input_tensor, axis)": 0.0051813471502590676,
                "tf.reduce_sum(input_tensor)": 0.0051813471502590676,
                "tf.reduce_sum(input_tensor, axis)": 0.0051813471502590676,
                "tf.repeat(input, repeats)": 0.0051813471502590676,
                "tf.repeat(input, repeats, axis)": 0.0051813471502590676,
                "tf.reshape(tensor, shape)": 0.0051813471502590676,
                "tf.reverse(tensor, axis)": 0.0051813471502590676,
                "tf.roll(input, shift, axis)": 0.0051813471502590676,
                "tf.round(x)": 0.0051813471502590676,
                "tf.scatter_nd(indices, updates, shape)": 0.0051813471502590676,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.0051813471502590676,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.0051813471502590676,
                "tf.sequence_mask(lengths)": 0.0051813471502590676,
                "tf.sequence_mask(lengths, maxlen)": 0.0051813471502590676,
                "tf.shape(input)": 0.0051813471502590676,
                "tf.sign(x)": 0.0051813471502590676,
                "tf.sort(values, axis)": 0.0051813471502590676,
                "tf.sort(values, axis, direction='DESCENDING')": 0.0051813471502590676,
                "tf.sqrt(x)": 0.0051813471502590676,
                "tf.square(x)": 0.0051813471502590676,
                "tf.squeeze(input)": 0.0051813471502590676,
                "tf.squeeze(input, axis)": 0.0051813471502590676,
                "tf.stack(values, axis)": 0.0051813471502590676,
                "tf.subtract(x, y)": 0.0051813471502590676,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.0051813471502590676,
                "tf.tensordot(a, b, axes)": 0.0051813471502590676,
                "tf.tile(input, multiples)": 0.0051813471502590676,
                "tf.transpose(a)": 0.0051813471502590676,
                "tf.transpose(a, perm)": 0.0051813471502590676,
                "tf.unique_with_counts(x)": 0.0051813471502590676,
                "tf.unstack(value, axis)": 0.0051813471502590676,
                "tf.where(condition)": 0.0051813471502590676,
                "tf.where(condition, x, y)": 0.0051813471502590676,
                "tf.zeros(shape)": 0.0051813471502590676,
                "tf.zeros_like(input)": 0.0051813471502590676,
                "tf.SparseTensor(indices, values, dense_shape)": 0.0051813471502590676,
                "tf.sparse.add(a, b)": 0.0051813471502590676,
                "tf.sparse.concat(axis, sp_inputs)": 0.0051813471502590676,
                "tf.sparse.expand_dims(sp_input, axis)": 0.0051813471502590676,
                "tf.sparse.from_dense(tensor)": 0.0051813471502590676,
                "tf.sparse.maximum(sp_a, sp_b)": 0.0051813471502590676,
                "tf.sparse.minimum(sp_a, sp_b)": 0.0051813471502590676,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.0051813471502590676,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.0051813471502590676,
                "tf.sparse.reset_shape(sp_input)": 0.0051813471502590676,
                "tf.sparse.reshape(sp_input, shape)": 0.0051813471502590676,
                "tf.sparse.retain(sp_input, to_retain)": 0.0051813471502590676,
                "tf.sparse.slice(sp_input, start, size)": 0.0051813471502590676,
                "tf.sparse.split(sp_input, num_split, axis)": 0.0051813471502590676,
                "tf.sparse.to_dense(sp_input)": 0.0051813471502590676,
                "tf.sparse.to_dense(sp_input, default_value)": 0.0051813471502590676,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.0051813471502590676,
                "tf.sparse.transpose(sp_input)": 0.0051813471502590676,
                "tf.sparse.transpose(sp_input, perm)": 0.0051813471502590676,
                "IndexingAxis1Operation": 0.0051813471502590676,
                "IndexingOperation": 0.0051813471502590676,
                "PairCreationOperation": 0.0051813471502590676,
                "SingletonTupleCreationOperation": 0.0051813471502590676,
                "SlicingAxis0BothOperation": 0.0051813471502590676,
                "SlicingAxis0LeftOperation": 0.0051813471502590676,
                "SlicingAxis0RightOperation": 0.0051813471502590676,
                "SlicingAxis1BothOperation": 0.0051813471502590676,
                "SlicingAxis1LeftOperation": 0.0051813471502590676,
                "SlicingAxis1RightOperation": 0.0051813471502590676,
                "TripleCreationOperation": 0.0051813471502590676,
                "PROVIDED_CONSTANT_WEIGHT": 0.0051813471502590676,
                "COMMON_CONSTANT_WEIGHT": 0.015544041450777202,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.0051813471502590676,
                "INPUT_VARIABLE_WEIGHT": 0.18134715025906736,
                "AXIS_CONSTANT_WEIGHT": 0.0051813471502590676,
                "SHAPE_CONSTANT_WEIGHT": 0.0051813471502590676,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.0051813471502590676,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.0051813471502590676,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.0051813471502590676,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.0051813471502590676,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.0051813471502590676
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 8,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 6,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 8,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 8,
                "tf.pad(tensor, paddings, mode='REFLECT')": 8,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side='left')": 8,
                "tf.searchsorted(sorted_sequence, values, side='right')": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 8,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction='DESCENDING')": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 8,
                "PairCreationOperation": 8,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 6,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 2,
                "AXIS_CONSTANT_WEIGHT": 8,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "stackoverflow_30",
        "description": "compute Euclidean distance between two tensors",
        "target_program": "tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))), axis=2))",
        "source": "https://stackoverflow.com/questions/54147780/tensorflow-how-to-calculate-the-euclidean-distance-between-two-tensor",
        "constants": "[]",
        "examples": {
            "inputs": "[[[1., 2.], [3., 4.], [5., 6.]],[[9., 4.], [8., 5.], [7., 6.]],]",
            "outputs": "[[math.sqrt(68), math.sqrt(58), math.sqrt(52)],    [math.sqrt(36), math.sqrt(26), math.sqrt(20)],    [math.sqrt(20), math.sqrt(10), math.sqrt(4)]]"
        },
        "completions": [
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))), axis=2))\n",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))), axis=-1))\n",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(in1[:, None], in2[None])), axis=2))",
            "return tf.linalg.norm(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0), ord='euclidean', axis=-1)",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))), axis = 2))",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2))",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))), axis=2))\n",
            "diff = tf.subtract(in1, in2)\nsq_diff = tf.square(diff)\nsum_sq_diff = tf.reduce_sum(sq_diff, axis=2)\neuclidean_distance = tf.sqrt(sum_sq_diff)\nreturn euclidean_distance\n",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))), axis=2))\n",
            "diff = tf.subtract(in1, in2)\nsquare_diff = tf.square(diff)\nsum_square_diff = tf.reduce_sum(square_diff, axis=1, keepdims=True)\neuclidean_distance = tf.sqrt(sum_square_diff)\nreturn euclidean_distance\n",
            "differences = tf.subtract(in1, in2)\nsquared_diff = tf.square(differences)\nsum_squared_diff = tf.reduce_sum(squared_diff, axis=2)\neuclidean_distances = tf.sqrt(sum_squared_diff)\nreturn euclidean_distances\n",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))), axis=2))\n",
            "diff = tf.subtract(in1, in2)\nsquare_diff = tf.square(diff)\nsum_square_diff = tf.reduce_sum(square_diff, axis=-1, keepdims=True)\neuclidean_dist = tf.sqrt(sum_square_diff)\nreturn euclidean_dist\n",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2))\n",
            "return tf.norm(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0), axis=2)\n",
            "return tf.sqrt(tf.reduce_sum(tf.square(in1[:, None] - in2), axis=2))\n",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2))",
            "return tf.norm(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0), axis=2)",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), 2))",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2))\n"
        ],
        "tf_operators": {
            "tf.sqrt": 17,
            "tf.subtract": 11,
            "tf.square": 17,
            "tf.reduce_sum": 17,
            "tf.expand_dims": 14,
            "tf.linalg.norm": 1,
            "tf.norm": 2
        },
        "coverage_percentage": 100.0,
        "total_covered": 5,
        "total_in_target": 5,
        "parsed_constants": [
            [
                1,
                0,
                2
            ],
            [
                1,
                0,
                -1
            ],
            [
                2
            ],
            [
                1,
                0,
                -1
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                0,
                2
            ],
            [
                2
            ],
            [
                1,
                0,
                2
            ],
            [
                1
            ],
            [
                2
            ],
            [
                1,
                0,
                2
            ],
            [
                -1
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                0,
                2
            ],
            [
                2
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                0,
                2
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            -1
        ],
        "constant_counts": [
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 40,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 34,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 16,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.0030864197530864196,
                "tf.add(x, y)": 0.0030864197530864196,
                "tf.add_n(inputs)": 0.0030864197530864196,
                "tf.argmax(input, axis)": 0.0030864197530864196,
                "tf.argmin(input, axis)": 0.0030864197530864196,
                "tf.argsort(values, axis, stable=True)": 0.0030864197530864196,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.0030864197530864196,
                "tf.boolean_mask(tensor, mask)": 0.0030864197530864196,
                "tf.broadcast_to(input, shape)": 0.0030864197530864196,
                "tf.cast(x, dtype)": 0.0030864197530864196,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.0030864197530864196,
                "tf.concat(values, axis)": 0.0030864197530864196,
                "tf.constant(value)": 0.0030864197530864196,
                "tf.constant(value, dtype)": 0.0030864197530864196,
                "tf.divide(x, y)": 0.0030864197530864196,
                "tf.equal(x, y)": 0.0030864197530864196,
                "tf.exp(x)": 0.0030864197530864196,
                "tf.expand_dims(input, axis)": 0.08950617283950617,
                "tf.eye(num_rows)": 0.0030864197530864196,
                "tf.eye(num_rows, num_columns)": 0.0030864197530864196,
                "tf.eye(num_rows, dtype)": 0.0030864197530864196,
                "tf.fill(dims, value)": 0.0030864197530864196,
                "tf.gather(params, indices)": 0.0030864197530864196,
                "tf.gather(params, indices, axis, batch_dims)": 0.0030864197530864196,
                "tf.gather_nd(params, indices)": 0.0030864197530864196,
                "tf.gather_nd(params, indices, batch_dims)": 0.0030864197530864196,
                "tf.greater(x, y)": 0.0030864197530864196,
                "tf.greater_equal(x, y)": 0.0030864197530864196,
                "tf.math.bincount(arr)": 0.0030864197530864196,
                "tf.math.ceil(x)": 0.0030864197530864196,
                "tf.math.count_nonzero(input)": 0.0030864197530864196,
                "tf.math.count_nonzero(input, axis)": 0.0030864197530864196,
                "tf.math.cumsum(x, axis)": 0.0030864197530864196,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.0030864197530864196,
                "tf.math.divide_no_nan(x, y)": 0.0030864197530864196,
                "tf.math.floor(x)": 0.0030864197530864196,
                "tf.math.log(x)": 0.0030864197530864196,
                "tf.math.logical_and(x, y)": 0.0030864197530864196,
                "tf.math.logical_not(x)": 0.0030864197530864196,
                "tf.math.logical_or(x, y)": 0.0030864197530864196,
                "tf.math.logical_xor(x, y)": 0.0030864197530864196,
                "tf.math.negative(x)": 0.0030864197530864196,
                "tf.math.reciprocal(x)": 0.0030864197530864196,
                "tf.math.reciprocal_no_nan(x)": 0.0030864197530864196,
                "tf.math.segment_max(data, segment_ids)": 0.0030864197530864196,
                "tf.math.segment_mean(data, segment_ids)": 0.0030864197530864196,
                "tf.math.segment_min(data, segment_ids)": 0.0030864197530864196,
                "tf.math.segment_prod(data, segment_ids)": 0.0030864197530864196,
                "tf.math.segment_sum(data, segment_ids)": 0.0030864197530864196,
                "tf.math.squared_difference(x, y)": 0.0030864197530864196,
                "tf.math.top_k(input, k)": 0.0030864197530864196,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.0030864197530864196,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.0030864197530864196,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.0030864197530864196,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.0030864197530864196,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.0030864197530864196,
                "tf.matmul(a, b)": 0.0030864197530864196,
                "tf.maximum(x, y)": 0.0030864197530864196,
                "tf.minimum(x, y)": 0.0030864197530864196,
                "tf.multiply(x, y)": 0.0030864197530864196,
                "tf.not_equal(x, y)": 0.0030864197530864196,
                "tf.one_hot(indices, depth)": 0.0030864197530864196,
                "tf.ones(shape)": 0.0030864197530864196,
                "tf.ones_like(input)": 0.0030864197530864196,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.0030864197530864196,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.0030864197530864196,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.0030864197530864196,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.0030864197530864196,
                "tf.range(start)": 0.0030864197530864196,
                "tf.range(start, limit, delta)": 0.0030864197530864196,
                "tf.reduce_any(input_tensor, axis)": 0.0030864197530864196,
                "tf.reduce_all(input_tensor, axis)": 0.0030864197530864196,
                "tf.reduce_max(input_tensor)": 0.0030864197530864196,
                "tf.reduce_max(input_tensor, axis)": 0.0030864197530864196,
                "tf.reduce_mean(input_tensor)": 0.0030864197530864196,
                "tf.reduce_mean(input_tensor, axis)": 0.0030864197530864196,
                "tf.reduce_min(input_tensor)": 0.0030864197530864196,
                "tf.reduce_min(input_tensor, axis)": 0.0030864197530864196,
                "tf.reduce_prod(input_tensor, axis)": 0.0030864197530864196,
                "tf.reduce_sum(input_tensor)": 0.0030864197530864196,
                "tf.reduce_sum(input_tensor, axis)": 0.006172839506172839,
                "tf.repeat(input, repeats)": 0.0030864197530864196,
                "tf.repeat(input, repeats, axis)": 0.0030864197530864196,
                "tf.reshape(tensor, shape)": 0.0030864197530864196,
                "tf.reverse(tensor, axis)": 0.0030864197530864196,
                "tf.roll(input, shift, axis)": 0.0030864197530864196,
                "tf.round(x)": 0.0030864197530864196,
                "tf.scatter_nd(indices, updates, shape)": 0.0030864197530864196,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.0030864197530864196,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.0030864197530864196,
                "tf.sequence_mask(lengths)": 0.0030864197530864196,
                "tf.sequence_mask(lengths, maxlen)": 0.0030864197530864196,
                "tf.shape(input)": 0.0030864197530864196,
                "tf.sign(x)": 0.0030864197530864196,
                "tf.sort(values, axis)": 0.0030864197530864196,
                "tf.sort(values, axis, direction='DESCENDING')": 0.0030864197530864196,
                "tf.sqrt(x)": 0.05555555555555555,
                "tf.square(x)": 0.05555555555555555,
                "tf.squeeze(input)": 0.0030864197530864196,
                "tf.squeeze(input, axis)": 0.0030864197530864196,
                "tf.stack(values, axis)": 0.0030864197530864196,
                "tf.subtract(x, y)": 0.037037037037037035,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.0030864197530864196,
                "tf.tensordot(a, b, axes)": 0.0030864197530864196,
                "tf.tile(input, multiples)": 0.0030864197530864196,
                "tf.transpose(a)": 0.0030864197530864196,
                "tf.transpose(a, perm)": 0.0030864197530864196,
                "tf.unique_with_counts(x)": 0.0030864197530864196,
                "tf.unstack(value, axis)": 0.0030864197530864196,
                "tf.where(condition)": 0.0030864197530864196,
                "tf.where(condition, x, y)": 0.0030864197530864196,
                "tf.zeros(shape)": 0.0030864197530864196,
                "tf.zeros_like(input)": 0.0030864197530864196,
                "tf.SparseTensor(indices, values, dense_shape)": 0.0030864197530864196,
                "tf.sparse.add(a, b)": 0.0030864197530864196,
                "tf.sparse.concat(axis, sp_inputs)": 0.0030864197530864196,
                "tf.sparse.expand_dims(sp_input, axis)": 0.0030864197530864196,
                "tf.sparse.from_dense(tensor)": 0.0030864197530864196,
                "tf.sparse.maximum(sp_a, sp_b)": 0.0030864197530864196,
                "tf.sparse.minimum(sp_a, sp_b)": 0.0030864197530864196,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.0030864197530864196,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.0030864197530864196,
                "tf.sparse.reset_shape(sp_input)": 0.0030864197530864196,
                "tf.sparse.reshape(sp_input, shape)": 0.0030864197530864196,
                "tf.sparse.retain(sp_input, to_retain)": 0.0030864197530864196,
                "tf.sparse.slice(sp_input, start, size)": 0.0030864197530864196,
                "tf.sparse.split(sp_input, num_split, axis)": 0.0030864197530864196,
                "tf.sparse.to_dense(sp_input)": 0.0030864197530864196,
                "tf.sparse.to_dense(sp_input, default_value)": 0.0030864197530864196,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.0030864197530864196,
                "tf.sparse.transpose(sp_input)": 0.0030864197530864196,
                "tf.sparse.transpose(sp_input, perm)": 0.0030864197530864196,
                "IndexingAxis1Operation": 0.009259259259259259,
                "IndexingOperation": 0.006172839506172839,
                "PairCreationOperation": 0.009259259259259259,
                "SingletonTupleCreationOperation": 0.0030864197530864196,
                "SlicingAxis0BothOperation": 0.0030864197530864196,
                "SlicingAxis0LeftOperation": 0.0030864197530864196,
                "SlicingAxis0RightOperation": 0.0030864197530864196,
                "SlicingAxis1BothOperation": 0.0030864197530864196,
                "SlicingAxis1LeftOperation": 0.0030864197530864196,
                "SlicingAxis1RightOperation": 0.0030864197530864196,
                "TripleCreationOperation": 0.0030864197530864196,
                "PROVIDED_CONSTANT_WEIGHT": 0.0030864197530864196,
                "COMMON_CONSTANT_WEIGHT": 0.10802469135802469,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.0030864197530864196,
                "INPUT_VARIABLE_WEIGHT": 0.12654320987654322,
                "AXIS_CONSTANT_WEIGHT": 0.05246913580246913,
                "SHAPE_CONSTANT_WEIGHT": 0.0030864197530864196,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.0030864197530864196,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.0030864197530864196,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.0030864197530864196,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.0030864197530864196,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.0030864197530864196
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 8,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 3,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 8,
                "tf.pad(tensor, paddings, mode='REFLECT')": 8,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 7,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side='left')": 8,
                "tf.searchsorted(sorted_sequence, values, side='right')": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 8,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction='DESCENDING')": 8,
                "tf.sqrt(x)": 4,
                "tf.square(x)": 4,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 5,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 7,
                "IndexingOperation": 7,
                "PairCreationOperation": 7,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 3,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 3,
                "AXIS_CONSTANT_WEIGHT": 4,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "stackoverflow_31",
        "description": "squared error between two tensors, one being a sparse tensor",
        "target_program": "tf.reduce_sum(tf.square(tf.subtract(in2, tf.sparse.to_dense(in1))))",
        "source": "https://stackoverflow.com/questions/45032668/tensorflow-how-to-compute-the-square-error-between-a-tensor-and-a-sparse-tensor",
        "constants": "[]",
        "examples": {
            "inputs": "tf.SparseTensor(indices=[[0, 0], [0, 1], [1, 1]], values=[1.0, 1.5, -2.0], dense_shape=[2, 2]), [[3.0, 1.0], [0.2, -1.0]],",
            "outputs": "5.29"
        },
        "completions": [
            "return tf.reduce_mean(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))\n",
            "return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))\n",
            "return tf.reduce_sum(tf.sparse.to_dense(tf.sparse.square(tf.sparse.subtract(in1, tf.sparse.from_dense(in2)))))",
            "return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))",
            "return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))",
            "\nreturn tf.reduce_sum(tf.square(tf.sparse.to_dense(in1) - in2))\n",
            "return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))",
            "result = tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))\nreturn result.numpy()\n",
            "return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))\n",
            "error = tf.math.squared_difference(tf.sparse.to_dense(in1, 0.0), in2)\nresult = tf.reduce_sum(error)\nreturn result\n",
            "return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))",
            "return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))\n",
            "result = tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))\nreturn result.numpy()\n",
            "squared_diff = tf.sparse.from_dense(in1) - in2\nsquared_error = tf.reduce_sum(tf.square(squared_diff))\nreturn squared_error.numpy()\n",
            "return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))",
            "return tf.math.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))",
            "return tf.reduce_sum(tf.sparse.square(tf.sparse.subtract(in1, tf.sparse.from_dense(in2))))",
            "return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))",
            "return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))\n",
            "return tf.reduce_mean(tf.math.squared_difference(in2, tf.sparse.to_dense(in1)))"
        ],
        "tf_operators": {
            "tf.math.squared_difference": 16,
            "tf.reduce_mean": 2,
            "tf.sparse.to_dense": 18,
            "tf.reduce_sum": 17,
            "tf.sparse.subtract": 2,
            "tf.sparse.square": 2,
            "tf.sparse.from_dense": 3,
            "tf.square": 2,
            "tf.math.reduce_sum": 1
        },
        "coverage_percentage": 75.0,
        "total_covered": 3,
        "total_in_target": 4,
        "parsed_constants": [
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            []
        ],
        "all_constants": [],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 40,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 0,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.003952569169960474,
                "tf.add(x, y)": 0.003952569169960474,
                "tf.add_n(inputs)": 0.003952569169960474,
                "tf.argmax(input, axis)": 0.003952569169960474,
                "tf.argmin(input, axis)": 0.003952569169960474,
                "tf.argsort(values, axis, stable=True)": 0.003952569169960474,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.003952569169960474,
                "tf.boolean_mask(tensor, mask)": 0.003952569169960474,
                "tf.broadcast_to(input, shape)": 0.003952569169960474,
                "tf.cast(x, dtype)": 0.003952569169960474,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.003952569169960474,
                "tf.concat(values, axis)": 0.003952569169960474,
                "tf.constant(value)": 0.003952569169960474,
                "tf.constant(value, dtype)": 0.003952569169960474,
                "tf.divide(x, y)": 0.003952569169960474,
                "tf.equal(x, y)": 0.003952569169960474,
                "tf.exp(x)": 0.003952569169960474,
                "tf.expand_dims(input, axis)": 0.003952569169960474,
                "tf.eye(num_rows)": 0.003952569169960474,
                "tf.eye(num_rows, num_columns)": 0.003952569169960474,
                "tf.eye(num_rows, dtype)": 0.003952569169960474,
                "tf.fill(dims, value)": 0.003952569169960474,
                "tf.gather(params, indices)": 0.003952569169960474,
                "tf.gather(params, indices, axis, batch_dims)": 0.003952569169960474,
                "tf.gather_nd(params, indices)": 0.003952569169960474,
                "tf.gather_nd(params, indices, batch_dims)": 0.003952569169960474,
                "tf.greater(x, y)": 0.003952569169960474,
                "tf.greater_equal(x, y)": 0.003952569169960474,
                "tf.math.bincount(arr)": 0.003952569169960474,
                "tf.math.ceil(x)": 0.003952569169960474,
                "tf.math.count_nonzero(input)": 0.003952569169960474,
                "tf.math.count_nonzero(input, axis)": 0.003952569169960474,
                "tf.math.cumsum(x, axis)": 0.003952569169960474,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.003952569169960474,
                "tf.math.divide_no_nan(x, y)": 0.003952569169960474,
                "tf.math.floor(x)": 0.003952569169960474,
                "tf.math.log(x)": 0.003952569169960474,
                "tf.math.logical_and(x, y)": 0.003952569169960474,
                "tf.math.logical_not(x)": 0.003952569169960474,
                "tf.math.logical_or(x, y)": 0.003952569169960474,
                "tf.math.logical_xor(x, y)": 0.003952569169960474,
                "tf.math.negative(x)": 0.003952569169960474,
                "tf.math.reciprocal(x)": 0.003952569169960474,
                "tf.math.reciprocal_no_nan(x)": 0.003952569169960474,
                "tf.math.segment_max(data, segment_ids)": 0.003952569169960474,
                "tf.math.segment_mean(data, segment_ids)": 0.003952569169960474,
                "tf.math.segment_min(data, segment_ids)": 0.003952569169960474,
                "tf.math.segment_prod(data, segment_ids)": 0.003952569169960474,
                "tf.math.segment_sum(data, segment_ids)": 0.003952569169960474,
                "tf.math.squared_difference(x, y)": 0.06719367588932806,
                "tf.math.top_k(input, k)": 0.003952569169960474,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.003952569169960474,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.003952569169960474,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.003952569169960474,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.003952569169960474,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.003952569169960474,
                "tf.matmul(a, b)": 0.003952569169960474,
                "tf.maximum(x, y)": 0.003952569169960474,
                "tf.minimum(x, y)": 0.003952569169960474,
                "tf.multiply(x, y)": 0.003952569169960474,
                "tf.not_equal(x, y)": 0.003952569169960474,
                "tf.one_hot(indices, depth)": 0.003952569169960474,
                "tf.ones(shape)": 0.003952569169960474,
                "tf.ones_like(input)": 0.003952569169960474,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.003952569169960474,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.003952569169960474,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.003952569169960474,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.003952569169960474,
                "tf.range(start)": 0.003952569169960474,
                "tf.range(start, limit, delta)": 0.003952569169960474,
                "tf.reduce_any(input_tensor, axis)": 0.003952569169960474,
                "tf.reduce_all(input_tensor, axis)": 0.003952569169960474,
                "tf.reduce_max(input_tensor)": 0.003952569169960474,
                "tf.reduce_max(input_tensor, axis)": 0.003952569169960474,
                "tf.reduce_mean(input_tensor)": 0.011857707509881422,
                "tf.reduce_mean(input_tensor, axis)": 0.003952569169960474,
                "tf.reduce_min(input_tensor)": 0.003952569169960474,
                "tf.reduce_min(input_tensor, axis)": 0.003952569169960474,
                "tf.reduce_prod(input_tensor, axis)": 0.003952569169960474,
                "tf.reduce_sum(input_tensor)": 0.07114624505928854,
                "tf.reduce_sum(input_tensor, axis)": 0.003952569169960474,
                "tf.repeat(input, repeats)": 0.003952569169960474,
                "tf.repeat(input, repeats, axis)": 0.003952569169960474,
                "tf.reshape(tensor, shape)": 0.003952569169960474,
                "tf.reverse(tensor, axis)": 0.003952569169960474,
                "tf.roll(input, shift, axis)": 0.003952569169960474,
                "tf.round(x)": 0.003952569169960474,
                "tf.scatter_nd(indices, updates, shape)": 0.003952569169960474,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.003952569169960474,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.003952569169960474,
                "tf.sequence_mask(lengths)": 0.003952569169960474,
                "tf.sequence_mask(lengths, maxlen)": 0.003952569169960474,
                "tf.shape(input)": 0.003952569169960474,
                "tf.sign(x)": 0.003952569169960474,
                "tf.sort(values, axis)": 0.003952569169960474,
                "tf.sort(values, axis, direction='DESCENDING')": 0.003952569169960474,
                "tf.sqrt(x)": 0.003952569169960474,
                "tf.square(x)": 0.011857707509881422,
                "tf.squeeze(input)": 0.003952569169960474,
                "tf.squeeze(input, axis)": 0.003952569169960474,
                "tf.stack(values, axis)": 0.003952569169960474,
                "tf.subtract(x, y)": 0.003952569169960474,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.003952569169960474,
                "tf.tensordot(a, b, axes)": 0.003952569169960474,
                "tf.tile(input, multiples)": 0.003952569169960474,
                "tf.transpose(a)": 0.003952569169960474,
                "tf.transpose(a, perm)": 0.003952569169960474,
                "tf.unique_with_counts(x)": 0.003952569169960474,
                "tf.unstack(value, axis)": 0.003952569169960474,
                "tf.where(condition)": 0.003952569169960474,
                "tf.where(condition, x, y)": 0.003952569169960474,
                "tf.zeros(shape)": 0.003952569169960474,
                "tf.zeros_like(input)": 0.003952569169960474,
                "tf.SparseTensor(indices, values, dense_shape)": 0.003952569169960474,
                "tf.sparse.add(a, b)": 0.003952569169960474,
                "tf.sparse.concat(axis, sp_inputs)": 0.003952569169960474,
                "tf.sparse.expand_dims(sp_input, axis)": 0.003952569169960474,
                "tf.sparse.from_dense(tensor)": 0.015810276679841896,
                "tf.sparse.maximum(sp_a, sp_b)": 0.003952569169960474,
                "tf.sparse.minimum(sp_a, sp_b)": 0.003952569169960474,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.003952569169960474,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.003952569169960474,
                "tf.sparse.reset_shape(sp_input)": 0.003952569169960474,
                "tf.sparse.reshape(sp_input, shape)": 0.003952569169960474,
                "tf.sparse.retain(sp_input, to_retain)": 0.003952569169960474,
                "tf.sparse.slice(sp_input, start, size)": 0.003952569169960474,
                "tf.sparse.split(sp_input, num_split, axis)": 0.003952569169960474,
                "tf.sparse.to_dense(sp_input)": 0.07114624505928854,
                "tf.sparse.to_dense(sp_input, default_value)": 0.007905138339920948,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.003952569169960474,
                "tf.sparse.transpose(sp_input)": 0.003952569169960474,
                "tf.sparse.transpose(sp_input, perm)": 0.003952569169960474,
                "IndexingAxis1Operation": 0.003952569169960474,
                "IndexingOperation": 0.003952569169960474,
                "PairCreationOperation": 0.003952569169960474,
                "SingletonTupleCreationOperation": 0.003952569169960474,
                "SlicingAxis0BothOperation": 0.003952569169960474,
                "SlicingAxis0LeftOperation": 0.003952569169960474,
                "SlicingAxis0RightOperation": 0.003952569169960474,
                "SlicingAxis1BothOperation": 0.003952569169960474,
                "SlicingAxis1LeftOperation": 0.003952569169960474,
                "SlicingAxis1RightOperation": 0.003952569169960474,
                "TripleCreationOperation": 0.003952569169960474,
                "PROVIDED_CONSTANT_WEIGHT": 0.003952569169960474,
                "COMMON_CONSTANT_WEIGHT": 0.003952569169960474,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.003952569169960474,
                "INPUT_VARIABLE_WEIGHT": 0.16205533596837945,
                "AXIS_CONSTANT_WEIGHT": 0.003952569169960474,
                "SHAPE_CONSTANT_WEIGHT": 0.003952569169960474,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.003952569169960474,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.003952569169960474,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.003952569169960474,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.003952569169960474,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.003952569169960474
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 8,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 8,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 4,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 8,
                "tf.pad(tensor, paddings, mode='REFLECT')": 8,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 6,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 4,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side='left')": 8,
                "tf.searchsorted(sorted_sequence, values, side='right')": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 8,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction='DESCENDING')": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 6,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 6,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 4,
                "tf.sparse.to_dense(sp_input, default_value)": 7,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 8,
                "PairCreationOperation": 8,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 8,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 3,
                "AXIS_CONSTANT_WEIGHT": 8,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "stackoverflow_32",
        "description": "weighted sum across rows, where the column index is the weight",
        "target_program": "tf.tensordot(in1, tf.cast(tf.range(4), tf.float32), 1)",
        "source": "https://stackoverflow.com/questions/48659449/how-to-compute-the-weighted-sum-of-a-tensor-in-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[[0.1, 0.6, 0.2, 0.1], [0.3, 0.1, 0.4, 0.2], [0.2, 0.1, 0.2, 0.5]],]",
            "outputs": "[1.3, 1.5, 2.0]"
        },
        "completions": [
            "return tf.reduce_sum(tf.multiply(in1, tf.range(1, tf.shape(in1)[1] + 1)), axis=1)",
            "return tf.reduce_sum(tf.multiply(in1, tf.constant([[0, 1, 2, 3]], dtype=tf.float32)), axis=1)",
            "return tf.reduce_sum(tf.multiply(in1, tf.range(tf.shape(in1)[1], dtype=tf.float32)), axis=1)",
            "return tf.reduce_sum(tf.multiply(in1, tf.eye(4)), axis=1)",
            "return tf.reduce_sum(tf.multiply(in1, tf.eye(4)), axis=1)",
            "return tf.reduce_sum(tf.multiply(in1, tf.range(1, tf.shape(in1)[-1] + 1)), axis=1)",
            "return tf.reduce_sum(in1 * tf.range(tf.shape(in1)[1]), axis=1)\n",
            "return tf.reduce_sum(tf.multiply(in1, tf.cast(tf.range(tf.shape(in1)[-1]), in1.dtype)), axis=1)",
            "def transform(in1):\n    weights = tf.range(tf.shape(in1)[-1], dtype=tf.float32)\n    return tf.reduce_sum(in1 * weights, axis=1)\n",
            "return tf.reduce_sum(tf.multiply(in1, tf.constant([[0, 1, 2, 3]], dtype=tf.float32)), axis=-1)",
            "def transform(in1):\n    col_indices = tf.range(tf.cast(tf.shape(in1)[1], tf.float32))\n    weighted_sum = tf.reduce_sum(in1 * tf.cast(col_indices, tf.float32), axis=1)\n    return weighted_sum\n",
            "return tf.reduce_sum(tf.multiply(in1, tf.cast(tf.range(tf.shape(in1)[1]), tf.float32)), axis=1)",
            "return tf.reduce_sum(tf.multiply(in1, tf.range(in1.shape[1], dtype=in1.dtype)), axis=1)\n",
            "weights = tf.range(tf.shape(in1)[1])\nreturn tf.reduce_sum(tf.multiply(in1, weights), axis=1)\n",
            "return tf.reduce_sum(tf.multiply(in1, tf.constant([[0],[1],[2]])), axis=1)",
            "return tf.reduce_sum(tf.multiply(in1, tf.cast(tf.range(tf.shape(in1)[1]), tf.float32)), axis=1)",
            "return tf.reduce_sum(tf.multiply(in1, tf.constant([[0, 1, 2, 3]], dtype=tf.float32)), axis=1)",
            "return tf.reduce_sum(tf.multiply(in1, tf.range(tf.shape(in1)[1], dtype=tf.float32)), axis=1)",
            "return tf.reduce_sum(tf.multiply(in1, tf.range(tf.shape(in1)[1]) + 1), axis=1)",
            "return tf.reduce_sum(tf.multiply(in1, tf.constant([[0, 1, 2, 3]], dtype=tf.float32)), axis=1)"
        ],
        "tf_operators": {
            "tf.range": 13,
            "tf.shape": 12,
            "tf.reduce_sum": 20,
            "tf.multiply": 17,
            "tf.float32": 10,
            "tf.constant": 5,
            "tf.eye": 2,
            "tf.cast": 4
        },
        "coverage_percentage": 75.0,
        "total_covered": 3,
        "total_in_target": 4,
        "parsed_constants": [
            [
                1,
                1,
                1,
                1
            ],
            [
                0,
                1,
                2,
                3,
                1
            ],
            [
                1,
                1
            ],
            [
                4,
                1
            ],
            [
                4,
                1
            ],
            [
                1,
                -1,
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                -1,
                1
            ],
            [
                -1,
                1
            ],
            [
                0,
                1,
                2,
                3,
                -1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                0,
                1,
                2,
                1
            ],
            [
                1,
                1
            ],
            [
                0,
                1,
                2,
                3,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1,
                1
            ],
            [
                0,
                1,
                2,
                3,
                1
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            3,
            4,
            -1
        ],
        "constant_counts": [
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 2,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 32,
            "shape": 6,
            "tf_bool": 0,
            "provided": 0,
            "common": 48,
            "shape_tuple": 0,
            "tf_float32": 11,
            "axis": 5,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.0031446540880503146,
                "tf.add(x, y)": 0.0031446540880503146,
                "tf.add_n(inputs)": 0.0031446540880503146,
                "tf.argmax(input, axis)": 0.0031446540880503146,
                "tf.argmin(input, axis)": 0.0031446540880503146,
                "tf.argsort(values, axis, stable=True)": 0.0031446540880503146,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.0031446540880503146,
                "tf.boolean_mask(tensor, mask)": 0.0031446540880503146,
                "tf.broadcast_to(input, shape)": 0.0031446540880503146,
                "tf.cast(x, dtype)": 0.018867924528301886,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.0031446540880503146,
                "tf.concat(values, axis)": 0.0031446540880503146,
                "tf.constant(value)": 0.006289308176100629,
                "tf.constant(value, dtype)": 0.0031446540880503146,
                "tf.divide(x, y)": 0.0031446540880503146,
                "tf.equal(x, y)": 0.0031446540880503146,
                "tf.exp(x)": 0.0031446540880503146,
                "tf.expand_dims(input, axis)": 0.0031446540880503146,
                "tf.eye(num_rows)": 0.009433962264150943,
                "tf.eye(num_rows, num_columns)": 0.0031446540880503146,
                "tf.eye(num_rows, dtype)": 0.0031446540880503146,
                "tf.fill(dims, value)": 0.0031446540880503146,
                "tf.gather(params, indices)": 0.0031446540880503146,
                "tf.gather(params, indices, axis, batch_dims)": 0.0031446540880503146,
                "tf.gather_nd(params, indices)": 0.0031446540880503146,
                "tf.gather_nd(params, indices, batch_dims)": 0.0031446540880503146,
                "tf.greater(x, y)": 0.0031446540880503146,
                "tf.greater_equal(x, y)": 0.0031446540880503146,
                "tf.math.bincount(arr)": 0.0031446540880503146,
                "tf.math.ceil(x)": 0.0031446540880503146,
                "tf.math.count_nonzero(input)": 0.0031446540880503146,
                "tf.math.count_nonzero(input, axis)": 0.0031446540880503146,
                "tf.math.cumsum(x, axis)": 0.0031446540880503146,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.0031446540880503146,
                "tf.math.divide_no_nan(x, y)": 0.0031446540880503146,
                "tf.math.floor(x)": 0.0031446540880503146,
                "tf.math.log(x)": 0.0031446540880503146,
                "tf.math.logical_and(x, y)": 0.0031446540880503146,
                "tf.math.logical_not(x)": 0.0031446540880503146,
                "tf.math.logical_or(x, y)": 0.0031446540880503146,
                "tf.math.logical_xor(x, y)": 0.0031446540880503146,
                "tf.math.negative(x)": 0.0031446540880503146,
                "tf.math.reciprocal(x)": 0.0031446540880503146,
                "tf.math.reciprocal_no_nan(x)": 0.0031446540880503146,
                "tf.math.segment_max(data, segment_ids)": 0.0031446540880503146,
                "tf.math.segment_mean(data, segment_ids)": 0.0031446540880503146,
                "tf.math.segment_min(data, segment_ids)": 0.0031446540880503146,
                "tf.math.segment_prod(data, segment_ids)": 0.0031446540880503146,
                "tf.math.segment_sum(data, segment_ids)": 0.0031446540880503146,
                "tf.math.squared_difference(x, y)": 0.0031446540880503146,
                "tf.math.top_k(input, k)": 0.0031446540880503146,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.0031446540880503146,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.0031446540880503146,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.0031446540880503146,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.0031446540880503146,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.0031446540880503146,
                "tf.matmul(a, b)": 0.0031446540880503146,
                "tf.maximum(x, y)": 0.0031446540880503146,
                "tf.minimum(x, y)": 0.0031446540880503146,
                "tf.multiply(x, y)": 0.05660377358490566,
                "tf.not_equal(x, y)": 0.0031446540880503146,
                "tf.one_hot(indices, depth)": 0.0031446540880503146,
                "tf.ones(shape)": 0.0031446540880503146,
                "tf.ones_like(input)": 0.0031446540880503146,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.0031446540880503146,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.0031446540880503146,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.0031446540880503146,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.0031446540880503146,
                "tf.range(start)": 0.025157232704402517,
                "tf.range(start, limit, delta)": 0.015723270440251572,
                "tf.reduce_any(input_tensor, axis)": 0.0031446540880503146,
                "tf.reduce_all(input_tensor, axis)": 0.0031446540880503146,
                "tf.reduce_max(input_tensor)": 0.0031446540880503146,
                "tf.reduce_max(input_tensor, axis)": 0.0031446540880503146,
                "tf.reduce_mean(input_tensor)": 0.0031446540880503146,
                "tf.reduce_mean(input_tensor, axis)": 0.0031446540880503146,
                "tf.reduce_min(input_tensor)": 0.0031446540880503146,
                "tf.reduce_min(input_tensor, axis)": 0.0031446540880503146,
                "tf.reduce_prod(input_tensor, axis)": 0.0031446540880503146,
                "tf.reduce_sum(input_tensor)": 0.0031446540880503146,
                "tf.reduce_sum(input_tensor, axis)": 0.0031446540880503146,
                "tf.repeat(input, repeats)": 0.0031446540880503146,
                "tf.repeat(input, repeats, axis)": 0.0031446540880503146,
                "tf.reshape(tensor, shape)": 0.0031446540880503146,
                "tf.reverse(tensor, axis)": 0.0031446540880503146,
                "tf.roll(input, shift, axis)": 0.0031446540880503146,
                "tf.round(x)": 0.0031446540880503146,
                "tf.scatter_nd(indices, updates, shape)": 0.0031446540880503146,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.0031446540880503146,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.0031446540880503146,
                "tf.sequence_mask(lengths)": 0.0031446540880503146,
                "tf.sequence_mask(lengths, maxlen)": 0.0031446540880503146,
                "tf.shape(input)": 0.040880503144654086,
                "tf.sign(x)": 0.0031446540880503146,
                "tf.sort(values, axis)": 0.0031446540880503146,
                "tf.sort(values, axis, direction='DESCENDING')": 0.0031446540880503146,
                "tf.sqrt(x)": 0.0031446540880503146,
                "tf.square(x)": 0.0031446540880503146,
                "tf.squeeze(input)": 0.0031446540880503146,
                "tf.squeeze(input, axis)": 0.0031446540880503146,
                "tf.stack(values, axis)": 0.0031446540880503146,
                "tf.subtract(x, y)": 0.0031446540880503146,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.0031446540880503146,
                "tf.tensordot(a, b, axes)": 0.0031446540880503146,
                "tf.tile(input, multiples)": 0.0031446540880503146,
                "tf.transpose(a)": 0.0031446540880503146,
                "tf.transpose(a, perm)": 0.0031446540880503146,
                "tf.unique_with_counts(x)": 0.0031446540880503146,
                "tf.unstack(value, axis)": 0.0031446540880503146,
                "tf.where(condition)": 0.0031446540880503146,
                "tf.where(condition, x, y)": 0.0031446540880503146,
                "tf.zeros(shape)": 0.0031446540880503146,
                "tf.zeros_like(input)": 0.0031446540880503146,
                "tf.SparseTensor(indices, values, dense_shape)": 0.0031446540880503146,
                "tf.sparse.add(a, b)": 0.0031446540880503146,
                "tf.sparse.concat(axis, sp_inputs)": 0.0031446540880503146,
                "tf.sparse.expand_dims(sp_input, axis)": 0.0031446540880503146,
                "tf.sparse.from_dense(tensor)": 0.0031446540880503146,
                "tf.sparse.maximum(sp_a, sp_b)": 0.0031446540880503146,
                "tf.sparse.minimum(sp_a, sp_b)": 0.0031446540880503146,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.0031446540880503146,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.0031446540880503146,
                "tf.sparse.reset_shape(sp_input)": 0.0031446540880503146,
                "tf.sparse.reshape(sp_input, shape)": 0.0031446540880503146,
                "tf.sparse.retain(sp_input, to_retain)": 0.0031446540880503146,
                "tf.sparse.slice(sp_input, start, size)": 0.0031446540880503146,
                "tf.sparse.split(sp_input, num_split, axis)": 0.0031446540880503146,
                "tf.sparse.to_dense(sp_input)": 0.0031446540880503146,
                "tf.sparse.to_dense(sp_input, default_value)": 0.0031446540880503146,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.0031446540880503146,
                "tf.sparse.transpose(sp_input)": 0.0031446540880503146,
                "tf.sparse.transpose(sp_input, perm)": 0.0031446540880503146,
                "IndexingAxis1Operation": 0.0031446540880503146,
                "IndexingOperation": 0.0440251572327044,
                "PairCreationOperation": 0.0031446540880503146,
                "SingletonTupleCreationOperation": 0.0031446540880503146,
                "SlicingAxis0BothOperation": 0.0031446540880503146,
                "SlicingAxis0LeftOperation": 0.0031446540880503146,
                "SlicingAxis0RightOperation": 0.0031446540880503146,
                "SlicingAxis1BothOperation": 0.0031446540880503146,
                "SlicingAxis1LeftOperation": 0.0031446540880503146,
                "SlicingAxis1RightOperation": 0.0031446540880503146,
                "TripleCreationOperation": 0.0031446540880503146,
                "PROVIDED_CONSTANT_WEIGHT": 0.0031446540880503146,
                "COMMON_CONSTANT_WEIGHT": 0.1540880503144654,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.0031446540880503146,
                "INPUT_VARIABLE_WEIGHT": 0.10377358490566038,
                "AXIS_CONSTANT_WEIGHT": 0.018867924528301886,
                "SHAPE_CONSTANT_WEIGHT": 0.0220125786163522,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.0031446540880503146,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.0031446540880503146,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.03773584905660377,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.0031446540880503146,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.0031446540880503146
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 6,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 7,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 8,
                "tf.eye(num_rows)": 7,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 4,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 8,
                "tf.pad(tensor, paddings, mode='REFLECT')": 8,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 8,
                "tf.range(start)": 5,
                "tf.range(start, limit, delta)": 6,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side='left')": 8,
                "tf.searchsorted(sorted_sequence, values, side='right')": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 5,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction='DESCENDING')": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 5,
                "PairCreationOperation": 8,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 3,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 3,
                "AXIS_CONSTANT_WEIGHT": 6,
                "SHAPE_CONSTANT_WEIGHT": 6,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 5,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "stackoverflow_33",
        "description": "find the minimum distance between two sets of points",
        "target_program": "tf.reduce_min(tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, 0), tf.expand_dims(in2, 1))), axis=2), axis=1)",
        "source": "https://stackoverflow.com/questions/40558251/computing-minimum-distance-for-each-element-in-a-tensor-relative-to-another-tens",
        "constants": "[]",
        "examples": {
            "inputs": "[[[.3, .1, .4], [.1, .5, .9], [.2, .6, .5], [.3, .5, .8],[.9, .7, .9]],[[.3, .2, .3], [.8, .4, .6], [.2, .6, .4], [.3, .3, .8]],]",
            "outputs": "[0.02, 0.19, 0.01, 0.04]"
        },
        "completions": [
            "dist = tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)\nreturn dist\n",
            "dist = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\ndist = tf.reduce_min(tf.reduce_sum(tf.square(dist), axis=-1), axis=1)\nreturn dist\n",
            "return tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), 1)\n",
            "return tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)",
            "return tf.reduce_min(tf.math.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)\n",
            "pairwise_diff = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\ndistances = tf.sqrt(tf.reduce_sum(tf.square(pairwise_diff), axis=2))\nreturn tf.reduce_min(distances, axis=1)\n",
            "distances = tf.sqrt(tf.reduce_min(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2), axis=1))\nreturn distances\n",
            "distances = tf.reduce_min(tf.reduce_sum(tf.square(tf.expand_dims(in1, axis=1) - tf.expand_dims(in2, axis=0)), axis=2), axis=1)\nreturn distances\n",
            "dist = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\ndist_squared = tf.reduce_sum(tf.square(dist), axis=2)\nreturn tf.sqrt(tf.reduce_min(dist_squared, axis=1))\n",
            "return tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)\n",
            "expanded_in1 = tf.expand_dims(in1, axis=1)\nexpanded_in2 = tf.expand_dims(in2, axis=0)\ndiff = tf.math.squared_difference(expanded_in1, expanded_in2)\ndistances = tf.reduce_min(tf.reduce_sum(diff, axis=2), axis=1)\nreturn tf.sqrt(distances)\n",
            "dist = tf.reduce_min(tf.math.reduce_euclidean_distance(in1, in2), axis=1)\nreturn dist\n",
            "distances = tf.reduce_min(tf.math.squared_difference(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0)), axis=2)\nreturn tf.sqrt(distances)\n",
            "return tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)\n",
            "dist = tf.math.reduce_min(tf.math.reduce_sum(tf.math.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2), axis=1)\nreturn dist\n",
            "distances = tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)\nreturn distances\n",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2))\n",
            "distances = tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)\nreturn distances.numpy()\n",
            "def transform(in1, in2):\n    distance = tf.reduce_min(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2), axis=1)\n    return distance\n",
            "dist = tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=-1))\nreturn tf.reduce_min(dist, axis=1)\n"
        ],
        "tf_operators": {
            "tf.sqrt": 14,
            "tf.square": 16,
            "tf.reduce_sum": 17,
            "tf.reduce_min": 18,
            "tf.expand_dims": 19,
            "tf.math.sqrt": 1,
            "tf.math.squared_difference": 2,
            "tf.math.reduce_euclidean_distance": 1,
            "tf.math.square": 1,
            "tf.math.reduce_sum": 1,
            "tf.math.reduce_min": 1
        },
        "coverage_percentage": 80.0,
        "total_covered": 4,
        "total_in_target": 5,
        "parsed_constants": [
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                -1,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                -1,
                1
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            -1
        ],
        "constant_counts": [
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 40,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 58,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 17,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.002932551319648094,
                "tf.add(x, y)": 0.002932551319648094,
                "tf.add_n(inputs)": 0.002932551319648094,
                "tf.argmax(input, axis)": 0.002932551319648094,
                "tf.argmin(input, axis)": 0.002932551319648094,
                "tf.argsort(values, axis, stable=True)": 0.002932551319648094,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.002932551319648094,
                "tf.boolean_mask(tensor, mask)": 0.002932551319648094,
                "tf.broadcast_to(input, shape)": 0.002932551319648094,
                "tf.cast(x, dtype)": 0.002932551319648094,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.002932551319648094,
                "tf.concat(values, axis)": 0.002932551319648094,
                "tf.constant(value)": 0.002932551319648094,
                "tf.constant(value, dtype)": 0.002932551319648094,
                "tf.divide(x, y)": 0.002932551319648094,
                "tf.equal(x, y)": 0.002932551319648094,
                "tf.exp(x)": 0.002932551319648094,
                "tf.expand_dims(input, axis)": 0.11436950146627566,
                "tf.eye(num_rows)": 0.002932551319648094,
                "tf.eye(num_rows, num_columns)": 0.002932551319648094,
                "tf.eye(num_rows, dtype)": 0.002932551319648094,
                "tf.fill(dims, value)": 0.002932551319648094,
                "tf.gather(params, indices)": 0.002932551319648094,
                "tf.gather(params, indices, axis, batch_dims)": 0.002932551319648094,
                "tf.gather_nd(params, indices)": 0.002932551319648094,
                "tf.gather_nd(params, indices, batch_dims)": 0.002932551319648094,
                "tf.greater(x, y)": 0.002932551319648094,
                "tf.greater_equal(x, y)": 0.002932551319648094,
                "tf.math.bincount(arr)": 0.002932551319648094,
                "tf.math.ceil(x)": 0.002932551319648094,
                "tf.math.count_nonzero(input)": 0.002932551319648094,
                "tf.math.count_nonzero(input, axis)": 0.002932551319648094,
                "tf.math.cumsum(x, axis)": 0.002932551319648094,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.002932551319648094,
                "tf.math.divide_no_nan(x, y)": 0.002932551319648094,
                "tf.math.floor(x)": 0.002932551319648094,
                "tf.math.log(x)": 0.002932551319648094,
                "tf.math.logical_and(x, y)": 0.002932551319648094,
                "tf.math.logical_not(x)": 0.002932551319648094,
                "tf.math.logical_or(x, y)": 0.002932551319648094,
                "tf.math.logical_xor(x, y)": 0.002932551319648094,
                "tf.math.negative(x)": 0.002932551319648094,
                "tf.math.reciprocal(x)": 0.002932551319648094,
                "tf.math.reciprocal_no_nan(x)": 0.002932551319648094,
                "tf.math.segment_max(data, segment_ids)": 0.002932551319648094,
                "tf.math.segment_mean(data, segment_ids)": 0.002932551319648094,
                "tf.math.segment_min(data, segment_ids)": 0.002932551319648094,
                "tf.math.segment_prod(data, segment_ids)": 0.002932551319648094,
                "tf.math.segment_sum(data, segment_ids)": 0.002932551319648094,
                "tf.math.squared_difference(x, y)": 0.008797653958944282,
                "tf.math.top_k(input, k)": 0.002932551319648094,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.002932551319648094,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.002932551319648094,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.002932551319648094,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.002932551319648094,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.002932551319648094,
                "tf.matmul(a, b)": 0.002932551319648094,
                "tf.maximum(x, y)": 0.002932551319648094,
                "tf.minimum(x, y)": 0.002932551319648094,
                "tf.multiply(x, y)": 0.002932551319648094,
                "tf.not_equal(x, y)": 0.002932551319648094,
                "tf.one_hot(indices, depth)": 0.002932551319648094,
                "tf.ones(shape)": 0.002932551319648094,
                "tf.ones_like(input)": 0.002932551319648094,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.002932551319648094,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.002932551319648094,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.002932551319648094,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.002932551319648094,
                "tf.range(start)": 0.002932551319648094,
                "tf.range(start, limit, delta)": 0.002932551319648094,
                "tf.reduce_any(input_tensor, axis)": 0.002932551319648094,
                "tf.reduce_all(input_tensor, axis)": 0.002932551319648094,
                "tf.reduce_max(input_tensor)": 0.002932551319648094,
                "tf.reduce_max(input_tensor, axis)": 0.002932551319648094,
                "tf.reduce_mean(input_tensor)": 0.002932551319648094,
                "tf.reduce_mean(input_tensor, axis)": 0.002932551319648094,
                "tf.reduce_min(input_tensor)": 0.002932551319648094,
                "tf.reduce_min(input_tensor, axis)": 0.005865102639296188,
                "tf.reduce_prod(input_tensor, axis)": 0.002932551319648094,
                "tf.reduce_sum(input_tensor)": 0.002932551319648094,
                "tf.reduce_sum(input_tensor, axis)": 0.002932551319648094,
                "tf.repeat(input, repeats)": 0.002932551319648094,
                "tf.repeat(input, repeats, axis)": 0.002932551319648094,
                "tf.reshape(tensor, shape)": 0.002932551319648094,
                "tf.reverse(tensor, axis)": 0.002932551319648094,
                "tf.roll(input, shift, axis)": 0.002932551319648094,
                "tf.round(x)": 0.002932551319648094,
                "tf.scatter_nd(indices, updates, shape)": 0.002932551319648094,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.002932551319648094,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.002932551319648094,
                "tf.sequence_mask(lengths)": 0.002932551319648094,
                "tf.sequence_mask(lengths, maxlen)": 0.002932551319648094,
                "tf.shape(input)": 0.002932551319648094,
                "tf.sign(x)": 0.002932551319648094,
                "tf.sort(values, axis)": 0.002932551319648094,
                "tf.sort(values, axis, direction='DESCENDING')": 0.002932551319648094,
                "tf.sqrt(x)": 0.04398826979472141,
                "tf.square(x)": 0.04985337243401759,
                "tf.squeeze(input)": 0.002932551319648094,
                "tf.squeeze(input, axis)": 0.002932551319648094,
                "tf.stack(values, axis)": 0.002932551319648094,
                "tf.subtract(x, y)": 0.002932551319648094,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.002932551319648094,
                "tf.tensordot(a, b, axes)": 0.002932551319648094,
                "tf.tile(input, multiples)": 0.002932551319648094,
                "tf.transpose(a)": 0.002932551319648094,
                "tf.transpose(a, perm)": 0.002932551319648094,
                "tf.unique_with_counts(x)": 0.002932551319648094,
                "tf.unstack(value, axis)": 0.002932551319648094,
                "tf.where(condition)": 0.002932551319648094,
                "tf.where(condition, x, y)": 0.002932551319648094,
                "tf.zeros(shape)": 0.002932551319648094,
                "tf.zeros_like(input)": 0.002932551319648094,
                "tf.SparseTensor(indices, values, dense_shape)": 0.002932551319648094,
                "tf.sparse.add(a, b)": 0.002932551319648094,
                "tf.sparse.concat(axis, sp_inputs)": 0.002932551319648094,
                "tf.sparse.expand_dims(sp_input, axis)": 0.002932551319648094,
                "tf.sparse.from_dense(tensor)": 0.002932551319648094,
                "tf.sparse.maximum(sp_a, sp_b)": 0.002932551319648094,
                "tf.sparse.minimum(sp_a, sp_b)": 0.002932551319648094,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.002932551319648094,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.002932551319648094,
                "tf.sparse.reset_shape(sp_input)": 0.002932551319648094,
                "tf.sparse.reshape(sp_input, shape)": 0.002932551319648094,
                "tf.sparse.retain(sp_input, to_retain)": 0.002932551319648094,
                "tf.sparse.slice(sp_input, start, size)": 0.002932551319648094,
                "tf.sparse.split(sp_input, num_split, axis)": 0.002932551319648094,
                "tf.sparse.to_dense(sp_input)": 0.002932551319648094,
                "tf.sparse.to_dense(sp_input, default_value)": 0.002932551319648094,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.002932551319648094,
                "tf.sparse.transpose(sp_input)": 0.002932551319648094,
                "tf.sparse.transpose(sp_input, perm)": 0.002932551319648094,
                "IndexingAxis1Operation": 0.002932551319648094,
                "IndexingOperation": 0.002932551319648094,
                "PairCreationOperation": 0.002932551319648094,
                "SingletonTupleCreationOperation": 0.002932551319648094,
                "SlicingAxis0BothOperation": 0.002932551319648094,
                "SlicingAxis0LeftOperation": 0.002932551319648094,
                "SlicingAxis0RightOperation": 0.002932551319648094,
                "SlicingAxis1BothOperation": 0.002932551319648094,
                "SlicingAxis1LeftOperation": 0.002932551319648094,
                "SlicingAxis1RightOperation": 0.002932551319648094,
                "TripleCreationOperation": 0.002932551319648094,
                "PROVIDED_CONSTANT_WEIGHT": 0.002932551319648094,
                "COMMON_CONSTANT_WEIGHT": 0.17302052785923755,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.002932551319648094,
                "INPUT_VARIABLE_WEIGHT": 0.12023460410557185,
                "AXIS_CONSTANT_WEIGHT": 0.05278592375366569,
                "SHAPE_CONSTANT_WEIGHT": 0.002932551319648094,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.002932551319648094,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.002932551319648094,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.002932551319648094,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.002932551319648094,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.002932551319648094
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 8,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 3,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 7,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 8,
                "tf.pad(tensor, paddings, mode='REFLECT')": 8,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 7,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side='left')": 8,
                "tf.searchsorted(sorted_sequence, values, side='right')": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 8,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction='DESCENDING')": 8,
                "tf.sqrt(x)": 5,
                "tf.square(x)": 4,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 8,
                "PairCreationOperation": 8,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 3,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 3,
                "AXIS_CONSTANT_WEIGHT": 4,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "stackoverflow_34",
        "description": "compute a weighted sum of tensors",
        "target_program": "tf.tensordot(in2, in1, 1)",
        "source": "https://stackoverflow.com/questions/49532371/compute-a-linear-combination-of-tensors-in-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[[[1, 2], [3, 4]],[[5, 6], [7, 8]],[[10, 20], [30, 40]]],[3, 5, 10],]",
            "outputs": "[[128, 236], [344, 452]]"
        },
        "completions": [
            "result = tf.tensordot(in1, in2, axes=([0], [0]))\n",
            "weighted_sum = tf.reduce_sum(tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1)), axis=0)\nreturn weighted_sum\n",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=-1)), axis=0)",
            "return tf.reduce_sum(tf.multiply(tf.tile(tf.expand_dims(in2, 1), [1, 2, 2]), in1), axis=0)",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=-1)), axis=0)",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=1)), axis=0)",
            "tf.tensordot(in1, in2, axes=0)\n",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1)), axis=0)",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 1)), axis=0)\n",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 1)), 0)",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 1)), axis=0)",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 1)), 0)",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=-1)), axis=0)\n",
            "return tf.reduce_sum(in1 * tf.expand_dims(in2, -1), axis=0)",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 1)), axis=0)",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 1)), axis=0)",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=-1)), axis=0)",
            "return tf.reduce_sum(tf.multiply(tf.expand_dims(in1, -1), tf.expand_dims(in2, -1)), axis=0)",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=1)), axis=0)",
            "result = tf.reduce_sum(tf.multiply(in1, in2[:, tf.newaxis, tf.newaxis]), axis=0)\n"
        ],
        "tf_operators": {
            "tf.tensordot": 2,
            "tf.expand_dims": 17,
            "tf.reduce_sum": 18,
            "tf.multiply": 17,
            "tf.tile": 1,
            "tf.newaxis": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 1,
        "total_in_target": 1,
        "parsed_constants": [
            [
                0,
                0
            ],
            [
                -1,
                -1,
                0
            ],
            [
                -1,
                0
            ],
            [
                1,
                1,
                2,
                2,
                0
            ],
            [
                -1,
                0
            ],
            [
                1,
                0
            ],
            [
                0
            ],
            [
                -1,
                -1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                -1,
                0
            ],
            [
                -1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                -1,
                0
            ],
            [
                -1,
                -1,
                0
            ],
            [
                1,
                0
            ],
            [
                0
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            -1
        ],
        "constant_counts": [
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 40,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 42,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 2,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.0035335689045936395,
                "tf.add(x, y)": 0.0035335689045936395,
                "tf.add_n(inputs)": 0.0035335689045936395,
                "tf.argmax(input, axis)": 0.0035335689045936395,
                "tf.argmin(input, axis)": 0.0035335689045936395,
                "tf.argsort(values, axis, stable=True)": 0.0035335689045936395,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.0035335689045936395,
                "tf.boolean_mask(tensor, mask)": 0.0035335689045936395,
                "tf.broadcast_to(input, shape)": 0.0035335689045936395,
                "tf.cast(x, dtype)": 0.0035335689045936395,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.0035335689045936395,
                "tf.concat(values, axis)": 0.0035335689045936395,
                "tf.constant(value)": 0.0035335689045936395,
                "tf.constant(value, dtype)": 0.0035335689045936395,
                "tf.divide(x, y)": 0.0035335689045936395,
                "tf.equal(x, y)": 0.0035335689045936395,
                "tf.exp(x)": 0.0035335689045936395,
                "tf.expand_dims(input, axis)": 0.07420494699646643,
                "tf.eye(num_rows)": 0.0035335689045936395,
                "tf.eye(num_rows, num_columns)": 0.0035335689045936395,
                "tf.eye(num_rows, dtype)": 0.0035335689045936395,
                "tf.fill(dims, value)": 0.0035335689045936395,
                "tf.gather(params, indices)": 0.0035335689045936395,
                "tf.gather(params, indices, axis, batch_dims)": 0.0035335689045936395,
                "tf.gather_nd(params, indices)": 0.0035335689045936395,
                "tf.gather_nd(params, indices, batch_dims)": 0.0035335689045936395,
                "tf.greater(x, y)": 0.0035335689045936395,
                "tf.greater_equal(x, y)": 0.0035335689045936395,
                "tf.math.bincount(arr)": 0.0035335689045936395,
                "tf.math.ceil(x)": 0.0035335689045936395,
                "tf.math.count_nonzero(input)": 0.0035335689045936395,
                "tf.math.count_nonzero(input, axis)": 0.0035335689045936395,
                "tf.math.cumsum(x, axis)": 0.0035335689045936395,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.0035335689045936395,
                "tf.math.divide_no_nan(x, y)": 0.0035335689045936395,
                "tf.math.floor(x)": 0.0035335689045936395,
                "tf.math.log(x)": 0.0035335689045936395,
                "tf.math.logical_and(x, y)": 0.0035335689045936395,
                "tf.math.logical_not(x)": 0.0035335689045936395,
                "tf.math.logical_or(x, y)": 0.0035335689045936395,
                "tf.math.logical_xor(x, y)": 0.0035335689045936395,
                "tf.math.negative(x)": 0.0035335689045936395,
                "tf.math.reciprocal(x)": 0.0035335689045936395,
                "tf.math.reciprocal_no_nan(x)": 0.0035335689045936395,
                "tf.math.segment_max(data, segment_ids)": 0.0035335689045936395,
                "tf.math.segment_mean(data, segment_ids)": 0.0035335689045936395,
                "tf.math.segment_min(data, segment_ids)": 0.0035335689045936395,
                "tf.math.segment_prod(data, segment_ids)": 0.0035335689045936395,
                "tf.math.segment_sum(data, segment_ids)": 0.0035335689045936395,
                "tf.math.squared_difference(x, y)": 0.0035335689045936395,
                "tf.math.top_k(input, k)": 0.0035335689045936395,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.0035335689045936395,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.0035335689045936395,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.0035335689045936395,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.0035335689045936395,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.0035335689045936395,
                "tf.matmul(a, b)": 0.0035335689045936395,
                "tf.maximum(x, y)": 0.0035335689045936395,
                "tf.minimum(x, y)": 0.0035335689045936395,
                "tf.multiply(x, y)": 0.0636042402826855,
                "tf.not_equal(x, y)": 0.0035335689045936395,
                "tf.one_hot(indices, depth)": 0.0035335689045936395,
                "tf.ones(shape)": 0.0035335689045936395,
                "tf.ones_like(input)": 0.0035335689045936395,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.0035335689045936395,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.0035335689045936395,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.0035335689045936395,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.0035335689045936395,
                "tf.range(start)": 0.0035335689045936395,
                "tf.range(start, limit, delta)": 0.0035335689045936395,
                "tf.reduce_any(input_tensor, axis)": 0.0035335689045936395,
                "tf.reduce_all(input_tensor, axis)": 0.0035335689045936395,
                "tf.reduce_max(input_tensor)": 0.0035335689045936395,
                "tf.reduce_max(input_tensor, axis)": 0.0035335689045936395,
                "tf.reduce_mean(input_tensor)": 0.0035335689045936395,
                "tf.reduce_mean(input_tensor, axis)": 0.0035335689045936395,
                "tf.reduce_min(input_tensor)": 0.0035335689045936395,
                "tf.reduce_min(input_tensor, axis)": 0.0035335689045936395,
                "tf.reduce_prod(input_tensor, axis)": 0.0035335689045936395,
                "tf.reduce_sum(input_tensor)": 0.0035335689045936395,
                "tf.reduce_sum(input_tensor, axis)": 0.01060070671378092,
                "tf.repeat(input, repeats)": 0.0035335689045936395,
                "tf.repeat(input, repeats, axis)": 0.0035335689045936395,
                "tf.reshape(tensor, shape)": 0.0035335689045936395,
                "tf.reverse(tensor, axis)": 0.0035335689045936395,
                "tf.roll(input, shift, axis)": 0.0035335689045936395,
                "tf.round(x)": 0.0035335689045936395,
                "tf.scatter_nd(indices, updates, shape)": 0.0035335689045936395,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.0035335689045936395,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.0035335689045936395,
                "tf.sequence_mask(lengths)": 0.0035335689045936395,
                "tf.sequence_mask(lengths, maxlen)": 0.0035335689045936395,
                "tf.shape(input)": 0.0035335689045936395,
                "tf.sign(x)": 0.0035335689045936395,
                "tf.sort(values, axis)": 0.0035335689045936395,
                "tf.sort(values, axis, direction='DESCENDING')": 0.0035335689045936395,
                "tf.sqrt(x)": 0.0035335689045936395,
                "tf.square(x)": 0.0035335689045936395,
                "tf.squeeze(input)": 0.0035335689045936395,
                "tf.squeeze(input, axis)": 0.0035335689045936395,
                "tf.stack(values, axis)": 0.0035335689045936395,
                "tf.subtract(x, y)": 0.0035335689045936395,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.0035335689045936395,
                "tf.tensordot(a, b, axes)": 0.01060070671378092,
                "tf.tile(input, multiples)": 0.007067137809187279,
                "tf.transpose(a)": 0.0035335689045936395,
                "tf.transpose(a, perm)": 0.0035335689045936395,
                "tf.unique_with_counts(x)": 0.0035335689045936395,
                "tf.unstack(value, axis)": 0.0035335689045936395,
                "tf.where(condition)": 0.0035335689045936395,
                "tf.where(condition, x, y)": 0.0035335689045936395,
                "tf.zeros(shape)": 0.0035335689045936395,
                "tf.zeros_like(input)": 0.0035335689045936395,
                "tf.SparseTensor(indices, values, dense_shape)": 0.0035335689045936395,
                "tf.sparse.add(a, b)": 0.0035335689045936395,
                "tf.sparse.concat(axis, sp_inputs)": 0.0035335689045936395,
                "tf.sparse.expand_dims(sp_input, axis)": 0.0035335689045936395,
                "tf.sparse.from_dense(tensor)": 0.0035335689045936395,
                "tf.sparse.maximum(sp_a, sp_b)": 0.0035335689045936395,
                "tf.sparse.minimum(sp_a, sp_b)": 0.0035335689045936395,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.0035335689045936395,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.0035335689045936395,
                "tf.sparse.reset_shape(sp_input)": 0.0035335689045936395,
                "tf.sparse.reshape(sp_input, shape)": 0.0035335689045936395,
                "tf.sparse.retain(sp_input, to_retain)": 0.0035335689045936395,
                "tf.sparse.slice(sp_input, start, size)": 0.0035335689045936395,
                "tf.sparse.split(sp_input, num_split, axis)": 0.0035335689045936395,
                "tf.sparse.to_dense(sp_input)": 0.0035335689045936395,
                "tf.sparse.to_dense(sp_input, default_value)": 0.0035335689045936395,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.0035335689045936395,
                "tf.sparse.transpose(sp_input)": 0.0035335689045936395,
                "tf.sparse.transpose(sp_input, perm)": 0.0035335689045936395,
                "IndexingAxis1Operation": 0.0035335689045936395,
                "IndexingOperation": 0.0035335689045936395,
                "PairCreationOperation": 0.007067137809187279,
                "SingletonTupleCreationOperation": 0.0035335689045936395,
                "SlicingAxis0BothOperation": 0.0035335689045936395,
                "SlicingAxis0LeftOperation": 0.0035335689045936395,
                "SlicingAxis0RightOperation": 0.0035335689045936395,
                "SlicingAxis1BothOperation": 0.0035335689045936395,
                "SlicingAxis1LeftOperation": 0.0035335689045936395,
                "SlicingAxis1RightOperation": 0.0035335689045936395,
                "TripleCreationOperation": 0.007067137809187279,
                "PROVIDED_CONSTANT_WEIGHT": 0.0035335689045936395,
                "COMMON_CONSTANT_WEIGHT": 0.1519434628975265,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.0035335689045936395,
                "INPUT_VARIABLE_WEIGHT": 0.14487632508833923,
                "AXIS_CONSTANT_WEIGHT": 0.01060070671378092,
                "SHAPE_CONSTANT_WEIGHT": 0.0035335689045936395,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.0035335689045936395,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.0035335689045936395,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.0035335689045936395,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.0035335689045936395,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.0035335689045936395
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 8,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 4,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 4,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 8,
                "tf.pad(tensor, paddings, mode='REFLECT')": 8,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 7,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side='left')": 8,
                "tf.searchsorted(sorted_sequence, values, side='right')": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 8,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction='DESCENDING')": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 7,
                "tf.tile(input, multiples)": 7,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 8,
                "PairCreationOperation": 7,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 7,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 3,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 3,
                "AXIS_CONSTANT_WEIGHT": 7,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "stackoverflow_35",
        "description": "linear interpolation between two tensors",
        "target_program": "tf.add(in2, tf.multiply(tf.expand_dims(in3, 1), tf.subtract(in1, in2)))",
        "source": "https://stackoverflow.com/questions/49643371/keras-compute-convex-combination-of-two-tensors",
        "constants": "[]",
        "examples": {
            "inputs": "[[[[1.0, 2.0], [3.0, 4.0], [5.0, 6.0]], [[10., 20.], [30., 40.], [50., 60.]]],[[[9.0, 8.0], [7.0, 6.0], [5.0, 4.0]], [[90., 80.], [70., 60.], [50., 40.]]],[0.1, 0.4, 0.8],]",
            "outputs": "[[[8.2, 7.4], [5.4, 5.2], [5.0, 5.6]],    [[82., 74.], [54., 52.], [50., 56.]]]"
        },
        "completions": [
            "result = tf.add(tf.multiply(in1, 1-in3), tf.multiply(in2, in3))\n",
            "def transform(in1, in2, in3):\n    return in1 + in3[:, None, None] * (in2 - in1)\n",
            "return in1 * (1 - in3) + in2 * in3\n",
            "return in1 * (1 - in3) + in2 * in3\n",
            "return in1 + in3 * (in2 - in1)\n",
            "return tf.add(tf.multiply(in1, 1 - in3), tf.multiply(in2, in3))\n",
            "return (1 - in3) * in1 + in3 * in2\n",
            "result = tf.add(tf.multiply(in1, 1-in3), tf.multiply(in2, in3))\nreturn result\n",
            "return in1 * (1 - in3) + in2 * in3\n",
            "return in1 * (1 - in3) + in2 * in3\n",
            "return in1 * (1 - in3) + in2 * in3\n",
            "result = in1 + in3 * (in2 - in1)\n",
            "return in1 * (1 - in3) + in2 * in3\n",
            "return in1 * (1 - in3) + in2 * in3\n",
            "return tf.add(tf.multiply(in1, 1 - in3), tf.multiply(in2, in3))\n",
            "return in1 * (1 - in3) + in2 * in3\n",
            "return tf.add(tf.multiply(in1, 1 - tf.expand_dims(in3, -1)), tf.multiply(in2, tf.expand_dims(in3, -1)))\n",
            "return tf.add(tf.add(tf.multiply(in1, 1-in3), tf.multiply(in2, in3)), 0.1)\n",
            "result = in1 + in3[:, :, None, None] * (in2 - in1)\n",
            "return tf.add(tf.multiply(in1, 1 - in3), tf.multiply(in2, in3))\n"
        ],
        "tf_operators": {
            "tf.add": 7,
            "tf.multiply": 7,
            "tf.expand_dims": 1
        },
        "coverage_percentage": 75.0,
        "total_covered": 3,
        "total_in_target": 4,
        "parsed_constants": [
            [
                1
            ],
            [],
            [
                1
            ],
            [
                1
            ],
            [],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                -1,
                -1
            ],
            [
                1
            ],
            [],
            [
                1
            ]
        ],
        "all_constants": [
            1,
            -1
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 80,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 18,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.0035971223021582736,
                "tf.add(x, y)": 0.03237410071942446,
                "tf.add_n(inputs)": 0.0035971223021582736,
                "tf.argmax(input, axis)": 0.0035971223021582736,
                "tf.argmin(input, axis)": 0.0035971223021582736,
                "tf.argsort(values, axis, stable=True)": 0.0035971223021582736,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.0035971223021582736,
                "tf.boolean_mask(tensor, mask)": 0.0035971223021582736,
                "tf.broadcast_to(input, shape)": 0.0035971223021582736,
                "tf.cast(x, dtype)": 0.0035971223021582736,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.0035971223021582736,
                "tf.concat(values, axis)": 0.0035971223021582736,
                "tf.constant(value)": 0.0035971223021582736,
                "tf.constant(value, dtype)": 0.0035971223021582736,
                "tf.divide(x, y)": 0.0035971223021582736,
                "tf.equal(x, y)": 0.0035971223021582736,
                "tf.exp(x)": 0.0035971223021582736,
                "tf.expand_dims(input, axis)": 0.01079136690647482,
                "tf.eye(num_rows)": 0.0035971223021582736,
                "tf.eye(num_rows, num_columns)": 0.0035971223021582736,
                "tf.eye(num_rows, dtype)": 0.0035971223021582736,
                "tf.fill(dims, value)": 0.0035971223021582736,
                "tf.gather(params, indices)": 0.0035971223021582736,
                "tf.gather(params, indices, axis, batch_dims)": 0.0035971223021582736,
                "tf.gather_nd(params, indices)": 0.0035971223021582736,
                "tf.gather_nd(params, indices, batch_dims)": 0.0035971223021582736,
                "tf.greater(x, y)": 0.0035971223021582736,
                "tf.greater_equal(x, y)": 0.0035971223021582736,
                "tf.math.bincount(arr)": 0.0035971223021582736,
                "tf.math.ceil(x)": 0.0035971223021582736,
                "tf.math.count_nonzero(input)": 0.0035971223021582736,
                "tf.math.count_nonzero(input, axis)": 0.0035971223021582736,
                "tf.math.cumsum(x, axis)": 0.0035971223021582736,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.0035971223021582736,
                "tf.math.divide_no_nan(x, y)": 0.0035971223021582736,
                "tf.math.floor(x)": 0.0035971223021582736,
                "tf.math.log(x)": 0.0035971223021582736,
                "tf.math.logical_and(x, y)": 0.0035971223021582736,
                "tf.math.logical_not(x)": 0.0035971223021582736,
                "tf.math.logical_or(x, y)": 0.0035971223021582736,
                "tf.math.logical_xor(x, y)": 0.0035971223021582736,
                "tf.math.negative(x)": 0.0035971223021582736,
                "tf.math.reciprocal(x)": 0.0035971223021582736,
                "tf.math.reciprocal_no_nan(x)": 0.0035971223021582736,
                "tf.math.segment_max(data, segment_ids)": 0.0035971223021582736,
                "tf.math.segment_mean(data, segment_ids)": 0.0035971223021582736,
                "tf.math.segment_min(data, segment_ids)": 0.0035971223021582736,
                "tf.math.segment_prod(data, segment_ids)": 0.0035971223021582736,
                "tf.math.segment_sum(data, segment_ids)": 0.0035971223021582736,
                "tf.math.squared_difference(x, y)": 0.0035971223021582736,
                "tf.math.top_k(input, k)": 0.0035971223021582736,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.0035971223021582736,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.0035971223021582736,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.0035971223021582736,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.0035971223021582736,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.0035971223021582736,
                "tf.matmul(a, b)": 0.0035971223021582736,
                "tf.maximum(x, y)": 0.0035971223021582736,
                "tf.minimum(x, y)": 0.0035971223021582736,
                "tf.multiply(x, y)": 0.0539568345323741,
                "tf.not_equal(x, y)": 0.0035971223021582736,
                "tf.one_hot(indices, depth)": 0.0035971223021582736,
                "tf.ones(shape)": 0.0035971223021582736,
                "tf.ones_like(input)": 0.0035971223021582736,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.0035971223021582736,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.0035971223021582736,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.0035971223021582736,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.0035971223021582736,
                "tf.range(start)": 0.0035971223021582736,
                "tf.range(start, limit, delta)": 0.0035971223021582736,
                "tf.reduce_any(input_tensor, axis)": 0.0035971223021582736,
                "tf.reduce_all(input_tensor, axis)": 0.0035971223021582736,
                "tf.reduce_max(input_tensor)": 0.0035971223021582736,
                "tf.reduce_max(input_tensor, axis)": 0.0035971223021582736,
                "tf.reduce_mean(input_tensor)": 0.0035971223021582736,
                "tf.reduce_mean(input_tensor, axis)": 0.0035971223021582736,
                "tf.reduce_min(input_tensor)": 0.0035971223021582736,
                "tf.reduce_min(input_tensor, axis)": 0.0035971223021582736,
                "tf.reduce_prod(input_tensor, axis)": 0.0035971223021582736,
                "tf.reduce_sum(input_tensor)": 0.0035971223021582736,
                "tf.reduce_sum(input_tensor, axis)": 0.0035971223021582736,
                "tf.repeat(input, repeats)": 0.0035971223021582736,
                "tf.repeat(input, repeats, axis)": 0.0035971223021582736,
                "tf.reshape(tensor, shape)": 0.0035971223021582736,
                "tf.reverse(tensor, axis)": 0.0035971223021582736,
                "tf.roll(input, shift, axis)": 0.0035971223021582736,
                "tf.round(x)": 0.0035971223021582736,
                "tf.scatter_nd(indices, updates, shape)": 0.0035971223021582736,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.0035971223021582736,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.0035971223021582736,
                "tf.sequence_mask(lengths)": 0.0035971223021582736,
                "tf.sequence_mask(lengths, maxlen)": 0.0035971223021582736,
                "tf.shape(input)": 0.0035971223021582736,
                "tf.sign(x)": 0.0035971223021582736,
                "tf.sort(values, axis)": 0.0035971223021582736,
                "tf.sort(values, axis, direction='DESCENDING')": 0.0035971223021582736,
                "tf.sqrt(x)": 0.0035971223021582736,
                "tf.square(x)": 0.0035971223021582736,
                "tf.squeeze(input)": 0.0035971223021582736,
                "tf.squeeze(input, axis)": 0.0035971223021582736,
                "tf.stack(values, axis)": 0.0035971223021582736,
                "tf.subtract(x, y)": 0.0035971223021582736,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.0035971223021582736,
                "tf.tensordot(a, b, axes)": 0.0035971223021582736,
                "tf.tile(input, multiples)": 0.0035971223021582736,
                "tf.transpose(a)": 0.0035971223021582736,
                "tf.transpose(a, perm)": 0.0035971223021582736,
                "tf.unique_with_counts(x)": 0.0035971223021582736,
                "tf.unstack(value, axis)": 0.0035971223021582736,
                "tf.where(condition)": 0.0035971223021582736,
                "tf.where(condition, x, y)": 0.0035971223021582736,
                "tf.zeros(shape)": 0.0035971223021582736,
                "tf.zeros_like(input)": 0.0035971223021582736,
                "tf.SparseTensor(indices, values, dense_shape)": 0.0035971223021582736,
                "tf.sparse.add(a, b)": 0.0035971223021582736,
                "tf.sparse.concat(axis, sp_inputs)": 0.0035971223021582736,
                "tf.sparse.expand_dims(sp_input, axis)": 0.0035971223021582736,
                "tf.sparse.from_dense(tensor)": 0.0035971223021582736,
                "tf.sparse.maximum(sp_a, sp_b)": 0.0035971223021582736,
                "tf.sparse.minimum(sp_a, sp_b)": 0.0035971223021582736,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.0035971223021582736,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.0035971223021582736,
                "tf.sparse.reset_shape(sp_input)": 0.0035971223021582736,
                "tf.sparse.reshape(sp_input, shape)": 0.0035971223021582736,
                "tf.sparse.retain(sp_input, to_retain)": 0.0035971223021582736,
                "tf.sparse.slice(sp_input, start, size)": 0.0035971223021582736,
                "tf.sparse.split(sp_input, num_split, axis)": 0.0035971223021582736,
                "tf.sparse.to_dense(sp_input)": 0.0035971223021582736,
                "tf.sparse.to_dense(sp_input, default_value)": 0.0035971223021582736,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.0035971223021582736,
                "tf.sparse.transpose(sp_input)": 0.0035971223021582736,
                "tf.sparse.transpose(sp_input, perm)": 0.0035971223021582736,
                "IndexingAxis1Operation": 0.0035971223021582736,
                "IndexingOperation": 0.0035971223021582736,
                "PairCreationOperation": 0.0035971223021582736,
                "SingletonTupleCreationOperation": 0.0035971223021582736,
                "SlicingAxis0BothOperation": 0.0035971223021582736,
                "SlicingAxis0LeftOperation": 0.0035971223021582736,
                "SlicingAxis0RightOperation": 0.0035971223021582736,
                "SlicingAxis1BothOperation": 0.0035971223021582736,
                "SlicingAxis1LeftOperation": 0.0035971223021582736,
                "SlicingAxis1RightOperation": 0.0035971223021582736,
                "TripleCreationOperation": 0.007194244604316547,
                "PROVIDED_CONSTANT_WEIGHT": 0.0035971223021582736,
                "COMMON_CONSTANT_WEIGHT": 0.0683453237410072,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.0035971223021582736,
                "INPUT_VARIABLE_WEIGHT": 0.29136690647482016,
                "AXIS_CONSTANT_WEIGHT": 0.0035971223021582736,
                "SHAPE_CONSTANT_WEIGHT": 0.0035971223021582736,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.0035971223021582736,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.0035971223021582736,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.0035971223021582736,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.0035971223021582736,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.0035971223021582736
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 5,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 8,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 7,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 4,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 8,
                "tf.pad(tensor, paddings, mode='REFLECT')": 8,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side='left')": 8,
                "tf.searchsorted(sorted_sequence, values, side='right')": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 8,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction='DESCENDING')": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 8,
                "PairCreationOperation": 8,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 7,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 4,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 2,
                "AXIS_CONSTANT_WEIGHT": 8,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "stackoverflow_36",
        "description": "divide each element by the column index",
        "target_program": "tf.cast(tf.divide(in1, tf.add(in1, tf.range(8))), tf.float32)",
        "source": "https://stackoverflow.com/questions/43306788/divide-elements-of-1-d-tensor-by-the-corrispondent-index",
        "constants": "[]",
        "examples": {
            "inputs": "[[1, 0, 1, 1, 0, 1, 0, 1],]",
            "outputs": "[1., 0., 0.333333, 0.25, 0., 0.166667, 0., 0.125]"
        },
        "completions": [
            "return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0] + 1), tf.float32))",
            "return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0] + 1), tf.float32))\n",
            "return tf.divide(in1, tf.range(1, tf.shape(in1)[0]+1))\n",
            "return tf.divide(tf.cast(in1, tf.float32), tf.range(1, tf.size(in1)+1))\n",
            "return tf.divide(tf.cast(in1, tf.float32), tf.range(1, tf.size(in1)+1))\n",
            "return tf.divide(in1, tf.range(1, tf.shape(in1)[0] + 1))\n",
            "return tf.divide(in1, tf.range(1, tf.size(in1)+1, 1))\n",
            "def transform(in1):\n    result = tf.divide(in1, tf.cast(tf.range(1, in1.shape[0] + 1), tf.float32))\n    return result\n",
            "return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0] + 1), tf.float32))\n",
            "return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0] + 1), tf.float32))\n      ",
            "return tf.divide(tf.cast(in1, tf.float32), tf.range(1, tf.size(in1)+1))\n",
            "return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[-1] + 1), tf.float32))\n",
            "return tf.divide(tf.cast(in1, tf.float32), tf.range(1, tf.shape(in1)[0]+1))\n",
            "return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0] + 1), tf.float32))\n",
            "def transform(in1):\n    return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0] + 1), tf.float32))\n",
            "return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0] + 1), tf.float32))\n",
            "return tf.divide(tf.cast(in1, tf.float32), tf.range(1, tf.size(in1)+1))\n",
            "return tf.divide(tf.cast(in1, tf.float32), tf.range(1, tf.shape(in1)[0] + 1))\n",
            "def transform(in1):\n    return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0] + 1), tf.float32))\n",
            "def transform(in1):\n    return tf.divide(tf.cast(in1, tf.float32), tf.cast(tf.range(1, in1.shape[0] + 1), tf.float32))\n"
        ],
        "tf_operators": {
            "tf.shape": 13,
            "tf.float32": 17,
            "tf.range": 20,
            "tf.cast": 17,
            "tf.divide": 20,
            "tf.size": 5
        },
        "coverage_percentage": 80.0,
        "total_covered": 4,
        "total_in_target": 5,
        "parsed_constants": [
            [
                1,
                0,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                1,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                -1,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                0,
                1
            ]
        ],
        "all_constants": [
            0,
            1,
            -1
        ],
        "constant_counts": [
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 2,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 38,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 56,
            "shape_tuple": 0,
            "tf_float32": 18,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.0029940119760479044,
                "tf.add(x, y)": 0.0029940119760479044,
                "tf.add_n(inputs)": 0.0029940119760479044,
                "tf.argmax(input, axis)": 0.0029940119760479044,
                "tf.argmin(input, axis)": 0.0029940119760479044,
                "tf.argsort(values, axis, stable=True)": 0.0029940119760479044,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.0029940119760479044,
                "tf.boolean_mask(tensor, mask)": 0.0029940119760479044,
                "tf.broadcast_to(input, shape)": 0.0029940119760479044,
                "tf.cast(x, dtype)": 0.05688622754491018,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.0029940119760479044,
                "tf.concat(values, axis)": 0.0029940119760479044,
                "tf.constant(value)": 0.0029940119760479044,
                "tf.constant(value, dtype)": 0.0029940119760479044,
                "tf.divide(x, y)": 0.06287425149700598,
                "tf.equal(x, y)": 0.0029940119760479044,
                "tf.exp(x)": 0.0029940119760479044,
                "tf.expand_dims(input, axis)": 0.0029940119760479044,
                "tf.eye(num_rows)": 0.0029940119760479044,
                "tf.eye(num_rows, num_columns)": 0.0029940119760479044,
                "tf.eye(num_rows, dtype)": 0.0029940119760479044,
                "tf.fill(dims, value)": 0.0029940119760479044,
                "tf.gather(params, indices)": 0.0029940119760479044,
                "tf.gather(params, indices, axis, batch_dims)": 0.0029940119760479044,
                "tf.gather_nd(params, indices)": 0.0029940119760479044,
                "tf.gather_nd(params, indices, batch_dims)": 0.0029940119760479044,
                "tf.greater(x, y)": 0.0029940119760479044,
                "tf.greater_equal(x, y)": 0.0029940119760479044,
                "tf.math.bincount(arr)": 0.0029940119760479044,
                "tf.math.ceil(x)": 0.0029940119760479044,
                "tf.math.count_nonzero(input)": 0.0029940119760479044,
                "tf.math.count_nonzero(input, axis)": 0.0029940119760479044,
                "tf.math.cumsum(x, axis)": 0.0029940119760479044,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.0029940119760479044,
                "tf.math.divide_no_nan(x, y)": 0.0029940119760479044,
                "tf.math.floor(x)": 0.0029940119760479044,
                "tf.math.log(x)": 0.0029940119760479044,
                "tf.math.logical_and(x, y)": 0.0029940119760479044,
                "tf.math.logical_not(x)": 0.0029940119760479044,
                "tf.math.logical_or(x, y)": 0.0029940119760479044,
                "tf.math.logical_xor(x, y)": 0.0029940119760479044,
                "tf.math.negative(x)": 0.0029940119760479044,
                "tf.math.reciprocal(x)": 0.0029940119760479044,
                "tf.math.reciprocal_no_nan(x)": 0.0029940119760479044,
                "tf.math.segment_max(data, segment_ids)": 0.0029940119760479044,
                "tf.math.segment_mean(data, segment_ids)": 0.0029940119760479044,
                "tf.math.segment_min(data, segment_ids)": 0.0029940119760479044,
                "tf.math.segment_prod(data, segment_ids)": 0.0029940119760479044,
                "tf.math.segment_sum(data, segment_ids)": 0.0029940119760479044,
                "tf.math.squared_difference(x, y)": 0.0029940119760479044,
                "tf.math.top_k(input, k)": 0.0029940119760479044,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.0029940119760479044,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.0029940119760479044,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.0029940119760479044,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.0029940119760479044,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.0029940119760479044,
                "tf.matmul(a, b)": 0.0029940119760479044,
                "tf.maximum(x, y)": 0.0029940119760479044,
                "tf.minimum(x, y)": 0.0029940119760479044,
                "tf.multiply(x, y)": 0.0029940119760479044,
                "tf.not_equal(x, y)": 0.0029940119760479044,
                "tf.one_hot(indices, depth)": 0.0029940119760479044,
                "tf.ones(shape)": 0.0029940119760479044,
                "tf.ones_like(input)": 0.0029940119760479044,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.0029940119760479044,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.0029940119760479044,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.0029940119760479044,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.0029940119760479044,
                "tf.range(start)": 0.0029940119760479044,
                "tf.range(start, limit, delta)": 0.005988023952095809,
                "tf.reduce_any(input_tensor, axis)": 0.0029940119760479044,
                "tf.reduce_all(input_tensor, axis)": 0.0029940119760479044,
                "tf.reduce_max(input_tensor)": 0.0029940119760479044,
                "tf.reduce_max(input_tensor, axis)": 0.0029940119760479044,
                "tf.reduce_mean(input_tensor)": 0.0029940119760479044,
                "tf.reduce_mean(input_tensor, axis)": 0.0029940119760479044,
                "tf.reduce_min(input_tensor)": 0.0029940119760479044,
                "tf.reduce_min(input_tensor, axis)": 0.0029940119760479044,
                "tf.reduce_prod(input_tensor, axis)": 0.0029940119760479044,
                "tf.reduce_sum(input_tensor)": 0.0029940119760479044,
                "tf.reduce_sum(input_tensor, axis)": 0.0029940119760479044,
                "tf.repeat(input, repeats)": 0.0029940119760479044,
                "tf.repeat(input, repeats, axis)": 0.0029940119760479044,
                "tf.reshape(tensor, shape)": 0.0029940119760479044,
                "tf.reverse(tensor, axis)": 0.0029940119760479044,
                "tf.roll(input, shift, axis)": 0.0029940119760479044,
                "tf.round(x)": 0.0029940119760479044,
                "tf.scatter_nd(indices, updates, shape)": 0.0029940119760479044,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.0029940119760479044,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.0029940119760479044,
                "tf.sequence_mask(lengths)": 0.0029940119760479044,
                "tf.sequence_mask(lengths, maxlen)": 0.0029940119760479044,
                "tf.shape(input)": 0.041916167664670656,
                "tf.sign(x)": 0.0029940119760479044,
                "tf.sort(values, axis)": 0.0029940119760479044,
                "tf.sort(values, axis, direction='DESCENDING')": 0.0029940119760479044,
                "tf.sqrt(x)": 0.0029940119760479044,
                "tf.square(x)": 0.0029940119760479044,
                "tf.squeeze(input)": 0.0029940119760479044,
                "tf.squeeze(input, axis)": 0.0029940119760479044,
                "tf.stack(values, axis)": 0.0029940119760479044,
                "tf.subtract(x, y)": 0.0029940119760479044,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.0029940119760479044,
                "tf.tensordot(a, b, axes)": 0.0029940119760479044,
                "tf.tile(input, multiples)": 0.0029940119760479044,
                "tf.transpose(a)": 0.0029940119760479044,
                "tf.transpose(a, perm)": 0.0029940119760479044,
                "tf.unique_with_counts(x)": 0.0029940119760479044,
                "tf.unstack(value, axis)": 0.0029940119760479044,
                "tf.where(condition)": 0.0029940119760479044,
                "tf.where(condition, x, y)": 0.0029940119760479044,
                "tf.zeros(shape)": 0.0029940119760479044,
                "tf.zeros_like(input)": 0.0029940119760479044,
                "tf.SparseTensor(indices, values, dense_shape)": 0.0029940119760479044,
                "tf.sparse.add(a, b)": 0.0029940119760479044,
                "tf.sparse.concat(axis, sp_inputs)": 0.0029940119760479044,
                "tf.sparse.expand_dims(sp_input, axis)": 0.0029940119760479044,
                "tf.sparse.from_dense(tensor)": 0.0029940119760479044,
                "tf.sparse.maximum(sp_a, sp_b)": 0.0029940119760479044,
                "tf.sparse.minimum(sp_a, sp_b)": 0.0029940119760479044,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.0029940119760479044,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.0029940119760479044,
                "tf.sparse.reset_shape(sp_input)": 0.0029940119760479044,
                "tf.sparse.reshape(sp_input, shape)": 0.0029940119760479044,
                "tf.sparse.retain(sp_input, to_retain)": 0.0029940119760479044,
                "tf.sparse.slice(sp_input, start, size)": 0.0029940119760479044,
                "tf.sparse.split(sp_input, num_split, axis)": 0.0029940119760479044,
                "tf.sparse.to_dense(sp_input)": 0.0029940119760479044,
                "tf.sparse.to_dense(sp_input, default_value)": 0.0029940119760479044,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.0029940119760479044,
                "tf.sparse.transpose(sp_input)": 0.0029940119760479044,
                "tf.sparse.transpose(sp_input, perm)": 0.0029940119760479044,
                "IndexingAxis1Operation": 0.0029940119760479044,
                "IndexingOperation": 0.04790419161676647,
                "PairCreationOperation": 0.0029940119760479044,
                "SingletonTupleCreationOperation": 0.0029940119760479044,
                "SlicingAxis0BothOperation": 0.0029940119760479044,
                "SlicingAxis0LeftOperation": 0.0029940119760479044,
                "SlicingAxis0RightOperation": 0.0029940119760479044,
                "SlicingAxis1BothOperation": 0.0029940119760479044,
                "SlicingAxis1LeftOperation": 0.0029940119760479044,
                "SlicingAxis1RightOperation": 0.0029940119760479044,
                "TripleCreationOperation": 0.0029940119760479044,
                "PROVIDED_CONSTANT_WEIGHT": 0.0029940119760479044,
                "COMMON_CONSTANT_WEIGHT": 0.17065868263473055,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.0029940119760479044,
                "INPUT_VARIABLE_WEIGHT": 0.11676646706586827,
                "AXIS_CONSTANT_WEIGHT": 0.0029940119760479044,
                "SHAPE_CONSTANT_WEIGHT": 0.0029940119760479044,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.0029940119760479044,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.0029940119760479044,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.05688622754491018,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.0029940119760479044,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.0029940119760479044
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 4,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 4,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 8,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 8,
                "tf.pad(tensor, paddings, mode='REFLECT')": 8,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 7,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side='left')": 8,
                "tf.searchsorted(sorted_sequence, values, side='right')": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 5,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction='DESCENDING')": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 4,
                "PairCreationOperation": 8,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 3,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 3,
                "AXIS_CONSTANT_WEIGHT": 8,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 4,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "stackoverflow_37",
        "description": "dot product a vector with last dimension of a tensor",
        "target_program": "tf.tensordot(in1, in2, 1)",
        "source": "https://stackoverflow.com/questions/49206051/multiply-4-d-tensor-with-1-d-tensor",
        "constants": "[]",
        "examples": {
            "inputs": "[[[[[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]],  [[1.2, 3.4, 5.6], [7.8, 9.8, 7.6]]]],[0.5, 1.0, 2.0],]",
            "outputs": "[[[8.5, 19.0], [15.2, 28.9]]]"
        },
        "completions": [
            "return tf.tensordot(in1, in2, axes=1)\n",
            "return tf.tensordot(in1, in2, axes=[[-1], [0]])\n",
            "return tf.tensordot(in1, in2, axes=1)",
            "import tensorflow as tf\n\ndef transform(in1, in2):\n    result = tf.tensordot(in1, in2, axes=[-1, 0])\n    return result\n",
            "return tf.tensordot(in1, in2, axes=1)\n",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, -1)), axis=-2)",
            "return tf.tensordot(in1, in2, axes=1)\n",
            "return tf.tensordot(in1, in2, axes=[[3], [0]])\n",
            "return tf.tensordot(in1, in2, axes=(-1, 0))",
            "return tf.tensordot(in1, in2, axes=(-1, 0))\n",
            "return tf.tensordot(in1, in2, axes=[[-1], [0]])\n",
            "return tf.tensordot(in1, in2, axes=[[3], [0]])",
            "return tf.tensordot(in1, in2, axes=1)\n",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, -1)), axis=-2)\n",
            "result = tf.tensordot(in1, in2, axes=(-1, 0))\nreturn result\n",
            "return tf.tensordot(in1, in2, axes=1)",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, -1)), axis=-2)",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=-1)), axis=-2)",
            "return tf.tensordot(in1, in2, axes=[[-1], [0]])",
            "return tf.tensordot(in1, in2, axes=[[3], [0]])\n"
        ],
        "tf_operators": {
            "tf.tensordot": 16,
            "tf.expand_dims": 4,
            "tf.reduce_sum": 4,
            "tf.multiply": 4
        },
        "coverage_percentage": 100.0,
        "total_covered": 1,
        "total_in_target": 1,
        "parsed_constants": [
            [
                1
            ],
            [
                -1,
                0
            ],
            [
                1
            ],
            [
                -1,
                0
            ],
            [
                1
            ],
            [
                -1,
                -2
            ],
            [
                1
            ],
            [
                3,
                0
            ],
            [
                -1,
                0
            ],
            [
                -1,
                0
            ],
            [
                -1,
                0
            ],
            [
                3,
                0
            ],
            [
                1
            ],
            [
                -1,
                -2
            ],
            [
                -1,
                0
            ],
            [
                1
            ],
            [
                -1,
                -2
            ],
            [
                -1,
                -2
            ],
            [
                -1,
                0
            ],
            [
                3,
                0
            ]
        ],
        "all_constants": [
            0,
            1,
            3,
            -2,
            -1
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 40,
            "shape": 0,
            "tf_bool": 0,
            "provided": 4,
            "common": 24,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 3,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.003952569169960474,
                "tf.add(x, y)": 0.003952569169960474,
                "tf.add_n(inputs)": 0.003952569169960474,
                "tf.argmax(input, axis)": 0.003952569169960474,
                "tf.argmin(input, axis)": 0.003952569169960474,
                "tf.argsort(values, axis, stable=True)": 0.003952569169960474,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.003952569169960474,
                "tf.boolean_mask(tensor, mask)": 0.003952569169960474,
                "tf.broadcast_to(input, shape)": 0.003952569169960474,
                "tf.cast(x, dtype)": 0.003952569169960474,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.003952569169960474,
                "tf.concat(values, axis)": 0.003952569169960474,
                "tf.constant(value)": 0.003952569169960474,
                "tf.constant(value, dtype)": 0.003952569169960474,
                "tf.divide(x, y)": 0.003952569169960474,
                "tf.equal(x, y)": 0.003952569169960474,
                "tf.exp(x)": 0.003952569169960474,
                "tf.expand_dims(input, axis)": 0.019762845849802372,
                "tf.eye(num_rows)": 0.003952569169960474,
                "tf.eye(num_rows, num_columns)": 0.003952569169960474,
                "tf.eye(num_rows, dtype)": 0.003952569169960474,
                "tf.fill(dims, value)": 0.003952569169960474,
                "tf.gather(params, indices)": 0.003952569169960474,
                "tf.gather(params, indices, axis, batch_dims)": 0.003952569169960474,
                "tf.gather_nd(params, indices)": 0.003952569169960474,
                "tf.gather_nd(params, indices, batch_dims)": 0.003952569169960474,
                "tf.greater(x, y)": 0.003952569169960474,
                "tf.greater_equal(x, y)": 0.003952569169960474,
                "tf.math.bincount(arr)": 0.003952569169960474,
                "tf.math.ceil(x)": 0.003952569169960474,
                "tf.math.count_nonzero(input)": 0.003952569169960474,
                "tf.math.count_nonzero(input, axis)": 0.003952569169960474,
                "tf.math.cumsum(x, axis)": 0.003952569169960474,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.003952569169960474,
                "tf.math.divide_no_nan(x, y)": 0.003952569169960474,
                "tf.math.floor(x)": 0.003952569169960474,
                "tf.math.log(x)": 0.003952569169960474,
                "tf.math.logical_and(x, y)": 0.003952569169960474,
                "tf.math.logical_not(x)": 0.003952569169960474,
                "tf.math.logical_or(x, y)": 0.003952569169960474,
                "tf.math.logical_xor(x, y)": 0.003952569169960474,
                "tf.math.negative(x)": 0.003952569169960474,
                "tf.math.reciprocal(x)": 0.003952569169960474,
                "tf.math.reciprocal_no_nan(x)": 0.003952569169960474,
                "tf.math.segment_max(data, segment_ids)": 0.003952569169960474,
                "tf.math.segment_mean(data, segment_ids)": 0.003952569169960474,
                "tf.math.segment_min(data, segment_ids)": 0.003952569169960474,
                "tf.math.segment_prod(data, segment_ids)": 0.003952569169960474,
                "tf.math.segment_sum(data, segment_ids)": 0.003952569169960474,
                "tf.math.squared_difference(x, y)": 0.003952569169960474,
                "tf.math.top_k(input, k)": 0.003952569169960474,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.003952569169960474,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.003952569169960474,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.003952569169960474,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.003952569169960474,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.003952569169960474,
                "tf.matmul(a, b)": 0.003952569169960474,
                "tf.maximum(x, y)": 0.003952569169960474,
                "tf.minimum(x, y)": 0.003952569169960474,
                "tf.multiply(x, y)": 0.019762845849802372,
                "tf.not_equal(x, y)": 0.003952569169960474,
                "tf.one_hot(indices, depth)": 0.003952569169960474,
                "tf.ones(shape)": 0.003952569169960474,
                "tf.ones_like(input)": 0.003952569169960474,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.003952569169960474,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.003952569169960474,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.003952569169960474,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.003952569169960474,
                "tf.range(start)": 0.003952569169960474,
                "tf.range(start, limit, delta)": 0.003952569169960474,
                "tf.reduce_any(input_tensor, axis)": 0.003952569169960474,
                "tf.reduce_all(input_tensor, axis)": 0.003952569169960474,
                "tf.reduce_max(input_tensor)": 0.003952569169960474,
                "tf.reduce_max(input_tensor, axis)": 0.003952569169960474,
                "tf.reduce_mean(input_tensor)": 0.003952569169960474,
                "tf.reduce_mean(input_tensor, axis)": 0.003952569169960474,
                "tf.reduce_min(input_tensor)": 0.003952569169960474,
                "tf.reduce_min(input_tensor, axis)": 0.003952569169960474,
                "tf.reduce_prod(input_tensor, axis)": 0.003952569169960474,
                "tf.reduce_sum(input_tensor)": 0.003952569169960474,
                "tf.reduce_sum(input_tensor, axis)": 0.003952569169960474,
                "tf.repeat(input, repeats)": 0.003952569169960474,
                "tf.repeat(input, repeats, axis)": 0.003952569169960474,
                "tf.reshape(tensor, shape)": 0.003952569169960474,
                "tf.reverse(tensor, axis)": 0.003952569169960474,
                "tf.roll(input, shift, axis)": 0.003952569169960474,
                "tf.round(x)": 0.003952569169960474,
                "tf.scatter_nd(indices, updates, shape)": 0.003952569169960474,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.003952569169960474,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.003952569169960474,
                "tf.sequence_mask(lengths)": 0.003952569169960474,
                "tf.sequence_mask(lengths, maxlen)": 0.003952569169960474,
                "tf.shape(input)": 0.003952569169960474,
                "tf.sign(x)": 0.003952569169960474,
                "tf.sort(values, axis)": 0.003952569169960474,
                "tf.sort(values, axis, direction='DESCENDING')": 0.003952569169960474,
                "tf.sqrt(x)": 0.003952569169960474,
                "tf.square(x)": 0.003952569169960474,
                "tf.squeeze(input)": 0.003952569169960474,
                "tf.squeeze(input, axis)": 0.003952569169960474,
                "tf.stack(values, axis)": 0.003952569169960474,
                "tf.subtract(x, y)": 0.003952569169960474,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.003952569169960474,
                "tf.tensordot(a, b, axes)": 0.06719367588932806,
                "tf.tile(input, multiples)": 0.003952569169960474,
                "tf.transpose(a)": 0.003952569169960474,
                "tf.transpose(a, perm)": 0.003952569169960474,
                "tf.unique_with_counts(x)": 0.003952569169960474,
                "tf.unstack(value, axis)": 0.003952569169960474,
                "tf.where(condition)": 0.003952569169960474,
                "tf.where(condition, x, y)": 0.003952569169960474,
                "tf.zeros(shape)": 0.003952569169960474,
                "tf.zeros_like(input)": 0.003952569169960474,
                "tf.SparseTensor(indices, values, dense_shape)": 0.003952569169960474,
                "tf.sparse.add(a, b)": 0.003952569169960474,
                "tf.sparse.concat(axis, sp_inputs)": 0.003952569169960474,
                "tf.sparse.expand_dims(sp_input, axis)": 0.003952569169960474,
                "tf.sparse.from_dense(tensor)": 0.003952569169960474,
                "tf.sparse.maximum(sp_a, sp_b)": 0.003952569169960474,
                "tf.sparse.minimum(sp_a, sp_b)": 0.003952569169960474,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.003952569169960474,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.003952569169960474,
                "tf.sparse.reset_shape(sp_input)": 0.003952569169960474,
                "tf.sparse.reshape(sp_input, shape)": 0.003952569169960474,
                "tf.sparse.retain(sp_input, to_retain)": 0.003952569169960474,
                "tf.sparse.slice(sp_input, start, size)": 0.003952569169960474,
                "tf.sparse.split(sp_input, num_split, axis)": 0.003952569169960474,
                "tf.sparse.to_dense(sp_input)": 0.003952569169960474,
                "tf.sparse.to_dense(sp_input, default_value)": 0.003952569169960474,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.003952569169960474,
                "tf.sparse.transpose(sp_input)": 0.003952569169960474,
                "tf.sparse.transpose(sp_input, perm)": 0.003952569169960474,
                "IndexingAxis1Operation": 0.003952569169960474,
                "IndexingOperation": 0.003952569169960474,
                "PairCreationOperation": 0.015810276679841896,
                "SingletonTupleCreationOperation": 0.003952569169960474,
                "SlicingAxis0BothOperation": 0.003952569169960474,
                "SlicingAxis0LeftOperation": 0.003952569169960474,
                "SlicingAxis0RightOperation": 0.003952569169960474,
                "SlicingAxis1BothOperation": 0.003952569169960474,
                "SlicingAxis1LeftOperation": 0.003952569169960474,
                "SlicingAxis1RightOperation": 0.003952569169960474,
                "TripleCreationOperation": 0.003952569169960474,
                "PROVIDED_CONSTANT_WEIGHT": 0.019762845849802372,
                "COMMON_CONSTANT_WEIGHT": 0.09881422924901186,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.003952569169960474,
                "INPUT_VARIABLE_WEIGHT": 0.16205533596837945,
                "AXIS_CONSTANT_WEIGHT": 0.015810276679841896,
                "SHAPE_CONSTANT_WEIGHT": 0.003952569169960474,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.003952569169960474,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.003952569169960474,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.003952569169960474,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.003952569169960474,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.003952569169960474
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 8,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 6,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 6,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 8,
                "tf.pad(tensor, paddings, mode='REFLECT')": 8,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side='left')": 8,
                "tf.searchsorted(sorted_sequence, values, side='right')": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 8,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction='DESCENDING')": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 4,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 8,
                "PairCreationOperation": 6,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 6,
                "COMMON_CONSTANT_WEIGHT": 3,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 3,
                "AXIS_CONSTANT_WEIGHT": 6,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "stackoverflow_38",
        "description": "compute the product of marked elements",
        "target_program": "tf.reduce_prod(tf.maximum(tf.reduce_max(in2), tf.multiply(in1, in2)), axis=1)",
        "source": "https://stackoverflow.com/questions/49511529/tensorflow-compute-multiplication-by-binary-matrix",
        "constants": "[]",
        "examples": {
            "inputs": "[[9, 2, 5, 3, 7, 4],[[0, 0, 1, 0, 1, 0], [1, 0, 0, 0, 0, 0], [0, 1, 1, 1, 0, 1]],]",
            "outputs": "[35, 9, 120]"
        },
        "completions": [
            "return tf.reduce_sum(tf.reduce_max(tf.cast(in1, tf.int32)*tf.cast(in2, tf.int32), axis=1))",
            "return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)\n",
            "return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)\n  ",
            "return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool), axis=1), axis=1)\n",
            "return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)",
            "return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)",
            "return tf.math.unsorted_segment_prod(in1, tf.reduce_sum(in2, axis=1), 3)\n",
            "return tf.math.reduce_sum(tf.math.unsorted_segment_prod(in1, tf.boolean_mask(tf.range(tf.shape(in1)[0]), tf.cast(tf.reduce_any(in2, axis=1), tf.int32)), tf.constant(3)))",
            "return tf.math.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)\n",
            "return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool), axis=1), axis=1)\n",
            "marked_idx = tf.cast(tf.where(in2), tf.int32)\nmarked_values = tf.gather_nd(in1, marked_idx)\nresult = tf.reduce_prod(marked_values, axis=1)\nreturn result\n",
            "return tf.math.unsorted_segment_prod(in1, tf.boolean_mask(in2, tf.tile([True], [tf.shape(in2)[0]])), 3)\n",
            "return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)",
            "return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool), axis=1), axis=1)\n",
            "return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)\n",
            "result = tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool), axis=1), axis=1)\nreturn result\n",
            "return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)\n",
            "marked_values = tf.boolean_mask(in1, tf.cast(in2, tf.bool))\nresult = tf.reduce_prod(marked_values, axis=1)\nreturn result\n",
            "return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)",
            "return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool), axis=1), axis=1)\n"
        ],
        "tf_operators": {
            "tf.cast": 18,
            "tf.reduce_max": 1,
            "tf.reduce_sum": 2,
            "tf.int32": 3,
            "tf.boolean_mask": 17,
            "tf.reduce_prod": 15,
            "tf.bool": 15,
            "tf.math.unsorted_segment_prod": 3,
            "tf.shape": 2,
            "tf.reduce_any": 1,
            "tf.range": 1,
            "tf.math.reduce_sum": 1,
            "tf.constant": 1,
            "tf.math.reduce_prod": 1,
            "tf.where": 1,
            "tf.gather_nd": 1,
            "tf.tile": 1
        },
        "coverage_percentage": 50.0,
        "total_covered": 2,
        "total_in_target": 4,
        "parsed_constants": [
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                3
            ],
            [
                0,
                1,
                3
            ],
            [
                1
            ],
            [
                1,
                1
            ],
            [
                1
            ],
            [
                0,
                3
            ],
            [
                1
            ],
            [
                1,
                1
            ],
            [
                1
            ],
            [
                1,
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                1
            ]
        ],
        "all_constants": [
            0,
            1,
            3
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 2,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 1,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 42,
            "shape": 3,
            "tf_bool": 15,
            "provided": 0,
            "common": 27,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 4
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.003215434083601286,
                "tf.add(x, y)": 0.003215434083601286,
                "tf.add_n(inputs)": 0.003215434083601286,
                "tf.argmax(input, axis)": 0.003215434083601286,
                "tf.argmin(input, axis)": 0.003215434083601286,
                "tf.argsort(values, axis, stable=True)": 0.003215434083601286,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.003215434083601286,
                "tf.boolean_mask(tensor, mask)": 0.05787781350482315,
                "tf.broadcast_to(input, shape)": 0.003215434083601286,
                "tf.cast(x, dtype)": 0.06430868167202572,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.003215434083601286,
                "tf.concat(values, axis)": 0.003215434083601286,
                "tf.constant(value)": 0.006430868167202572,
                "tf.constant(value, dtype)": 0.003215434083601286,
                "tf.divide(x, y)": 0.003215434083601286,
                "tf.equal(x, y)": 0.003215434083601286,
                "tf.exp(x)": 0.003215434083601286,
                "tf.expand_dims(input, axis)": 0.003215434083601286,
                "tf.eye(num_rows)": 0.003215434083601286,
                "tf.eye(num_rows, num_columns)": 0.003215434083601286,
                "tf.eye(num_rows, dtype)": 0.003215434083601286,
                "tf.fill(dims, value)": 0.003215434083601286,
                "tf.gather(params, indices)": 0.003215434083601286,
                "tf.gather(params, indices, axis, batch_dims)": 0.003215434083601286,
                "tf.gather_nd(params, indices)": 0.006430868167202572,
                "tf.gather_nd(params, indices, batch_dims)": 0.003215434083601286,
                "tf.greater(x, y)": 0.003215434083601286,
                "tf.greater_equal(x, y)": 0.003215434083601286,
                "tf.math.bincount(arr)": 0.003215434083601286,
                "tf.math.ceil(x)": 0.003215434083601286,
                "tf.math.count_nonzero(input)": 0.003215434083601286,
                "tf.math.count_nonzero(input, axis)": 0.003215434083601286,
                "tf.math.cumsum(x, axis)": 0.003215434083601286,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.003215434083601286,
                "tf.math.divide_no_nan(x, y)": 0.003215434083601286,
                "tf.math.floor(x)": 0.003215434083601286,
                "tf.math.log(x)": 0.003215434083601286,
                "tf.math.logical_and(x, y)": 0.003215434083601286,
                "tf.math.logical_not(x)": 0.003215434083601286,
                "tf.math.logical_or(x, y)": 0.003215434083601286,
                "tf.math.logical_xor(x, y)": 0.003215434083601286,
                "tf.math.negative(x)": 0.003215434083601286,
                "tf.math.reciprocal(x)": 0.003215434083601286,
                "tf.math.reciprocal_no_nan(x)": 0.003215434083601286,
                "tf.math.segment_max(data, segment_ids)": 0.003215434083601286,
                "tf.math.segment_mean(data, segment_ids)": 0.003215434083601286,
                "tf.math.segment_min(data, segment_ids)": 0.003215434083601286,
                "tf.math.segment_prod(data, segment_ids)": 0.003215434083601286,
                "tf.math.segment_sum(data, segment_ids)": 0.003215434083601286,
                "tf.math.squared_difference(x, y)": 0.003215434083601286,
                "tf.math.top_k(input, k)": 0.003215434083601286,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.003215434083601286,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.003215434083601286,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.003215434083601286,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.012861736334405145,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.003215434083601286,
                "tf.matmul(a, b)": 0.003215434083601286,
                "tf.maximum(x, y)": 0.003215434083601286,
                "tf.minimum(x, y)": 0.003215434083601286,
                "tf.multiply(x, y)": 0.003215434083601286,
                "tf.not_equal(x, y)": 0.003215434083601286,
                "tf.one_hot(indices, depth)": 0.003215434083601286,
                "tf.ones(shape)": 0.003215434083601286,
                "tf.ones_like(input)": 0.003215434083601286,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.003215434083601286,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.003215434083601286,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.003215434083601286,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.003215434083601286,
                "tf.range(start)": 0.006430868167202572,
                "tf.range(start, limit, delta)": 0.003215434083601286,
                "tf.reduce_any(input_tensor, axis)": 0.006430868167202572,
                "tf.reduce_all(input_tensor, axis)": 0.003215434083601286,
                "tf.reduce_max(input_tensor)": 0.003215434083601286,
                "tf.reduce_max(input_tensor, axis)": 0.003215434083601286,
                "tf.reduce_mean(input_tensor)": 0.003215434083601286,
                "tf.reduce_mean(input_tensor, axis)": 0.003215434083601286,
                "tf.reduce_min(input_tensor)": 0.003215434083601286,
                "tf.reduce_min(input_tensor, axis)": 0.003215434083601286,
                "tf.reduce_prod(input_tensor, axis)": 0.05144694533762058,
                "tf.reduce_sum(input_tensor)": 0.006430868167202572,
                "tf.reduce_sum(input_tensor, axis)": 0.003215434083601286,
                "tf.repeat(input, repeats)": 0.003215434083601286,
                "tf.repeat(input, repeats, axis)": 0.003215434083601286,
                "tf.reshape(tensor, shape)": 0.003215434083601286,
                "tf.reverse(tensor, axis)": 0.003215434083601286,
                "tf.roll(input, shift, axis)": 0.003215434083601286,
                "tf.round(x)": 0.003215434083601286,
                "tf.scatter_nd(indices, updates, shape)": 0.003215434083601286,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.003215434083601286,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.003215434083601286,
                "tf.sequence_mask(lengths)": 0.003215434083601286,
                "tf.sequence_mask(lengths, maxlen)": 0.003215434083601286,
                "tf.shape(input)": 0.00964630225080386,
                "tf.sign(x)": 0.003215434083601286,
                "tf.sort(values, axis)": 0.003215434083601286,
                "tf.sort(values, axis, direction='DESCENDING')": 0.003215434083601286,
                "tf.sqrt(x)": 0.003215434083601286,
                "tf.square(x)": 0.003215434083601286,
                "tf.squeeze(input)": 0.003215434083601286,
                "tf.squeeze(input, axis)": 0.003215434083601286,
                "tf.stack(values, axis)": 0.003215434083601286,
                "tf.subtract(x, y)": 0.003215434083601286,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.003215434083601286,
                "tf.tensordot(a, b, axes)": 0.003215434083601286,
                "tf.tile(input, multiples)": 0.006430868167202572,
                "tf.transpose(a)": 0.003215434083601286,
                "tf.transpose(a, perm)": 0.003215434083601286,
                "tf.unique_with_counts(x)": 0.003215434083601286,
                "tf.unstack(value, axis)": 0.003215434083601286,
                "tf.where(condition)": 0.006430868167202572,
                "tf.where(condition, x, y)": 0.003215434083601286,
                "tf.zeros(shape)": 0.003215434083601286,
                "tf.zeros_like(input)": 0.003215434083601286,
                "tf.SparseTensor(indices, values, dense_shape)": 0.003215434083601286,
                "tf.sparse.add(a, b)": 0.003215434083601286,
                "tf.sparse.concat(axis, sp_inputs)": 0.003215434083601286,
                "tf.sparse.expand_dims(sp_input, axis)": 0.003215434083601286,
                "tf.sparse.from_dense(tensor)": 0.003215434083601286,
                "tf.sparse.maximum(sp_a, sp_b)": 0.003215434083601286,
                "tf.sparse.minimum(sp_a, sp_b)": 0.003215434083601286,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.003215434083601286,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.003215434083601286,
                "tf.sparse.reset_shape(sp_input)": 0.003215434083601286,
                "tf.sparse.reshape(sp_input, shape)": 0.003215434083601286,
                "tf.sparse.retain(sp_input, to_retain)": 0.003215434083601286,
                "tf.sparse.slice(sp_input, start, size)": 0.003215434083601286,
                "tf.sparse.split(sp_input, num_split, axis)": 0.003215434083601286,
                "tf.sparse.to_dense(sp_input)": 0.003215434083601286,
                "tf.sparse.to_dense(sp_input, default_value)": 0.003215434083601286,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.003215434083601286,
                "tf.sparse.transpose(sp_input)": 0.003215434083601286,
                "tf.sparse.transpose(sp_input, perm)": 0.003215434083601286,
                "IndexingAxis1Operation": 0.003215434083601286,
                "IndexingOperation": 0.00964630225080386,
                "PairCreationOperation": 0.003215434083601286,
                "SingletonTupleCreationOperation": 0.003215434083601286,
                "SlicingAxis0BothOperation": 0.003215434083601286,
                "SlicingAxis0LeftOperation": 0.003215434083601286,
                "SlicingAxis0RightOperation": 0.003215434083601286,
                "SlicingAxis1BothOperation": 0.003215434083601286,
                "SlicingAxis1LeftOperation": 0.003215434083601286,
                "SlicingAxis1RightOperation": 0.003215434083601286,
                "TripleCreationOperation": 0.003215434083601286,
                "PROVIDED_CONSTANT_WEIGHT": 0.003215434083601286,
                "COMMON_CONSTANT_WEIGHT": 0.09003215434083602,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.003215434083601286,
                "INPUT_VARIABLE_WEIGHT": 0.1382636655948553,
                "AXIS_CONSTANT_WEIGHT": 0.003215434083601286,
                "SHAPE_CONSTANT_WEIGHT": 0.012861736334405145,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.003215434083601286,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.01607717041800643,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.003215434083601286,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.05144694533762058,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.003215434083601286
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 4,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 4,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 7,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 8,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 7,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 6,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 8,
                "tf.pad(tensor, paddings, mode='REFLECT')": 8,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 8,
                "tf.range(start)": 7,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 7,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 4,
                "tf.reduce_sum(input_tensor)": 7,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side='left')": 8,
                "tf.searchsorted(sorted_sequence, values, side='right')": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 7,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction='DESCENDING')": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 7,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 7,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 7,
                "PairCreationOperation": 8,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 3,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 3,
                "AXIS_CONSTANT_WEIGHT": 8,
                "SHAPE_CONSTANT_WEIGHT": 6,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 6,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 4,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "stackoverflow_39",
        "description": "(\\'set to 0 the elements with absolute value less than 1, and square the other elements\\')",
        "target_program": "tf.multiply(tf.square(in1), tf.cast(tf.cast(tf.cast(in1, tf.int32), tf.bool), tf.float32))",
        "source": "https://stackoverflow.com/questions/37912161/how-can-i-compute-element-wise-conditionals-on-batches-in-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[[-1.5, 1.0, 0.9, 2.0], [1.1, 0.0, -0.1, -0.9], [-1.0, 0.1, -1.1, 2.5]],]",
            "outputs": "[[2.25, 1.0, 0.0, 4.0],    [1.21, 0.0, 0.0, 0.0],    [1.0, 0.0, 1.21, 6.25]]"
        },
        "completions": [
            "return tf.where(tf.abs(in1) < 1, 0, tf.square(in1))\n",
            "return tf.where(tf.less(tf.abs(in1), 1), 0, tf.square(in1))",
            "return tf.where(tf.less(tf.abs(in1), 1), tf.zeros_like(in1), tf.square(in1))\n",
            "return tf.where(tf.abs(in1) < 1, tf.zeros_like(in1), tf.square(in1))\n",
            "def transform(in1):\n    return tf.where(tf.abs(in1) < 1, 0, tf.square(in1))\n",
            "return tf.where(tf.abs(in1) < 1, tf.zeros_like(in1), tf.square(in1))\n",
            "return tf.where(tf.abs(in1) < 1, tf.zeros_like(in1), tf.square(in1))\n",
            "def transform(in1):\n    return tf.where(tf.abs(in1) < 1, 0, tf.square(in1))\n",
            "return tf.where(tf.abs(in1) < 1, tf.zeros_like(in1), tf.square(in1))",
            "return tf.where(tf.greater_equal(tf.abs(in1), 1), tf.square(in1), tf.zeros_like(in1))",
            "def transform(in1):\n    return tf.where(tf.less_equal(tf.abs(in1), 1), 0, tf.square(in1))",
            "return tf.multiply(tf.cast(tf.greater_equal(tf.abs(in1), 1), tf.float32), tf.square(in1))\n",
            "return tf.where(tf.abs(in1) < 1, tf.zeros_like(in1), tf.square(in1))\n",
            "return tf.square(tf.where(tf.greater_equal(tf.abs(in1), 1), in1, 0))\n",
            "return tf.multiply(tf.maximum(tf.abs(in1) - 1.0, 0.0), tf.maximum(tf.abs(in1) - 1.0, 0.0))\n",
            "return tf.where(tf.abs(in1) < 1, tf.square(in1), tf.zeros_like(in1))",
            "def transform(in1):\n    return tf.where(tf.abs(in1) < 1, tf.zeros_like(in1), tf.square(in1))\n",
            "return tf.multiply(tf.cast(tf.greater_equal(tf.abs(in1), 1), tf.float32), tf.square(in1))\n",
            "result = tf.where(tf.less(tf.abs(in1), 1), tf.zeros_like(in1), tf.square(in1))\nreturn result\n",
            "return tf.where(tf.less(tf.abs(in1), 1), tf.zeros_like(in1), tf.square(in1))\n"
        ],
        "tf_operators": {
            "tf.where": 17,
            "tf.square": 19,
            "tf.abs": 20,
            "tf.less": 4,
            "tf.zeros_like": 11,
            "tf.greater_equal": 4,
            "tf.less_equal": 1,
            "tf.multiply": 3,
            "tf.float32": 2,
            "tf.cast": 2,
            "tf.maximum": 1
        },
        "coverage_percentage": 66.66666666666666,
        "total_covered": 4,
        "total_in_target": 6,
        "parsed_constants": [
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ]
        ],
        "all_constants": [
            0,
            1
        ],
        "constant_counts": [
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 51,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 25,
            "shape_tuple": 0,
            "tf_float32": 2,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.07051282051282051,
                "tf.add(x, y)": 0.003205128205128205,
                "tf.add_n(inputs)": 0.003205128205128205,
                "tf.argmax(input, axis)": 0.003205128205128205,
                "tf.argmin(input, axis)": 0.003205128205128205,
                "tf.argsort(values, axis, stable=True)": 0.003205128205128205,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.003205128205128205,
                "tf.boolean_mask(tensor, mask)": 0.003205128205128205,
                "tf.broadcast_to(input, shape)": 0.003205128205128205,
                "tf.cast(x, dtype)": 0.009615384615384616,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.003205128205128205,
                "tf.concat(values, axis)": 0.003205128205128205,
                "tf.constant(value)": 0.003205128205128205,
                "tf.constant(value, dtype)": 0.003205128205128205,
                "tf.divide(x, y)": 0.003205128205128205,
                "tf.equal(x, y)": 0.003205128205128205,
                "tf.exp(x)": 0.003205128205128205,
                "tf.expand_dims(input, axis)": 0.003205128205128205,
                "tf.eye(num_rows)": 0.003205128205128205,
                "tf.eye(num_rows, num_columns)": 0.003205128205128205,
                "tf.eye(num_rows, dtype)": 0.003205128205128205,
                "tf.fill(dims, value)": 0.003205128205128205,
                "tf.gather(params, indices)": 0.003205128205128205,
                "tf.gather(params, indices, axis, batch_dims)": 0.003205128205128205,
                "tf.gather_nd(params, indices)": 0.003205128205128205,
                "tf.gather_nd(params, indices, batch_dims)": 0.003205128205128205,
                "tf.greater(x, y)": 0.003205128205128205,
                "tf.greater_equal(x, y)": 0.016025641025641024,
                "tf.math.bincount(arr)": 0.003205128205128205,
                "tf.math.ceil(x)": 0.003205128205128205,
                "tf.math.count_nonzero(input)": 0.003205128205128205,
                "tf.math.count_nonzero(input, axis)": 0.003205128205128205,
                "tf.math.cumsum(x, axis)": 0.003205128205128205,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.003205128205128205,
                "tf.math.divide_no_nan(x, y)": 0.003205128205128205,
                "tf.math.floor(x)": 0.003205128205128205,
                "tf.math.log(x)": 0.003205128205128205,
                "tf.math.logical_and(x, y)": 0.003205128205128205,
                "tf.math.logical_not(x)": 0.003205128205128205,
                "tf.math.logical_or(x, y)": 0.003205128205128205,
                "tf.math.logical_xor(x, y)": 0.003205128205128205,
                "tf.math.negative(x)": 0.003205128205128205,
                "tf.math.reciprocal(x)": 0.003205128205128205,
                "tf.math.reciprocal_no_nan(x)": 0.003205128205128205,
                "tf.math.segment_max(data, segment_ids)": 0.003205128205128205,
                "tf.math.segment_mean(data, segment_ids)": 0.003205128205128205,
                "tf.math.segment_min(data, segment_ids)": 0.003205128205128205,
                "tf.math.segment_prod(data, segment_ids)": 0.003205128205128205,
                "tf.math.segment_sum(data, segment_ids)": 0.003205128205128205,
                "tf.math.squared_difference(x, y)": 0.003205128205128205,
                "tf.math.top_k(input, k)": 0.003205128205128205,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.003205128205128205,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.003205128205128205,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.003205128205128205,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.003205128205128205,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.003205128205128205,
                "tf.matmul(a, b)": 0.003205128205128205,
                "tf.maximum(x, y)": 0.009615384615384616,
                "tf.minimum(x, y)": 0.003205128205128205,
                "tf.multiply(x, y)": 0.01282051282051282,
                "tf.not_equal(x, y)": 0.003205128205128205,
                "tf.one_hot(indices, depth)": 0.003205128205128205,
                "tf.ones(shape)": 0.003205128205128205,
                "tf.ones_like(input)": 0.003205128205128205,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.003205128205128205,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.003205128205128205,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.003205128205128205,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.003205128205128205,
                "tf.range(start)": 0.003205128205128205,
                "tf.range(start, limit, delta)": 0.003205128205128205,
                "tf.reduce_any(input_tensor, axis)": 0.003205128205128205,
                "tf.reduce_all(input_tensor, axis)": 0.003205128205128205,
                "tf.reduce_max(input_tensor)": 0.003205128205128205,
                "tf.reduce_max(input_tensor, axis)": 0.003205128205128205,
                "tf.reduce_mean(input_tensor)": 0.003205128205128205,
                "tf.reduce_mean(input_tensor, axis)": 0.003205128205128205,
                "tf.reduce_min(input_tensor)": 0.003205128205128205,
                "tf.reduce_min(input_tensor, axis)": 0.003205128205128205,
                "tf.reduce_prod(input_tensor, axis)": 0.003205128205128205,
                "tf.reduce_sum(input_tensor)": 0.003205128205128205,
                "tf.reduce_sum(input_tensor, axis)": 0.003205128205128205,
                "tf.repeat(input, repeats)": 0.003205128205128205,
                "tf.repeat(input, repeats, axis)": 0.003205128205128205,
                "tf.reshape(tensor, shape)": 0.003205128205128205,
                "tf.reverse(tensor, axis)": 0.003205128205128205,
                "tf.roll(input, shift, axis)": 0.003205128205128205,
                "tf.round(x)": 0.003205128205128205,
                "tf.scatter_nd(indices, updates, shape)": 0.003205128205128205,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.003205128205128205,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.003205128205128205,
                "tf.sequence_mask(lengths)": 0.003205128205128205,
                "tf.sequence_mask(lengths, maxlen)": 0.003205128205128205,
                "tf.shape(input)": 0.003205128205128205,
                "tf.sign(x)": 0.003205128205128205,
                "tf.sort(values, axis)": 0.003205128205128205,
                "tf.sort(values, axis, direction='DESCENDING')": 0.003205128205128205,
                "tf.sqrt(x)": 0.003205128205128205,
                "tf.square(x)": 0.0641025641025641,
                "tf.squeeze(input)": 0.003205128205128205,
                "tf.squeeze(input, axis)": 0.003205128205128205,
                "tf.stack(values, axis)": 0.003205128205128205,
                "tf.subtract(x, y)": 0.003205128205128205,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.003205128205128205,
                "tf.tensordot(a, b, axes)": 0.003205128205128205,
                "tf.tile(input, multiples)": 0.003205128205128205,
                "tf.transpose(a)": 0.003205128205128205,
                "tf.transpose(a, perm)": 0.003205128205128205,
                "tf.unique_with_counts(x)": 0.003205128205128205,
                "tf.unstack(value, axis)": 0.003205128205128205,
                "tf.where(condition)": 0.003205128205128205,
                "tf.where(condition, x, y)": 0.057692307692307696,
                "tf.zeros(shape)": 0.003205128205128205,
                "tf.zeros_like(input)": 0.038461538461538464,
                "tf.SparseTensor(indices, values, dense_shape)": 0.003205128205128205,
                "tf.sparse.add(a, b)": 0.003205128205128205,
                "tf.sparse.concat(axis, sp_inputs)": 0.003205128205128205,
                "tf.sparse.expand_dims(sp_input, axis)": 0.003205128205128205,
                "tf.sparse.from_dense(tensor)": 0.003205128205128205,
                "tf.sparse.maximum(sp_a, sp_b)": 0.003205128205128205,
                "tf.sparse.minimum(sp_a, sp_b)": 0.003205128205128205,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.003205128205128205,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.003205128205128205,
                "tf.sparse.reset_shape(sp_input)": 0.003205128205128205,
                "tf.sparse.reshape(sp_input, shape)": 0.003205128205128205,
                "tf.sparse.retain(sp_input, to_retain)": 0.003205128205128205,
                "tf.sparse.slice(sp_input, start, size)": 0.003205128205128205,
                "tf.sparse.split(sp_input, num_split, axis)": 0.003205128205128205,
                "tf.sparse.to_dense(sp_input)": 0.003205128205128205,
                "tf.sparse.to_dense(sp_input, default_value)": 0.003205128205128205,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.003205128205128205,
                "tf.sparse.transpose(sp_input)": 0.003205128205128205,
                "tf.sparse.transpose(sp_input, perm)": 0.003205128205128205,
                "IndexingAxis1Operation": 0.003205128205128205,
                "IndexingOperation": 0.003205128205128205,
                "PairCreationOperation": 0.003205128205128205,
                "SingletonTupleCreationOperation": 0.003205128205128205,
                "SlicingAxis0BothOperation": 0.003205128205128205,
                "SlicingAxis0LeftOperation": 0.003205128205128205,
                "SlicingAxis0RightOperation": 0.003205128205128205,
                "SlicingAxis1BothOperation": 0.003205128205128205,
                "SlicingAxis1LeftOperation": 0.003205128205128205,
                "SlicingAxis1RightOperation": 0.003205128205128205,
                "TripleCreationOperation": 0.003205128205128205,
                "PROVIDED_CONSTANT_WEIGHT": 0.003205128205128205,
                "COMMON_CONSTANT_WEIGHT": 0.08333333333333333,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.003205128205128205,
                "INPUT_VARIABLE_WEIGHT": 0.16666666666666666,
                "AXIS_CONSTANT_WEIGHT": 0.003205128205128205,
                "SHAPE_CONSTANT_WEIGHT": 0.003205128205128205,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.003205128205128205,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.003205128205128205,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.009615384615384616,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.003205128205128205,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.003205128205128205
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 4,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 7,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 8,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 6,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 7,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 6,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 8,
                "tf.pad(tensor, paddings, mode='REFLECT')": 8,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side='left')": 8,
                "tf.searchsorted(sorted_sequence, values, side='right')": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 8,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction='DESCENDING')": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 4,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 4,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 5,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 8,
                "PairCreationOperation": 8,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 4,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 3,
                "AXIS_CONSTANT_WEIGHT": 8,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 7,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "stackoverflow_40",
        "description": "use the output of tf.nn.top_k to make a sparse tensor",
        "target_program": "tf.sparse.to_dense(tf.SparseTensor(tf.cast(in2, tf.int64), in1, (3, 5)))",
        "source": "https://stackoverflow.com/questions/43996831/make-a-sparse-tensor-based-on-the-output-of-tf-nn-top-k",
        "constants": "[]",
        "examples": {
            "inputs": "[[4, 5, 2, 7, 8, 6],[[0, 2], [0, 4], [1, 1], [1, 3], [2, 0], [2, 3]],]",
            "outputs": "[[0, 0, 4, 0, 5],[0, 2, 0, 7, 0],[8, 0, 0, 6, 0]]"
        },
        "completions": [
            "return tf.scatter_nd(in2, in1, [3, 5])",
            "return tf.tensor_scatter_nd_update(tf.zeros([3, 5], dtype=tf.int32), in2, in1)",
            "def transform(in1, in2):\n    values, indices = tf.nn.top_k(in1, k=in1.shape[0])\n    sparse_tensor = tf.sparse.SparseTensor(indices=in2, values=tf.gather(values, indices), dense_shape=in2.shape)\n    return tf.sparse.to_dense(sparse_tensor)\n",
            "return tf.sparse.SparseTensor(indices=in2, values=in1, dense_shape=(3, 5))",
            "return tf.scatter_nd(in2, in1, shape=[3, 5])",
            "values, indices = tf.math.top_k(in1)\nreturn tf.scatter_nd(indices, values, tf.shape(in1))\n",
            "return tf.sparse.SparseTensor(indices=in2, values=in1, dense_shape=[3, 5])",
            "return tf.sparse.SparseTensor(indices=in2, values=in1, dense_shape=(3, 5))",
            "values = tf.constant(in1)\nindices = tf.constant(in2)\ntop_k_values, top_k_indices = tf.nn.top_k(values, k=2)\nsparse_tensor = tf.sparse.SparseTensor(indices=top_k_indices, values=top_k_values, dense_shape=[3, 5])\nreturn tf.sparse.to_dense(sparse_tensor)\n",
            "return tf.sparse.SparseTensor(tf.cast(in2, tf.int64), in1, [3, 5])",
            "return tf.scatter_nd(in2, in1, shape=tf.reduce_max(in2, axis=0) + 1)\n",
            "def transform(in1, in2):\n    values, indices = in1, in2\n    top_values, top_indices = tf.math.top_k(-values, k=tf.shape(in2)[1])\n    row_indices = tf.repeat(tf.range(tf.shape(in2)[0]), tf.shape(in2)[1])\n    output = tf.scatter_nd(tf.transpose(tf.stack([row_indices, top_indices])), top_values, shape=tf.shape(in1))\n    return output\n",
            "return tf.sparse.SparseTensor(indices=in2, values=in1, dense_shape=(3, 5))",
            "return tf.scatter_nd(in2, in1, shape=(3, 5))",
            "return tf.scatter_nd(in2, in1.values, (3, 5))",
            "return tf.sparse.SparseTensor(tf.cast(in2, tf.int64), in1, dense_shape=[3, 5])",
            "values = in1\nindices = in2\nreturn tf.scatter_nd(indices, values, shape=(3, 5))\n",
            "return tf.sparse.SparseTensor(indices=in2, values=in1, dense_shape=[3, 5])",
            "values, indices = tf.unstack(in2, axis=1)\nreturn tf.scatter_nd(indices, values, shape=(3, 5))\n",
            "values = -in1\n_, indices = tf.math.top_k(values, k=in2.shape[0])\nupdates = tf.ones_like(indices, shape=[tf.shape(indices)[0]])\nreturn tf.tensor_scatter_nd_update(tensor=tf.zeros([in2.shape[0], tf.reduce_max(in2) + 1], dtype=in1.dtype), indices=in2, updates=indices)\n"
        ],
        "tf_operators": {
            "tf.scatter_nd": 9,
            "tf.tensor_scatter_nd_update": 2,
            "tf.zeros": 2,
            "tf.int32": 1,
            "tf.sparse.SparseTensor": 9,
            "tf.gather": 1,
            "tf.nn.top_k": 2,
            "tf.sparse.to_dense": 2,
            "tf.shape": 3,
            "tf.math.top_k": 3,
            "tf.constant": 1,
            "tf.cast": 2,
            "tf.int64": 2,
            "tf.reduce_max": 2,
            "tf.transpose": 1,
            "tf.repeat": 1,
            "tf.stack": 1,
            "tf.range": 1,
            "tf.unstack": 1,
            "tf.ones_like": 1
        },
        "coverage_percentage": 75.0,
        "total_covered": 3,
        "total_in_target": 4,
        "parsed_constants": [
            [
                3,
                5
            ],
            [
                3,
                5
            ],
            [
                0
            ],
            [
                3,
                5
            ],
            [
                3,
                5
            ],
            [],
            [
                3,
                5
            ],
            [
                3,
                5
            ],
            [
                2,
                3,
                5
            ],
            [
                3,
                5
            ],
            [
                0,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                3,
                5
            ],
            [
                3,
                5
            ],
            [
                3,
                5
            ],
            [
                3,
                5
            ],
            [
                3,
                5
            ],
            [
                3,
                5
            ],
            [
                1,
                3,
                5
            ],
            [
                0,
                0,
                0,
                1
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            3,
            5
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 1,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 1,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 1
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 7,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 52,
            "shape": 0,
            "tf_bool": 0,
            "provided": 16,
            "common": 11,
            "shape_tuple": 7,
            "tf_float32": 0,
            "axis": 1,
            "tf_int64": 2,
            "tf_int32": 1
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.0033003300330033004,
                "tf.add(x, y)": 0.0033003300330033004,
                "tf.add_n(inputs)": 0.0033003300330033004,
                "tf.argmax(input, axis)": 0.0033003300330033004,
                "tf.argmin(input, axis)": 0.0033003300330033004,
                "tf.argsort(values, axis, stable=True)": 0.0033003300330033004,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.0033003300330033004,
                "tf.boolean_mask(tensor, mask)": 0.0033003300330033004,
                "tf.broadcast_to(input, shape)": 0.0033003300330033004,
                "tf.cast(x, dtype)": 0.009900990099009901,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.0033003300330033004,
                "tf.concat(values, axis)": 0.0033003300330033004,
                "tf.constant(value)": 0.009900990099009901,
                "tf.constant(value, dtype)": 0.0033003300330033004,
                "tf.divide(x, y)": 0.0033003300330033004,
                "tf.equal(x, y)": 0.0033003300330033004,
                "tf.exp(x)": 0.0033003300330033004,
                "tf.expand_dims(input, axis)": 0.0033003300330033004,
                "tf.eye(num_rows)": 0.0033003300330033004,
                "tf.eye(num_rows, num_columns)": 0.0033003300330033004,
                "tf.eye(num_rows, dtype)": 0.0033003300330033004,
                "tf.fill(dims, value)": 0.0033003300330033004,
                "tf.gather(params, indices)": 0.006600660066006601,
                "tf.gather(params, indices, axis, batch_dims)": 0.0033003300330033004,
                "tf.gather_nd(params, indices)": 0.0033003300330033004,
                "tf.gather_nd(params, indices, batch_dims)": 0.0033003300330033004,
                "tf.greater(x, y)": 0.0033003300330033004,
                "tf.greater_equal(x, y)": 0.0033003300330033004,
                "tf.math.bincount(arr)": 0.0033003300330033004,
                "tf.math.ceil(x)": 0.0033003300330033004,
                "tf.math.count_nonzero(input)": 0.0033003300330033004,
                "tf.math.count_nonzero(input, axis)": 0.0033003300330033004,
                "tf.math.cumsum(x, axis)": 0.0033003300330033004,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.0033003300330033004,
                "tf.math.divide_no_nan(x, y)": 0.0033003300330033004,
                "tf.math.floor(x)": 0.0033003300330033004,
                "tf.math.log(x)": 0.0033003300330033004,
                "tf.math.logical_and(x, y)": 0.0033003300330033004,
                "tf.math.logical_not(x)": 0.0033003300330033004,
                "tf.math.logical_or(x, y)": 0.0033003300330033004,
                "tf.math.logical_xor(x, y)": 0.0033003300330033004,
                "tf.math.negative(x)": 0.0033003300330033004,
                "tf.math.reciprocal(x)": 0.0033003300330033004,
                "tf.math.reciprocal_no_nan(x)": 0.0033003300330033004,
                "tf.math.segment_max(data, segment_ids)": 0.0033003300330033004,
                "tf.math.segment_mean(data, segment_ids)": 0.0033003300330033004,
                "tf.math.segment_min(data, segment_ids)": 0.0033003300330033004,
                "tf.math.segment_prod(data, segment_ids)": 0.0033003300330033004,
                "tf.math.segment_sum(data, segment_ids)": 0.0033003300330033004,
                "tf.math.squared_difference(x, y)": 0.0033003300330033004,
                "tf.math.top_k(input, k)": 0.013201320132013201,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.0033003300330033004,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.0033003300330033004,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.0033003300330033004,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.0033003300330033004,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.0033003300330033004,
                "tf.matmul(a, b)": 0.0033003300330033004,
                "tf.maximum(x, y)": 0.0033003300330033004,
                "tf.minimum(x, y)": 0.0033003300330033004,
                "tf.multiply(x, y)": 0.0033003300330033004,
                "tf.not_equal(x, y)": 0.0033003300330033004,
                "tf.one_hot(indices, depth)": 0.0033003300330033004,
                "tf.ones(shape)": 0.0033003300330033004,
                "tf.ones_like(input)": 0.006600660066006601,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.0033003300330033004,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.0033003300330033004,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.0033003300330033004,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.0033003300330033004,
                "tf.range(start)": 0.006600660066006601,
                "tf.range(start, limit, delta)": 0.0033003300330033004,
                "tf.reduce_any(input_tensor, axis)": 0.0033003300330033004,
                "tf.reduce_all(input_tensor, axis)": 0.0033003300330033004,
                "tf.reduce_max(input_tensor)": 0.006600660066006601,
                "tf.reduce_max(input_tensor, axis)": 0.0033003300330033004,
                "tf.reduce_mean(input_tensor)": 0.0033003300330033004,
                "tf.reduce_mean(input_tensor, axis)": 0.0033003300330033004,
                "tf.reduce_min(input_tensor)": 0.0033003300330033004,
                "tf.reduce_min(input_tensor, axis)": 0.0033003300330033004,
                "tf.reduce_prod(input_tensor, axis)": 0.0033003300330033004,
                "tf.reduce_sum(input_tensor)": 0.0033003300330033004,
                "tf.reduce_sum(input_tensor, axis)": 0.0033003300330033004,
                "tf.repeat(input, repeats)": 0.006600660066006601,
                "tf.repeat(input, repeats, axis)": 0.0033003300330033004,
                "tf.reshape(tensor, shape)": 0.0033003300330033004,
                "tf.reverse(tensor, axis)": 0.0033003300330033004,
                "tf.roll(input, shift, axis)": 0.0033003300330033004,
                "tf.round(x)": 0.0033003300330033004,
                "tf.scatter_nd(indices, updates, shape)": 0.033003300330033,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.0033003300330033004,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.0033003300330033004,
                "tf.sequence_mask(lengths)": 0.0033003300330033004,
                "tf.sequence_mask(lengths, maxlen)": 0.0033003300330033004,
                "tf.shape(input)": 0.0231023102310231,
                "tf.sign(x)": 0.0033003300330033004,
                "tf.sort(values, axis)": 0.0033003300330033004,
                "tf.sort(values, axis, direction='DESCENDING')": 0.0033003300330033004,
                "tf.sqrt(x)": 0.0033003300330033004,
                "tf.square(x)": 0.0033003300330033004,
                "tf.squeeze(input)": 0.0033003300330033004,
                "tf.squeeze(input, axis)": 0.0033003300330033004,
                "tf.stack(values, axis)": 0.006600660066006601,
                "tf.subtract(x, y)": 0.0033003300330033004,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.009900990099009901,
                "tf.tensordot(a, b, axes)": 0.0033003300330033004,
                "tf.tile(input, multiples)": 0.0033003300330033004,
                "tf.transpose(a)": 0.006600660066006601,
                "tf.transpose(a, perm)": 0.0033003300330033004,
                "tf.unique_with_counts(x)": 0.0033003300330033004,
                "tf.unstack(value, axis)": 0.006600660066006601,
                "tf.where(condition)": 0.0033003300330033004,
                "tf.where(condition, x, y)": 0.0033003300330033004,
                "tf.zeros(shape)": 0.009900990099009901,
                "tf.zeros_like(input)": 0.0033003300330033004,
                "tf.SparseTensor(indices, values, dense_shape)": 0.0033003300330033004,
                "tf.sparse.add(a, b)": 0.0033003300330033004,
                "tf.sparse.concat(axis, sp_inputs)": 0.0033003300330033004,
                "tf.sparse.expand_dims(sp_input, axis)": 0.0033003300330033004,
                "tf.sparse.from_dense(tensor)": 0.0033003300330033004,
                "tf.sparse.maximum(sp_a, sp_b)": 0.0033003300330033004,
                "tf.sparse.minimum(sp_a, sp_b)": 0.0033003300330033004,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.0033003300330033004,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.0033003300330033004,
                "tf.sparse.reset_shape(sp_input)": 0.0033003300330033004,
                "tf.sparse.reshape(sp_input, shape)": 0.0033003300330033004,
                "tf.sparse.retain(sp_input, to_retain)": 0.0033003300330033004,
                "tf.sparse.slice(sp_input, start, size)": 0.0033003300330033004,
                "tf.sparse.split(sp_input, num_split, axis)": 0.0033003300330033004,
                "tf.sparse.to_dense(sp_input)": 0.009900990099009901,
                "tf.sparse.to_dense(sp_input, default_value)": 0.0033003300330033004,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.0033003300330033004,
                "tf.sparse.transpose(sp_input)": 0.0033003300330033004,
                "tf.sparse.transpose(sp_input, perm)": 0.0033003300330033004,
                "IndexingAxis1Operation": 0.0033003300330033004,
                "IndexingOperation": 0.026402640264026403,
                "PairCreationOperation": 0.052805280528052806,
                "SingletonTupleCreationOperation": 0.0033003300330033004,
                "SlicingAxis0BothOperation": 0.0033003300330033004,
                "SlicingAxis0LeftOperation": 0.0033003300330033004,
                "SlicingAxis0RightOperation": 0.0033003300330033004,
                "SlicingAxis1BothOperation": 0.0033003300330033004,
                "SlicingAxis1LeftOperation": 0.0033003300330033004,
                "SlicingAxis1RightOperation": 0.0033003300330033004,
                "TripleCreationOperation": 0.0033003300330033004,
                "PROVIDED_CONSTANT_WEIGHT": 0.056105610561056105,
                "COMMON_CONSTANT_WEIGHT": 0.039603960396039604,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.0033003300330033004,
                "INPUT_VARIABLE_WEIGHT": 0.17491749174917492,
                "AXIS_CONSTANT_WEIGHT": 0.006600660066006601,
                "SHAPE_CONSTANT_WEIGHT": 0.0033003300330033004,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.026402640264026403,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.006600660066006601,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.0033003300330033004,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.0033003300330033004,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.009900990099009901
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 7,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 7,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 8,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 7,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 6,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 7,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 8,
                "tf.pad(tensor, paddings, mode='REFLECT')": 8,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 8,
                "tf.range(start)": 7,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 7,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 7,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 5,
                "tf.searchsorted(sorted_sequence, values, side='left')": 8,
                "tf.searchsorted(sorted_sequence, values, side='right')": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 5,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction='DESCENDING')": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 7,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 7,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 7,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 7,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 7,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 7,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 5,
                "PairCreationOperation": 4,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 4,
                "COMMON_CONSTANT_WEIGHT": 5,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 3,
                "AXIS_CONSTANT_WEIGHT": 7,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 5,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 7,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 7
            }
        }
    },
    {
        "name": "stackoverflow_41",
        "description": "copy all elements except at the given index",
        "target_program": "tf.boolean_mask(in1, tf.not_equal(tf.constant(in2), tf.range(10)))",
        "source": "https://stackoverflow.com/questions/54499051/elegant-way-to-access-python-list-and-tensor-in-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[5, 2, 8, 2, 4, 1, 1, 0, 2, 1],3,]",
            "outputs": "[5, 2, 8, 4, 1, 1, 0, 2, 1]"
        },
        "completions": [
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "def transform(in1, in2):\n    return tf.concat([in1[:in2], in1[in2+1:]], axis=0)\n",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))\n",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.size(in1)), in2))",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(in1.shape[0]), in2))",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))\n",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.size(in1)), in2))",
            "return tf.gather(in1, tf.where(tf.not_equal(tf.range(tf.shape(in1)[0]), in2))[:, 0])",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.size(in1)), in2))",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.size(in1)), in2))\n",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "return tf.gather(in1, tf.where(tf.not_equal(tf.range(tf.shape(in1)[0]), in2))[:, 0])",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))"
        ],
        "tf_operators": {
            "tf.boolean_mask": 17,
            "tf.not_equal": 19,
            "tf.shape": 14,
            "tf.range": 19,
            "tf.concat": 1,
            "tf.size": 4,
            "tf.where": 2,
            "tf.gather": 2
        },
        "coverage_percentage": 75.0,
        "total_covered": 3,
        "total_in_target": 4,
        "parsed_constants": [
            [
                0
            ],
            [
                1,
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [],
            [
                0,
                0
            ],
            [],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [],
            [
                0
            ],
            [
                0,
                0
            ],
            [
                0
            ]
        ],
        "all_constants": [
            0,
            1
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 60,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 17,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.0030581039755351682,
                "tf.add(x, y)": 0.0030581039755351682,
                "tf.add_n(inputs)": 0.0030581039755351682,
                "tf.argmax(input, axis)": 0.0030581039755351682,
                "tf.argmin(input, axis)": 0.0030581039755351682,
                "tf.argsort(values, axis, stable=True)": 0.0030581039755351682,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.0030581039755351682,
                "tf.boolean_mask(tensor, mask)": 0.05504587155963303,
                "tf.broadcast_to(input, shape)": 0.0030581039755351682,
                "tf.cast(x, dtype)": 0.0030581039755351682,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.0030581039755351682,
                "tf.concat(values, axis)": 0.0061162079510703364,
                "tf.constant(value)": 0.0030581039755351682,
                "tf.constant(value, dtype)": 0.0030581039755351682,
                "tf.divide(x, y)": 0.0030581039755351682,
                "tf.equal(x, y)": 0.0030581039755351682,
                "tf.exp(x)": 0.0030581039755351682,
                "tf.expand_dims(input, axis)": 0.0030581039755351682,
                "tf.eye(num_rows)": 0.0030581039755351682,
                "tf.eye(num_rows, num_columns)": 0.0030581039755351682,
                "tf.eye(num_rows, dtype)": 0.0030581039755351682,
                "tf.fill(dims, value)": 0.0030581039755351682,
                "tf.gather(params, indices)": 0.009174311926605505,
                "tf.gather(params, indices, axis, batch_dims)": 0.0030581039755351682,
                "tf.gather_nd(params, indices)": 0.0030581039755351682,
                "tf.gather_nd(params, indices, batch_dims)": 0.0030581039755351682,
                "tf.greater(x, y)": 0.0030581039755351682,
                "tf.greater_equal(x, y)": 0.0030581039755351682,
                "tf.math.bincount(arr)": 0.0030581039755351682,
                "tf.math.ceil(x)": 0.0030581039755351682,
                "tf.math.count_nonzero(input)": 0.0030581039755351682,
                "tf.math.count_nonzero(input, axis)": 0.0030581039755351682,
                "tf.math.cumsum(x, axis)": 0.0030581039755351682,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.0030581039755351682,
                "tf.math.divide_no_nan(x, y)": 0.0030581039755351682,
                "tf.math.floor(x)": 0.0030581039755351682,
                "tf.math.log(x)": 0.0030581039755351682,
                "tf.math.logical_and(x, y)": 0.0030581039755351682,
                "tf.math.logical_not(x)": 0.0030581039755351682,
                "tf.math.logical_or(x, y)": 0.0030581039755351682,
                "tf.math.logical_xor(x, y)": 0.0030581039755351682,
                "tf.math.negative(x)": 0.0030581039755351682,
                "tf.math.reciprocal(x)": 0.0030581039755351682,
                "tf.math.reciprocal_no_nan(x)": 0.0030581039755351682,
                "tf.math.segment_max(data, segment_ids)": 0.0030581039755351682,
                "tf.math.segment_mean(data, segment_ids)": 0.0030581039755351682,
                "tf.math.segment_min(data, segment_ids)": 0.0030581039755351682,
                "tf.math.segment_prod(data, segment_ids)": 0.0030581039755351682,
                "tf.math.segment_sum(data, segment_ids)": 0.0030581039755351682,
                "tf.math.squared_difference(x, y)": 0.0030581039755351682,
                "tf.math.top_k(input, k)": 0.0030581039755351682,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.0030581039755351682,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.0030581039755351682,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.0030581039755351682,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.0030581039755351682,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.0030581039755351682,
                "tf.matmul(a, b)": 0.0030581039755351682,
                "tf.maximum(x, y)": 0.0030581039755351682,
                "tf.minimum(x, y)": 0.0030581039755351682,
                "tf.multiply(x, y)": 0.0030581039755351682,
                "tf.not_equal(x, y)": 0.06116207951070336,
                "tf.one_hot(indices, depth)": 0.0030581039755351682,
                "tf.ones(shape)": 0.0030581039755351682,
                "tf.ones_like(input)": 0.0030581039755351682,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.0030581039755351682,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.0030581039755351682,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.0030581039755351682,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.0030581039755351682,
                "tf.range(start)": 0.06116207951070336,
                "tf.range(start, limit, delta)": 0.0030581039755351682,
                "tf.reduce_any(input_tensor, axis)": 0.0030581039755351682,
                "tf.reduce_all(input_tensor, axis)": 0.0030581039755351682,
                "tf.reduce_max(input_tensor)": 0.0030581039755351682,
                "tf.reduce_max(input_tensor, axis)": 0.0030581039755351682,
                "tf.reduce_mean(input_tensor)": 0.0030581039755351682,
                "tf.reduce_mean(input_tensor, axis)": 0.0030581039755351682,
                "tf.reduce_min(input_tensor)": 0.0030581039755351682,
                "tf.reduce_min(input_tensor, axis)": 0.0030581039755351682,
                "tf.reduce_prod(input_tensor, axis)": 0.0030581039755351682,
                "tf.reduce_sum(input_tensor)": 0.0030581039755351682,
                "tf.reduce_sum(input_tensor, axis)": 0.0030581039755351682,
                "tf.repeat(input, repeats)": 0.0030581039755351682,
                "tf.repeat(input, repeats, axis)": 0.0030581039755351682,
                "tf.reshape(tensor, shape)": 0.0030581039755351682,
                "tf.reverse(tensor, axis)": 0.0030581039755351682,
                "tf.roll(input, shift, axis)": 0.0030581039755351682,
                "tf.round(x)": 0.0030581039755351682,
                "tf.scatter_nd(indices, updates, shape)": 0.0030581039755351682,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.0030581039755351682,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.0030581039755351682,
                "tf.sequence_mask(lengths)": 0.0030581039755351682,
                "tf.sequence_mask(lengths, maxlen)": 0.0030581039755351682,
                "tf.shape(input)": 0.045871559633027525,
                "tf.sign(x)": 0.0030581039755351682,
                "tf.sort(values, axis)": 0.0030581039755351682,
                "tf.sort(values, axis, direction='DESCENDING')": 0.0030581039755351682,
                "tf.sqrt(x)": 0.0030581039755351682,
                "tf.square(x)": 0.0030581039755351682,
                "tf.squeeze(input)": 0.0030581039755351682,
                "tf.squeeze(input, axis)": 0.0030581039755351682,
                "tf.stack(values, axis)": 0.0030581039755351682,
                "tf.subtract(x, y)": 0.0030581039755351682,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.0030581039755351682,
                "tf.tensordot(a, b, axes)": 0.0030581039755351682,
                "tf.tile(input, multiples)": 0.0030581039755351682,
                "tf.transpose(a)": 0.0030581039755351682,
                "tf.transpose(a, perm)": 0.0030581039755351682,
                "tf.unique_with_counts(x)": 0.0030581039755351682,
                "tf.unstack(value, axis)": 0.0030581039755351682,
                "tf.where(condition)": 0.009174311926605505,
                "tf.where(condition, x, y)": 0.0030581039755351682,
                "tf.zeros(shape)": 0.0030581039755351682,
                "tf.zeros_like(input)": 0.0030581039755351682,
                "tf.SparseTensor(indices, values, dense_shape)": 0.0030581039755351682,
                "tf.sparse.add(a, b)": 0.0030581039755351682,
                "tf.sparse.concat(axis, sp_inputs)": 0.0030581039755351682,
                "tf.sparse.expand_dims(sp_input, axis)": 0.0030581039755351682,
                "tf.sparse.from_dense(tensor)": 0.0030581039755351682,
                "tf.sparse.maximum(sp_a, sp_b)": 0.0030581039755351682,
                "tf.sparse.minimum(sp_a, sp_b)": 0.0030581039755351682,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.0030581039755351682,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.0030581039755351682,
                "tf.sparse.reset_shape(sp_input)": 0.0030581039755351682,
                "tf.sparse.reshape(sp_input, shape)": 0.0030581039755351682,
                "tf.sparse.retain(sp_input, to_retain)": 0.0030581039755351682,
                "tf.sparse.slice(sp_input, start, size)": 0.0030581039755351682,
                "tf.sparse.split(sp_input, num_split, axis)": 0.0030581039755351682,
                "tf.sparse.to_dense(sp_input)": 0.0030581039755351682,
                "tf.sparse.to_dense(sp_input, default_value)": 0.0030581039755351682,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.0030581039755351682,
                "tf.sparse.transpose(sp_input)": 0.0030581039755351682,
                "tf.sparse.transpose(sp_input, perm)": 0.0030581039755351682,
                "IndexingAxis1Operation": 0.009174311926605505,
                "IndexingOperation": 0.04892966360856269,
                "PairCreationOperation": 0.009174311926605505,
                "SingletonTupleCreationOperation": 0.0030581039755351682,
                "SlicingAxis0BothOperation": 0.0030581039755351682,
                "SlicingAxis0LeftOperation": 0.0061162079510703364,
                "SlicingAxis0RightOperation": 0.0061162079510703364,
                "SlicingAxis1BothOperation": 0.0030581039755351682,
                "SlicingAxis1LeftOperation": 0.0030581039755351682,
                "SlicingAxis1RightOperation": 0.0030581039755351682,
                "TripleCreationOperation": 0.0030581039755351682,
                "PROVIDED_CONSTANT_WEIGHT": 0.0030581039755351682,
                "COMMON_CONSTANT_WEIGHT": 0.05504587155963303,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.0030581039755351682,
                "INPUT_VARIABLE_WEIGHT": 0.18654434250764526,
                "AXIS_CONSTANT_WEIGHT": 0.0030581039755351682,
                "SHAPE_CONSTANT_WEIGHT": 0.0030581039755351682,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.0030581039755351682,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.0030581039755351682,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.0030581039755351682,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.0030581039755351682,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.0030581039755351682
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 4,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 8,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 7,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 8,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 7,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 4,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 8,
                "tf.pad(tensor, paddings, mode='REFLECT')": 8,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 8,
                "tf.range(start)": 4,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side='left')": 8,
                "tf.searchsorted(sorted_sequence, values, side='right')": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 4,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction='DESCENDING')": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 7,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 7,
                "IndexingOperation": 4,
                "PairCreationOperation": 7,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 7,
                "SlicingAxis0RightOperation": 7,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 4,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 2,
                "AXIS_CONSTANT_WEIGHT": 8,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "stackoverflow_42",
        "description": "create a binary vector where the max element is 1",
        "target_program": "tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)",
        "source": "https://stackoverflow.com/questions/54493814/binary-vector-of-max",
        "constants": "[]",
        "examples": {
            "inputs": "[[4, 6, 2, 6, 7, 3, -3],]",
            "outputs": "[0, 0, 0, 0, 1, 0, 0]"
        },
        "completions": [
            "def transform(in1):\n    max_val = tf.reduce_max(in1)\n    return tf.cast(tf.equal(in1, max_val), tf.int32)\n",
            "def transform(in1):\n    max_val = tf.reduce_max(in1)\n    binary_vector = tf.cast(tf.equal(in1, max_val), tf.int32)\n    return binary_vector\n ",
            "def transform(in1):\n    max_val = tf.reduce_max(in1)\n    return tf.cast(tf.equal(in1, max_val), tf.int32)\n",
            "return tf.equal(in1, tf.reduce_max(in1))\n",
            "return tf.cast(tf.equal(in1, tf.reduce_max(in1)), dtype=tf.int32)",
            "max_value = tf.reduce_max(in1)\noutput = tf.cast(tf.equal(in1, max_value), tf.int32)\nreturn output\n",
            "return tf.equal(in1, tf.reduce_max(in1))\n",
            "return tf.equal(in1, tf.reduce_max(in1))\n",
            "return tf.where(tf.equal(in1, tf.reduce_max(in1)), 1, 0)",
            "return tf.equal(in1, tf.reduce_max(in1))\n",
            "return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)\n",
            "return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)\n",
            "return tf.equal(in1, tf.reduce_max(in1))\n",
            "return tf.equal(in1, tf.reduce_max(in1))",
            "return tf.equal(in1, tf.reduce_max(in1))\n",
            "return tf.equal(in1, tf.reduce_max(in1))\n",
            "def transform(in1):\n    max_val = tf.reduce_max(in1)\n    return tf.cast(tf.equal(in1, max_val), tf.int32)\n",
            "def transform(in1):\n    max_elem = tf.reduce_max(in1)\n    binary_vector = tf.cast(tf.equal(in1, max_elem), dtype=tf.int32)\n    return binary_vector\n",
            "def transform(in1):\n    max_val = tf.reduce_max(in1)\n    return tf.cast(tf.equal(in1, max_val), tf.int32)\n",
            "def transform(in1):\n    max_val = tf.reduce_max(in1)\n    binary_vector = tf.cast(tf.equal(in1, max_val), tf.int32)\n    return binary_vector\n"
        ],
        "tf_operators": {
            "tf.cast": 11,
            "tf.equal": 20,
            "tf.reduce_max": 20,
            "tf.int32": 11,
            "tf.where": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 4,
        "total_in_target": 4,
        "parsed_constants": [
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [
                1,
                0
            ],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            []
        ],
        "all_constants": [
            0,
            1
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 40,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 2,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 11
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.0038461538461538464,
                "tf.add(x, y)": 0.0038461538461538464,
                "tf.add_n(inputs)": 0.0038461538461538464,
                "tf.argmax(input, axis)": 0.0038461538461538464,
                "tf.argmin(input, axis)": 0.0038461538461538464,
                "tf.argsort(values, axis, stable=True)": 0.0038461538461538464,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.0038461538461538464,
                "tf.boolean_mask(tensor, mask)": 0.0038461538461538464,
                "tf.broadcast_to(input, shape)": 0.0038461538461538464,
                "tf.cast(x, dtype)": 0.046153846153846156,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.0038461538461538464,
                "tf.concat(values, axis)": 0.0038461538461538464,
                "tf.constant(value)": 0.0038461538461538464,
                "tf.constant(value, dtype)": 0.0038461538461538464,
                "tf.divide(x, y)": 0.0038461538461538464,
                "tf.equal(x, y)": 0.08076923076923077,
                "tf.exp(x)": 0.0038461538461538464,
                "tf.expand_dims(input, axis)": 0.0038461538461538464,
                "tf.eye(num_rows)": 0.0038461538461538464,
                "tf.eye(num_rows, num_columns)": 0.0038461538461538464,
                "tf.eye(num_rows, dtype)": 0.0038461538461538464,
                "tf.fill(dims, value)": 0.0038461538461538464,
                "tf.gather(params, indices)": 0.0038461538461538464,
                "tf.gather(params, indices, axis, batch_dims)": 0.0038461538461538464,
                "tf.gather_nd(params, indices)": 0.0038461538461538464,
                "tf.gather_nd(params, indices, batch_dims)": 0.0038461538461538464,
                "tf.greater(x, y)": 0.0038461538461538464,
                "tf.greater_equal(x, y)": 0.0038461538461538464,
                "tf.math.bincount(arr)": 0.0038461538461538464,
                "tf.math.ceil(x)": 0.0038461538461538464,
                "tf.math.count_nonzero(input)": 0.0038461538461538464,
                "tf.math.count_nonzero(input, axis)": 0.0038461538461538464,
                "tf.math.cumsum(x, axis)": 0.0038461538461538464,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.0038461538461538464,
                "tf.math.divide_no_nan(x, y)": 0.0038461538461538464,
                "tf.math.floor(x)": 0.0038461538461538464,
                "tf.math.log(x)": 0.0038461538461538464,
                "tf.math.logical_and(x, y)": 0.0038461538461538464,
                "tf.math.logical_not(x)": 0.0038461538461538464,
                "tf.math.logical_or(x, y)": 0.0038461538461538464,
                "tf.math.logical_xor(x, y)": 0.0038461538461538464,
                "tf.math.negative(x)": 0.0038461538461538464,
                "tf.math.reciprocal(x)": 0.0038461538461538464,
                "tf.math.reciprocal_no_nan(x)": 0.0038461538461538464,
                "tf.math.segment_max(data, segment_ids)": 0.0038461538461538464,
                "tf.math.segment_mean(data, segment_ids)": 0.0038461538461538464,
                "tf.math.segment_min(data, segment_ids)": 0.0038461538461538464,
                "tf.math.segment_prod(data, segment_ids)": 0.0038461538461538464,
                "tf.math.segment_sum(data, segment_ids)": 0.0038461538461538464,
                "tf.math.squared_difference(x, y)": 0.0038461538461538464,
                "tf.math.top_k(input, k)": 0.0038461538461538464,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.0038461538461538464,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.0038461538461538464,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.0038461538461538464,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.0038461538461538464,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.0038461538461538464,
                "tf.matmul(a, b)": 0.0038461538461538464,
                "tf.maximum(x, y)": 0.0038461538461538464,
                "tf.minimum(x, y)": 0.0038461538461538464,
                "tf.multiply(x, y)": 0.0038461538461538464,
                "tf.not_equal(x, y)": 0.0038461538461538464,
                "tf.one_hot(indices, depth)": 0.0038461538461538464,
                "tf.ones(shape)": 0.0038461538461538464,
                "tf.ones_like(input)": 0.0038461538461538464,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.0038461538461538464,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.0038461538461538464,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.0038461538461538464,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.0038461538461538464,
                "tf.range(start)": 0.0038461538461538464,
                "tf.range(start, limit, delta)": 0.0038461538461538464,
                "tf.reduce_any(input_tensor, axis)": 0.0038461538461538464,
                "tf.reduce_all(input_tensor, axis)": 0.0038461538461538464,
                "tf.reduce_max(input_tensor)": 0.08076923076923077,
                "tf.reduce_max(input_tensor, axis)": 0.0038461538461538464,
                "tf.reduce_mean(input_tensor)": 0.0038461538461538464,
                "tf.reduce_mean(input_tensor, axis)": 0.0038461538461538464,
                "tf.reduce_min(input_tensor)": 0.0038461538461538464,
                "tf.reduce_min(input_tensor, axis)": 0.0038461538461538464,
                "tf.reduce_prod(input_tensor, axis)": 0.0038461538461538464,
                "tf.reduce_sum(input_tensor)": 0.0038461538461538464,
                "tf.reduce_sum(input_tensor, axis)": 0.0038461538461538464,
                "tf.repeat(input, repeats)": 0.0038461538461538464,
                "tf.repeat(input, repeats, axis)": 0.0038461538461538464,
                "tf.reshape(tensor, shape)": 0.0038461538461538464,
                "tf.reverse(tensor, axis)": 0.0038461538461538464,
                "tf.roll(input, shift, axis)": 0.0038461538461538464,
                "tf.round(x)": 0.0038461538461538464,
                "tf.scatter_nd(indices, updates, shape)": 0.0038461538461538464,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.0038461538461538464,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.0038461538461538464,
                "tf.sequence_mask(lengths)": 0.0038461538461538464,
                "tf.sequence_mask(lengths, maxlen)": 0.0038461538461538464,
                "tf.shape(input)": 0.0038461538461538464,
                "tf.sign(x)": 0.0038461538461538464,
                "tf.sort(values, axis)": 0.0038461538461538464,
                "tf.sort(values, axis, direction='DESCENDING')": 0.0038461538461538464,
                "tf.sqrt(x)": 0.0038461538461538464,
                "tf.square(x)": 0.0038461538461538464,
                "tf.squeeze(input)": 0.0038461538461538464,
                "tf.squeeze(input, axis)": 0.0038461538461538464,
                "tf.stack(values, axis)": 0.0038461538461538464,
                "tf.subtract(x, y)": 0.0038461538461538464,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.0038461538461538464,
                "tf.tensordot(a, b, axes)": 0.0038461538461538464,
                "tf.tile(input, multiples)": 0.0038461538461538464,
                "tf.transpose(a)": 0.0038461538461538464,
                "tf.transpose(a, perm)": 0.0038461538461538464,
                "tf.unique_with_counts(x)": 0.0038461538461538464,
                "tf.unstack(value, axis)": 0.0038461538461538464,
                "tf.where(condition)": 0.0038461538461538464,
                "tf.where(condition, x, y)": 0.007692307692307693,
                "tf.zeros(shape)": 0.0038461538461538464,
                "tf.zeros_like(input)": 0.0038461538461538464,
                "tf.SparseTensor(indices, values, dense_shape)": 0.0038461538461538464,
                "tf.sparse.add(a, b)": 0.0038461538461538464,
                "tf.sparse.concat(axis, sp_inputs)": 0.0038461538461538464,
                "tf.sparse.expand_dims(sp_input, axis)": 0.0038461538461538464,
                "tf.sparse.from_dense(tensor)": 0.0038461538461538464,
                "tf.sparse.maximum(sp_a, sp_b)": 0.0038461538461538464,
                "tf.sparse.minimum(sp_a, sp_b)": 0.0038461538461538464,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.0038461538461538464,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.0038461538461538464,
                "tf.sparse.reset_shape(sp_input)": 0.0038461538461538464,
                "tf.sparse.reshape(sp_input, shape)": 0.0038461538461538464,
                "tf.sparse.retain(sp_input, to_retain)": 0.0038461538461538464,
                "tf.sparse.slice(sp_input, start, size)": 0.0038461538461538464,
                "tf.sparse.split(sp_input, num_split, axis)": 0.0038461538461538464,
                "tf.sparse.to_dense(sp_input)": 0.0038461538461538464,
                "tf.sparse.to_dense(sp_input, default_value)": 0.0038461538461538464,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.0038461538461538464,
                "tf.sparse.transpose(sp_input)": 0.0038461538461538464,
                "tf.sparse.transpose(sp_input, perm)": 0.0038461538461538464,
                "IndexingAxis1Operation": 0.0038461538461538464,
                "IndexingOperation": 0.0038461538461538464,
                "PairCreationOperation": 0.0038461538461538464,
                "SingletonTupleCreationOperation": 0.0038461538461538464,
                "SlicingAxis0BothOperation": 0.0038461538461538464,
                "SlicingAxis0LeftOperation": 0.0038461538461538464,
                "SlicingAxis0RightOperation": 0.0038461538461538464,
                "SlicingAxis1BothOperation": 0.0038461538461538464,
                "SlicingAxis1LeftOperation": 0.0038461538461538464,
                "SlicingAxis1RightOperation": 0.0038461538461538464,
                "TripleCreationOperation": 0.0038461538461538464,
                "PROVIDED_CONSTANT_WEIGHT": 0.0038461538461538464,
                "COMMON_CONSTANT_WEIGHT": 0.011538461538461539,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.0038461538461538464,
                "INPUT_VARIABLE_WEIGHT": 0.1576923076923077,
                "AXIS_CONSTANT_WEIGHT": 0.0038461538461538464,
                "SHAPE_CONSTANT_WEIGHT": 0.0038461538461538464,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.0038461538461538464,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.046153846153846156,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.0038461538461538464,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.0038461538461538464,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.0038461538461538464
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 4,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 4,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 8,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 8,
                "tf.pad(tensor, paddings, mode='REFLECT')": 8,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 4,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side='left')": 8,
                "tf.searchsorted(sorted_sequence, values, side='right')": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 8,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction='DESCENDING')": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 7,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 8,
                "PairCreationOperation": 8,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 6,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 3,
                "AXIS_CONSTANT_WEIGHT": 8,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 4,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "stackoverflow_43",
        "description": "extract elements of a tensor given row indices",
        "target_program": "tf.gather_nd(tf.transpose(in1), tf.expand_dims(in2, 1), batch_dims=1)",
        "source": "https://stackoverflow.com/questions/54455169/better-way-to-access-individual-elements-in-a-tensor",
        "constants": "[]",
        "examples": {
            "inputs": "[[[12, 34, 56, 78, 90, 10], [99, 88, 77, 55, 44, 33], [-1, -2, -3, -4, -5, -6]],[0, 1, 1, 0, 2, 0],]",
            "outputs": "[12, 88, 77, 78, -5, 10]"
        },
        "completions": [
            "return tf.gather_nd(in1, tf.transpose([in2, tf.range(tf.size(in2))]))",
            "return tf.gather(params=in1, indices=in2)\n",
            "result = tf.gather(in1, in2)\nreturn result\n",
            "return tf.gather(in1, in2)\n",
            "return tf.gather(in1, in2)",
            "return tf.gather(in1, in2)\n",
            "return tf.gather(params=in1, indices=in2, axis=0)",
            "return tf.gather(in1, in2)",
            "return tf.gather(in1, in2)\n",
            "return tf.gather(params=in1, indices=in2, axis=1)\n",
            "return tf.gather(in1, in2)\n",
            "return tf.gather(in1, in2)\n",
            "return tf.gather(in1, in2)\n",
            "return tf.gather(tf.transpose(in1), in2)\n",
            "return tf.gather(params=in1, indices=in2)\n",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.expand_dims(in2, 1))\n",
            "return tf.gather(tf.transpose(in1), in2)",
            "return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=1))",
            "return tf.gather_nd(in1, tf.stack([in2, tf.range(tf.size(in2))], axis=1))\n",
            "return tf.gather(in1, in2)"
        ],
        "tf_operators": {
            "tf.transpose": 3,
            "tf.range": 3,
            "tf.gather_nd": 4,
            "tf.size": 2,
            "tf.gather": 16,
            "tf.expand_dims": 1,
            "tf.shape": 1,
            "tf.stack": 2
        },
        "coverage_percentage": 100.0,
        "total_covered": 3,
        "total_in_target": 3,
        "parsed_constants": [
            [],
            [],
            [],
            [],
            [],
            [],
            [
                0
            ],
            [],
            [],
            [
                1
            ],
            [],
            [],
            [],
            [],
            [],
            [
                1
            ],
            [],
            [
                0,
                1
            ],
            [
                1
            ],
            []
        ],
        "all_constants": [
            0,
            1
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 43,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 6,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.004291845493562232,
                "tf.add(x, y)": 0.004291845493562232,
                "tf.add_n(inputs)": 0.004291845493562232,
                "tf.argmax(input, axis)": 0.004291845493562232,
                "tf.argmin(input, axis)": 0.004291845493562232,
                "tf.argsort(values, axis, stable=True)": 0.004291845493562232,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.004291845493562232,
                "tf.boolean_mask(tensor, mask)": 0.004291845493562232,
                "tf.broadcast_to(input, shape)": 0.004291845493562232,
                "tf.cast(x, dtype)": 0.004291845493562232,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.004291845493562232,
                "tf.concat(values, axis)": 0.004291845493562232,
                "tf.constant(value)": 0.004291845493562232,
                "tf.constant(value, dtype)": 0.004291845493562232,
                "tf.divide(x, y)": 0.004291845493562232,
                "tf.equal(x, y)": 0.004291845493562232,
                "tf.exp(x)": 0.004291845493562232,
                "tf.expand_dims(input, axis)": 0.008583690987124463,
                "tf.eye(num_rows)": 0.004291845493562232,
                "tf.eye(num_rows, num_columns)": 0.004291845493562232,
                "tf.eye(num_rows, dtype)": 0.004291845493562232,
                "tf.fill(dims, value)": 0.004291845493562232,
                "tf.gather(params, indices)": 0.055793991416309016,
                "tf.gather(params, indices, axis, batch_dims)": 0.012875536480686695,
                "tf.gather_nd(params, indices)": 0.02145922746781116,
                "tf.gather_nd(params, indices, batch_dims)": 0.004291845493562232,
                "tf.greater(x, y)": 0.004291845493562232,
                "tf.greater_equal(x, y)": 0.004291845493562232,
                "tf.math.bincount(arr)": 0.004291845493562232,
                "tf.math.ceil(x)": 0.004291845493562232,
                "tf.math.count_nonzero(input)": 0.004291845493562232,
                "tf.math.count_nonzero(input, axis)": 0.004291845493562232,
                "tf.math.cumsum(x, axis)": 0.004291845493562232,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.004291845493562232,
                "tf.math.divide_no_nan(x, y)": 0.004291845493562232,
                "tf.math.floor(x)": 0.004291845493562232,
                "tf.math.log(x)": 0.004291845493562232,
                "tf.math.logical_and(x, y)": 0.004291845493562232,
                "tf.math.logical_not(x)": 0.004291845493562232,
                "tf.math.logical_or(x, y)": 0.004291845493562232,
                "tf.math.logical_xor(x, y)": 0.004291845493562232,
                "tf.math.negative(x)": 0.004291845493562232,
                "tf.math.reciprocal(x)": 0.004291845493562232,
                "tf.math.reciprocal_no_nan(x)": 0.004291845493562232,
                "tf.math.segment_max(data, segment_ids)": 0.004291845493562232,
                "tf.math.segment_mean(data, segment_ids)": 0.004291845493562232,
                "tf.math.segment_min(data, segment_ids)": 0.004291845493562232,
                "tf.math.segment_prod(data, segment_ids)": 0.004291845493562232,
                "tf.math.segment_sum(data, segment_ids)": 0.004291845493562232,
                "tf.math.squared_difference(x, y)": 0.004291845493562232,
                "tf.math.top_k(input, k)": 0.004291845493562232,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.004291845493562232,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.004291845493562232,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.004291845493562232,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.004291845493562232,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.004291845493562232,
                "tf.matmul(a, b)": 0.004291845493562232,
                "tf.maximum(x, y)": 0.004291845493562232,
                "tf.minimum(x, y)": 0.004291845493562232,
                "tf.multiply(x, y)": 0.004291845493562232,
                "tf.not_equal(x, y)": 0.004291845493562232,
                "tf.one_hot(indices, depth)": 0.004291845493562232,
                "tf.ones(shape)": 0.004291845493562232,
                "tf.ones_like(input)": 0.004291845493562232,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.004291845493562232,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.004291845493562232,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.004291845493562232,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.004291845493562232,
                "tf.range(start)": 0.017167381974248927,
                "tf.range(start, limit, delta)": 0.004291845493562232,
                "tf.reduce_any(input_tensor, axis)": 0.004291845493562232,
                "tf.reduce_all(input_tensor, axis)": 0.004291845493562232,
                "tf.reduce_max(input_tensor)": 0.004291845493562232,
                "tf.reduce_max(input_tensor, axis)": 0.004291845493562232,
                "tf.reduce_mean(input_tensor)": 0.004291845493562232,
                "tf.reduce_mean(input_tensor, axis)": 0.004291845493562232,
                "tf.reduce_min(input_tensor)": 0.004291845493562232,
                "tf.reduce_min(input_tensor, axis)": 0.004291845493562232,
                "tf.reduce_prod(input_tensor, axis)": 0.004291845493562232,
                "tf.reduce_sum(input_tensor)": 0.004291845493562232,
                "tf.reduce_sum(input_tensor, axis)": 0.004291845493562232,
                "tf.repeat(input, repeats)": 0.004291845493562232,
                "tf.repeat(input, repeats, axis)": 0.004291845493562232,
                "tf.reshape(tensor, shape)": 0.004291845493562232,
                "tf.reverse(tensor, axis)": 0.004291845493562232,
                "tf.roll(input, shift, axis)": 0.004291845493562232,
                "tf.round(x)": 0.004291845493562232,
                "tf.scatter_nd(indices, updates, shape)": 0.004291845493562232,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.004291845493562232,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.004291845493562232,
                "tf.sequence_mask(lengths)": 0.004291845493562232,
                "tf.sequence_mask(lengths, maxlen)": 0.004291845493562232,
                "tf.shape(input)": 0.008583690987124463,
                "tf.sign(x)": 0.004291845493562232,
                "tf.sort(values, axis)": 0.004291845493562232,
                "tf.sort(values, axis, direction='DESCENDING')": 0.004291845493562232,
                "tf.sqrt(x)": 0.004291845493562232,
                "tf.square(x)": 0.004291845493562232,
                "tf.squeeze(input)": 0.004291845493562232,
                "tf.squeeze(input, axis)": 0.004291845493562232,
                "tf.stack(values, axis)": 0.012875536480686695,
                "tf.subtract(x, y)": 0.004291845493562232,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.004291845493562232,
                "tf.tensordot(a, b, axes)": 0.004291845493562232,
                "tf.tile(input, multiples)": 0.004291845493562232,
                "tf.transpose(a)": 0.017167381974248927,
                "tf.transpose(a, perm)": 0.004291845493562232,
                "tf.unique_with_counts(x)": 0.004291845493562232,
                "tf.unstack(value, axis)": 0.004291845493562232,
                "tf.where(condition)": 0.004291845493562232,
                "tf.where(condition, x, y)": 0.004291845493562232,
                "tf.zeros(shape)": 0.004291845493562232,
                "tf.zeros_like(input)": 0.004291845493562232,
                "tf.SparseTensor(indices, values, dense_shape)": 0.004291845493562232,
                "tf.sparse.add(a, b)": 0.004291845493562232,
                "tf.sparse.concat(axis, sp_inputs)": 0.004291845493562232,
                "tf.sparse.expand_dims(sp_input, axis)": 0.004291845493562232,
                "tf.sparse.from_dense(tensor)": 0.004291845493562232,
                "tf.sparse.maximum(sp_a, sp_b)": 0.004291845493562232,
                "tf.sparse.minimum(sp_a, sp_b)": 0.004291845493562232,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.004291845493562232,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.004291845493562232,
                "tf.sparse.reset_shape(sp_input)": 0.004291845493562232,
                "tf.sparse.reshape(sp_input, shape)": 0.004291845493562232,
                "tf.sparse.retain(sp_input, to_retain)": 0.004291845493562232,
                "tf.sparse.slice(sp_input, start, size)": 0.004291845493562232,
                "tf.sparse.split(sp_input, num_split, axis)": 0.004291845493562232,
                "tf.sparse.to_dense(sp_input)": 0.004291845493562232,
                "tf.sparse.to_dense(sp_input, default_value)": 0.004291845493562232,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.004291845493562232,
                "tf.sparse.transpose(sp_input)": 0.004291845493562232,
                "tf.sparse.transpose(sp_input, perm)": 0.004291845493562232,
                "IndexingAxis1Operation": 0.004291845493562232,
                "IndexingOperation": 0.008583690987124463,
                "PairCreationOperation": 0.004291845493562232,
                "SingletonTupleCreationOperation": 0.004291845493562232,
                "SlicingAxis0BothOperation": 0.004291845493562232,
                "SlicingAxis0LeftOperation": 0.004291845493562232,
                "SlicingAxis0RightOperation": 0.004291845493562232,
                "SlicingAxis1BothOperation": 0.004291845493562232,
                "SlicingAxis1LeftOperation": 0.004291845493562232,
                "SlicingAxis1RightOperation": 0.004291845493562232,
                "TripleCreationOperation": 0.004291845493562232,
                "PROVIDED_CONSTANT_WEIGHT": 0.004291845493562232,
                "COMMON_CONSTANT_WEIGHT": 0.030042918454935622,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.004291845493562232,
                "INPUT_VARIABLE_WEIGHT": 0.1888412017167382,
                "AXIS_CONSTANT_WEIGHT": 0.004291845493562232,
                "SHAPE_CONSTANT_WEIGHT": 0.004291845493562232,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.004291845493562232,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.004291845493562232,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.004291845493562232,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.004291845493562232,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.004291845493562232
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 8,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 7,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 4,
                "tf.gather(params, indices, axis, batch_dims)": 6,
                "tf.gather_nd(params, indices)": 6,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 8,
                "tf.pad(tensor, paddings, mode='REFLECT')": 8,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 8,
                "tf.range(start)": 6,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side='left')": 8,
                "tf.searchsorted(sorted_sequence, values, side='right')": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 7,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction='DESCENDING')": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 6,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 6,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 7,
                "PairCreationOperation": 8,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 5,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 2,
                "AXIS_CONSTANT_WEIGHT": 8,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "stackoverflow_44",
        "description": "sum across columns for pairs of consecutive rows",
        "target_program": "tf.squeeze(tf.reduce_sum(tf.reshape(in1, (-1, 2, in1.shape[1])), axis=1))",
        "source": "https://stackoverflow.com/questions/54402389/sum-the-columns-for-each-two-consecutive-rows-of-a-tensor-of-3-dimensions",
        "constants": "[2]",
        "examples": {
            "inputs": "[[[3, 5, 2], [6, 2, 3], [8, 7, 1], [0, -3, 5], [-4, 7, 3], [2, 1, 6], [10, 20, 30], [4, 5, 6]],]",
            "outputs": "[[9, 7, 5],    [8, 4, 6],    [-2, 8, 9],    [14, 25, 36]]"
        },
        "completions": [
            "return tf.reduce_sum(tf.concat([in1[i:i+2] for i in range(0, len(in1), 2)], axis=1), axis=1)\n",
            "return tf.reduce_sum(tf.stack([in1[::2], in1[1::2]], axis=0), axis=0)\n  ",
            "return tf.reduce_sum(tf.reshape(in1, (-1, 2, in1.shape[1])), axis=1)\n",
            "row_sums = tf.reduce_sum(tf.reshape(in1, [-1, 2, in1.shape[1]]), axis=1)\nreturn row_sums\n",
            "out = tf.math.segment_sum(in1, tf.repeat(tf.constant([0, 1], dtype=tf.int32), tf.shape(in1)[0]//2))\nreturn out\n",
            "return tf.reduce_sum(tf.stack([in1[i:i+2] for i in range(0, tf.shape(in1)[0], 2)], axis=1), axis=1)\n",
            "cumsum = tf.math.cumsum(in1, exclusive=False, axis=0)\nresult = tf.subtract(cumsum[1::2], cumsum[::2])\nreturn result\n",
            "return tf.reshape(tf.reduce_sum(tf.stack(tf.unstack(in1[::2], axis=0) + tf.unstack(in1[1::2], axis=0), axis=1), axis=1), (-1, in1.shape[1]))",
            "return tf.segment_sum(in1, tf.range(tf.shape(in1)[0]) // 2)",
            "return tf.reduce_sum(tf.stack([in1[i:i+2] for i in range(0, tf.shape(in1)[0]-1, 2)], axis=1), axis=1)\n",
            "return tf.math.unsorted_segment_sum(in1, tf.fill((in1.shape[0]//2,), tf.constant(0, dtype=tf.int32)), in1.shape[0]//2)\n",
            "return tf.reduce_sum(tf.stack([in1[i:i+2] for i in range(0, in1.shape[0]-1, 2)], axis=1), axis=1)\n",
            "return tf.math.segment_sum(in1, tf.range(in1.shape[0]) // 2)\n",
            "result = tf.reduce_sum(tf.stack([in1[::2], in1[1::2]], axis=2), axis=0)\n",
            "return tf.reduce_sum(tf.reshape(in1, (-1, 2, in1.shape[1])), axis=1)\n",
            "return tf.math.segment_sum(in1, tf.repeat(tf.constant([0, 1]), in1.shape[0]//2))\n",
            "return tf.reduce_sum(tf.reshape(in1, (-1, 2, tf.shape(in1)[1])), axis=1)\n",
            "return tf.reduce_sum(tf.stack([in1[:-1], in1[1:]], axis=1), axis=1)\n",
            "return tf.math.cumsum(in1, axis=1) - tf.concat([tf.zeros((tf.shape(in1)[0], 1), dtype=tf.int32), tf.math.cumsum(in1, axis=1)[:, :-1]], axis=1)\n",
            "return tf.reduce_sum(tf.reshape(in1, (-1, 2, 3)), axis=1)\n"
        ],
        "tf_operators": {
            "tf.concat": 2,
            "tf.reduce_sum": 13,
            "tf.stack": 7,
            "tf.reshape": 6,
            "tf.repeat": 2,
            "tf.math.segment_sum": 3,
            "tf.shape": 6,
            "tf.int32": 3,
            "tf.constant": 3,
            "tf.math.cumsum": 2,
            "tf.subtract": 1,
            "tf.unstack": 1,
            "tf.segment_sum": 1,
            "tf.range": 2,
            "tf.fill": 1,
            "tf.math.unsorted_segment_sum": 1,
            "tf.zeros": 1
        },
        "coverage_percentage": 66.66666666666666,
        "total_covered": 2,
        "total_in_target": 3,
        "parsed_constants": [
            [
                2,
                0,
                2,
                1,
                1
            ],
            [
                2,
                1,
                2,
                0,
                0
            ],
            [
                -1,
                2,
                1,
                1
            ],
            [
                -1,
                2,
                1,
                1
            ],
            [
                0,
                1,
                0,
                2
            ],
            [
                2,
                0,
                0,
                2,
                1,
                1
            ],
            [
                0,
                1,
                2,
                2
            ],
            [
                2,
                0,
                1,
                2,
                0,
                1,
                1,
                -1,
                1
            ],
            [
                0,
                2
            ],
            [
                2,
                0,
                0,
                1,
                2,
                1,
                1
            ],
            [
                0,
                2,
                0,
                0,
                2
            ],
            [
                2,
                0,
                0,
                1,
                2,
                1,
                1
            ],
            [
                0,
                2
            ],
            [
                2,
                1,
                2,
                2,
                0
            ],
            [
                -1,
                2,
                1,
                1
            ],
            [
                0,
                1,
                0,
                2
            ],
            [
                -1,
                2,
                1,
                1
            ],
            [
                -1,
                1,
                1,
                1
            ],
            [
                1,
                0,
                1,
                1,
                -1,
                1
            ],
            [
                -1,
                2,
                3,
                1
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            3,
            -1
        ],
        "constant_counts": [
            {
                "common": 3,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 7,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 3,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 32,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 66,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 24,
            "tf_int64": 0,
            "tf_int32": 3
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.002849002849002849,
                "tf.add(x, y)": 0.002849002849002849,
                "tf.add_n(inputs)": 0.002849002849002849,
                "tf.argmax(input, axis)": 0.002849002849002849,
                "tf.argmin(input, axis)": 0.002849002849002849,
                "tf.argsort(values, axis, stable=True)": 0.002849002849002849,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.002849002849002849,
                "tf.boolean_mask(tensor, mask)": 0.002849002849002849,
                "tf.broadcast_to(input, shape)": 0.002849002849002849,
                "tf.cast(x, dtype)": 0.002849002849002849,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.002849002849002849,
                "tf.concat(values, axis)": 0.008547008547008548,
                "tf.constant(value)": 0.005698005698005698,
                "tf.constant(value, dtype)": 0.002849002849002849,
                "tf.divide(x, y)": 0.002849002849002849,
                "tf.equal(x, y)": 0.002849002849002849,
                "tf.exp(x)": 0.002849002849002849,
                "tf.expand_dims(input, axis)": 0.002849002849002849,
                "tf.eye(num_rows)": 0.002849002849002849,
                "tf.eye(num_rows, num_columns)": 0.002849002849002849,
                "tf.eye(num_rows, dtype)": 0.002849002849002849,
                "tf.fill(dims, value)": 0.005698005698005698,
                "tf.gather(params, indices)": 0.002849002849002849,
                "tf.gather(params, indices, axis, batch_dims)": 0.002849002849002849,
                "tf.gather_nd(params, indices)": 0.002849002849002849,
                "tf.gather_nd(params, indices, batch_dims)": 0.002849002849002849,
                "tf.greater(x, y)": 0.002849002849002849,
                "tf.greater_equal(x, y)": 0.002849002849002849,
                "tf.math.bincount(arr)": 0.002849002849002849,
                "tf.math.ceil(x)": 0.002849002849002849,
                "tf.math.count_nonzero(input)": 0.002849002849002849,
                "tf.math.count_nonzero(input, axis)": 0.002849002849002849,
                "tf.math.cumsum(x, axis)": 0.002849002849002849,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.008547008547008548,
                "tf.math.divide_no_nan(x, y)": 0.002849002849002849,
                "tf.math.floor(x)": 0.002849002849002849,
                "tf.math.log(x)": 0.002849002849002849,
                "tf.math.logical_and(x, y)": 0.002849002849002849,
                "tf.math.logical_not(x)": 0.002849002849002849,
                "tf.math.logical_or(x, y)": 0.002849002849002849,
                "tf.math.logical_xor(x, y)": 0.002849002849002849,
                "tf.math.negative(x)": 0.002849002849002849,
                "tf.math.reciprocal(x)": 0.002849002849002849,
                "tf.math.reciprocal_no_nan(x)": 0.002849002849002849,
                "tf.math.segment_max(data, segment_ids)": 0.002849002849002849,
                "tf.math.segment_mean(data, segment_ids)": 0.002849002849002849,
                "tf.math.segment_min(data, segment_ids)": 0.002849002849002849,
                "tf.math.segment_prod(data, segment_ids)": 0.002849002849002849,
                "tf.math.segment_sum(data, segment_ids)": 0.011396011396011397,
                "tf.math.squared_difference(x, y)": 0.002849002849002849,
                "tf.math.top_k(input, k)": 0.002849002849002849,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.002849002849002849,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.002849002849002849,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.002849002849002849,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.002849002849002849,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.005698005698005698,
                "tf.matmul(a, b)": 0.002849002849002849,
                "tf.maximum(x, y)": 0.002849002849002849,
                "tf.minimum(x, y)": 0.002849002849002849,
                "tf.multiply(x, y)": 0.002849002849002849,
                "tf.not_equal(x, y)": 0.002849002849002849,
                "tf.one_hot(indices, depth)": 0.002849002849002849,
                "tf.ones(shape)": 0.002849002849002849,
                "tf.ones_like(input)": 0.002849002849002849,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.002849002849002849,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.002849002849002849,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.002849002849002849,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.002849002849002849,
                "tf.range(start)": 0.008547008547008548,
                "tf.range(start, limit, delta)": 0.002849002849002849,
                "tf.reduce_any(input_tensor, axis)": 0.002849002849002849,
                "tf.reduce_all(input_tensor, axis)": 0.002849002849002849,
                "tf.reduce_max(input_tensor)": 0.002849002849002849,
                "tf.reduce_max(input_tensor, axis)": 0.002849002849002849,
                "tf.reduce_mean(input_tensor)": 0.002849002849002849,
                "tf.reduce_mean(input_tensor, axis)": 0.002849002849002849,
                "tf.reduce_min(input_tensor)": 0.002849002849002849,
                "tf.reduce_min(input_tensor, axis)": 0.002849002849002849,
                "tf.reduce_prod(input_tensor, axis)": 0.002849002849002849,
                "tf.reduce_sum(input_tensor)": 0.002849002849002849,
                "tf.reduce_sum(input_tensor, axis)": 0.002849002849002849,
                "tf.repeat(input, repeats)": 0.008547008547008548,
                "tf.repeat(input, repeats, axis)": 0.002849002849002849,
                "tf.reshape(tensor, shape)": 0.019943019943019943,
                "tf.reverse(tensor, axis)": 0.002849002849002849,
                "tf.roll(input, shift, axis)": 0.002849002849002849,
                "tf.round(x)": 0.002849002849002849,
                "tf.scatter_nd(indices, updates, shape)": 0.002849002849002849,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.002849002849002849,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.002849002849002849,
                "tf.sequence_mask(lengths)": 0.002849002849002849,
                "tf.sequence_mask(lengths, maxlen)": 0.002849002849002849,
                "tf.shape(input)": 0.019943019943019943,
                "tf.sign(x)": 0.002849002849002849,
                "tf.sort(values, axis)": 0.002849002849002849,
                "tf.sort(values, axis, direction='DESCENDING')": 0.002849002849002849,
                "tf.sqrt(x)": 0.002849002849002849,
                "tf.square(x)": 0.002849002849002849,
                "tf.squeeze(input)": 0.002849002849002849,
                "tf.squeeze(input, axis)": 0.002849002849002849,
                "tf.stack(values, axis)": 0.022792022792022793,
                "tf.subtract(x, y)": 0.005698005698005698,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.002849002849002849,
                "tf.tensordot(a, b, axes)": 0.002849002849002849,
                "tf.tile(input, multiples)": 0.002849002849002849,
                "tf.transpose(a)": 0.002849002849002849,
                "tf.transpose(a, perm)": 0.002849002849002849,
                "tf.unique_with_counts(x)": 0.002849002849002849,
                "tf.unstack(value, axis)": 0.008547008547008548,
                "tf.where(condition)": 0.002849002849002849,
                "tf.where(condition, x, y)": 0.002849002849002849,
                "tf.zeros(shape)": 0.005698005698005698,
                "tf.zeros_like(input)": 0.002849002849002849,
                "tf.SparseTensor(indices, values, dense_shape)": 0.002849002849002849,
                "tf.sparse.add(a, b)": 0.002849002849002849,
                "tf.sparse.concat(axis, sp_inputs)": 0.002849002849002849,
                "tf.sparse.expand_dims(sp_input, axis)": 0.002849002849002849,
                "tf.sparse.from_dense(tensor)": 0.002849002849002849,
                "tf.sparse.maximum(sp_a, sp_b)": 0.002849002849002849,
                "tf.sparse.minimum(sp_a, sp_b)": 0.002849002849002849,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.002849002849002849,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.002849002849002849,
                "tf.sparse.reset_shape(sp_input)": 0.002849002849002849,
                "tf.sparse.reshape(sp_input, shape)": 0.002849002849002849,
                "tf.sparse.retain(sp_input, to_retain)": 0.002849002849002849,
                "tf.sparse.slice(sp_input, start, size)": 0.002849002849002849,
                "tf.sparse.split(sp_input, num_split, axis)": 0.002849002849002849,
                "tf.sparse.to_dense(sp_input)": 0.002849002849002849,
                "tf.sparse.to_dense(sp_input, default_value)": 0.002849002849002849,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.002849002849002849,
                "tf.sparse.transpose(sp_input)": 0.002849002849002849,
                "tf.sparse.transpose(sp_input, perm)": 0.002849002849002849,
                "IndexingAxis1Operation": 0.002849002849002849,
                "IndexingOperation": 0.045584045584045586,
                "PairCreationOperation": 0.011396011396011397,
                "SingletonTupleCreationOperation": 0.005698005698005698,
                "SlicingAxis0BothOperation": 0.014245014245014245,
                "SlicingAxis0LeftOperation": 0.017094017094017096,
                "SlicingAxis0RightOperation": 0.005698005698005698,
                "SlicingAxis1BothOperation": 0.002849002849002849,
                "SlicingAxis1LeftOperation": 0.002849002849002849,
                "SlicingAxis1RightOperation": 0.005698005698005698,
                "TripleCreationOperation": 0.014245014245014245,
                "PROVIDED_CONSTANT_WEIGHT": 0.002849002849002849,
                "COMMON_CONSTANT_WEIGHT": 0.1908831908831909,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.002849002849002849,
                "INPUT_VARIABLE_WEIGHT": 0.09401709401709402,
                "AXIS_CONSTANT_WEIGHT": 0.07122507122507123,
                "SHAPE_CONSTANT_WEIGHT": 0.002849002849002849,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.002849002849002849,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.011396011396011397,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.002849002849002849,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.002849002849002849,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.002849002849002849
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 8,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 7,
                "tf.constant(value)": 7,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 8,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 7,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 7,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 6,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 7,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 8,
                "tf.pad(tensor, paddings, mode='REFLECT')": 8,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 8,
                "tf.range(start)": 7,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 7,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 6,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side='left')": 8,
                "tf.searchsorted(sorted_sequence, values, side='right')": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 6,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction='DESCENDING')": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 5,
                "tf.subtract(x, y)": 7,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 7,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 7,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 4,
                "PairCreationOperation": 6,
                "SingletonTupleCreationOperation": 7,
                "SlicingAxis0BothOperation": 6,
                "SlicingAxis0LeftOperation": 6,
                "SlicingAxis0RightOperation": 7,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 7,
                "TripleCreationOperation": 6,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 2,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 3,
                "AXIS_CONSTANT_WEIGHT": 4,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 6,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "stackoverflow_45",
        "description": "reverse the order in the marked rows",
        "target_program": "tf.where(tf.sequence_mask(in2), x=tf.roll(in1, 1, -1), y=in1)",
        "source": "https://stackoverflow.com/questions/54337925/reverse-order-of-some-elements-in-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[[[12, 34], [56, 78], [23, 54], [76, 78], [42, 24]]],[1, 0, 1, 0, 1],]",
            "outputs": "[[[34, 12], [56, 78], [54, 23], [76, 78], [24, 42]]]"
        },
        "completions": [
            "reversed_indices = tf.boolean_mask(tf.range(tf.shape(in1)[1]-1, -1, -1), in2==1)  #[3 0 3 0 3]\nreversed_in1 = tf.gather(in1, reversed_indices, axis=1)\nreturn reversed_in1\n",
            "return tf.map_fn(lambda x: tf.reverse(x), tf.boolean_mask(in1, tf.cast(in2, tf.bool)), fn_output_signature=tf.int32)",
            "return tf.where(tf.equal(tf.expand_dims(in2, 1), 1), tf.reverse(in1, [-1]), in1)",
            "return tf.reverse(tf.where(tf.cast(in2, tf.bool), in1, in1), [-1])",
            "return tf.reverse(tf.boolean_mask(in1[0], tf.cast(in2, tf.bool), axis=0), axis=[1])",
            "return tf.where(tf.equal(in2, 0), in1, tf.reverse(in1, [-1]))",
            "return tf.reverse(tf.boolean_mask(in1, tf.cast(in2, tf.bool), axis=0), axis=[1])",
            "return tf.map_fn(lambda x: tf.reverse(x[0], axis=[0]) if x[1] == 1 else x[0], (in1, in2), dtype=tf.int32)",
            "return tf.boolean_mask(in1, tf.math.logical_not(tf.cast(in2, tf.bool)), axis=1)",
            "return tf.where(tf.tile(tf.expand_dims(tf.cast(in2, tf.bool), -1), [1, tf.shape(in1)[1]]) , tf.reverse(in1, [2]), in1)",
            "return tf.stack([tf.reverse(in1[in2[i]], axis=[0]) if in2[i] else in1[i] for i in range(len(in1))], axis=0)",
            "return tf.cast(tf.reverse(tensor=in1, axis=[1]) * tf.expand_dims(tf.cast(in2, tf.float32), axis=-1), tf.int32)",
            "return tf.boolean_mask(in1, tf.equal(in2, 1), axis=2)",
            "return tf.boolean_mask(in1, tf.equal(in2, 1), axis=1)",
            "return tf.reverse(tf.boolean_mask(in1, tf.cast(in2, tf.bool), axis=1), axis=[1])",
            "return tf.boolean_mask(in1, in2)",
            "return tf.reverse(tf.boolean_mask(in1, tf.cast(in2, tf.bool), axis=1), axis=[-1])",
            "return tf.reverse(tf.boolean_mask(in1, tf.cast(in2, tf.bool), axis=1), axis=[-2])",
            "return tf.boolean_mask(in1, tf.not_equal(in2, 0))\n",
            "return tf.where(in2, tf.reverse(in1, [-1]), in1)"
        ],
        "tf_operators": {
            "tf.boolean_mask": 12,
            "tf.gather": 1,
            "tf.shape": 2,
            "tf.range": 1,
            "tf.bool": 9,
            "tf.cast": 10,
            "tf.map_fn": 2,
            "tf.int32": 3,
            "tf.reverse": 14,
            "tf.where": 5,
            "tf.equal": 4,
            "tf.expand_dims": 3,
            "tf.math.logical_not": 1,
            "tf.tile": 1,
            "tf.stack": 1,
            "tf.float32": 1,
            "tf.not_equal": 1
        },
        "coverage_percentage": 33.33333333333333,
        "total_covered": 1,
        "total_in_target": 3,
        "parsed_constants": [
            [
                1,
                1,
                -1,
                -1,
                1,
                1
            ],
            [],
            [
                1,
                1,
                -1
            ],
            [
                -1
            ],
            [
                0,
                0,
                1
            ],
            [
                0,
                -1
            ],
            [
                0,
                1
            ],
            [
                1,
                1,
                0,
                0,
                0
            ],
            [
                1
            ],
            [
                -1,
                1,
                1,
                2
            ],
            [
                0,
                0
            ],
            [
                1,
                -1
            ],
            [
                1,
                2
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [],
            [
                1,
                -1
            ],
            [
                1,
                -2
            ],
            [
                0
            ],
            [
                -1
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            -2,
            -1
        ],
        "constant_counts": [
            {
                "common": 6,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 0,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 5,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 48,
            "shape": 0,
            "tf_bool": 9,
            "provided": 1,
            "common": 40,
            "shape_tuple": 0,
            "tf_float32": 1,
            "axis": 2,
            "tf_int64": 0,
            "tf_int32": 3
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.0030581039755351682,
                "tf.add(x, y)": 0.0030581039755351682,
                "tf.add_n(inputs)": 0.0030581039755351682,
                "tf.argmax(input, axis)": 0.0030581039755351682,
                "tf.argmin(input, axis)": 0.0030581039755351682,
                "tf.argsort(values, axis, stable=True)": 0.0030581039755351682,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.0030581039755351682,
                "tf.boolean_mask(tensor, mask)": 0.039755351681957186,
                "tf.broadcast_to(input, shape)": 0.0030581039755351682,
                "tf.cast(x, dtype)": 0.03669724770642202,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.0030581039755351682,
                "tf.concat(values, axis)": 0.0030581039755351682,
                "tf.constant(value)": 0.0030581039755351682,
                "tf.constant(value, dtype)": 0.0030581039755351682,
                "tf.divide(x, y)": 0.0030581039755351682,
                "tf.equal(x, y)": 0.01529051987767584,
                "tf.exp(x)": 0.0030581039755351682,
                "tf.expand_dims(input, axis)": 0.012232415902140673,
                "tf.eye(num_rows)": 0.0030581039755351682,
                "tf.eye(num_rows, num_columns)": 0.0030581039755351682,
                "tf.eye(num_rows, dtype)": 0.0030581039755351682,
                "tf.fill(dims, value)": 0.0030581039755351682,
                "tf.gather(params, indices)": 0.0030581039755351682,
                "tf.gather(params, indices, axis, batch_dims)": 0.0061162079510703364,
                "tf.gather_nd(params, indices)": 0.0030581039755351682,
                "tf.gather_nd(params, indices, batch_dims)": 0.0030581039755351682,
                "tf.greater(x, y)": 0.0030581039755351682,
                "tf.greater_equal(x, y)": 0.0030581039755351682,
                "tf.math.bincount(arr)": 0.0030581039755351682,
                "tf.math.ceil(x)": 0.0030581039755351682,
                "tf.math.count_nonzero(input)": 0.0030581039755351682,
                "tf.math.count_nonzero(input, axis)": 0.0030581039755351682,
                "tf.math.cumsum(x, axis)": 0.0030581039755351682,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.0030581039755351682,
                "tf.math.divide_no_nan(x, y)": 0.0030581039755351682,
                "tf.math.floor(x)": 0.0030581039755351682,
                "tf.math.log(x)": 0.0030581039755351682,
                "tf.math.logical_and(x, y)": 0.0030581039755351682,
                "tf.math.logical_not(x)": 0.0061162079510703364,
                "tf.math.logical_or(x, y)": 0.0030581039755351682,
                "tf.math.logical_xor(x, y)": 0.0030581039755351682,
                "tf.math.negative(x)": 0.0030581039755351682,
                "tf.math.reciprocal(x)": 0.0030581039755351682,
                "tf.math.reciprocal_no_nan(x)": 0.0030581039755351682,
                "tf.math.segment_max(data, segment_ids)": 0.0030581039755351682,
                "tf.math.segment_mean(data, segment_ids)": 0.0030581039755351682,
                "tf.math.segment_min(data, segment_ids)": 0.0030581039755351682,
                "tf.math.segment_prod(data, segment_ids)": 0.0030581039755351682,
                "tf.math.segment_sum(data, segment_ids)": 0.0030581039755351682,
                "tf.math.squared_difference(x, y)": 0.0030581039755351682,
                "tf.math.top_k(input, k)": 0.0030581039755351682,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.0030581039755351682,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.0030581039755351682,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.0030581039755351682,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.0030581039755351682,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.0030581039755351682,
                "tf.matmul(a, b)": 0.0030581039755351682,
                "tf.maximum(x, y)": 0.0030581039755351682,
                "tf.minimum(x, y)": 0.0030581039755351682,
                "tf.multiply(x, y)": 0.0030581039755351682,
                "tf.not_equal(x, y)": 0.0061162079510703364,
                "tf.one_hot(indices, depth)": 0.0030581039755351682,
                "tf.ones(shape)": 0.0030581039755351682,
                "tf.ones_like(input)": 0.0030581039755351682,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.0030581039755351682,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.0030581039755351682,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.0030581039755351682,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.0030581039755351682,
                "tf.range(start)": 0.0030581039755351682,
                "tf.range(start, limit, delta)": 0.0061162079510703364,
                "tf.reduce_any(input_tensor, axis)": 0.0030581039755351682,
                "tf.reduce_all(input_tensor, axis)": 0.0030581039755351682,
                "tf.reduce_max(input_tensor)": 0.0030581039755351682,
                "tf.reduce_max(input_tensor, axis)": 0.0030581039755351682,
                "tf.reduce_mean(input_tensor)": 0.0030581039755351682,
                "tf.reduce_mean(input_tensor, axis)": 0.0030581039755351682,
                "tf.reduce_min(input_tensor)": 0.0030581039755351682,
                "tf.reduce_min(input_tensor, axis)": 0.0030581039755351682,
                "tf.reduce_prod(input_tensor, axis)": 0.0030581039755351682,
                "tf.reduce_sum(input_tensor)": 0.0030581039755351682,
                "tf.reduce_sum(input_tensor, axis)": 0.0030581039755351682,
                "tf.repeat(input, repeats)": 0.0030581039755351682,
                "tf.repeat(input, repeats, axis)": 0.0030581039755351682,
                "tf.reshape(tensor, shape)": 0.0030581039755351682,
                "tf.reverse(tensor, axis)": 0.045871559633027525,
                "tf.roll(input, shift, axis)": 0.0030581039755351682,
                "tf.round(x)": 0.0030581039755351682,
                "tf.scatter_nd(indices, updates, shape)": 0.0030581039755351682,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.0030581039755351682,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.0030581039755351682,
                "tf.sequence_mask(lengths)": 0.0030581039755351682,
                "tf.sequence_mask(lengths, maxlen)": 0.0030581039755351682,
                "tf.shape(input)": 0.009174311926605505,
                "tf.sign(x)": 0.0030581039755351682,
                "tf.sort(values, axis)": 0.0030581039755351682,
                "tf.sort(values, axis, direction='DESCENDING')": 0.0030581039755351682,
                "tf.sqrt(x)": 0.0030581039755351682,
                "tf.square(x)": 0.0030581039755351682,
                "tf.squeeze(input)": 0.0030581039755351682,
                "tf.squeeze(input, axis)": 0.0030581039755351682,
                "tf.stack(values, axis)": 0.0061162079510703364,
                "tf.subtract(x, y)": 0.0030581039755351682,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.0030581039755351682,
                "tf.tensordot(a, b, axes)": 0.0030581039755351682,
                "tf.tile(input, multiples)": 0.0061162079510703364,
                "tf.transpose(a)": 0.0030581039755351682,
                "tf.transpose(a, perm)": 0.0030581039755351682,
                "tf.unique_with_counts(x)": 0.0030581039755351682,
                "tf.unstack(value, axis)": 0.0030581039755351682,
                "tf.where(condition)": 0.0030581039755351682,
                "tf.where(condition, x, y)": 0.01834862385321101,
                "tf.zeros(shape)": 0.0030581039755351682,
                "tf.zeros_like(input)": 0.0030581039755351682,
                "tf.SparseTensor(indices, values, dense_shape)": 0.0030581039755351682,
                "tf.sparse.add(a, b)": 0.0030581039755351682,
                "tf.sparse.concat(axis, sp_inputs)": 0.0030581039755351682,
                "tf.sparse.expand_dims(sp_input, axis)": 0.0030581039755351682,
                "tf.sparse.from_dense(tensor)": 0.0030581039755351682,
                "tf.sparse.maximum(sp_a, sp_b)": 0.0030581039755351682,
                "tf.sparse.minimum(sp_a, sp_b)": 0.0030581039755351682,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.0030581039755351682,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.0030581039755351682,
                "tf.sparse.reset_shape(sp_input)": 0.0030581039755351682,
                "tf.sparse.reshape(sp_input, shape)": 0.0030581039755351682,
                "tf.sparse.retain(sp_input, to_retain)": 0.0030581039755351682,
                "tf.sparse.slice(sp_input, start, size)": 0.0030581039755351682,
                "tf.sparse.split(sp_input, num_split, axis)": 0.0030581039755351682,
                "tf.sparse.to_dense(sp_input)": 0.0030581039755351682,
                "tf.sparse.to_dense(sp_input, default_value)": 0.0030581039755351682,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.0030581039755351682,
                "tf.sparse.transpose(sp_input)": 0.0030581039755351682,
                "tf.sparse.transpose(sp_input, perm)": 0.0030581039755351682,
                "IndexingAxis1Operation": 0.0030581039755351682,
                "IndexingOperation": 0.03363914373088685,
                "PairCreationOperation": 0.0061162079510703364,
                "SingletonTupleCreationOperation": 0.0030581039755351682,
                "SlicingAxis0BothOperation": 0.0030581039755351682,
                "SlicingAxis0LeftOperation": 0.0030581039755351682,
                "SlicingAxis0RightOperation": 0.0030581039755351682,
                "SlicingAxis1BothOperation": 0.0030581039755351682,
                "SlicingAxis1LeftOperation": 0.0030581039755351682,
                "SlicingAxis1RightOperation": 0.0030581039755351682,
                "TripleCreationOperation": 0.0030581039755351682,
                "PROVIDED_CONSTANT_WEIGHT": 0.0061162079510703364,
                "COMMON_CONSTANT_WEIGHT": 0.12538226299694188,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.0030581039755351682,
                "INPUT_VARIABLE_WEIGHT": 0.14984709480122324,
                "AXIS_CONSTANT_WEIGHT": 0.009174311926605505,
                "SHAPE_CONSTANT_WEIGHT": 0.0030581039755351682,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.0030581039755351682,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.012232415902140673,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.0061162079510703364,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.03058103975535168,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.0030581039755351682
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 5,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 5,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 6,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 6,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 7,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 7,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 7,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 8,
                "tf.pad(tensor, paddings, mode='REFLECT')": 8,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 7,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 4,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side='left')": 8,
                "tf.searchsorted(sorted_sequence, values, side='right')": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 7,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction='DESCENDING')": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 7,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 7,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 6,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 5,
                "PairCreationOperation": 7,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 7,
                "COMMON_CONSTANT_WEIGHT": 3,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 3,
                "AXIS_CONSTANT_WEIGHT": 7,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 6,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 7,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 5,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "stackoverflow_46",
        "description": "convert segment lengths to segment ids",
        "target_program": "tf.cast(tf.where(tf.sequence_mask(in1))[:, 0], tf.int32)",
        "source": "https://stackoverflow.com/questions/58652161/how-to-convert-2-3-4-to-0-0-1-1-1-2-2-2-2-to-utilize-tf-math-segment-sum",
        "constants": "[]",
        "examples": {
            "inputs": "[[3, 4, 1],]",
            "outputs": "[0, 0, 0, 1, 1, 1, 1, 2]"
        },
        "completions": [
            "def transform(in1):\n    segment_ids = tf.repeat(tf.range(tf.size(in1)), in1)\n    return segment_ids\n",
            "return tf.repeat(tf.range(tf.size(in1)), tf.unstack(in1))\n",
            "def transform(in1):\n    segment_lengths = in1.numpy()\n    segment_ids = tf.repeat(tf.range(tf.size(segment_lengths)), segment_lengths)\n    return segment_ids.numpy()\n",
            "return tf.repeat(tf.range(tf.size(in1)), in1)",
            "values = tf.range(tf.size(in1))\nreturn tf.math.unsorted_segment_sum(tf.ones_like(values), tf.repeat(tf.range(tf.size(in1)-1), in1[:-1]), tf.reduce_sum(in1))\n",
            "def transform(in1):\n    segment_lengths = tf.convert_to_tensor(in1)\n    segment_ids = tf.math.cumsum(tf.ones_like(segment_lengths, dtype=tf.int32), axis=0) - 1\n    return segment_ids.numpy()\n  ",
            "return tf.repeat(tf.range(tf.shape(in1)[0]), in1)\n",
            "return tf.math.segment_sum(tf.ones_like(in1), tf.range(in1.numpy()), axis=0)",
            "return tf.repeat(tf.range(tf.size(in1)), in1)",
            "return tf.argsort(tf.repeat(tf.range(tf.reduce_sum(in1)), tf.unstack(in1)), stable=True)",
            "return tf.repeat(tf.range(tf.size(in1)), in1)",
            "return tf.repeat(tf.range(tf.size(in1)), in1)",
            "return tf.repeat(tf.range(tf.size(in1)), in1)",
            "return tf.argmax(tf.sequence_mask(in1), axis=0)\n",
            "return tf.repeat(tf.range(tf.shape(in1)[0]), in1)",
            "def transform(segment_lengths):\n    segment_ids = tf.repeat(tf.range(tf.size(segment_lengths)), segment_lengths)\n    return segment_ids.numpy()\n",
            "return tf.repeat(tf.range(tf.shape(in1)[0]), in1)",
            "return tf.repeat(tf.range(tf.shape(in1)[0]), in1)",
            "return tf.sequence_mask(tf.reduce_sum(in1), tf.reduce_sum(in1))",
            "def transform(in1):\n    lengths = in1\n    segment_ids = tf.repeat(tf.range(tf.size(lengths)), tf.cast(lengths, tf.int32))\n    return segment_ids\n"
        ],
        "tf_operators": {
            "tf.range": 17,
            "tf.repeat": 16,
            "tf.size": 11,
            "tf.unstack": 2,
            "tf.reduce_sum": 3,
            "tf.ones_like": 3,
            "tf.math.unsorted_segment_sum": 1,
            "tf.math.cumsum": 1,
            "tf.convert_to_tensor": 1,
            "tf.int32": 2,
            "tf.shape": 4,
            "tf.math.segment_sum": 1,
            "tf.argsort": 1,
            "tf.argmax": 1,
            "tf.sequence_mask": 2,
            "tf.cast": 1
        },
        "coverage_percentage": 75.0,
        "total_covered": 3,
        "total_in_target": 4,
        "parsed_constants": [
            [],
            [],
            [],
            [],
            [
                1,
                -1
            ],
            [
                0,
                1
            ],
            [
                0
            ],
            [
                0
            ],
            [],
            [],
            [],
            [],
            [],
            [
                0
            ],
            [
                0
            ],
            [],
            [
                0
            ],
            [
                0
            ],
            [],
            []
        ],
        "all_constants": [
            0,
            1,
            -1
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 0,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 0,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 34,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 11,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 2
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.003816793893129771,
                "tf.add(x, y)": 0.003816793893129771,
                "tf.add_n(inputs)": 0.003816793893129771,
                "tf.argmax(input, axis)": 0.007633587786259542,
                "tf.argmin(input, axis)": 0.003816793893129771,
                "tf.argsort(values, axis, stable=True)": 0.007633587786259542,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.003816793893129771,
                "tf.boolean_mask(tensor, mask)": 0.003816793893129771,
                "tf.broadcast_to(input, shape)": 0.003816793893129771,
                "tf.cast(x, dtype)": 0.007633587786259542,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.003816793893129771,
                "tf.concat(values, axis)": 0.003816793893129771,
                "tf.constant(value)": 0.003816793893129771,
                "tf.constant(value, dtype)": 0.003816793893129771,
                "tf.divide(x, y)": 0.003816793893129771,
                "tf.equal(x, y)": 0.003816793893129771,
                "tf.exp(x)": 0.003816793893129771,
                "tf.expand_dims(input, axis)": 0.003816793893129771,
                "tf.eye(num_rows)": 0.003816793893129771,
                "tf.eye(num_rows, num_columns)": 0.003816793893129771,
                "tf.eye(num_rows, dtype)": 0.003816793893129771,
                "tf.fill(dims, value)": 0.003816793893129771,
                "tf.gather(params, indices)": 0.003816793893129771,
                "tf.gather(params, indices, axis, batch_dims)": 0.003816793893129771,
                "tf.gather_nd(params, indices)": 0.003816793893129771,
                "tf.gather_nd(params, indices, batch_dims)": 0.003816793893129771,
                "tf.greater(x, y)": 0.003816793893129771,
                "tf.greater_equal(x, y)": 0.003816793893129771,
                "tf.math.bincount(arr)": 0.003816793893129771,
                "tf.math.ceil(x)": 0.003816793893129771,
                "tf.math.count_nonzero(input)": 0.003816793893129771,
                "tf.math.count_nonzero(input, axis)": 0.003816793893129771,
                "tf.math.cumsum(x, axis)": 0.003816793893129771,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.007633587786259542,
                "tf.math.divide_no_nan(x, y)": 0.003816793893129771,
                "tf.math.floor(x)": 0.003816793893129771,
                "tf.math.log(x)": 0.003816793893129771,
                "tf.math.logical_and(x, y)": 0.003816793893129771,
                "tf.math.logical_not(x)": 0.003816793893129771,
                "tf.math.logical_or(x, y)": 0.003816793893129771,
                "tf.math.logical_xor(x, y)": 0.003816793893129771,
                "tf.math.negative(x)": 0.003816793893129771,
                "tf.math.reciprocal(x)": 0.003816793893129771,
                "tf.math.reciprocal_no_nan(x)": 0.003816793893129771,
                "tf.math.segment_max(data, segment_ids)": 0.003816793893129771,
                "tf.math.segment_mean(data, segment_ids)": 0.003816793893129771,
                "tf.math.segment_min(data, segment_ids)": 0.003816793893129771,
                "tf.math.segment_prod(data, segment_ids)": 0.003816793893129771,
                "tf.math.segment_sum(data, segment_ids)": 0.007633587786259542,
                "tf.math.squared_difference(x, y)": 0.003816793893129771,
                "tf.math.top_k(input, k)": 0.003816793893129771,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.003816793893129771,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.003816793893129771,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.003816793893129771,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.003816793893129771,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.007633587786259542,
                "tf.matmul(a, b)": 0.003816793893129771,
                "tf.maximum(x, y)": 0.003816793893129771,
                "tf.minimum(x, y)": 0.003816793893129771,
                "tf.multiply(x, y)": 0.003816793893129771,
                "tf.not_equal(x, y)": 0.003816793893129771,
                "tf.one_hot(indices, depth)": 0.003816793893129771,
                "tf.ones(shape)": 0.003816793893129771,
                "tf.ones_like(input)": 0.015267175572519083,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.003816793893129771,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.003816793893129771,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.003816793893129771,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.003816793893129771,
                "tf.range(start)": 0.07251908396946564,
                "tf.range(start, limit, delta)": 0.003816793893129771,
                "tf.reduce_any(input_tensor, axis)": 0.003816793893129771,
                "tf.reduce_all(input_tensor, axis)": 0.003816793893129771,
                "tf.reduce_max(input_tensor)": 0.003816793893129771,
                "tf.reduce_max(input_tensor, axis)": 0.003816793893129771,
                "tf.reduce_mean(input_tensor)": 0.003816793893129771,
                "tf.reduce_mean(input_tensor, axis)": 0.003816793893129771,
                "tf.reduce_min(input_tensor)": 0.003816793893129771,
                "tf.reduce_min(input_tensor, axis)": 0.003816793893129771,
                "tf.reduce_prod(input_tensor, axis)": 0.003816793893129771,
                "tf.reduce_sum(input_tensor)": 0.019083969465648856,
                "tf.reduce_sum(input_tensor, axis)": 0.003816793893129771,
                "tf.repeat(input, repeats)": 0.0648854961832061,
                "tf.repeat(input, repeats, axis)": 0.003816793893129771,
                "tf.reshape(tensor, shape)": 0.003816793893129771,
                "tf.reverse(tensor, axis)": 0.003816793893129771,
                "tf.roll(input, shift, axis)": 0.003816793893129771,
                "tf.round(x)": 0.003816793893129771,
                "tf.scatter_nd(indices, updates, shape)": 0.003816793893129771,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.003816793893129771,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.003816793893129771,
                "tf.sequence_mask(lengths)": 0.007633587786259542,
                "tf.sequence_mask(lengths, maxlen)": 0.007633587786259542,
                "tf.shape(input)": 0.019083969465648856,
                "tf.sign(x)": 0.003816793893129771,
                "tf.sort(values, axis)": 0.003816793893129771,
                "tf.sort(values, axis, direction='DESCENDING')": 0.003816793893129771,
                "tf.sqrt(x)": 0.003816793893129771,
                "tf.square(x)": 0.003816793893129771,
                "tf.squeeze(input)": 0.003816793893129771,
                "tf.squeeze(input, axis)": 0.003816793893129771,
                "tf.stack(values, axis)": 0.003816793893129771,
                "tf.subtract(x, y)": 0.003816793893129771,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.003816793893129771,
                "tf.tensordot(a, b, axes)": 0.003816793893129771,
                "tf.tile(input, multiples)": 0.003816793893129771,
                "tf.transpose(a)": 0.003816793893129771,
                "tf.transpose(a, perm)": 0.003816793893129771,
                "tf.unique_with_counts(x)": 0.003816793893129771,
                "tf.unstack(value, axis)": 0.011450381679389313,
                "tf.where(condition)": 0.003816793893129771,
                "tf.where(condition, x, y)": 0.003816793893129771,
                "tf.zeros(shape)": 0.003816793893129771,
                "tf.zeros_like(input)": 0.003816793893129771,
                "tf.SparseTensor(indices, values, dense_shape)": 0.003816793893129771,
                "tf.sparse.add(a, b)": 0.003816793893129771,
                "tf.sparse.concat(axis, sp_inputs)": 0.003816793893129771,
                "tf.sparse.expand_dims(sp_input, axis)": 0.003816793893129771,
                "tf.sparse.from_dense(tensor)": 0.003816793893129771,
                "tf.sparse.maximum(sp_a, sp_b)": 0.003816793893129771,
                "tf.sparse.minimum(sp_a, sp_b)": 0.003816793893129771,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.003816793893129771,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.003816793893129771,
                "tf.sparse.reset_shape(sp_input)": 0.003816793893129771,
                "tf.sparse.reshape(sp_input, shape)": 0.003816793893129771,
                "tf.sparse.retain(sp_input, to_retain)": 0.003816793893129771,
                "tf.sparse.slice(sp_input, start, size)": 0.003816793893129771,
                "tf.sparse.split(sp_input, num_split, axis)": 0.003816793893129771,
                "tf.sparse.to_dense(sp_input)": 0.003816793893129771,
                "tf.sparse.to_dense(sp_input, default_value)": 0.003816793893129771,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.003816793893129771,
                "tf.sparse.transpose(sp_input)": 0.003816793893129771,
                "tf.sparse.transpose(sp_input, perm)": 0.003816793893129771,
                "IndexingAxis1Operation": 0.003816793893129771,
                "IndexingOperation": 0.019083969465648856,
                "PairCreationOperation": 0.003816793893129771,
                "SingletonTupleCreationOperation": 0.003816793893129771,
                "SlicingAxis0BothOperation": 0.003816793893129771,
                "SlicingAxis0LeftOperation": 0.003816793893129771,
                "SlicingAxis0RightOperation": 0.007633587786259542,
                "SlicingAxis1BothOperation": 0.003816793893129771,
                "SlicingAxis1LeftOperation": 0.003816793893129771,
                "SlicingAxis1RightOperation": 0.003816793893129771,
                "TripleCreationOperation": 0.003816793893129771,
                "PROVIDED_CONSTANT_WEIGHT": 0.003816793893129771,
                "COMMON_CONSTANT_WEIGHT": 0.04580152671755725,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.003816793893129771,
                "INPUT_VARIABLE_WEIGHT": 0.13358778625954199,
                "AXIS_CONSTANT_WEIGHT": 0.003816793893129771,
                "SHAPE_CONSTANT_WEIGHT": 0.003816793893129771,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.003816793893129771,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.011450381679389313,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.003816793893129771,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.003816793893129771,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.003816793893129771
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 7,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 7,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 7,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 8,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 7,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 7,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 7,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 6,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 8,
                "tf.pad(tensor, paddings, mode='REFLECT')": 8,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 8,
                "tf.range(start)": 4,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 6,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 4,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side='left')": 8,
                "tf.searchsorted(sorted_sequence, values, side='right')": 8,
                "tf.sequence_mask(lengths)": 7,
                "tf.sequence_mask(lengths, maxlen)": 7,
                "tf.shape(input)": 6,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction='DESCENDING')": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 6,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 6,
                "PairCreationOperation": 8,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 7,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 4,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 3,
                "AXIS_CONSTANT_WEIGHT": 8,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 6,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "stackoverflow_47",
        "description": "put given values into a sequence mask",
        "target_program": "tf.reshape(tf.gather(in1, tf.cumsum(tf.reshape(tf.cast(in2, tf.int32), [-1]), exclusive=True) * tf.reshape(tf.cast(in2, tf.int32), [-1])), in2.shape)",
        "source": "https://stackoverflow.com/questions/58641546/how-can-i-put-the-sequential-values-to-the-sequence-mask",
        "constants": "[]",
        "examples": {
            "inputs": "[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16],[[True, True, True, False, False], [True, True, False, False, False], [True, True, True, True, True], [True, True, True, True, False], [True, False, False, False, False], [True, True, False, False, False]],]",
            "outputs": "[[0, 1, 2, 0, 0],    [3, 4, 0, 0, 0],    [5, 6, 7, 8, 9],    [10, 11, 12, 13, 0],    [14, 0, 0, 0, 0],    [15, 16, 0, 0, 0]]"
        },
        "completions": [
            "return tf.math.multiply(in1, tf.cast(in2, tf.int32))",
            "return tf.where(in2, in1, tf.zeros_like(in1))\n",
            "return tf.boolean_mask(in1, in2)\n",
            "return tf.fill(tf.shape(in1), 0)\n",
            "return tf.boolean_mask(in1, in2)\n",
            "return tf.boolean_mask(in1, in2)\n",
            "return tf.boolean_mask(in1, in2)\n",
            "return tf.boolean_mask(in1, in2)\n",
            "return tf.boolean_mask(in1, tf.cast(in2, tf.bool))\n",
            "return tf.boolean_mask(in1, tf.cast(in2, tf.bool))\n",
            "result = tf.where(in2, in1, tf.zeros_like(in1))\nreturn result\n",
            "return tf.boolean_mask(in1, tf.cast(in2, tf.bool))\n",
            "return tf.boolean_mask(in1, tf.cast(in2, tf.bool))\n",
            "return tf.where(in2, in1, tf.zeros_like(in1))\n",
            "return tf.boolean_mask(in1, tf.transpose(in2))  \n",
            "return tf.boolean_mask(in1, tf.cast(in2, tf.bool))\n",
            "return tf.where(in2, in1, tf.zeros_like(in1))\n",
            "return tf.boolean_mask(in1, in2)\n",
            "return tf.boolean_mask(in1, tf.sequence_mask(tf.reduce_sum(tf.cast(in2, tf.int32), axis=1), maxlen=in1.shape[1]))\n",
            "return tf.boolean_mask(in1, in2)*tf.cast(in2, tf.int32)\n"
        ],
        "tf_operators": {
            "tf.cast": 8,
            "tf.math.multiply": 1,
            "tf.int32": 3,
            "tf.where": 4,
            "tf.zeros_like": 4,
            "tf.boolean_mask": 14,
            "tf.fill": 1,
            "tf.shape": 1,
            "tf.bool": 5,
            "tf.transpose": 1,
            "tf.sequence_mask": 1,
            "tf.reduce_sum": 1
        },
        "coverage_percentage": 40.0,
        "total_covered": 2,
        "total_in_target": 5,
        "parsed_constants": [
            [],
            [],
            [],
            [
                0
            ],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [
                1,
                1
            ],
            []
        ],
        "all_constants": [
            0,
            1
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 44,
            "shape": 0,
            "tf_bool": 5,
            "provided": 0,
            "common": 3,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 3
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.004098360655737705,
                "tf.add(x, y)": 0.004098360655737705,
                "tf.add_n(inputs)": 0.004098360655737705,
                "tf.argmax(input, axis)": 0.004098360655737705,
                "tf.argmin(input, axis)": 0.004098360655737705,
                "tf.argsort(values, axis, stable=True)": 0.004098360655737705,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.004098360655737705,
                "tf.boolean_mask(tensor, mask)": 0.06147540983606557,
                "tf.broadcast_to(input, shape)": 0.004098360655737705,
                "tf.cast(x, dtype)": 0.036885245901639344,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.004098360655737705,
                "tf.concat(values, axis)": 0.004098360655737705,
                "tf.constant(value)": 0.004098360655737705,
                "tf.constant(value, dtype)": 0.004098360655737705,
                "tf.divide(x, y)": 0.004098360655737705,
                "tf.equal(x, y)": 0.004098360655737705,
                "tf.exp(x)": 0.004098360655737705,
                "tf.expand_dims(input, axis)": 0.004098360655737705,
                "tf.eye(num_rows)": 0.004098360655737705,
                "tf.eye(num_rows, num_columns)": 0.004098360655737705,
                "tf.eye(num_rows, dtype)": 0.004098360655737705,
                "tf.fill(dims, value)": 0.00819672131147541,
                "tf.gather(params, indices)": 0.004098360655737705,
                "tf.gather(params, indices, axis, batch_dims)": 0.004098360655737705,
                "tf.gather_nd(params, indices)": 0.004098360655737705,
                "tf.gather_nd(params, indices, batch_dims)": 0.004098360655737705,
                "tf.greater(x, y)": 0.004098360655737705,
                "tf.greater_equal(x, y)": 0.004098360655737705,
                "tf.math.bincount(arr)": 0.004098360655737705,
                "tf.math.ceil(x)": 0.004098360655737705,
                "tf.math.count_nonzero(input)": 0.004098360655737705,
                "tf.math.count_nonzero(input, axis)": 0.004098360655737705,
                "tf.math.cumsum(x, axis)": 0.004098360655737705,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.004098360655737705,
                "tf.math.divide_no_nan(x, y)": 0.004098360655737705,
                "tf.math.floor(x)": 0.004098360655737705,
                "tf.math.log(x)": 0.004098360655737705,
                "tf.math.logical_and(x, y)": 0.004098360655737705,
                "tf.math.logical_not(x)": 0.004098360655737705,
                "tf.math.logical_or(x, y)": 0.004098360655737705,
                "tf.math.logical_xor(x, y)": 0.004098360655737705,
                "tf.math.negative(x)": 0.004098360655737705,
                "tf.math.reciprocal(x)": 0.004098360655737705,
                "tf.math.reciprocal_no_nan(x)": 0.004098360655737705,
                "tf.math.segment_max(data, segment_ids)": 0.004098360655737705,
                "tf.math.segment_mean(data, segment_ids)": 0.004098360655737705,
                "tf.math.segment_min(data, segment_ids)": 0.004098360655737705,
                "tf.math.segment_prod(data, segment_ids)": 0.004098360655737705,
                "tf.math.segment_sum(data, segment_ids)": 0.004098360655737705,
                "tf.math.squared_difference(x, y)": 0.004098360655737705,
                "tf.math.top_k(input, k)": 0.004098360655737705,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.004098360655737705,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.004098360655737705,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.004098360655737705,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.004098360655737705,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.004098360655737705,
                "tf.matmul(a, b)": 0.004098360655737705,
                "tf.maximum(x, y)": 0.004098360655737705,
                "tf.minimum(x, y)": 0.004098360655737705,
                "tf.multiply(x, y)": 0.004098360655737705,
                "tf.not_equal(x, y)": 0.004098360655737705,
                "tf.one_hot(indices, depth)": 0.004098360655737705,
                "tf.ones(shape)": 0.004098360655737705,
                "tf.ones_like(input)": 0.004098360655737705,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.004098360655737705,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.004098360655737705,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.004098360655737705,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.004098360655737705,
                "tf.range(start)": 0.004098360655737705,
                "tf.range(start, limit, delta)": 0.004098360655737705,
                "tf.reduce_any(input_tensor, axis)": 0.004098360655737705,
                "tf.reduce_all(input_tensor, axis)": 0.004098360655737705,
                "tf.reduce_max(input_tensor)": 0.004098360655737705,
                "tf.reduce_max(input_tensor, axis)": 0.004098360655737705,
                "tf.reduce_mean(input_tensor)": 0.004098360655737705,
                "tf.reduce_mean(input_tensor, axis)": 0.004098360655737705,
                "tf.reduce_min(input_tensor)": 0.004098360655737705,
                "tf.reduce_min(input_tensor, axis)": 0.004098360655737705,
                "tf.reduce_prod(input_tensor, axis)": 0.004098360655737705,
                "tf.reduce_sum(input_tensor)": 0.004098360655737705,
                "tf.reduce_sum(input_tensor, axis)": 0.004098360655737705,
                "tf.repeat(input, repeats)": 0.004098360655737705,
                "tf.repeat(input, repeats, axis)": 0.004098360655737705,
                "tf.reshape(tensor, shape)": 0.004098360655737705,
                "tf.reverse(tensor, axis)": 0.004098360655737705,
                "tf.roll(input, shift, axis)": 0.004098360655737705,
                "tf.round(x)": 0.004098360655737705,
                "tf.scatter_nd(indices, updates, shape)": 0.004098360655737705,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.004098360655737705,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.004098360655737705,
                "tf.sequence_mask(lengths)": 0.004098360655737705,
                "tf.sequence_mask(lengths, maxlen)": 0.004098360655737705,
                "tf.shape(input)": 0.00819672131147541,
                "tf.sign(x)": 0.004098360655737705,
                "tf.sort(values, axis)": 0.004098360655737705,
                "tf.sort(values, axis, direction='DESCENDING')": 0.004098360655737705,
                "tf.sqrt(x)": 0.004098360655737705,
                "tf.square(x)": 0.004098360655737705,
                "tf.squeeze(input)": 0.004098360655737705,
                "tf.squeeze(input, axis)": 0.004098360655737705,
                "tf.stack(values, axis)": 0.004098360655737705,
                "tf.subtract(x, y)": 0.004098360655737705,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.004098360655737705,
                "tf.tensordot(a, b, axes)": 0.004098360655737705,
                "tf.tile(input, multiples)": 0.004098360655737705,
                "tf.transpose(a)": 0.00819672131147541,
                "tf.transpose(a, perm)": 0.004098360655737705,
                "tf.unique_with_counts(x)": 0.004098360655737705,
                "tf.unstack(value, axis)": 0.004098360655737705,
                "tf.where(condition)": 0.004098360655737705,
                "tf.where(condition, x, y)": 0.020491803278688523,
                "tf.zeros(shape)": 0.004098360655737705,
                "tf.zeros_like(input)": 0.020491803278688523,
                "tf.SparseTensor(indices, values, dense_shape)": 0.004098360655737705,
                "tf.sparse.add(a, b)": 0.004098360655737705,
                "tf.sparse.concat(axis, sp_inputs)": 0.004098360655737705,
                "tf.sparse.expand_dims(sp_input, axis)": 0.004098360655737705,
                "tf.sparse.from_dense(tensor)": 0.004098360655737705,
                "tf.sparse.maximum(sp_a, sp_b)": 0.004098360655737705,
                "tf.sparse.minimum(sp_a, sp_b)": 0.004098360655737705,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.004098360655737705,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.004098360655737705,
                "tf.sparse.reset_shape(sp_input)": 0.004098360655737705,
                "tf.sparse.reshape(sp_input, shape)": 0.004098360655737705,
                "tf.sparse.retain(sp_input, to_retain)": 0.004098360655737705,
                "tf.sparse.slice(sp_input, start, size)": 0.004098360655737705,
                "tf.sparse.split(sp_input, num_split, axis)": 0.004098360655737705,
                "tf.sparse.to_dense(sp_input)": 0.004098360655737705,
                "tf.sparse.to_dense(sp_input, default_value)": 0.004098360655737705,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.004098360655737705,
                "tf.sparse.transpose(sp_input)": 0.004098360655737705,
                "tf.sparse.transpose(sp_input, perm)": 0.004098360655737705,
                "IndexingAxis1Operation": 0.004098360655737705,
                "IndexingOperation": 0.00819672131147541,
                "PairCreationOperation": 0.004098360655737705,
                "SingletonTupleCreationOperation": 0.004098360655737705,
                "SlicingAxis0BothOperation": 0.004098360655737705,
                "SlicingAxis0LeftOperation": 0.004098360655737705,
                "SlicingAxis0RightOperation": 0.004098360655737705,
                "SlicingAxis1BothOperation": 0.004098360655737705,
                "SlicingAxis1LeftOperation": 0.004098360655737705,
                "SlicingAxis1RightOperation": 0.004098360655737705,
                "TripleCreationOperation": 0.004098360655737705,
                "PROVIDED_CONSTANT_WEIGHT": 0.004098360655737705,
                "COMMON_CONSTANT_WEIGHT": 0.01639344262295082,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.004098360655737705,
                "INPUT_VARIABLE_WEIGHT": 0.18442622950819673,
                "AXIS_CONSTANT_WEIGHT": 0.004098360655737705,
                "SHAPE_CONSTANT_WEIGHT": 0.004098360655737705,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.004098360655737705,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.01639344262295082,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.004098360655737705,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.02459016393442623,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.004098360655737705
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 4,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 5,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 8,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 7,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 8,
                "tf.pad(tensor, paddings, mode='REFLECT')": 8,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side='left')": 8,
                "tf.searchsorted(sorted_sequence, values, side='right')": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 7,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction='DESCENDING')": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 7,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 6,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 6,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 7,
                "PairCreationOperation": 8,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 6,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 2,
                "AXIS_CONSTANT_WEIGHT": 8,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 6,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 5,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "stackoverflow_48",
        "description": "find the indices of all elements",
        "target_program": "tf.cast(tf.argmax(tf.cast(tf.equal(in1, tf.expand_dims(in2, 1)), tf.int32), axis=1), tf.int32)",
        "source": "https://stackoverflow.com/questions/58481332/getting-the-indices-of-several-elements-in-a-tensorflow-at-once",
        "constants": "[]",
        "examples": {
            "inputs": "[[32, 53, 45, 38, 29, 89, 64, 23],[38, 53, 89, 38, 32, 64],]",
            "outputs": "[3, 1, 5, 3, 0, 6]"
        },
        "completions": [
            "return tf.argsort(in2)\n",
            "return tf.searchsorted(in1, in2, side='left')",
            "return tf.cast(tf.searchsorted(tf.sort(in1), in2), tf.int32)\n",
            "return tf.where(tf.equal(tf.expand_dims(in1, axis=1), in2))[:, 1]\n",
            "def transform(in1, in2):\n    return tf.argsort(in1, stable=True)\n",
            "return tf.searchsorted(tf.sort(in1), in2)",
            "return tf.argsort(in1)[tf.argsort(in2)]\n  ",
            "return tf.argsort(in1, stable=True).numpy()[tf.argsort(in2, stable=True).numpy()]\n",
            "return tf.where(tf.equal(tf.expand_dims(in1, 1), in2))",
            "def transform(in1, in2):\n    return tf.argsort(in1, stable=True)\n",
            "def transform(in1, in2):\n    return tf.argsort(in1, stable=True)\n",
            "return tf.argsort(in1, axis=0)\n",
            "return tf.argsort(tf.cast(tf.equal(tf.expand_dims(in1, 1), in2), tf.int32))[-1]",
            "return tf.searchsorted(tf.sort(in1), in2)",
            "return tf.searchsorted(tf.sort(in1), in2, side='left')\n",
            "def transform(in1, in2):\n    return tf.argsort(in1, stable=True)[tf.argsort(in2, stable=True)]\n",
            "return tf.cast(tf.where(tf.equal(tf.expand_dims(in1, 1), in2))[:, 0], tf.int32)\n",
            "return tf.searchsorted(in2, in1)",
            "return tf.where(tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0)))[0][:, 1]",
            "return tf.searchsorted(tf.sort(in1), in2, side='left')\n"
        ],
        "tf_operators": {
            "tf.argsort": 9,
            "tf.searchsorted": 7,
            "tf.cast": 3,
            "tf.sort": 5,
            "tf.int32": 3,
            "tf.where": 4,
            "tf.equal": 5,
            "tf.expand_dims": 5
        },
        "coverage_percentage": 80.0,
        "total_covered": 4,
        "total_in_target": 5,
        "parsed_constants": [
            [],
            [],
            [],
            [
                1,
                1
            ],
            [],
            [],
            [],
            [],
            [
                1
            ],
            [],
            [],
            [
                0
            ],
            [
                1,
                -1
            ],
            [],
            [],
            [],
            [
                1,
                0
            ],
            [],
            [
                1,
                0,
                0,
                1
            ],
            []
        ],
        "all_constants": [
            0,
            1,
            -1
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 35,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 16,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 3
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.0040650406504065045,
                "tf.add(x, y)": 0.0040650406504065045,
                "tf.add_n(inputs)": 0.0040650406504065045,
                "tf.argmax(input, axis)": 0.0040650406504065045,
                "tf.argmin(input, axis)": 0.0040650406504065045,
                "tf.argsort(values, axis, stable=True)": 0.036585365853658534,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.0040650406504065045,
                "tf.boolean_mask(tensor, mask)": 0.0040650406504065045,
                "tf.broadcast_to(input, shape)": 0.0040650406504065045,
                "tf.cast(x, dtype)": 0.016260162601626018,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.0040650406504065045,
                "tf.concat(values, axis)": 0.0040650406504065045,
                "tf.constant(value)": 0.0040650406504065045,
                "tf.constant(value, dtype)": 0.0040650406504065045,
                "tf.divide(x, y)": 0.0040650406504065045,
                "tf.equal(x, y)": 0.024390243902439025,
                "tf.exp(x)": 0.0040650406504065045,
                "tf.expand_dims(input, axis)": 0.028455284552845527,
                "tf.eye(num_rows)": 0.0040650406504065045,
                "tf.eye(num_rows, num_columns)": 0.0040650406504065045,
                "tf.eye(num_rows, dtype)": 0.0040650406504065045,
                "tf.fill(dims, value)": 0.0040650406504065045,
                "tf.gather(params, indices)": 0.0040650406504065045,
                "tf.gather(params, indices, axis, batch_dims)": 0.0040650406504065045,
                "tf.gather_nd(params, indices)": 0.0040650406504065045,
                "tf.gather_nd(params, indices, batch_dims)": 0.0040650406504065045,
                "tf.greater(x, y)": 0.0040650406504065045,
                "tf.greater_equal(x, y)": 0.0040650406504065045,
                "tf.math.bincount(arr)": 0.0040650406504065045,
                "tf.math.ceil(x)": 0.0040650406504065045,
                "tf.math.count_nonzero(input)": 0.0040650406504065045,
                "tf.math.count_nonzero(input, axis)": 0.0040650406504065045,
                "tf.math.cumsum(x, axis)": 0.0040650406504065045,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.0040650406504065045,
                "tf.math.divide_no_nan(x, y)": 0.0040650406504065045,
                "tf.math.floor(x)": 0.0040650406504065045,
                "tf.math.log(x)": 0.0040650406504065045,
                "tf.math.logical_and(x, y)": 0.0040650406504065045,
                "tf.math.logical_not(x)": 0.0040650406504065045,
                "tf.math.logical_or(x, y)": 0.0040650406504065045,
                "tf.math.logical_xor(x, y)": 0.0040650406504065045,
                "tf.math.negative(x)": 0.0040650406504065045,
                "tf.math.reciprocal(x)": 0.0040650406504065045,
                "tf.math.reciprocal_no_nan(x)": 0.0040650406504065045,
                "tf.math.segment_max(data, segment_ids)": 0.0040650406504065045,
                "tf.math.segment_mean(data, segment_ids)": 0.0040650406504065045,
                "tf.math.segment_min(data, segment_ids)": 0.0040650406504065045,
                "tf.math.segment_prod(data, segment_ids)": 0.0040650406504065045,
                "tf.math.segment_sum(data, segment_ids)": 0.0040650406504065045,
                "tf.math.squared_difference(x, y)": 0.0040650406504065045,
                "tf.math.top_k(input, k)": 0.0040650406504065045,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.0040650406504065045,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.0040650406504065045,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.0040650406504065045,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.0040650406504065045,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.0040650406504065045,
                "tf.matmul(a, b)": 0.0040650406504065045,
                "tf.maximum(x, y)": 0.0040650406504065045,
                "tf.minimum(x, y)": 0.0040650406504065045,
                "tf.multiply(x, y)": 0.0040650406504065045,
                "tf.not_equal(x, y)": 0.0040650406504065045,
                "tf.one_hot(indices, depth)": 0.0040650406504065045,
                "tf.ones(shape)": 0.0040650406504065045,
                "tf.ones_like(input)": 0.0040650406504065045,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.0040650406504065045,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.0040650406504065045,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.0040650406504065045,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.0040650406504065045,
                "tf.range(start)": 0.0040650406504065045,
                "tf.range(start, limit, delta)": 0.0040650406504065045,
                "tf.reduce_any(input_tensor, axis)": 0.0040650406504065045,
                "tf.reduce_all(input_tensor, axis)": 0.0040650406504065045,
                "tf.reduce_max(input_tensor)": 0.0040650406504065045,
                "tf.reduce_max(input_tensor, axis)": 0.0040650406504065045,
                "tf.reduce_mean(input_tensor)": 0.0040650406504065045,
                "tf.reduce_mean(input_tensor, axis)": 0.0040650406504065045,
                "tf.reduce_min(input_tensor)": 0.0040650406504065045,
                "tf.reduce_min(input_tensor, axis)": 0.0040650406504065045,
                "tf.reduce_prod(input_tensor, axis)": 0.0040650406504065045,
                "tf.reduce_sum(input_tensor)": 0.0040650406504065045,
                "tf.reduce_sum(input_tensor, axis)": 0.0040650406504065045,
                "tf.repeat(input, repeats)": 0.0040650406504065045,
                "tf.repeat(input, repeats, axis)": 0.0040650406504065045,
                "tf.reshape(tensor, shape)": 0.0040650406504065045,
                "tf.reverse(tensor, axis)": 0.0040650406504065045,
                "tf.roll(input, shift, axis)": 0.0040650406504065045,
                "tf.round(x)": 0.0040650406504065045,
                "tf.scatter_nd(indices, updates, shape)": 0.0040650406504065045,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.0040650406504065045,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.0040650406504065045,
                "tf.sequence_mask(lengths)": 0.0040650406504065045,
                "tf.sequence_mask(lengths, maxlen)": 0.0040650406504065045,
                "tf.shape(input)": 0.0040650406504065045,
                "tf.sign(x)": 0.0040650406504065045,
                "tf.sort(values, axis)": 0.0040650406504065045,
                "tf.sort(values, axis, direction='DESCENDING')": 0.0040650406504065045,
                "tf.sqrt(x)": 0.0040650406504065045,
                "tf.square(x)": 0.0040650406504065045,
                "tf.squeeze(input)": 0.0040650406504065045,
                "tf.squeeze(input, axis)": 0.0040650406504065045,
                "tf.stack(values, axis)": 0.0040650406504065045,
                "tf.subtract(x, y)": 0.0040650406504065045,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.0040650406504065045,
                "tf.tensordot(a, b, axes)": 0.0040650406504065045,
                "tf.tile(input, multiples)": 0.0040650406504065045,
                "tf.transpose(a)": 0.0040650406504065045,
                "tf.transpose(a, perm)": 0.0040650406504065045,
                "tf.unique_with_counts(x)": 0.0040650406504065045,
                "tf.unstack(value, axis)": 0.0040650406504065045,
                "tf.where(condition)": 0.02032520325203252,
                "tf.where(condition, x, y)": 0.0040650406504065045,
                "tf.zeros(shape)": 0.0040650406504065045,
                "tf.zeros_like(input)": 0.0040650406504065045,
                "tf.SparseTensor(indices, values, dense_shape)": 0.0040650406504065045,
                "tf.sparse.add(a, b)": 0.0040650406504065045,
                "tf.sparse.concat(axis, sp_inputs)": 0.0040650406504065045,
                "tf.sparse.expand_dims(sp_input, axis)": 0.0040650406504065045,
                "tf.sparse.from_dense(tensor)": 0.0040650406504065045,
                "tf.sparse.maximum(sp_a, sp_b)": 0.0040650406504065045,
                "tf.sparse.minimum(sp_a, sp_b)": 0.0040650406504065045,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.0040650406504065045,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.0040650406504065045,
                "tf.sparse.reset_shape(sp_input)": 0.0040650406504065045,
                "tf.sparse.reshape(sp_input, shape)": 0.0040650406504065045,
                "tf.sparse.retain(sp_input, to_retain)": 0.0040650406504065045,
                "tf.sparse.slice(sp_input, start, size)": 0.0040650406504065045,
                "tf.sparse.split(sp_input, num_split, axis)": 0.0040650406504065045,
                "tf.sparse.to_dense(sp_input)": 0.0040650406504065045,
                "tf.sparse.to_dense(sp_input, default_value)": 0.0040650406504065045,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.0040650406504065045,
                "tf.sparse.transpose(sp_input)": 0.0040650406504065045,
                "tf.sparse.transpose(sp_input, perm)": 0.0040650406504065045,
                "IndexingAxis1Operation": 0.016260162601626018,
                "IndexingOperation": 0.024390243902439025,
                "PairCreationOperation": 0.016260162601626018,
                "SingletonTupleCreationOperation": 0.0040650406504065045,
                "SlicingAxis0BothOperation": 0.0040650406504065045,
                "SlicingAxis0LeftOperation": 0.0040650406504065045,
                "SlicingAxis0RightOperation": 0.0040650406504065045,
                "SlicingAxis1BothOperation": 0.0040650406504065045,
                "SlicingAxis1LeftOperation": 0.0040650406504065045,
                "SlicingAxis1RightOperation": 0.0040650406504065045,
                "TripleCreationOperation": 0.0040650406504065045,
                "PROVIDED_CONSTANT_WEIGHT": 0.0040650406504065045,
                "COMMON_CONSTANT_WEIGHT": 0.06910569105691057,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.0040650406504065045,
                "INPUT_VARIABLE_WEIGHT": 0.14634146341463414,
                "AXIS_CONSTANT_WEIGHT": 0.0040650406504065045,
                "SHAPE_CONSTANT_WEIGHT": 0.0040650406504065045,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.0040650406504065045,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.016260162601626018,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.0040650406504065045,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.0040650406504065045,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.0040650406504065045
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 5,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 6,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 5,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 5,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 8,
                "tf.pad(tensor, paddings, mode='REFLECT')": 8,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side='left')": 8,
                "tf.searchsorted(sorted_sequence, values, side='right')": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 8,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction='DESCENDING')": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 6,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 6,
                "IndexingOperation": 5,
                "PairCreationOperation": 6,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 4,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 3,
                "AXIS_CONSTANT_WEIGHT": 8,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 6,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "stackoverflow_49",
        "description": "multiply tensors by scalars in a batched way",
        "target_program": "tf.transpose(tf.multiply(in2, tf.transpose(in1)))",
        "source": "https://stackoverflow.com/questions/58466562/given-a-batch-of-n-images-how-to-scalar-multiply-each-image-by-a-different-scal",
        "constants": "[]",
        "examples": {
            "inputs": "[[[[[0.1, 0.2, 0.3], [0.4, 0.5, 0.6]]], [[[0.8, 1.0, 0.0], [0.6, 0.4, 0.2]]], [[[0.9, 0.8, 0.7], [0.1, 0.2, 0.3]]]],[2.0, 0.5, 1.0],]",
            "outputs": "[[[[0.2, 0.4, 0.6], [0.8, 1.0, 1.2]]],    [[[0.4, 0.5, 0.0], [0.3, 0.2, 0.1]]],    [[[0.9, 0.8, 0.7], [0.1, 0.2, 0.3]]]]"
        },
        "completions": [
            "return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, 1), 1))\n",
            "return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, 1), 1))\n",
            "return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, 1), 2))\n",
            "return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, 1), 1))\n",
            "return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1))\n",
            "return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, 1), 2))\n",
            "return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1))\n",
            "return tf.multiply(in1, tf.reshape(in2, [3, 1, 1, 1]))\n",
            "return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1))\n",
            "return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1))\n",
            "return tf.multiply(in1, tf.reshape(in2, [3,1,1,1]))\n",
            "batched_scalars = tf.expand_dims(tf.expand_dims(tf.expand_dims(in2, axis=-1), axis=-1), axis=-1)\nresult = tf.multiply(in1, batched_scalars)\nreturn result\n",
            "return tf.multiply(in1, tf.expand_dims(in2, 1))",
            "return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1))\n",
            "return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1))\n",
            "return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1))\n",
            "return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, 1), 2))\n",
            "return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, 1), 2))\n",
            "return tf.multiply(in1, tf.reshape(in2, [1, 1, 1, -1]))\n",
            "return tf.multiply(in1, tf.expand_dims(in2, axis=-1))\n"
        ],
        "tf_operators": {
            "tf.expand_dims": 17,
            "tf.multiply": 20,
            "tf.reshape": 3
        },
        "coverage_percentage": 50.0,
        "total_covered": 1,
        "total_in_target": 2,
        "parsed_constants": [
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                2
            ],
            [
                1,
                1
            ],
            [
                -1,
                -1
            ],
            [
                1,
                2
            ],
            [
                -1,
                -1
            ],
            [
                3,
                1,
                1,
                1
            ],
            [
                -1,
                -1
            ],
            [
                -1,
                -1
            ],
            [
                3,
                1,
                1,
                1
            ],
            [
                -1,
                -1,
                -1
            ],
            [
                1
            ],
            [
                -1,
                -1
            ],
            [
                -1,
                -1
            ],
            [
                -1,
                -1
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                1,
                1,
                -1
            ],
            [
                -1
            ]
        ],
        "all_constants": [
            1,
            2,
            3,
            -1
        ],
        "constant_counts": [
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 40,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 39,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 6,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.0033783783783783786,
                "tf.add(x, y)": 0.0033783783783783786,
                "tf.add_n(inputs)": 0.0033783783783783786,
                "tf.argmax(input, axis)": 0.0033783783783783786,
                "tf.argmin(input, axis)": 0.0033783783783783786,
                "tf.argsort(values, axis, stable=True)": 0.0033783783783783786,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.0033783783783783786,
                "tf.boolean_mask(tensor, mask)": 0.0033783783783783786,
                "tf.broadcast_to(input, shape)": 0.0033783783783783786,
                "tf.cast(x, dtype)": 0.0033783783783783786,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.0033783783783783786,
                "tf.concat(values, axis)": 0.0033783783783783786,
                "tf.constant(value)": 0.0033783783783783786,
                "tf.constant(value, dtype)": 0.0033783783783783786,
                "tf.divide(x, y)": 0.0033783783783783786,
                "tf.equal(x, y)": 0.0033783783783783786,
                "tf.exp(x)": 0.0033783783783783786,
                "tf.expand_dims(input, axis)": 0.11486486486486487,
                "tf.eye(num_rows)": 0.0033783783783783786,
                "tf.eye(num_rows, num_columns)": 0.0033783783783783786,
                "tf.eye(num_rows, dtype)": 0.0033783783783783786,
                "tf.fill(dims, value)": 0.0033783783783783786,
                "tf.gather(params, indices)": 0.0033783783783783786,
                "tf.gather(params, indices, axis, batch_dims)": 0.0033783783783783786,
                "tf.gather_nd(params, indices)": 0.0033783783783783786,
                "tf.gather_nd(params, indices, batch_dims)": 0.0033783783783783786,
                "tf.greater(x, y)": 0.0033783783783783786,
                "tf.greater_equal(x, y)": 0.0033783783783783786,
                "tf.math.bincount(arr)": 0.0033783783783783786,
                "tf.math.ceil(x)": 0.0033783783783783786,
                "tf.math.count_nonzero(input)": 0.0033783783783783786,
                "tf.math.count_nonzero(input, axis)": 0.0033783783783783786,
                "tf.math.cumsum(x, axis)": 0.0033783783783783786,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.0033783783783783786,
                "tf.math.divide_no_nan(x, y)": 0.0033783783783783786,
                "tf.math.floor(x)": 0.0033783783783783786,
                "tf.math.log(x)": 0.0033783783783783786,
                "tf.math.logical_and(x, y)": 0.0033783783783783786,
                "tf.math.logical_not(x)": 0.0033783783783783786,
                "tf.math.logical_or(x, y)": 0.0033783783783783786,
                "tf.math.logical_xor(x, y)": 0.0033783783783783786,
                "tf.math.negative(x)": 0.0033783783783783786,
                "tf.math.reciprocal(x)": 0.0033783783783783786,
                "tf.math.reciprocal_no_nan(x)": 0.0033783783783783786,
                "tf.math.segment_max(data, segment_ids)": 0.0033783783783783786,
                "tf.math.segment_mean(data, segment_ids)": 0.0033783783783783786,
                "tf.math.segment_min(data, segment_ids)": 0.0033783783783783786,
                "tf.math.segment_prod(data, segment_ids)": 0.0033783783783783786,
                "tf.math.segment_sum(data, segment_ids)": 0.0033783783783783786,
                "tf.math.squared_difference(x, y)": 0.0033783783783783786,
                "tf.math.top_k(input, k)": 0.0033783783783783786,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.0033783783783783786,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.0033783783783783786,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.0033783783783783786,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.0033783783783783786,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.0033783783783783786,
                "tf.matmul(a, b)": 0.0033783783783783786,
                "tf.maximum(x, y)": 0.0033783783783783786,
                "tf.minimum(x, y)": 0.0033783783783783786,
                "tf.multiply(x, y)": 0.07094594594594594,
                "tf.not_equal(x, y)": 0.0033783783783783786,
                "tf.one_hot(indices, depth)": 0.0033783783783783786,
                "tf.ones(shape)": 0.0033783783783783786,
                "tf.ones_like(input)": 0.0033783783783783786,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.0033783783783783786,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.0033783783783783786,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.0033783783783783786,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.0033783783783783786,
                "tf.range(start)": 0.0033783783783783786,
                "tf.range(start, limit, delta)": 0.0033783783783783786,
                "tf.reduce_any(input_tensor, axis)": 0.0033783783783783786,
                "tf.reduce_all(input_tensor, axis)": 0.0033783783783783786,
                "tf.reduce_max(input_tensor)": 0.0033783783783783786,
                "tf.reduce_max(input_tensor, axis)": 0.0033783783783783786,
                "tf.reduce_mean(input_tensor)": 0.0033783783783783786,
                "tf.reduce_mean(input_tensor, axis)": 0.0033783783783783786,
                "tf.reduce_min(input_tensor)": 0.0033783783783783786,
                "tf.reduce_min(input_tensor, axis)": 0.0033783783783783786,
                "tf.reduce_prod(input_tensor, axis)": 0.0033783783783783786,
                "tf.reduce_sum(input_tensor)": 0.0033783783783783786,
                "tf.reduce_sum(input_tensor, axis)": 0.0033783783783783786,
                "tf.repeat(input, repeats)": 0.0033783783783783786,
                "tf.repeat(input, repeats, axis)": 0.0033783783783783786,
                "tf.reshape(tensor, shape)": 0.013513513513513514,
                "tf.reverse(tensor, axis)": 0.0033783783783783786,
                "tf.roll(input, shift, axis)": 0.0033783783783783786,
                "tf.round(x)": 0.0033783783783783786,
                "tf.scatter_nd(indices, updates, shape)": 0.0033783783783783786,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.0033783783783783786,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.0033783783783783786,
                "tf.sequence_mask(lengths)": 0.0033783783783783786,
                "tf.sequence_mask(lengths, maxlen)": 0.0033783783783783786,
                "tf.shape(input)": 0.0033783783783783786,
                "tf.sign(x)": 0.0033783783783783786,
                "tf.sort(values, axis)": 0.0033783783783783786,
                "tf.sort(values, axis, direction='DESCENDING')": 0.0033783783783783786,
                "tf.sqrt(x)": 0.0033783783783783786,
                "tf.square(x)": 0.0033783783783783786,
                "tf.squeeze(input)": 0.0033783783783783786,
                "tf.squeeze(input, axis)": 0.0033783783783783786,
                "tf.stack(values, axis)": 0.0033783783783783786,
                "tf.subtract(x, y)": 0.0033783783783783786,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.0033783783783783786,
                "tf.tensordot(a, b, axes)": 0.0033783783783783786,
                "tf.tile(input, multiples)": 0.0033783783783783786,
                "tf.transpose(a)": 0.0033783783783783786,
                "tf.transpose(a, perm)": 0.0033783783783783786,
                "tf.unique_with_counts(x)": 0.0033783783783783786,
                "tf.unstack(value, axis)": 0.0033783783783783786,
                "tf.where(condition)": 0.0033783783783783786,
                "tf.where(condition, x, y)": 0.0033783783783783786,
                "tf.zeros(shape)": 0.0033783783783783786,
                "tf.zeros_like(input)": 0.0033783783783783786,
                "tf.SparseTensor(indices, values, dense_shape)": 0.0033783783783783786,
                "tf.sparse.add(a, b)": 0.0033783783783783786,
                "tf.sparse.concat(axis, sp_inputs)": 0.0033783783783783786,
                "tf.sparse.expand_dims(sp_input, axis)": 0.0033783783783783786,
                "tf.sparse.from_dense(tensor)": 0.0033783783783783786,
                "tf.sparse.maximum(sp_a, sp_b)": 0.0033783783783783786,
                "tf.sparse.minimum(sp_a, sp_b)": 0.0033783783783783786,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.0033783783783783786,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.0033783783783783786,
                "tf.sparse.reset_shape(sp_input)": 0.0033783783783783786,
                "tf.sparse.reshape(sp_input, shape)": 0.0033783783783783786,
                "tf.sparse.retain(sp_input, to_retain)": 0.0033783783783783786,
                "tf.sparse.slice(sp_input, start, size)": 0.0033783783783783786,
                "tf.sparse.split(sp_input, num_split, axis)": 0.0033783783783783786,
                "tf.sparse.to_dense(sp_input)": 0.0033783783783783786,
                "tf.sparse.to_dense(sp_input, default_value)": 0.0033783783783783786,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.0033783783783783786,
                "tf.sparse.transpose(sp_input)": 0.0033783783783783786,
                "tf.sparse.transpose(sp_input, perm)": 0.0033783783783783786,
                "IndexingAxis1Operation": 0.0033783783783783786,
                "IndexingOperation": 0.0033783783783783786,
                "PairCreationOperation": 0.0033783783783783786,
                "SingletonTupleCreationOperation": 0.0033783783783783786,
                "SlicingAxis0BothOperation": 0.0033783783783783786,
                "SlicingAxis0LeftOperation": 0.0033783783783783786,
                "SlicingAxis0RightOperation": 0.0033783783783783786,
                "SlicingAxis1BothOperation": 0.0033783783783783786,
                "SlicingAxis1LeftOperation": 0.0033783783783783786,
                "SlicingAxis1RightOperation": 0.0033783783783783786,
                "TripleCreationOperation": 0.0033783783783783786,
                "PROVIDED_CONSTANT_WEIGHT": 0.0033783783783783786,
                "COMMON_CONSTANT_WEIGHT": 0.13513513513513514,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.0033783783783783786,
                "INPUT_VARIABLE_WEIGHT": 0.13851351351351351,
                "AXIS_CONSTANT_WEIGHT": 0.02364864864864865,
                "SHAPE_CONSTANT_WEIGHT": 0.0033783783783783786,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.0033783783783783786,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.0033783783783783786,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.0033783783783783786,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.0033783783783783786,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.0033783783783783786
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 8,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 3,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 4,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 8,
                "tf.pad(tensor, paddings, mode='REFLECT')": 8,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 6,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side='left')": 8,
                "tf.searchsorted(sorted_sequence, values, side='right')": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 8,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction='DESCENDING')": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 8,
                "PairCreationOperation": 8,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 3,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 3,
                "AXIS_CONSTANT_WEIGHT": 5,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "stackoverflow_50",
        "description": "create a binary matrix where a specified column is set to one",
        "target_program": "tf.cast(tf.one_hot(tf.fill((in1,), in3), in2), tf.int32)",
        "source": "https://stackoverflow.com/questions/58537495/tensorflow-initialize-a-sparse-tensor-with-only-one-line-column-not-zero",
        "constants": "[]",
        "examples": {
            "inputs": "[5]",
            "outputs": "[[0, 0, 0, 1, 0, 0],    [0, 0, 0, 1, 0, 0],    [0, 0, 0, 1, 0, 0],    [0, 0, 0, 1, 0, 0],    [0, 0, 0, 1, 0, 0]]"
        },
        "completions": [
            "return tf.one_hot(in1, depth=6)\n",
            "return tf.concat([tf.zeros([5, 3]), tf.one_hot([3], 6)], axis=1)\n",
            "return tf.one_hot(in1, depth=6)\n",
            "return tf.one_hot(in1, 6)\n",
            "return tf.transpose(tf.one_hot(indices=in1, depth=6))\n",
            "column_idx = 3\nreturn tf.equal(tf.range(6), column_idx)\n",
            "return tf.one_hot(in1, 6)\n",
            "return tf.one_hot(tf.fill([5], 3), 6)\n",
            "return tf.one_hot([3], in1)\n",
            "return tf.one_hot(in1, depth=6)",
            "return tf.eye(6, num_columns=5)[:, 3]\n",
            "return tf.one_hot(in1, depth=6)\n",
            "return tf.one_hot(tf.fill([5], 3), 6)\n",
            "return tf.one_hot(in1, depth=6)\n",
            "return tf.sequence_mask(in1, maxlen=6)\n",
            "return tf.one_hot(in1, depth=6)\n",
            "return tf.one_hot([in1], depth=6)\n",
            "return tf.cast(tf.eye(6)[:, 3], tf.int32)\n",
            "return tf.one_hot(in1, depth=6)",
            "def transform(in1):\n    col_idx = in1\n    num_rows = 5\n    num_cols = 6\n    indices = tf.constant([[i, col_idx] for i in range(num_rows)], dtype=tf.int64)\n    updates = tf.ones((num_rows,), dtype=tf.int32)\n    matrix = tf.scatter_nd(indices, updates, shape=[num_rows, num_cols])\n    return matrix\n"
        ],
        "tf_operators": {
            "tf.one_hot": 15,
            "tf.concat": 1,
            "tf.zeros": 1,
            "tf.transpose": 1,
            "tf.range": 1,
            "tf.equal": 1,
            "tf.fill": 2,
            "tf.eye": 2,
            "tf.sequence_mask": 1,
            "tf.cast": 1,
            "tf.int32": 2,
            "tf.int64": 1,
            "tf.scatter_nd": 1,
            "tf.ones": 1,
            "tf.constant": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 4,
        "total_in_target": 4,
        "parsed_constants": [
            [
                6
            ],
            [
                5,
                3,
                3,
                6,
                1
            ],
            [
                6
            ],
            [
                6
            ],
            [
                6
            ],
            [
                3,
                6
            ],
            [
                6
            ],
            [
                5,
                3,
                6
            ],
            [
                3
            ],
            [
                6
            ],
            [
                6,
                5,
                3
            ],
            [
                6
            ],
            [
                5,
                3,
                6
            ],
            [
                6
            ],
            [
                6
            ],
            [
                6
            ],
            [
                6
            ],
            [
                6,
                3
            ],
            [
                6
            ],
            [
                5,
                6
            ]
        ],
        "all_constants": [
            1,
            3,
            5,
            6
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 4,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 0,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 0,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 3,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 0,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 0,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 3,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 0,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 0,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 1,
                "tf_bool": 0,
                "input_var": 5,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 18,
            "shape": 0,
            "tf_bool": 0,
            "provided": 30,
            "common": 1,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 0,
            "tf_int64": 1,
            "tf_int32": 2
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.0041841004184100415,
                "tf.add(x, y)": 0.0041841004184100415,
                "tf.add_n(inputs)": 0.0041841004184100415,
                "tf.argmax(input, axis)": 0.0041841004184100415,
                "tf.argmin(input, axis)": 0.0041841004184100415,
                "tf.argsort(values, axis, stable=True)": 0.0041841004184100415,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.0041841004184100415,
                "tf.boolean_mask(tensor, mask)": 0.0041841004184100415,
                "tf.broadcast_to(input, shape)": 0.0041841004184100415,
                "tf.cast(x, dtype)": 0.008368200836820083,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.0041841004184100415,
                "tf.concat(values, axis)": 0.008368200836820083,
                "tf.constant(value)": 0.0041841004184100415,
                "tf.constant(value, dtype)": 0.0041841004184100415,
                "tf.divide(x, y)": 0.0041841004184100415,
                "tf.equal(x, y)": 0.008368200836820083,
                "tf.exp(x)": 0.0041841004184100415,
                "tf.expand_dims(input, axis)": 0.0041841004184100415,
                "tf.eye(num_rows)": 0.008368200836820083,
                "tf.eye(num_rows, num_columns)": 0.008368200836820083,
                "tf.eye(num_rows, dtype)": 0.0041841004184100415,
                "tf.fill(dims, value)": 0.012552301255230125,
                "tf.gather(params, indices)": 0.0041841004184100415,
                "tf.gather(params, indices, axis, batch_dims)": 0.0041841004184100415,
                "tf.gather_nd(params, indices)": 0.0041841004184100415,
                "tf.gather_nd(params, indices, batch_dims)": 0.0041841004184100415,
                "tf.greater(x, y)": 0.0041841004184100415,
                "tf.greater_equal(x, y)": 0.0041841004184100415,
                "tf.math.bincount(arr)": 0.0041841004184100415,
                "tf.math.ceil(x)": 0.0041841004184100415,
                "tf.math.count_nonzero(input)": 0.0041841004184100415,
                "tf.math.count_nonzero(input, axis)": 0.0041841004184100415,
                "tf.math.cumsum(x, axis)": 0.0041841004184100415,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.0041841004184100415,
                "tf.math.divide_no_nan(x, y)": 0.0041841004184100415,
                "tf.math.floor(x)": 0.0041841004184100415,
                "tf.math.log(x)": 0.0041841004184100415,
                "tf.math.logical_and(x, y)": 0.0041841004184100415,
                "tf.math.logical_not(x)": 0.0041841004184100415,
                "tf.math.logical_or(x, y)": 0.0041841004184100415,
                "tf.math.logical_xor(x, y)": 0.0041841004184100415,
                "tf.math.negative(x)": 0.0041841004184100415,
                "tf.math.reciprocal(x)": 0.0041841004184100415,
                "tf.math.reciprocal_no_nan(x)": 0.0041841004184100415,
                "tf.math.segment_max(data, segment_ids)": 0.0041841004184100415,
                "tf.math.segment_mean(data, segment_ids)": 0.0041841004184100415,
                "tf.math.segment_min(data, segment_ids)": 0.0041841004184100415,
                "tf.math.segment_prod(data, segment_ids)": 0.0041841004184100415,
                "tf.math.segment_sum(data, segment_ids)": 0.0041841004184100415,
                "tf.math.squared_difference(x, y)": 0.0041841004184100415,
                "tf.math.top_k(input, k)": 0.0041841004184100415,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.0041841004184100415,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.0041841004184100415,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.0041841004184100415,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.0041841004184100415,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.0041841004184100415,
                "tf.matmul(a, b)": 0.0041841004184100415,
                "tf.maximum(x, y)": 0.0041841004184100415,
                "tf.minimum(x, y)": 0.0041841004184100415,
                "tf.multiply(x, y)": 0.0041841004184100415,
                "tf.not_equal(x, y)": 0.0041841004184100415,
                "tf.one_hot(indices, depth)": 0.06694560669456066,
                "tf.ones(shape)": 0.008368200836820083,
                "tf.ones_like(input)": 0.0041841004184100415,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.0041841004184100415,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.0041841004184100415,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.0041841004184100415,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.0041841004184100415,
                "tf.range(start)": 0.008368200836820083,
                "tf.range(start, limit, delta)": 0.0041841004184100415,
                "tf.reduce_any(input_tensor, axis)": 0.0041841004184100415,
                "tf.reduce_all(input_tensor, axis)": 0.0041841004184100415,
                "tf.reduce_max(input_tensor)": 0.0041841004184100415,
                "tf.reduce_max(input_tensor, axis)": 0.0041841004184100415,
                "tf.reduce_mean(input_tensor)": 0.0041841004184100415,
                "tf.reduce_mean(input_tensor, axis)": 0.0041841004184100415,
                "tf.reduce_min(input_tensor)": 0.0041841004184100415,
                "tf.reduce_min(input_tensor, axis)": 0.0041841004184100415,
                "tf.reduce_prod(input_tensor, axis)": 0.0041841004184100415,
                "tf.reduce_sum(input_tensor)": 0.0041841004184100415,
                "tf.reduce_sum(input_tensor, axis)": 0.0041841004184100415,
                "tf.repeat(input, repeats)": 0.0041841004184100415,
                "tf.repeat(input, repeats, axis)": 0.0041841004184100415,
                "tf.reshape(tensor, shape)": 0.0041841004184100415,
                "tf.reverse(tensor, axis)": 0.0041841004184100415,
                "tf.roll(input, shift, axis)": 0.0041841004184100415,
                "tf.round(x)": 0.0041841004184100415,
                "tf.scatter_nd(indices, updates, shape)": 0.008368200836820083,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.0041841004184100415,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.0041841004184100415,
                "tf.sequence_mask(lengths)": 0.0041841004184100415,
                "tf.sequence_mask(lengths, maxlen)": 0.0041841004184100415,
                "tf.shape(input)": 0.0041841004184100415,
                "tf.sign(x)": 0.0041841004184100415,
                "tf.sort(values, axis)": 0.0041841004184100415,
                "tf.sort(values, axis, direction='DESCENDING')": 0.0041841004184100415,
                "tf.sqrt(x)": 0.0041841004184100415,
                "tf.square(x)": 0.0041841004184100415,
                "tf.squeeze(input)": 0.0041841004184100415,
                "tf.squeeze(input, axis)": 0.0041841004184100415,
                "tf.stack(values, axis)": 0.0041841004184100415,
                "tf.subtract(x, y)": 0.0041841004184100415,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.0041841004184100415,
                "tf.tensordot(a, b, axes)": 0.0041841004184100415,
                "tf.tile(input, multiples)": 0.0041841004184100415,
                "tf.transpose(a)": 0.008368200836820083,
                "tf.transpose(a, perm)": 0.0041841004184100415,
                "tf.unique_with_counts(x)": 0.0041841004184100415,
                "tf.unstack(value, axis)": 0.0041841004184100415,
                "tf.where(condition)": 0.0041841004184100415,
                "tf.where(condition, x, y)": 0.0041841004184100415,
                "tf.zeros(shape)": 0.008368200836820083,
                "tf.zeros_like(input)": 0.0041841004184100415,
                "tf.SparseTensor(indices, values, dense_shape)": 0.0041841004184100415,
                "tf.sparse.add(a, b)": 0.0041841004184100415,
                "tf.sparse.concat(axis, sp_inputs)": 0.0041841004184100415,
                "tf.sparse.expand_dims(sp_input, axis)": 0.0041841004184100415,
                "tf.sparse.from_dense(tensor)": 0.0041841004184100415,
                "tf.sparse.maximum(sp_a, sp_b)": 0.0041841004184100415,
                "tf.sparse.minimum(sp_a, sp_b)": 0.0041841004184100415,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.0041841004184100415,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.0041841004184100415,
                "tf.sparse.reset_shape(sp_input)": 0.0041841004184100415,
                "tf.sparse.reshape(sp_input, shape)": 0.0041841004184100415,
                "tf.sparse.retain(sp_input, to_retain)": 0.0041841004184100415,
                "tf.sparse.slice(sp_input, start, size)": 0.0041841004184100415,
                "tf.sparse.split(sp_input, num_split, axis)": 0.0041841004184100415,
                "tf.sparse.to_dense(sp_input)": 0.0041841004184100415,
                "tf.sparse.to_dense(sp_input, default_value)": 0.0041841004184100415,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.0041841004184100415,
                "tf.sparse.transpose(sp_input)": 0.0041841004184100415,
                "tf.sparse.transpose(sp_input, perm)": 0.0041841004184100415,
                "IndexingAxis1Operation": 0.012552301255230125,
                "IndexingOperation": 0.0041841004184100415,
                "PairCreationOperation": 0.012552301255230125,
                "SingletonTupleCreationOperation": 0.008368200836820083,
                "SlicingAxis0BothOperation": 0.0041841004184100415,
                "SlicingAxis0LeftOperation": 0.0041841004184100415,
                "SlicingAxis0RightOperation": 0.0041841004184100415,
                "SlicingAxis1BothOperation": 0.0041841004184100415,
                "SlicingAxis1LeftOperation": 0.0041841004184100415,
                "SlicingAxis1RightOperation": 0.0041841004184100415,
                "TripleCreationOperation": 0.0041841004184100415,
                "PROVIDED_CONSTANT_WEIGHT": 0.1297071129707113,
                "COMMON_CONSTANT_WEIGHT": 0.008368200836820083,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.0041841004184100415,
                "INPUT_VARIABLE_WEIGHT": 0.0794979079497908,
                "AXIS_CONSTANT_WEIGHT": 0.0041841004184100415,
                "SHAPE_CONSTANT_WEIGHT": 0.0041841004184100415,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.0041841004184100415,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.012552301255230125,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.0041841004184100415,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.0041841004184100415,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.008368200836820083
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 7,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 7,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 7,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 8,
                "tf.eye(num_rows)": 7,
                "tf.eye(num_rows, num_columns)": 7,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 6,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 4,
                "tf.ones(shape)": 7,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 8,
                "tf.pad(tensor, paddings, mode='REFLECT')": 8,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 8,
                "tf.range(start)": 7,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 7,
                "tf.searchsorted(sorted_sequence, values, side='left')": 8,
                "tf.searchsorted(sorted_sequence, values, side='right')": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 8,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction='DESCENDING')": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 7,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 7,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 6,
                "IndexingOperation": 8,
                "PairCreationOperation": 6,
                "SingletonTupleCreationOperation": 7,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 3,
                "COMMON_CONSTANT_WEIGHT": 7,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 4,
                "AXIS_CONSTANT_WEIGHT": 8,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 6,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 7
            }
        }
    }
]