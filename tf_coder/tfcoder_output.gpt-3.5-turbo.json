[
    {
        "name": "google_01",
        "description": "Convert index tensor into pairs for SparseTensor indexing",
        "target_program": "tf.cast(tf.where(tf.sequence_mask(tf.math.bincount(in1))), tf.int32)",
        "source": "From an internal Google chat room, 09/07/2018",
        "constants": "[]",
        "examples": {
            "inputs": "[[0, 0, 0, 1, 3, 3],]",
            "outputs": "[[0, 0], [0, 1], [0, 2], [1, 0], [3, 0], [3, 1]]"
        },
        "completions": [
            "```python\ndef transform(in1):\n    indices = tf.expand_dims(tf.range(tf.size(in1)), axis=1)\n    updates = tf.expand_dims(in1, axis=1)\n    return tf.concat([indices, updates], axis=1)\n```",
            "```python\ndef transform(in1):\n    indices = tf.expand_dims(tf.range(tf.size(in1), dtype=tf.int64), axis=1)\n    values = tf.cast(tf.expand_dims(in1, axis=1), tf.int64)\n    return tf.concat([indices, values], axis=1)\n```",
            "```python\ndef transform(in1):\n    indices = tf.expand_dims(tf.range(tf.size(in1), dtype=tf.int64), axis=1)\n    arr = tf.concat([tf.reshape(in1, (-1, 1)), indices], axis=1)\n    return arr\n```",
            "```python\ndef transform(in1):\n    indices = tf.expand_dims(in1, axis=1)\n    row_indices = tf.tile(tf.range(tf.shape(indices)[0])[:, tf.newaxis], [1, tf.shape(indices)[1]])\n    return tf.stack([row_indices, indices], axis=2)\n```",
            "```python\ndef transform(in1):\n    indices = tf.stack([tf.range(tf.size(in1)), in1], axis=1)\n    return indices\n```",
            "```python\ndef transform(in1):\n    pairs = tf.stack([in1, tf.range(tf.size(in1))], axis=1)\n    return pairs\n```",
            "```python\ndef transform(in1):\n    indices = tf.expand_dims(tf.range(tf.shape(in1)[0]), 1)\n    in1 = tf.expand_dims(in1, 1)\n    out = tf.concat([indices, in1], axis=1)\n    return out\n```",
            "```python\ndef transform(in1):\n    idx = tf.argsort(in1)\n    idx_pairs = tf.stack([tf.range(tf.shape(idx)[0]), idx], axis=1)\n    return idx_pairs\n```",
            "```python\ndef transform(in1):\n    indices = tf.expand_dims(tf.range(tf.size(in1)), axis=1)\n    indices = tf.concat([tf.zeros_like(indices), tf.reshape(in1, (-1, 1))], axis=1)\n    return indices\n```",
            "```python\ndef transform(in1):\n    indices = tf.expand_dims(tf.range(tf.shape(in1)[0]), axis=1)\n    indices = tf.concat([tf.reshape(in1, (-1, 1)), indices], axis=1)\n    return indices\n```",
            "```python\ndef transform(in1):\n    indices = tf.expand_dims(in1, axis=1)\n    row_indices = tf.repeat(tf.range(tf.shape(in1)[0]), repeats=2)\n    output = tf.stack([row_indices, tf.squeeze(indices)], axis=1)\n    return output\n```",
            "```python\ndef transform(in1):\n    return tf.stack([in1, tf.range(tf.size(in1))], axis=1)\n```",
            "```python\ndef transform(in1):\n    indices = tf.expand_dims(tf.range(tf.size(in1)), axis=1)\n    indices = tf.tile(indices, [1, 2])\n    pairs = tf.stack([in1, tf.argmax(indices, axis=1)], axis=1)\n    return pairs\n```",
            "```python\ndef transform(input_tensor):\n    indices = tf.expand_dims(input_tensor, axis=1)\n    values = tf.zeros_like(indices)\n    return tf.concat([indices, values], axis=1)\n```",
            "```python\ndef transform(in1):\n    indices = tf.expand_dims(in1, axis=1)\n    indices = tf.concat([indices, tf.range(tf.shape(in1)[0], dtype=tf.int64)], axis=1)\n    return indices\n```",
            "```python\ndef transform(in1):\n    indices = tf.expand_dims(in1, axis=1)\n    indices = tf.repeat(indices, 2, axis=1)\n    values = tf.range(tf.reduce_max(indices) + 1)\n    output = tf.gather(values, indices)\n    return output\n```",
            "```python\ndef transform(in1):\n    indices = tf.where(tf.not_equal(in1, 0))\n    return tf.cast(indices, tf.int32)\n```",
            "```python\ndef transform(in1):\n    pairs = tf.transpose(tf.stack([in1, tf.range(tf.size(in1))]))\n    return pairs\n```",
            "```python\ndef transform(in1):\n    return tf.transpose(tf.stack([in1, tf.range(tf.size(in1))]))\n```",
            "```python\ndef transform(in1):\n    indices = tf.cast(in1, tf.int64)\n    row_indices = tf.range(tf.shape(indices)[0])\n    indices_pairs = tf.stack([row_indices, indices], axis=1)\n    return indices_pairs\n```"
        ],
        "tf_operators": {
            "tf.size": 10,
            "tf.expand_dims": 12,
            "tf.range": 18,
            "tf.concat": 8,
            "tf.cast": 3,
            "tf.int64": 4,
            "tf.reshape": 3,
            "tf.tile": 2,
            "tf.shape": 7,
            "tf.stack": 10,
            "tf.newaxis": 1,
            "tf.argsort": 1,
            "tf.zeros_like": 2,
            "tf.repeat": 2,
            "tf.squeeze": 1,
            "tf.argmax": 1,
            "tf.gather": 1,
            "tf.reduce_max": 1,
            "tf.not_equal": 1,
            "tf.int32": 1,
            "tf.where": 1,
            "tf.transpose": 2
        },
        "coverage_percentage": 60.0,
        "total_covered": 3,
        "total_in_target": 5,
        "parsed_constants": [
            [
                1,
                1,
                1
            ],
            [
                1,
                1,
                1
            ],
            [
                1,
                -1,
                1,
                1
            ],
            [
                1,
                0,
                1,
                1,
                2
            ],
            [
                1
            ],
            [
                1
            ],
            [
                0,
                1,
                1,
                1
            ],
            [
                0,
                1
            ],
            [
                1,
                -1,
                1,
                1
            ],
            [
                0,
                1,
                -1,
                1,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1
            ],
            [
                1,
                1,
                2,
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                2,
                1,
                1
            ],
            [
                0
            ],
            [],
            [],
            [
                0,
                1
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            -1
        ],
        "constant_counts": [
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 2,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 1,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 5,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 1,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 1,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 1,
            "tf_bool": 0,
            "axis": 0,
            "tf_float32": 0,
            "input_var": 85,
            "tf_int64": 5,
            "provided": 4,
            "shape": 0,
            "shape_tuple": 0,
            "common": 47
        }
    },
    {
        "name": "google_03",
        "description": "Slice the first dimension of a SparseTensor",
        "target_program": "tf.divide(in1, tf.expand_dims(tf.reduce_sum(in1, axis=1), 1))",
        "source": "Real task encountered by Googler, 11/01/2018",
        "constants": "[]",
        "examples": {
            "inputs": "tf.SparseTensor(indices=[[0, 0, 0], [0, 1, 1], [1, 1, 1], [1, 1, 2]], values=[1., 1., 1., 1.], dense_shape=[2, 2, 800])",
            "outputs": "tf.SparseTensor(indices=[[0, 0, 0], [0, 1, 1]], values=[1., 1.], dense_shape=[1, 2, 800])"
        },
        "completions": [
            "```python\n     result = tf.sparse.slice(in1, start=[0, 0, 0], size=[1, -1, -1])\n     return result\n```",
            "```python\noutput = tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])\nreturn output\n```",
            "```python\nresult = tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])\nreturn result\n```",
            "```python\n    result = tf.sparse.slice(in1, [0, 0, 0], [1, -1, -1])\n    return result\n```",
            "```python\noutput_indices = tf.sparse.slice(in1.indices, [0, 0], [2, -1])\noutput_values = tf.sparse.slice(in1.values, [0], [2])\noutput_dense_shape = tf.sparse.slice(in1.dense_shape, [0], [1, -1])\noutput = tf.SparseTensor(indices=output_indices, values=output_values, dense_shape=output_dense_shape)\nreturn output\n```",
            "```python\noutput_indices = tf.sparse.slice(in1, [0, 0, 0], [2, -1, -1]).indices\noutput_values = tf.sparse.slice(in1, [0, 0, 0], [2, -1, -1]).values\noutput_dense_shape = tf.concat([[1], in1.dense_shape[1:]], axis=0)\noutput = tf.SparseTensor(indices=output_indices, values=output_values, dense_shape=output_dense_shape)\nreturn output\n```",
            "```python\n     output_indices = tf.sparse.slice(in1.indices, [0, 0, 0], [2, -1, -1])\n     output_values = tf.sparse.slice(in1.values, [0], [2])\n     output_dense_shape = tf.concat([[1], in1.dense_shape[1:]], axis=0)\n     output = tf.SparseTensor(indices=output_indices, values=output_values, dense_shape=output_dense_shape)\n     return output\n```",
            "```python\n    sp_input = in1\n    indices = sp_input.indices\n    values = sp_input.values\n    dense_shape = sp_input.dense_shape\n    \n    sliced_indices = tf.sparse.slice(indices, start=[0, 0, 0], size=[2, -1, -1])\n    sliced_values = tf.sparse.slice(values, start=[0], size=[2])\n    sliced_dense_shape = tf.constant([1, dense_shape[1].numpy(), dense_shape[2].numpy()], dtype=tf.int64)\n    \n    return tf.SparseTensor(indices=sliced_indices, values=sliced_values, dense_shape=sliced_dense_shape)\n```",
            "```python\noutput = tf.sparse.slice(in1, start=[0, 0, 0], size=[1, -1, -1])\nreturn output\n```",
            "```python\n    result = tf.sparse.slice(in1, [0, 0, 0], [1, -1, -1])\n    return result\n```",
            "```python\n    output_indices = in1.indices[in1.indices[:, 0] < 1]\n    output_values = in1.values[in1.indices[:, 0] < 1]\n    output_shape = tf.concat([[1], tf.slice(in1.dense_shape, [1], [-1])], axis=0)\n    return tf.SparseTensor(indices=output_indices, values=output_values, dense_shape=output_shape)\n```",
            "```python\noutput_indices = tf.sparse.slice(in1.indices, [0, 0, 0], [2, -1, -1])\noutput_values = tf.sparse.slice(in1.values, [0], [2])\noutput_dense_shape = tf.sparse.slice(in1.dense_shape, [0], [1])\n\nreturn tf.SparseTensor(indices=output_indices, values=output_values, dense_shape=output_dense_shape)\n```",
            "```python\nreturn tf.sparse.slice(in1, [0, 0, 0], [1, -1, -1])\n```",
            "```python\n    return tf.sparse.slice(in1, [0, 0, 0], [1, -1, -1])\n```",
            "```python\nresult = tf.sparse.slice(in1, start=[0, 0, 0], size=[1, -1, -1])\nreturn result\n```",
            "```python\nout_indices = in1.indices[in1.indices[:, 0] == 0]\nout_values = tf.gather(in1.values, tf.where(in1.indices[:, 0] == 0)[:, 0])\nout_dense_shape = tf.concat([[1], in1.dense_shape[1:]], axis=0)\nreturn tf.SparseTensor(indices=out_indices, values=out_values, dense_shape=out_dense_shape)\n```",
            "```python\noutput_indices = in1.indices[in1.indices[:, 0] == 0]\noutput_values = tf.boolean_mask(in1.values, tf.equal(in1.indices[:, 0], 0))\noutput_dense_shape = tf.concat([[1], in1.dense_shape[1:]], 0)\nresult = tf.SparseTensor(indices=output_indices, values=output_values, dense_shape=output_dense_shape)\nreturn result\n```",
            "```python\n    result = tf.sparse.slice(in1, [0, 0, 0], [1, -1, -1])\n    return result\n```",
            "```python\n    sp_input = in1\n    start = tf.constant([0, 0, 0], dtype=tf.int64)\n    size = tf.constant([1, tf.shape(sp_input.indices)[1]], dtype=tf.int64)\n    sp_output = tf.sparse.slice(sp_input, start, size)\n    return sp_output\n```",
            "```python\n    out_indices = tf.sparse.slice(in1.indices, [0, 0, 0], [2, -1, -1])\n    out_values = tf.slice(in1.values, [0], [2])\n    out_shape = tf.slice(in1.dense_shape, [0], [2])\n    return tf.SparseTensor(indices=out_indices, values=out_values, dense_shape=out_shape)\n```"
        ],
        "tf_operators": {
            "tf.sparse.slice": 17,
            "tf.SparseTensor": 9,
            "tf.concat": 5,
            "tf.int64": 2,
            "tf.constant": 2,
            "tf.slice": 2,
            "tf.where": 1,
            "tf.gather": 1,
            "tf.boolean_mask": 1,
            "tf.equal": 1,
            "tf.shape": 1
        },
        "coverage_percentage": 0.0,
        "total_covered": 0,
        "total_in_target": 3,
        "parsed_constants": [
            [
                0,
                0,
                0,
                1,
                -1,
                -1
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                -1,
                -1
            ],
            [
                0,
                0,
                2,
                -1,
                0,
                2,
                0,
                1,
                -1
            ],
            [
                0,
                0,
                0,
                2,
                -1,
                -1,
                0,
                0,
                0,
                2,
                -1,
                -1,
                1,
                1,
                0
            ],
            [
                0,
                0,
                0,
                2,
                -1,
                -1,
                0,
                2,
                1,
                1,
                0
            ],
            [
                0,
                0,
                0,
                2,
                -1,
                -1,
                0,
                2,
                1,
                1,
                2
            ],
            [
                0,
                0,
                0,
                1,
                -1,
                -1
            ],
            [
                0,
                0,
                0,
                1,
                -1,
                -1
            ],
            [
                0,
                1,
                0,
                1,
                1,
                1,
                -1,
                0
            ],
            [
                0,
                0,
                0,
                2,
                -1,
                -1,
                0,
                2,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1,
                -1,
                -1
            ],
            [
                0,
                0,
                0,
                1,
                -1,
                -1
            ],
            [
                0,
                0,
                0,
                1,
                -1,
                -1
            ],
            [
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0
            ],
            [
                0,
                0,
                0,
                0,
                1,
                1,
                0
            ],
            [
                0,
                0,
                0,
                1,
                -1,
                -1
            ],
            [
                0,
                0,
                0,
                1,
                1
            ],
            [
                0,
                0,
                0,
                2,
                -1,
                -1,
                0,
                2,
                0,
                2
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            800,
            -1
        ],
        "constant_counts": [
            {
                "common": 6,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 6,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 7,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 0,
                "shape_tuple": 0
            },
            {
                "common": 13,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 9,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 0,
                "shape_tuple": 0
            },
            {
                "common": 8,
                "axis": 3,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 1,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 6,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 6,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 6,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 0,
                "shape_tuple": 0
            },
            {
                "common": 8,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 0,
                "shape_tuple": 0
            },
            {
                "common": 6,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 6,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 6,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 0,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 0,
                "shape_tuple": 0
            },
            {
                "common": 6,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 2,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 7,
                "axis": 3,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 0,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 0,
            "tf_bool": 0,
            "axis": 16,
            "tf_float32": 0,
            "input_var": 16,
            "tf_int64": 3,
            "provided": 0,
            "shape": 2,
            "shape_tuple": 0,
            "common": 129
        }
    },
    {
        "name": "google_04",
        "description": "Reshape a flat array into a rank 3 tensor",
        "target_program": "tf.reshape(in1, shape=(4, 3, 2))",
        "source": "Real task encountered by Googler, 3/21/2019",
        "constants": "[]",
        "examples": {
            "inputs": "[[111, 112, 121, 122, 131, 132, 211, 212, 221, 222, 231, 232, 311, 312, 321, 322, 331, 332, 411, 412, 421, 422, 431, 432],]",
            "outputs": "[[[111, 112], [121, 122], [131, 132]],    [[211, 212], [221, 222], [231, 232]],    [[311, 312], [321, 322], [331, 332]],    [[411, 412], [421, 422], [431, 432]]]"
        },
        "completions": [
            "```python\ndef transform(in1):\n    return tf.reshape(in1, (4, 3, 2))\n```",
            "```python\n    return tf.reshape(in1, (4, 3, 2))\n```",
            "```python\ndef transform(in1):\n    return tf.reshape(in1, (4, 3, 2))\n```",
            "```python\ndef transform(in1):\n    return tf.reshape(in1, (4, 3, 2))\n```",
            "```python\ndef transform(in1):\n    return tf.reshape(in1, (4, 3, 2))\n```",
            "```python\ndef transform(in1):\n    return tf.reshape(in1, (4, 3, 2))\n```",
            "```python\ndef transform(in1):\n    return tf.reshape(in1, (4, 3, 2))\n```",
            "```python\ndef transform(in1):\n    return tf.reshape(in1, (4, 3, 2))\n```",
            "```python\ndef transform(in1):\n    return tf.reshape(in1, (4, 3, 2))\n```",
            "```python\ndef transform(in1):\n    return tf.reshape(in1, (4, 3, 2))\n```",
            "```python\ndef transform(in1):\n    return tf.reshape(in1, (4, 3, 2))\n```",
            "```python\ndef transform(in1):\n    return tf.reshape(in1, (4, 3, 2))\n```",
            "```python\ndef transform(in1):\n    return tf.reshape(in1, (4, 3, 2))\n```",
            "```python\ndef transform(in1):\n    return tf.reshape(in1, (4, 3, 2))\n```",
            "```python\ndef transform(in1):\n    return tf.reshape(in1, (4, 3, 2))\n```",
            "```python\ndef transform(in1):\n    return tf.reshape(in1, (4, 3, 2))\n```",
            "```python\ndef transform(in1):\n    return tf.reshape(in1, (4, 3, 2))\n```",
            "```python\ndef transform(in1):\n    return tf.reshape(in1, (4, 3, 2))\n```",
            "```python\ndef transform(in1):\n    return tf.reshape(in1, (4, 3, 2))\n```",
            "```python\ndef transform(in1):\n    return tf.reshape(in1, (4, 3, 2))\n```"
        ],
        "tf_operators": {
            "tf.reshape": 20
        },
        "coverage_percentage": 100.0,
        "total_covered": 1,
        "total_in_target": 1,
        "parsed_constants": [
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ]
        ],
        "all_constants": [
            2,
            3,
            4
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 0,
            "tf_bool": 0,
            "axis": 0,
            "tf_float32": 0,
            "input_var": 20,
            "tf_int64": 0,
            "provided": 0,
            "shape": 0,
            "shape_tuple": 20,
            "common": 0
        }
    },
    {
        "name": "google_05",
        "description": "Repeat each input entry 6 times",
        "target_program": "tf.tile(tf.expand_dims(in1, 1), (1, 6, 1))",
        "source": "Real task encountered by Googler, 3/22/2019",
        "constants": "[6]",
        "examples": {
            "inputs": "[[[1, 2, 3, 4], [5, 6, 7, 8]],]",
            "outputs": "[[[1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4],     [1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4]],    [[5, 6, 7, 8], [5, 6, 7, 8], [5, 6, 7, 8],     [5, 6, 7, 8], [5, 6, 7, 8], [5, 6, 7, 8]]]"
        },
        "completions": [
            "```python\nreturn tf.repeat(in1, 6, axis=1)\n```",
            "```python\nreturn tf.repeat(in1, repeats=6, axis=1)\n```",
            "```python\n    out1 = tf.tile(tf.expand_dims(in1, axis=-1), [1, 1, 6])\n```",
            "```python\n    return tf.repeat(input=in1, repeats=6, axis=1)\n```",
            "```python\nreturn tf.repeat(in1, repeats=6)\n```",
            "```python\n    return tf.tile(in1, [1, 6])\n```",
            "```python\nreturn tf.repeat(in1, repeats=6, axis=1)\n```",
            "```python\n    result = tf.tile(tf.expand_dims(in1, axis=2), multiples=[1, 1, 6])\n    return result\n```",
            "```python\n    out = tf.repeat(in1, repeats=6, axis=1)\n    return out\n```",
            "```python\n    return tf.repeat(in1, 6, axis=1)\n```",
            "```python\n    out = tf.repeat(in1, repeats=6)\n    return out\n```",
            "```python\noutput = tf.repeat(in1, repeats=6, axis=1)\nreturn output\n```",
            "```python\n    return tf.repeat(in1, 6, axis=1)\n```",
            "```python\n    return tf.repeat(in1, 6, axis=1)\n```",
            "```python\n    return tf.repeat(in1, repeats=6, axis=1)\n```",
            "```python\ndef transform(in1):\n    return tf.repeat(in1, repeats=6)\n```",
            "```python\n    return tf.repeat(in1, repeats=6)\n```",
            "```python\n    out1 = tf.repeat(in1, repeats=6, axis=0)\n    return out1\n```",
            "```python\n    return tf.repeat(in1, repeats=6, axis=1)\n```",
            "```python\n    out1 = tf.repeat(in1, repeats=6, axis=1)\n    return out1\n```"
        ],
        "tf_operators": {
            "tf.repeat": 17,
            "tf.tile": 3,
            "tf.expand_dims": 2
        },
        "coverage_percentage": 100.0,
        "total_covered": 2,
        "total_in_target": 2,
        "parsed_constants": [
            [
                6,
                1
            ],
            [
                6,
                1
            ],
            [
                -1,
                1,
                1,
                6
            ],
            [
                6,
                1
            ],
            [
                6
            ],
            [
                1,
                6
            ],
            [
                6,
                1
            ],
            [
                2,
                1,
                1,
                6
            ],
            [
                6,
                1
            ],
            [
                6,
                1
            ],
            [
                6
            ],
            [
                6,
                1
            ],
            [
                6,
                1
            ],
            [
                6,
                1
            ],
            [
                6,
                1
            ],
            [
                6
            ],
            [
                6
            ],
            [
                6,
                0
            ],
            [
                6,
                1
            ],
            [
                6,
                1
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            6,
            -1
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 0,
            "tf_bool": 0,
            "axis": 1,
            "tf_float32": 0,
            "input_var": 20,
            "tf_int64": 0,
            "provided": 20,
            "shape": 0,
            "shape_tuple": 0,
            "common": 19
        }
    },
    {
        "name": "google_06",
        "description": "Take the max from each group of elements",
        "target_program": "tf.math.segment_max(in2, in1)",
        "source": "Real task encountered by Googler, 3/28/2019",
        "constants": "[]",
        "examples": {
            "inputs": "[[0, 1, 1, 2, 3, 3, 3, 3],[1, 3, 4, 5, 10, 8, 9, 4],]",
            "outputs": "[1, 4, 5, 10]"
        },
        "completions": [
            "```python\ndef transform(in1, in2):\n    unique_vals, idx = tf.unique(in1)\n    return tf.math.segment_max(in2, idx)\n```",
            "```python\ndef transform(in1, in2):\n    unique_elements, idx = tf.unique(in1)\n    max_values = tf.math.segment_max(in2, idx)\n    return max_values\n```",
            "```python\ndef transform(in1, in2):\n    output = tf.math.segment_max(in2, in1)\n    return output\n```",
            "```python\ndef transform(in1, in2):\n    segments = tf.math.segment_max(in2, in1)\n    return segments\n```",
            "```python\ndef transform(in1, in2):\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\ndef transform(in1, in2):\n    unique_values, unique_idx = tf.unique(in1)\n    max_values = tf.math.segment_max(in2, unique_idx)\n    return max_values\n```",
            "```python\ndef transform(in1, in2):\n    indices = tf.argsort(in1)\n    unique_values, _ = tf.unique_with_counts(in1)\n    max_values = tf.math.segment_max(in2, segment_ids=indices)\n    return max_values\n```
            "```python\ndef transform(in1, in2):\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\ndef transform(in1, in2):\n    result = tf.math.segment_max(in2, in1)\n    return result\n```",
            "```python\ndef transform(in1, in2):\n    unique_values, idx = tf.unique(in1)\n    max_values = tf.math.segment_max(in2, idx)\n    return max_values\n```",
            "```python\ndef transform(in1, in2):\n    grouped_max = tf.math.segment_max(data=in2, segment_ids=in1)\n    return grouped_max\n```",
            "```python\ndef transform(in1, in2):\n    unique_values, unique_idx = tf.unique(in1)\n    max_values = tf.math.segment_max(in2, unique_idx)\n    return max_values\n```",
            "```python\ndef transform(in1, in2):\n    unique_values, idx = tf.unique_with_counts(in1)\n    result = tf.math.segment_max(in2, idx)\n    return result\n```",
            "```python\ndef transform(in1, in2):\n    unique_values, idx = tf.unique(in1)\n    max_values = tf.math.segment_max(in2, idx)\n    return max_values\n```",
            "```python\ndef transform(in1, in2):\n    max_values, _ = tf.math.segment_max(in2, in1)\n    return max_values\n```",
            "```python\ndef transform(in1, in2):\n    segments = tf.unique(in1).y\n    max_values = tf.math.segment_max(in2, segments)\n    return max_values\n```",
            "```python\ndef transform(in1, in2):\n    import tensorflow as tf\n    input_tensor = tf.stack([in1, in2], axis=1)\n    max_values = tf.reduce_max(input_tensor, axis=0)\n    return max_values\n```",
            "```python\ndef transform(in1, in2):\n    max_values = tf.math.segment_max(in2, segment_ids=in1)\n    return max_values\n```",
            "```python\ndef transform(in1, in2):\n    max_group = tf.math.segment_max(in2, in1)\n    return max_group\n```",
            "```python\ndef transform(in1, in2):\n    unique_values, _ = tf.unique(in1)\n    max_values = tf.math.segment_max(in2, tf.dtypes.cast(tf.argsort(in1), tf.int32))\n    return max_values\n```"
        ],
        "tf_operators": {
            "tf.math.segment_max": 19,
            "tf.unique": 8,
            "tf.unique_with_counts": 2,
            "tf.argsort": 2,
            "tf.reduce_max": 1,
            "tf.stack": 1,
            "tf.int32": 1,
            "tf.dtypes.cast": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 1,
        "total_in_target": 1,
        "parsed_constants": [
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [
                1,
                0
            ],
            [],
            [],
            []
        ],
        "all_constants": [
            0,
            1
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 5,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 1,
            "tf_bool": 0,
            "axis": 0,
            "tf_float32": 0,
            "input_var": 46,
            "tf_int64": 0,
            "provided": 0,
            "shape": 0,
            "shape_tuple": 0,
            "common": 2
        }
    },
    {
        "name": "google_07",
        "description": "Take the argmax of each group of elements",
        "target_program": "tf.cast(tf.argmax((tf.sequence_mask(tf.cumsum(tf.math.bincount(in1)), dtype=tf.int32) - tf.sequence_mask(tf.cumsum(tf.math.bincount(in1), exclusive=True), dtype=tf.int32, maxlen=in1.shape[0])) * in2, axis=1), tf.int32) - tf.cumsum(tf.math.bincount(in1), exclusive=True)",
        "source": "Real task encountered by Googler, 3/29/2019",
        "constants": "[]",
        "examples": {
            "inputs": "[[0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 4, 4, 5, 5],[4, 1, 8, 2, 5, 7, 9, 3, 7, 3, 1, 42, 1, 2, 4, 0],]",
            "outputs": "[2, 3, 1, 0, 1, 0]"
        },
        "completions": [
            "```python\ndef transform(in1, in2):\n    unique_segments, _ = tf.unique(in1)\n    max_values = tf.math.segment_max(in2, in1)\n    return tf.argmax(max_values, axis=1)\n```",
            "```python\ndef transform(in1, in2):\n    unique_segments, _ = tf.unique(in1)\n    argmax_values = tf.gather(tf.math.argmax(in2, axis=0), unique_segments)\n    return argmax_values\n```",
            "```python\ndef transform(in1, in2):\n    unique_values, unique_idx, _ = tf.unique_with_counts(in1)\n    group_max_values = tf.gather(in2, tf.math.unsorted_segment_max(in2, unique_idx, tf.size(unique_values)))\n    return group_max_values\n```",
            "```python\ndef transform(in1, in2):\n    unique_groups, _ = tf.unique(in1)\n    result = tf.argmax(in2, axis=0)\n    return tf.gather(result, unique_groups)\n```",
            "```python\n    sorted_indices = tf.argsort(in1)\n    sorted_values = tf.gather(in2, sorted_indices)\n    unique_indices, _ = tf.unique(sorted_indices)\n    max_values = tf.gather(sorted_values, tf.argmax(sorted_values, axis=-1))\n    result = tf.gather(max_values, unique_indices)\n    return result\n```",
            "def transform(in1, in2):\n    unique_values, unique_indices = tf.unique(in1)\n    return tf.math.argmax(tf.gather(in2, unique_indices))",
            "```python\n    max_indices = tf.math.segment_max(in2, in1)\n    return max_indices\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\nreturn tf.math.segment_max(in2, in1)\n```",
            "```python\ndef transform(in1, in2):\n    unique_elements, _ = tf.unique(in1)\n    max_indices = tf.gather(tf.argmax(in2, axis=0), unique_elements)\n    return max_indices\n```",
            "```python\ndef transform(in1, in2):\n    segment_ids = tf.cast(in1, tf.int32)\n    data = in2\n    seg_max = tf.math.segment_max(data, segment_ids)\n    return tf.argmax(seg_max, axis=0)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\ndef transform(in1, in2):\n    unique_values, unique_idx = tf.unique(in1)\n    return tf.math.segment_max(in2, unique_idx)\n```",
            "```python\ndef transform(in1, in2):\n    segment_ids = in1\n    data = in2\n    max_indices = tf.math.segment_max(data, segment_ids)\n    return max_indices\n```",
            "```python\ndef transform(in1, in2):\n    groups = tf.argsort(in1)\n    sorted_values = tf.gather(in2, groups)\n    max_indices = tf.argmax(sorted_values, axis=-1, output_type=tf.int32)\n    return tf.gather(groups, max_indices)\n```",
            "```python\ndef transform(in1, in2):\n    unique_vals, _ = tf.unique(in1)\n    argmax_vals = tf.argmax(tf.scatter_nd(tf.expand_dims(in1, 1), in2, (tf.reduce_max(in1) + 1)))\n    return tf.gather(argmax_vals, tf.searchsorted(unique_vals, in1, side='left'))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\ndef transform(in1, in2):\n    segments = tf.math.segment_max(in2, in1)\n    return tf.math.argmax(in2, axis=0)\n```",
            "```python\ndef transform(in1, in2):\n    grouped_max = tf.math.segment_max(in2, segment_ids=in1)\n    result = tf.argmax(grouped_max, axis=1)\n    return result\n```"
        ],
        "tf_operators": {
            "tf.argmax": 8,
            "tf.math.segment_max": 12,
            "tf.unique": 8,
            "tf.math.argmax": 3,
            "tf.gather": 8,
            "tf.size": 1,
            "tf.unique_with_counts": 1,
            "tf.math.unsorted_segment_max": 1,
            "tf.argsort": 2,
            "tf.cast": 1,
            "tf.int32": 2,
            "tf.scatter_nd": 1,
            "tf.reduce_max": 1,
            "tf.searchsorted": 1,
            "tf.expand_dims": 1
        },
        "coverage_percentage": 50.0,
        "total_covered": 3,
        "total_in_target": 6,
        "parsed_constants": [
            [
                1
            ],
            [
                0
            ],
            [],
            [
                0
            ],
            [
                -1
            ],
            [],
            [],
            [],
            [],
            [
                0
            ],
            [
                0
            ],
            [],
            [],
            [],
            [
                -1
            ],
            [
                1,
                1
            ],
            [],
            [],
            [
                0
            ],
            [
                1
            ]
        ],
        "all_constants": [
            0,
            1,
            -1
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 5,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 2,
            "tf_bool": 0,
            "axis": 0,
            "tf_float32": 0,
            "input_var": 46,
            "tf_int64": 0,
            "provided": 0,
            "shape": 0,
            "shape_tuple": 0,
            "common": 11
        }
    },
    {
        "name": "google_08",
        "description": "create a mask for sequences of the given lengths",
        "target_program": "tf.cast(tf.greater(tf.expand_dims(in1, 1), tf.range(5)), tf.int32)",
        "source": "Real task encountered by Googler, 4/11/2019",
        "constants": "[5]",
        "examples": {
            "inputs": "[[3, 4, 2, 1],]",
            "outputs": "[[1, 1, 1, 0, 0],    [1, 1, 1, 1, 0],    [1, 1, 0, 0, 0],    [1, 0, 0, 0, 0]]"
        },
        "completions": [
            "```python\ndef transform(in1):\n    max_len = tf.reduce_max(in1)\n    mask = tf.sequence_mask(in1, maxlen=max_len)\n    return mask\n```",
            "```python\ndef transform(in1):\n    return tf.sequence_mask(in1, maxlen=tf.reduce_max(in1))\n```",
            "```python\ndef transform(in1):\n    return tf.sequence_mask(in1, tf.reduce_max(in1))\n```",
            "```python\ndef transform(in1):\n    return tf.sequence_mask(in1)\n```",
            "```python\ndef transform(in1):\n    return tf.sequence_mask(in1, maxlen=tf.reduce_max(in1))\n```",
            "```python\ndef transform(in1):\n    return tf.sequence_mask(in1)\n```",
            "```python\ndef transform(in1):\n    return tf.sequence_mask(in1, maxlen=tf.reduce_max(in1))\n```",
            "```python\ndef transform(in1):\n    return tf.sequence_mask(in1)\n```",
            "```python\ndef transform(in1):\n    return tf.sequence_mask(in1)\n```",
            "```python\ndef transform(in1):\n    return tf.sequence_mask(in1)\n```",
            "```python\ndef transform(in1):\n    return tf.sequence_mask(in1)\n```",
            "```python\ndef transform(in1):\n    return tf.sequence_mask(in1)\n```",
            "def transform(input_lengths):\n    max_length = tf.reduce_max(input_lengths)\n    mask = tf.sequence_mask(input_lengths, max_length)\n    return mask",
            "```python\ndef transform(in1):\n    return tf.sequence_mask(in1, maxlen=tf.reduce_max(in1))\n```",
            "```python\ndef transform(lengths):\n    max_len = tf.reduce_max(lengths)\n    batch_size = tf.shape(lengths)[0]\n    range_tensor = tf.range(max_len)\n    sequence_masks = tf.expand_dims(range_tensor, axis=0) < tf.reshape(lengths, [batch_size, 1])\n    return tf.cast(sequence_masks, tf.int32)\n```",
            "```python\n    mask = tf.sequence_mask(in1)\n    return mask\n```",
            "```python\ndef transform(in1):\n    sequence_mask = tf.sequence_mask(in1)\n    return sequence_mask\n```",
            "```python\ndef transform(in1):\n    return tf.sequence_mask(in1, maxlen=tf.reduce_max(in1))\n```",
            "```python\ndef transform(in1):\n    max_len = tf.reduce_max(in1)\n    lengths = tf.expand_dims(in1, axis=-1)\n    range_tensor = tf.range(max_len)\n    mask = tf.less(range_tensor, lengths)\n    padded_mask = tf.pad(mask, paddings=[[0, 0], [0, tf.maximum(0, tf.reduce_max(max_len - in1))]], mode='CONSTANT', constant_values=0)\n    return tf.cast(padded_mask, tf.int32)\n```",
            "```python\ndef transform(in1):\n    return tf.sequence_mask(in1)\n```"
        ],
        "tf_operators": {
            "tf.reduce_max": 10,
            "tf.sequence_mask": 18,
            "tf.cast": 2,
            "tf.int32": 2,
            "tf.shape": 1,
            "tf.reshape": 1,
            "tf.expand_dims": 2,
            "tf.range": 2,
            "tf.pad": 1,
            "tf.maximum": 1,
            "tf.less": 1
        },
        "coverage_percentage": 80.0,
        "total_covered": 4,
        "total_in_target": 5,
        "parsed_constants": [
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [
                0,
                0,
                1
            ],
            [],
            [],
            [],
            [
                -1,
                0,
                0,
                0,
                0,
                0
            ],
            []
        ],
        "all_constants": [
            0,
            1,
            -1
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 0,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 6,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 2,
            "tf_bool": 0,
            "axis": 0,
            "tf_float32": 0,
            "input_var": 29,
            "tf_int64": 0,
            "provided": 0,
            "shape": 0,
            "shape_tuple": 0,
            "common": 9
        }
    },
    {
        "name": "google_09",
        "description": "sort the segments",
        "target_program": "tf.gather(in2, tf.argsort(in1, stable=True))",
        "source": "Real task encountered by Googler, 8/9/2019",
        "constants": "[]",
        "examples": {
            "inputs": "[[1, 1, 1, 0, 0, 2],[10, 20, 30, 14, 15, 26],]",
            "outputs": "[14, 15, 10, 20, 30, 26]"
        },
        "completions": [
            "```python\ndef transform(in1, in2):\n    segments = tf.argsort(in1)\n    sorted_values = tf.gather(in2, segments)\n    return sorted_values\n```",
            "```python\ndef transform(in1, in2):\n    sorted_indices = tf.argsort(in1)\n    sorted_in2 = tf.gather(in2, sorted_indices)\n    return sorted_in2\n```",
            "```python\nsegments = tf.math.segment_sum(in2, in1)\nsorted_segments = tf.sort(segments)\n```",
            "```python\n    sorted_indices = tf.argsort(in1)\n    sorted_in2 = tf.gather(in2, sorted_indices)\n    return sorted_in2\n```",
            "```python\n    sorted_indices = tf.argsort(in1)\n    out = tf.gather(in2, sorted_indices)\n    return out\n```",
            "```python\ndef transform(in1, in2):\n    sorted_indices = tf.argsort(in1)\n    return tf.gather(in2, sorted_indices)\n```",
            "```python\nsegments = tf.argsort(in1)\nout = tf.gather(in2, segments)\nreturn out\n```",
            "```python\n    sorted_indices = tf.argsort(in1)\n    sorted_in2 = tf.gather(in2, sorted_indices)\n    return sorted_in2\n```",
            "```python\ndef transform(in1, in2):\n    sorted_indices = tf.argsort(in1)\n    return tf.gather(in2, sorted_indices)\n```",
            "```python\nsorted_indices = tf.argsort(in1)\nout = tf.gather(in2, sorted_indices)\nreturn out\n```",
            "```python\nsegments = tf.argsort(in1)\nresult = tf.gather(in2, segments)\nreturn result\n```",
            "```python\ndef transform(in1, in2):\n    sorted_indices = tf.argsort(in1)\n    sorted_in1 = tf.gather(in1, sorted_indices)\n    sorted_in2 = tf.gather(in2, sorted_indices)\n    return sorted_in2\n```",
            "```python\ndef transform(in1, in2):\n    segments = tf.argsort(in1)\n    sorted_values = tf.gather(in2, segments)\n    return sorted_values\n```",
            "```python\ndef transform(in1, in2):\n    sorted_indices = tf.argsort(in1)\n    out1 = tf.gather(in2, sorted_indices)\n    return out1\n```",
            "```python\ndef transform(in1, in2):\n    data = in2\n    segment_ids = in1\n    sorted_indices = tf.argsort(segment_ids)\n    sorted_data = tf.gather(data, sorted_indices)\n    return sorted_data\n```",
            "```python\ndef transform(in1, in2):\n    data = tf.constant(in2)\n    segment_ids = tf.constant(in1)\n    sorted_data = tf.math.unsorted_segment_min(data, segment_ids, num_segments=tf.reduce_max(segment_ids)+1)\n    return sorted_data\n```",
            "```python\ndef transform(in1, in2):\n    sorted_indices = tf.argsort(in1)\n    sorted_in1 = tf.gather(in1, sorted_indices)\n    sorted_in2 = tf.gather(in2, sorted_indices)\n    return sorted_in2\n```",
            "```python\ndef transform(in1, in2):\n    indices = tf.argsort(in1)\n    out = tf.gather(in2, indices)\n    return out\n```",
            "```python\ndef transform(in1, in2):\n    indices = tf.argsort(in1)\n    sorted_in2 = tf.gather(in2, indices)\n    return sorted_in2\n```",
            "```python\ndef transform(in1, in2):\n    values, indices = tf.sort(in2, axis=0)\n    return tf.gather(values, indices)\n```"
        ],
        "tf_operators": {
            "tf.argsort": 17,
            "tf.gather": 18,
            "tf.sort": 2,
            "tf.math.segment_sum": 1,
            "tf.reduce_max": 1,
            "tf.math.unsorted_segment_min": 1,
            "tf.constant": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 2,
        "total_in_target": 2,
        "parsed_constants": [
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [
                1
            ],
            [],
            [],
            [],
            [
                0
            ]
        ],
        "all_constants": [
            0,
            1
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 0,
            "tf_bool": 0,
            "axis": 0,
            "tf_float32": 0,
            "input_var": 46,
            "tf_int64": 0,
            "provided": 0,
            "shape": 0,
            "shape_tuple": 0,
            "common": 2
        }
    },
    {
        "name": "google_11",
        "description": "count the number of elements greater than 0 in each row",
        "target_program": "tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)",
        "source": "Real task encountered by Googler, 8/26/2019",
        "constants": "[]",
        "examples": {
            "inputs": "[[[1.0, 0.3, -4.2, 0.0, 2.1, 0.4], [-0.1, 0.0, 1.4, -1.0, 0.4, 0.0], [0.1, 0.0, 0.7, -0.3, 0.5, -0.1], [1.4, 2.5, 0.3, 0.01, 0.0, 1.2]],]",
            "outputs": "[4, 2, 3, 5]"
        },
        "completions": [
            "```python\ndef transform(in1):\n    return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n```",
            "```python\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\ndef transform(in1):\n    return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n```",
            "```python\n    return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n```",
            "```python\ndef transform(in1):\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\n    return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n```",
            "```python\ndef transform(in1):\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\noutput = tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\nreturn output\n```",
            "```python\nreturn tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\ndef transform(in1):\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\ndef transform(in1):\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\ndef transform(in1):\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\nreturn tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\ndef transform(in1):\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\ndef transform(in1):\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\n    greater_than_zero = tf.greater(in1, 0)\n    count_per_row = tf.math.count_nonzero(greater_than_zero, axis=1)\n    return count_per_row\n```",
            "```python\ndef transform(in1):\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\ndef transform(in1):\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\ndef transform(in1):\n    return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n```",
            "```python\ndef transform(in1):\n    return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n```"
        ],
        "tf_operators": {
            "tf.cast": 6,
            "tf.int32": 6,
            "tf.greater": 20,
            "tf.reduce_sum": 6,
            "tf.math.count_nonzero": 14
        },
        "coverage_percentage": 100.0,
        "total_covered": 4,
        "total_in_target": 4,
        "parsed_constants": [
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ]
        ],
        "all_constants": [
            0,
            1
        ],
        "constant_counts": [
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 6,
            "tf_bool": 0,
            "axis": 0,
            "tf_float32": 0,
            "input_var": 20,
            "tf_int64": 0,
            "provided": 0,
            "shape": 0,
            "shape_tuple": 0,
            "common": 40
        }
    },
    {
        "name": "google_12",
        "description": "identify elements between 0 and 1",
        "target_program": "tf.cast(tf.logical_and(0 <= in1, in1 <= 1), tf.int32)",
        "source": "Real task encountered by Googler, 8/26/2019",
        "constants": "[]",
        "examples": {
            "inputs": "[[[1.0, 0.3, -4.2, 0.0, 2.1], [-0.1, 0.0, 1.4, -1.0, 0.4], [0.1, 0.0, 0.7, -0.3, 0.5], [1.4, 2.5, 0.3, -0.1, 0.0]],]",
            "outputs": "[[1, 1, 0, 1, 0],    [0, 1, 0, 0, 1],    [1, 1, 1, 0, 1],    [0, 0, 1, 0, 1]]"
        },
        "completions": [
            "```python\nreturn tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))\n```",
            "```python\nreturn tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))\n```",
            "```python\nresult = tf.cast(tf.logical_and(in1 >= 0, in1 <= 1), tf.int32)\nreturn result\n```",
            "```python\nresult = tf.cast(tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1)), tf.int32)\nreturn result\n```",
            "```python\nresult = tf.cast(tf.logical_and(in1 >= 0, in1 <= 1), tf.int32)\nreturn result\n```",
            "```python\nreturn tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))\n```",
            "```python\ndef transform(in1):\n    return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))\n```",
            "```python\noutput = tf.math.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))\nreturn tf.cast(output, tf.int32)\n```",
            "```python\nreturn tf.cast(tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1)), tf.int32)\n```",
            "```python\n    return tf.cast(tf.logical_and(tf.greater_equal(in1, 0), tf.less(in1, 1)), tf.int32)\n```",
            "```python\ndef transform(in1):\n    return tf.logical_and(tf.greater_equal(in1, 0), tf.less(in1, 1)).numpy().astype(int)\n```",
            "```python\nreturn tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))\n```",
            "```python\nreturn tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))\n```",
            "```python\nreturn tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))\n```",
            "```python\nresult = tf.cast(tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1)), tf.int32)\nreturn result\n```",
            "```python\nout = tf.cast(tf.logical_and(in1 >= 0, in1 <= 1), tf.int32)\nreturn out\n```",
            "```python\nresult = tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))\nreturn tf.cast(result, tf.int32)\n```",
            "```python\nreturn tf.math.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))\n```",
            "```python\noutput = tf.cast(tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1)), dtype=tf.int32)\n```",
            "```python\n    return tf.cast(tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1)), tf.int32)\n```"
        ],
        "tf_operators": {
            "tf.greater_equal": 17,
            "tf.less_equal": 15,
            "tf.logical_and": 18,
            "tf.cast": 11,
            "tf.int32": 11,
            "tf.math.logical_and": 2,
            "tf.less": 2
        },
        "coverage_percentage": 100.0,
        "total_covered": 3,
        "total_in_target": 3,
        "parsed_constants": [
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ]
        ],
        "all_constants": [
            0,
            1
        ],
        "constant_counts": [
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 11,
            "tf_bool": 0,
            "axis": 0,
            "tf_float32": 0,
            "input_var": 41,
            "tf_int64": 0,
            "provided": 0,
            "shape": 0,
            "shape_tuple": 0,
            "common": 40
        }
    },
    {
        "name": "google_13",
        "description": "Concatenate batches of sequences",
        "target_program": "tf.concat([in1, in2], axis=1)",
        "source": "Real task encountered by Googler, 9/13/2019",
        "constants": "[]",
        "examples": {
            "inputs": "[[[1, 2], [10, 20]],[[3, 4, 5], [30, 40, 50]],]",
            "outputs": "[[1, 2, 3, 4, 5], [10, 20, 30, 40, 50]]"
        },
        "completions": [
            "```python\n    return tf.concat([in1, in2], axis=1)\n```",
            "```python\n    return tf.concat([in1, in2], axis=-1)\n```",
            "```python\n     tf.concat([in1, in2], axis=1)\n```",
            "```python\n    return tf.concat([in1, in2], axis=1)\n```",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)",
            "```python\n    return tf.concat([in1, in2], axis=1)\n```",
            "```python\n     tf.concat([in1, in2], axis=1)\n```",
            "```python\n     return tf.concat([in1, in2], axis=1)\n```",
            "```python\noutput = tf.concat([in1, in2], axis=1)\nreturn output\n```",
            "```python\n    return tf.concat([in1, in2], axis=1)\n```",
            "```python\n    return tf.concat([in1, in2], axis=1)\n```",
            "```python\n    return tf.concat([in1, in2], axis=1)\n```",
            "```python\n    return tf.concat([in1, in2], axis=1)\n```",
            "```python\n    return tf.concat([in1, in2], axis=1)\n```",
            "```python\nresult = tf.concat([in1, in2], axis=1)\nreturn result\n```",
            "```python\nimport tensorflow as tf\n\ndef transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)\n```",
            "```python\n    return tf.concat([in1, in2], axis=1)\n```",
            "```python\n    return tf.concat([in1, in2], axis=1)\n```",
            "```python\n    return tf.concat([in1, in2], axis=1)\n```",
            "```python\n    return tf.concat([in1, in2], axis=1)\n```"
        ],
        "tf_operators": {
            "tf.concat": 20
        },
        "coverage_percentage": 100.0,
        "total_covered": 1,
        "total_in_target": 1,
        "parsed_constants": [
            [
                1
            ],
            [
                -1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ]
        ],
        "all_constants": [
            1,
            -1
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 0,
            "tf_bool": 0,
            "axis": 0,
            "tf_float32": 0,
            "input_var": 40,
            "tf_int64": 0,
            "provided": 0,
            "shape": 0,
            "shape_tuple": 0,
            "common": 20
        }
    },
    {
        "name": "google_14",
        "description": "circular buffer",
        "target_program": "tf.roll(in1, 1, 1)",
        "source": "From internal Colab, 10/17/2019",
        "constants": "[]",
        "examples": {
            "inputs": "[[[1, 3, 2, 0, 0], [4, 6, 5, 0, 0], [8, 7, 9, 0, 0]],]",
            "outputs": "[[0, 1, 3, 2, 0], [0, 4, 6, 5, 0], [0, 8, 7, 9, 0]]"
        },
        "completions": [
            "```python\ndef transform(in1):\n    return tf.roll(in1, shift=-1, axis=1)\n```",
            "```python\ndef transform(in1):\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\ndef transform(in1):\n    return tf.roll(in1, shift=-1, axis=1)\n```",
            "```python\ndef transform(in1):\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\ndef transform(in1):\n    return tf.roll(in1, shift=-1, axis=1)\n```",
            "```python\ndef transform(in1):\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\ndef transform(in1):\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\ndef transform(in1):\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\ndef transform(in1):\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\ndef transform(in1):\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\ndef transform(in1):\n    return tf.roll(in1, shift=1, axis=1)\n```  ",
            "```python\ndef transform(in1):\n    return tf.roll(in1, shift=-1, axis=1)\n```",
            "```python\ndef transform(in1):\n    return tf.roll(in1, shift=-1, axis=1)\n```",
            "```python\ndef transform(in1):\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\ndef transform(in1):\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\nimport tensorflow as tf\n\ndef transform(in1):\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\ndef transform(in1):\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\ndef transform(in1):\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\ndef transform(in1):\n    return tf.roll(in1, shift=-1, axis=1)\n```",
            "```python\ndef transform(in1):\n    return tf.roll(in1, shift=1, axis=1)\n```"
        ],
        "tf_operators": {
            "tf.roll": 20
        },
        "coverage_percentage": 100.0,
        "total_covered": 1,
        "total_in_target": 1,
        "parsed_constants": [
            [
                -1,
                1
            ],
            [
                1,
                1
            ],
            [
                -1,
                1
            ],
            [
                1,
                1
            ],
            [
                -1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                -1,
                1
            ],
            [
                -1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                -1,
                1
            ],
            [
                1,
                1
            ]
        ],
        "all_constants": [
            1,
            -1
        ],
        "constant_counts": [
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 0,
            "tf_bool": 0,
            "axis": 0,
            "tf_float32": 0,
            "input_var": 20,
            "tf_int64": 0,
            "provided": 0,
            "shape": 0,
            "shape_tuple": 0,
            "common": 40
        }
    },
    {
        "name": "google_15",
        "description": "pad a zero column",
        "target_program": "tf.pad(in1, [[0, 0], [0, 1]], 'CONSTANT')",
        "source": "Real task encountered by Googler, 10/23/2019",
        "constants": "[]",
        "examples": {
            "inputs": "[[[1, 3, 5, 7], [2, 4, 6, 8]],]",
            "outputs": "[[1, 3, 5, 7, 0], [2, 4, 6, 8, 0]]"
        },
        "completions": [
            "```python\ndef transform(in1):\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n```",
            "```python\ndef transform(in1):\n    return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n```",
            "```python\ndef transform(in1):\n    return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n```",
            "```python\ndef transform(in1):\n    return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n```",
            "```python\ndef transform(in1):\n    return tf.pad(in1, paddings=[[0,0],[0,1]], mode='CONSTANT')\n```",
            "```python\ndef transform(in1):\n    return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n```",
            "```python\ndef transform(input):\n    return tf.pad(input, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n```",
            "```python\ndef transform(in1):\n    return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n```",
            "```python\ndef transform(in1):\n    return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n```",
            "```python\ndef transform(in1):\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n```",
            "```python\ndef transform(in1):\n    return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n```",
            "```python\ndef transform(in1):\n    return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n```",
            "```python\ndef transform(in1):\n    return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n```",
            "```python\ndef transform(in1):\n    return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n```",
            "```python\ndef transform(in1):\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n```",
            "```python\ndef transform(in1):\n    return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n```",
            "```python\ndef transform(in1):\n    return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n```",
            "```python\ndef transform(input):\n    return tf.pad(input, [[0, 0], [0, 1]], mode='CONSTANT')\n```",
            "```python\ndef transform(in1):\n    return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n```",
            "```python\ndef transform(in1):\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n```"
        ],
        "tf_operators": {
            "tf.pad": 20
        },
        "coverage_percentage": 100.0,
        "total_covered": 1,
        "total_in_target": 1,
        "parsed_constants": [
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ]
        ],
        "all_constants": [
            0,
            1
        ],
        "constant_counts": [
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 0,
            "tf_bool": 0,
            "axis": 0,
            "tf_float32": 0,
            "input_var": 20,
            "tf_int64": 0,
            "provided": 0,
            "shape": 0,
            "shape_tuple": 0,
            "common": 80
        }
    },
    {
        "name": "google_16",
        "description": "replicate elements a given number of times",
        "target_program": "tf.gather(in1, tf.where(tf.sequence_mask(in2))[:, 0])",
        "source": "From an internal Google forum",
        "constants": "[]",
        "examples": {
            "inputs": "[[1, 2, 0, 3],[2, 1, 2, 3],]",
            "outputs": "[1, 1, 2, 0, 0, 3, 3, 3]"
        },
        "completions": [
            "```python\nout = tf.repeat(in1, in2)\nreturn out\n```",
            "```python\nresult = tf.repeat(in1, in2)\nresult = tf.boolean_mask(result, tf.not_equal(result, 0))\nreturn result\n```",
            "```python\n    return tf.repeat(in1, in2)\n```",
            "```python\nout = tf.repeat(in1, in2)\nreturn out\n```",
            "```python\n    repeated = tf.repeat(in1, in2)\n    return repeated\n```",
            "```python\nresult = tf.repeat(in1, in2)\n```",
            "```python\noutput = tf.repeat(in1, in2)\nreturn output\n```",
            "```python\n    return tf.repeat(in1, in2)\n```",
            "```python\n    result = tf.repeat(in1, in2)\n    return result\n```",
            "```python\nout = tf.repeat(in1, in2)\nreturn out\n```",
            "```python\nout = tf.repeat(in1, in2)\nreturn out\n```",
            "```python\nresult = tf.repeat(in1, in2)\nreturn result\n```",
            "```python\nout = tf.repeat(in1, in2)\nreturn out\n```",
            "```python\n    return tf.repeat(in1, in2)\n```  ",
            "```python\ndef transform(in1, in2):\n    return tf.repeat(in1, in2)\n```",
            "```python\n    out = tf.repeat(in1, in2)\n    return out\n```",
            "```python\n    result = tf.repeat(in1, in2)\n    return result\n```",
            "```python\nreturn tf.repeat(in1, in2)\n```",
            "```python\nout = tf.repeat(in1, in2)\nreturn out\n```",
            "```python\noutput = tf.repeat(in1, in2)\nreturn output\n```"
        ],
        "tf_operators": {
            "tf.repeat": 20,
            "tf.not_equal": 1,
            "tf.boolean_mask": 1
        },
        "coverage_percentage": 0.0,
        "total_covered": 0,
        "total_in_target": 3,
        "parsed_constants": [
            [],
            [
                0
            ],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            []
        ],
        "all_constants": [
            0
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 0,
            "tf_bool": 0,
            "axis": 0,
            "tf_float32": 0,
            "input_var": 40,
            "tf_int64": 0,
            "provided": 0,
            "shape": 0,
            "shape_tuple": 0,
            "common": 1
        }
    },
    {
        "name": "google_17",
        "description": "use bool tensor as condition",
        "target_program": "tf.where(in1, in2, tf.multiply(in2, -10))",
        "source": "From an internal Google forum",
        "constants": "[-10]",
        "examples": {
            "inputs": "[[True, False, False, True, False],[1, 2, 3, 4, 5],]",
            "outputs": "[1, -20, -30, 4, -50]"
        },
        "completions": [
            "```python\ndef transform(in1, in2):\n    result = tf.where(in1, in2, -10*in2)\n    return result\n```",
            "```python\ndef transform(in1, in2):\n    return tf.where(in1, in2, tf.math.negative(in2))\n```",
            "```python\ndef transform(in1, in2):\n    result = tf.where(in1, in2, in2 * -10)\n    return result\n```",
            "```python\ndef transform(in1, in2):\n    return tf.where(in1, in2, -10*in2)\n```",
            "```python\ndef transform(in1, in2):\n    result = tf.where(in1, in2, -10*in2)\n    return result\n```",
            "```python\ndef transform(in1, in2):\n    result = tf.where(in1, in2, -10*in2)\n    return result\n```",
            "```python\ndef transform(in1, in2):\n    return tf.where(in1, in2, -10*in2)\n```",
            "```python\nimport tensorflow as tf\n\ndef transform(in1, in2):\n    condition = tf.convert_to_tensor(in1, dtype=tf.bool)\n    data = tf.convert_to_tensor(in2, dtype=tf.int32)\n    \n    result = tf.where(condition, data, -10 * data)\n    \n    return result.numpy()\n```",
            "```python\ndef transform(in1, in2):\n    result = tf.where(in1, in2, -10 * in2)\n    return result\n```",
            "```python\ndef transform(in1, in2):\n    return tf.where(in1, in2, -10*in2)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.where(in1, in2, -10 * in2)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.where(in1, in2, -10*in2)\n```",
            "```python\noutput = tf.where(in1, in2, -10 * in2)\n```",
            "```python\ndef transform(in1, in2):\n    result = tf.where(in1, in2, -10 * in2)\n    return result\n```",
            "```python\ndef transform(in1, in2):\n    result = tf.where(in1, in2, -10*in2)\n    return result\n```",
            "```python\ndef transform(in1, in2):\n    result = tf.where(in1, in2, -10*in2)\n    return result\n```",
            "```python\ndef transform(in1, in2):\n    result = tf.where(in1, in2, -10 * in2)\n    return result\n```",
            "```python\ndef transform(in1, in2):\n    return tf.where(in1, in2, -10 * in2)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.where(in1, in2, -10 * in2)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.where(in1, in2, -10*in2)\n```"
        ],
        "tf_operators": {
            "tf.where": 20,
            "tf.math.negative": 1,
            "tf.bool": 1,
            "tf.int32": 1,
            "tf.convert_to_tensor": 1
        },
        "coverage_percentage": 50.0,
        "total_covered": 1,
        "total_in_target": 2,
        "parsed_constants": [
            [
                -10
            ],
            [],
            [
                -10
            ],
            [
                -10
            ],
            [
                -10
            ],
            [
                -10
            ],
            [
                -10
            ],
            [
                -10
            ],
            [
                -10
            ],
            [
                -10
            ],
            [
                -10
            ],
            [
                -10
            ],
            [
                -10
            ],
            [
                -10
            ],
            [
                -10
            ],
            [
                -10
            ],
            [
                -10
            ],
            [
                -10
            ],
            [
                -10
            ],
            [
                -10
            ]
        ],
        "all_constants": [
            -10
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 1,
            "tf_bool": 1,
            "axis": 0,
            "tf_float32": 0,
            "input_var": 59,
            "tf_int64": 0,
            "provided": 19,
            "shape": 0,
            "shape_tuple": 0,
            "common": 0
        }
    },
    {
        "name": "google_18",
        "description": "(\\'sum of elements in the first tensor but partitioned by the second tensor\\')",
        "target_program": "tf.linalg.matvec(tf.cast(tf.equal(in2[:, None], in2), tf.int32), in1)",
        "source": "From an internal Google forum",
        "constants": "[]",
        "examples": {
            "inputs": "[[5, 7, -12, 10, 20],[1, 2, 3, 1, 2],]",
            "outputs": "[15, 27, -12, 15, 27]"
        },
        "completions": [
            "```python\n    sum_segments = tf.math.segment_sum(in1, in2)\n    return sum_segments\n```",
            "```python\n    segmented_sum = tf.math.segment_sum(in1, in2)\n    return segmented_sum\n```",
            "```python\ndef transform(in1, in2):\n    return tf.math.segment_sum(in1, in2)\n```",
            "```python\n    segments_sum = tf.math.segment_sum(in1, in2)\n    return segments_sum\n```",
            "```python\n     result = tf.math.segment_sum(in1, in2)\n     return result\n```",
            "```python\nresult = tf.math.segment_sum(in1, in2)\nreturn result\n```",
            "```python\n    segmented_sum = tf.math.segment_sum(in1, in2)\n    return segmented_sum\n```",
            "```python\n    segment_sum = tf.math.segment_sum(in1, in2)\n    return segment_sum\n```",
            "```python\n   result = tf.math.segment_sum(in1, in2)\n   return result\n```",
            "```python\ndef transform(in1, in2):\n    segmented_sum = tf.math.segment_sum(in1, in2)\n    return segmented_sum\n```",
            "```python\n    # Sum of elements in the first tensor but partitioned by the second tensor\n    result = tf.math.segment_sum(in1, in2)\n    return result\n```",
            "```python\ndef transform(in1, in2):\n    segmented_sum = tf.math.segment_sum(in1, in2)\n    return segmented_sum\n```",
            "```python\ndef transform(in1, in2):\n    return tf.math.segment_sum(in1, in2)\n```",
            "```python\n    result = tf.math.segment_sum(in1, in2)\n    return result\n```",
            "```python\ndef transform(in1, in2):\n    return tf.math.segment_sum(in1, in2)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.math.segment_sum(in1, in2)\n```",
            "```python\nresult = tf.math.segment_sum(in1, in2)\nreturn result\n```",
            "```python\ndef transform(in1, in2):\n    return tf.math.segment_sum(in1, in2)\n```",
            "```python\nreturn tf.math.segment_sum(in1, in2)\n```",
            "```python\ndef transform(in1, in2):\n    segmented_sum = tf.math.segment_sum(in1, in2)\n    return segmented_sum\n```"
        ],
        "tf_operators": {
            "tf.math.segment_sum": 20
        },
        "coverage_percentage": 0.0,
        "total_covered": 0,
        "total_in_target": 4,
        "parsed_constants": [
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            []
        ],
        "all_constants": [],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 0,
            "tf_bool": 0,
            "axis": 0,
            "tf_float32": 0,
            "input_var": 40,
            "tf_int64": 0,
            "provided": 0,
            "shape": 0,
            "shape_tuple": 0,
            "common": 0
        }
    },
    {
        "name": "google_19",
        "description": "scatter a 2-D tensor with indices",
        "target_program": "tf.gather(in1, tf.argsort(in2, axis=1), batch_dims=1)",
        "source": "From an internal Google forum",
        "constants": "[]",
        "examples": {
            "inputs": "[[[11, 12, 13], [30, 20, 10], [77, 88, 99]],[[2, 0, 1], [1, 0, 2], [0, 2, 1]],]",
            "outputs": "[[12, 13, 11],    [20, 30, 10],    [77, 99, 88]]"
        },
        "completions": [
            "```python\nreturn tf.scatter_nd(indices=tf.stack([tf.range(tf.shape(in2)[0])[:, tf.newaxis], in2], axis=-1), updates=in1, shape=tf.shape(in2))\n```",
            "```python\noutput = tf.scatter_nd(in2, in1, [3, 3])\nreturn output\n```",
            "```python\noutput = tf.scatter_nd(indices=in2, updates=in1, shape=(3,3))\nreturn output\n```",
            "```python\nresult = tf.scatter_nd(tf.expand_dims(in2, axis=-1), in1, tf.shape(in1))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.scatter_nd(in2, in1, tf.shape(in2))\n```",
            "```python\noutput = tf.scatter_nd(indices=in2, updates=in1, shape=(3, 3))\nreturn output\n```",
            "```python\noutput = tf.scatter_nd(indices=tf.transpose(in2), updates=in1, shape=(3,3))\nreturn output\n```",
            "```python\noutput = tf.tensor_scatter_nd_update(in1, in2, tf.gather_nd(in1, in2))\nreturn output\n```",
            "```python\n    return tf.scatter_nd(in2, in1, [3, 3])\n```",
            "```python\n    return tf.scatter_nd(in2, in1, tf.shape(in2))\n```",
            "```python\noutput = tf.scatter_nd(indices=in2, updates=in1, shape=(3, 3))\nreturn output\n```",
            "```python\nreturn tf.scatter_nd(indices=tf.transpose(in2), updates=in1, shape=tf.shape(in1))\n```",
            "```python\nresult = tf.scatter_nd(indices=tf.transpose(tf.stack([tf.range(tf.size(in2)), tf.reshape(in2, [-1])])), updates=tf.reshape(in1, [-1]), shape=tf.shape(in1))\n```",
            "```python\noutput = tf.scatter_nd(in2, in1, [3, 3])\nreturn output\n```",
            "```python\noutput = tf.scatter_nd(indices=in2, updates=in1, shape=tf.shape(in1))\nreturn output\n```",
            "```python\noutput = tf.tensor_scatter_nd_update(in1, tf.expand_dims(in2, axis=-1), tf.gather_nd(in1, tf.expand_dims(in2, axis=-1)))\n```",
            "```python\nresult = tf.scatter_nd(indices=in2, updates=in1, shape=(3, 3))\n```",
            "```python\noutput = tf.scatter_nd(in2, in1, tf.shape(in1))\nreturn output\n```",
            "```python\noutput = tf.scatter_nd(in2, in1, tf.shape(in1))\n```",
            "```python\nresult = tf.scatter_nd(indices=tf.cast(in2, tf.int32), updates=in1, shape=(3, 3))\nreturn result\n```"
        ],
        "tf_operators": {
            "tf.shape": 9,
            "tf.stack": 2,
            "tf.scatter_nd": 18,
            "tf.newaxis": 1,
            "tf.range": 2,
            "tf.expand_dims": 2,
            "tf.transpose": 3,
            "tf.tensor_scatter_nd_update": 2,
            "tf.gather_nd": 2,
            "tf.size": 1,
            "tf.reshape": 1,
            "tf.cast": 1,
            "tf.int32": 1
        },
        "coverage_percentage": 0.0,
        "total_covered": 0,
        "total_in_target": 2,
        "parsed_constants": [
            [
                0,
                -1
            ],
            [
                3,
                3
            ],
            [
                3,
                3
            ],
            [
                -1
            ],
            [],
            [
                3,
                3
            ],
            [
                3,
                3
            ],
            [],
            [
                3,
                3
            ],
            [],
            [
                3,
                3
            ],
            [],
            [
                -1,
                -1
            ],
            [
                3,
                3
            ],
            [],
            [
                -1,
                -1
            ],
            [
                3,
                3
            ],
            [],
            [],
            [
                3,
                3
            ]
        ],
        "all_constants": [
            0,
            3,
            -1
        ],
        "constant_counts": [
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 2,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 1
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 2,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 2,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 1
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 1,
            "tf_bool": 0,
            "axis": 0,
            "tf_float32": 0,
            "input_var": 55,
            "tf_int64": 0,
            "provided": 0,
            "shape": 6,
            "shape_tuple": 6,
            "common": 7
        }
    },
    {
        "name": "google_20",
        "description": "sort a tensor and return sorted index in original order",
        "target_program": "tf.cast(tf.argsort(tf.argsort(in1)), tf.int32)",
        "source": "From an internal Google forum",
        "constants": "[]",
        "examples": {
            "inputs": "[[10, 7, 4, 3, 2, 8],]",
            "outputs": "[5, 3, 2, 1, 0, 4]"
        },
        "completions": [
            "```python\nsorted_indices = tf.argsort(in1)\n```",
            "```python\nsorted_indices = tf.argsort(in1)\n```",
            "```python\nsorted_indices = tf.argsort(in1)\n```",
            "```python\ndef transform(in1):\n    sorted_indices = tf.argsort(in1)\n    return tf.argsort(sorted_indices)\n```",
            "```python\nsorted_indices = tf.argsort(in1)\n```  ",
            "```python\nsorted_indices = tf.argsort(in1)\n```",
            "```python\nsorted_indices = tf.argsort(in1)\n```",
            "```python\nsorted_indices = tf.argsort(in1)\n```",
            "```python\nsorted_indices = tf.argsort(in1)\n```",
            "```python\nreturn tf.argsort(in1)\n```",
            "```python\nsorted_indices = tf.argsort(in1)\n```",
            "```python\nsorted_indices = tf.argsort(in1)\n```",
            "```python\nsorted_indices = tf.argsort(in1)\n```",
            "```python\ndef transform(in1):\n    sorted_indices = tf.argsort(in1)\n    return tf.argsort(sorted_indices)\n```",
            "```python\ndef transform(in1):\n    sorted_indices = tf.argsort(in1)\n    return sorted_indices\n```",
            "```python\nsorted_indices = tf.argsort(in1)\n```",
            "```python\ndef transform(in1):\n    sorted_indices = tf.argsort(in1)\n    return tf.argsort(sorted_indices)\n```",
            "```python\ndef transform(in1):\n    return tf.argsort(in1)\n```",
            "```python\ndef transform(in1):\n    sorted_indices = tf.argsort(in1)\n    return tf.argsort(sorted_indices)\n```",
            "```python\ndef transform(in1):\n    sorted_indices = tf.argsort(in1)\n    return tf.argsort(sorted_indices)\n```"
        ],
        "tf_operators": {
            "tf.argsort": 20
        },
        "coverage_percentage": 33.33333333333333,
        "total_covered": 1,
        "total_in_target": 3,
        "parsed_constants": [
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            []
        ],
        "all_constants": [],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 0,
            "tf_bool": 0,
            "axis": 0,
            "tf_float32": 0,
            "input_var": 20,
            "tf_int64": 0,
            "provided": 0,
            "shape": 0,
            "shape_tuple": 0,
            "common": 0
        }
    },
    {
        "name": "google_21",
        "description": "update a tensor at the given indices",
        "target_program": "tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, (-1,)))",
        "source": "Real task encountered by Googler, 12/15/2020",
        "constants": "[]",
        "examples": {
            "inputs": "{'tensor': [[1, 2, 3, 4, 5], [4, 5, 6, 7, 8], [7, 8, 9, 10, 11]], 'indices': [[0, 0], [0, 2], [1, 1], [1, 3], [2, 2], [2, 4]], 'updates': [[0, -2], [-1, -3], [-2, -4]],}",
            "outputs": "[[0, 2, -2, 4, 5], [4, -1, 6, -3, 8], [7, 8, -2, 10, -4]]"
        },
        "completions": [
            "```python\nreturn tf.tensor_scatter_nd_update(tensor, indices, updates)\n```",
            "```python\nresult = tf.tensor_scatter_nd_update(tensor, indices, updates)\nreturn result\n```",
            "```python\nreturn tf.tensor_scatter_nd_update(tensor, indices, updates)\n```",
            "```python\nreturn tf.tensor_scatter_nd_update(tensor, indices, updates)\n```",
            "```python\noutput = tf.tensor_scatter_nd_update(tensor, indices, updates)\nreturn output\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)\n```",
            "```python\nreturn tf.tensor_scatter_nd_update(tensor, indices, updates)\n```",
            "```python\nreturn tf.tensor_scatter_nd_update(tensor, indices, updates)\n```",
            "```python\nreturn tf.tensor_scatter_nd_update(tensor, indices, updates)\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)\n```",
            "```python\nreturn tf.tensor_scatter_nd_update(tensor, indices, updates)\n```",
            "```python\n    tf.tensor_scatter_nd_update(tensor, indices, updates)\n```",
            "```python\nresult = tf.tensor_scatter_nd_update(tensor, indices, updates)\nreturn result\n```",
            "```python\n     tf.tensor_scatter_nd_update(tensor, indices, updates)\n```",
            "```python\nreturn tf.tensor_scatter_nd_update(tensor, indices, updates)\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)\n```",
            "```python\noutput = tf.tensor_scatter_nd_update(tensor, indices, updates)\nreturn output\n```",
            "```python\ndef transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)\n```"
        ],
        "tf_operators": {
            "tf.tensor_scatter_nd_update": 20
        },
        "coverage_percentage": 50.0,
        "total_covered": 1,
        "total_in_target": 2,
        "parsed_constants": [
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            []
        ],
        "all_constants": [],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 0,
            "tf_bool": 0,
            "axis": 0,
            "tf_float32": 0,
            "input_var": 60,
            "tf_int64": 0,
            "provided": 0,
            "shape": 0,
            "shape_tuple": 0,
            "common": 0
        }
    },
    {
        "name": "google_22",
        "description": "pair with row index",
        "target_program": "tf.cast(tf.where(tf.reduce_max(tf.one_hot(in1, tf.reduce_max(in1) + 1), axis=1)), tf.int32)",
        "source": "Real task encountered by Googler, 12/15/2020",
        "constants": "[]",
        "examples": {
            "inputs": "[[[0, 2], [1, 3], [2, 4]],]",
            "outputs": "[[0, 0], [0, 2], [1, 1], [1, 3], [2, 2], [2, 4]]"
        },
        "completions": [
            "```python\ndef transform(in1):\n    row_indices = tf.range(tf.cast(tf.shape(in1)[0], tf.int64))\n    pair_indices = tf.repeat(row_indices, repeats=2)\n    new_indices = tf.transpose(tf.stack([pair_indices, tf.reshape(in1, [-1])]))\n    return new_indices\n```",
            "```python\ndef transform(in1):\n    row_indices = tf.repeat(tf.range(tf.shape(in1)[0]), repeats=2)\n    pair_indices = tf.tile(in1, multiples=[2, 1])\n    return tf.stack([row_indices, pair_indices], axis=1)\n```",
            "```python\ndef transform(in1):\n    return tf.stack([tf.repeat(in1, 2, axis=0), tf.repeat(tf.range(tf.shape(in1)[0]), 2)])\n```",
            "```python\ndef transform(in1):\n    return tf.repeat(in1, repeats=2, axis=0)\n```",
            "```python\ndef transform(in1):\n    return tf.repeat(in1, 2, axis=0)\n```",
            "```python\ndef transform(in1):\n    indices = tf.expand_dims(tf.range(tf.shape(in1)[0]), axis=1)\n    return tf.concat([indices, in1], axis=1)\n```",
            "```python\ndef transform(in1):\n    pairs = tf.expand_dims(in1, axis=1)\n    indices = tf.range(tf.shape(in1)[0], dtype=tf.int32)\n    indices = tf.expand_dims(indices, axis=1)\n    indices = tf.tile(indices, multiples=[1, tf.shape(in1)[1]])\n    output = tf.concat([indices, pairs], axis=1)\n    return output\n```",
            "```python\ndef transform(in1):\n    return tf.repeat(in1, repeats=2, axis=0)  # pair with row index\n```",
            "```python\ndef transform(in1):\n    return tf.stack([tf.concat([[i, i], [i+1, i+1]], axis=0) for i in tf.squeeze(in1)])\n```",
            "```python\ndef transform(in1):\n    pair_indices = tf.repeat(tf.range(tf.shape(in1)[0]), 2)\n    row_indices = tf.tile(tf.range(2), tf.shape(in1)[0])\n    return tf.stack([pair_indices, in1[row_indices]], axis=1)\n```",
            "```python\ndef transform(in1):\n    return tf.repeat(in1, repeats=2, axis=0)\n```",
            "```python\ndef transform(in1):\n    return tf.repeat(in1, repeats=2, axis=0)\n```",
            "```python\ndef transform(in1):\n    indices = tf.argsort(in1[:, 0], stable=True)\n    updates = tf.tensor_scatter_nd_update(in1, tf.expand_dims(indices, 1), tf.zeros_like(in1))\n    result = tf.repeat(updates, [2, 2, 2], axis=0)\n    return result\n```",
            "```python\ndef transform(in1):\n    return tf.repeat(in1, repeats=2, axis=0)\n```",
            "```python\ndef transform(in1):\n    return tf.tile(tf.expand_dims(in1, 0), [2, 1])\n```",
            "```python\ndef transform(in1):\n    indices = tf.reshape(tf.range(tf.shape(in1)[0]), [-1, 1])\n    result = tf.concat([indices, in1], axis=1)\n    return result\n```",
            "```python\ndef transform(in1):\n    return tf.repeat(in1, repeats=2, axis=0) \n```",
            "```python\ndef transform(in1):\n    idx = tf.argsort(in1[:,0])\n    return tf.concat([tf.repeat(tf.expand_dims(idx, 1), repeats=[1, 2], axis=1), in1], axis=0)\n```",
            "```python\ndef transform(in1):\n    pairs = tf.gather(tf.tile(tf.range(tf.shape(in1)[0])[:, tf.newaxis], [1, 2]), tf.reshape(in1, [-1]))\n    return pairs\n```",
            "```python\ndef transform(in1):\n    return tf.repeat(in1, 2, axis=0)\n```"
        ],
        "tf_operators": {
            "tf.cast": 1,
            "tf.repeat": 14,
            "tf.shape": 8,
            "tf.stack": 5,
            "tf.reshape": 3,
            "tf.transpose": 1,
            "tf.int64": 1,
            "tf.range": 8,
            "tf.tile": 5,
            "tf.expand_dims": 5,
            "tf.concat": 5,
            "tf.int32": 1,
            "tf.squeeze": 1,
            "tf.tensor_scatter_nd_update": 1,
            "tf.zeros_like": 1,
            "tf.argsort": 2,
            "tf.gather": 1,
            "tf.newaxis": 1
        },
        "coverage_percentage": 40.0,
        "total_covered": 2,
        "total_in_target": 5,
        "parsed_constants": [
            [
                0,
                2,
                -1
            ],
            [
                0,
                2,
                2,
                1,
                1
            ],
            [
                2,
                0,
                0,
                2
            ],
            [
                2,
                0
            ],
            [
                2,
                0
            ],
            [
                0,
                1,
                1
            ],
            [
                1,
                0,
                1,
                1,
                1,
                1
            ],
            [
                2,
                0
            ],
            [
                1,
                1,
                0
            ],
            [
                0,
                2,
                2,
                0,
                1
            ],
            [
                2,
                0
            ],
            [
                2,
                0
            ],
            [
                0,
                1,
                2,
                2,
                2,
                0
            ],
            [
                2,
                0
            ],
            [
                0,
                2,
                1
            ],
            [
                0,
                -1,
                1,
                1
            ],
            [
                2,
                0
            ],
            [
                0,
                1,
                1,
                2,
                1,
                0
            ],
            [
                0,
                1,
                2,
                -1
            ],
            [
                2,
                0
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            -1
        ],
        "constant_counts": [
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 1,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 6,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 9,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 3,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 7,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 1,
            "tf_bool": 0,
            "axis": 21,
            "tf_float32": 0,
            "input_var": 47,
            "tf_int64": 1,
            "provided": 0,
            "shape": 0,
            "shape_tuple": 0,
            "common": 46
        }
    },
    {
        "name": "stackoverflow_01",
        "description": "reshape by separating and duplicating columns",
        "target_program": "tf.transpose(tf.cast((in1, in1), tf.float32))",
        "source": "https://stackoverflow.com/questions/40441503/tensorflow-tensor-reshape",
        "constants": "[]",
        "examples": {
            "inputs": "[[[5., 2.], [1., 3.], [0., -1.]],]",
            "outputs": "[[[5., 5.], [1., 1.], [0., 0.]],    [[2., 2.], [3., 3.], [-1., -1.]]]"
        },
        "completions": [
            "```python\ndef transform(in1):\n    return tf.stack([in1[:, 0], in1[:, 0]], axis=2), tf.stack([in1[:, 1], in1[:, 1]], axis=2)\n```",
            "```python\noutput = tf.stack([in1, in1], axis=2)\noutput = tf.transpose(output, [0, 2, 1])\nreturn output\n```",
            "```python\ndef transform(in1):\n    return tf.stack([in1[:, 0], in1[:, 0], in1[:, 1], in1[:, 1]], axis=1)\n```",
            "```python\nresult = tf.reshape(in1, [3, 2, 2])\n```",
            "```python\nresult = tf.stack([in1[:, 0], in1[:, 0]], axis=2)\nresult = tf.concat([tf.expand_dims(result, axis=1), tf.stack([in1[:, 1], in1[:, 1]], axis=2)], axis=1)\nreturn result\n```",
            "```python\ndef transform(in1):\n    return tf.stack([in1, in1], axis=1)\n```  ",
            "```python\ndef transform(in1):\n    reshaped = tf.tile(tf.expand_dims(in1, axis=0), [2, 1, 1])\n    return reshaped\n```",
            "```python\ndef transform(in1):\n    reshaped = tf.stack([in1[:, 0], in1[:, 0], in1[:, 1], in1[:, 1]], axis=1)\n    reshaped = tf.transpose(reshaped, perm=[1, 0, 2])\n    return reshaped\n```",
            "```python\ndef transform(in1):\n    return tf.transpose(tf.stack([in1, in1], axis=1), perm=[2, 0, 1])\n```",
            "```python\nimport tensorflow as tf\n\ndef transform(in1):\n    col1 = tf.expand_dims(in1[:, 0], axis=1)\n    col2 = tf.expand_dims(in1[:, 1], axis=1)\n    reshaped = tf.concat([col1, col1, col2, col2], axis=1)\n    return tf.reshape(reshaped, [-1, 2, 2])\n```",
            "```python\ndef transform(in1):\n    return tf.tile(tf.expand_dims(in1, axis=1), multiples=[1, 2, 1])\n```",
            "```python\ndef transform(in1):\n    out1 = tf.stack([in1[:, 0], in1[:, 0]], axis=1)\n    out2 = tf.stack([in1[:, 1], in1[:, 1]], axis=1)\n    return tf.stack([out1, out2], axis=1)\n```",
            "```python\ndef transform(in1):\n    return tf.stack([in1, in1], axis=2)\n```",
            "```python\ndef transform(input_tensor):\n    transposed = tf.transpose(input_tensor)\n    reshaped = tf.stack([transposed, transposed], axis=2)\n    return reshaped\n```",
            "```python\ndef transform(in1):\n    return tf.stack([in1, in1], axis=2)\n```",
            "```python\ndef transform(in1):\n    return tf.stack([in1[:, 0], in1[:, 0], in1[:, 1], in1[:, 1]], axis=1)\n```",
            "```python\ndef transform(in1):\n    return tf.stack([in1, in1], axis=2)\n```",
            "```python\ndef transform(in1):\n    return tf.stack([in1[:,0], in1[:,0]], axis=2), tf.stack([in1[:,1], in1[:,1]], axis=2)\n```",
            "```python\ndef transform(in1):\n    res1 = tf.expand_dims(in1, axis=-1)\n    res2 = tf.tile(res1, multiples=[1, 1, 2])\n    return res2\n```",
            "```python\ndef transform(in1):\n    return tf.reshape(tf.tile(in1, [1, 2]), [3, 2, 2])\n```"
        ],
        "tf_operators": {
            "tf.stack": 14,
            "tf.transpose": 4,
            "tf.reshape": 3,
            "tf.expand_dims": 5,
            "tf.concat": 2,
            "tf.tile": 4
        },
        "coverage_percentage": 33.33333333333333,
        "total_covered": 1,
        "total_in_target": 3,
        "parsed_constants": [
            [
                0,
                0,
                2,
                1,
                1,
                2
            ],
            [
                2,
                0,
                2,
                1
            ],
            [
                0,
                0,
                1,
                1,
                1
            ],
            [
                3,
                2,
                2
            ],
            [
                0,
                0,
                2,
                1,
                1,
                1,
                2,
                1
            ],
            [
                1
            ],
            [
                0,
                2,
                1,
                1
            ],
            [
                0,
                0,
                1,
                1,
                1,
                1,
                0,
                2
            ],
            [
                1,
                2,
                0,
                1
            ],
            [
                0,
                1,
                1,
                1,
                1,
                -1,
                2,
                2
            ],
            [
                1,
                1,
                2,
                1
            ],
            [
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            [
                2
            ],
            [
                2
            ],
            [
                2
            ],
            [
                0,
                0,
                1,
                1,
                1
            ],
            [
                2
            ],
            [
                0,
                0,
                2,
                1,
                1,
                2
            ],
            [
                -1,
                1,
                1,
                2
            ],
            [
                1,
                2,
                3,
                2,
                2
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            3,
            -1
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 2,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 3,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 0,
            "tf_bool": 0,
            "axis": 24,
            "tf_float32": 0,
            "input_var": 48,
            "tf_int64": 0,
            "provided": 0,
            "shape": 2,
            "shape_tuple": 0,
            "common": 30
        }
    },
    {
        "name": "stackoverflow_02",
        "description": "clip values that are greater than 1",
        "target_program": "tf.minimum(in1, tf.constant(1))",
        "source": "https://stackoverflow.com/questions/46408839/tensorflow-trim-values-in-tensor",
        "constants": "[1]",
        "examples": {
            "inputs": "[[5, 1, 0, 3, 0, -1, 2, -10, 2],]",
            "outputs": "[[1, 1, 0, 1, 0, -1, 1, -10, 1]]"
        },
        "completions": [
            "```python\ndef transform(in1):\n    clipped_values = tf.clip_by_value(in1, clip_value_min=-np.inf, clip_value_max=1)\n    return clipped_values\n```",
            "```python\ndef transform(in1):\n    clipped_values = tf.clip_by_value(in1, clip_value_min=-float('inf'), clip_value_max=1)\n    return clipped_values\n```",
            "```python\ndef transform(in1):\n    return tf.clip_by_value(in1, clip_value_min=None, clip_value_max=1)\n```",
            "```python\ndef transform(in1):\n    result = tf.clip_by_value(in1, clip_value_min=-np.inf, clip_value_max=1)\n    return result\n```",
            "```python\ndef transform(in1):\n    clipped_values = tf.clip_by_value(in1, clip_value_min=-np.inf, clip_value_max=1)\n    return clipped_values\n```",
            "```python\ndef transform(in1):\n    return tf.clip_by_value(in1, clip_value_min=-1e9, clip_value_max=1)\n```",
            "```python\ndef transform(in1):\n    clipped_values = tf.clip_by_value(in1, clip_value_min=-np.inf, clip_value_max=1)\n    return clipped_values\n```",
            "```python\ndef transform(in1):\n    return tf.clip_by_value(in1, clip_value_min=-np.inf, clip_value_max=1)\n```",
            "```python\ndef transform(in1):\n    clipped_values = tf.clip_by_value(in1, clip_value_min=-np.inf, clip_value_max=1)\n    return clipped_values\n```",
            "```python\ndef transform(in1):\n    return tf.clip_by_value(in1, clip_value_min=None, clip_value_max=1)\n```",
            "```python\ndef transform(in1):\n    return tf.minimum(in1, 1)\n```",
            "```python\ndef transform(in1):\n    return tf.clip_by_value(in1, clip_value_min=-np.inf, clip_value_max=1)\n```",
            "```python\ndef transform(in1):\n    return tf.clip_by_value(in1, clip_value_min=-np.inf, clip_value_max=1)\n```",
            "```python\ndef transform(in1):\n    return tf.clip_by_value(in1, clip_value_min=None, clip_value_max=1)\n```",
            "```python\ndef transform(in1):\n    return tf.clip_by_value(in1, clip_value_min=-float('inf'), clip_value_max=1)\n```",
            "```python\ndef transform(in1):\n    return tf.minimum(in1, 1)\n```",
            "```python\nresult = tf.clip_by_value(in1, clip_value_min=-float('inf'), clip_value_max=1)\n```",
            "```python\ndef transform(in1):\n    clipped_values = tf.clip_by_value(in1, clip_value_min=-float('inf'), clip_value_max=1)\n    return clipped_values\n```",
            "```python\ndef transform(in1):\n    return tf.minimum(in1, 1)\n```",
            "```python\ndef transform(in1):\n    clipped_values = tf.clip_by_value(in1, clip_value_min=None, clip_value_max=1)\n    return clipped_values\n```"
        ],
        "tf_operators": {
            "tf.clip_by_value": 17,
            "tf.minimum": 3
        },
        "coverage_percentage": 50.0,
        "total_covered": 1,
        "total_in_target": 2,
        "parsed_constants": [
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                -1000000000.0,
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ]
        ],
        "all_constants": [
            -1000000000.0,
            1
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 0,
            "tf_bool": 0,
            "axis": 0,
            "tf_float32": 0,
            "input_var": 20,
            "tf_int64": 0,
            "provided": 0,
            "shape": 0,
            "shape_tuple": 0,
            "common": 20
        }
    },
    {
        "name": "stackoverflow_03",
        "description": "replace certain columns with columns from the other tensor",
        "target_program": "tf.reduce_sum(tf.one_hot(tf.range(3, 5), depth=in1.shape[1], dtype=tf.int32), axis=0) * in2 + (1 - tf.reduce_sum(tf.one_hot(tf.range(3, 5), depth=in1.shape[1], dtype=tf.int32), axis=0)) * in1",
        "source": "https://stackoverflow.com/questions/44657388/how-to-replace-certain-values-in-tensorflow-tensor-with-the-values-of-the-other",
        "constants": "[3, 4, 5]",
        "examples": {
            "inputs": "[[[11, 22, 33, 44, 55, 66, 77], [70, 60, 50, 40, 30, 20, 10]],[[-9, -8, -7, -6, -5, -4, -3], [11, 12, 13, 14, 15, 16, 17]],]",
            "outputs": "[[[11, 22, 33, -6, -5, 66, 77], [70, 60, 50, 14, 15, 20, 10]]]"
        },
        "completions": [
            "```python\nresult = tf.tensor_scatter_nd_update(in1, tf.constant([[0, 3], [1, 3]]), tf.gather(in2, tf.constant([3, 3]), axis=1))\nreturn tf.expand_dims(result, axis=0)\n```",
            "```python\nresult = tf.tensor_scatter_nd_update(in1, tf.constant([[0, 3], [1, 3]]), tf.gather(tf.transpose(in2), [3, 3], axis=0))\nreturn tf.expand_dims(result, axis=0)\n```",
            "```python\ndef transform(in1, in2):\n    in1[:, 3:5] = in2[:, 3:5]\n    return tf.constant(in1)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.concat([in1[:, :3], in2[:, 3:], in1[:, 5:]], axis=1)\n```",
            "```python\nreturn tf.tensor_scatter_nd_update(in1, [[0, 3], [1, 3], [0, 4], [1, 4]], tf.gather(in2, [3, 3, 4, 4], axis=1))\n```",
            "```python\n    out = tf.tensor_scatter_nd_update(in1, [[0, 3], [0, 4]], tf.gather(in2, [0, 0]))\n    out = tf.tensor_scatter_nd_update(out, [[1, 3], [1, 4]], tf.gather(in2, [1, 1]))\n    return out\n```",
            "```python\ndef transform(in1, in2):\n    result = tf.tensor_scatter_nd_update(in1, [[0, 3], [0, 4], [1, 3],[1, 4]], tf.gather(in2, [3, 4, 3, 4], axis=1))\n    return result\n```",
            "```python\noutput = tf.tensor_scatter_nd_update(in1, tf.constant([[0, 3], [1, 3]]), tf.gather(in2, tf.constant([[0], [1]], axis=1)))\nreturn output\n```",
            "```python\noutput = tf.tensor_scatter_nd_update(in1, [[0, 3], [0, 4], [1, 3], [1, 4]], tf.gather(in2, [3, 4, 3, 4], axis=1))\nreturn output\n```",
            "```python\nresult = tf.tensor_scatter_nd_update(in1, [[0, 3], [0, 4], [1, 3], [1, 4], [1, 5]], tf.gather(in2, [0, 1, 2, 3, 4], axis=1))\nreturn result\n```",
            "```python\ntf.concat([in1[:, :3], in2[:, 3:5], in1[:, 5:]], axis=1)\n```",
            "```python\nresult = tf.tensor_scatter_nd_update(in1, [[0, 3], [1, 3], [0, 4], [1, 4]], tf.gather_nd(in2, [[0, 3], [1, 3], [0, 4], [1, 4]]))\nreturn result\n```",
            "```python\noutput = tf.tensor_scatter_nd_update(in1, tf.constant([[0, 3], [1, 3]]), tf.gather(in2, [3, 3]))\nreturn output\n```",
            "```python\nout = tf.tensor_scatter_nd_update(in1, tf.constant([[0, 3], [1, 3]]), tf.gather(in2, [3, 3]))\nreturn tf.expand_dims(out, axis=0)\n```",
            "```python\nresult = tf.tensor_scatter_nd_update(in1, [[0, 3], [0, 4], [1, 3], [1, 4]], tf.gather(in2, [3, 4, 3, 4], axis=1))\nreturn result\n```",
            "```python\nreturn tf.tensor_scatter_nd_update(in1, [[0, 3], [1, 3], [0, 4], [1, 4]], tf.gather(in2, [[0, 3], [1, 4]]))\n```",
            "```python\nout = tf.tensor_scatter_nd_update(in1, tf.constant([[0, 3], [1, 3]]), tf.gather(in2, [2, 3]))\n```",
            "```python\nreturn tf.tensor_scatter_nd_update(in1, tf.constant([[0, 3], [1, 3]]), tf.gather(in2, [0, 1], axis=0))\n```",
            "```python\n    out = tf.tensor_scatter_nd_update(in1, tf.constant([[0, 3], [1, 3]]), tf.gather(in2, [3, 3]))\n    return tf.expand_dims(out, axis=0)\n```",
            "```python\nresult = tf.tensor_scatter_nd_update(in1, [[0, 3], [0, 4], [1, 3], [1, 4]], tf.gather(in2, [3, 4, 3, 4], axis=1))\nreturn result\n```"
        ],
        "tf_operators": {
            "tf.tensor_scatter_nd_update": 17,
            "tf.expand_dims": 4,
            "tf.gather": 16,
            "tf.constant": 9,
            "tf.transpose": 1,
            "tf.concat": 2,
            "tf.gather_nd": 1
        },
        "coverage_percentage": 0.0,
        "total_covered": 0,
        "total_in_target": 4,
        "parsed_constants": [
            [
                0,
                3,
                1,
                3,
                3,
                3,
                1,
                0
            ],
            [
                0,
                3,
                1,
                3,
                3,
                3,
                0,
                0
            ],
            [
                3,
                5,
                3,
                5
            ],
            [
                3,
                3,
                5,
                1
            ],
            [
                0,
                3,
                1,
                3,
                0,
                4,
                1,
                4,
                3,
                3,
                4,
                4,
                1
            ],
            [
                0,
                3,
                0,
                4,
                0,
                0,
                1,
                3,
                1,
                4,
                1,
                1
            ],
            [
                0,
                3,
                0,
                4,
                1,
                3,
                1,
                4,
                3,
                4,
                3,
                4,
                1
            ],
            [
                0,
                3,
                1,
                3,
                0,
                1,
                1
            ],
            [
                0,
                3,
                0,
                4,
                1,
                3,
                1,
                4,
                3,
                4,
                3,
                4,
                1
            ],
            [
                0,
                3,
                0,
                4,
                1,
                3,
                1,
                4,
                1,
                5,
                0,
                1,
                2,
                3,
                4,
                1
            ],
            [
                3,
                3,
                5,
                5,
                1
            ],
            [
                0,
                3,
                1,
                3,
                0,
                4,
                1,
                4,
                0,
                3,
                1,
                3,
                0,
                4,
                1,
                4
            ],
            [
                0,
                3,
                1,
                3,
                3,
                3
            ],
            [
                0,
                3,
                1,
                3,
                3,
                3,
                0
            ],
            [
                0,
                3,
                0,
                4,
                1,
                3,
                1,
                4,
                3,
                4,
                3,
                4,
                1
            ],
            [
                0,
                3,
                1,
                3,
                0,
                4,
                1,
                4,
                0,
                3,
                1,
                4
            ],
            [
                0,
                3,
                1,
                3,
                2,
                3
            ],
            [
                0,
                3,
                1,
                3,
                0,
                1,
                0
            ],
            [
                0,
                3,
                1,
                3,
                3,
                3,
                0
            ],
            [
                0,
                3,
                0,
                4,
                1,
                3,
                1,
                4,
                3,
                4,
                3,
                4,
                1
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            3,
            4,
            5
        ],
        "constant_counts": [
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 4,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 4,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 4,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 3,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 0,
                "shape": 0,
                "provided": 8,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 8,
                "axis": 0,
                "shape": 0,
                "provided": 4,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 0,
                "shape": 0,
                "provided": 8,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 0,
                "shape": 0,
                "provided": 8,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 8,
                "axis": 1,
                "shape": 0,
                "provided": 7,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 4,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 8,
                "axis": 0,
                "shape": 0,
                "provided": 8,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 4,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 4,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 0,
                "shape": 0,
                "provided": 8,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 6,
                "axis": 0,
                "shape": 0,
                "provided": 6,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 3,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 4,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 0,
                "shape": 0,
                "provided": 8,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 0,
            "tf_bool": 0,
            "axis": 2,
            "tf_float32": 0,
            "input_var": 44,
            "tf_int64": 0,
            "provided": 103,
            "shape": 0,
            "shape_tuple": 0,
            "common": 85
        }
    },
    {
        "name": "stackoverflow_04",
        "description": "index into the tensor",
        "target_program": "tf.gather_nd(in1, tf.stack((in2, in3), axis=-1))",
        "source": "https://stackoverflow.com/questions/33736795/tensorflow-numpy-like-tensor-indexing",
        "constants": "[]",
        "examples": {
            "inputs": "[  [[5., 2.], [1., 3.], [0., -1.]]]",
            "outputs": "[[[5., 5.], [1., 1.], [0., 0.]],  [[2., 2.], [3., 3.], [-1., -1.]]]"
        },
        "completions": [
            "```python\ndef transform(in1):\n    return tf.gather_nd(in1, tf.constant([[0],[1]]))\n``` ",
            "```python\ndef transform(in1):\n    return tf.repeat(tf.expand_dims(in1, axis=0), 2, axis=0)\n```",
            "```python\ndef transform(in1):\n    return tf.gather_nd(in1, [[0], [1], [2], [0], [1], [2]])\n```",
            "```python\ndef transform(in1):\n    return tf.gather_nd(in1, tf.constant([[0], [1], [2]]))\n```",
            "```python\ndef transform(in1):\n    return tf.gather_nd(in1, [[0], [1], [2]])\n```",
            "```python\ndef transform(in1):\n    return tf.gather_nd(in1, indices=[[0],[0]])[:,:,tf.newaxis]\n```",
            "```python\ndef transform(in1):\n    return tf.gather_nd(in1, [[0], [1], [2]])\n```",
            "```python\ndef transform(in1):\n    return tf.gather_nd(in1, tf.constant([[0], [0], [0], [1], [1], [1]]))\n```",
            "```python\ndef transform(in1):\n    return tf.gather_nd(in1, tf.constant([[0],[2]]))\n```",
            "```python\ndef transform(in1):\n    return tf.gather_nd(in1, tf.constant([[0], [1]]))\n```",
            "```python\ndef transform(in1):\n    return tf.roll(in1, shift=1, axis=0)\n```",
            "```python\ndef transform(in1):\n    indices = [[0], [1], [2]]\n    return tf.gather_nd(in1, indices)\n```",
            "```python\ndef transform(in1):\n    return tf.scatter_nd(indices=tf.expand_dims(in1, axis=-1), updates=in1, shape=(2, 3, 2))\n```  ",
            "```python\ndef transform(in1):\n    return tf.gather_nd(in1, [[0], [1], [2]])\n```",
            "```python\ndef transform(in1):\n    return tf.gather_nd(in1, [[0], [1]])\n```",
            "```python\ndef transform(in1):\n    return tf.gather_nd(in1, [[0], [1], [2]])\n```",
            "```python\ndef transform(in1):\n    return tf.gather_nd(in1, [[0], [1], [2]])\n```",
            "```python\ndef transform(in1):\n    return tf.expand_dims(in1, axis=0)\n```",
            "```python\ndef transform(in1):\n    return tf.gather_nd(in1, [[0], [1], [2]])\n```",
            "```python\ndef transform(in1):\n    return tf.gather_nd(in1, tf.constant([[0], [1]]))\n```"
        ],
        "tf_operators": {
            "tf.gather_nd": 16,
            "tf.constant": 6,
            "tf.expand_dims": 3,
            "tf.repeat": 1,
            "tf.newaxis": 1,
            "tf.roll": 1,
            "tf.scatter_nd": 1
        },
        "coverage_percentage": 50.0,
        "total_covered": 1,
        "total_in_target": 2,
        "parsed_constants": [
            [
                0,
                1
            ],
            [
                0,
                2,
                0
            ],
            [
                0,
                1,
                2,
                0,
                1,
                2
            ],
            [
                0,
                1,
                2
            ],
            [
                0,
                1,
                2
            ],
            [
                0,
                0
            ],
            [
                0,
                1,
                2
            ],
            [
                0,
                0,
                0,
                1,
                1,
                1
            ],
            [
                0,
                2
            ],
            [
                0,
                1
            ],
            [
                1,
                0
            ],
            [
                0,
                1,
                2
            ],
            [
                -1,
                2,
                3,
                2
            ],
            [
                0,
                1,
                2
            ],
            [
                0,
                1
            ],
            [
                0,
                1,
                2
            ],
            [
                0,
                1,
                2
            ],
            [
                0
            ],
            [
                0,
                1,
                2
            ],
            [
                0,
                1
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            3,
            -1
        ],
        "constant_counts": [
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 6,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 1
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 0,
            "tf_bool": 0,
            "axis": 12,
            "tf_float32": 0,
            "input_var": 23,
            "tf_int64": 0,
            "provided": 0,
            "shape": 0,
            "shape_tuple": 1,
            "common": 43
        }
    },
    {
        "name": "stackoverflow_05",
        "description": "tensor multiplication like np.tensordot",
        "target_program": "tf.tensordot(in1, in2, 1)",
        "source": "https://stackoverflow.com/questions/43067338/tensor-multiplication-in-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[[4, 3, 1], [6, 5, 2]],[[[5, 5]], [[1, 5]], [[6, 0]]],]",
            "outputs": "[[[29, 35]], [[47, 55]]]"
        },
        "completions": [
            "```python\noutput = tf.tensordot(in1, in2, axes=1)\nreturn output\n```",
            "```python\noutput = tf.tensordot(in1, in2, axes=1)\nreturn output\n```",
            "```python\noutput = tf.tensordot(in1, in2, axes=1)\nreturn output\n```",
            "```python\nresult = tf.tensordot(in1, in2, axes=1)\nreturn result\n```",
            "```python\nresult = tf.matmul(in1, in2)\nreturn result\n```",
            "```python\nreturn tf.tensordot(in1, in2, axes=1)\n```",
            "```python\nreturn tf.tensordot(in1, in2, axes=([1], [0]))\n```",
            "```python\nresult = tf.tensordot(in1, in2, axes=[[1],[0]])\nreturn result\n```",
            "```python\nreturn tf.tensordot(in1, in2, axes=1)\n```",
            "```python\noutput = tf.tensordot(in1, in2, axes=[[1], [0]])\nreturn output\n```",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "```python\nresult = tf.tensordot(in1, in2, axes=1)\nreturn result\n```",
            "```python\noutput = tf.tensordot(in1, in2, axes=1)\nreturn output\n```",
            "```python\nresult = tf.tensordot(in1, in2, axes=1)\nreturn result\n```",
            "```python\nreturn tf.tensordot(in1, in2, axes=1)\n```",
            "```python\nresult = tf.tensordot(in1, in2, axes=1)\nreturn result\n```",
            "```python\nreturn tf.tensordot(in1, in2, axes=1)\n```",
            "```python\noutput = tf.tensordot(in1, in2, axes=1)\nreturn output\n```",
            "```python\noutput = tf.tensordot(in1, in2, axes=1)\nreturn output\n```",
            "```python\noutput = tf.tensordot(in1, in2, axes=1)\nreturn output\n```"
        ],
        "tf_operators": {
            "tf.tensordot": 19,
            "tf.matmul": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 1,
        "total_in_target": 1,
        "parsed_constants": [
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ]
        ],
        "all_constants": [
            0,
            1
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 0,
            "tf_bool": 0,
            "axis": 0,
            "tf_float32": 0,
            "input_var": 40,
            "tf_int64": 0,
            "provided": 0,
            "shape": 0,
            "shape_tuple": 0,
            "common": 22
        }
    },
    {
        "name": "stackoverflow_06",
        "description": "binary tensor from vector indicating if elements are equal",
        "target_program": "tf.cast(tf.equal(in1, tf.expand_dims(in1, 1)), tf.float32)",
        "source": "https://stackoverflow.com/questions/47816231/create-binary-tensor-from-vector-in-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[3, 5, 0, 2, 3, 3, 0],]",
            "outputs": "[[1., 0., 0., 0., 1., 1., 0.],    [0., 1., 0., 0., 0., 0., 0.],    [0., 0., 1., 0., 0., 0., 1.],    [0., 0., 0., 1., 0., 0., 0.],    [1., 0., 0., 0., 1., 1., 0.],    [1., 0., 0., 0., 1., 1., 0.],    [0., 0., 1., 0., 0., 0., 1.]]"
        },
        "completions": [
            "```python\n    equal_matrix = tf.cast(tf.math.equal(tf.expand_dims(in1, 1), in1), tf.float32)\n    return equal_matrix\n```",
            "```python\ndef transform(in1):\n    equal_tensor = tf.equal(tf.expand_dims(in1, 1), in1)\n    return tf.cast(equal_tensor, tf.float32)\n```",
            "```python\ndef transform(in1):\n    equal_matrix = tf.cast(tf.math.equal(tf.expand_dims(in1, 1), in1), tf.float32)\n    return equal_matrix\n```",
            "```python\noutput = tf.equal(tf.expand_dims(in1, 1), in1)\nreturn tf.cast(output, tf.float32)\n```",
            "```python\ndef transform(in1):\n    equal_matrix = tf.math.equal(tf.expand_dims(in1, axis=1), tf.expand_dims(in1, axis=0))\n    return tf.cast(equal_matrix, tf.float32)\n```",
            "```python\ndef transform(in1):\n    return tf.cast(tf.equal(tf.expand_dims(in1, 1), in1), tf.float32)\n```",
            "```python\ndef transform(in1):\n    return tf.equal(tf.expand_dims(in1, axis=1), in1)\n```",
            "```python\n    equal_matrix = tf.equal(tf.expand_dims(in1, axis=-1), tf.expand_dims(in1, axis=0))\n    return tf.cast(equal_matrix, tf.float32)\n```",
            "```python\ndef transform(in1):\n    return tf.cast(tf.math.logical_and(tf.expand_dims(in1, axis=1), tf.expand_dims(in1, axis=0)), tf.float32)\n```",
            "```python\ndef transform(in1):\n    return tf.equal(tf.expand_dims(in1, -1), tf.expand_dims(in1, 0))\n```",
            "```python\ndef transform(in1):\n    return tf.cast(tf.equal(tf.expand_dims(in1, axis=1), tf.expand_dims(in1, axis=0)), tf.float32)\n```",
            "```python\nreturn tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))\n```",
            "```python\n    result = tf.equal(tf.expand_dims(in1, 1), in1)\n    return tf.cast(result, dtype=tf.float32)\n```",
            "```python\n    return tf.equal(tf.expand_dims(in1, 1), in1)\n```",
            "```python\ndef transform(in1):\n    return tf.cast(tf.math.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0)), tf.float32)\n```",
            "```python\ndef transform(in1):\n    return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))\n```",
            "```python\ndef transform(in1):\n    return tf.equal(tf.expand_dims(in1, 1), in1)\n```",
            "```python\ndef transform(in1):\n    return tf.equal(tf.expand_dims(in1, 0), tf.expand_dims(in1, 1))\n```",
            "```python\ndef transform(in1):\n    return tf.equal(tf.expand_dims(in1, axis=1), tf.expand_dims(in1, axis=0))\n```",
            "```python\ndef transform(in1):\n    equal_matrix = tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))\n    return tf.cast(equal_matrix, tf.float32)\n```"
        ],
        "tf_operators": {
            "tf.math.equal": 4,
            "tf.cast": 12,
            "tf.float32": 12,
            "tf.expand_dims": 20,
            "tf.equal": 15,
            "tf.math.logical_and": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 4,
        "total_in_target": 4,
        "parsed_constants": [
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                -1,
                0
            ],
            [
                1,
                0
            ],
            [
                -1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                0,
                1
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ]
        ],
        "all_constants": [
            0,
            1,
            -1
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 0,
            "tf_bool": 0,
            "axis": 0,
            "tf_float32": 12,
            "input_var": 40,
            "tf_int64": 0,
            "provided": 0,
            "shape": 0,
            "shape_tuple": 0,
            "common": 31
        }
    },
    {
        "name": "stackoverflow_08",
        "description": "(\\'select the values in the second tensor where the first tensor is greater than 1\\')",
        "target_program": "tf.boolean_mask(in2, tf.greater(in1, tf.constant(1)))",
        "source": "https://stackoverflow.com/questions/33769041/tensorflow-indexing-with-boolean-tensor",
        "constants": "[1]",
        "examples": {
            "inputs": "[[-1, 0, -3, 2, 1, 3, 5, -1, -9, 2, 10],[12, 3, 45, 6, 7, 8, 9, 87, 65, 4, 32],]",
            "outputs": "[6, 8, 9, 4, 32]"
        },
        "completions": [
            "```python\ndef transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```python\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "```python\ndef transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```python\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```python\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```python\n    out = tf.boolean_mask(in2, tf.greater(in1, 1))\n    return out\n```",
            "```python\ndef transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```python\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```python\n    output = tf.boolean_mask(in2, tf.greater(in1, 1))\n    return output\n```",
            "```python\nimport tensorflow as tf\n\ndef transform(in1, in2):\n    tensor1 = tf.constant(in1)\n    tensor2 = tf.constant(in2)\n    output = tf.boolean_mask(tensor2, tf.greater(tensor1, 1))\n    return output.numpy()\n```",
            "```python\ndef transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```python\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```"
        ],
        "tf_operators": {
            "tf.boolean_mask": 20,
            "tf.greater": 20,
            "tf.constant": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 3,
        "total_in_target": 3,
        "parsed_constants": [
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ]
        ],
        "all_constants": [
            1
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 0,
            "tf_bool": 0,
            "axis": 0,
            "tf_float32": 0,
            "input_var": 40,
            "tf_int64": 0,
            "provided": 0,
            "shape": 0,
            "shape_tuple": 0,
            "common": 20
        }
    },
    {
        "name": "stackoverflow_09",
        "description": "group items by value and get the group indices",
        "target_program": "tf.unique_with_counts(in1)[1]",
        "source": "https://stackoverflow.com/questions/53054668/assign-values-between-0-and-n-1-for-a-vector-of-length-l-with-n-different-eleme",
        "constants": "[]",
        "examples": {
            "inputs": "[[37, 42, 42, 37, 28, 15, 42, 15],]",
            "outputs": "[0, 1, 1, 0, 2, 3, 1, 3]"
        },
        "completions": [
            "```python\ndef transform(in1):\n    unique_values, unique_idx = tf.unique(in1)\n    return tf.gather(unique_idx, tf.argsort(unique_values))\n```",
            "```python\ndef transform(in1):\n    segment_ids = tf.argsort(in1, stable=True)\n    _, unique_indices = tf.unique(in1)\n    group_indices = tf.searchsorted(unique_indices, in1, side='left')\n    return group_indices\n```",
            "```python\ndef transform(in1):\n    group_indices = tf.math.segment_max(tf.argsort(in1), tf.argsort(in1))\n    return group_indices\n```",
            "```python\ndef transform(in1): \n    return tf.math.segment_max(in1, tf.range(tf.size(in1)))\n```",
            "```python\ndef transform(in1):\n    group_indices = tf.argsort(in1)\n    sorted_values = tf.gather(in1, group_indices)\n    unique_values, _ = tf.unique_with_counts(sorted_values)\n    group_indices = tf.searchsorted(unique_values, sorted_values)\n    return group_indices\n```  ",
            "```python\ndef transform(in1):\n    return tf.math.unsorted_segment_max(in1, tf.range(tf.size(in1)), tf.reduce_max(in1) + 1) - 1\n```",
            "```python\ndef transform(in1):\n    return tf.math.segment_max(in1, tf.range(tf.size(in1)))\n```",
            "```python\ndef transform(in1):\n    return tf.math.unsorted_segment_mean(tf.range(tf.size(in1)), in1, tf.reduce_max(in1) + 1)\n```",
            "```python\ndef transform(in1):\n    return tf.cast(tf.math.segment_max(tf.range(tf.size(in1)), in1), tf.int32)\n```",
            "```python\ndef transform(in1):\n    group_indices = tf.unique_with_counts(in1).y\n    return group_indices\n```",
            "```python\ndef transform(in1):\n    return tf.math.segment_max(tf.range(tf.shape(in1)[0]), in1)\n```",
            "```python\ndef transform(in1):\n    return tf.math.segment_mean(tf.argsort(in1), tf.argsort(in1))\n```",
            "```python\ndef transform(in1):\n    return tf.argsort(in1, stable=True)\n```",
            "```python\ndef transform(in1):\n    group_indices = tf.argmax(tf.math.segment_max(in1, tf.range(tf.size(in1))), axis=0)\n    return group_indices\n```",
            "```python\ndef transform(in1):\n    return tf.math.unsorted_segment_max(tf.range(tf.size(in1)), in1, tf.reduce_max(in1) + 1)\n```",
            "```python\ndef transform(in1):\n    unique_values, segment_ids = tf.unique(in1)\n    return segment_ids\n```",
            "```python\ndef transform(in1):\n    unique_values, idx = tf.unique(in1)\n    group_indices = tf.map_fn(lambda x: tf.argmax(tf.cast(tf.equal(in1, x), tf.int64)), unique_values)\n    group_indices = tf.gather(group_indices, idx)\n    return group_indices\n```",
            "```python\ndef transform(in1):\n    return tf.math.segment_max(in1, in1)\n```",
            "```python\ndef transform(in1):\n    unique_vals, idx = tf.unique(in1)\n    return idx\n```",
            "```python\ndef transform(in1):\n    return tf.math.unsorted_segment_max(tf.range(tf.size(in1)), in1, tf.reduce_max(in1) + 1)\n```  "
        ],
        "tf_operators": {
            "tf.argsort": 6,
            "tf.unique": 5,
            "tf.gather": 3,
            "tf.searchsorted": 2,
            "tf.math.segment_max": 7,
            "tf.size": 8,
            "tf.range": 9,
            "tf.unique_with_counts": 2,
            "tf.reduce_max": 4,
            "tf.math.unsorted_segment_max": 3,
            "tf.math.unsorted_segment_mean": 1,
            "tf.cast": 2,
            "tf.int32": 1,
            "tf.shape": 1,
            "tf.math.segment_mean": 1,
            "tf.argmax": 2,
            "tf.map_fn": 1,
            "tf.equal": 1,
            "tf.int64": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 1,
        "total_in_target": 1,
        "parsed_constants": [
            [],
            [],
            [],
            [],
            [],
            [
                1,
                1
            ],
            [],
            [
                1
            ],
            [],
            [],
            [
                0
            ],
            [],
            [],
            [
                0
            ],
            [
                1
            ],
            [],
            [],
            [],
            [],
            [
                1
            ]
        ],
        "all_constants": [
            0,
            1
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 1,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 1,
            "tf_bool": 0,
            "axis": 0,
            "tf_float32": 0,
            "input_var": 40,
            "tf_int64": 1,
            "provided": 0,
            "shape": 0,
            "shape_tuple": 0,
            "common": 9
        }
    },
    {
        "name": "stackoverflow_10",
        "description": "perform matrix multiplication",
        "target_program": "tf.matmul(tf.expand_dims(in1, -1), tf.expand_dims(in2, 1))",
        "source": "https://stackoverflow.com/questions/53094212/tensorflow-sxn-matrix-multiply-with-sxd-matrix-to-output-sxnxd-array",
        "constants": "[]",
        "examples": {
            "inputs": "[[[15, 10], [20, -5]],[[2, 3, 1], [-2, 5, 0]],]",
            "outputs": "[[[30, 45, 15], [20, 30, 10]],[[-40, 100, 0], [10, -25, 0]]]"
        },
        "completions": [
            "```python\n    return tf.matmul(in1, in2)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.matmul(in1, in2)\n```",
            "```python\n    return tf.matmul(in1, in2)\n```",
            "```python\n    return tf.matmul(in1, in2)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.matmul(in1, in2)\n```",
            "```python\n    return tf.matmul(in1, in2)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.matmul(in1, in2)\n```  ",
            "```python\n    return tf.matmul(in1, in2)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.matmul(in1, in2)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.matmul(in1, in2)\n```",
            "```python\n    return tf.matmul(in1, in2)\n```",
            "```python\n    return tf.matmul(in1, in2)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.matmul(in1, in2)\n```",
            "```python\n    return tf.matmul(in1, in2)\n```",
            "```python\n    return tf.matmul(in1, in2)\n```",
            "```python\n    return tf.matmul(in1, in2)\n```",
            "```python\n    return tf.matmul(in1, in2)\n```",
            "```python\n    return tf.matmul(in1, in2)\n```",
            "```python\n    return tf.matmul(in1, in2)\n```",
            "```python\n    return tf.matmul(in1, in2)\n```"
        ],
        "tf_operators": {
            "tf.matmul": 20
        },
        "coverage_percentage": 50.0,
        "total_covered": 1,
        "total_in_target": 2,
        "parsed_constants": [
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            []
        ],
        "all_constants": [],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 0,
            "tf_bool": 0,
            "axis": 0,
            "tf_float32": 0,
            "input_var": 40,
            "tf_int64": 0,
            "provided": 0,
            "shape": 0,
            "shape_tuple": 0,
            "common": 0
        }
    },
    {
        "name": "stackoverflow_11",
        "description": "count the number of occurences of each distinct number",
        "target_program": "tf.math.bincount(in1)",
        "source": "https://stackoverflow.com/questions/45194672/how-to-count-elements-in-tensorflow-tensor",
        "constants": "[]",
        "examples": {
            "inputs": "[[4, 0, 1, 1, 0, 4, 0, 0, 3, 4, 1],]",
            "outputs": "[4, 3, 0, 1, 3]"
        },
        "completions": [
            "```python\ndef transform(in1):\n    unique_values, _ = tf.unique_with_counts(in1)\n    return unique_values\n```",
            "```python\ndef transform(in1):\n    return tf.math.bincount(in1)\n```",
            "```python\ndef transform(in1):\n    return tf.math.bincount(in1)\n```",
            "```python\ndef transform(in1):\n    return tf.math.bincount(in1)\n```",
            "```python\n    unique_values, _, counts = tf.unique_with_counts(in1)\n    return unique_values, counts\n```",
            "```python\n    counts = tf.math.unsorted_segment_sum(tf.ones_like(in1), in1, tf.reduce_max(in1)+1)\n    return tf.boolean_mask(counts, tf.not_equal(counts, 0))\n```",
            "```python\ndef transform(in1):\n    return tf.math.segment_sum(tf.ones_like(in1, dtype=tf.int32), in1)\n```",
            "```python\ndef transform(input_tensor):\n    counts = tf.math.bincount(input_tensor)\n    return tf.boolean_mask(counts, tf.not_equal(counts, 0))\n```",
            "```python\ndef transform(in1):\n    count = tf.math.bincount(in1)\n    return tf.boolean_mask(count, tf.not_equal(count, 0))\n```",
            "```python\ndef transform(in1):\n    return tf.math.bincount(in1)\n```",
            "```python\ndef transform(in1):\n    return tf.math.bincount(in1)\n```",
            "```python\ndef transform(in1):\n    unique_numbers, _, counts = tf.unique_with_counts(in1)\n    return counts\n```",
            "```python\n    counts = tf.math.bincount(in1)\n    return counts[counts > 0]\n```",
            "```python\n    counts = tf.math.bincount(in1)\n    return tf.boolean_mask(counts, tf.not_equal(counts, 0))\n```",
            "```python\nresult = tf.math.bincount(in1)\nreturn result[result > 0]\n```",
            "```python\ndef transform(in1):\n    return tf.math.bincount(in1)\n```",
            "```python\ndef transform(in1):\n    counts = tf.math.bincount(in1)\n    return counts[counts > 0]\n```",
            "```python\ndef transform(in1):\n    counts = tf.math.segment_sum(tf.ones_like(in1), in1)\n    unique_numbers = tf.math.segment_max(in1, in1)\n    return counts[unique_numbers]\n```",
            "```python\ndef transform(in1):\n    return tf.math.bincount(in1)\n```",
            "```python\ndef transform(in1):\n    unique_numbers, _, counts = tf.unique_with_counts(in1)\n    return counts\n```"
        ],
        "tf_operators": {
            "tf.unique_with_counts": 4,
            "tf.math.bincount": 13,
            "tf.not_equal": 4,
            "tf.ones_like": 3,
            "tf.reduce_max": 1,
            "tf.math.unsorted_segment_sum": 1,
            "tf.boolean_mask": 4,
            "tf.int32": 1,
            "tf.math.segment_sum": 2,
            "tf.math.segment_max": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 1,
        "total_in_target": 1,
        "parsed_constants": [
            [],
            [],
            [],
            [],
            [],
            [
                1,
                0
            ],
            [],
            [
                0
            ],
            [
                0
            ],
            [],
            [],
            [],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [],
            [
                0
            ],
            [],
            [],
            []
        ],
        "all_constants": [
            0,
            1
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 1,
            "tf_bool": 0,
            "axis": 0,
            "tf_float32": 0,
            "input_var": 26,
            "tf_int64": 0,
            "provided": 0,
            "shape": 0,
            "shape_tuple": 0,
            "common": 8
        }
    },
    {
        "name": "stackoverflow_12",
        "description": "remove a column from the tensor",
        "target_program": "tf.gather(in1, (0, 2), axis=1, batch_dims=0)",
        "source": "https://stackoverflow.com/questions/47447183/remove-a-set-of-tensors-from-a-tensor-in-tensorflow",
        "constants": "[0, 1, 2]",
        "examples": {
            "inputs": "[[[12, 34, 56], [33, 22, 11]]]",
            "outputs": "[[12, 56], [33, 11]]"
        },
        "completions": [
            "```python\nresult = tf.concat([in1[:, 0:1], in1[:, 2:3]], axis=1)\nreturn result\n```",
            "```python\nresult = tf.slice(in1, [0, 0], [tf.shape(in1)[0], 1])\nresult = tf.concat([result, tf.slice(in1, [0, 2], [tf.shape(in1)[0], 1])], axis=1)\nreturn result\n```",
            "```python\nresult = tf.concat([in1[:, :1], in1[:, 2:]], axis=1)\nreturn result\n```",
            "```python\nout = tf.concat([in1[:, :1], in1[:, 2:]], axis=1)\nreturn out\n```",
            "```python\nresult = tf.gather(in1, [0, 2], axis=1)\nreturn result\n```",
            "```python\nresult = tf.concat([in1[:,0:1], in1[:,2:3]], axis=1)\nreturn result\n```",
            "```python\nresult = tf.concat([in1[:, :1], in1[:, 2:]], axis=1)\nreturn result\n```",
            "```python\nresult = tf.concat([in1[:,0:1], in1[:,2:3]], axis=1)\nreturn result\n```",
            "```python\nresult = tf.gather(in1, [0, 2], axis=1)\nreturn result\n```",
            "```python\nresult = tf.gather(in1, [0, 2], axis=1)\nreturn result\n```",
            "```python\nresult = tf.concat([in1[:, 0:1], in1[:, 2:3]], axis=1)\nreturn result\n```",
            "```python\nresult = tf.gather(in1, [0, 2], axis=1)\nreturn result\n```",
            "```python\nresult = tf.concat([in1[:,0:1], in1[:,2:3]], axis=1)\nreturn result\n```",
            "```python\nresult = tf.gather(in1, indices=[0, 2], axis=1)\nreturn result\n```",
            "```python\nresult = tf.stack([in1[:,0], in1[:,2]], axis=1)\nreturn result\n```",
            "```python\ndef transform(in1):\n    return tf.stack([in1[:,0], in1[:,2]], axis=1)\n```",
            "```python\ndef transform(in1):\n    return tf.concat([in1[:,0:1], in1[:,2:3]], axis=1)\n```",
            "```python\ndef transform(in1):\n    return tf.gather(in1, [0, 2], axis=1)\n```",
            "```python\ndef transform(in1):\n    return in1[:, [0, 2]]\n```",
            "```python\nresult = tf.concat([in1[:, 0:1], in1[:, 2:3]], axis=1)\nreturn result\n```"
        ],
        "tf_operators": {
            "tf.concat": 11,
            "tf.shape": 1,
            "tf.slice": 1,
            "tf.gather": 6,
            "tf.stack": 2
        },
        "coverage_percentage": 100.0,
        "total_covered": 1,
        "total_in_target": 1,
        "parsed_constants": [
            [
                0,
                1,
                2,
                3,
                1
            ],
            [
                0,
                0,
                0,
                1,
                0,
                2,
                0,
                1,
                1
            ],
            [
                1,
                2,
                1
            ],
            [
                1,
                2,
                1
            ],
            [
                0,
                2,
                1
            ],
            [
                0,
                1,
                2,
                3,
                1
            ],
            [
                1,
                2,
                1
            ],
            [
                0,
                1,
                2,
                3,
                1
            ],
            [
                0,
                2,
                1
            ],
            [
                0,
                2,
                1
            ],
            [
                0,
                1,
                2,
                3,
                1
            ],
            [
                0,
                2,
                1
            ],
            [
                0,
                1,
                2,
                3,
                1
            ],
            [
                0,
                2,
                1
            ],
            [
                0,
                2,
                1
            ],
            [
                0,
                2,
                1
            ],
            [
                0,
                1,
                2,
                3,
                1
            ],
            [
                0,
                2,
                1
            ],
            [
                0,
                2
            ],
            [
                0,
                1,
                2,
                3,
                1
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            3
        ],
        "constant_counts": [
            {
                "common": 3,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 8,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 0,
            "tf_bool": 0,
            "axis": 18,
            "tf_float32": 0,
            "input_var": 35,
            "tf_int64": 0,
            "provided": 0,
            "shape": 7,
            "shape_tuple": 0,
            "common": 50
        }
    },
    {
        "name": "stackoverflow_13",
        "description": "multiply vectors by tensor",
        "target_program": "tf.tensordot(in1, in2, (1, 1))",
        "source": "https://stackoverflow.com/questions/50777704/n-d-tensor-matrix-multiplication-with-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[[3, 5], [10, 2]],[[[1, 0], [5, 4]], [[3, 10], [2, -2]]],]",
            "outputs": "[[[28, 20], [19, 20]], [[20, 8], [34, 96]]]"
        },
        "completions": [
            "```python\nreturn tf.math.multiply(in1, in2)\n```",
            "```python\nreturn tf.tensordot(in2, in1, axes=1)\n```",
            "```python\nreturn tf.tensordot(in2, in1, axes=1)\n```",
            "```python\n     result = tf.tensordot(in2, in1, axes=1)\n     return result\n```  ",
            "```python\n    result = tf.tensordot(in2, in1, axes=1)\n    return result\n```",
            "```python\nreturn tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in2, in1, axes=1)\n```",
            "```python\nreturn tf.matmul(in2, in1)\n```",
            "```python\nresult = tf.tensordot(in2, in1, axes=1)\nreturn result\n```",
            "```python\nimport tensorflow as tf\n\ndef transform(in1, in2):\n    return tf.multiply(in2, in1[:,:,0:1]) + tf.multiply(2*in1[:,:,1:2], in2)\n```",
            "```python\n    return tf.tensordot(in2, in1, axes=1)\n```",
            "```python\nreturn tf.multiply(in1, in2)\n```",
            "```python\nresult = tf.tensordot(tf.expand_dims(in1, axis=-1), in2, axes=[[-1], [-1]])\nresult = tf.squeeze(result, axis=-1)\nreturn result\n```",
            "```python\nreturn tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in2, in1, axes=1).numpy()\n```",
            "```python\nresult = tf.tensordot(in2, in1, axes=1)\nresult = tf.transpose(result, perm=[0, 2, 1])\n```",
            "```python\n    return tf.matmul(in2, in1)\n```",
            "```python\nresult = tf.tensordot(in1, in2, axes=1)\nreturn result\n```",
            "```python\n    return tf.matmul(in2, in1)\n```",
            "```python\nreturn tf.tensordot(in2, in1, axes=[[2], [1]]).numpy()\n```"
        ],
        "tf_operators": {
            "tf.math.multiply": 1,
            "tf.tensordot": 14,
            "tf.matmul": 3,
            "tf.multiply": 2,
            "tf.expand_dims": 1,
            "tf.squeeze": 1,
            "tf.transpose": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 1,
        "total_in_target": 1,
        "parsed_constants": [
            [],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [],
            [
                1
            ],
            [
                0,
                1,
                2,
                1,
                2
            ],
            [
                1
            ],
            [],
            [
                -1,
                -1,
                -1,
                -1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [],
            [
                1
            ],
            [],
            [
                2,
                1
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            -1
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 0,
            "tf_bool": 0,
            "axis": 4,
            "tf_float32": 0,
            "input_var": 42,
            "tf_int64": 0,
            "provided": 0,
            "shape": 0,
            "shape_tuple": 0,
            "common": 22
        }
    },
    {
        "name": "stackoverflow_14",
        "description": "choose True if any value in a row is True, False otherwise",
        "target_program": "tf.reduce_any(in1, axis=-1)",
        "source": "https://stackoverflow.com/questions/35657003/aggregate-each-element-of-tensor-in-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[[[False, False, True],  [False, False, False],  [True, False, True],  [False, True, False],  [False, False, False],  [True, True, True],  [True, True, False]]],]",
            "outputs": "[[True, False, True, True, False, True, True]]"
        },
        "completions": [
            "```python\n    return tf.reduce_any(in1, axis=-1)\n```",
            "```python\ndef transform(in1):\n    return tf.reduce_any(in1, axis=-1)\n```",
            "```python\ndef transform(in1):\n    return tf.reduce_any(in1, axis=-1)\n```",
            "```python\ndef transform(in1):\n    return tf.reduce_any(in1, axis=2)\n```",
            "```python\n    return tf.reduce_any(in1, axis=-1)\n```",
            "```python\n    result = tf.reduce_any(in1, axis=2)\n    return result\n```",
            "```python\n    return tf.reduce_any(in1, axis=2)\n```",
            "```python\nreturn tf.reduce_any(in1, axis=-1)\n```",
            "```python\nresult = tf.reduce_any(in1, axis=1)\nreturn result\n```",
            "```python\ndef transform(in1):\n    return tf.reduce_any(in1, axis=1)\n```",
            "```python\n    return tf.reduce_any(in1, axis=1)\n```",
            "```python\ndef transform(in1):\n    return tf.reduce_any(in1, axis=-1)\n```",
            "```python\ndef transform(in1):\n    return tf.reduce_any(in1, axis=-1)\n```",
            "```python\n    row_any_true = tf.reduce_any(in1, axis=2)\n    return row_any_true\n```",
            "```python\n    return tf.reduce_any(in1, axis=2)\n```",
            "```python\nimport tensorflow as tf\n\ndef transform(in1):\n    return tf.reduce_any(in1, axis=2)\n```",
            "```python\n    return tf.reduce_any(in1, axis=1)\n```",
            "```python\n    return tf.reduce_any(in1, axis=1)\n```",
            "```python\n    return tf.reduce_any(in1, axis=-1)\n```",
            "```python\ndef transform(in1):\n    return tf.reduce_any(in1, axis=2)\n```"
        ],
        "tf_operators": {
            "tf.reduce_any": 20
        },
        "coverage_percentage": 100.0,
        "total_covered": 1,
        "total_in_target": 1,
        "parsed_constants": [
            [
                -1
            ],
            [
                -1
            ],
            [
                -1
            ],
            [
                2
            ],
            [
                -1
            ],
            [
                2
            ],
            [
                2
            ],
            [
                -1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                -1
            ],
            [
                -1
            ],
            [
                2
            ],
            [
                2
            ],
            [
                2
            ],
            [
                1
            ],
            [
                1
            ],
            [
                -1
            ],
            [
                2
            ]
        ],
        "all_constants": [
            1,
            2,
            -1
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 0,
            "tf_bool": 0,
            "axis": 7,
            "tf_float32": 0,
            "input_var": 20,
            "tf_int64": 0,
            "provided": 0,
            "shape": 0,
            "shape_tuple": 0,
            "common": 13
        }
    },
    {
        "name": "stackoverflow_15",
        "description": "set all instances of 1 to 0",
        "target_program": "tf.subtract(in1, tf.cast(tf.equal(in1, tf.constant(1)), tf.int32))",
        "source": "https://stackoverflow.com/questions/39045797/conditional-assignment-of-tensor-values-in-tensorflow",
        "constants": "[0, 1]",
        "examples": {
            "inputs": "[[3, 1, 2, 0, 1, -1, 10, 1, -10],]",
            "outputs": "[3, 0, 2, 0, 0, -1, 10, 0, -10]"
        },
        "completions": [
            "```python\ndef transform(in1):\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n```",
            "```python\ndef transform(in1):\n    return tf.where(tf.equal(in1, 1), 0, in1)\n```",
            "```python\ndef transform(in1):\n    return tf.where(tf.equal(in1, 1), 0, in1)\n```",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), 0, in1)",
            "```python\ndef transform(in1):\n    return tf.where(tf.equal(in1, 1), 0, in1)\n```",
            "```python\ndef transform(in1):\n    return tf.where(tf.equal(in1, 1), 0, in1)\n```",
            "```python\n    out = tf.where(tf.equal(in1, 1), 0, in1)\n    return out\n```",
            "```python\ndef transform(in1):\n    return tf.where(in1 == 1, 0, in1)\n```",
            "```python\ndef transform(in1):\n    out = tf.where(tf.equal(in1, 1), 0, in1)\n    return out\n```",
            "```python\ndef transform(in1):\n    return tf.where(tf.equal(in1, 1), 0, in1)\n```",
            "```python\ndef transform(in1):\n    result = tf.where(tf.equal(in1, 1), 0, in1)\n    return result\n```",
            "```python\nresult = tf.where(tf.equal(in1, 1), 0, in1)\nreturn result\n```",
            "```python\ndef transform(in1):\n    return tf.where(tf.equal(in1, 1), 0, in1)\n```",
            "```python\ndef transform(in1):\n    return tf.where(tf.equal(in1, 1), 0, in1)\n```",
            "```python\ndef transform(in1):\n    return tf.where(tf.equal(in1, 1), 0, in1)\n```",
            "```python\ndef transform(in1):\n    return tf.where(tf.equal(in1, 1), 0, in1)\n```",
            "```python\ndef transform(in1):\n    return tf.where(tf.equal(in1, 1), 0, in1)\n```",
            "```python\ndef transform(in1):\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n```",
            "```python\ndef transform(in1):\n    return tf.where(tf.equal(in1, 1), 0, in1)\n```",
            "```python\ndef transform(in1):\n    return tf.where(tf.equal(in1, 1), 0, in1)\n```"
        ],
        "tf_operators": {
            "tf.where": 20,
            "tf.equal": 19,
            "tf.zeros_like": 2
        },
        "coverage_percentage": 20.0,
        "total_covered": 1,
        "total_in_target": 5,
        "parsed_constants": [
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ]
        ],
        "all_constants": [
            0,
            1
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 0,
            "tf_bool": 0,
            "axis": 0,
            "tf_float32": 0,
            "input_var": 42,
            "tf_int64": 0,
            "provided": 0,
            "shape": 0,
            "shape_tuple": 0,
            "common": 38
        }
    },
    {
        "name": "stackoverflow_16",
        "description": "multiply tensors across the first axis",
        "target_program": "tf.multiply(in1, tf.expand_dims(in2, 1))",
        "source": "https://stackoverflow.com/questions/46240646/tensor-multiply-along-axis-in-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[[2, 5], [3, 0], [8, -7]],[4, 10, -6],]",
            "outputs": "[[8, 20], [30, 0], [-48, 42]]"
        },
        "completions": [
            "```python\ndef transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(in2, axis=1))\n```",
            "```python\noutput = tf.multiply(in1, tf.expand_dims(in2, axis=1))\n```",
            "```python\nresult = tf.multiply(in1, tf.expand_dims(in2, axis=1))\nreturn result\n```",
            "```python\noutput = tf.multiply(in1, tf.expand_dims(in2, axis=1))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(in2, axis=1))\n```",
            "```python\noutput = tf.multiply(in1, tf.expand_dims(in2, axis=1))\n```",
            "```python\nreturn tf.multiply(in1, tf.expand_dims(in2, axis=1))\n```",
            "```python\nresult = tf.multiply(in1, tf.expand_dims(in2, axis=1))\n```",
            "```python\noutput = tf.multiply(in1, tf.expand_dims(in2, 1))\n```",
            "```python\noutput = tf.multiply(in1, tf.expand_dims(in2, axis=1))\n```",
            "```python\noutput = tf.multiply(in1, tf.expand_dims(in2, axis=1))\n```",
            "```python\noutput = in1 * tf.expand_dims(in2, axis=1)\nreturn output\n```",
            "```python\nresult = tf.multiply(in1, tf.expand_dims(in2, axis=1))\nreturn result\n```",
            "```python\nresult = tf.multiply(in1, tf.expand_dims(in2, axis=1))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.multiply(tf.expand_dims(in1, axis=1), tf.expand_dims(in2, axis=0))\n```                                                                                                                                          ",
            "```python\nresult = tf.multiply(tf.expand_dims(in1, axis=1), tf.expand_dims(in2, axis=0))\n```",
            "```python\noutput = tf.multiply(in1, tf.expand_dims(in2, axis=1))\n```",
            "```python\nresult = tf.multiply(in1, tf.expand_dims(in2, axis=1))\n```",
            "```python\ntf.multiply(in1, tf.expand_dims(in2, axis=1))\n```",
            "```python\nresult = tf.multiply(in1, tf.expand_dims(in2, axis=1))\n```"
        ],
        "tf_operators": {
            "tf.expand_dims": 20,
            "tf.multiply": 19
        },
        "coverage_percentage": 100.0,
        "total_covered": 2,
        "total_in_target": 2,
        "parsed_constants": [
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ]
        ],
        "all_constants": [
            0,
            1
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 0,
            "tf_bool": 0,
            "axis": 0,
            "tf_float32": 0,
            "input_var": 40,
            "tf_int64": 0,
            "provided": 0,
            "shape": 0,
            "shape_tuple": 0,
            "common": 22
        }
    },
    {
        "name": "stackoverflow_17",
        "description": "duplicate each element of a tensor",
        "target_program": "tf.stack((in1, in1), axis=1)",
        "source": "https://stackoverflow.com/questions/51761353/about-tensor-of-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[17, -32, 99],]",
            "outputs": "[[17, 17], [-32, -32], [99, 99]]"
        },
        "completions": [
            "```python\ndef transform(in1):\n    return tf.repeat(in1, 2)\n```",
            "def transform(in1):\n    return tf.repeat(in1, 2)",
            "```python\ndef transform(in1):\n    return tf.repeat(in1, 2)\n```",
            "```python\ndef transform(in1):\n    return tf.repeat(in1, repeats=2)\n```",
            "```python\nresult = tf.stack([in1, in1], axis=1)\nreturn result\n```",
            "```python\ndef transform(in1):\n    return tf.repeat(in1, 2)\n```",
            "```python\ndef transform(in1):\n    return tf.repeat(in1, 2)\n```",
            "```python\ndef transform(input_tensor):\n    return tf.repeat(input_tensor, 2)\n```",
            "```python\ndef transform(in1):\n    return tf.repeat(in1, 2)\n```",
            "```python\ndef transform(in1):\n    return tf.repeat(in1, 2)\n```",
            "```python\ndef transform(in1):\n    return tf.repeat(in1, 2)\n```",
            "```python\ndef transform(in1):\n    return tf.repeat(in1, 2)\n```",
            "```python\ndef transform(in1):\n    return tf.repeat(in1, 2)\n```",
            "```python\ndef transform(in1):\n    return tf.repeat(in1, 2, axis=1)\n```",
            "```python\ndef transform(in1):\n    return tf.repeat(in1, 2)\n```",
            "```python\ndef transform(in1):\n    return tf.repeat(in1, 2)\n```",
            "```python\ndef transform(in1):\n    return tf.repeat(in1, 2)\n```  ",
            "```python\nresult = tf.stack([in1, in1], axis=1)\nreturn result\n```",
            "```python\ndef transform(in1):\n    return tf.repeat(in1, repeats=2, axis=1)\n```",
            "```python\n    return tf.repeat(in1, 2, axis=1)\n```"
        ],
        "tf_operators": {
            "tf.repeat": 18,
            "tf.stack": 2
        },
        "coverage_percentage": 100.0,
        "total_covered": 1,
        "total_in_target": 1,
        "parsed_constants": [
            [
                2
            ],
            [
                2
            ],
            [
                2
            ],
            [
                2
            ],
            [
                1
            ],
            [
                2
            ],
            [
                2
            ],
            [
                2
            ],
            [
                2
            ],
            [
                2
            ],
            [
                2
            ],
            [
                2
            ],
            [
                2
            ],
            [
                2,
                1
            ],
            [
                2
            ],
            [
                2
            ],
            [
                2
            ],
            [
                1
            ],
            [
                2,
                1
            ],
            [
                2,
                1
            ]
        ],
        "all_constants": [
            1,
            2
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 0,
            "tf_bool": 0,
            "axis": 0,
            "tf_float32": 0,
            "input_var": 22,
            "tf_int64": 0,
            "provided": 18,
            "shape": 0,
            "shape_tuple": 0,
            "common": 5
        }
    },
    {
        "name": "stackoverflow_18",
        "description": "multiply 3D tensor and 2D tensor and add another tensor",
        "target_program": "tf.add(in3, tf.matmul(in1, in2))",
        "source": "https://stackoverflow.com/questions/38222126/tensorflow-efficient-way-for-tensor-multiplication",
        "constants": "[]",
        "examples": {
            "inputs": "[[[[1, 1, 1], [1, 0, 1]], [[1, 2, 3], [4, 5, 6]]], [[1, 1, 1, 1], [1, 2, 3, 4], [5, 6, 7, 8]], [100, 200, 300, 400],]",
            "outputs": "[[[107, 209, 311, 413], [106, 207, 308, 409]], [[118, 223, 328, 433], [139, 250, 361, 472]]]"
        },
        "completions": [
            "```python\n    res = tf.add(tf.matmul(in1, in2), in3)\n    return res\n```",
            "```python\n    result = tf.add(tf.multiply(in1, in2), in3)\n    return result\n```",
            "```python\n    result = tf.add(tf.matmul(in1, in2), in3)\n    return result\n```",
            "```python\nreturn tf.add(tf.matmul(in1, in2), in3)\n```",
            "```python\n    mul_result = tf.multiply(in1, in2)\n    add_result = tf.add(mul_result, in3)\n    return add_result\n```",
            "```python\n     return tf.add(tf.matmul(in1, in2), in3)\n```",
            "```python\n    result = tf.add(tf.multiply(in1, in2), in3)\n    return result\n```",
            "```python\n    result = tf.add(tf.matmul(in1, in2), in3)\n    return result\n```",
            "```python\n    res = tf.add(tf.matmul(in1, in2), in3)\n    return res\n```",
            "```python\n     return tf.add(tf.matmul(in1, tf.expand_dims(in2, 0)), in3)\n```",
            "```python\n    res = tf.add(tf.matmul(in1, in2), in3)\n    return res\n```",
            "```python\n    result = tf.add(tf.matmul(in1, in2), in3)\n    return result\n```",
            "```python\nreturn tf.add(tf.multiply(in1, tf.expand_dims(in2, -2)), in3)\n```",
            "```python\n    result = tf.add(tf.matmul(in1, in2), in3)\n    return result\n```",
            "```python\n    result = tf.add(tf.matmul(in1, in2), in3)\n    return result\n```",
            "```python\n    result = tf.add(tf.multiply(in1, in2), in3)\n    return result\n```",
            "```python\n    return tf.add(tf.matmul(in1, in2) + in3)\n```",
            "```python\n    result = tf.add(tf.matmul(in1, in2), in3)\n    return result\n```",
            "```python\n    result = tf.add(tf.matmul(in1, in2), in3)\n    return result\n```",
            "```python\n    result = tf.add(tf.matmul(in1, in2), in3)\n    return result\n```"
        ],
        "tf_operators": {
            "tf.add": 20,
            "tf.matmul": 15,
            "tf.multiply": 5,
            "tf.expand_dims": 2
        },
        "coverage_percentage": 100.0,
        "total_covered": 2,
        "total_in_target": 2,
        "parsed_constants": [
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [
                0
            ],
            [],
            [],
            [
                -2
            ],
            [],
            [],
            [],
            [],
            [],
            [],
            []
        ],
        "all_constants": [
            0,
            -2
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 0,
            "tf_bool": 0,
            "axis": 0,
            "tf_float32": 0,
            "input_var": 60,
            "tf_int64": 0,
            "provided": 1,
            "shape": 0,
            "shape_tuple": 0,
            "common": 1
        }
    },
    {
        "name": "stackoverflow_19",
        "description": "(\\'sort a tensor considering the first column, breaking ties using the second column\\')",
        "target_program": "tf.gather(tf.gather(in1, tf.argsort(in1[:, 1], stable=True)), tf.argsort(tf.gather(in1, tf.argsort(in1[:, 1], stable=True))[:, 0], stable=True))",
        "source": "https://stackoverflow.com/questions/49399198/sort-a-tensor-based-on-two-columns-in-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[[3, 1, 2], [1, 0, 4], [1, 2, 3], [0, 5, 1], [1, 1, 2], [2, 3, 1], [2, 1, 0]],]",
            "outputs": "[[0, 5, 1],    [1, 0, 4],    [1, 1, 2],    [1, 2, 3],    [2, 1, 0],    [2, 3, 1],    [3, 1, 2]]"
        },
        "completions": [
            "```python\nsorted_indices = tf.argsort(in1[:, 0])\nsorted_in1 = tf.gather(in1, sorted_indices)\nsecond_sort_indices = tf.argsort(sorted_in1[:, 1])\nsorted_in1 = tf.gather(sorted_in1, second_sort_indices)\nreturn sorted_in1\n```",
            "```python\nsorted_indices = tf.argsort(in1[:, 0], axis=0)\nin1_sorted = tf.gather(in1, sorted_indices)\nsorted_indices_ties = tf.argsort(in1_sorted[:, 1], axis=0)\nout = tf.gather(in1_sorted, sorted_indices_ties)\nreturn out\n```",
            "```python\nreturn tf.gather(params=in1, indices=tf.argsort(values=in1[:, 0], axis=0, stable=True), axis=0)\n```",
            "```python\nsorted_indices = tf.argsort(in1[:, 0])\nsorted_in1 = tf.gather(in1, sorted_indices)\nsame_values = tf.equal(sorted_in1[:-1, 0], sorted_in1[1:, 0])\ntied_indices = tf.argmax(tf.concat([same_values, [False]], axis=0))\nsorted_tied_subindices = tf.argsort(sorted_in1[tied_indices:, 1])\nfinal_indices = tf.concat([sorted_indices[:tied_indices], sorted_indices[tied_indices:][sorted_tied_subindices]], axis=0)\nresult = tf.gather(in1, final_indices)\nreturn result\n```",
            "```python\nsorted_indices = tf.argsort(in1[:, 0])\nin1_sorted = tf.gather(in1, sorted_indices)\nsorted_indices_tie = tf.argsort(in1_sorted[:, 1])\nout = tf.gather(in1_sorted, sorted_indices_tie)\nreturn out\n```",
            "```python\nsorted_indices = tf.argsort(tf.stack([in1[:,0], in1[:,1]], axis=1), axis=0)\nout = tf.gather(in1, sorted_indices)\nreturn out\n```",
            "```python\nresult = tf.argsort(in1[:, 1], axis=0)\nin1_sorted = tf.gather(in1, result)\n```",
            "```python\nresult = tf.gather(in1, tf.argsort(in1[:, 0]*1000 + in1[:, 1]))\nreturn result\n```",
            "```python\nout = tf.sort(in1, axis=0)\n```\n",
            "```python\nreturn tf.gather(in1, tf.argsort(in1[:,1]*10 + in1[:,2], stable=True), axis=0)\n```",
            "```python\nreturn tf.gather(tf.gather_nd(in1, tf.argsort(tf.stack([in1[:,0], in1[:,1]], axis=1))), tf.argsort(tf.stack([in1[:,0], in1[:,1]], axis=1)[:,1])\n```",
            "```python\n    return tf.gather(in1, tf.argsort(in1[:, 1:], axis=0) + tf.argsort(in1[:, 0:1], stable=True))\n```",
            "```python\nsorted_indices = tf.argsort(in1[:, 0])\nsorted_in1 = tf.gather(in1, sorted_indices)\nsecond_indices = tf.argsort(sorted_in1[:, 1])\nout = tf.gather(sorted_in1, second_indices)\nreturn out\n```",
            "```python\nreturn tf.gather(params=in1, indices=tf.argsort(in1[:, 1]), axis=0)\n```",
            "```python\nout = tf.gather(in1, tf.argsort(tf.stack([in1[:, 0], in1[:, 1]], axis=1)))\nreturn out\n```",
            "```python\nresult = tf.gather(params=in1, indices=tf.argsort(values=in1[:, 1]*10 + in1[:, 2], stable=True), axis=0)\nreturn result\n```",
            "```python\nsorted_indices = tf.argsort(in1[:, 0])\nsorted_in1 = tf.gather(in1, sorted_indices)\nfinal_sorted_indices = tf.argsort(sorted_in1[:, 1])\noutput = tf.gather(sorted_in1, final_sorted_indices)\nreturn output\n```",
            "```python\nindices = tf.argsort(in1[:, 0])\nsorted_in1 = tf.gather(in1, indices)\nstart_idx = tf.reduce_min(tf.where(tf.not_equal(sorted_in1[1:], sorted_in1[:-1])))+1\nsorted_in1 = tf.concat([sorted_in1[start_idx:], sorted_in1[:start_idx]], axis=0)\nreturn sorted_in1\n```",
            "```python\nresult = tf.gather(in1, tf.argsort(in1[:, 0], stable=True))\nsorted_result = tf.gather_nd(result, tf.argsort(result[:, 1]))\nreturn sorted_result\n```",
            "```python\nresult = tf.gather(params=in1, indices=tf.argsort(values=in1[:, 1], axis=0, stable=True), axis=0)\n```"
        ],
        "tf_operators": {
            "tf.argsort": 19,
            "tf.gather": 19,
            "tf.equal": 1,
            "tf.concat": 2,
            "tf.argmax": 1,
            "tf.stack": 3,
            "tf.sort": 1,
            "tf.gather_nd": 2,
            "tf.not_equal": 1,
            "tf.where": 1,
            "tf.reduce_min": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 2,
        "total_in_target": 2,
        "parsed_constants": [
            [
                0,
                1
            ],
            [
                0,
                0,
                1,
                0
            ],
            [
                0,
                0,
                0
            ],
            [
                0,
                -1,
                0,
                1,
                0,
                0,
                1,
                0
            ],
            [
                0,
                1
            ],
            [
                0,
                1,
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                0,
                1000,
                1
            ],
            [
                0
            ],
            [
                1,
                10,
                2,
                0
            ],
            [],
            [
                1,
                0,
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                1,
                0
            ],
            [
                0,
                1,
                1
            ],
            [
                1,
                10,
                2,
                0
            ],
            [
                0,
                1
            ],
            [
                0,
                1,
                -1,
                1,
                0
            ],
            [
                0,
                1
            ],
            [
                1,
                0,
                0
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            1000,
            10,
            -1
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 5,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 5,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            null,
            {
                "common": 5,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 0,
            "tf_bool": 0,
            "axis": 0,
            "tf_float32": 0,
            "input_var": 53,
            "tf_int64": 0,
            "provided": 3,
            "shape": 0,
            "shape_tuple": 0,
            "common": 33
        }
    },
    {
        "name": "stackoverflow_20",
        "description": "compute argmax in each tensor and set it to 1",
        "target_program": "tf.cast(tf.one_hot(tf.argmax(in1, axis=1), 3), tf.int32)",
        "source": "https://stackoverflow.com/questions/44834739/argmax-on-a-tensor-and-ceiling-in-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[[0.7, 0.2, 0.1], [0.4, 0.5, 0.1], [0.4, 0.4, 0.2], [0.3, 0.4, 0.3], [0.0, 0.0, 1.0]],]",
            "outputs": "[[1, 0, 0],    [0, 1, 0],    [1, 0, 0],    [0, 1, 0],    [0, 0, 1]]"
        },
        "completions": [
            "```python\ndef transform(in1):\n    max_indices = tf.argmax(in1, axis=1)\n    result = tf.one_hot(max_indices, tf.shape(in1)[1])\n    return result\n```",
            "```python\n    argmax_indices = tf.argmax(in1, axis=1)\n    result = tf.one_hot(argmax_indices, depth=tf.shape(in1)[1])\n    return result\n```",
            "```python\ndef transform(in1):\n    argmax_indices = tf.argmax(in1, axis=1)\n    one_hot = tf.one_hot(argmax_indices, in1.shape[1])\n    return one_hot\n```",
            "```python\ndef transform(in1):\n    idx = tf.argmax(in1, axis=1)\n    result = tf.one_hot(idx, depth=in1.shape[1])\n    return result\n```",
            "```python\n    max_indices = tf.argmax(in1, axis=1)\n    result = tf.one_hot(max_indices, in1.shape[1])\n    return result\n```",
            "```python\ndef transform(in1):\n    argmax_indices = tf.argmax(in1, axis=1)\n    result = tf.one_hot(argmax_indices, tf.shape(in1)[1])\n    return result\n```",
            "```python\ndef transform(in1):\n    indices = tf.argmax(in1, axis=1)\n    updates = tf.one_hot(indices, tf.shape(in1)[1])\n    return tf.tensor_scatter_nd_update(tf.zeros_like(in1), tf.expand_dims(indices, axis=1), updates)\n```",
            "```python\n    max_indices = tf.argmax(in1, axis=1)\n    result = tf.one_hot(max_indices, depth=tf.shape(in1)[1])\n    return result\n```",
            "```python\ndef transform(in1):\n    max_indices = tf.argmax(in1, axis=1)\n    result = tf.one_hot(max_indices, depth=tf.shape(in1)[1])\n    return result\n```",
            "```python\n    max_indices = tf.argmax(in1, axis=1)\n    result = tf.one_hot(max_indices, tf.shape(in1)[1])\n    return result\n```",
            "```python\ndef transform(in1):\n    max_indices = tf.argmax(in1, axis=1)\n    result = tf.one_hot(max_indices, depth=tf.shape(in1)[1])\n    return result\n```",
            "```python\ndef transform(in1):\n    max_indices = tf.argmax(in1, axis=1)\n    result = tf.one_hot(max_indices, tf.shape(in1)[1])\n    return result\n```",
            "```python\ndef transform(input_tensor):\n    argmax_indices = tf.argmax(input_tensor, axis=1)\n    one_hot_output = tf.one_hot(argmax_indices, depth=input_tensor.shape[1])\n    return one_hot_output\n```",
            "```python\n    max_indices = tf.argmax(in1, axis=1)\n    result = tf.one_hot(max_indices, tf.shape(in1)[1])\n    return result\n```",
            "```python\nindices = tf.argmax(in1, axis=-1)\nupdates = tf.ones_like(indices)\noutput = tf.tensor_scatter_nd_update(tf.zeros_like(in1), indices, updates)\nreturn output\n```",
            "```python\n    index_max = tf.argmax(in1, axis=1)\n    result = tf.one_hot(index_max, tf.shape(in1)[1])\n    return result\n```",
            "```python\nreturn tf.cast(tf.one_hot(tf.argmax(in1, axis=1), depth=3), tf.int32)\n```",
            "```python\nreturn tf.one_hot(tf.argmax(in1, axis=1), depth=in1.shape[1])\n```",
            "```python\nreturn tf.one_hot(tf.argmax(in1, axis=1), depth=tf.shape(in1)[1])\n```",
            "```python\n    max_indices = tf.argmax(in1, axis=1)\n    result = tf.one_hot(max_indices, tf.shape(in1)[1])\n    return result\n```"
        ],
        "tf_operators": {
            "tf.argmax": 20,
            "tf.one_hot": 19,
            "tf.shape": 13,
            "tf.tensor_scatter_nd_update": 2,
            "tf.zeros_like": 2,
            "tf.expand_dims": 1,
            "tf.ones_like": 1,
            "tf.cast": 1,
            "tf.int32": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 4,
        "total_in_target": 4,
        "parsed_constants": [
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                -1
            ],
            [
                1,
                1
            ],
            [
                1,
                3
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ]
        ],
        "all_constants": [
            1,
            3,
            -1
        ],
        "constant_counts": [
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 8,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 7,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 1,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 1,
            "tf_bool": 0,
            "axis": 0,
            "tf_float32": 0,
            "input_var": 47,
            "tf_int64": 0,
            "provided": 0,
            "shape": 1,
            "shape_tuple": 0,
            "common": 39
        }
    },
    {
        "name": "stackoverflow_21",
        "description": "gather elements in a tensor along axis 1",
        "target_program": "tf.gather(in2, in1, axis=1, batch_dims=1)",
        "source": "https://stackoverflow.com/questions/51690095/how-to-gather-element-with-index-in-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[[2], [0], [1], [0]],[[0.2, 0.5, 0.3], [0.1, 0.3, 0.6], [0.1, 0.6, 0.3], [0.7, 0.0, 0.3]],]",
            "outputs": "[[0.3], [0.1], [0.6], [0.7]]"
        },
        "completions": [
            "```python\nresult = tf.gather_nd(in2, in1)\nreturn result\n```",
            "```python\nout = tf.gather(in2, in1, axis=1)\nreturn out\n```",
            "```python\noutput = tf.gather_nd(in2, in1)\nreturn output\n```",
            "def transform(in1, in2):\n    return tf.gather_nd(in2, in1, batch_dims=1)",
            "```python\nresult = tf.gather_nd(in2, in1)\nreturn result\n```",
            "```python\nresult = tf.gather_nd(in2, in1)\nreturn result\n```",
            "```python\noutput = tf.gather_nd(in2, in1)\nreturn output\n```",
            "```python\nresult = tf.gather_nd(in2, in1)\nreturn result\n```",
            "```python\noutput = tf.gather_nd(in2, indices=in1, batch_dims=1)\nreturn output\n```",
            "```python\nresult = tf.gather(in2, in1, axis=1)\nreturn result\n```",
            "```python\noutput = tf.gather_nd(in2, in1, batch_dims=1)\nreturn output\n```",
            "```python\nreturn tf.gather_nd(in2, in1, batch_dims=1)\n```",
            "```python\noutput = tf.gather_nd(in2, in1, batch_dims=1)\nreturn output\n```",
            "def transform(in1, in2):\n    return tf.gather_nd(in2, in1)",
            "```python\noutput = tf.gather_nd(in2, in1, batch_dims=1)\nreturn output\n```",
            "```python\noutput = tf.gather_nd(in2, in1)\nreturn output\n```",
            "```python\nreturn tf.gather(in2, in1, axis=1)\n```  ",
            "```python\noutput = tf.gather(in2, in1, axis=1)\nreturn output\n```",
            "```python\noutput = tf.gather_nd(in2, in1)\nreturn output\n```",
            "```python\noutput = tf.gather_nd(in2, tf.expand_dims(in1, axis=1))\nreturn output\n```"
        ],
        "tf_operators": {
            "tf.gather_nd": 16,
            "tf.gather": 4,
            "tf.expand_dims": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 1,
        "total_in_target": 1,
        "parsed_constants": [
            [],
            [
                1
            ],
            [],
            [
                1
            ],
            [],
            [],
            [],
            [],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [],
            [
                1
            ],
            [],
            [
                1
            ],
            [
                1
            ],
            [],
            [
                1
            ]
        ],
        "all_constants": [
            1
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 0,
            "tf_bool": 0,
            "axis": 0,
            "tf_float32": 0,
            "input_var": 40,
            "tf_int64": 0,
            "provided": 0,
            "shape": 0,
            "shape_tuple": 0,
            "common": 11
        }
    },
    {
        "name": "stackoverflow_22",
        "description": "multiply a vector with a matrix without reshaping the vector",
        "target_program": "tf.tensordot(tf.cast(in1, tf.float32), in2, 1)",
        "source": "https://stackoverflow.com/questions/43284897/how-can-i-multiply-a-vector-and-a-matrix-in-tensorflow-without-reshaping",
        "constants": "[]",
        "examples": {
            "inputs": "[[3, 1, 10],[[0.6, 0.4], [0.5, 1.0], [3.0, 4.0]],]",
            "outputs": "[32.3, 42.2]"
        },
        "completions": [
            "```python\noutput = tf.tensordot(in1, in2, axes=1)\nreturn output\n```",
            "```python\nreturn tf.reduce_sum(tf.multiply(in1, in2), axis=1)\n```",
            "```python\nresult = tf.tensordot(in1, in2, axes=1)\n```",
            "```python\nreturn tf.tensordot(in1, in2, axes=1)\n```",
            "```python\noutput = tf.tensordot(in2, in1, axes=1)\n```",
            "```python\noutput = tf.reduce_sum(in1 * in2, axis=1)\n```",
            "```python\nreturn tf.tensordot(in2, in1, 1)\n```",
            "```python\noutput = tf.reduce_sum(tf.multiply(in2, tf.expand_dims(in1, axis=1)), axis=1)\nreturn output\n```",
            "```python\nout = tf.tensordot(in2, in1, axes=1)\n```",
            "```python\nreturn tf.tensordot(in1, in2, axes=1)\n```",
            "```python\noutput = tf.tensordot(in2, in1, axes=1)\n```",
            "```python\nreturn tf.tensordot(in1, in2, axes=1)\n```",
            "```python\nresult = tf.tensordot(in2, in1, axes=1)\n```",
            "```python\noutput = tf.tensordot(in2, in1, axes=1)\n```",
            "```python\nreturn tf.reduce_sum(tf.multiply(tf.expand_dims(in1, 1), in2), axis=1)\n```",
            "```python\nreturn tf.tensordot(in2, in1, axes=1)\n```",
            "```python\noutput = tf.tensordot(tf.expand_dims(in1, 0), in2, axes=1)\nreturn output[0]\n```",
            "```python\nout = tf.matmul(tf.expand_dims(in1, axis=0), in2)\nreturn out[0]\n```",
            "```python\ndef transform(in1, in2):\n    return tf.squeeze(tf.tensordot(in2, in1, axes=1))\n```",
            "```python\nresult = tf.tensordot(in2, in1, axes=1)\n```"
        ],
        "tf_operators": {
            "tf.tensordot": 15,
            "tf.multiply": 3,
            "tf.reduce_sum": 4,
            "tf.expand_dims": 4,
            "tf.matmul": 1,
            "tf.squeeze": 1
        },
        "coverage_percentage": 33.33333333333333,
        "total_covered": 1,
        "total_in_target": 3,
        "parsed_constants": [
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                1
            ],
            [
                1
            ],
            [
                0,
                1,
                0
            ],
            [
                0,
                0
            ],
            [
                1
            ],
            [
                1
            ]
        ],
        "all_constants": [
            0,
            1
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 0,
            "tf_bool": 0,
            "axis": 0,
            "tf_float32": 0,
            "input_var": 40,
            "tf_int64": 0,
            "provided": 0,
            "shape": 0,
            "shape_tuple": 0,
            "common": 25
        }
    },
    {
        "name": "stackoverflow_23",
        "description": "place 1 at the indices in the input tensor",
        "target_program": "tf.cast(tf.reduce_max(tf.one_hot(in1, 9), axis=1), tf.int32)",
        "source": "https://stackoverflow.com/questions/53414433/tensorflow-tensor-binarization",
        "constants": "[]",
        "examples": {
            "inputs": "[[[0, 5, 2], [3, 1, 4], [5, 1, 5]],]",
            "outputs": "[[1, 0, 1, 0, 0, 1, 0, 0, 0],    [0, 1, 0, 1, 1, 0, 0, 0, 0],    [0, 1, 0, 0, 0, 1, 0, 0, 0]]"
        },
        "completions": [
            "```python\ndef transform(in1):\n    indices = tf.where(tf.equal(in1, 1))\n    output = tf.tensor_scatter_nd_update(tf.zeros(tf.reduce_prod(tf.shape(in1))), indices, tf.ones(tf.shape(indices)[0]))\n    return tf.reshape(output, tf.shape(in1) * 2)\n```",
            "```python\ndef transform(in1):\n    return tf.one_hot(in1, 6)\n```",
            "```python\ndef transform(in1):\n    return tf.one_hot(in1, depth=9)\n```",
            "```python\ndef transform(in1):\n    return tf.one_hot(in1, depth=9)\n```",
            "```python\ndef transform(in1):\n    return tf.one_hot(in1, depth=9)\n```",
            "```python\noutput = tf.one_hot(in1, depth=9)\nreturn output\n```",
            "```python\ndef transform(in1):\n    return tf.one_hot(in1, depth=9)\n```",
            "```python\noutput = tf.one_hot(in1, depth=9)\nreturn output\n```",
            "```python\nresult = tf.one_hot(in1, depth=9)\n```",
            "```python\noutput = tf.one_hot(in1, tf.reduce_max(in1) + 1)\nreturn output\n```",
            "```python\ndef transform(in1):\n    return tf.one_hot(tf.cast(in1, tf.int32), tf.reduce_max(in1)+1)\n```",
            "```python\noutput = tf.one_hot(in1, depth=9)\nreturn output\n```",
            "```python\ndef transform(in1):\n    return tf.one_hot(in1, 6)\n```",
            "```python\nreturn tf.one_hot(in1, 6)\n```",
            "```python\ndef transform(in1):\n    return tf.one_hot(in1, depth=9)\n```",
            "```python\ndef transform(in1):\n    return tf.one_hot(in1, depth=9)\n```",
            "```python\ndef transform(in1):\n    return tf.one_hot(in1, depth=9)\n```",
            "```python\ndef transform(in1):\n    return tf.one_hot(in1, depth=2)\n```  ",
            "```python\ndef transform(in1):\n    return tf.one_hot(in1, 6)\n```",
            "```python\ndef transform(in1):\n    return tf.one_hot(in1, 6)\n```"
        ],
        "tf_operators": {
            "tf.where": 1,
            "tf.equal": 1,
            "tf.shape": 1,
            "tf.ones": 1,
            "tf.reshape": 1,
            "tf.tensor_scatter_nd_update": 1,
            "tf.reduce_prod": 1,
            "tf.zeros": 1,
            "tf.one_hot": 19,
            "tf.reduce_max": 2,
            "tf.cast": 1,
            "tf.int32": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 4,
        "total_in_target": 4,
        "parsed_constants": [
            [
                1,
                0,
                2
            ],
            [
                6
            ],
            [
                9
            ],
            [
                9
            ],
            [
                9
            ],
            [
                9
            ],
            [
                9
            ],
            [
                9
            ],
            [
                9
            ],
            [
                1
            ],
            [
                1
            ],
            [
                9
            ],
            [
                6
            ],
            [
                6
            ],
            [
                9
            ],
            [
                9
            ],
            [
                9
            ],
            [
                2
            ],
            [
                6
            ],
            [
                6
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            6,
            9
        ],
        "constant_counts": [
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 1,
            "tf_bool": 0,
            "axis": 2,
            "tf_float32": 0,
            "input_var": 27,
            "tf_int64": 0,
            "provided": 16,
            "shape": 0,
            "shape_tuple": 0,
            "common": 4
        }
    },
    {
        "name": "stackoverflow_24",
        "description": "(\\'like tf.divide(), but when dividing by 0, return the numerator\\')",
        "target_program": "tf.where(tf.cast(in2, tf.bool), x=tf.divide(in1, in2), y=in1)",
        "source": "https://stackoverflow.com/questions/53643339/tensorflow-overriding-tf-divide-to-return-the-numerator-when-dividing-by-0",
        "constants": "[0]",
        "examples": {
            "inputs": "[[3.0, 1.0, 4.0, 5.0, 2.0, 8.0, -6.0, -7.0],[0.5, 0.0, -2.0, 0.0, 1.0, -1.0, 0.0, 2.0],]",
            "outputs": "[6.0, 1.0, -2.0, 5.0, 2.0, -8.0, -6.0, -3.5]"
        },
        "completions": [
            "```python\nresult = tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\nreturn result\n```",
            "```python\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n```",
            "```python\n    result = tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n    return result\n```",
            "```python\n    return tf.divide(in1, tf.where(tf.equal(in2, 0), in1, in2))\n```",
            "```python\n     return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n```",
            "```python\nreturn tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n```",
            "```python\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n```",
            "```python\n   return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, tf.abs(in2)))\n```",
            "```python\nresult = tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\nreturn result\n```",
            "```python\nout = tf.divide_no_nan(in1, in2)\nreturn tf.where(tf.equal(in2, 0), in1, out)\n```",
            "```python\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n```",
            "```python\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n```",
            "```python\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n```",
            "```python\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n```",
            "```python\nreturn tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n```",
            "```python\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n```",
            "```python\n    result = tf.divide(in1, in2)\n    result = tf.where(tf.equal(in2, 0), in1, result)\n    return result\n```",
            "```python\n    return tf.math.divide_no_nan(in1, tf.where(tf.equal(in2, 0), in1, in2))\n```",
            "```python\n    result = tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n    return result\n```",
            "```python\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n```"
        ],
        "tf_operators": {
            "tf.divide": 18,
            "tf.where": 20,
            "tf.equal": 20,
            "tf.abs": 1,
            "tf.divide_no_nan": 1,
            "tf.math.divide_no_nan": 1
        },
        "coverage_percentage": 50.0,
        "total_covered": 2,
        "total_in_target": 4,
        "parsed_constants": [
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ]
        ],
        "all_constants": [
            0
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 0,
            "tf_bool": 0,
            "axis": 0,
            "tf_float32": 0,
            "input_var": 80,
            "tf_int64": 0,
            "provided": 0,
            "shape": 0,
            "shape_tuple": 0,
            "common": 20
        }
    },
    {
        "name": "stackoverflow_25",
        "description": "copy the tensor tf.eye(3), 4 times",
        "target_program": "tf.tile(tf.eye(in1), (in2, 1))",
        "source": "https://stackoverflow.com/questions/53602691/duplicate-a-tensor-n-times",
        "constants": "[]",
        "examples": {
            "inputs": "[3,4,]",
            "outputs": "[[1.0, 0.0, 0.0],    [0.0, 1.0, 0.0],    [0.0, 0.0, 1.0],    [1.0, 0.0, 0.0],    [0.0, 1.0, 0.0],    [0.0, 0.0, 1.0],    [1.0, 0.0, 0.0],    [0.0, 1.0, 0.0],    [0.0, 0.0, 1.0],    [1.0, 0.0, 0.0],    [0.0, 1.0, 0.0],    [0.0, 0.0, 1.0]]"
        },
        "completions": [
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\n    result = tf.tile(tf.eye(in1), [in2, 1])\n    return result\n```",
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\n    return tf.repeat(tf.eye(in1), in2, axis=0)\n```",
            "```python\n    return tf.repeat(tf.eye(in1), in2, axis=0)\n```",
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```  ",
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\n    res = tf.tile(tf.eye(in1), [in2, 1])\n    return res\n```",
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\n     return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\n    return tf.tile(tf.eye(in1), multiples=[in2, 1])\n```",
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\ndef transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])\n```"
        ],
        "tf_operators": {
            "tf.tile": 18,
            "tf.eye": 20,
            "tf.repeat": 2
        },
        "coverage_percentage": 100.0,
        "total_covered": 2,
        "total_in_target": 2,
        "parsed_constants": [
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                0
            ],
            [
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ]
        ],
        "all_constants": [
            0,
            1
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 0,
            "tf_bool": 0,
            "axis": 0,
            "tf_float32": 0,
            "input_var": 40,
            "tf_int64": 0,
            "provided": 0,
            "shape": 0,
            "shape_tuple": 0,
            "common": 20
        }
    },
    {
        "name": "stackoverflow_26",
        "description": "reduction operation for multiple dimensions simultaneously",
        "target_program": "tf.reduce_sum(tf.reduce_sum(in1, axis=1), axis=1)",
        "source": "https://stackoverflow.com/questions/54294780/how-to-perform-reduce-op-on-multiple-dimensions-at-once",
        "constants": "[]",
        "examples": {
            "inputs": "[[[[3, 4], [1, 2]], [[5, -2], [-10, 3]], [[10, 20], [-4, 7]]]]",
            "outputs": "[10, -4, 33]"
        },
        "completions": [
            "```python\nresult = tf.reduce_sum(in1, axis=[1, 2])\nreturn result\n```",
            "```python\nreturn tf.reduce_sum(in1, axis=[1, 2])\n```",
            "```python\n    result = tf.reduce_sum(in1, axis=[1, 2])\n    return result\n```",
            "```python\nresult = tf.reduce_sum(in1, axis=(1, 2))\nreturn result\n```",
            "```python\ndef transform(in1):\n    return tf.reduce_sum(in1, axis=[0, 1])\n```",
            "```python\nresult = tf.reduce_sum(in1, axis=[1, 2])\nreturn result\n```",
            "```python\nresult = tf.reduce_sum(in1, axis=[1, 2])\nreturn result\n```",
            "```python\nresult = tf.reduce_sum(in1, axis=[1, 2])\nreturn result\n```",
            "```python\nresult = tf.reduce_sum(in1, axis=[1, 2])\nreturn result\n```",
            "```python\nresult = tf.reduce_sum(in1, axis=[1, 2])\nreturn result\n```",
            "```python\ndef transform(input_tensor):\n    return tf.reduce_sum(input_tensor, axis=(1, 2))\n```",
            "```python\nresult = tf.reduce_sum(input_tensor=in1, axis=[1, 2])\nreturn result\n```",
            "```python\nresult = tf.reduce_sum(in1, axis=[1, 2])\nreturn result\n```",
            "```python\noutput = tf.reduce_sum(in1, axis=(1, 2))\nreturn output\n```",
            "```python\ndef transform(in1):\n    return tf.reduce_sum(in1, axis=[1, 2])\n```",
            "```python\ndef transform(in1):\n    return tf.reduce_sum(in1, axis=[1, 2])\n```",
            "```python\nresult = tf.reduce_sum(input_tensor=in1, axis=[1, 2])\nreturn result\n```",
            "```python\nresult = tf.reduce_sum(in1, axis=[1, 2])\nreturn result\n```",
            "```python\n    return tf.reduce_sum(in1, axis=[1, 2])\n```",
            "```python\nresult = tf.reduce_sum(in1, axis=(1, 2))\nreturn result\n```"
        ],
        "tf_operators": {
            "tf.reduce_sum": 20
        },
        "coverage_percentage": 100.0,
        "total_covered": 1,
        "total_in_target": 1,
        "parsed_constants": [
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                0,
                1
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ]
        ],
        "all_constants": [
            0,
            1,
            2
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 0,
            "tf_bool": 0,
            "axis": 15,
            "tf_float32": 0,
            "input_var": 20,
            "tf_int64": 0,
            "provided": 0,
            "shape": 0,
            "shape_tuple": 0,
            "common": 17
        }
    },
    {
        "name": "stackoverflow_27",
        "description": "boolean tensor with 1 at the indices in the input tensor",
        "target_program": "tf.cast(tf.reduce_max(tf.one_hot(in1, in2), axis=0), tf.int32)",
        "source": "https://stackoverflow.com/questions/54225704/how-do-i-get-a-tensor-representing-the-on-positions-in-the-original-tensor",
        "constants": "[]",
        "examples": {
            "inputs": "[[0, 3, 5, 6],8,]",
            "outputs": "[1, 0, 0, 1, 0, 1, 1, 0]"
        },
        "completions": [
            "```python\n    return tf.one_hot(in1, in2, dtype=tf.int32)\n```",
            "```python\n    return tf.cast(tf.one_hot(in1, in2), tf.int32)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.where(tf.equal(tf.range(in2), tf.expand_dims(in1, axis=1)), 1, 0)\n```",
            "```python\n    result = tf.one_hot(indices=in1, depth=in2)\n    return result\n```",
            "```python\n    return tf.cast(tf.one_hot(in1, in2), tf.int32)\n```",
            "```python\n     return tf.equal(tf.range(in2), in1)\n```",
            "```python\n    return tf.one_hot(in1, in2)\n```",
            "```python\n    out = tf.one_hot(in1, in2)\n    return out\n```",
            "```python\n    return tf.one_hot(in1, in2)\n```",
            "```python\n    result = tf.one_hot(indices=in1, depth=in2)\n    return result\n```",
            "```python\n    return tf.cast(tf.one_hot(in1, in2), tf.int32)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.one_hot(in1, in2)\n```",
            "```python\n    return tf.equal(tf.range(in2), in1)\n```",
            "```python\n    return tf.where(tf.equal(tf.range(in2), tf.expand_dims(in1, 1)), 1, 0)\n```",
            "```python\n    return tf.one_hot(in1, in2)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.one_hot(in1, in2)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.where(tf.equal(tf.range(in2), tf.expand_dims(in1, 1)), 1, 0)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.one_hot(in1, in2)\n```",
            "```python\n    return tf.sequence_mask(in1, in2)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.one_hot(in1, in2)\n```"
        ],
        "tf_operators": {
            "tf.one_hot": 14,
            "tf.int32": 4,
            "tf.cast": 3,
            "tf.range": 5,
            "tf.where": 3,
            "tf.equal": 5,
            "tf.expand_dims": 3,
            "tf.sequence_mask": 1
        },
        "coverage_percentage": 75.0,
        "total_covered": 3,
        "total_in_target": 4,
        "parsed_constants": [
            [],
            [],
            [
                1,
                1,
                0
            ],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [
                1,
                1,
                0
            ],
            [],
            [],
            [
                1,
                1,
                0
            ],
            [],
            [],
            []
        ],
        "all_constants": [
            0,
            1
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 4,
            "tf_bool": 0,
            "axis": 0,
            "tf_float32": 0,
            "input_var": 40,
            "tf_int64": 0,
            "provided": 0,
            "shape": 0,
            "shape_tuple": 0,
            "common": 9
        }
    },
    {
        "name": "stackoverflow_28",
        "description": "extract columns from a 3D tensor given column indices",
        "target_program": "tf.squeeze(tf.gather(in1, tf.expand_dims(in2, 1), axis=-1, batch_dims=1))",
        "source": "https://stackoverflow.com/questions/54274074/selecting-columns-from-3d-tensor-according-to-a-1d-tensor-of-indices-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[[[5, 3],  [0, 2]], [[7, 4],  [5, 1]], [[10, 20],  [15, 30]], [[11, 16],  [14, 12]], [[-2, -7],  [-4, 6]]],[1, 0, 1, 1, 0],]",
            "outputs": "[[3, 2], [7, 5], [20, 30], [16, 12], [-2, -4]]"
        },
        "completions": [
            "```python\nreturn tf.gather(in1, in2, axis=2)\n```",
            "```python\nreturn tf.gather(in1, in2, axis=2)\n```",
            "```python\nreturn tf.gather(in1, in2, axis=1)\n```",
            "```python\noutput = tf.gather(in1, in2, axis=2)\nreturn output\n```",
            "```python\nresult = tf.gather(in1, in2, axis=2)\nreturn result\n```",
            "```python\nresult = tf.gather(in1, in2, axis=2)\nreturn result\n```",
            "```python\nreturn tf.gather(in1, in2, axis=1)\n```",
            "```python\nreturn tf.gather(in1, in2, axis=1)\n```",
            "```python\nreturn tf.gather(in1, in2, axis=2)\n```",
            "```python\noutput = tf.gather(in1, in2, axis=1)\nreturn output\n```",
            "```python\nreturn tf.gather(in1, in2, axis=1)\n```",
            "```python\nresult = tf.gather(in1, in2, axis=2)\nreturn result\n```",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=1))",
            "```python\n    result = tf.gather(in1, in2, axis=2)\n    return result\n```",
            "```python\noutput = tf.gather(in1, in2, axis=2)\nreturn output\n```",
            "```python\nresult = tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=1))\nreturn result\n```",
            "```python\nreturn tf.gather(in1, in2, axis=2)\n```",
            "```python\nreturn tf.gather(in1, in2, axis=1)\n```",
            "```python\nreturn tf.gather(in1, in2, axis=1)\n```",
            "```python\nresult = tf.gather(in1, in2, axis=2)\nreturn result\n```"
        ],
        "tf_operators": {
            "tf.gather": 18,
            "tf.gather_nd": 2,
            "tf.stack": 2,
            "tf.range": 2,
            "tf.shape": 2
        },
        "coverage_percentage": 33.33333333333333,
        "total_covered": 1,
        "total_in_target": 3,
        "parsed_constants": [
            [
                2
            ],
            [
                2
            ],
            [
                1
            ],
            [
                2
            ],
            [
                2
            ],
            [
                2
            ],
            [
                1
            ],
            [
                1
            ],
            [
                2
            ],
            [
                1
            ],
            [
                1
            ],
            [
                2
            ],
            [
                0,
                1
            ],
            [
                2
            ],
            [
                2
            ],
            [
                0,
                1
            ],
            [
                2
            ],
            [
                1
            ],
            [
                1
            ],
            [
                2
            ]
        ],
        "all_constants": [
            0,
            1,
            2
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 0,
            "tf_bool": 0,
            "axis": 11,
            "tf_float32": 0,
            "input_var": 42,
            "tf_int64": 0,
            "provided": 0,
            "shape": 0,
            "shape_tuple": 0,
            "common": 11
        }
    },
    {
        "name": "stackoverflow_29",
        "description": "place continuous values into buckets given bucket boundaries",
        "target_program": "tf.searchsorted(in1, in2, side='left')",
        "source": "https://stackoverflow.com/questions/54155085/bucketing-continous-value-tensors-in-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[-1.0, -0.8, -0.6, -0.4, -0.2, 0.0, 0.2, 0.4, 0.6, 0.8, 1.0],[0.1, -10, -0.1, 1.1, 0.41],]",
            "outputs": "[6, 0, 5, 11, 8]"
        },
        "completions": [
            "```python\ndef transform(in1, in2):\n    bucket_boundaries = [-0.2, 0.2, 0.6, 1.0]\n    return tf.searchsorted(bucket_boundaries, in2, side='right')\n```",
            "```python\ndef transform(in1, in2):\n    boundaries = tf.constant([-1, -0.5, 0, 0.5, 1], dtype=tf.float32)\n    return tf.searchsorted(boundaries, in2, side='right')\n```",
            "```python\ndef transform(in1, in2):\n    boundaries = tf.constant([-0.2, 0.2, 0.4, 0.6, 0.8])\n    output = tf.searchsorted(boundaries, in2, side='right')\n    return output\n```",
            "```python\ndef transform(in1, in2):\n    boundaries = tf.constant([-0.2, 0.2, 0.4, 0.6, 0.8])\n    output = tf.searchsorted(boundaries, in2, side='right')\n    return output\n```",
            "```python\ndef transform(in1, in2):\n    buckets = tf.searchsorted(in1, in2, side='right')\n    return buckets\n```",
            "```python\ndef transform(in1, in2):\n    bucket_boundaries = [-0.1, -0.05, 0, 0.05, 0.1]\n    return tf.searchsorted(bucket_boundaries, in2)\n```",
            "```python\ndef transform(in1, in2):\n    bucket_boundaries = tf.constant([-0.2, 0.0, 0.2, 0.4, 0.6, 0.8, 1.0])\n    buckets = tf.searchsorted(bucket_boundaries, in2, side='right')\n    return buckets\n```",
            "```python\ndef transform(in1, in2):\n    boundaries = tf.constant([-0.2, 0, 0.2, 0.4, 0.6, 0.8])\n    bucket_indices = tf.searchsorted(boundaries, in2, side='right')\n    return bucket_indices\n```",
            "```python\ndef transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='right')\n```",
            "```python\ndef transform(in1, in2):\n    boundaries = tf.constant([-0.2, 0.2, 0.4, 0.6, 0.8], dtype=tf.float32)\n    bucket_indices = tf.searchsorted(boundaries, in2, side='right')\n    return bucket_indices\n```",
            "```python\ndef transform(in1, in2):\n    bucket_boundaries = tf.constant([-1., -0.2, 0., 0.2, 1.])\n    buckets = tf.searchsorted(bucket_boundaries, in2, side='right')\n    return buckets\n```",
            "```python\nbuckets = tf.constant([-0.6, -0.2, 0.2, 0.6, 1.0])\noutput = tf.searchsorted(buckets, in2, side='right')\nreturn output\n```",
            "```python\ndef transform(in1, in2):\n    bucket_boundaries = [-0.2, 0.2, 0.4, 0.6, 1.0]\n    return tf.searchsorted(bucket_boundaries, in2, side='right').numpy()\n```",
            "```python\ndef transform(in1, in2):\n    boundary = tf.constant([-1.0, -0.5, 0.0, 0.5, 1.0])\n    indices = tf.searchsorted(boundary, in2, side='right')\n    return indices\n```",
            "```python\ndef transform(in1, in2):\n    boundaries = [-0.2, 0, 0.2, 0.4, 0.6, 0.8]\n    output = tf.searchsorted(boundaries, in2, side='right')\n    return output\n```",
            "```python\ndef transform(in1, in2):\n    bucket_boundaries = tf.constant([-0.4, 0.0, 0.4, 0.8, 1.0])\n    bucket_indices = tf.searchsorted(bucket_boundaries, in2, side='right')\n    return bucket_indices\n```",
            "```python\ndef transform(in1, in2):\n    buckets = tf.searchsorted(in1, in2, side='right')\n    return buckets\n```",
            "```python\ndef transform(in1, in2):\n    boundaries = [-0.2, -0.1, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8]\n    buckets = tf.searchsorted(boundaries, in2, side='right')\n    return buckets\n```",
            "```python\ndef transform(in1, in2):\n    boundaries = tf.constant([-1.0, -0.5, 0.0, 0.5, 1.0])\n    bucket_indices = tf.searchsorted(boundaries, in2, side='right')\n    return bucket_indices\n```",
            "```python\ndef transform(in1, in2):\n    boundaries = tf.constant([-0.2, 0.2, 0.4, 0.6, 0.8])\n    output = tf.searchsorted(boundaries, in2)\n    return output\n```"
        ],
        "tf_operators": {
            "tf.searchsorted": 20,
            "tf.float32": 2,
            "tf.constant": 12
        },
        "coverage_percentage": 100.0,
        "total_covered": 1,
        "total_in_target": 1,
        "parsed_constants": [
            [
                -0.2
            ],
            [
                -1,
                -0.5,
                0,
                1
            ],
            [
                -0.2
            ],
            [
                -0.2
            ],
            [],
            [
                -0.1,
                -0.05,
                0
            ],
            [
                -0.2
            ],
            [
                -0.2,
                0
            ],
            [],
            [
                -0.2
            ],
            [
                -1.0,
                -0.2
            ],
            [
                -0.6,
                -0.2
            ],
            [
                -0.2
            ],
            [
                -1.0,
                -0.5
            ],
            [
                -0.2,
                0
            ],
            [
                -0.4
            ],
            [],
            [
                -0.2,
                -0.1
            ],
            [
                -1.0,
                -0.5
            ],
            [
                -0.2
            ]
        ],
        "all_constants": [
            -0.2,
            -0.5,
            1,
            0,
            -0.1,
            -0.05,
            -0.6,
            -0.4,
            -1
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 0,
            "tf_bool": 0,
            "axis": 0,
            "tf_float32": 2,
            "input_var": 25,
            "tf_int64": 0,
            "provided": 0,
            "shape": 0,
            "shape_tuple": 0,
            "common": 6
        }
    },
    {
        "name": "stackoverflow_30",
        "description": "compute Euclidean distance between two tensors",
        "target_program": "tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))), axis=2))",
        "source": "https://stackoverflow.com/questions/54147780/tensorflow-how-to-calculate-the-euclidean-distance-between-two-tensor",
        "constants": "[]",
        "examples": {
            "inputs": "[[[1., 2.], [3., 4.], [5., 6.]],[[9., 4.], [8., 5.], [7., 6.]],]",
            "outputs": "[[math.sqrt(68), math.sqrt(58), math.sqrt(52)],    [math.sqrt(36), math.sqrt(26), math.sqrt(20)],    [math.sqrt(20), math.sqrt(10), math.sqrt(4)]]"
        },
        "completions": [
            "```python\nsquared_diff = tf.math.squared_difference(in1, in2)\nsum_squared_diff = tf.reduce_sum(squared_diff, axis=-1)\neuclidean_dist = tf.sqrt(sum_squared_diff)\nreturn euclidean_dist\n```",
            "def transform(in1, in2):\n    squared_diff = tf.math.squared_difference(in1, tf.expand_dims(in2, 1))\n    squared_diff_sum = tf.reduce_sum(squared_diff, axis=2)\n    euclidean_dist = tf.sqrt(squared_diff_sum)\n    return euclidean_dist",
            "```python\n    squared_diff = tf.math.squared_difference(in1, tf.expand_dims(in2, axis=1))\n    euclidean_dist = tf.reduce_sum(squared_diff, axis=-1)\n    euclidean_dist = tf.sqrt(euclidean_dist)\n    return euclidean_dist\n```",
            "```python\n    diff = tf.subtract(in1, in2)\n    square_diff = tf.square(diff)\n    sum_square_diff = tf.reduce_sum(square_diff, axis=1)\n    euclidean_distance = tf.sqrt(sum_square_diff)\n    return euclidean_distance\n```",
            "```python\n    diff = tf.subtract(in1, in2)\n    square_diff = tf.square(diff)\n    sum_square_diff = tf.reduce_sum(square_diff, axis=1, keepdims=True)\n    euclidean_distance = tf.sqrt(sum_square_diff)\n    return euclidean_distance\n```",
            "```python\n    sq_diff = tf.math.squared_difference(in1[:, tf.newaxis], in2)\n    sum_sq_diff = tf.reduce_sum(sq_diff, axis=2)\n    euclidean_dist = tf.sqrt(sum_sq_diff)\n    return euclidean_dist\n```",
            "```python\n    squared_diff = tf.math.squared_difference(in1, tf.expand_dims(in2, axis=1))\n    distance = tf.reduce_sum(squared_diff, axis=2)\n    distances = tf.sqrt(distance)\n    return distances\n```",
            "```python\n    diff = tf.subtract(in1, in2)\n    squared_diff = tf.square(diff)\n    sum_squared_diff = tf.reduce_sum(squared_diff, axis=2)\n    euclidean_distance = tf.sqrt(sum_squared_diff)\n    return euclidean_distance\n```  ",
            "```python\n    diff = tf.subtract(in1, in2)\n    square_diff = tf.square(diff)\n    sum_square_diff = tf.reduce_sum(square_diff, axis=-1, keepdims=True)\n    euclidean_dist = tf.sqrt(sum_square_diff)\n    return euclidean_dist\n```",
            "```python\n    diff = tf.subtract(in1, in2)\n    square_diff = tf.square(diff)\n    square_sum = tf.reduce_sum(square_diff, axis=2)\n    euclidean_distance = tf.sqrt(square_sum)\n    return euclidean_distance\n```",
            "```python\n    squared_diff = tf.math.squared_difference(in1[tf.newaxis], in2[:, tf.newaxis])\n    distance = tf.sqrt(tf.reduce_sum(squared_diff, axis=2))\n    return distance\n```",
            "```python\n    square_diff = tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0))\n    euclidean_dist = tf.sqrt(tf.reduce_sum(square_diff, axis=2))\n    return euclidean_dist\n```",
            "```python\n    diff = tf.subtract(in1, in2)\n    square_diff = tf.square(diff)\n    sum_square_diff = tf.reduce_sum(square_diff, axis=2)\n    distance = tf.sqrt(sum_square_diff)\n    return distance\n```",
            "```python\ndifferences = tf.subtract(in1, in2)\nsquared_diff = tf.square(differences)\nsum_squared_diff = tf.reduce_sum(squared_diff, axis=2)\neuclidean_distances = tf.sqrt(sum_squared_diff)\nreturn euclidean_distances\n```",
            "```python\n    diff = tf.subtract(in1, in2)\n    sq_diff = tf.square(diff)\n    sum_sq_diff = tf.reduce_sum(sq_diff, axis=2)\n    euclidean_distance = tf.sqrt(sum_sq_diff)\n    return euclidean_distance\n```",
            "```python\n    dist = tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))), axis=2)\n    dist = tf.sqrt(dist)\n    return dist\n```",
            "```python\n    dist = tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, axis=1), tf.expand_dims(in2, axis=0)), axis=-1))\n    return dist\n```",
            "```python\n    squared_diff = tf.math.squared_difference(in1, tf.expand_dims(in2, axis=1))\n    summed_squared_diff = tf.reduce_sum(squared_diff, axis=-1)\n    euclidean_dist = tf.sqrt(summed_squared_diff)\n    return euclidean_dist\n```",
            "```python\n    square_diff = tf.math.squared_difference(in1, tf.expand_dims(in2, axis=1))\n    sum_square_diff = tf.reduce_sum(square_diff, axis=2)\n    result = tf.sqrt(sum_square_diff)\n    return result\n```",
            "```python\n    dists = tf.math.sqrt(tf.reduce_sum(tf.math.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2))\n    return dists\n```"
        ],
        "tf_operators": {
            "tf.math.squared_difference": 8,
            "tf.sqrt": 19,
            "tf.reduce_sum": 20,
            "tf.expand_dims": 9,
            "tf.square": 11,
            "tf.subtract": 10,
            "tf.newaxis": 2,
            "tf.math.square": 1,
            "tf.math.sqrt": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 5,
        "total_in_target": 5,
        "parsed_constants": [
            [
                -1
            ],
            [
                1,
                2
            ],
            [
                1,
                -1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                2
            ],
            [
                1,
                2
            ],
            [
                2
            ],
            [
                -1
            ],
            [
                2
            ],
            [
                2
            ],
            [
                1,
                0,
                2
            ],
            [
                2
            ],
            [
                2
            ],
            [
                2
            ],
            [
                1,
                0,
                2
            ],
            [],
            [
                1,
                -1
            ],
            [
                1,
                2
            ],
            [
                1,
                0,
                2
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            -1
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            null,
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 0,
            "tf_bool": 0,
            "axis": 13,
            "tf_float32": 0,
            "input_var": 38,
            "tf_int64": 0,
            "provided": 0,
            "shape": 0,
            "shape_tuple": 0,
            "common": 19
        }
    },
    {
        "name": "stackoverflow_31",
        "description": "squared error between two tensors, one being a sparse tensor",
        "target_program": "tf.reduce_sum(tf.square(tf.subtract(in2, tf.sparse.to_dense(in1))))",
        "source": "https://stackoverflow.com/questions/45032668/tensorflow-how-to-compute-the-square-error-between-a-tensor-and-a-sparse-tensor",
        "constants": "[]",
        "examples": {
            "inputs": "tf.SparseTensor(indices=[[0, 0], [0, 1], [1, 1]], values=[1.0, 1.5, -2.0], dense_shape=[2, 2]), [[3.0, 1.0], [0.2, -1.0]],",
            "outputs": "5.29"
        },
        "completions": [
            "```python\n    squared_diff = tf.sparse.from_dense(in1) - in2\n    squared_error = tf.reduce_sum(tf.square(squared_diff))\n    return squared_error.numpy()\n```",
            "```python\n    error = tf.reduce_sum(tf.math.square(tf.sparse.to_dense(in1) - in2))\n    return error\n```  ",
            "```python\nreturn tf.reduce_sum(tf.square(tf.sparse.to_dense(in1) - in2))\n```",
            "```python\n    squared_diff = tf.math.squared_difference(tf.sparse.to_dense(in1), in2)\n    result = tf.reduce_sum(squared_diff)\n    return result\n```",
            "```python\nresult = tf.math.reduce_sum(tf.square(tf.sparse.to_dense(in1) - in2))\nreturn result.numpy()\n```",
            "```python\nreturn tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))\n```",
            "```python\nresult = tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))\nreturn result.numpy()\n```",
            "```python\n    return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))\n```",
            "```python\n    result = tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))\n    return result.numpy()\n```",
            "```python\nresult = tf.reduce_sum(tf.math.square(tf.sparse.to_dense(in1) - in2))\nreturn result.numpy()\n```",
            "```python\nresult = tf.math.squared_difference(tf.sparse.to_dense(in1), in2)\noutput = tf.reduce_sum(result)\nreturn output\n```",
            "```python\n    squared_diff = tf.math.squared_difference(tf.sparse.to_dense(in1), in2)\n    result = tf.reduce_sum(squared_diff)\n    return result\n```",
            "```python\nreturn tf.reduce_sum(tf.square(tf.sparse.to_dense(in1) - in2))\n```",
            "```python\nreturn tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))\n```",
            "```python\n    return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))\n```",
            "```python\n    result = tf.math.squared_difference(tf.sparse.to_dense(in1), in2)\n    squared_error = tf.reduce_sum(result)\n    return squared_error\n```",
            "```python\nresult = tf.math.squared_difference(tf.sparse.to_dense(in1), in2)\noutput = tf.reduce_sum(result)\nreturn output.numpy()\n```",
            "```python\n    error = tf.math.squared_difference(tf.sparse.to_dense(in1, 0.0), in2)\n    result = tf.reduce_sum(error)\n    return result\n```",
            "```python\n    squared_diff = tf.sparse.from_dense(in1) - in2\n    squared_error = tf.reduce_sum(tf.square(squared_diff))\n    return squared_error.numpy()\n```",
            "```python\nresult = tf.math.squared_difference(tf.sparse.to_dense(in1), in2)\noutput = tf.reduce_sum(result)\nreturn output\n```"
        ],
        "tf_operators": {
            "tf.sparse.from_dense": 2,
            "tf.square": 5,
            "tf.reduce_sum": 19,
            "tf.math.square": 2,
            "tf.sparse.to_dense": 18,
            "tf.math.squared_difference": 13,
            "tf.math.reduce_sum": 1
        },
        "coverage_percentage": 75.0,
        "total_covered": 3,
        "total_in_target": 4,
        "parsed_constants": [
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            []
        ],
        "all_constants": [],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 0,
            "tf_bool": 0,
            "axis": 0,
            "tf_float32": 0,
            "input_var": 40,
            "tf_int64": 0,
            "provided": 0,
            "shape": 0,
            "shape_tuple": 0,
            "common": 0
        }
    },
    {
        "name": "stackoverflow_32",
        "description": "weighted sum across rows, where the column index is the weight",
        "target_program": "tf.tensordot(in1, tf.cast(tf.range(4), tf.float32), 1)",
        "source": "https://stackoverflow.com/questions/48659449/how-to-compute-the-weighted-sum-of-a-tensor-in-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[[0.1, 0.6, 0.2, 0.1], [0.3, 0.1, 0.4, 0.2], [0.2, 0.1, 0.2, 0.5]],]",
            "outputs": "[1.3, 1.5, 2.0]"
        },
        "completions": [
            "```python\ndef transform(in1):\n    weights = tf.constant([[0, 1, 2, 3]])\n    result = tf.reduce_sum(tf.multiply(in1, weights), axis=1)\n    return result\n```",
            "```python\ndef transform(in1):\n    weights = tf.range(tf.shape(in1)[1], dtype=tf.float32)\n    weighted_sum = tf.reduce_sum(in1 * weights, axis=1)\n    return weighted_sum\n```",
            "```python\nresult = tf.reduce_sum(in1 * tf.range(tf.shape(in1)[1]), axis=1)\nreturn result\n```",
            "```python\ndef transform(in1):\n    weights = tf.constant([[0, 1, 2, 3]])\n    result = tf.reduce_sum(in1 * weights, axis=1)\n    return result\n```",
            "```python\ndef transform(in1):\n    return tf.reduce_sum(tf.multiply(in1, tf.range(tf.shape(in1)[1])), axis=1)\n```",
            "```python\n    weighted_sum = tf.reduce_sum(tf.multiply(in1, tf.range(tf.shape(in1)[-1])), axis=1)\n    return weighted_sum\n```",
            "```python\ndef transform(in1):\n    weights = tf.range(tf.shape(in1)[-1], dtype=tf.float32)\n    return tf.reduce_sum(in1 * weights, axis=1)\n```",
            "def transform(in1):\n    weights = tf.constant([[0, 1, 2, 3]])\n    result = tf.reduce_sum(tf.multiply(in1, weights), axis=1)\n    return result",
            "```python\ndef transform(in1):\n    weighted_sum = tf.reduce_sum(in1 * tf.cast(tf.range(tf.shape(in1)[1]), tf.float32), axis=1)\n    return weighted_sum\n```",
            "```python\ndef transform(in1):\n    weights = tf.range(tf.shape(in1)[1], dtype=tf.float32)\n    return tf.reduce_sum(tf.multiply(in1, weights), axis=1)\n```",
            "```python\ndef transform(in1):\n    weights = tf.range(tf.shape(in1)[1])\n    weighted_sum = tf.reduce_sum(in1 * weights, axis=1)\n    return weighted_sum\n```",
            "```python\ndef transform(in1):\n    weighted_sum = tf.reduce_sum(in1 * tf.constant([[0], [1], [2], [3]]), axis=1)\n    return weighted_sum\n```",
            "```python\nweights = tf.constant([[0, 1, 2, 3]], dtype=tf.float32)\nresult = tf.reduce_sum(tf.multiply(in1, weights), axis=1)\nreturn result\n```",
            "```python\ndef transform(in1):\n    weights = tf.constant([[0, 1, 2, 3]], dtype=tf.float32)\n    result = tf.reduce_sum(in1 * weights, axis=1)\n    return result\n```",
            "```python\ndef transform(in1):\n    weighted_sum = tf.reduce_sum(tf.multiply(in1, tf.cast(tf.range(tf.shape(in1)[1]), tf.float32)), axis=1)\n    return weighted_sum\n```",
            "```python\ndef transform(in1):\n    col_indices = tf.range(tf.cast(tf.shape(in1)[1], tf.float32))\n    weighted_sum = tf.reduce_sum(in1 * tf.cast(col_indices, tf.float32), axis=1)\n    return weighted_sum\n```",
            "```python\ndef transform(in1):\n    indices = tf.range(tf.shape(in1)[1])\n    return tf.reduce_sum(tf.multiply(in1, tf.cast(indices, tf.float32)), axis=1)\n```",
            "```python\ndef transform(in1):\n    weights = tf.constant([[0, 1, 2, 3]])\n    result = tf.reduce_sum(tf.multiply(in1, weights), axis=1)\n    return result\n```",
            "```python\nweights = tf.range(tf.shape(in1)[1], dtype=tf.float32)\nresult = tf.reduce_sum(tf.multiply(in1, weights), axis=1)\n```",
            "```python\ndef transform(in1):\n    weights = tf.constant([[0, 1, 2, 3]])\n    weighted_sum = tf.reduce_sum(tf.multiply(in1, weights), axis=1)\n    return weighted_sum\n```"
        ],
        "tf_operators": {
            "tf.multiply": 11,
            "tf.constant": 8,
            "tf.reduce_sum": 20,
            "tf.shape": 12,
            "tf.float32": 10,
            "tf.range": 12,
            "tf.cast": 4
        },
        "coverage_percentage": 75.0,
        "total_covered": 3,
        "total_in_target": 4,
        "parsed_constants": [
            [
                0,
                1,
                2,
                3,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                0,
                1,
                2,
                3,
                1
            ],
            [
                1,
                1
            ],
            [
                -1,
                1
            ],
            [
                -1,
                1
            ],
            [
                0,
                1,
                2,
                3,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                0,
                1,
                2,
                3,
                1
            ],
            [
                0,
                1,
                2,
                3,
                1
            ],
            [
                0,
                1,
                2,
                3,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                0,
                1,
                2,
                3,
                1
            ],
            [
                1,
                1
            ],
            [
                0,
                1,
                2,
                3,
                1
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            3,
            -1
        ],
        "constant_counts": [
            {
                "common": 3,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 2,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 0,
            "tf_bool": 0,
            "axis": 8,
            "tf_float32": 11,
            "input_var": 34,
            "tf_int64": 0,
            "provided": 0,
            "shape": 8,
            "shape_tuple": 0,
            "common": 48
        }
    },
    {
        "name": "stackoverflow_33",
        "description": "find the minimum distance between two sets of points",
        "target_program": "tf.reduce_min(tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, 0), tf.expand_dims(in2, 1))), axis=2), axis=1)",
        "source": "https://stackoverflow.com/questions/40558251/computing-minimum-distance-for-each-element-in-a-tensor-relative-to-another-tens",
        "constants": "[]",
        "examples": {
            "inputs": "[[[.3, .1, .4], [.1, .5, .9], [.2, .6, .5], [.3, .5, .8],[.9, .7, .9]],[[.3, .2, .3], [.8, .4, .6], [.2, .6, .4], [.3, .3, .8]],]",
            "outputs": "[0.02, 0.19, 0.01, 0.04]"
        },
        "completions": [
            "```python\ndistances = tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)\nreturn distances\n```",
            "```python\n    distances = tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2), axis=1)\n    return distances\n```",
            "```python\ndistances = tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)\nreturn distances\n```",
            "```python\n    distances = tf.reduce_min(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=-1)\n    result = tf.sqrt(distances)\n    return result\n```",
            "```python\ndistances = tf.reduce_min(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2), axis=1)\nreturn distances\n```",
            "```python\n    dist = tf.reduce_min(tf.square(tf.expand_dims(in1, axis=1) - tf.expand_dims(in2, axis=0)), axis=2)\n    result = tf.sqrt(dist)\n    return result\n```",
            "```python\ndef transform(in1, in2):\n    distance = tf.reduce_min(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2), axis=1)\n    return distance\n```",
            "```python\ndistances = tf.reduce_min(tf.reduce_sum(tf.square(tf.expand_dims(in1, axis=1) - tf.expand_dims(in2, axis=0)), axis=2), axis=1)\nreturn distances\n```",
            "```python\ndistances = tf.reduce_min(tf.math.squared_difference(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0)), axis=-1)\nreturn tf.sqrt(distances)\n```",
            "```python\ndistances = []\nfor i in range(len(in1)):\n    distances.append(tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(in1[i] - in2), axis=1))))\nreturn distances\n```",
            "```python\n    distances = tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)\n    return distances\n```",
            "```python\n    dists = tf.reduce_min(tf.math.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)\n    return dists\n```",
            "```python\n    distances = tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2), axis=1)\n    return distances\n```",
            "```python\ndistances = tf.reduce_min(tf.math.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2), axis=1)\nreturn distances\n```",
            "```python\ndistances = tf.reduce_min(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2), axis=1)\nreturn distances\n```",
            "```python\n    dists = tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2), axis=1)\n    return dists\n```",
            "```python\n    dist = tf.reduce_min(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2), axis=1)\n    return dist\n```                                                                                                                                                                                                                          ",
            "```python\ndistances = tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)\nreturn distances\n```",
            "```python\ndistances = tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)\nreturn distances\n```",
            "```python\ndistances = tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)\nreturn distances.numpy()\n```"
        ],
        "tf_operators": {
            "tf.reduce_min": 20,
            "tf.square": 19,
            "tf.sqrt": 13,
            "tf.expand_dims": 19,
            "tf.reduce_sum": 16,
            "tf.math.squared_difference": 1,
            "tf.math.sqrt": 1,
            "tf.math.reduce_sum": 1
        },
        "coverage_percentage": 80.0,
        "total_covered": 4,
        "total_in_target": 5,
        "parsed_constants": [
            [
                1,
                0,
                2,
                1
            ],
            [],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                -1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                -1
            ],
            [
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            -1
        ],
        "constant_counts": [
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            null,
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            null,
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            null,
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 0,
            "tf_bool": 0,
            "axis": 14,
            "tf_float32": 0,
            "input_var": 35,
            "tf_int64": 0,
            "provided": 0,
            "shape": 0,
            "shape_tuple": 0,
            "common": 48
        }
    },
    {
        "name": "stackoverflow_34",
        "description": "compute a weighted sum of tensors",
        "target_program": "tf.tensordot(in2, in1, 1)",
        "source": "https://stackoverflow.com/questions/49532371/compute-a-linear-combination-of-tensors-in-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[[[1, 2], [3, 4]],[[5, 6], [7, 8]],[[10, 20], [30, 40]]],[3, 5, 10],]",
            "outputs": "[[128, 236], [344, 452]]"
        },
        "completions": [
            "```python\n    tf.reduce_sum(in1 * tf.expand_dims(in2, axis=-1), axis=0)\n```",
            "```python\nresult = tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=-1)), axis=0)\n```",
            "```python\nresult = tf.reduce_sum(in1 * tf.expand_dims(in2, axis=-1), axis=0)\nreturn result\n```",
            "```python\nresult = tf.reduce_sum(in1 * tf.expand_dims(in2, -1), axis=0)\n```",
            "```python\nresult = tf.tensordot(in1, in2, axes=([0], [0]))\n```",
            "```python\n    tf.reduce_sum(tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, axis=-1), axis=-1)), axis=0)\n```",
            "```python\n    weighted_sum = tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=-1)), axis=0)\n    return weighted_sum\n```",
            "```python\n    tf.reduce_sum(tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, axis=1), axis=1)), axis=0)\n```",
            "```python\n    result = tf.reduce_sum(in1 * tf.expand_dims(in2, axis=-1), axis=0)\n    return result\n```",
            "```python\ndef transform(in1, in2):\n    weighted_sum = tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 1)), axis=0)\n    return weighted_sum\n```",
            "```python\n    weighted_sum = tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, -1)), axis=0)\n    return weighted_sum\n```",
            "```python\nresult = tf.tensordot(in1, in2, axes=0)\nresult = tf.reduce_sum(result, axis=0)\nreturn result\n```",
            "```python\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=-1)), axis=0)\n```",
            "```python\nresult = tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=1)), axis=0)\n```",
            "```python\n    weighted_sum = tf.reduce_sum(tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1)), axis=0)\n    return weighted_sum\n```",
            "```python\n    tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 1)), 0)\n```",
            "```python\nresult = tf.reduce_sum(tf.multiply(in1, in2[:, tf.newaxis, tf.newaxis]), axis=0)\n```",
            "```python\n    tf.tensordot(in1, in2, axes=0)\n```",
            "```python\noutput = tf.reduce_sum(tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1)), axis=0)\n```",
            "```python\n     tf.tensordot(in1, in2, axes=0)\n```"
        ],
        "tf_operators": {
            "tf.expand_dims": 15,
            "tf.reduce_sum": 17,
            "tf.multiply": 12,
            "tf.tensordot": 4,
            "tf.newaxis": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 1,
        "total_in_target": 1,
        "parsed_constants": [
            [
                -1,
                0
            ],
            [
                -1,
                0
            ],
            [
                -1,
                0
            ],
            [
                -1,
                0
            ],
            [
                0,
                0
            ],
            [
                -1,
                -1,
                0
            ],
            [
                -1,
                0
            ],
            [
                1,
                1,
                0
            ],
            [
                -1,
                0
            ],
            [
                1,
                0
            ],
            [
                -1,
                0
            ],
            [
                0,
                0
            ],
            [
                -1,
                0
            ],
            [
                1,
                0
            ],
            [
                -1,
                -1,
                0
            ],
            [
                1,
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                -1,
                -1,
                0
            ],
            [
                0
            ]
        ],
        "all_constants": [
            0,
            1,
            -1
        ],
        "constant_counts": [
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 0,
            "tf_bool": 0,
            "axis": 0,
            "tf_float32": 0,
            "input_var": 40,
            "tf_int64": 0,
            "provided": 0,
            "shape": 0,
            "shape_tuple": 0,
            "common": 41
        }
    },
    {
        "name": "stackoverflow_35",
        "description": "linear interpolation between two tensors",
        "target_program": "tf.add(in2, tf.multiply(tf.expand_dims(in3, 1), tf.subtract(in1, in2)))",
        "source": "https://stackoverflow.com/questions/49643371/keras-compute-convex-combination-of-two-tensors",
        "constants": "[]",
        "examples": {
            "inputs": "[[[[1.0, 2.0], [3.0, 4.0], [5.0, 6.0]], [[10., 20.], [30., 40.], [50., 60.]]],[[[9.0, 8.0], [7.0, 6.0], [5.0, 4.0]], [[90., 80.], [70., 60.], [50., 40.]]],[0.1, 0.4, 0.8],]",
            "outputs": "[[[8.2, 7.4], [5.4, 5.2], [5.0, 5.6]],    [[82., 74.], [54., 52.], [50., 56.]]]"
        },
        "completions": [
            "```python\nresult = in1 * (1 - in3) + in2 * in3\n```",
            "```python\ndef transform(in1, in2, in3):\n    return in1 + in3[:, None, None] * (in2 - in1)\n```",
            "```python\nresult = tf.add(tf.multiply(in1, 1.0 - in3), tf.multiply(in2, in3))\n```",
            "```python\nresult = in1 + in3 * (in2 - in1)\n```",
            "```python\n    result = in1 + in3[:, None, None] * (in2 - in1)\n    return result\n```",
            "```python\nresult = tf.add(tf.multiply(in1, 1 - in3), tf.multiply(in2, in3))\n```",
            "```python\nresult = tf.add(tf.multiply(1.0 - in3, in1), tf.multiply(in3, in2))\n```",
            "def transform(in1, in2, in3):\n    return in1 * (1 - in3) + in2 * in3",
            "```python\nresult = tf.add(tf.multiply(in1, tf.subtract(1.0, in3)), tf.multiply(in2, in3))\n```",
            "```python\n   result = tf.add(tf.multiply(in1, 1 - in3), tf.multiply(in2, in3))\n   return result\n```",
            "```python\nresult = tf.add_n([in1 * (1.0 - in3[i]) + in2 * in3[i] for i in range(len(in3))])\n```",
            "```python\n    result = tf.add(tf.multiply(in1, 1-in3), tf.multiply(in2, in3))\n    return result\n```",
            "```python\nresult = in1 + in3 * (in2 - in1)\n```",
            "```python\nresult = tf.add(tf.multiply(in1, (1.0 - in3)), tf.multiply(in2, in3))\n```",
            "```python\nresult = in1 * (1 - in3) + in2 * in3\n```",
            "```python\nresult = in1 + in3[:, :, None, None] * (in2 - in1)\n```",
            "```python\nresult = tf.add(tf.multiply(in1, 1.0 - tf.expand_dims(in3, 1)), tf.multiply(in2, tf.expand_dims(in3, 1)))\n```",
            "```python\ntf.add(tf.multiply(in1, 1 - in3), tf.multiply(in2, in3))\n```",
            "```python\nresult = tf.add(tf.multiply(in1, 1-in3), tf.multiply(in2, in3))\n```",
            "```python\nresult = in1 * (1 - in3) + in2 * in3\nreturn result\n```"
        ],
        "tf_operators": {
            "tf.add": 10,
            "tf.multiply": 10,
            "tf.subtract": 1,
            "tf.add_n": 1,
            "tf.expand_dims": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 4,
        "total_in_target": 4,
        "parsed_constants": [
            [
                1
            ],
            [],
            [],
            [],
            [],
            [
                1
            ],
            [],
            [
                1
            ],
            [],
            [
                1
            ],
            [],
            [
                1
            ],
            [],
            [],
            [
                1
            ],
            [],
            [
                1,
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ]
        ],
        "all_constants": [
            1
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 5,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 0,
            "tf_bool": 0,
            "axis": 0,
            "tf_float32": 0,
            "input_var": 81,
            "tf_int64": 0,
            "provided": 0,
            "shape": 0,
            "shape_tuple": 0,
            "common": 11
        }
    },
    {
        "name": "stackoverflow_36",
        "description": "divide each element by the column index",
        "target_program": "tf.cast(tf.divide(in1, tf.add(in1, tf.range(8))), tf.float32)",
        "source": "https://stackoverflow.com/questions/43306788/divide-elements-of-1-d-tensor-by-the-corrispondent-index",
        "constants": "[]",
        "examples": {
            "inputs": "[[1, 0, 1, 1, 0, 1, 0, 1],]",
            "outputs": "[1., 0., 0.333333, 0.25, 0., 0.166667, 0., 0.125]"
        },
        "completions": [
            "```python\ndef transform(in1):\n    return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0] + 1), tf.float32))\n```",
            "```python\ndef transform(in1):\n    return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0] + 1), tf.float32))\n```",
            "```python\ndef transform(in1):\n    result = tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0] + 1), tf.float32))\n    return result\n```",
            "```python\ndef transform(in1):\n    return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0] + 1), tf.float32))\n```",
            "```python\ndef transform(in1):\n    return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0] + 1), tf.float32))\n```",
            "```python\ndef transform(in1):\n    return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0] + 1), tf.float32))\n```",
            "```python\ndef transform(in1):\n    result = tf.divide(in1, tf.cast(tf.range(1, in1.shape[0] + 1), tf.float32))\n    return result\n```",
            "```python\ndef transform(in1):\n    return tf.divide(in1, tf.cast(tf.range(1, tf.size(in1) + 1), tf.float32))\n```",
            "```python\ndef transform(input):\n    return tf.divide(input, tf.cast(tf.range(1, tf.shape(input)[0] + 1), tf.float32))\n```",
            "```python\ndef transform(input):\n    return tf.divide(input, tf.cast(tf.range(1, tf.shape(input)[-1] + 1), dtype=tf.float32))\n```",
            "```python\ndef transform(in1):\n    return tf.divide(in1, tf.cast(tf.range(1, in1.shape[0]+1), tf.float32))\n```",
            "```python\ndef transform(in1):\n    return in1 / tf.cast(tf.range(1, tf.shape(in1)[0] + 1), dtype=in1.dtype)\n```",
            "```python\ndef transform(in1):\n    return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0]+1), tf.float32))\n```",
            "```python\ndef transform(input):\n    return tf.divide(input, tf.range(1, input.shape[0] + 1))\n```",
            "```python\ndef transform(in1):\n    return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0]+1), dtype=tf.float32))\n```",
            "```python\ndef transform(in1):\n    return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0]+1), tf.float32))\n```",
            "```python\ndef transform(in1):\n    return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0] + 1), tf.float32))\n```",
            "```python\ndef transform(in1):\n    return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0] + 1), tf.float32))\n```",
            "```python\ndef transform(in1):\n    result = tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0] + 1), tf.float32))\n    return result\n```",
            "```python\ndef transform(in1):\n    return tf.divide(in1, tf.cast(tf.range(1, in1.shape[0]+1), dtype=tf.float32))\n```"
        ],
        "tf_operators": {
            "tf.cast": 19,
            "tf.shape": 15,
            "tf.divide": 19,
            "tf.float32": 18,
            "tf.range": 20,
            "tf.size": 1
        },
        "coverage_percentage": 80.0,
        "total_covered": 4,
        "total_in_target": 5,
        "parsed_constants": [
            [
                1,
                0,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                -1,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                0,
                1
            ]
        ],
        "all_constants": [
            0,
            1,
            -1
        ],
        "constant_counts": [
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 0,
            "tf_bool": 0,
            "axis": 0,
            "tf_float32": 18,
            "input_var": 36,
            "tf_int64": 0,
            "provided": 0,
            "shape": 0,
            "shape_tuple": 0,
            "common": 59
        }
    },
    {
        "name": "stackoverflow_37",
        "description": "dot product a vector with last dimension of a tensor",
        "target_program": "tf.tensordot(in1, in2, 1)",
        "source": "https://stackoverflow.com/questions/49206051/multiply-4-d-tensor-with-1-d-tensor",
        "constants": "[]",
        "examples": {
            "inputs": "[[[[[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]],  [[1.2, 3.4, 5.6], [7.8, 9.8, 7.6]]]],[0.5, 1.0, 2.0],]",
            "outputs": "[[[8.5, 19.0], [15.2, 28.9]]]"
        },
        "completions": [
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    result = tf.tensordot(in1, in2, axes=[-1, 0])\n    return result\n```",
            "```python\n    result = tf.tensordot(in1, in2, axes=(-1, 0))\n    return result\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[[-1], [0]])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[-1, 0])\n```",
            "```python\nreturn tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[[-1], [0]])\n```    ",
            "```python\n    return tf.tensordot(in1, in2, axes=(-1, 0))\n```",
            "```python\n    result = tf.tensordot(in1, in2, axes=(-1, 0))\n    return result\n```",
            "```python\n    result = tf.tensordot(in1, in2, axes=[[3], [0]])\n    return result\n```",
            "```python\n    out = tf.tensordot(in1, in2, axes=1)\n    return out\n```",
            "```python\nresult = tf.tensordot(in1, in2, axes=1)\nreturn result\n```",
            "```python\nresult = tf.tensordot(in1, in2, axes=(-1, 0))\nreturn result\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[-1, 0])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[-1, 0])\n```",
            "```python\nimport tensorflow as tf\n\ndef transform(in1, in2):\n    result = tf.tensordot(in1, in2, axes=[-1, 0])\n    return result\n```",
            "```python\nout = tf.tensordot(in1, in2, axes=[-1, 0])\nreturn out\n```",
            "```python\n    result = tf.tensordot(in1, in2, axes=(-1, 0))\n    return result\n```",
            "```python\nresult = tf.tensordot(in1, in2, axes=[[-1], [0]])\nreturn result\n```"
        ],
        "tf_operators": {
            "tf.tensordot": 20
        },
        "coverage_percentage": 100.0,
        "total_covered": 1,
        "total_in_target": 1,
        "parsed_constants": [
            [
                1
            ],
            [
                -1,
                0
            ],
            [
                -1,
                0
            ],
            [
                -1,
                0
            ],
            [
                -1,
                0
            ],
            [
                1
            ],
            [
                -1,
                0
            ],
            [
                -1,
                0
            ],
            [
                -1,
                0
            ],
            [
                3,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                -1,
                0
            ],
            [
                -1,
                0
            ],
            [
                1
            ],
            [
                -1,
                0
            ],
            [
                -1,
                0
            ],
            [
                -1,
                0
            ],
            [
                -1,
                0
            ],
            [
                -1,
                0
            ]
        ],
        "all_constants": [
            0,
            1,
            3,
            -1
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 0,
            "tf_bool": 0,
            "axis": 1,
            "tf_float32": 0,
            "input_var": 40,
            "tf_int64": 0,
            "provided": 0,
            "shape": 0,
            "shape_tuple": 0,
            "common": 29
        }
    },
    {
        "name": "stackoverflow_38",
        "description": "compute the product of marked elements",
        "target_program": "tf.reduce_prod(tf.maximum(tf.reduce_max(in2), tf.multiply(in1, in2)), axis=1)",
        "source": "https://stackoverflow.com/questions/49511529/tensorflow-compute-multiplication-by-binary-matrix",
        "constants": "[]",
        "examples": {
            "inputs": "[[9, 2, 5, 3, 7, 4],[[0, 0, 1, 0, 1, 0], [1, 0, 0, 0, 0, 0], [0, 1, 1, 1, 0, 1]],]",
            "outputs": "[35, 9, 120]"
        },
        "completions": [
            "```python\n    marked_elements = tf.boolean_mask(in1, tf.cast(in2, tf.bool))\n    result = tf.reduce_prod(marked_elements, axis=1)\n    return result\n```",
            "```python\nmarked_indices = tf.where(in2)\nmarked_values = tf.gather_nd(in1, marked_indices)\nresult = tf.reduce_prod(marked_values, axis=1)\nreturn result\n```",
            "```python\ndef transform(in1, in2):\n    marked_elements = tf.boolean_mask(in1, tf.cast(in2, tf.bool))\n    product = tf.reduce_prod(marked_elements, axis=1)\n    return product\n```",
            "```python\ndef transform(in1, in2):\n    marked_elements = tf.constant(in1)\n    mask = tf.constant(in2)\n    \n    marked_indices = tf.where(tf.equal(mask, 1))\n    marked_values = tf.gather_nd(marked_elements, marked_indices)\n    \n    product = tf.reduce_prod(marked_values, axis=1)\n    \n    return product.numpy()\n```",
            "```python\n    marked_indices = tf.where(in2)\n    marked_elements = tf.gather_nd(in1, marked_indices)\n    product = tf.reduce_prod(marked_elements, axis=1)\n    return product\n```",
            "```python\nmarked_indices = tf.where(in2)\nmarked_elements = tf.gather(in1, marked_indices)[:, 0]\nproducts = tf.reduce_prod(marked_elements, axis=1)\nreturn products\n```",
            "```python\n    marked_elements = tf.where(in2)\n    products = tf.reduce_prod(tf.gather(in1, marked_elements), axis=1)\n    return products\n```",
            "```python\n    marked_elements = tf.boolean_mask(in1, tf.cast(in2, tf.bool))\n    product = tf.reduce_prod(marked_elements, axis=1)\n    return product\n```",
            "```python\n    marked_values = tf.boolean_mask(in1, tf.cast(in2, tf.bool))\n    result = tf.reduce_prod(marked_values, axis=1)\n    return result\n```",
            "```python\nmask = tf.constant([[0, 0, 1, 0, 1, 0], [1, 0, 0, 0, 0, 0], [0, 1, 1, 1, 0, 1]])\nmarked_elements = tf.boolean_mask(in1, mask)\nresult = tf.reduce_prod(marked_elements, axis=1)\nreturn result\n```",
            "```python\n    marked_idx = tf.cast(tf.where(in2), tf.int32)\n    marked_values = tf.gather_nd(in1, marked_idx)\n    result = tf.reduce_prod(marked_values, axis=1)\n    return result\n```",
            "```python\n    marked_indices = tf.where(in2)\n    marked_elements = tf.gather_nd(in1, marked_indices)\n    product = tf.reduce_prod(marked_elements, axis=1)\n    return product\n```",
            "```python\ndef transform(in1, in2):\n    marked_elements = tf.boolean_mask(in1, tf.cast(in2, tf.bool))\n    result = tf.reduce_prod(marked_elements, axis=1)\n    return result\n```",
            "```python\n    marked_indices = tf.where(tf.equal(in2, 1))\n    marked_values = tf.gather_nd(in1, marked_indices)\n    product = tf.reduce_prod(marked_values, axis=1)\n    return product\n```",
            "```python\n    marked_elements = tf.where(in2)\n    marked_values = tf.gather(in1, marked_elements)\n    product = tf.reduce_prod(marked_values, axis=1)\n    return product\n```",
            "```python\n    res = tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool), axis=1), axis=1)\n    return res\n```",
            "```python\nresult = tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool), axis=1), axis=1)\nreturn result\n```",
            "```python\nmarked_indices = tf.where(in2)\nmarked_elements = tf.gather_nd(in1, marked_indices)\nproduct = tf.reduce_prod(marked_elements, axis=1)\nreturn product\n```",
            "```python\nmarked_positions = tf.where(in2)\nmarked_elements = tf.gather_nd(in1, marked_positions)\nproduct = tf.reduce_prod(marked_elements, axis=1)\nreturn product\n```",
            "```python\n    marked_elements = tf.where(in2)\n    products = tf.reduce_prod(tf.gather(in1, marked_elements), axis=1)\n    return products\n```"
        ],
        "tf_operators": {
            "tf.cast": 8,
            "tf.boolean_mask": 8,
            "tf.bool": 7,
            "tf.reduce_prod": 20,
            "tf.gather_nd": 8,
            "tf.where": 12,
            "tf.equal": 2,
            "tf.constant": 2,
            "tf.gather": 4,
            "tf.int32": 1
        },
        "coverage_percentage": 25.0,
        "total_covered": 1,
        "total_in_target": 4,
        "parsed_constants": [
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                1
            ],
            [
                1
            ],
            [
                0,
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                0,
                0,
                1,
                0,
                1,
                0,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                0,
                1,
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                1
            ],
            [
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ]
        ],
        "all_constants": [
            0,
            1
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 19,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 1,
            "tf_bool": 7,
            "axis": 0,
            "tf_float32": 0,
            "input_var": 39,
            "tf_int64": 0,
            "provided": 0,
            "shape": 0,
            "shape_tuple": 0,
            "common": 42
        }
    },
    {
        "name": "stackoverflow_39",
        "description": "(\\'set to 0 the elements with absolute value less than 1, and square the other elements\\')",
        "target_program": "tf.multiply(tf.square(in1), tf.cast(tf.cast(tf.cast(in1, tf.int32), tf.bool), tf.float32))",
        "source": "https://stackoverflow.com/questions/37912161/how-can-i-compute-element-wise-conditionals-on-batches-in-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[[-1.5, 1.0, 0.9, 2.0], [1.1, 0.0, -0.1, -0.9], [-1.0, 0.1, -1.1, 2.5]],]",
            "outputs": "[[2.25, 1.0, 0.0, 4.0],    [1.21, 0.0, 0.0, 0.0],    [1.0, 0.0, 1.21, 6.25]]"
        },
        "completions": [
            "```python\nresult = tf.where(tf.less(tf.abs(in1), 1), tf.zeros_like(in1), tf.square(in1))\n```",
            "```python\nresult = tf.where(tf.less(tf.abs(in1), 1), tf.zeros_like(in1), tf.square(in1))\nreturn result\n```",
            "```python\nresult = tf.where(tf.less(tf.abs(in1), 1), tf.zeros_like(in1), tf.square(in1))\nreturn result\n```",
            "```python\n    return tf.where(tf.less(tf.abs(in1), 1), tf.zeros_like(in1), tf.square(in1))\n```",
            "```python\n    return tf.where(tf.less(tf.abs(in1), 1), tf.zeros_like(in1), tf.square(in1))\n```",
            "```python\nresult = tf.square(tf.maximum(tf.abs(in1)-1, 0))\nreturn result\n```",
            "```python\nreturn tf.where(tf.less(tf.abs(in1), 1), tf.zeros_like(in1), tf.square(in1))\n```",
            "```python\nresult = tf.square(tf.where(tf.less(tf.abs(in1), 1), tf.zeros_like(in1), in1))\nreturn result\n```",
            "```python\nresult_abs_less_than_1 = tf.less(tf.abs(in1), 1.0)\nsquared_elements = tf.square(tf.where(result_abs_less_than_1, tf.zeros_like(in1), in1))\nreturn squared_elements\n```",
            "```python\n    zero_mask = tf.cast(tf.less(tf.abs(in1), 1), tf.float32)\n    squared_values = tf.square(tf.where(zero_mask, tf.zeros_like(in1), in1))\n    return squared_values\n```",
            "```python\nresult = tf.where(tf.less(tf.abs(in1), 1), tf.zeros_like(in1), tf.square(in1))\nreturn result\n```",
            "```python\nresult = tf.where(tf.less(tf.abs(in1), 1), tf.zeros_like(in1), tf.square(in1))\nreturn result\n```",
            "```python\nresult = tf.where(tf.math.less(tf.abs(in1), 1), tf.zeros_like(in1), tf.square(in1))\nreturn result\n```",
            "def transform(in1):\n    mask = tf.cast(tf.less(tf.abs(in1), 1.0), tf.float32)\n    result = tf.square(tf.where(tf.equal(mask, 0), in1, tf.zeros_like(in1)))\n    return result",
            "```python\nresult = tf.where(tf.less(tf.abs(in1), 1), 0, tf.square(in1))\n```",
            "```python\nresult = tf.where(tf.less(tf.abs(in1), 1), tf.zeros_like(in1), tf.square(in1))\nreturn result\n```",
            "```python\nresult = tf.square(tf.where(tf.less(tf.abs(in1), 1), 0, in1))\n```",
            "```python\nout = tf.square(tf.where(tf.less(tf.abs(in1), 1), 0, in1))\nreturn out\n```",
            "```python\nresult = tf.square(tf.where(tf.less(tf.abs(in1), 1.0), tf.zeros_like(in1), in1))\n```",
            "```python\n    condition = tf.greater(tf.abs(in1), 1)\n    squared_values = tf.square(tf.where(condition, in1, tf.zeros_like(in1)))\n    return squared_values\n```"
        ],
        "tf_operators": {
            "tf.where": 19,
            "tf.square": 20,
            "tf.abs": 20,
            "tf.zeros_like": 16,
            "tf.less": 17,
            "tf.maximum": 1,
            "tf.cast": 2,
            "tf.float32": 2,
            "tf.math.less": 1,
            "tf.equal": 1,
            "tf.greater": 1
        },
        "coverage_percentage": 50.0,
        "total_covered": 3,
        "total_in_target": 6,
        "parsed_constants": [
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                0
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [],
            [
                1
            ]
        ],
        "all_constants": [
            0,
            1
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 0,
            "tf_bool": 0,
            "axis": 0,
            "tf_float32": 2,
            "input_var": 55,
            "tf_int64": 0,
            "provided": 0,
            "shape": 0,
            "shape_tuple": 0,
            "common": 22
        }
    },
    {
        "name": "stackoverflow_40",
        "description": "use the output of tf.nn.top_k to make a sparse tensor",
        "target_program": "tf.sparse.to_dense(tf.SparseTensor(tf.cast(in2, tf.int64), in1, (3, 5)))",
        "source": "https://stackoverflow.com/questions/43996831/make-a-sparse-tensor-based-on-the-output-of-tf-nn-top-k",
        "constants": "[]",
        "examples": {
            "inputs": "[[4, 5, 2, 7, 8, 6],[[0, 2], [0, 4], [1, 1], [1, 3], [2, 0], [2, 3]],]",
            "outputs": "[[0, 0, 4, 0, 5],[0, 2, 0, 7, 0],[8, 0, 0, 6, 0]]"
        },
        "completions": [
            "```python\ndef transform(in1, in2):\n    values = tf.constant(in1)\n    indices = tf.constant(in2)\n    top_k = tf.math.top_k(values, k=tf.shape(indices)[1])\n    sparse_tensor = tf.sparse.SparseTensor(indices, top_k.values, dense_shape=[tf.shape(indices)[0], tf.reduce_max(indices) + 1])\n    return tf.sparse.to_dense(sparse_tensor)\n```",
            "```python\n  values = tf.constant(in1)\n  indices = tf.constant(in2)\n  top_k_values, top_k_indices = tf.nn.top_k(values, k=2)\n  sparse_tensor = tf.sparse.SparseTensor(indices=top_k_indices, values=top_k_values, dense_shape=[3, 5])\n  return tf.sparse.to_dense(sparse_tensor)\n```",
            "```python\n    values = -in1\n    _, indices = tf.math.top_k(values, k=in2.shape[0])\n    updates = tf.ones_like(indices, shape=[tf.shape(indices)[0]])\n    return tf.tensor_scatter_nd_update(tensor=tf.zeros([in2.shape[0], tf.reduce_max(in2) + 1],\n                                                    dtype=in1.dtype), indices=in2, updates=indices)\n```",
            "```python\ndef transform(in1, in2):\n    values = in1\n    indices = in2\n    k = tf.nn.top_k(values, k=tf.shape(values)[-1])\n    sparse_tensor = tf.scatter_nd(indices, k.values, [tf.shape(indices)[0], tf.reduce_max(indices) + 1])\n    return sparse_tensor\n```",
            "```python\ndef transform(in1, in2):\n    values = in1\n    indices = in2\n    top_k_values, top_k_indices = tf.math.top_k(values, k=tf.shape(in2)[1])\n    scattered_indices = tf.stack([tf.range(tf.shape(in2)[0])[:, tf.newaxis], top_k_indices], axis=-1)\n    sparse_tensor = tf.tensor_scatter_nd_update(tf.zeros(tf.concat([tf.shape(in2), [tf.reduce_max(top_k_indices) + 1]], axis=0), dtype=tf.int32), scattered_indices, top_k_values)\n    return sparse_tensor\n```",
            "```python\ndef transform(in1, in2):\n    values, indices = in1, in2\n    top_values, top_indices = tf.math.top_k(-values, k=tf.shape(in2)[1])\n    row_indices = tf.repeat(tf.range(tf.shape(in2)[0]), tf.shape(in2)[1])\n    output = tf.scatter_nd(tf.transpose(tf.stack([row_indices, top_indices])), top_values, shape=tf.shape(in1))\n    return output\n```",
            "```python\ndef transform(in1, in2):\n    values = tf.constant(in1)\n    indices = in2\n    top_k_values, top_k_indices = tf.nn.top_k(values, k=tf.shape(in2)[1])\n    sparse_tensor = tf.sparse.SparseTensor(indices=indices, values=top_k_values, dense_shape=[tf.shape(in2)[0], tf.reduce_max(top_k_indices)+1])\n    return tf.sparse.to_dense(sparse_tensor)\n```",
            "```python\ndef transform(in1, in2):\n    values, indices = tf.nn.top_k(in1, k=in1.shape[0])\n    sparse_tensor = tf.sparse.SparseTensor(indices=in2, values=tf.gather(values, indices), dense_shape=in2.shape)\n    return tf.sparse.to_dense(sparse_tensor)\n```",
            "```python\n    values = tf.constant(in1)\n    indices = tf.constant(in2)\n    top_k_indices = tf.nn.top_k(values, k=tf.shape(values)[0]).indices\n    mask = tf.sequence_mask(in2.shape[0], tf.shape(values)[0])\n    sparse_tensor = tf.boolean_mask(top_k_indices, mask)\n    return sparse_tensor\n```",
            "```python\ndef transform(in1, in2):\n    values, indices = tf.nn.top_k(in1, k=in1.shape[0])\n    result = tf.sparse.SparseTensor(indices=in2, values=tf.gather(values, indices), dense_shape=in2.shape)\n    return tf.sparse.to_dense(result)\n```",
            "```python\ndef transform(in1, in2):\n    values, indices = in1, in2\n    top_values, top_indices = tf.math.top_k(values, k=tf.shape(values)[0])\n    sparse_tensor = tf.scatter_nd(indices=top_indices, updates=top_values, shape=tf.shape(indices))\n    return sparse_tensor\n```",
            "```python\n    values = tf.constant(in1)\n    indices = tf.constant(in2)\n    top_vals, top_idxs = tf.nn.top_k(values, k=tf.shape(in2)[1])\n    sparse_tensor = tf.scatter_nd(indices, top_vals, tf.shape(in2))\n    return sparse_tensor\n```",
            "```python\ndef transform(in1, in2):\n    values, indices = tf.nn.top_k(in1, k=in1.shape[0])\n    sparse_tensor = tf.scatter_nd(indices=tf.cast(in2, tf.int32), updates=values, shape=tf.reduce_max(in2, axis=0) + 1)\n    return sparse_tensor\n```",
            "```python\ndef transform(in1, in2):\n    top_values, top_indices = tf.math.top_k(in1, k=in1.shape[0])\n    sparse_tensor = tf.sparse.SparseTensor(indices=in2, values=top_values, dense_shape=(3, 5))\n    return tf.sparse.to_dense(sparse_tensor)\n```",
            "```python\n    values = tf.constant(in1)\n    indices = tf.constant(in2)\n    top_k_values, top_k_indices = tf.math.top_k(values, k=tf.shape(in2)[1])\n    output = tf.scatter_nd(indices=top_k_indices, updates=top_k_values, shape=(tf.shape(in2)[0], tf.reduce_max(in2) + 1))\n    return output\n```",
            "```python\ndef transform(in1, in2):\n    values = tf.constant(in1)\n    indices = tf.constant(in2)\n    top_values, top_indices = tf.nn.top_k(-values, k=tf.shape(in2)[1])\n    top_indices = tf.transpose(top_indices)\n    top_indices = tf.cast(top_indices, tf.int64)\n    depth = tf.shape(in1)[0]\n    return tf.one_hot(top_indices, depth)\n```",
            "```python\ndef transform(in1, in2):\n    values = tf.constant(in1)\n    indices = in2\n    top_values, top_indices = tf.math.top_k(-values, k=in2.shape[0])\n    output = tf.scatter_nd(indices=top_indices, updates=top_values, shape=tf.reduce_max(top_indices, axis=0) + 1)\n    return output\n```",
            "```python\ndef transform(in1, in2):\n    values = tf.constant(in1)\n    indices = in2[:, 0]\n    updates = in1\n    shape = tf.reduce_max(indices) + 1\n    k_values, k_indices = tf.math.top_k(-values, k=2)\n    sparse_tensor = tf.tensor_scatter_nd_update(tf.zeros(shape), tf.expand_dims(k_indices, 1), tf.gather(values, k_indices))\n    return sparse_tensor\n```",
            "```python\n    values = tf.gather(in1, in2[:, 1])\n    indices = in2[:, 0]\n    sparse_tensor = tf.scatter_nd(tf.expand_dims(indices, 1), values, tf.reduce_max(indices) + 1)\n    return sparse_tensor\n```",
            "```python\ndef transform(in1, in2):\n    values = in1\n    indices = in2\n    topk_values, topk_indices = tf.math.top_k(values, k=tf.shape(values)[0])\n    sparse_tensor = tf.scatter_nd(indices=topk_indices, updates=topk_values, shape=tf.shape(in2, out_type=tf.int64))\n    return sparse_tensor\n```"
        ],
        "tf_operators": {
            "tf.sparse.SparseTensor": 6,
            "tf.shape": 12,
            "tf.constant": 9,
            "tf.math.top_k": 10,
            "tf.sparse.to_dense": 6,
            "tf.reduce_max": 10,
            "tf.nn.top_k": 9,
            "tf.ones_like": 1,
            "tf.tensor_scatter_nd_update": 3,
            "tf.zeros": 3,
            "tf.scatter_nd": 9,
            "tf.int32": 2,
            "tf.concat": 1,
            "tf.stack": 2,
            "tf.newaxis": 1,
            "tf.range": 2,
            "tf.repeat": 1,
            "tf.transpose": 2,
            "tf.gather": 4,
            "tf.sequence_mask": 1,
            "tf.boolean_mask": 1,
            "tf.cast": 2,
            "tf.one_hot": 1,
            "tf.int64": 2,
            "tf.expand_dims": 2
        },
        "coverage_percentage": 75.0,
        "total_covered": 3,
        "total_in_target": 4,
        "parsed_constants": [
            [
                1,
                0,
                1
            ],
            [
                2,
                3,
                5
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                -1,
                0,
                1
            ],
            [
                1,
                0,
                -1,
                1,
                0
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                0
            ],
            [
                0,
                0,
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                1
            ],
            [
                0,
                0,
                1
            ],
            [
                0,
                3,
                5
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                0
            ],
            [
                0,
                0,
                1
            ],
            [
                0,
                1,
                2,
                1
            ],
            [
                1,
                0,
                1,
                1
            ],
            [
                0
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            3,
            5,
            -1
        ],
        "constant_counts": [
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 7,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 7,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 1
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 1,
                "tf_bool": 0,
                "input_var": 5,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 1,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 2,
            "tf_bool": 0,
            "axis": 2,
            "tf_float32": 0,
            "input_var": 90,
            "tf_int64": 2,
            "provided": 2,
            "shape": 0,
            "shape_tuple": 1,
            "common": 45
        }
    },
    {
        "name": "stackoverflow_41",
        "description": "copy all elements except at the given index",
        "target_program": "tf.boolean_mask(in1, tf.not_equal(tf.constant(in2), tf.range(10)))",
        "source": "https://stackoverflow.com/questions/54499051/elegant-way-to-access-python-list-and-tensor-in-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[5, 2, 8, 2, 4, 1, 1, 0, 2, 1],3,]",
            "outputs": "[5, 2, 8, 4, 1, 1, 0, 2, 1]"
        },
        "completions": [
            "```python\ndef transform(in1, in2):\n    return tf.concat([in1[:in2], in1[in2+1:]], axis=0)\n```",
            "```python\n    return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.concat([in1[:in2], in1[in2+1:]], axis=0)\n```",
            "```python\noutput = tf.gather(in1, tf.concat([tf.range(in2), tf.range(in2+1, tf.shape(in1)[0])], axis=0))\nreturn output\n```",
            "```python\ndef transform(in1, in2):\n    return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.gather(in1, tf.where(tf.not_equal(tf.range(tf.shape(in1)[0]), in2))[:, 0])\n```",
            "```python\n    return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.concat([in1[:in2], in1[in2+1:]], axis=0)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.concat([in1[:in2], in1[in2+1:]], axis=0)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.size(in1)), in2))\n```",
            "```python\n    return tf.concat([in1[:in2], in1[in2+1:]], axis=0)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.gather(in1, tf.boolean_mask(tf.range(tf.shape(in1)[0]), tf.not_equal(tf.range(tf.shape(in1)[0]), in2)))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.gather(in1, tf.where(tf.not_equal(tf.range(tf.shape(in1)[0]), in2))[:, 0])\n```",
            "```python\ndef transform(in1, in2):\n    return tf.concat([in1[:in2], in1[in2+1:]], axis=0)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.gather(in1, tf.where(tf.not_equal(tf.range(tf.shape(in1)[0]), in2))[:, 0])\n```",
            "```python\ndef transform(in1, in2):\n    output = tf.concat([in1[:in2], in1[in2+1:]], axis=0)\n    return output\n```",
            "```python\n    return tf.gather(in1, tf.where(tf.not_equal(tf.range(tf.shape(in1)[0]), in2))[:, 0])\n```",
            "```python\ndef transform(in1, in2):\n    return tf.concat([in1[:in2], in1[in2+1:]], axis=0)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.concat([in1[:in2], in1[in2+1:]], axis=0)\n```"
        ],
        "tf_operators": {
            "tf.concat": 10,
            "tf.not_equal": 10,
            "tf.boolean_mask": 6,
            "tf.range": 11,
            "tf.shape": 10,
            "tf.gather": 6,
            "tf.where": 4,
            "tf.size": 1
        },
        "coverage_percentage": 75.0,
        "total_covered": 3,
        "total_in_target": 4,
        "parsed_constants": [
            [
                1,
                0
            ],
            [
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0,
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                0,
                0
            ],
            [
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [],
            [
                1,
                0
            ],
            [
                0,
                0
            ],
            [
                0,
                0
            ],
            [
                1,
                0
            ],
            [
                0,
                0
            ],
            [
                1,
                0
            ],
            [
                0,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ]
        ],
        "all_constants": [
            0,
            1
        ],
        "constant_counts": [
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 0,
            "tf_bool": 0,
            "axis": 0,
            "tf_float32": 0,
            "input_var": 71,
            "tf_int64": 0,
            "provided": 0,
            "shape": 0,
            "shape_tuple": 0,
            "common": 31
        }
    },
    {
        "name": "stackoverflow_42",
        "description": "create a binary vector where the max element is 1",
        "target_program": "tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)",
        "source": "https://stackoverflow.com/questions/54493814/binary-vector-of-max",
        "constants": "[]",
        "examples": {
            "inputs": "[[4, 6, 2, 6, 7, 3, -3],]",
            "outputs": "[0, 0, 0, 0, 1, 0, 0]"
        },
        "completions": [
            "```python\n    max_val = tf.reduce_max(in1)\n    result = tf.cast(tf.equal(in1, max_val), tf.int32)\n    return result\n```",
            "```python\ndef transform(in1):\n    max_elem = tf.reduce_max(in1)\n    binary_vector = tf.one_hot(tf.argmax(in1) , depth=tf.size(in1), dtype=tf.int32)\n    return binary_vector\n```",
            "```python\n    max_elem = tf.reduce_max(in1)\n    result = tf.where(tf.equal(in1, max_elem), tf.ones_like(in1), tf.zeros_like(in1))\n    return result\n```",
            "```python\n    max_val = tf.reduce_max(in1)\n    output = tf.cast(tf.equal(in1, max_val), dtype=tf.int32)\n    return output.numpy()\n```  ",
            "```python\ndef transform(in1):\n    max_val = tf.reduce_max(in1)\n    binary_vector = tf.cast(tf.equal(in1, max_val), tf.int32)\n    return binary_vector\n```",
            "```python\ndef transform(in1):\n    max_val = tf.reduce_max(in1)\n    binary_vector = tf.cast(tf.equal(in1, max_val), tf.int32)\n    return binary_vector\n```",
            "```python\ndef transform(in1):\n    max_idx = tf.argmax(in1)\n    result = tf.one_hot(max_idx, tf.shape(in1)[0], dtype=tf.int32)\n    return result\n```",
            "```python\n    result = tf.equal(in1, tf.reduce_max(in1))\n    return tf.cast(result, tf.int32)\n```",
            "```python\ndef transform(in1):\n    max_elem = tf.reduce_max(in1)\n    binary_vector = tf.cast(tf.equal(in1, max_elem), dtype=tf.int32)\n    return binary_vector\n```",
            "```python\nmax_val = tf.reduce_max(in1)\noutput = tf.cast(tf.equal(in1, max_val), tf.int32)\nreturn output\n```",
            "```python\n    max_value = tf.reduce_max(in1)\n    binary_vector = tf.where(tf.equal(in1, max_value), 1, 0)\n    return binary_vector\n```",
            "```python\nmax_value = tf.reduce_max(in1)\noutput = tf.cast(tf.equal(in1, max_value), tf.int32)\nreturn output\n```",
            "```python\ndef transform(in1):\n    max_val = tf.reduce_max(in1)\n    binary_vector = tf.equal(in1, max_val)\n    return tf.cast(binary_vector, tf.int32)\n```",
            "```python\ndef transform(in1):\n    max_val = tf.reduce_max(in1)\n    binary_vec = tf.cast(tf.equal(in1, max_val), tf.int32)\n    return binary_vec\n```",
            "```python\ndef transform(in1):\n    max_elem = tf.reduce_max(in1)\n    binary_vector = tf.equal(in1, max_elem)\n    return tf.cast(binary_vector, tf.int32)\n```",
            "```python\ndef transform(in1):\n    max_val = tf.reduce_max(in1)\n    result = tf.cast(tf.equal(in1, max_val), tf.int32)\n    return result\n```",
            "def transform(in1):\n    max_val = tf.reduce_max(in1)\n    binary_vector = tf.cast(tf.equal(in1, max_val), tf.int32)\n    return binary_vector",
            "```python\ndef transform(in1):\n    max_value = tf.reduce_max(in1)\n    binary_vector = tf.where(tf.equal(in1, max_value), 1, 0)\n    return binary_vector\n```",
            "```python\ndef transform(in1):\n    max_val = tf.reduce_max(in1)\n    binary_vector = tf.cast(tf.equal(in1, max_val), tf.int32)\n    return binary_vector\n```",
            "```python\ndef transform(in1):\n    max_val = tf.reduce_max(in1)\n    binary_vector = tf.cast(tf.equal(in1, max_val), tf.int32)\n    return binary_vector\n``` "
        ],
        "tf_operators": {
            "tf.reduce_max": 19,
            "tf.cast": 15,
            "tf.int32": 17,
            "tf.equal": 18,
            "tf.size": 1,
            "tf.one_hot": 2,
            "tf.argmax": 2,
            "tf.where": 3,
            "tf.ones_like": 1,
            "tf.zeros_like": 1,
            "tf.shape": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 4,
        "total_in_target": 4,
        "parsed_constants": [
            [],
            [],
            [],
            [],
            [],
            [],
            [
                0
            ],
            [],
            [],
            [],
            [
                1,
                0
            ],
            [],
            [],
            [],
            [],
            [],
            [],
            [
                1,
                0
            ],
            [],
            []
        ],
        "all_constants": [
            0,
            1
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 17,
            "tf_bool": 0,
            "axis": 0,
            "tf_float32": 0,
            "input_var": 43,
            "tf_int64": 0,
            "provided": 0,
            "shape": 0,
            "shape_tuple": 0,
            "common": 5
        }
    },
    {
        "name": "stackoverflow_43",
        "description": "extract elements of a tensor given row indices",
        "target_program": "tf.gather_nd(tf.transpose(in1), tf.expand_dims(in2, 1), batch_dims=1)",
        "source": "https://stackoverflow.com/questions/54455169/better-way-to-access-individual-elements-in-a-tensor",
        "constants": "[]",
        "examples": {
            "inputs": "[[[12, 34, 56, 78, 90, 10], [99, 88, 77, 55, 44, 33], [-1, -2, -3, -4, -5, -6]],[0, 1, 1, 0, 2, 0],]",
            "outputs": "[12, 88, 77, 78, -5, 10]"
        },
        "completions": [
            "```python\nreturn tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1))\n```",
            "```python\n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1))\n```  ",
            "```python\nresult = tf.gather_nd(in1, tf.expand_dims(in2, 1))[:, 0]\nreturn result\n```",
            "```python\noutput = tf.gather(in1, in2)\nreturn output\n```",
            "```python\nreturn tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1))\n```",
            "```python\noutput = tf.gather_nd(in1, in2)\nreturn output\n```",
            "```python\ndef transform(in1, in2):\n    return tf.gather_nd(in1, tf.expand_dims(in2, 1))\n```",
            "```python\n    return tf.gather_nd(in1, tf.stack([in2, tf.range(tf.size(in2))], axis=1))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.gather_nd(in1, tf.stack([in2, tf.range(tf.size(in2))], axis=1))\n```",
            "```python\n    return tf.gather(in1, in2)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.gather_nd(in1, tf.stack([in2, tf.range(tf.size(in2))], axis=1))\n```",
            "```python\n    return tf.gather_nd(in1, tf.stack([in2, tf.range(tf.shape(in2)[0])], axis=1))\n```",
            "```python\nresult = tf.gather(in1, in2)\nreturn result\n```",
            "```python\ndef transform(in1, in2):\n    return tf.gather_nd(in1, tf.stack([in2, tf.range(tf.shape(in2)[0])], axis=1))\n```",
            "```python\n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.gather(in1, in2)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.gather_nd(in1, tf.expand_dims(in2, 1))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.gather_nd(in1, tf.transpose([in2]))\n```",
            "```python\noutput = tf.gather_nd(in1, in2)\nreturn output\n```"
        ],
        "tf_operators": {
            "tf.gather_nd": 16,
            "tf.stack": 10,
            "tf.range": 10,
            "tf.shape": 7,
            "tf.expand_dims": 3,
            "tf.gather": 4,
            "tf.size": 3,
            "tf.transpose": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 3,
        "total_in_target": 3,
        "parsed_constants": [
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                1,
                0
            ],
            [],
            [
                0,
                1
            ],
            [],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [],
            [
                1
            ],
            [
                0,
                1
            ],
            [],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [],
            [
                0,
                1
            ],
            [
                1
            ],
            [],
            []
        ],
        "all_constants": [
            0,
            1
        ],
        "constant_counts": [
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 0,
            "tf_bool": 0,
            "axis": 0,
            "tf_float32": 0,
            "input_var": 50,
            "tf_int64": 0,
            "provided": 0,
            "shape": 0,
            "shape_tuple": 0,
            "common": 20
        }
    },
    {
        "name": "stackoverflow_44",
        "description": "sum across columns for pairs of consecutive rows",
        "target_program": "tf.squeeze(tf.reduce_sum(tf.reshape(in1, (-1, 2, in1.shape[1])), axis=1))",
        "source": "https://stackoverflow.com/questions/54402389/sum-the-columns-for-each-two-consecutive-rows-of-a-tensor-of-3-dimensions",
        "constants": "[2]",
        "examples": {
            "inputs": "[[[3, 5, 2], [6, 2, 3], [8, 7, 1], [0, -3, 5], [-4, 7, 3], [2, 1, 6], [10, 20, 30], [4, 5, 6]],]",
            "outputs": "[[9, 7, 5],    [8, 4, 6],    [-2, 8, 9],    [14, 25, 36]]"
        },
        "completions": [
            "```python\ndef transform(in1):\n    return tf.reduce_sum(tf.reshape(in1, (-1, 2, in1.shape[-1])), axis=1)\n```",
            "```python\nout = tf.math.cumsum(in1, axis=0, exclusive=True)[:-1]\nresult = tf.subtract(out[1::2], out[::2])\nreturn result\n```",
            "```python\ndef transform(in1):\n    return tf.reduce_sum(tf.reshape(in1, [-1, 2, tf.shape(in1)[1]]), axis=1)\n```",
            "```python\ndef transform(in1):\n    return tf.reduce_sum(tf.reshape(in1, (4, 2, 3)), axis=1)\n```",
            "```python\ndef transform(in1):\n    return tf.reduce_sum(tf.reshape(in1, (-1, 2, in1.shape[1])), axis=1)\n```",
            "```python\n    row_sums = tf.reduce_sum(tf.reshape(in1, [-1, 2, in1.shape[1]]), axis=1)\n    return row_sums\n```",
            "```python\n    row_sum = tf.reduce_sum(in1, axis=0)\n    result = tf.reshape(row_sum, (-1, 3))\n    return result\n```",
            "```python\ndef transform(in1):\n    return tf.reduce_sum(tf.reshape(in1, (in1.shape[0]//2, 2, in1.shape[1])), axis=1)\n```",
            "```python\n    cumsum = tf.math.cumsum(in1, exclusive=False, axis=0)\n    result = tf.subtract(cumsum[1::2], cumsum[::2])\n    return result\n```",
            "```python\ndef transform(in1):\n    return tf.reduce_sum(tf.reshape(in1, (-1, 2, in1.shape[1])), axis=1)\n```",
            "```python\ndef transform(in1):\n    result = tf.reduce_sum(tf.reshape(in1, [-1, 2, in1.shape[1]]), axis=1)\n    return result\n```",
            "```python\ndef transform(in1):\n    return tf.reduce_sum(tf.reshape(in1, (-1, 2, tf.shape(in1)[1])), axis=1)\n```",
            "```python\ndef transform(in1):\n    return tf.reduce_sum(tf.reshape(in1, (-1, 2, in1.shape[1])), axis=1)\n```",
            "```python\ndef transform(in1):\n    return tf.reduce_sum(tf.reshape(in1, (-1, 2, in1.shape[1])), axis=1)\n```",
            "```python\n    return tf.reduce_sum(tf.reshape(in1, [-1, 2, 3]), axis=1)\n```",
            "```python\ndef transform(in1):\n    return tf.reduce_sum(tf.reshape(in1, (-1, 2, in1.shape[1])), axis=1)\n```",
            "```python\n    out = tf.math.segment_sum(in1, tf.repeat(tf.constant([0, 1], dtype=tf.int32), tf.shape(in1)[0]//2))\n    return out\n```",
            "```python\nresult = tf.reduce_sum(tf.stack([in1[::2], in1[1::2]], axis=2), axis=0)\n```",
            "```python\n    return tf.reduce_sum(tf.reshape(in1, (-1, 2, in1.shape[1])), axis=1)\n```",
            "```python\ndef transform(in1):\n    return tf.reduce_sum(tf.reshape(in1, (-1, 2, in1.shape[1])), axis=1)\n```"
        ],
        "tf_operators": {
            "tf.reshape": 16,
            "tf.reduce_sum": 17,
            "tf.math.cumsum": 2,
            "tf.subtract": 2,
            "tf.shape": 3,
            "tf.int32": 1,
            "tf.repeat": 1,
            "tf.constant": 1,
            "tf.math.segment_sum": 1,
            "tf.stack": 1
        },
        "coverage_percentage": 66.66666666666666,
        "total_covered": 2,
        "total_in_target": 3,
        "parsed_constants": [
            [
                -1,
                2,
                -1,
                1
            ],
            [
                0,
                -1,
                1,
                2,
                2
            ],
            [
                -1,
                2,
                1,
                1
            ],
            [
                4,
                2,
                3,
                1
            ],
            [
                -1,
                2,
                1,
                1
            ],
            [
                -1,
                2,
                1,
                1
            ],
            [
                0,
                -1,
                3
            ],
            [
                0,
                2,
                2,
                1,
                1
            ],
            [
                0,
                1,
                2,
                2
            ],
            [
                -1,
                2,
                1,
                1
            ],
            [
                -1,
                2,
                1,
                1
            ],
            [
                -1,
                2,
                1,
                1
            ],
            [
                -1,
                2,
                1,
                1
            ],
            [
                -1,
                2,
                1,
                1
            ],
            [
                -1,
                2,
                3,
                1
            ],
            [
                -1,
                2,
                1,
                1
            ],
            [
                0,
                1,
                0,
                2
            ],
            [
                2,
                1,
                2,
                2,
                0
            ],
            [
                -1,
                2,
                1,
                1
            ],
            [
                -1,
                2,
                1,
                1
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            3,
            4,
            -1
        ],
        "constant_counts": [
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 3,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 1,
            "tf_bool": 0,
            "axis": 13,
            "tf_float32": 0,
            "input_var": 24,
            "tf_int64": 0,
            "provided": 0,
            "shape": 1,
            "shape_tuple": 0,
            "common": 56
        }
    },
    {
        "name": "stackoverflow_45",
        "description": "reverse the order in the marked rows",
        "target_program": "tf.where(tf.sequence_mask(in2), x=tf.roll(in1, 1, -1), y=in1)",
        "source": "https://stackoverflow.com/questions/54337925/reverse-order-of-some-elements-in-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[[[12, 34], [56, 78], [23, 54], [76, 78], [42, 24]]],[1, 0, 1, 0, 1],]",
            "outputs": "[[[34, 12], [56, 78], [54, 23], [76, 78], [24, 42]]]"
        },
        "completions": [
            "```python\n    rows_to_reverse = tf.where(in2)\n    reversed_rows = tf.reverse(in1, axis=[2], name=None)\n    result = tf.tensor_scatter_nd_update(in1, rows_to_reverse, reversed_rows)\n    return result\n```",
            "```python\ndef transform(in1, in2):\n    return tf.reverse(in1, axis=[1])[0, in2]\n```",
            "```python\n    reversed_indices = tf.boolean_mask(tf.range(tf.shape(in1)[1]-1, -1, -1), in2==1)  #[3 0 3 0 3]\n    reversed_in1 = tf.gather(in1, reversed_indices, axis=1)\n    return reversed_in1\n```",
            "```python\ndef transform(in1, in2):\n    reversed_indices = tf.reverse(tf.where(tf.equal(in2, 1)), axis=[0])\n    return tf.tensor_scatter_nd_update(in1, reversed_indices, tf.gather_nd(in1, reversed_indices))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.reverse(in1, axis=[1])[0], in2\n```",
            "```python\n    return tf.reverse(in1, axis=[1])[0, 1], in2[::-1]\n```",
            "```python\n    return tf.reverse(in1, axis=[1])[0, in2]\n```",
            "```python\nout = tf.reverse(in1, axis=[1])\nout = tf.where(in2, out, in1)\nreturn out\n```",
            "```python\nmarked_rows = tf.where(in2)\nreversed_rows = tf.reverse(in1, axis=[1])\nresult = tf.tensor_scatter_nd_update(in1, marked_rows, reversed_rows)\nreturn result\n```",
            "```python\n    marked_rows_indices = tf.where(in2)\n    marked_rows_indices = tf.reverse(marked_rows_indices, axis=[0])\n    return tf.tensor_scatter_nd_update(in1, marked_rows_indices, tf.reverse(tf.gather_nd(in1, marked_rows_indices), axis=[-1]))\n```",
            "```python\ndef transform(in1, in2):\n    in1 = tf.reverse(in1, axis=[0])\n    in1 = tf.where(tf.equal(in2, 1), in1, tf.reverse(in1, axis=[1]))\n    return in1\n```",
            "```python\n    # Reverse the order in the marked rows\n    return tf.reverse(in1, axis=[1])[0::in2.shape[0]]\n```",
            "```python\n    result = tf.reverse(in1, axis=[1])\n    mask = tf.equal(in2, 0)\n    indices = tf.where(mask)\n    return tf.tensor_scatter_nd_update(result, indices, tf.reverse(tf.gather_nd(in1, indices), axis=[2]))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.reverse(in1, axis=[1])[0] * in2[:, tf.newaxis]\n```",
            "def transform(in1, in2):\n    reversed_indices = tf.argsort(in2, axis=None)\n    reversed_in1 = tf.reverse(in1, axis=[0])\n    return tf.gather(reversed_in1, reversed_indices)",
            "```python\ndef transform(in1, in2):\n    return tf.reverse(tf.boolean_mask(in1, in2), axis=[2])\n```",
            "```python\n    reversed_indices = tf.boolean_mask(tf.range(tf.shape(in1)[1]-1, -1, -1), in2)\n    return tf.reverse(in1, axis=[1])[reversed_indices]\n```",
            "```python\ndef transform(in1, in2):\n    reversed_indices = tf.reverse(tf.where(in2), axis=[0])\n    return tf.gather_nd(in1, reversed_indices)\n```",
            "```python\ndef transform(in1, in2):\n    marked_rows = tf.where(tf.equal(in2, 1))\n    reversed_rows = tf.reverse(marked_rows, axis=[1])\n    result = tf.tensor_scatter_nd_update(in1, marked_rows, tf.gather_nd(in1, reversed_rows))\n    return result\n```",
            "```python\ndef transform(in1, in2):\n    return tf.reverse(tf.boolean_mask(in1, in2, axis=2), axis=[2])\n```"
        ],
        "tf_operators": {
            "tf.reverse": 19,
            "tf.where": 9,
            "tf.tensor_scatter_nd_update": 6,
            "tf.boolean_mask": 4,
            "tf.gather": 2,
            "tf.range": 2,
            "tf.shape": 2,
            "tf.equal": 4,
            "tf.gather_nd": 5,
            "tf.newaxis": 1,
            "tf.argsort": 1
        },
        "coverage_percentage": 33.33333333333333,
        "total_covered": 1,
        "total_in_target": 3,
        "parsed_constants": [
            [
                2
            ],
            [
                1,
                0
            ],
            [
                1,
                1,
                -1,
                -1,
                1,
                1
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0,
                1,
                -1
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                0,
                -1
            ],
            [
                0,
                1,
                1
            ],
            [
                1,
                0,
                0
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                0
            ],
            [
                0
            ],
            [
                2
            ],
            [
                1,
                1,
                -1,
                -1,
                1
            ],
            [
                0
            ],
            [
                1,
                1
            ],
            [
                2,
                2
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            -1
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 6,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 7,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 0,
            "tf_bool": 0,
            "axis": 5,
            "tf_float32": 0,
            "input_var": 53,
            "tf_int64": 0,
            "provided": 0,
            "shape": 0,
            "shape_tuple": 0,
            "common": 37
        }
    },
    {
        "name": "stackoverflow_46",
        "description": "convert segment lengths to segment ids",
        "target_program": "tf.cast(tf.where(tf.sequence_mask(in1))[:, 0], tf.int32)",
        "source": "https://stackoverflow.com/questions/58652161/how-to-convert-2-3-4-to-0-0-1-1-1-2-2-2-2-to-utilize-tf-math-segment-sum",
        "constants": "[]",
        "examples": {
            "inputs": "[[3, 4, 1],]",
            "outputs": "[0, 0, 0, 1, 1, 1, 1, 2]"
        },
        "completions": [
            "```python\ndef transform(in1):\n    segment_lengths = in1\n    segment_ids = tf.repeat(tf.range(tf.size(segment_lengths)), segment_lengths)\n    return segment_ids\n```",
            "```python\ndef transform(segment_lengths):\n    segment_ids = tf.repeat(tf.range(tf.size(segment_lengths)), segment_lengths)\n    return segment_ids.numpy()\n```",
            "```python\ndef transform(input_lengths):\n    max_length = tf.reduce_sum(input_lengths)\n    segment_ids = tf.cumsum(tf.ones(max_length, dtype=tf.int32)) - 1\n    return segment_ids\n```",
            "```python\ndef transform(in1):\n    return tf.repeat(tf.range(tf.size(in1)), in1)\n```",
            "```python\ndef transform(in1):\n    segment_lengths = in1\n    num_segments = len(segment_lengths)\n    segment_ids = tf.repeat(tf.range(num_segments), segment_lengths)\n    return segment_ids\n```",
            "```python\ndef transform(in1):\n    segment_lengths = tf.convert_to_tensor(in1)\n    segment_ids = tf.math.cumsum(tf.ones_like(segment_lengths, dtype=tf.int32), axis=0) - 1\n    return segment_ids.numpy()\n```  ",
            "```python\ndef transform(in1):\n    segment_lengths = in1\n    segment_ids = tf.math.cumsum(tf.ones_like(segment_lengths), exclusive=True)\n    return segment_ids.numpy()\n```",
            "```python\ndef transform(in1):\n    segment_lengths = in1\n    segment_ids = tf.math.cumsum(tf.ones(segment_lengths))\n    return segment_ids\n```",
            "```python\ndef transform(in1):\n    segment_lengths = in1\n    num_segments = len(segment_lengths)\n    segment_ids = []\n    for i, length in enumerate(segment_lengths):\n        segment_ids += [i] * length\n    return tf.constant(segment_ids)\n```",
            "```python\ndef transform(in1):\n    segment_lengths = in1.numpy()\n    segment_ids = tf.repeat(tf.range(tf.size(segment_lengths)), segment_lengths)\n    return segment_ids.numpy()\n```",
            "```python\ndef transform(in1):\n    lengths = in1\n    segment_ids = tf.repeat(tf.range(tf.size(lengths)), tf.cast(lengths, tf.int32))\n    return segment_ids\n```",
            "```python\ndef transform(in1):\n    segment_lengths = tf.unstack(in1)\n    segment_ids = tf.repeat(tf.range(tf.size(segment_lengths)), segment_lengths)\n    return segment_ids\n```",
            "```python\ndef transform(in1):\n    segment_lengths = in1\n    segment_ids = tf.repeat(tf.range(tf.size(segment_lengths)), segment_lengths)\n    return segment_ids\n```",
            "```python\ndef transform(in1):\n    segment_lengths = in1\n    segment_ids = tf.math.cumsum(tf.ones_like(segment_lengths), exclusive=True)\n    return segment_ids\n```",
            "```python\ndef transform(in1):\n    segment_lengths = in1\n    segment_ids = tf.repeat(tf.range(tf.size(segment_lengths)), segment_lengths)\n    return segment_ids\n```",
            "```python\ndef transform(in1):\n    segment_lengths = tf.cast(in1, tf.int32)\n    segment_ids = tf.cumsum(tf.ones_like(segment_lengths), exclusive=True)\n    return tf.repeat(segment_ids, segment_lengths)\n```",
            "```python\ndef transform(in1):\n    segment_lengths = in1\n    segment_ids = tf.repeat(tf.range(tf.size(segment_lengths)), segment_lengths)\n    return segment_ids\n```",
            "```python\ndef transform(in1):\n    segment_ids = tf.repeat(tf.range(tf.size(in1)), in1)\n    return segment_ids\n```",
            "```python\ndef transform(in1):\n    segment_ids = tf.repeat(tf.range(tf.size(in1)), in1)\n    return segment_ids\n```",
            "```python\ndef transform(in1):\n    segment_lengths = in1\n    segment_ids = tf.repeat(tf.range(tf.size(segment_lengths)), segment_lengths)\n    return segment_ids\n```"
        ],
        "tf_operators": {
            "tf.size": 12,
            "tf.repeat": 14,
            "tf.range": 13,
            "tf.int32": 4,
            "tf.cumsum": 2,
            "tf.ones": 2,
            "tf.reduce_sum": 1,
            "tf.ones_like": 4,
            "tf.math.cumsum": 4,
            "tf.convert_to_tensor": 1,
            "tf.constant": 1,
            "tf.cast": 2,
            "tf.unstack": 1
        },
        "coverage_percentage": 50.0,
        "total_covered": 2,
        "total_in_target": 4,
        "parsed_constants": [
            [],
            [],
            [
                1
            ],
            [],
            [],
            [
                0,
                1
            ],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            []
        ],
        "all_constants": [
            0,
            1
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 0,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 0,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 4,
            "tf_bool": 0,
            "axis": 0,
            "tf_float32": 0,
            "input_var": 21,
            "tf_int64": 0,
            "provided": 0,
            "shape": 0,
            "shape_tuple": 0,
            "common": 6
        }
    },
    {
        "name": "stackoverflow_47",
        "description": "put given values into a sequence mask",
        "target_program": "tf.reshape(tf.gather(in1, tf.cumsum(tf.reshape(tf.cast(in2, tf.int32), [-1]), exclusive=True) * tf.reshape(tf.cast(in2, tf.int32), [-1])), in2.shape)",
        "source": "https://stackoverflow.com/questions/58641546/how-can-i-put-the-sequential-values-to-the-sequence-mask",
        "constants": "[]",
        "examples": {
            "inputs": "[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16],[[True, True, True, False, False], [True, True, False, False, False], [True, True, True, True, True], [True, True, True, True, False], [True, False, False, False, False], [True, True, False, False, False]],]",
            "outputs": "[[0, 1, 2, 0, 0],    [3, 4, 0, 0, 0],    [5, 6, 7, 8, 9],    [10, 11, 12, 13, 0],    [14, 0, 0, 0, 0],    [15, 16, 0, 0, 0]]"
        },
        "completions": [
            "```python\n    return tf.where(tf.sequence_mask(tf.reduce_sum(in2, axis=1)), in1, tf.zeros_like(in1))\n```",
            "```python\n    mask = tf.sequence_mask(tf.reduce_sum(tf.cast(in2, tf.int32), axis=1), maxlen=tf.shape(in2)[1])\n    result = tf.boolean_mask(in1, tf.tile(in2, [1,2]))\n    return tf.reshape(result, mask.shape)\n```",
            "```python\n    mask = tf.sequence_mask(tf.reduce_sum(tf.cast(in2, tf.int32)), maxlen=tf.shape(in2)[1])\n    result = tf.boolean_mask(in1, in2) * tf.cast(mask, tf.int64)\n    return result\n```",
            "```python\n    return tf.boolean_mask(in1, in2)\n```",
            "```python\n     return tf.multiply(tf.cast(in1, tf.int32), tf.cast(in2, tf.int32))\n```",
            "```python\n    result = tf.where(in2, in1, tf.constant(0))\n    return result\n```",
            "```python\n    return tf.where(in2, in1, 0)\n```",
            "```python\n    result = tf.where(in2, tf.range(tf.reduce_max(in1)+1), tf.zeros_like(in1))\n    return tf.cast(result, tf.int32)\n```",
            "```python\n    return tf.boolean_mask(in1, in2) * tf.cast(in2, tf.int64)\n```",
            "```python\n    return tf.boolean_mask(in1, in2)\n```",
            "```python\n    result = tf.where(in2, in1, tf.zeros_like(in1))\n    return result\n```",
            "```python\n    return tf.boolean_mask(in1, in2)\n```",
            "```python\n    return tf.where(in2, in1, tf.zeros_like(in1))\n```",
            "```python\n    return tf.where(in2, in1, tf.zeros_like(in1))\n```",
            "```python\n    return tf.boolean_mask(in1, in2) * tf.cast(tf.sequence_mask(tf.reduce_sum(tf.cast(in2, tf.int32), axis=1), tf.shape(in1)[1]), dtype=tf.int32)\n```",
            "```python\n    return tf.boolean_mask(in1, in2)*tf.cast(in2, tf.int32)\n```",
            "```python\n    output = tf.where(in2, in1, 0)\n    return output\n```",
            "```python\n    return tf.cast(tf.where(in2, in1, 0), tf.int32)\n```",
            "```python\n    return tf.where(in2, in1, tf.zeros_like(in1))\n```",
            "```python\n    return tf.where(in2, in1, tf.zeros_like(in1))\n```"
        ],
        "tf_operators": {
            "tf.sequence_mask": 4,
            "tf.zeros_like": 7,
            "tf.where": 11,
            "tf.reduce_sum": 4,
            "tf.tile": 1,
            "tf.cast": 8,
            "tf.int32": 7,
            "tf.shape": 3,
            "tf.reshape": 1,
            "tf.boolean_mask": 8,
            "tf.int64": 2,
            "tf.multiply": 1,
            "tf.constant": 1,
            "tf.reduce_max": 1,
            "tf.range": 1
        },
        "coverage_percentage": 60.0,
        "total_covered": 3,
        "total_in_target": 5,
        "parsed_constants": [
            [
                1
            ],
            [
                1,
                1,
                1,
                2
            ],
            [
                1
            ],
            [],
            [],
            [
                0
            ],
            [
                0
            ],
            [
                1
            ],
            [],
            [],
            [],
            [],
            [],
            [],
            [
                1,
                1
            ],
            [],
            [
                0
            ],
            [
                0
            ],
            [],
            []
        ],
        "all_constants": [
            0,
            1,
            2
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 1,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 2,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 1,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 2,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 9,
            "tf_bool": 0,
            "axis": 1,
            "tf_float32": 0,
            "input_var": 55,
            "tf_int64": 2,
            "provided": 0,
            "shape": 0,
            "shape_tuple": 0,
            "common": 12
        }
    },
    {
        "name": "stackoverflow_48",
        "description": "find the indices of all elements",
        "target_program": "tf.cast(tf.argmax(tf.cast(tf.equal(in1, tf.expand_dims(in2, 1)), tf.int32), axis=1), tf.int32)",
        "source": "https://stackoverflow.com/questions/58481332/getting-the-indices-of-several-elements-in-a-tensorflow-at-once",
        "constants": "[]",
        "examples": {
            "inputs": "[[32, 53, 45, 38, 29, 89, 64, 23],[38, 53, 89, 38, 32, 64],]",
            "outputs": "[3, 1, 5, 3, 0, 6]"
        },
        "completions": [
            "```python\ndef transform(in1, in2):\n    return tf.argsort(in1, stable=True)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.argsort(in1, stable=True)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.argsort(tf.constant(in1), stable=True), tf.argsort(tf.constant(in1), tf.constant(in2), stable=True)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.argsort(tf.constant(in1), axis=-1, stable=True).numpy()[tf.argsort(in1, in2)].numpy()\n```",
            "```python\ndef transform(in1, in2):\n    return tf.argsort(in1).numpy()[tf.searchsorted(tf.sort(in1), in2, side='left').numpy()]\n```",
            "```python\ndef transform(in1, in2):\n    return tf.argsort(in1, stable=True)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.argsort(in1, stable=True)\n```  ",
            "```python\ndef transform(in1, in2):\n    return tf.argsort(in1, stable=True)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.cast(tf.argsort(in1, stable=True), tf.int32)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.argsort(in1, stable=True)[tf.searchsorted(tf.sort(in1), in2, side='right')]\n```",
            "```python\ndef transform(in1, in2):\n    return tf.argsort(in1, stable=True)[tf.argsort(in2, stable=True)]\n```",
            "```python\n    return tf.argsort(in1)[tf.argsort(in2)]\n```  ",
            "```python\ndef transform(in1, in2):\n    return tf.argsort(in1, axis=-1)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.argsort(in1, stable=True)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.argsort(in1, axis=-1)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.argsort(tf.convert_to_tensor(in2), axis=-1).numpy()\n```",
            "```python\n    return tf.argsort(in1, stable=True).numpy()[tf.argsort(in2, stable=True).numpy()]\n```",
            "```python\ndef transform(in1, in2):\n    return tf.argsort(in1)[tf.argsort(in2)]\n```",
            "```python\ndef transform(in1, in2):\n    return tf.argsort(in1, stable=True)\n```",
            "```python\ndef transform(in1, in2):\n    indices = tf.where(tf.equal(tf.expand_dims(in2, axis=1), in1))\n    indices = tf.squeeze(indices, axis=1)\n    return indices\n```"
        ],
        "tf_operators": {
            "tf.argsort": 19,
            "tf.constant": 2,
            "tf.sort": 2,
            "tf.searchsorted": 2,
            "tf.cast": 1,
            "tf.int32": 1,
            "tf.convert_to_tensor": 1,
            "tf.expand_dims": 1,
            "tf.where": 1,
            "tf.equal": 1,
            "tf.squeeze": 1
        },
        "coverage_percentage": 80.0,
        "total_covered": 4,
        "total_in_target": 5,
        "parsed_constants": [
            [],
            [],
            [],
            [
                -1
            ],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [
                -1
            ],
            [],
            [
                -1
            ],
            [
                -1
            ],
            [],
            [],
            [],
            [
                1,
                1
            ]
        ],
        "all_constants": [
            1,
            -1
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 1,
            "tf_bool": 0,
            "axis": 0,
            "tf_float32": 0,
            "input_var": 37,
            "tf_int64": 0,
            "provided": 0,
            "shape": 0,
            "shape_tuple": 0,
            "common": 22
        }
    },
    {
        "name": "stackoverflow_49",
        "description": "multiply tensors by scalars in a batched way",
        "target_program": "tf.transpose(tf.multiply(in2, tf.transpose(in1)))",
        "source": "https://stackoverflow.com/questions/58466562/given-a-batch-of-n-images-how-to-scalar-multiply-each-image-by-a-different-scal",
        "constants": "[]",
        "examples": {
            "inputs": "[[[[[0.1, 0.2, 0.3], [0.4, 0.5, 0.6]]], [[[0.8, 1.0, 0.0], [0.6, 0.4, 0.2]]], [[[0.9, 0.8, 0.7], [0.1, 0.2, 0.3]]]],[2.0, 0.5, 1.0],]",
            "outputs": "[[[[0.2, 0.4, 0.6], [0.8, 1.0, 1.2]]],    [[[0.4, 0.5, 0.0], [0.3, 0.2, 0.1]]],    [[[0.9, 0.8, 0.7], [0.1, 0.2, 0.3]]]]"
        },
        "completions": [
            "```python\n    return tf.multiply(in1, tf.reshape(in2, (1, 1, 1, -1)))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, axis=-1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1))\n```",
            "```python\n     tf.multiply(in1, tf.reshape(in2, (1, 1, 1, -1)))\n```",
            "```python\n     tf.multiply(in1, tf.reshape(in2, (3, 1, 1, 1)))\n```",
            "```python\n     tf.multiply(in1, tf.reshape(in2, (1, 1, 1, -1)))\n```",
            "```python\nresult = tf.multiply(in1, tf.reshape(in2, [1, 1, 1, -1]))\nreturn result\n```",
            "```python\nresult = tf.multiply(in1, tf.reshape(in2, (1, 1, 1, -1)))\nreturn result\n```",
            "```python\n    return tf.multiply(in1, tf.reshape(in2, (1, 1, 1, -1)))\n```",
            "```python\n    return tf.multiply(in1, tf.reshape(in2, (1, 1, 1, -1)))\n```",
            "```python\n     tf.multiply(in1, in2)\n```",
            "```python\noutput = tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, axis=-1), axis=-1))\nreturn output\n```",
            "```python\n     tf.multiply(in1, tf.reshape(in2, (1, 1, 1, -1)))\n```",
            "```python\n    result = tf.multiply(in1, tf.expand_dims(in2, axis=(1,2)))\n    return result\n```",
            "```python\n     tf.multiply(in1, tf.reshape(in2, [1, 1, 1, -1]))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, axis=-1), axis=-1))\n```",
            "```python\n    return tf.multiply(in1, tf.reshape(in2, [1, 1, 1, -1]))\n```",
            "```python\n    return tf.multiply(in1, tf.reshape(in2, [1, 1, 1, -1]))\n```",
            "```python\n    batched_scalars = tf.expand_dims(tf.expand_dims(tf.expand_dims(in2, axis=-1), axis=-1), axis=-1)\n    result = tf.multiply(in1, batched_scalars)\n    return result\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1))\n```  "
        ],
        "tf_operators": {
            "tf.multiply": 20,
            "tf.reshape": 12,
            "tf.expand_dims": 7
        },
        "coverage_percentage": 50.0,
        "total_covered": 1,
        "total_in_target": 2,
        "parsed_constants": [
            [
                1,
                1,
                1,
                -1
            ],
            [
                -1
            ],
            [
                -1,
                -1
            ],
            [
                1,
                1,
                1,
                -1
            ],
            [
                3,
                1,
                1,
                1
            ],
            [
                1,
                1,
                1,
                -1
            ],
            [
                1,
                1,
                1,
                -1
            ],
            [
                1,
                1,
                1,
                -1
            ],
            [
                1,
                1,
                1,
                -1
            ],
            [
                1,
                1,
                1,
                -1
            ],
            [],
            [
                -1,
                -1
            ],
            [
                1,
                1,
                1,
                -1
            ],
            [
                1,
                2
            ],
            [
                1,
                1,
                1,
                -1
            ],
            [
                -1,
                -1
            ],
            [
                1,
                1,
                1,
                -1
            ],
            [
                1,
                1,
                1,
                -1
            ],
            [
                -1,
                -1,
                -1
            ],
            [
                -1,
                -1
            ]
        ],
        "all_constants": [
            1,
            2,
            3,
            -1
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 0,
            "tf_bool": 0,
            "axis": 0,
            "tf_float32": 0,
            "input_var": 40,
            "tf_int64": 0,
            "provided": 0,
            "shape": 0,
            "shape_tuple": 0,
            "common": 35
        }
    },
    {
        "name": "stackoverflow_50",
        "description": "create a binary matrix where a specified column is set to one",
        "target_program": "tf.cast(tf.one_hot(tf.fill((in1,), in3), in2), tf.int32)",
        "source": "https://stackoverflow.com/questions/58537495/tensorflow-initialize-a-sparse-tensor-with-only-one-line-column-not-zero",
        "constants": "[]",
        "examples": {
            "inputs": "[5]",
            "outputs": "[[0, 0, 0, 1, 0, 0],    [0, 0, 0, 1, 0, 0],    [0, 0, 0, 1, 0, 0],    [0, 0, 0, 1, 0, 0],    [0, 0, 0, 1, 0, 0]]"
        },
        "completions": [
            "```python\nimport tensorflow as tf\n\ndef transform(in1):\n    return tf.one_hot(in1, depth=6)\n```",
            "```python\ndef transform(in1):\n    col_idx = in1\n    num_rows = 5\n    num_cols = 6\n    indices = tf.transpose(tf.stack([tf.range(num_rows), tf.fill([num_rows], col_idx)], axis=1))\n    updates = tf.ones([num_rows])\n    matrix = tf.tensor_scatter_nd_update(tf.zeros([num_rows, num_cols], dtype=tf.int32), indices, updates)\n    return matrix\n```",
            "```python\n    return tf.one_hot(in1, depth=6)\n```",
            "```python\ndef transform(in1):\n    return tf.sequence_mask(in1, maxlen=6)\n```",
            "```python\n    def transform(in1):\n        import tensorflow as tf\n        mat = tf.zeros([5, 6], dtype=tf.int32)\n        index = in1\n        mat = tf.tensor_scatter_nd_update(mat, [[i, index] for i in range(5)], tf.ones(5, dtype=tf.int32))\n        return mat\n```",
            "```python\ndef transform(in1):\n    return tf.one_hot(in1, depth=6)\n```",
            "```python\ndef transform(in1):\n    return tf.repeat(tf.expand_dims(tf.one_hot(in1, depth=6), axis=0), repeats=5, axis=0)\n```",
            "```python\ndef transform(in1):\n    column_index = in1\n    row_count = 5\n    result = tf.one_hot(column_index, row_count)\n    return result\n```",
            "```python\ndef transform(in1):\n    return tf.sequence_mask(in1, 6)[:, in1-1:in1]\n```",
            "```python\ndef transform(in1):\n    return tf.one_hot(in1, 6)\n```",
            "```python\n    result = tf.sequence_mask(in1, 6)\n    result = tf.cast(result, tf.int32)\n    result = tf.expand_dims(result, axis=1)\n    result = tf.tile(result, [1, 6, 1])\n    return result\n```",
            "```python\ndef transform(in1):\n    column_index = in1\n    matrix_shape = (5, 6)\n    indices = tf.constant([[0, column_index]])\n    updates = tf.constant(1)\n    result = tf.tensor_scatter_nd_update(tf.zeros(matrix_shape), indices, updates)\n    return result\n```",
            "```python\n    return tf.sequence_mask(in1, maxlen=6)\n```",
            "```python\ndef transform(in1):\n    col_idx = in1\n    num_rows = 5\n    num_cols = 6\n    indices = tf.constant([[i, col_idx] for i in range(num_rows)], dtype=tf.int64)\n    updates = tf.ones((num_rows,), dtype=tf.int32)\n    matrix = tf.scatter_nd(indices, updates, shape=[num_rows, num_cols])\n    return matrix\n```",
            "```python\ndef transform(in1):\n    return tf.one_hot(in1, depth=6)\n```",
            "```python\ndef transform(in1):\n    column_index = 3\n    num_rows = 5\n    result = tf.one_hot(indices=column_index, depth=num_rows)\n    return result\n```",
            "```python\ndef transform(in1):\n    return tf.sequence_mask(in1, in1 + 1)\n```",
            "```python\ndef transform(in1):\n    col_index = in1\n    num_rows = 5\n    num_columns = 6\n    indices = tf.constant([[tf.range(num_rows)], [col_index * tf.ones(num_rows, dtype=tf.int32)]], dtype=tf.int32)\n    updates = tf.ones(num_rows, dtype=tf.int32)\n    result = tf.scatter_nd(indices=tf.transpose(indices), updates=updates, shape=[num_rows, num_columns])\n    return result\n```",
            "```python\n    return tf.sequence_mask(in1, maxlen=6)\n```",
            "```python\ndef transform(in1):\n    return tf.one_hot(in1, 6)\n```"
        ],
        "tf_operators": {
            "tf.one_hot": 9,
            "tf.fill": 1,
            "tf.int32": 5,
            "tf.ones": 4,
            "tf.stack": 1,
            "tf.tensor_scatter_nd_update": 3,
            "tf.transpose": 2,
            "tf.zeros": 3,
            "tf.range": 2,
            "tf.sequence_mask": 6,
            "tf.expand_dims": 2,
            "tf.repeat": 1,
            "tf.tile": 1,
            "tf.cast": 1,
            "tf.constant": 3,
            "tf.scatter_nd": 2,
            "tf.int64": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 4,
        "total_in_target": 4,
        "parsed_constants": [
            [
                6
            ],
            [
                5,
                6,
                1
            ],
            [
                6
            ],
            [
                6
            ],
            [],
            [
                6
            ],
            [
                6,
                0,
                5,
                0
            ],
            [
                5
            ],
            [
                6,
                1
            ],
            [
                6
            ],
            [
                6,
                1,
                1,
                6,
                1
            ],
            [
                5,
                6,
                0,
                1
            ],
            [
                6
            ],
            [
                5,
                6
            ],
            [
                6
            ],
            [
                3,
                5
            ],
            [
                1
            ],
            [
                5,
                6
            ],
            [
                6
            ],
            [
                6
            ]
        ],
        "all_constants": [
            0,
            1,
            3,
            5,
            6
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 5,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            null,
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 5,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 1,
                "tf_bool": 0,
                "input_var": 5,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 0,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 3,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 5,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "tf_int32": 6,
            "tf_bool": 0,
            "axis": 0,
            "tf_float32": 0,
            "input_var": 37,
            "tf_int64": 1,
            "provided": 23,
            "shape": 0,
            "shape_tuple": 1,
            "common": 10
        }
    }
]